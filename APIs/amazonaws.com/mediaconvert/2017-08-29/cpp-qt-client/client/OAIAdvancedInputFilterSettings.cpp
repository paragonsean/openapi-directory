/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedInputFilterSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedInputFilterSettings::OAIAdvancedInputFilterSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedInputFilterSettings::OAIAdvancedInputFilterSettings() {
    this->initializeModel();
}

OAIAdvancedInputFilterSettings::~OAIAdvancedInputFilterSettings() {}

void OAIAdvancedInputFilterSettings::initializeModel() {

    m_add_texture_isSet = false;
    m_add_texture_isValid = false;

    m_sharpening_isSet = false;
    m_sharpening_isValid = false;
}

void OAIAdvancedInputFilterSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedInputFilterSettings::fromJsonObject(QJsonObject json) {

    m_add_texture_isValid = ::OpenAPI::fromJsonValue(m_add_texture, json[QString("AddTexture")]);
    m_add_texture_isSet = !json[QString("AddTexture")].isNull() && m_add_texture_isValid;

    m_sharpening_isValid = ::OpenAPI::fromJsonValue(m_sharpening, json[QString("Sharpening")]);
    m_sharpening_isSet = !json[QString("Sharpening")].isNull() && m_sharpening_isValid;
}

QString OAIAdvancedInputFilterSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedInputFilterSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_add_texture.isSet()) {
        obj.insert(QString("AddTexture"), ::OpenAPI::toJsonValue(m_add_texture));
    }
    if (m_sharpening.isSet()) {
        obj.insert(QString("Sharpening"), ::OpenAPI::toJsonValue(m_sharpening));
    }
    return obj;
}

OAIAdvancedInputFilterAddTexture OAIAdvancedInputFilterSettings::getAddTexture() const {
    return m_add_texture;
}
void OAIAdvancedInputFilterSettings::setAddTexture(const OAIAdvancedInputFilterAddTexture &add_texture) {
    m_add_texture = add_texture;
    m_add_texture_isSet = true;
}

bool OAIAdvancedInputFilterSettings::is_add_texture_Set() const{
    return m_add_texture_isSet;
}

bool OAIAdvancedInputFilterSettings::is_add_texture_Valid() const{
    return m_add_texture_isValid;
}

OAIAdvancedInputFilterSharpen OAIAdvancedInputFilterSettings::getSharpening() const {
    return m_sharpening;
}
void OAIAdvancedInputFilterSettings::setSharpening(const OAIAdvancedInputFilterSharpen &sharpening) {
    m_sharpening = sharpening;
    m_sharpening_isSet = true;
}

bool OAIAdvancedInputFilterSettings::is_sharpening_Set() const{
    return m_sharpening_isSet;
}

bool OAIAdvancedInputFilterSettings::is_sharpening_Valid() const{
    return m_sharpening_isValid;
}

bool OAIAdvancedInputFilterSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_texture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharpening.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedInputFilterSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
