/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAv1Settings.h
 *
 * Required when you set Codec, under VideoDescription&gt;CodecSettings to the value AV1.
 */

#ifndef OAIAv1Settings_H
#define OAIAv1Settings_H

#include <QJsonObject>

#include "OAIAv1AdaptiveQuantization.h"
#include "OAIAv1BitDepth.h"
#include "OAIAv1FramerateControl.h"
#include "OAIAv1FramerateConversionAlgorithm.h"
#include "OAIAv1RateControlMode.h"
#include "OAIAv1Settings_QvbrSettings.h"
#include "OAIAv1SpatialAdaptiveQuantization.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAv1Settings_QvbrSettings;

class OAIAv1Settings : public OAIObject {
public:
    OAIAv1Settings();
    OAIAv1Settings(QString json);
    ~OAIAv1Settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAv1AdaptiveQuantization getAdaptiveQuantization() const;
    void setAdaptiveQuantization(const OAIAv1AdaptiveQuantization &adaptive_quantization);
    bool is_adaptive_quantization_Set() const;
    bool is_adaptive_quantization_Valid() const;

    OAIAv1BitDepth getBitDepth() const;
    void setBitDepth(const OAIAv1BitDepth &bit_depth);
    bool is_bit_depth_Set() const;
    bool is_bit_depth_Valid() const;

    OAIAv1FramerateControl getFramerateControl() const;
    void setFramerateControl(const OAIAv1FramerateControl &framerate_control);
    bool is_framerate_control_Set() const;
    bool is_framerate_control_Valid() const;

    OAIAv1FramerateConversionAlgorithm getFramerateConversionAlgorithm() const;
    void setFramerateConversionAlgorithm(const OAIAv1FramerateConversionAlgorithm &framerate_conversion_algorithm);
    bool is_framerate_conversion_algorithm_Set() const;
    bool is_framerate_conversion_algorithm_Valid() const;

    qint32 getFramerateDenominator() const;
    void setFramerateDenominator(const qint32 &framerate_denominator);
    bool is_framerate_denominator_Set() const;
    bool is_framerate_denominator_Valid() const;

    qint32 getFramerateNumerator() const;
    void setFramerateNumerator(const qint32 &framerate_numerator);
    bool is_framerate_numerator_Set() const;
    bool is_framerate_numerator_Valid() const;

    double getGopSize() const;
    void setGopSize(const double &gop_size);
    bool is_gop_size_Set() const;
    bool is_gop_size_Valid() const;

    qint32 getMaxBitrate() const;
    void setMaxBitrate(const qint32 &max_bitrate);
    bool is_max_bitrate_Set() const;
    bool is_max_bitrate_Valid() const;

    qint32 getNumberBFramesBetweenReferenceFrames() const;
    void setNumberBFramesBetweenReferenceFrames(const qint32 &number_b_frames_between_reference_frames);
    bool is_number_b_frames_between_reference_frames_Set() const;
    bool is_number_b_frames_between_reference_frames_Valid() const;

    OAIAv1Settings_QvbrSettings getQvbrSettings() const;
    void setQvbrSettings(const OAIAv1Settings_QvbrSettings &qvbr_settings);
    bool is_qvbr_settings_Set() const;
    bool is_qvbr_settings_Valid() const;

    OAIAv1RateControlMode getRateControlMode() const;
    void setRateControlMode(const OAIAv1RateControlMode &rate_control_mode);
    bool is_rate_control_mode_Set() const;
    bool is_rate_control_mode_Valid() const;

    qint32 getSlices() const;
    void setSlices(const qint32 &slices);
    bool is_slices_Set() const;
    bool is_slices_Valid() const;

    OAIAv1SpatialAdaptiveQuantization getSpatialAdaptiveQuantization() const;
    void setSpatialAdaptiveQuantization(const OAIAv1SpatialAdaptiveQuantization &spatial_adaptive_quantization);
    bool is_spatial_adaptive_quantization_Set() const;
    bool is_spatial_adaptive_quantization_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAv1AdaptiveQuantization m_adaptive_quantization;
    bool m_adaptive_quantization_isSet;
    bool m_adaptive_quantization_isValid;

    OAIAv1BitDepth m_bit_depth;
    bool m_bit_depth_isSet;
    bool m_bit_depth_isValid;

    OAIAv1FramerateControl m_framerate_control;
    bool m_framerate_control_isSet;
    bool m_framerate_control_isValid;

    OAIAv1FramerateConversionAlgorithm m_framerate_conversion_algorithm;
    bool m_framerate_conversion_algorithm_isSet;
    bool m_framerate_conversion_algorithm_isValid;

    qint32 m_framerate_denominator;
    bool m_framerate_denominator_isSet;
    bool m_framerate_denominator_isValid;

    qint32 m_framerate_numerator;
    bool m_framerate_numerator_isSet;
    bool m_framerate_numerator_isValid;

    double m_gop_size;
    bool m_gop_size_isSet;
    bool m_gop_size_isValid;

    qint32 m_max_bitrate;
    bool m_max_bitrate_isSet;
    bool m_max_bitrate_isValid;

    qint32 m_number_b_frames_between_reference_frames;
    bool m_number_b_frames_between_reference_frames_isSet;
    bool m_number_b_frames_between_reference_frames_isValid;

    OAIAv1Settings_QvbrSettings m_qvbr_settings;
    bool m_qvbr_settings_isSet;
    bool m_qvbr_settings_isValid;

    OAIAv1RateControlMode m_rate_control_mode;
    bool m_rate_control_mode_isSet;
    bool m_rate_control_mode_isValid;

    qint32 m_slices;
    bool m_slices_isSet;
    bool m_slices_isValid;

    OAIAv1SpatialAdaptiveQuantization m_spatial_adaptive_quantization;
    bool m_spatial_adaptive_quantization_isSet;
    bool m_spatial_adaptive_quantization_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAv1Settings)

#endif // OAIAv1Settings_H
