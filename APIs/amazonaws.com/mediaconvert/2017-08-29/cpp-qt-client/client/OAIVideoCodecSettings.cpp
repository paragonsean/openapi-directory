/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoCodecSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoCodecSettings::OAIVideoCodecSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoCodecSettings::OAIVideoCodecSettings() {
    this->initializeModel();
}

OAIVideoCodecSettings::~OAIVideoCodecSettings() {}

void OAIVideoCodecSettings::initializeModel() {

    m_av1_settings_isSet = false;
    m_av1_settings_isValid = false;

    m_avc_intra_settings_isSet = false;
    m_avc_intra_settings_isValid = false;

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_frame_capture_settings_isSet = false;
    m_frame_capture_settings_isValid = false;

    m_h264_settings_isSet = false;
    m_h264_settings_isValid = false;

    m_h265_settings_isSet = false;
    m_h265_settings_isValid = false;

    m_mpeg2_settings_isSet = false;
    m_mpeg2_settings_isValid = false;

    m_prores_settings_isSet = false;
    m_prores_settings_isValid = false;

    m_vc3_settings_isSet = false;
    m_vc3_settings_isValid = false;

    m_vp8_settings_isSet = false;
    m_vp8_settings_isValid = false;

    m_vp9_settings_isSet = false;
    m_vp9_settings_isValid = false;

    m_xavc_settings_isSet = false;
    m_xavc_settings_isValid = false;
}

void OAIVideoCodecSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoCodecSettings::fromJsonObject(QJsonObject json) {

    m_av1_settings_isValid = ::OpenAPI::fromJsonValue(m_av1_settings, json[QString("Av1Settings")]);
    m_av1_settings_isSet = !json[QString("Av1Settings")].isNull() && m_av1_settings_isValid;

    m_avc_intra_settings_isValid = ::OpenAPI::fromJsonValue(m_avc_intra_settings, json[QString("AvcIntraSettings")]);
    m_avc_intra_settings_isSet = !json[QString("AvcIntraSettings")].isNull() && m_avc_intra_settings_isValid;

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("Codec")]);
    m_codec_isSet = !json[QString("Codec")].isNull() && m_codec_isValid;

    m_frame_capture_settings_isValid = ::OpenAPI::fromJsonValue(m_frame_capture_settings, json[QString("FrameCaptureSettings")]);
    m_frame_capture_settings_isSet = !json[QString("FrameCaptureSettings")].isNull() && m_frame_capture_settings_isValid;

    m_h264_settings_isValid = ::OpenAPI::fromJsonValue(m_h264_settings, json[QString("H264Settings")]);
    m_h264_settings_isSet = !json[QString("H264Settings")].isNull() && m_h264_settings_isValid;

    m_h265_settings_isValid = ::OpenAPI::fromJsonValue(m_h265_settings, json[QString("H265Settings")]);
    m_h265_settings_isSet = !json[QString("H265Settings")].isNull() && m_h265_settings_isValid;

    m_mpeg2_settings_isValid = ::OpenAPI::fromJsonValue(m_mpeg2_settings, json[QString("Mpeg2Settings")]);
    m_mpeg2_settings_isSet = !json[QString("Mpeg2Settings")].isNull() && m_mpeg2_settings_isValid;

    m_prores_settings_isValid = ::OpenAPI::fromJsonValue(m_prores_settings, json[QString("ProresSettings")]);
    m_prores_settings_isSet = !json[QString("ProresSettings")].isNull() && m_prores_settings_isValid;

    m_vc3_settings_isValid = ::OpenAPI::fromJsonValue(m_vc3_settings, json[QString("Vc3Settings")]);
    m_vc3_settings_isSet = !json[QString("Vc3Settings")].isNull() && m_vc3_settings_isValid;

    m_vp8_settings_isValid = ::OpenAPI::fromJsonValue(m_vp8_settings, json[QString("Vp8Settings")]);
    m_vp8_settings_isSet = !json[QString("Vp8Settings")].isNull() && m_vp8_settings_isValid;

    m_vp9_settings_isValid = ::OpenAPI::fromJsonValue(m_vp9_settings, json[QString("Vp9Settings")]);
    m_vp9_settings_isSet = !json[QString("Vp9Settings")].isNull() && m_vp9_settings_isValid;

    m_xavc_settings_isValid = ::OpenAPI::fromJsonValue(m_xavc_settings, json[QString("XavcSettings")]);
    m_xavc_settings_isSet = !json[QString("XavcSettings")].isNull() && m_xavc_settings_isValid;
}

QString OAIVideoCodecSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoCodecSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_av1_settings.isSet()) {
        obj.insert(QString("Av1Settings"), ::OpenAPI::toJsonValue(m_av1_settings));
    }
    if (m_avc_intra_settings.isSet()) {
        obj.insert(QString("AvcIntraSettings"), ::OpenAPI::toJsonValue(m_avc_intra_settings));
    }
    if (m_codec.isSet()) {
        obj.insert(QString("Codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_frame_capture_settings.isSet()) {
        obj.insert(QString("FrameCaptureSettings"), ::OpenAPI::toJsonValue(m_frame_capture_settings));
    }
    if (m_h264_settings.isSet()) {
        obj.insert(QString("H264Settings"), ::OpenAPI::toJsonValue(m_h264_settings));
    }
    if (m_h265_settings.isSet()) {
        obj.insert(QString("H265Settings"), ::OpenAPI::toJsonValue(m_h265_settings));
    }
    if (m_mpeg2_settings.isSet()) {
        obj.insert(QString("Mpeg2Settings"), ::OpenAPI::toJsonValue(m_mpeg2_settings));
    }
    if (m_prores_settings.isSet()) {
        obj.insert(QString("ProresSettings"), ::OpenAPI::toJsonValue(m_prores_settings));
    }
    if (m_vc3_settings.isSet()) {
        obj.insert(QString("Vc3Settings"), ::OpenAPI::toJsonValue(m_vc3_settings));
    }
    if (m_vp8_settings.isSet()) {
        obj.insert(QString("Vp8Settings"), ::OpenAPI::toJsonValue(m_vp8_settings));
    }
    if (m_vp9_settings.isSet()) {
        obj.insert(QString("Vp9Settings"), ::OpenAPI::toJsonValue(m_vp9_settings));
    }
    if (m_xavc_settings.isSet()) {
        obj.insert(QString("XavcSettings"), ::OpenAPI::toJsonValue(m_xavc_settings));
    }
    return obj;
}

OAIVideoCodecSettings_Av1Settings OAIVideoCodecSettings::getAv1Settings() const {
    return m_av1_settings;
}
void OAIVideoCodecSettings::setAv1Settings(const OAIVideoCodecSettings_Av1Settings &av1_settings) {
    m_av1_settings = av1_settings;
    m_av1_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_av1_settings_Set() const{
    return m_av1_settings_isSet;
}

bool OAIVideoCodecSettings::is_av1_settings_Valid() const{
    return m_av1_settings_isValid;
}

OAIVideoCodecSettings_AvcIntraSettings OAIVideoCodecSettings::getAvcIntraSettings() const {
    return m_avc_intra_settings;
}
void OAIVideoCodecSettings::setAvcIntraSettings(const OAIVideoCodecSettings_AvcIntraSettings &avc_intra_settings) {
    m_avc_intra_settings = avc_intra_settings;
    m_avc_intra_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_avc_intra_settings_Set() const{
    return m_avc_intra_settings_isSet;
}

bool OAIVideoCodecSettings::is_avc_intra_settings_Valid() const{
    return m_avc_intra_settings_isValid;
}

OAIVideoCodec OAIVideoCodecSettings::getCodec() const {
    return m_codec;
}
void OAIVideoCodecSettings::setCodec(const OAIVideoCodec &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAIVideoCodecSettings::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAIVideoCodecSettings::is_codec_Valid() const{
    return m_codec_isValid;
}

OAIVideoCodecSettings_FrameCaptureSettings OAIVideoCodecSettings::getFrameCaptureSettings() const {
    return m_frame_capture_settings;
}
void OAIVideoCodecSettings::setFrameCaptureSettings(const OAIVideoCodecSettings_FrameCaptureSettings &frame_capture_settings) {
    m_frame_capture_settings = frame_capture_settings;
    m_frame_capture_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_frame_capture_settings_Set() const{
    return m_frame_capture_settings_isSet;
}

bool OAIVideoCodecSettings::is_frame_capture_settings_Valid() const{
    return m_frame_capture_settings_isValid;
}

OAIVideoCodecSettings_H264Settings OAIVideoCodecSettings::getH264Settings() const {
    return m_h264_settings;
}
void OAIVideoCodecSettings::setH264Settings(const OAIVideoCodecSettings_H264Settings &h264_settings) {
    m_h264_settings = h264_settings;
    m_h264_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_h264_settings_Set() const{
    return m_h264_settings_isSet;
}

bool OAIVideoCodecSettings::is_h264_settings_Valid() const{
    return m_h264_settings_isValid;
}

OAIVideoCodecSettings_H265Settings OAIVideoCodecSettings::getH265Settings() const {
    return m_h265_settings;
}
void OAIVideoCodecSettings::setH265Settings(const OAIVideoCodecSettings_H265Settings &h265_settings) {
    m_h265_settings = h265_settings;
    m_h265_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_h265_settings_Set() const{
    return m_h265_settings_isSet;
}

bool OAIVideoCodecSettings::is_h265_settings_Valid() const{
    return m_h265_settings_isValid;
}

OAIVideoCodecSettings_Mpeg2Settings OAIVideoCodecSettings::getMpeg2Settings() const {
    return m_mpeg2_settings;
}
void OAIVideoCodecSettings::setMpeg2Settings(const OAIVideoCodecSettings_Mpeg2Settings &mpeg2_settings) {
    m_mpeg2_settings = mpeg2_settings;
    m_mpeg2_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_mpeg2_settings_Set() const{
    return m_mpeg2_settings_isSet;
}

bool OAIVideoCodecSettings::is_mpeg2_settings_Valid() const{
    return m_mpeg2_settings_isValid;
}

OAIVideoCodecSettings_ProresSettings OAIVideoCodecSettings::getProresSettings() const {
    return m_prores_settings;
}
void OAIVideoCodecSettings::setProresSettings(const OAIVideoCodecSettings_ProresSettings &prores_settings) {
    m_prores_settings = prores_settings;
    m_prores_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_prores_settings_Set() const{
    return m_prores_settings_isSet;
}

bool OAIVideoCodecSettings::is_prores_settings_Valid() const{
    return m_prores_settings_isValid;
}

OAIVideoCodecSettings_Vc3Settings OAIVideoCodecSettings::getVc3Settings() const {
    return m_vc3_settings;
}
void OAIVideoCodecSettings::setVc3Settings(const OAIVideoCodecSettings_Vc3Settings &vc3_settings) {
    m_vc3_settings = vc3_settings;
    m_vc3_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_vc3_settings_Set() const{
    return m_vc3_settings_isSet;
}

bool OAIVideoCodecSettings::is_vc3_settings_Valid() const{
    return m_vc3_settings_isValid;
}

OAIVideoCodecSettings_Vp8Settings OAIVideoCodecSettings::getVp8Settings() const {
    return m_vp8_settings;
}
void OAIVideoCodecSettings::setVp8Settings(const OAIVideoCodecSettings_Vp8Settings &vp8_settings) {
    m_vp8_settings = vp8_settings;
    m_vp8_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_vp8_settings_Set() const{
    return m_vp8_settings_isSet;
}

bool OAIVideoCodecSettings::is_vp8_settings_Valid() const{
    return m_vp8_settings_isValid;
}

OAIVideoCodecSettings_Vp9Settings OAIVideoCodecSettings::getVp9Settings() const {
    return m_vp9_settings;
}
void OAIVideoCodecSettings::setVp9Settings(const OAIVideoCodecSettings_Vp9Settings &vp9_settings) {
    m_vp9_settings = vp9_settings;
    m_vp9_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_vp9_settings_Set() const{
    return m_vp9_settings_isSet;
}

bool OAIVideoCodecSettings::is_vp9_settings_Valid() const{
    return m_vp9_settings_isValid;
}

OAIVideoCodecSettings_XavcSettings OAIVideoCodecSettings::getXavcSettings() const {
    return m_xavc_settings;
}
void OAIVideoCodecSettings::setXavcSettings(const OAIVideoCodecSettings_XavcSettings &xavc_settings) {
    m_xavc_settings = xavc_settings;
    m_xavc_settings_isSet = true;
}

bool OAIVideoCodecSettings::is_xavc_settings_Set() const{
    return m_xavc_settings_isSet;
}

bool OAIVideoCodecSettings::is_xavc_settings_Valid() const{
    return m_xavc_settings_isValid;
}

bool OAIVideoCodecSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_av1_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avc_intra_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_capture_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_h264_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_h265_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpeg2_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prores_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vc3_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vp8_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vp9_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xavc_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoCodecSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
