/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIColorCorrector_Hdr10Metadata.h
 *
 * 
 */

#ifndef OAIColorCorrector_Hdr10Metadata_H
#define OAIColorCorrector_Hdr10Metadata_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIColorCorrector_Hdr10Metadata : public OAIObject {
public:
    OAIColorCorrector_Hdr10Metadata();
    OAIColorCorrector_Hdr10Metadata(QString json);
    ~OAIColorCorrector_Hdr10Metadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBluePrimaryX() const;
    void setBluePrimaryX(const qint32 &blue_primary_x);
    bool is_blue_primary_x_Set() const;
    bool is_blue_primary_x_Valid() const;

    qint32 getBluePrimaryY() const;
    void setBluePrimaryY(const qint32 &blue_primary_y);
    bool is_blue_primary_y_Set() const;
    bool is_blue_primary_y_Valid() const;

    qint32 getGreenPrimaryX() const;
    void setGreenPrimaryX(const qint32 &green_primary_x);
    bool is_green_primary_x_Set() const;
    bool is_green_primary_x_Valid() const;

    qint32 getGreenPrimaryY() const;
    void setGreenPrimaryY(const qint32 &green_primary_y);
    bool is_green_primary_y_Set() const;
    bool is_green_primary_y_Valid() const;

    qint32 getMaxContentLightLevel() const;
    void setMaxContentLightLevel(const qint32 &max_content_light_level);
    bool is_max_content_light_level_Set() const;
    bool is_max_content_light_level_Valid() const;

    qint32 getMaxFrameAverageLightLevel() const;
    void setMaxFrameAverageLightLevel(const qint32 &max_frame_average_light_level);
    bool is_max_frame_average_light_level_Set() const;
    bool is_max_frame_average_light_level_Valid() const;

    qint32 getMaxLuminance() const;
    void setMaxLuminance(const qint32 &max_luminance);
    bool is_max_luminance_Set() const;
    bool is_max_luminance_Valid() const;

    qint32 getMinLuminance() const;
    void setMinLuminance(const qint32 &min_luminance);
    bool is_min_luminance_Set() const;
    bool is_min_luminance_Valid() const;

    qint32 getRedPrimaryX() const;
    void setRedPrimaryX(const qint32 &red_primary_x);
    bool is_red_primary_x_Set() const;
    bool is_red_primary_x_Valid() const;

    qint32 getRedPrimaryY() const;
    void setRedPrimaryY(const qint32 &red_primary_y);
    bool is_red_primary_y_Set() const;
    bool is_red_primary_y_Valid() const;

    qint32 getWhitePointX() const;
    void setWhitePointX(const qint32 &white_point_x);
    bool is_white_point_x_Set() const;
    bool is_white_point_x_Valid() const;

    qint32 getWhitePointY() const;
    void setWhitePointY(const qint32 &white_point_y);
    bool is_white_point_y_Set() const;
    bool is_white_point_y_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_blue_primary_x;
    bool m_blue_primary_x_isSet;
    bool m_blue_primary_x_isValid;

    qint32 m_blue_primary_y;
    bool m_blue_primary_y_isSet;
    bool m_blue_primary_y_isValid;

    qint32 m_green_primary_x;
    bool m_green_primary_x_isSet;
    bool m_green_primary_x_isValid;

    qint32 m_green_primary_y;
    bool m_green_primary_y_isSet;
    bool m_green_primary_y_isValid;

    qint32 m_max_content_light_level;
    bool m_max_content_light_level_isSet;
    bool m_max_content_light_level_isValid;

    qint32 m_max_frame_average_light_level;
    bool m_max_frame_average_light_level_isSet;
    bool m_max_frame_average_light_level_isValid;

    qint32 m_max_luminance;
    bool m_max_luminance_isSet;
    bool m_max_luminance_isValid;

    qint32 m_min_luminance;
    bool m_min_luminance_isSet;
    bool m_min_luminance_isValid;

    qint32 m_red_primary_x;
    bool m_red_primary_x_isSet;
    bool m_red_primary_x_isValid;

    qint32 m_red_primary_y;
    bool m_red_primary_y_isSet;
    bool m_red_primary_y_isValid;

    qint32 m_white_point_x;
    bool m_white_point_x_isSet;
    bool m_white_point_x_isValid;

    qint32 m_white_point_y;
    bool m_white_point_y_isSet;
    bool m_white_point_y_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIColorCorrector_Hdr10Metadata)

#endif // OAIColorCorrector_Hdr10Metadata_H
