/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoCodecSettings_Mpeg2Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoCodecSettings_Mpeg2Settings::OAIVideoCodecSettings_Mpeg2Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoCodecSettings_Mpeg2Settings::OAIVideoCodecSettings_Mpeg2Settings() {
    this->initializeModel();
}

OAIVideoCodecSettings_Mpeg2Settings::~OAIVideoCodecSettings_Mpeg2Settings() {}

void OAIVideoCodecSettings_Mpeg2Settings::initializeModel() {

    m_adaptive_quantization_isSet = false;
    m_adaptive_quantization_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_codec_level_isSet = false;
    m_codec_level_isValid = false;

    m_codec_profile_isSet = false;
    m_codec_profile_isValid = false;

    m_dynamic_sub_gop_isSet = false;
    m_dynamic_sub_gop_isValid = false;

    m_framerate_control_isSet = false;
    m_framerate_control_isValid = false;

    m_framerate_conversion_algorithm_isSet = false;
    m_framerate_conversion_algorithm_isValid = false;

    m_framerate_denominator_isSet = false;
    m_framerate_denominator_isValid = false;

    m_framerate_numerator_isSet = false;
    m_framerate_numerator_isValid = false;

    m_gop_closed_cadence_isSet = false;
    m_gop_closed_cadence_isValid = false;

    m_gop_size_isSet = false;
    m_gop_size_isValid = false;

    m_gop_size_units_isSet = false;
    m_gop_size_units_isValid = false;

    m_hrd_buffer_final_fill_percentage_isSet = false;
    m_hrd_buffer_final_fill_percentage_isValid = false;

    m_hrd_buffer_initial_fill_percentage_isSet = false;
    m_hrd_buffer_initial_fill_percentage_isValid = false;

    m_hrd_buffer_size_isSet = false;
    m_hrd_buffer_size_isValid = false;

    m_interlace_mode_isSet = false;
    m_interlace_mode_isValid = false;

    m_intra_dc_precision_isSet = false;
    m_intra_dc_precision_isValid = false;

    m_max_bitrate_isSet = false;
    m_max_bitrate_isValid = false;

    m_min_i_interval_isSet = false;
    m_min_i_interval_isValid = false;

    m_number_b_frames_between_reference_frames_isSet = false;
    m_number_b_frames_between_reference_frames_isValid = false;

    m_par_control_isSet = false;
    m_par_control_isValid = false;

    m_par_denominator_isSet = false;
    m_par_denominator_isValid = false;

    m_par_numerator_isSet = false;
    m_par_numerator_isValid = false;

    m_quality_tuning_level_isSet = false;
    m_quality_tuning_level_isValid = false;

    m_rate_control_mode_isSet = false;
    m_rate_control_mode_isValid = false;

    m_scan_type_conversion_mode_isSet = false;
    m_scan_type_conversion_mode_isValid = false;

    m_scene_change_detect_isSet = false;
    m_scene_change_detect_isValid = false;

    m_slow_pal_isSet = false;
    m_slow_pal_isValid = false;

    m_softness_isSet = false;
    m_softness_isValid = false;

    m_spatial_adaptive_quantization_isSet = false;
    m_spatial_adaptive_quantization_isValid = false;

    m_syntax_isSet = false;
    m_syntax_isValid = false;

    m_telecine_isSet = false;
    m_telecine_isValid = false;

    m_temporal_adaptive_quantization_isSet = false;
    m_temporal_adaptive_quantization_isValid = false;
}

void OAIVideoCodecSettings_Mpeg2Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoCodecSettings_Mpeg2Settings::fromJsonObject(QJsonObject json) {

    m_adaptive_quantization_isValid = ::OpenAPI::fromJsonValue(m_adaptive_quantization, json[QString("AdaptiveQuantization")]);
    m_adaptive_quantization_isSet = !json[QString("AdaptiveQuantization")].isNull() && m_adaptive_quantization_isValid;

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("Bitrate")]);
    m_bitrate_isSet = !json[QString("Bitrate")].isNull() && m_bitrate_isValid;

    m_codec_level_isValid = ::OpenAPI::fromJsonValue(m_codec_level, json[QString("CodecLevel")]);
    m_codec_level_isSet = !json[QString("CodecLevel")].isNull() && m_codec_level_isValid;

    m_codec_profile_isValid = ::OpenAPI::fromJsonValue(m_codec_profile, json[QString("CodecProfile")]);
    m_codec_profile_isSet = !json[QString("CodecProfile")].isNull() && m_codec_profile_isValid;

    m_dynamic_sub_gop_isValid = ::OpenAPI::fromJsonValue(m_dynamic_sub_gop, json[QString("DynamicSubGop")]);
    m_dynamic_sub_gop_isSet = !json[QString("DynamicSubGop")].isNull() && m_dynamic_sub_gop_isValid;

    m_framerate_control_isValid = ::OpenAPI::fromJsonValue(m_framerate_control, json[QString("FramerateControl")]);
    m_framerate_control_isSet = !json[QString("FramerateControl")].isNull() && m_framerate_control_isValid;

    m_framerate_conversion_algorithm_isValid = ::OpenAPI::fromJsonValue(m_framerate_conversion_algorithm, json[QString("FramerateConversionAlgorithm")]);
    m_framerate_conversion_algorithm_isSet = !json[QString("FramerateConversionAlgorithm")].isNull() && m_framerate_conversion_algorithm_isValid;

    m_framerate_denominator_isValid = ::OpenAPI::fromJsonValue(m_framerate_denominator, json[QString("FramerateDenominator")]);
    m_framerate_denominator_isSet = !json[QString("FramerateDenominator")].isNull() && m_framerate_denominator_isValid;

    m_framerate_numerator_isValid = ::OpenAPI::fromJsonValue(m_framerate_numerator, json[QString("FramerateNumerator")]);
    m_framerate_numerator_isSet = !json[QString("FramerateNumerator")].isNull() && m_framerate_numerator_isValid;

    m_gop_closed_cadence_isValid = ::OpenAPI::fromJsonValue(m_gop_closed_cadence, json[QString("GopClosedCadence")]);
    m_gop_closed_cadence_isSet = !json[QString("GopClosedCadence")].isNull() && m_gop_closed_cadence_isValid;

    m_gop_size_isValid = ::OpenAPI::fromJsonValue(m_gop_size, json[QString("GopSize")]);
    m_gop_size_isSet = !json[QString("GopSize")].isNull() && m_gop_size_isValid;

    m_gop_size_units_isValid = ::OpenAPI::fromJsonValue(m_gop_size_units, json[QString("GopSizeUnits")]);
    m_gop_size_units_isSet = !json[QString("GopSizeUnits")].isNull() && m_gop_size_units_isValid;

    m_hrd_buffer_final_fill_percentage_isValid = ::OpenAPI::fromJsonValue(m_hrd_buffer_final_fill_percentage, json[QString("HrdBufferFinalFillPercentage")]);
    m_hrd_buffer_final_fill_percentage_isSet = !json[QString("HrdBufferFinalFillPercentage")].isNull() && m_hrd_buffer_final_fill_percentage_isValid;

    m_hrd_buffer_initial_fill_percentage_isValid = ::OpenAPI::fromJsonValue(m_hrd_buffer_initial_fill_percentage, json[QString("HrdBufferInitialFillPercentage")]);
    m_hrd_buffer_initial_fill_percentage_isSet = !json[QString("HrdBufferInitialFillPercentage")].isNull() && m_hrd_buffer_initial_fill_percentage_isValid;

    m_hrd_buffer_size_isValid = ::OpenAPI::fromJsonValue(m_hrd_buffer_size, json[QString("HrdBufferSize")]);
    m_hrd_buffer_size_isSet = !json[QString("HrdBufferSize")].isNull() && m_hrd_buffer_size_isValid;

    m_interlace_mode_isValid = ::OpenAPI::fromJsonValue(m_interlace_mode, json[QString("InterlaceMode")]);
    m_interlace_mode_isSet = !json[QString("InterlaceMode")].isNull() && m_interlace_mode_isValid;

    m_intra_dc_precision_isValid = ::OpenAPI::fromJsonValue(m_intra_dc_precision, json[QString("IntraDcPrecision")]);
    m_intra_dc_precision_isSet = !json[QString("IntraDcPrecision")].isNull() && m_intra_dc_precision_isValid;

    m_max_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_bitrate, json[QString("MaxBitrate")]);
    m_max_bitrate_isSet = !json[QString("MaxBitrate")].isNull() && m_max_bitrate_isValid;

    m_min_i_interval_isValid = ::OpenAPI::fromJsonValue(m_min_i_interval, json[QString("MinIInterval")]);
    m_min_i_interval_isSet = !json[QString("MinIInterval")].isNull() && m_min_i_interval_isValid;

    m_number_b_frames_between_reference_frames_isValid = ::OpenAPI::fromJsonValue(m_number_b_frames_between_reference_frames, json[QString("NumberBFramesBetweenReferenceFrames")]);
    m_number_b_frames_between_reference_frames_isSet = !json[QString("NumberBFramesBetweenReferenceFrames")].isNull() && m_number_b_frames_between_reference_frames_isValid;

    m_par_control_isValid = ::OpenAPI::fromJsonValue(m_par_control, json[QString("ParControl")]);
    m_par_control_isSet = !json[QString("ParControl")].isNull() && m_par_control_isValid;

    m_par_denominator_isValid = ::OpenAPI::fromJsonValue(m_par_denominator, json[QString("ParDenominator")]);
    m_par_denominator_isSet = !json[QString("ParDenominator")].isNull() && m_par_denominator_isValid;

    m_par_numerator_isValid = ::OpenAPI::fromJsonValue(m_par_numerator, json[QString("ParNumerator")]);
    m_par_numerator_isSet = !json[QString("ParNumerator")].isNull() && m_par_numerator_isValid;

    m_quality_tuning_level_isValid = ::OpenAPI::fromJsonValue(m_quality_tuning_level, json[QString("QualityTuningLevel")]);
    m_quality_tuning_level_isSet = !json[QString("QualityTuningLevel")].isNull() && m_quality_tuning_level_isValid;

    m_rate_control_mode_isValid = ::OpenAPI::fromJsonValue(m_rate_control_mode, json[QString("RateControlMode")]);
    m_rate_control_mode_isSet = !json[QString("RateControlMode")].isNull() && m_rate_control_mode_isValid;

    m_scan_type_conversion_mode_isValid = ::OpenAPI::fromJsonValue(m_scan_type_conversion_mode, json[QString("ScanTypeConversionMode")]);
    m_scan_type_conversion_mode_isSet = !json[QString("ScanTypeConversionMode")].isNull() && m_scan_type_conversion_mode_isValid;

    m_scene_change_detect_isValid = ::OpenAPI::fromJsonValue(m_scene_change_detect, json[QString("SceneChangeDetect")]);
    m_scene_change_detect_isSet = !json[QString("SceneChangeDetect")].isNull() && m_scene_change_detect_isValid;

    m_slow_pal_isValid = ::OpenAPI::fromJsonValue(m_slow_pal, json[QString("SlowPal")]);
    m_slow_pal_isSet = !json[QString("SlowPal")].isNull() && m_slow_pal_isValid;

    m_softness_isValid = ::OpenAPI::fromJsonValue(m_softness, json[QString("Softness")]);
    m_softness_isSet = !json[QString("Softness")].isNull() && m_softness_isValid;

    m_spatial_adaptive_quantization_isValid = ::OpenAPI::fromJsonValue(m_spatial_adaptive_quantization, json[QString("SpatialAdaptiveQuantization")]);
    m_spatial_adaptive_quantization_isSet = !json[QString("SpatialAdaptiveQuantization")].isNull() && m_spatial_adaptive_quantization_isValid;

    m_syntax_isValid = ::OpenAPI::fromJsonValue(m_syntax, json[QString("Syntax")]);
    m_syntax_isSet = !json[QString("Syntax")].isNull() && m_syntax_isValid;

    m_telecine_isValid = ::OpenAPI::fromJsonValue(m_telecine, json[QString("Telecine")]);
    m_telecine_isSet = !json[QString("Telecine")].isNull() && m_telecine_isValid;

    m_temporal_adaptive_quantization_isValid = ::OpenAPI::fromJsonValue(m_temporal_adaptive_quantization, json[QString("TemporalAdaptiveQuantization")]);
    m_temporal_adaptive_quantization_isSet = !json[QString("TemporalAdaptiveQuantization")].isNull() && m_temporal_adaptive_quantization_isValid;
}

QString OAIVideoCodecSettings_Mpeg2Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoCodecSettings_Mpeg2Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_adaptive_quantization.isSet()) {
        obj.insert(QString("AdaptiveQuantization"), ::OpenAPI::toJsonValue(m_adaptive_quantization));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("Bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_codec_level.isSet()) {
        obj.insert(QString("CodecLevel"), ::OpenAPI::toJsonValue(m_codec_level));
    }
    if (m_codec_profile.isSet()) {
        obj.insert(QString("CodecProfile"), ::OpenAPI::toJsonValue(m_codec_profile));
    }
    if (m_dynamic_sub_gop.isSet()) {
        obj.insert(QString("DynamicSubGop"), ::OpenAPI::toJsonValue(m_dynamic_sub_gop));
    }
    if (m_framerate_control.isSet()) {
        obj.insert(QString("FramerateControl"), ::OpenAPI::toJsonValue(m_framerate_control));
    }
    if (m_framerate_conversion_algorithm.isSet()) {
        obj.insert(QString("FramerateConversionAlgorithm"), ::OpenAPI::toJsonValue(m_framerate_conversion_algorithm));
    }
    if (m_framerate_denominator_isSet) {
        obj.insert(QString("FramerateDenominator"), ::OpenAPI::toJsonValue(m_framerate_denominator));
    }
    if (m_framerate_numerator_isSet) {
        obj.insert(QString("FramerateNumerator"), ::OpenAPI::toJsonValue(m_framerate_numerator));
    }
    if (m_gop_closed_cadence_isSet) {
        obj.insert(QString("GopClosedCadence"), ::OpenAPI::toJsonValue(m_gop_closed_cadence));
    }
    if (m_gop_size_isSet) {
        obj.insert(QString("GopSize"), ::OpenAPI::toJsonValue(m_gop_size));
    }
    if (m_gop_size_units.isSet()) {
        obj.insert(QString("GopSizeUnits"), ::OpenAPI::toJsonValue(m_gop_size_units));
    }
    if (m_hrd_buffer_final_fill_percentage_isSet) {
        obj.insert(QString("HrdBufferFinalFillPercentage"), ::OpenAPI::toJsonValue(m_hrd_buffer_final_fill_percentage));
    }
    if (m_hrd_buffer_initial_fill_percentage_isSet) {
        obj.insert(QString("HrdBufferInitialFillPercentage"), ::OpenAPI::toJsonValue(m_hrd_buffer_initial_fill_percentage));
    }
    if (m_hrd_buffer_size_isSet) {
        obj.insert(QString("HrdBufferSize"), ::OpenAPI::toJsonValue(m_hrd_buffer_size));
    }
    if (m_interlace_mode.isSet()) {
        obj.insert(QString("InterlaceMode"), ::OpenAPI::toJsonValue(m_interlace_mode));
    }
    if (m_intra_dc_precision.isSet()) {
        obj.insert(QString("IntraDcPrecision"), ::OpenAPI::toJsonValue(m_intra_dc_precision));
    }
    if (m_max_bitrate_isSet) {
        obj.insert(QString("MaxBitrate"), ::OpenAPI::toJsonValue(m_max_bitrate));
    }
    if (m_min_i_interval_isSet) {
        obj.insert(QString("MinIInterval"), ::OpenAPI::toJsonValue(m_min_i_interval));
    }
    if (m_number_b_frames_between_reference_frames_isSet) {
        obj.insert(QString("NumberBFramesBetweenReferenceFrames"), ::OpenAPI::toJsonValue(m_number_b_frames_between_reference_frames));
    }
    if (m_par_control.isSet()) {
        obj.insert(QString("ParControl"), ::OpenAPI::toJsonValue(m_par_control));
    }
    if (m_par_denominator_isSet) {
        obj.insert(QString("ParDenominator"), ::OpenAPI::toJsonValue(m_par_denominator));
    }
    if (m_par_numerator_isSet) {
        obj.insert(QString("ParNumerator"), ::OpenAPI::toJsonValue(m_par_numerator));
    }
    if (m_quality_tuning_level.isSet()) {
        obj.insert(QString("QualityTuningLevel"), ::OpenAPI::toJsonValue(m_quality_tuning_level));
    }
    if (m_rate_control_mode.isSet()) {
        obj.insert(QString("RateControlMode"), ::OpenAPI::toJsonValue(m_rate_control_mode));
    }
    if (m_scan_type_conversion_mode.isSet()) {
        obj.insert(QString("ScanTypeConversionMode"), ::OpenAPI::toJsonValue(m_scan_type_conversion_mode));
    }
    if (m_scene_change_detect.isSet()) {
        obj.insert(QString("SceneChangeDetect"), ::OpenAPI::toJsonValue(m_scene_change_detect));
    }
    if (m_slow_pal.isSet()) {
        obj.insert(QString("SlowPal"), ::OpenAPI::toJsonValue(m_slow_pal));
    }
    if (m_softness_isSet) {
        obj.insert(QString("Softness"), ::OpenAPI::toJsonValue(m_softness));
    }
    if (m_spatial_adaptive_quantization.isSet()) {
        obj.insert(QString("SpatialAdaptiveQuantization"), ::OpenAPI::toJsonValue(m_spatial_adaptive_quantization));
    }
    if (m_syntax.isSet()) {
        obj.insert(QString("Syntax"), ::OpenAPI::toJsonValue(m_syntax));
    }
    if (m_telecine.isSet()) {
        obj.insert(QString("Telecine"), ::OpenAPI::toJsonValue(m_telecine));
    }
    if (m_temporal_adaptive_quantization.isSet()) {
        obj.insert(QString("TemporalAdaptiveQuantization"), ::OpenAPI::toJsonValue(m_temporal_adaptive_quantization));
    }
    return obj;
}

OAIMpeg2AdaptiveQuantization OAIVideoCodecSettings_Mpeg2Settings::getAdaptiveQuantization() const {
    return m_adaptive_quantization;
}
void OAIVideoCodecSettings_Mpeg2Settings::setAdaptiveQuantization(const OAIMpeg2AdaptiveQuantization &adaptive_quantization) {
    m_adaptive_quantization = adaptive_quantization;
    m_adaptive_quantization_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_adaptive_quantization_Set() const{
    return m_adaptive_quantization_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_adaptive_quantization_Valid() const{
    return m_adaptive_quantization_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getBitrate() const {
    return m_bitrate;
}
void OAIVideoCodecSettings_Mpeg2Settings::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

OAIMpeg2CodecLevel OAIVideoCodecSettings_Mpeg2Settings::getCodecLevel() const {
    return m_codec_level;
}
void OAIVideoCodecSettings_Mpeg2Settings::setCodecLevel(const OAIMpeg2CodecLevel &codec_level) {
    m_codec_level = codec_level;
    m_codec_level_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_codec_level_Set() const{
    return m_codec_level_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_codec_level_Valid() const{
    return m_codec_level_isValid;
}

OAIMpeg2CodecProfile OAIVideoCodecSettings_Mpeg2Settings::getCodecProfile() const {
    return m_codec_profile;
}
void OAIVideoCodecSettings_Mpeg2Settings::setCodecProfile(const OAIMpeg2CodecProfile &codec_profile) {
    m_codec_profile = codec_profile;
    m_codec_profile_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_codec_profile_Set() const{
    return m_codec_profile_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_codec_profile_Valid() const{
    return m_codec_profile_isValid;
}

OAIMpeg2DynamicSubGop OAIVideoCodecSettings_Mpeg2Settings::getDynamicSubGop() const {
    return m_dynamic_sub_gop;
}
void OAIVideoCodecSettings_Mpeg2Settings::setDynamicSubGop(const OAIMpeg2DynamicSubGop &dynamic_sub_gop) {
    m_dynamic_sub_gop = dynamic_sub_gop;
    m_dynamic_sub_gop_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_dynamic_sub_gop_Set() const{
    return m_dynamic_sub_gop_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_dynamic_sub_gop_Valid() const{
    return m_dynamic_sub_gop_isValid;
}

OAIMpeg2FramerateControl OAIVideoCodecSettings_Mpeg2Settings::getFramerateControl() const {
    return m_framerate_control;
}
void OAIVideoCodecSettings_Mpeg2Settings::setFramerateControl(const OAIMpeg2FramerateControl &framerate_control) {
    m_framerate_control = framerate_control;
    m_framerate_control_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_framerate_control_Set() const{
    return m_framerate_control_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_framerate_control_Valid() const{
    return m_framerate_control_isValid;
}

OAIMpeg2FramerateConversionAlgorithm OAIVideoCodecSettings_Mpeg2Settings::getFramerateConversionAlgorithm() const {
    return m_framerate_conversion_algorithm;
}
void OAIVideoCodecSettings_Mpeg2Settings::setFramerateConversionAlgorithm(const OAIMpeg2FramerateConversionAlgorithm &framerate_conversion_algorithm) {
    m_framerate_conversion_algorithm = framerate_conversion_algorithm;
    m_framerate_conversion_algorithm_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_framerate_conversion_algorithm_Set() const{
    return m_framerate_conversion_algorithm_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_framerate_conversion_algorithm_Valid() const{
    return m_framerate_conversion_algorithm_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getFramerateDenominator() const {
    return m_framerate_denominator;
}
void OAIVideoCodecSettings_Mpeg2Settings::setFramerateDenominator(const qint32 &framerate_denominator) {
    m_framerate_denominator = framerate_denominator;
    m_framerate_denominator_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_framerate_denominator_Set() const{
    return m_framerate_denominator_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_framerate_denominator_Valid() const{
    return m_framerate_denominator_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getFramerateNumerator() const {
    return m_framerate_numerator;
}
void OAIVideoCodecSettings_Mpeg2Settings::setFramerateNumerator(const qint32 &framerate_numerator) {
    m_framerate_numerator = framerate_numerator;
    m_framerate_numerator_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_framerate_numerator_Set() const{
    return m_framerate_numerator_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_framerate_numerator_Valid() const{
    return m_framerate_numerator_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getGopClosedCadence() const {
    return m_gop_closed_cadence;
}
void OAIVideoCodecSettings_Mpeg2Settings::setGopClosedCadence(const qint32 &gop_closed_cadence) {
    m_gop_closed_cadence = gop_closed_cadence;
    m_gop_closed_cadence_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_gop_closed_cadence_Set() const{
    return m_gop_closed_cadence_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_gop_closed_cadence_Valid() const{
    return m_gop_closed_cadence_isValid;
}

double OAIVideoCodecSettings_Mpeg2Settings::getGopSize() const {
    return m_gop_size;
}
void OAIVideoCodecSettings_Mpeg2Settings::setGopSize(const double &gop_size) {
    m_gop_size = gop_size;
    m_gop_size_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_gop_size_Set() const{
    return m_gop_size_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_gop_size_Valid() const{
    return m_gop_size_isValid;
}

OAIMpeg2GopSizeUnits OAIVideoCodecSettings_Mpeg2Settings::getGopSizeUnits() const {
    return m_gop_size_units;
}
void OAIVideoCodecSettings_Mpeg2Settings::setGopSizeUnits(const OAIMpeg2GopSizeUnits &gop_size_units) {
    m_gop_size_units = gop_size_units;
    m_gop_size_units_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_gop_size_units_Set() const{
    return m_gop_size_units_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_gop_size_units_Valid() const{
    return m_gop_size_units_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getHrdBufferFinalFillPercentage() const {
    return m_hrd_buffer_final_fill_percentage;
}
void OAIVideoCodecSettings_Mpeg2Settings::setHrdBufferFinalFillPercentage(const qint32 &hrd_buffer_final_fill_percentage) {
    m_hrd_buffer_final_fill_percentage = hrd_buffer_final_fill_percentage;
    m_hrd_buffer_final_fill_percentage_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_hrd_buffer_final_fill_percentage_Set() const{
    return m_hrd_buffer_final_fill_percentage_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_hrd_buffer_final_fill_percentage_Valid() const{
    return m_hrd_buffer_final_fill_percentage_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getHrdBufferInitialFillPercentage() const {
    return m_hrd_buffer_initial_fill_percentage;
}
void OAIVideoCodecSettings_Mpeg2Settings::setHrdBufferInitialFillPercentage(const qint32 &hrd_buffer_initial_fill_percentage) {
    m_hrd_buffer_initial_fill_percentage = hrd_buffer_initial_fill_percentage;
    m_hrd_buffer_initial_fill_percentage_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_hrd_buffer_initial_fill_percentage_Set() const{
    return m_hrd_buffer_initial_fill_percentage_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_hrd_buffer_initial_fill_percentage_Valid() const{
    return m_hrd_buffer_initial_fill_percentage_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getHrdBufferSize() const {
    return m_hrd_buffer_size;
}
void OAIVideoCodecSettings_Mpeg2Settings::setHrdBufferSize(const qint32 &hrd_buffer_size) {
    m_hrd_buffer_size = hrd_buffer_size;
    m_hrd_buffer_size_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_hrd_buffer_size_Set() const{
    return m_hrd_buffer_size_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_hrd_buffer_size_Valid() const{
    return m_hrd_buffer_size_isValid;
}

OAIMpeg2InterlaceMode OAIVideoCodecSettings_Mpeg2Settings::getInterlaceMode() const {
    return m_interlace_mode;
}
void OAIVideoCodecSettings_Mpeg2Settings::setInterlaceMode(const OAIMpeg2InterlaceMode &interlace_mode) {
    m_interlace_mode = interlace_mode;
    m_interlace_mode_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_interlace_mode_Set() const{
    return m_interlace_mode_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_interlace_mode_Valid() const{
    return m_interlace_mode_isValid;
}

OAIMpeg2IntraDcPrecision OAIVideoCodecSettings_Mpeg2Settings::getIntraDcPrecision() const {
    return m_intra_dc_precision;
}
void OAIVideoCodecSettings_Mpeg2Settings::setIntraDcPrecision(const OAIMpeg2IntraDcPrecision &intra_dc_precision) {
    m_intra_dc_precision = intra_dc_precision;
    m_intra_dc_precision_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_intra_dc_precision_Set() const{
    return m_intra_dc_precision_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_intra_dc_precision_Valid() const{
    return m_intra_dc_precision_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getMaxBitrate() const {
    return m_max_bitrate;
}
void OAIVideoCodecSettings_Mpeg2Settings::setMaxBitrate(const qint32 &max_bitrate) {
    m_max_bitrate = max_bitrate;
    m_max_bitrate_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_max_bitrate_Set() const{
    return m_max_bitrate_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_max_bitrate_Valid() const{
    return m_max_bitrate_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getMinIInterval() const {
    return m_min_i_interval;
}
void OAIVideoCodecSettings_Mpeg2Settings::setMinIInterval(const qint32 &min_i_interval) {
    m_min_i_interval = min_i_interval;
    m_min_i_interval_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_min_i_interval_Set() const{
    return m_min_i_interval_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_min_i_interval_Valid() const{
    return m_min_i_interval_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getNumberBFramesBetweenReferenceFrames() const {
    return m_number_b_frames_between_reference_frames;
}
void OAIVideoCodecSettings_Mpeg2Settings::setNumberBFramesBetweenReferenceFrames(const qint32 &number_b_frames_between_reference_frames) {
    m_number_b_frames_between_reference_frames = number_b_frames_between_reference_frames;
    m_number_b_frames_between_reference_frames_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_number_b_frames_between_reference_frames_Set() const{
    return m_number_b_frames_between_reference_frames_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_number_b_frames_between_reference_frames_Valid() const{
    return m_number_b_frames_between_reference_frames_isValid;
}

OAIMpeg2ParControl OAIVideoCodecSettings_Mpeg2Settings::getParControl() const {
    return m_par_control;
}
void OAIVideoCodecSettings_Mpeg2Settings::setParControl(const OAIMpeg2ParControl &par_control) {
    m_par_control = par_control;
    m_par_control_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_par_control_Set() const{
    return m_par_control_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_par_control_Valid() const{
    return m_par_control_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getParDenominator() const {
    return m_par_denominator;
}
void OAIVideoCodecSettings_Mpeg2Settings::setParDenominator(const qint32 &par_denominator) {
    m_par_denominator = par_denominator;
    m_par_denominator_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_par_denominator_Set() const{
    return m_par_denominator_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_par_denominator_Valid() const{
    return m_par_denominator_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getParNumerator() const {
    return m_par_numerator;
}
void OAIVideoCodecSettings_Mpeg2Settings::setParNumerator(const qint32 &par_numerator) {
    m_par_numerator = par_numerator;
    m_par_numerator_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_par_numerator_Set() const{
    return m_par_numerator_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_par_numerator_Valid() const{
    return m_par_numerator_isValid;
}

OAIMpeg2QualityTuningLevel OAIVideoCodecSettings_Mpeg2Settings::getQualityTuningLevel() const {
    return m_quality_tuning_level;
}
void OAIVideoCodecSettings_Mpeg2Settings::setQualityTuningLevel(const OAIMpeg2QualityTuningLevel &quality_tuning_level) {
    m_quality_tuning_level = quality_tuning_level;
    m_quality_tuning_level_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_quality_tuning_level_Set() const{
    return m_quality_tuning_level_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_quality_tuning_level_Valid() const{
    return m_quality_tuning_level_isValid;
}

OAIMpeg2RateControlMode OAIVideoCodecSettings_Mpeg2Settings::getRateControlMode() const {
    return m_rate_control_mode;
}
void OAIVideoCodecSettings_Mpeg2Settings::setRateControlMode(const OAIMpeg2RateControlMode &rate_control_mode) {
    m_rate_control_mode = rate_control_mode;
    m_rate_control_mode_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_rate_control_mode_Set() const{
    return m_rate_control_mode_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_rate_control_mode_Valid() const{
    return m_rate_control_mode_isValid;
}

OAIMpeg2ScanTypeConversionMode OAIVideoCodecSettings_Mpeg2Settings::getScanTypeConversionMode() const {
    return m_scan_type_conversion_mode;
}
void OAIVideoCodecSettings_Mpeg2Settings::setScanTypeConversionMode(const OAIMpeg2ScanTypeConversionMode &scan_type_conversion_mode) {
    m_scan_type_conversion_mode = scan_type_conversion_mode;
    m_scan_type_conversion_mode_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_scan_type_conversion_mode_Set() const{
    return m_scan_type_conversion_mode_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_scan_type_conversion_mode_Valid() const{
    return m_scan_type_conversion_mode_isValid;
}

OAIMpeg2SceneChangeDetect OAIVideoCodecSettings_Mpeg2Settings::getSceneChangeDetect() const {
    return m_scene_change_detect;
}
void OAIVideoCodecSettings_Mpeg2Settings::setSceneChangeDetect(const OAIMpeg2SceneChangeDetect &scene_change_detect) {
    m_scene_change_detect = scene_change_detect;
    m_scene_change_detect_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_scene_change_detect_Set() const{
    return m_scene_change_detect_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_scene_change_detect_Valid() const{
    return m_scene_change_detect_isValid;
}

OAIMpeg2SlowPal OAIVideoCodecSettings_Mpeg2Settings::getSlowPal() const {
    return m_slow_pal;
}
void OAIVideoCodecSettings_Mpeg2Settings::setSlowPal(const OAIMpeg2SlowPal &slow_pal) {
    m_slow_pal = slow_pal;
    m_slow_pal_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_slow_pal_Set() const{
    return m_slow_pal_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_slow_pal_Valid() const{
    return m_slow_pal_isValid;
}

qint32 OAIVideoCodecSettings_Mpeg2Settings::getSoftness() const {
    return m_softness;
}
void OAIVideoCodecSettings_Mpeg2Settings::setSoftness(const qint32 &softness) {
    m_softness = softness;
    m_softness_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_softness_Set() const{
    return m_softness_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_softness_Valid() const{
    return m_softness_isValid;
}

OAIMpeg2SpatialAdaptiveQuantization OAIVideoCodecSettings_Mpeg2Settings::getSpatialAdaptiveQuantization() const {
    return m_spatial_adaptive_quantization;
}
void OAIVideoCodecSettings_Mpeg2Settings::setSpatialAdaptiveQuantization(const OAIMpeg2SpatialAdaptiveQuantization &spatial_adaptive_quantization) {
    m_spatial_adaptive_quantization = spatial_adaptive_quantization;
    m_spatial_adaptive_quantization_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_spatial_adaptive_quantization_Set() const{
    return m_spatial_adaptive_quantization_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_spatial_adaptive_quantization_Valid() const{
    return m_spatial_adaptive_quantization_isValid;
}

OAIMpeg2Syntax OAIVideoCodecSettings_Mpeg2Settings::getSyntax() const {
    return m_syntax;
}
void OAIVideoCodecSettings_Mpeg2Settings::setSyntax(const OAIMpeg2Syntax &syntax) {
    m_syntax = syntax;
    m_syntax_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_syntax_Set() const{
    return m_syntax_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_syntax_Valid() const{
    return m_syntax_isValid;
}

OAIMpeg2Telecine OAIVideoCodecSettings_Mpeg2Settings::getTelecine() const {
    return m_telecine;
}
void OAIVideoCodecSettings_Mpeg2Settings::setTelecine(const OAIMpeg2Telecine &telecine) {
    m_telecine = telecine;
    m_telecine_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_telecine_Set() const{
    return m_telecine_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_telecine_Valid() const{
    return m_telecine_isValid;
}

OAIMpeg2TemporalAdaptiveQuantization OAIVideoCodecSettings_Mpeg2Settings::getTemporalAdaptiveQuantization() const {
    return m_temporal_adaptive_quantization;
}
void OAIVideoCodecSettings_Mpeg2Settings::setTemporalAdaptiveQuantization(const OAIMpeg2TemporalAdaptiveQuantization &temporal_adaptive_quantization) {
    m_temporal_adaptive_quantization = temporal_adaptive_quantization;
    m_temporal_adaptive_quantization_isSet = true;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_temporal_adaptive_quantization_Set() const{
    return m_temporal_adaptive_quantization_isSet;
}

bool OAIVideoCodecSettings_Mpeg2Settings::is_temporal_adaptive_quantization_Valid() const{
    return m_temporal_adaptive_quantization_isValid;
}

bool OAIVideoCodecSettings_Mpeg2Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adaptive_quantization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_sub_gop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_conversion_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gop_closed_cadence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gop_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gop_size_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hrd_buffer_final_fill_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hrd_buffer_initial_fill_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hrd_buffer_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interlace_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intra_dc_precision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_i_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_b_frames_between_reference_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_tuning_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_control_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type_conversion_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scene_change_detect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slow_pal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_softness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spatial_adaptive_quantization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_syntax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telecine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporal_adaptive_quantization.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoCodecSettings_Mpeg2Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
