/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICmafImageBasedTrickPlaySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICmafImageBasedTrickPlaySettings::OAICmafImageBasedTrickPlaySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICmafImageBasedTrickPlaySettings::OAICmafImageBasedTrickPlaySettings() {
    this->initializeModel();
}

OAICmafImageBasedTrickPlaySettings::~OAICmafImageBasedTrickPlaySettings() {}

void OAICmafImageBasedTrickPlaySettings::initializeModel() {

    m_interval_cadence_isSet = false;
    m_interval_cadence_isValid = false;

    m_thumbnail_height_isSet = false;
    m_thumbnail_height_isValid = false;

    m_thumbnail_interval_isSet = false;
    m_thumbnail_interval_isValid = false;

    m_thumbnail_width_isSet = false;
    m_thumbnail_width_isValid = false;

    m_tile_height_isSet = false;
    m_tile_height_isValid = false;

    m_tile_width_isSet = false;
    m_tile_width_isValid = false;
}

void OAICmafImageBasedTrickPlaySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICmafImageBasedTrickPlaySettings::fromJsonObject(QJsonObject json) {

    m_interval_cadence_isValid = ::OpenAPI::fromJsonValue(m_interval_cadence, json[QString("IntervalCadence")]);
    m_interval_cadence_isSet = !json[QString("IntervalCadence")].isNull() && m_interval_cadence_isValid;

    m_thumbnail_height_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_height, json[QString("ThumbnailHeight")]);
    m_thumbnail_height_isSet = !json[QString("ThumbnailHeight")].isNull() && m_thumbnail_height_isValid;

    m_thumbnail_interval_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_interval, json[QString("ThumbnailInterval")]);
    m_thumbnail_interval_isSet = !json[QString("ThumbnailInterval")].isNull() && m_thumbnail_interval_isValid;

    m_thumbnail_width_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_width, json[QString("ThumbnailWidth")]);
    m_thumbnail_width_isSet = !json[QString("ThumbnailWidth")].isNull() && m_thumbnail_width_isValid;

    m_tile_height_isValid = ::OpenAPI::fromJsonValue(m_tile_height, json[QString("TileHeight")]);
    m_tile_height_isSet = !json[QString("TileHeight")].isNull() && m_tile_height_isValid;

    m_tile_width_isValid = ::OpenAPI::fromJsonValue(m_tile_width, json[QString("TileWidth")]);
    m_tile_width_isSet = !json[QString("TileWidth")].isNull() && m_tile_width_isValid;
}

QString OAICmafImageBasedTrickPlaySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICmafImageBasedTrickPlaySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_cadence.isSet()) {
        obj.insert(QString("IntervalCadence"), ::OpenAPI::toJsonValue(m_interval_cadence));
    }
    if (m_thumbnail_height_isSet) {
        obj.insert(QString("ThumbnailHeight"), ::OpenAPI::toJsonValue(m_thumbnail_height));
    }
    if (m_thumbnail_interval_isSet) {
        obj.insert(QString("ThumbnailInterval"), ::OpenAPI::toJsonValue(m_thumbnail_interval));
    }
    if (m_thumbnail_width_isSet) {
        obj.insert(QString("ThumbnailWidth"), ::OpenAPI::toJsonValue(m_thumbnail_width));
    }
    if (m_tile_height_isSet) {
        obj.insert(QString("TileHeight"), ::OpenAPI::toJsonValue(m_tile_height));
    }
    if (m_tile_width_isSet) {
        obj.insert(QString("TileWidth"), ::OpenAPI::toJsonValue(m_tile_width));
    }
    return obj;
}

OAICmafIntervalCadence OAICmafImageBasedTrickPlaySettings::getIntervalCadence() const {
    return m_interval_cadence;
}
void OAICmafImageBasedTrickPlaySettings::setIntervalCadence(const OAICmafIntervalCadence &interval_cadence) {
    m_interval_cadence = interval_cadence;
    m_interval_cadence_isSet = true;
}

bool OAICmafImageBasedTrickPlaySettings::is_interval_cadence_Set() const{
    return m_interval_cadence_isSet;
}

bool OAICmafImageBasedTrickPlaySettings::is_interval_cadence_Valid() const{
    return m_interval_cadence_isValid;
}

qint32 OAICmafImageBasedTrickPlaySettings::getThumbnailHeight() const {
    return m_thumbnail_height;
}
void OAICmafImageBasedTrickPlaySettings::setThumbnailHeight(const qint32 &thumbnail_height) {
    m_thumbnail_height = thumbnail_height;
    m_thumbnail_height_isSet = true;
}

bool OAICmafImageBasedTrickPlaySettings::is_thumbnail_height_Set() const{
    return m_thumbnail_height_isSet;
}

bool OAICmafImageBasedTrickPlaySettings::is_thumbnail_height_Valid() const{
    return m_thumbnail_height_isValid;
}

double OAICmafImageBasedTrickPlaySettings::getThumbnailInterval() const {
    return m_thumbnail_interval;
}
void OAICmafImageBasedTrickPlaySettings::setThumbnailInterval(const double &thumbnail_interval) {
    m_thumbnail_interval = thumbnail_interval;
    m_thumbnail_interval_isSet = true;
}

bool OAICmafImageBasedTrickPlaySettings::is_thumbnail_interval_Set() const{
    return m_thumbnail_interval_isSet;
}

bool OAICmafImageBasedTrickPlaySettings::is_thumbnail_interval_Valid() const{
    return m_thumbnail_interval_isValid;
}

qint32 OAICmafImageBasedTrickPlaySettings::getThumbnailWidth() const {
    return m_thumbnail_width;
}
void OAICmafImageBasedTrickPlaySettings::setThumbnailWidth(const qint32 &thumbnail_width) {
    m_thumbnail_width = thumbnail_width;
    m_thumbnail_width_isSet = true;
}

bool OAICmafImageBasedTrickPlaySettings::is_thumbnail_width_Set() const{
    return m_thumbnail_width_isSet;
}

bool OAICmafImageBasedTrickPlaySettings::is_thumbnail_width_Valid() const{
    return m_thumbnail_width_isValid;
}

qint32 OAICmafImageBasedTrickPlaySettings::getTileHeight() const {
    return m_tile_height;
}
void OAICmafImageBasedTrickPlaySettings::setTileHeight(const qint32 &tile_height) {
    m_tile_height = tile_height;
    m_tile_height_isSet = true;
}

bool OAICmafImageBasedTrickPlaySettings::is_tile_height_Set() const{
    return m_tile_height_isSet;
}

bool OAICmafImageBasedTrickPlaySettings::is_tile_height_Valid() const{
    return m_tile_height_isValid;
}

qint32 OAICmafImageBasedTrickPlaySettings::getTileWidth() const {
    return m_tile_width;
}
void OAICmafImageBasedTrickPlaySettings::setTileWidth(const qint32 &tile_width) {
    m_tile_width = tile_width;
    m_tile_width_isSet = true;
}

bool OAICmafImageBasedTrickPlaySettings::is_tile_width_Set() const{
    return m_tile_width_isSet;
}

bool OAICmafImageBasedTrickPlaySettings::is_tile_width_Valid() const{
    return m_tile_width_isValid;
}

bool OAICmafImageBasedTrickPlaySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tile_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tile_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICmafImageBasedTrickPlaySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
