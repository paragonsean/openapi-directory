/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateQueueRequest_ReservationPlanSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateQueueRequest_ReservationPlanSettings::OAIUpdateQueueRequest_ReservationPlanSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateQueueRequest_ReservationPlanSettings::OAIUpdateQueueRequest_ReservationPlanSettings() {
    this->initializeModel();
}

OAIUpdateQueueRequest_ReservationPlanSettings::~OAIUpdateQueueRequest_ReservationPlanSettings() {}

void OAIUpdateQueueRequest_ReservationPlanSettings::initializeModel() {

    m_commitment_isSet = false;
    m_commitment_isValid = false;

    m_renewal_type_isSet = false;
    m_renewal_type_isValid = false;

    m_reserved_slots_isSet = false;
    m_reserved_slots_isValid = false;
}

void OAIUpdateQueueRequest_ReservationPlanSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateQueueRequest_ReservationPlanSettings::fromJsonObject(QJsonObject json) {

    m_commitment_isValid = ::OpenAPI::fromJsonValue(m_commitment, json[QString("Commitment")]);
    m_commitment_isSet = !json[QString("Commitment")].isNull() && m_commitment_isValid;

    m_renewal_type_isValid = ::OpenAPI::fromJsonValue(m_renewal_type, json[QString("RenewalType")]);
    m_renewal_type_isSet = !json[QString("RenewalType")].isNull() && m_renewal_type_isValid;

    m_reserved_slots_isValid = ::OpenAPI::fromJsonValue(m_reserved_slots, json[QString("ReservedSlots")]);
    m_reserved_slots_isSet = !json[QString("ReservedSlots")].isNull() && m_reserved_slots_isValid;
}

QString OAIUpdateQueueRequest_ReservationPlanSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateQueueRequest_ReservationPlanSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment.isSet()) {
        obj.insert(QString("Commitment"), ::OpenAPI::toJsonValue(m_commitment));
    }
    if (m_renewal_type.isSet()) {
        obj.insert(QString("RenewalType"), ::OpenAPI::toJsonValue(m_renewal_type));
    }
    if (m_reserved_slots_isSet) {
        obj.insert(QString("ReservedSlots"), ::OpenAPI::toJsonValue(m_reserved_slots));
    }
    return obj;
}

OAICommitment OAIUpdateQueueRequest_ReservationPlanSettings::getCommitment() const {
    return m_commitment;
}
void OAIUpdateQueueRequest_ReservationPlanSettings::setCommitment(const OAICommitment &commitment) {
    m_commitment = commitment;
    m_commitment_isSet = true;
}

bool OAIUpdateQueueRequest_ReservationPlanSettings::is_commitment_Set() const{
    return m_commitment_isSet;
}

bool OAIUpdateQueueRequest_ReservationPlanSettings::is_commitment_Valid() const{
    return m_commitment_isValid;
}

OAIRenewalType OAIUpdateQueueRequest_ReservationPlanSettings::getRenewalType() const {
    return m_renewal_type;
}
void OAIUpdateQueueRequest_ReservationPlanSettings::setRenewalType(const OAIRenewalType &renewal_type) {
    m_renewal_type = renewal_type;
    m_renewal_type_isSet = true;
}

bool OAIUpdateQueueRequest_ReservationPlanSettings::is_renewal_type_Set() const{
    return m_renewal_type_isSet;
}

bool OAIUpdateQueueRequest_ReservationPlanSettings::is_renewal_type_Valid() const{
    return m_renewal_type_isValid;
}

qint32 OAIUpdateQueueRequest_ReservationPlanSettings::getReservedSlots() const {
    return m_reserved_slots;
}
void OAIUpdateQueueRequest_ReservationPlanSettings::setReservedSlots(const qint32 &reserved_slots) {
    m_reserved_slots = reserved_slots;
    m_reserved_slots_isSet = true;
}

bool OAIUpdateQueueRequest_ReservationPlanSettings::is_reserved_slots_Set() const{
    return m_reserved_slots_isSet;
}

bool OAIUpdateQueueRequest_ReservationPlanSettings::is_reserved_slots_Valid() const{
    return m_reserved_slots_isValid;
}

bool OAIUpdateQueueRequest_ReservationPlanSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_slots_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateQueueRequest_ReservationPlanSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_commitment_isValid && m_renewal_type_isValid && m_reserved_slots_isValid && true;
}

} // namespace OpenAPI
