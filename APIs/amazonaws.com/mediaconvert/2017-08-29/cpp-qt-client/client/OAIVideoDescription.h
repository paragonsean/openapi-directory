/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoDescription.h
 *
 * Settings related to video encoding of your output. The specific video settings depend on the video codec that you choose.
 */

#ifndef OAIVideoDescription_H
#define OAIVideoDescription_H

#include <QJsonObject>

#include "OAIAfdSignaling.h"
#include "OAIAntiAlias.h"
#include "OAIColorMetadata.h"
#include "OAIDropFrameTimecode.h"
#include "OAIRespondToAfd.h"
#include "OAIScalingBehavior.h"
#include "OAIVideoDescription_CodecSettings.h"
#include "OAIVideoDescription_Crop.h"
#include "OAIVideoDescription_Position.h"
#include "OAIVideoDescription_VideoPreprocessors.h"
#include "OAIVideoTimecodeInsertion.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVideoDescription_CodecSettings;
class OAIVideoDescription_Crop;
class OAIVideoDescription_Position;
class OAIVideoDescription_VideoPreprocessors;

class OAIVideoDescription : public OAIObject {
public:
    OAIVideoDescription();
    OAIVideoDescription(QString json);
    ~OAIVideoDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAfdSignaling getAfdSignaling() const;
    void setAfdSignaling(const OAIAfdSignaling &afd_signaling);
    bool is_afd_signaling_Set() const;
    bool is_afd_signaling_Valid() const;

    OAIAntiAlias getAntiAlias() const;
    void setAntiAlias(const OAIAntiAlias &anti_alias);
    bool is_anti_alias_Set() const;
    bool is_anti_alias_Valid() const;

    OAIVideoDescription_CodecSettings getCodecSettings() const;
    void setCodecSettings(const OAIVideoDescription_CodecSettings &codec_settings);
    bool is_codec_settings_Set() const;
    bool is_codec_settings_Valid() const;

    OAIColorMetadata getColorMetadata() const;
    void setColorMetadata(const OAIColorMetadata &color_metadata);
    bool is_color_metadata_Set() const;
    bool is_color_metadata_Valid() const;

    OAIVideoDescription_Crop getCrop() const;
    void setCrop(const OAIVideoDescription_Crop &crop);
    bool is_crop_Set() const;
    bool is_crop_Valid() const;

    OAIDropFrameTimecode getDropFrameTimecode() const;
    void setDropFrameTimecode(const OAIDropFrameTimecode &drop_frame_timecode);
    bool is_drop_frame_timecode_Set() const;
    bool is_drop_frame_timecode_Valid() const;

    qint32 getFixedAfd() const;
    void setFixedAfd(const qint32 &fixed_afd);
    bool is_fixed_afd_Set() const;
    bool is_fixed_afd_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    OAIVideoDescription_Position getPosition() const;
    void setPosition(const OAIVideoDescription_Position &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    OAIRespondToAfd getRespondToAfd() const;
    void setRespondToAfd(const OAIRespondToAfd &respond_to_afd);
    bool is_respond_to_afd_Set() const;
    bool is_respond_to_afd_Valid() const;

    OAIScalingBehavior getScalingBehavior() const;
    void setScalingBehavior(const OAIScalingBehavior &scaling_behavior);
    bool is_scaling_behavior_Set() const;
    bool is_scaling_behavior_Valid() const;

    qint32 getSharpness() const;
    void setSharpness(const qint32 &sharpness);
    bool is_sharpness_Set() const;
    bool is_sharpness_Valid() const;

    OAIVideoTimecodeInsertion getTimecodeInsertion() const;
    void setTimecodeInsertion(const OAIVideoTimecodeInsertion &timecode_insertion);
    bool is_timecode_insertion_Set() const;
    bool is_timecode_insertion_Valid() const;

    OAIVideoDescription_VideoPreprocessors getVideoPreprocessors() const;
    void setVideoPreprocessors(const OAIVideoDescription_VideoPreprocessors &video_preprocessors);
    bool is_video_preprocessors_Set() const;
    bool is_video_preprocessors_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAfdSignaling m_afd_signaling;
    bool m_afd_signaling_isSet;
    bool m_afd_signaling_isValid;

    OAIAntiAlias m_anti_alias;
    bool m_anti_alias_isSet;
    bool m_anti_alias_isValid;

    OAIVideoDescription_CodecSettings m_codec_settings;
    bool m_codec_settings_isSet;
    bool m_codec_settings_isValid;

    OAIColorMetadata m_color_metadata;
    bool m_color_metadata_isSet;
    bool m_color_metadata_isValid;

    OAIVideoDescription_Crop m_crop;
    bool m_crop_isSet;
    bool m_crop_isValid;

    OAIDropFrameTimecode m_drop_frame_timecode;
    bool m_drop_frame_timecode_isSet;
    bool m_drop_frame_timecode_isValid;

    qint32 m_fixed_afd;
    bool m_fixed_afd_isSet;
    bool m_fixed_afd_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    OAIVideoDescription_Position m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    OAIRespondToAfd m_respond_to_afd;
    bool m_respond_to_afd_isSet;
    bool m_respond_to_afd_isValid;

    OAIScalingBehavior m_scaling_behavior;
    bool m_scaling_behavior_isSet;
    bool m_scaling_behavior_isValid;

    qint32 m_sharpness;
    bool m_sharpness_isSet;
    bool m_sharpness_isValid;

    OAIVideoTimecodeInsertion m_timecode_insertion;
    bool m_timecode_insertion_isSet;
    bool m_timecode_insertion_isValid;

    OAIVideoDescription_VideoPreprocessors m_video_preprocessors;
    bool m_video_preprocessors_isSet;
    bool m_video_preprocessors_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoDescription)

#endif // OAIVideoDescription_H
