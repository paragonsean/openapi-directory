/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIXavcSettings_XavcHdProfileSettings.h
 *
 * 
 */

#ifndef OAIXavcSettings_XavcHdProfileSettings_H
#define OAIXavcSettings_XavcHdProfileSettings_H

#include <QJsonObject>

#include "OAIXavcFlickerAdaptiveQuantization.h"
#include "OAIXavcGopBReference.h"
#include "OAIXavcHdProfileBitrateClass.h"
#include "OAIXavcHdProfileQualityTuningLevel.h"
#include "OAIXavcHdProfileTelecine.h"
#include "OAIXavcInterlaceMode.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIXavcSettings_XavcHdProfileSettings : public OAIObject {
public:
    OAIXavcSettings_XavcHdProfileSettings();
    OAIXavcSettings_XavcHdProfileSettings(QString json);
    ~OAIXavcSettings_XavcHdProfileSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIXavcHdProfileBitrateClass getBitrateClass() const;
    void setBitrateClass(const OAIXavcHdProfileBitrateClass &bitrate_class);
    bool is_bitrate_class_Set() const;
    bool is_bitrate_class_Valid() const;

    OAIXavcFlickerAdaptiveQuantization getFlickerAdaptiveQuantization() const;
    void setFlickerAdaptiveQuantization(const OAIXavcFlickerAdaptiveQuantization &flicker_adaptive_quantization);
    bool is_flicker_adaptive_quantization_Set() const;
    bool is_flicker_adaptive_quantization_Valid() const;

    OAIXavcGopBReference getGopBReference() const;
    void setGopBReference(const OAIXavcGopBReference &gop_b_reference);
    bool is_gop_b_reference_Set() const;
    bool is_gop_b_reference_Valid() const;

    qint32 getGopClosedCadence() const;
    void setGopClosedCadence(const qint32 &gop_closed_cadence);
    bool is_gop_closed_cadence_Set() const;
    bool is_gop_closed_cadence_Valid() const;

    qint32 getHrdBufferSize() const;
    void setHrdBufferSize(const qint32 &hrd_buffer_size);
    bool is_hrd_buffer_size_Set() const;
    bool is_hrd_buffer_size_Valid() const;

    OAIXavcInterlaceMode getInterlaceMode() const;
    void setInterlaceMode(const OAIXavcInterlaceMode &interlace_mode);
    bool is_interlace_mode_Set() const;
    bool is_interlace_mode_Valid() const;

    OAIXavcHdProfileQualityTuningLevel getQualityTuningLevel() const;
    void setQualityTuningLevel(const OAIXavcHdProfileQualityTuningLevel &quality_tuning_level);
    bool is_quality_tuning_level_Set() const;
    bool is_quality_tuning_level_Valid() const;

    qint32 getSlices() const;
    void setSlices(const qint32 &slices);
    bool is_slices_Set() const;
    bool is_slices_Valid() const;

    OAIXavcHdProfileTelecine getTelecine() const;
    void setTelecine(const OAIXavcHdProfileTelecine &telecine);
    bool is_telecine_Set() const;
    bool is_telecine_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIXavcHdProfileBitrateClass m_bitrate_class;
    bool m_bitrate_class_isSet;
    bool m_bitrate_class_isValid;

    OAIXavcFlickerAdaptiveQuantization m_flicker_adaptive_quantization;
    bool m_flicker_adaptive_quantization_isSet;
    bool m_flicker_adaptive_quantization_isValid;

    OAIXavcGopBReference m_gop_b_reference;
    bool m_gop_b_reference_isSet;
    bool m_gop_b_reference_isValid;

    qint32 m_gop_closed_cadence;
    bool m_gop_closed_cadence_isSet;
    bool m_gop_closed_cadence_isValid;

    qint32 m_hrd_buffer_size;
    bool m_hrd_buffer_size_isSet;
    bool m_hrd_buffer_size_isValid;

    OAIXavcInterlaceMode m_interlace_mode;
    bool m_interlace_mode_isSet;
    bool m_interlace_mode_isValid;

    OAIXavcHdProfileQualityTuningLevel m_quality_tuning_level;
    bool m_quality_tuning_level_isSet;
    bool m_quality_tuning_level_isValid;

    qint32 m_slices;
    bool m_slices_isSet;
    bool m_slices_isValid;

    OAIXavcHdProfileTelecine m_telecine;
    bool m_telecine_isSet;
    bool m_telecine_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIXavcSettings_XavcHdProfileSettings)

#endif // OAIXavcSettings_XavcHdProfileSettings_H
