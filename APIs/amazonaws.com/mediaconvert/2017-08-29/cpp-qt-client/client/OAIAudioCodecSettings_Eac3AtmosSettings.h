/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioCodecSettings_Eac3AtmosSettings.h
 *
 * 
 */

#ifndef OAIAudioCodecSettings_Eac3AtmosSettings_H
#define OAIAudioCodecSettings_Eac3AtmosSettings_H

#include <QJsonObject>

#include "OAIEac3AtmosBitstreamMode.h"
#include "OAIEac3AtmosCodingMode.h"
#include "OAIEac3AtmosDialogueIntelligence.h"
#include "OAIEac3AtmosDownmixControl.h"
#include "OAIEac3AtmosDynamicRangeCompressionLine.h"
#include "OAIEac3AtmosDynamicRangeCompressionRf.h"
#include "OAIEac3AtmosDynamicRangeControl.h"
#include "OAIEac3AtmosMeteringMode.h"
#include "OAIEac3AtmosStereoDownmix.h"
#include "OAIEac3AtmosSurroundExMode.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAudioCodecSettings_Eac3AtmosSettings : public OAIObject {
public:
    OAIAudioCodecSettings_Eac3AtmosSettings();
    OAIAudioCodecSettings_Eac3AtmosSettings(QString json);
    ~OAIAudioCodecSettings_Eac3AtmosSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBitrate() const;
    void setBitrate(const qint32 &bitrate);
    bool is_bitrate_Set() const;
    bool is_bitrate_Valid() const;

    OAIEac3AtmosBitstreamMode getBitstreamMode() const;
    void setBitstreamMode(const OAIEac3AtmosBitstreamMode &bitstream_mode);
    bool is_bitstream_mode_Set() const;
    bool is_bitstream_mode_Valid() const;

    OAIEac3AtmosCodingMode getCodingMode() const;
    void setCodingMode(const OAIEac3AtmosCodingMode &coding_mode);
    bool is_coding_mode_Set() const;
    bool is_coding_mode_Valid() const;

    OAIEac3AtmosDialogueIntelligence getDialogueIntelligence() const;
    void setDialogueIntelligence(const OAIEac3AtmosDialogueIntelligence &dialogue_intelligence);
    bool is_dialogue_intelligence_Set() const;
    bool is_dialogue_intelligence_Valid() const;

    OAIEac3AtmosDownmixControl getDownmixControl() const;
    void setDownmixControl(const OAIEac3AtmosDownmixControl &downmix_control);
    bool is_downmix_control_Set() const;
    bool is_downmix_control_Valid() const;

    OAIEac3AtmosDynamicRangeCompressionLine getDynamicRangeCompressionLine() const;
    void setDynamicRangeCompressionLine(const OAIEac3AtmosDynamicRangeCompressionLine &dynamic_range_compression_line);
    bool is_dynamic_range_compression_line_Set() const;
    bool is_dynamic_range_compression_line_Valid() const;

    OAIEac3AtmosDynamicRangeCompressionRf getDynamicRangeCompressionRf() const;
    void setDynamicRangeCompressionRf(const OAIEac3AtmosDynamicRangeCompressionRf &dynamic_range_compression_rf);
    bool is_dynamic_range_compression_rf_Set() const;
    bool is_dynamic_range_compression_rf_Valid() const;

    OAIEac3AtmosDynamicRangeControl getDynamicRangeControl() const;
    void setDynamicRangeControl(const OAIEac3AtmosDynamicRangeControl &dynamic_range_control);
    bool is_dynamic_range_control_Set() const;
    bool is_dynamic_range_control_Valid() const;

    double getLoRoCenterMixLevel() const;
    void setLoRoCenterMixLevel(const double &lo_ro_center_mix_level);
    bool is_lo_ro_center_mix_level_Set() const;
    bool is_lo_ro_center_mix_level_Valid() const;

    double getLoRoSurroundMixLevel() const;
    void setLoRoSurroundMixLevel(const double &lo_ro_surround_mix_level);
    bool is_lo_ro_surround_mix_level_Set() const;
    bool is_lo_ro_surround_mix_level_Valid() const;

    double getLtRtCenterMixLevel() const;
    void setLtRtCenterMixLevel(const double &lt_rt_center_mix_level);
    bool is_lt_rt_center_mix_level_Set() const;
    bool is_lt_rt_center_mix_level_Valid() const;

    double getLtRtSurroundMixLevel() const;
    void setLtRtSurroundMixLevel(const double &lt_rt_surround_mix_level);
    bool is_lt_rt_surround_mix_level_Set() const;
    bool is_lt_rt_surround_mix_level_Valid() const;

    OAIEac3AtmosMeteringMode getMeteringMode() const;
    void setMeteringMode(const OAIEac3AtmosMeteringMode &metering_mode);
    bool is_metering_mode_Set() const;
    bool is_metering_mode_Valid() const;

    qint32 getSampleRate() const;
    void setSampleRate(const qint32 &sample_rate);
    bool is_sample_rate_Set() const;
    bool is_sample_rate_Valid() const;

    qint32 getSpeechThreshold() const;
    void setSpeechThreshold(const qint32 &speech_threshold);
    bool is_speech_threshold_Set() const;
    bool is_speech_threshold_Valid() const;

    OAIEac3AtmosStereoDownmix getStereoDownmix() const;
    void setStereoDownmix(const OAIEac3AtmosStereoDownmix &stereo_downmix);
    bool is_stereo_downmix_Set() const;
    bool is_stereo_downmix_Valid() const;

    OAIEac3AtmosSurroundExMode getSurroundExMode() const;
    void setSurroundExMode(const OAIEac3AtmosSurroundExMode &surround_ex_mode);
    bool is_surround_ex_mode_Set() const;
    bool is_surround_ex_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bitrate;
    bool m_bitrate_isSet;
    bool m_bitrate_isValid;

    OAIEac3AtmosBitstreamMode m_bitstream_mode;
    bool m_bitstream_mode_isSet;
    bool m_bitstream_mode_isValid;

    OAIEac3AtmosCodingMode m_coding_mode;
    bool m_coding_mode_isSet;
    bool m_coding_mode_isValid;

    OAIEac3AtmosDialogueIntelligence m_dialogue_intelligence;
    bool m_dialogue_intelligence_isSet;
    bool m_dialogue_intelligence_isValid;

    OAIEac3AtmosDownmixControl m_downmix_control;
    bool m_downmix_control_isSet;
    bool m_downmix_control_isValid;

    OAIEac3AtmosDynamicRangeCompressionLine m_dynamic_range_compression_line;
    bool m_dynamic_range_compression_line_isSet;
    bool m_dynamic_range_compression_line_isValid;

    OAIEac3AtmosDynamicRangeCompressionRf m_dynamic_range_compression_rf;
    bool m_dynamic_range_compression_rf_isSet;
    bool m_dynamic_range_compression_rf_isValid;

    OAIEac3AtmosDynamicRangeControl m_dynamic_range_control;
    bool m_dynamic_range_control_isSet;
    bool m_dynamic_range_control_isValid;

    double m_lo_ro_center_mix_level;
    bool m_lo_ro_center_mix_level_isSet;
    bool m_lo_ro_center_mix_level_isValid;

    double m_lo_ro_surround_mix_level;
    bool m_lo_ro_surround_mix_level_isSet;
    bool m_lo_ro_surround_mix_level_isValid;

    double m_lt_rt_center_mix_level;
    bool m_lt_rt_center_mix_level_isSet;
    bool m_lt_rt_center_mix_level_isValid;

    double m_lt_rt_surround_mix_level;
    bool m_lt_rt_surround_mix_level_isSet;
    bool m_lt_rt_surround_mix_level_isValid;

    OAIEac3AtmosMeteringMode m_metering_mode;
    bool m_metering_mode_isSet;
    bool m_metering_mode_isValid;

    qint32 m_sample_rate;
    bool m_sample_rate_isSet;
    bool m_sample_rate_isValid;

    qint32 m_speech_threshold;
    bool m_speech_threshold_isSet;
    bool m_speech_threshold_isValid;

    OAIEac3AtmosStereoDownmix m_stereo_downmix;
    bool m_stereo_downmix_isSet;
    bool m_stereo_downmix_isValid;

    OAIEac3AtmosSurroundExMode m_surround_ex_mode;
    bool m_surround_ex_mode_isSet;
    bool m_surround_ex_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioCodecSettings_Eac3AtmosSettings)

#endif // OAIAudioCodecSettings_Eac3AtmosSettings_H
