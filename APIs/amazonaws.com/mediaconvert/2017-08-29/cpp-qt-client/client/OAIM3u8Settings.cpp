/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIM3u8Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIM3u8Settings::OAIM3u8Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIM3u8Settings::OAIM3u8Settings() {
    this->initializeModel();
}

OAIM3u8Settings::~OAIM3u8Settings() {}

void OAIM3u8Settings::initializeModel() {

    m_audio_duration_isSet = false;
    m_audio_duration_isValid = false;

    m_audio_frames_per_pes_isSet = false;
    m_audio_frames_per_pes_isValid = false;

    m_audio_pids_isSet = false;
    m_audio_pids_isValid = false;

    m_data_pts_control_isSet = false;
    m_data_pts_control_isValid = false;

    m_max_pcr_interval_isSet = false;
    m_max_pcr_interval_isValid = false;

    m_nielsen_id3_isSet = false;
    m_nielsen_id3_isValid = false;

    m_pat_interval_isSet = false;
    m_pat_interval_isValid = false;

    m_pcr_control_isSet = false;
    m_pcr_control_isValid = false;

    m_pcr_pid_isSet = false;
    m_pcr_pid_isValid = false;

    m_pmt_interval_isSet = false;
    m_pmt_interval_isValid = false;

    m_pmt_pid_isSet = false;
    m_pmt_pid_isValid = false;

    m_private_metadata_pid_isSet = false;
    m_private_metadata_pid_isValid = false;

    m_program_number_isSet = false;
    m_program_number_isValid = false;

    m_scte35_pid_isSet = false;
    m_scte35_pid_isValid = false;

    m_scte35_source_isSet = false;
    m_scte35_source_isValid = false;

    m_timed_metadata_isSet = false;
    m_timed_metadata_isValid = false;

    m_timed_metadata_pid_isSet = false;
    m_timed_metadata_pid_isValid = false;

    m_transport_stream_id_isSet = false;
    m_transport_stream_id_isValid = false;

    m_video_pid_isSet = false;
    m_video_pid_isValid = false;
}

void OAIM3u8Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIM3u8Settings::fromJsonObject(QJsonObject json) {

    m_audio_duration_isValid = ::OpenAPI::fromJsonValue(m_audio_duration, json[QString("AudioDuration")]);
    m_audio_duration_isSet = !json[QString("AudioDuration")].isNull() && m_audio_duration_isValid;

    m_audio_frames_per_pes_isValid = ::OpenAPI::fromJsonValue(m_audio_frames_per_pes, json[QString("AudioFramesPerPes")]);
    m_audio_frames_per_pes_isSet = !json[QString("AudioFramesPerPes")].isNull() && m_audio_frames_per_pes_isValid;

    m_audio_pids_isValid = ::OpenAPI::fromJsonValue(m_audio_pids, json[QString("AudioPids")]);
    m_audio_pids_isSet = !json[QString("AudioPids")].isNull() && m_audio_pids_isValid;

    m_data_pts_control_isValid = ::OpenAPI::fromJsonValue(m_data_pts_control, json[QString("DataPTSControl")]);
    m_data_pts_control_isSet = !json[QString("DataPTSControl")].isNull() && m_data_pts_control_isValid;

    m_max_pcr_interval_isValid = ::OpenAPI::fromJsonValue(m_max_pcr_interval, json[QString("MaxPcrInterval")]);
    m_max_pcr_interval_isSet = !json[QString("MaxPcrInterval")].isNull() && m_max_pcr_interval_isValid;

    m_nielsen_id3_isValid = ::OpenAPI::fromJsonValue(m_nielsen_id3, json[QString("NielsenId3")]);
    m_nielsen_id3_isSet = !json[QString("NielsenId3")].isNull() && m_nielsen_id3_isValid;

    m_pat_interval_isValid = ::OpenAPI::fromJsonValue(m_pat_interval, json[QString("PatInterval")]);
    m_pat_interval_isSet = !json[QString("PatInterval")].isNull() && m_pat_interval_isValid;

    m_pcr_control_isValid = ::OpenAPI::fromJsonValue(m_pcr_control, json[QString("PcrControl")]);
    m_pcr_control_isSet = !json[QString("PcrControl")].isNull() && m_pcr_control_isValid;

    m_pcr_pid_isValid = ::OpenAPI::fromJsonValue(m_pcr_pid, json[QString("PcrPid")]);
    m_pcr_pid_isSet = !json[QString("PcrPid")].isNull() && m_pcr_pid_isValid;

    m_pmt_interval_isValid = ::OpenAPI::fromJsonValue(m_pmt_interval, json[QString("PmtInterval")]);
    m_pmt_interval_isSet = !json[QString("PmtInterval")].isNull() && m_pmt_interval_isValid;

    m_pmt_pid_isValid = ::OpenAPI::fromJsonValue(m_pmt_pid, json[QString("PmtPid")]);
    m_pmt_pid_isSet = !json[QString("PmtPid")].isNull() && m_pmt_pid_isValid;

    m_private_metadata_pid_isValid = ::OpenAPI::fromJsonValue(m_private_metadata_pid, json[QString("PrivateMetadataPid")]);
    m_private_metadata_pid_isSet = !json[QString("PrivateMetadataPid")].isNull() && m_private_metadata_pid_isValid;

    m_program_number_isValid = ::OpenAPI::fromJsonValue(m_program_number, json[QString("ProgramNumber")]);
    m_program_number_isSet = !json[QString("ProgramNumber")].isNull() && m_program_number_isValid;

    m_scte35_pid_isValid = ::OpenAPI::fromJsonValue(m_scte35_pid, json[QString("Scte35Pid")]);
    m_scte35_pid_isSet = !json[QString("Scte35Pid")].isNull() && m_scte35_pid_isValid;

    m_scte35_source_isValid = ::OpenAPI::fromJsonValue(m_scte35_source, json[QString("Scte35Source")]);
    m_scte35_source_isSet = !json[QString("Scte35Source")].isNull() && m_scte35_source_isValid;

    m_timed_metadata_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata, json[QString("TimedMetadata")]);
    m_timed_metadata_isSet = !json[QString("TimedMetadata")].isNull() && m_timed_metadata_isValid;

    m_timed_metadata_pid_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_pid, json[QString("TimedMetadataPid")]);
    m_timed_metadata_pid_isSet = !json[QString("TimedMetadataPid")].isNull() && m_timed_metadata_pid_isValid;

    m_transport_stream_id_isValid = ::OpenAPI::fromJsonValue(m_transport_stream_id, json[QString("TransportStreamId")]);
    m_transport_stream_id_isSet = !json[QString("TransportStreamId")].isNull() && m_transport_stream_id_isValid;

    m_video_pid_isValid = ::OpenAPI::fromJsonValue(m_video_pid, json[QString("VideoPid")]);
    m_video_pid_isSet = !json[QString("VideoPid")].isNull() && m_video_pid_isValid;
}

QString OAIM3u8Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIM3u8Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_duration.isSet()) {
        obj.insert(QString("AudioDuration"), ::OpenAPI::toJsonValue(m_audio_duration));
    }
    if (m_audio_frames_per_pes_isSet) {
        obj.insert(QString("AudioFramesPerPes"), ::OpenAPI::toJsonValue(m_audio_frames_per_pes));
    }
    if (m_audio_pids.isSet()) {
        obj.insert(QString("AudioPids"), ::OpenAPI::toJsonValue(m_audio_pids));
    }
    if (m_data_pts_control.isSet()) {
        obj.insert(QString("DataPTSControl"), ::OpenAPI::toJsonValue(m_data_pts_control));
    }
    if (m_max_pcr_interval_isSet) {
        obj.insert(QString("MaxPcrInterval"), ::OpenAPI::toJsonValue(m_max_pcr_interval));
    }
    if (m_nielsen_id3.isSet()) {
        obj.insert(QString("NielsenId3"), ::OpenAPI::toJsonValue(m_nielsen_id3));
    }
    if (m_pat_interval_isSet) {
        obj.insert(QString("PatInterval"), ::OpenAPI::toJsonValue(m_pat_interval));
    }
    if (m_pcr_control.isSet()) {
        obj.insert(QString("PcrControl"), ::OpenAPI::toJsonValue(m_pcr_control));
    }
    if (m_pcr_pid_isSet) {
        obj.insert(QString("PcrPid"), ::OpenAPI::toJsonValue(m_pcr_pid));
    }
    if (m_pmt_interval_isSet) {
        obj.insert(QString("PmtInterval"), ::OpenAPI::toJsonValue(m_pmt_interval));
    }
    if (m_pmt_pid_isSet) {
        obj.insert(QString("PmtPid"), ::OpenAPI::toJsonValue(m_pmt_pid));
    }
    if (m_private_metadata_pid_isSet) {
        obj.insert(QString("PrivateMetadataPid"), ::OpenAPI::toJsonValue(m_private_metadata_pid));
    }
    if (m_program_number_isSet) {
        obj.insert(QString("ProgramNumber"), ::OpenAPI::toJsonValue(m_program_number));
    }
    if (m_scte35_pid_isSet) {
        obj.insert(QString("Scte35Pid"), ::OpenAPI::toJsonValue(m_scte35_pid));
    }
    if (m_scte35_source.isSet()) {
        obj.insert(QString("Scte35Source"), ::OpenAPI::toJsonValue(m_scte35_source));
    }
    if (m_timed_metadata.isSet()) {
        obj.insert(QString("TimedMetadata"), ::OpenAPI::toJsonValue(m_timed_metadata));
    }
    if (m_timed_metadata_pid_isSet) {
        obj.insert(QString("TimedMetadataPid"), ::OpenAPI::toJsonValue(m_timed_metadata_pid));
    }
    if (m_transport_stream_id_isSet) {
        obj.insert(QString("TransportStreamId"), ::OpenAPI::toJsonValue(m_transport_stream_id));
    }
    if (m_video_pid_isSet) {
        obj.insert(QString("VideoPid"), ::OpenAPI::toJsonValue(m_video_pid));
    }
    return obj;
}

OAIM3u8AudioDuration OAIM3u8Settings::getAudioDuration() const {
    return m_audio_duration;
}
void OAIM3u8Settings::setAudioDuration(const OAIM3u8AudioDuration &audio_duration) {
    m_audio_duration = audio_duration;
    m_audio_duration_isSet = true;
}

bool OAIM3u8Settings::is_audio_duration_Set() const{
    return m_audio_duration_isSet;
}

bool OAIM3u8Settings::is_audio_duration_Valid() const{
    return m_audio_duration_isValid;
}

qint32 OAIM3u8Settings::getAudioFramesPerPes() const {
    return m_audio_frames_per_pes;
}
void OAIM3u8Settings::setAudioFramesPerPes(const qint32 &audio_frames_per_pes) {
    m_audio_frames_per_pes = audio_frames_per_pes;
    m_audio_frames_per_pes_isSet = true;
}

bool OAIM3u8Settings::is_audio_frames_per_pes_Set() const{
    return m_audio_frames_per_pes_isSet;
}

bool OAIM3u8Settings::is_audio_frames_per_pes_Valid() const{
    return m_audio_frames_per_pes_isValid;
}

QList OAIM3u8Settings::getAudioPids() const {
    return m_audio_pids;
}
void OAIM3u8Settings::setAudioPids(const QList &audio_pids) {
    m_audio_pids = audio_pids;
    m_audio_pids_isSet = true;
}

bool OAIM3u8Settings::is_audio_pids_Set() const{
    return m_audio_pids_isSet;
}

bool OAIM3u8Settings::is_audio_pids_Valid() const{
    return m_audio_pids_isValid;
}

OAIM3u8DataPtsControl OAIM3u8Settings::getDataPtsControl() const {
    return m_data_pts_control;
}
void OAIM3u8Settings::setDataPtsControl(const OAIM3u8DataPtsControl &data_pts_control) {
    m_data_pts_control = data_pts_control;
    m_data_pts_control_isSet = true;
}

bool OAIM3u8Settings::is_data_pts_control_Set() const{
    return m_data_pts_control_isSet;
}

bool OAIM3u8Settings::is_data_pts_control_Valid() const{
    return m_data_pts_control_isValid;
}

qint32 OAIM3u8Settings::getMaxPcrInterval() const {
    return m_max_pcr_interval;
}
void OAIM3u8Settings::setMaxPcrInterval(const qint32 &max_pcr_interval) {
    m_max_pcr_interval = max_pcr_interval;
    m_max_pcr_interval_isSet = true;
}

bool OAIM3u8Settings::is_max_pcr_interval_Set() const{
    return m_max_pcr_interval_isSet;
}

bool OAIM3u8Settings::is_max_pcr_interval_Valid() const{
    return m_max_pcr_interval_isValid;
}

OAIM3u8NielsenId3 OAIM3u8Settings::getNielsenId3() const {
    return m_nielsen_id3;
}
void OAIM3u8Settings::setNielsenId3(const OAIM3u8NielsenId3 &nielsen_id3) {
    m_nielsen_id3 = nielsen_id3;
    m_nielsen_id3_isSet = true;
}

bool OAIM3u8Settings::is_nielsen_id3_Set() const{
    return m_nielsen_id3_isSet;
}

bool OAIM3u8Settings::is_nielsen_id3_Valid() const{
    return m_nielsen_id3_isValid;
}

qint32 OAIM3u8Settings::getPatInterval() const {
    return m_pat_interval;
}
void OAIM3u8Settings::setPatInterval(const qint32 &pat_interval) {
    m_pat_interval = pat_interval;
    m_pat_interval_isSet = true;
}

bool OAIM3u8Settings::is_pat_interval_Set() const{
    return m_pat_interval_isSet;
}

bool OAIM3u8Settings::is_pat_interval_Valid() const{
    return m_pat_interval_isValid;
}

OAIM3u8PcrControl OAIM3u8Settings::getPcrControl() const {
    return m_pcr_control;
}
void OAIM3u8Settings::setPcrControl(const OAIM3u8PcrControl &pcr_control) {
    m_pcr_control = pcr_control;
    m_pcr_control_isSet = true;
}

bool OAIM3u8Settings::is_pcr_control_Set() const{
    return m_pcr_control_isSet;
}

bool OAIM3u8Settings::is_pcr_control_Valid() const{
    return m_pcr_control_isValid;
}

qint32 OAIM3u8Settings::getPcrPid() const {
    return m_pcr_pid;
}
void OAIM3u8Settings::setPcrPid(const qint32 &pcr_pid) {
    m_pcr_pid = pcr_pid;
    m_pcr_pid_isSet = true;
}

bool OAIM3u8Settings::is_pcr_pid_Set() const{
    return m_pcr_pid_isSet;
}

bool OAIM3u8Settings::is_pcr_pid_Valid() const{
    return m_pcr_pid_isValid;
}

qint32 OAIM3u8Settings::getPmtInterval() const {
    return m_pmt_interval;
}
void OAIM3u8Settings::setPmtInterval(const qint32 &pmt_interval) {
    m_pmt_interval = pmt_interval;
    m_pmt_interval_isSet = true;
}

bool OAIM3u8Settings::is_pmt_interval_Set() const{
    return m_pmt_interval_isSet;
}

bool OAIM3u8Settings::is_pmt_interval_Valid() const{
    return m_pmt_interval_isValid;
}

qint32 OAIM3u8Settings::getPmtPid() const {
    return m_pmt_pid;
}
void OAIM3u8Settings::setPmtPid(const qint32 &pmt_pid) {
    m_pmt_pid = pmt_pid;
    m_pmt_pid_isSet = true;
}

bool OAIM3u8Settings::is_pmt_pid_Set() const{
    return m_pmt_pid_isSet;
}

bool OAIM3u8Settings::is_pmt_pid_Valid() const{
    return m_pmt_pid_isValid;
}

qint32 OAIM3u8Settings::getPrivateMetadataPid() const {
    return m_private_metadata_pid;
}
void OAIM3u8Settings::setPrivateMetadataPid(const qint32 &private_metadata_pid) {
    m_private_metadata_pid = private_metadata_pid;
    m_private_metadata_pid_isSet = true;
}

bool OAIM3u8Settings::is_private_metadata_pid_Set() const{
    return m_private_metadata_pid_isSet;
}

bool OAIM3u8Settings::is_private_metadata_pid_Valid() const{
    return m_private_metadata_pid_isValid;
}

qint32 OAIM3u8Settings::getProgramNumber() const {
    return m_program_number;
}
void OAIM3u8Settings::setProgramNumber(const qint32 &program_number) {
    m_program_number = program_number;
    m_program_number_isSet = true;
}

bool OAIM3u8Settings::is_program_number_Set() const{
    return m_program_number_isSet;
}

bool OAIM3u8Settings::is_program_number_Valid() const{
    return m_program_number_isValid;
}

qint32 OAIM3u8Settings::getScte35Pid() const {
    return m_scte35_pid;
}
void OAIM3u8Settings::setScte35Pid(const qint32 &scte35_pid) {
    m_scte35_pid = scte35_pid;
    m_scte35_pid_isSet = true;
}

bool OAIM3u8Settings::is_scte35_pid_Set() const{
    return m_scte35_pid_isSet;
}

bool OAIM3u8Settings::is_scte35_pid_Valid() const{
    return m_scte35_pid_isValid;
}

OAIM3u8Scte35Source OAIM3u8Settings::getScte35Source() const {
    return m_scte35_source;
}
void OAIM3u8Settings::setScte35Source(const OAIM3u8Scte35Source &scte35_source) {
    m_scte35_source = scte35_source;
    m_scte35_source_isSet = true;
}

bool OAIM3u8Settings::is_scte35_source_Set() const{
    return m_scte35_source_isSet;
}

bool OAIM3u8Settings::is_scte35_source_Valid() const{
    return m_scte35_source_isValid;
}

OAITimedMetadata OAIM3u8Settings::getTimedMetadata() const {
    return m_timed_metadata;
}
void OAIM3u8Settings::setTimedMetadata(const OAITimedMetadata &timed_metadata) {
    m_timed_metadata = timed_metadata;
    m_timed_metadata_isSet = true;
}

bool OAIM3u8Settings::is_timed_metadata_Set() const{
    return m_timed_metadata_isSet;
}

bool OAIM3u8Settings::is_timed_metadata_Valid() const{
    return m_timed_metadata_isValid;
}

qint32 OAIM3u8Settings::getTimedMetadataPid() const {
    return m_timed_metadata_pid;
}
void OAIM3u8Settings::setTimedMetadataPid(const qint32 &timed_metadata_pid) {
    m_timed_metadata_pid = timed_metadata_pid;
    m_timed_metadata_pid_isSet = true;
}

bool OAIM3u8Settings::is_timed_metadata_pid_Set() const{
    return m_timed_metadata_pid_isSet;
}

bool OAIM3u8Settings::is_timed_metadata_pid_Valid() const{
    return m_timed_metadata_pid_isValid;
}

qint32 OAIM3u8Settings::getTransportStreamId() const {
    return m_transport_stream_id;
}
void OAIM3u8Settings::setTransportStreamId(const qint32 &transport_stream_id) {
    m_transport_stream_id = transport_stream_id;
    m_transport_stream_id_isSet = true;
}

bool OAIM3u8Settings::is_transport_stream_id_Set() const{
    return m_transport_stream_id_isSet;
}

bool OAIM3u8Settings::is_transport_stream_id_Valid() const{
    return m_transport_stream_id_isValid;
}

qint32 OAIM3u8Settings::getVideoPid() const {
    return m_video_pid;
}
void OAIM3u8Settings::setVideoPid(const qint32 &video_pid) {
    m_video_pid = video_pid;
    m_video_pid_isSet = true;
}

bool OAIM3u8Settings::is_video_pid_Set() const{
    return m_video_pid_isSet;
}

bool OAIM3u8Settings::is_video_pid_Valid() const{
    return m_video_pid_isValid;
}

bool OAIM3u8Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_frames_per_pes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_pids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pts_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pcr_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_id3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pat_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcr_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcr_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pmt_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pmt_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_metadata_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_pid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIM3u8Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
