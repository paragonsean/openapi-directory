/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePreset_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePreset_request::OAICreatePreset_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePreset_request::OAICreatePreset_request() {
    this->initializeModel();
}

OAICreatePreset_request::~OAICreatePreset_request() {}

void OAICreatePreset_request::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreatePreset_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePreset_request::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreatePreset_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePreset_request::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreatePreset_request::getCategory() const {
    return m_category;
}
void OAICreatePreset_request::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICreatePreset_request::is_category_Set() const{
    return m_category_isSet;
}

bool OAICreatePreset_request::is_category_Valid() const{
    return m_category_isValid;
}

QString OAICreatePreset_request::getDescription() const {
    return m_description;
}
void OAICreatePreset_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreatePreset_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreatePreset_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreatePreset_request::getName() const {
    return m_name;
}
void OAICreatePreset_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreatePreset_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreatePreset_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreatePreset_request_settings OAICreatePreset_request::getSettings() const {
    return m_settings;
}
void OAICreatePreset_request::setSettings(const OAICreatePreset_request_settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAICreatePreset_request::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAICreatePreset_request::is_settings_Valid() const{
    return m_settings_isValid;
}

QMap<QString, QString> OAICreatePreset_request::getTags() const {
    return m_tags;
}
void OAICreatePreset_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePreset_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePreset_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreatePreset_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePreset_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_settings_isValid && true;
}

} // namespace OpenAPI
