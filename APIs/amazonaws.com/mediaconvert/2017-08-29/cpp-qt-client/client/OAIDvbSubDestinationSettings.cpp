/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDvbSubDestinationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDvbSubDestinationSettings::OAIDvbSubDestinationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDvbSubDestinationSettings::OAIDvbSubDestinationSettings() {
    this->initializeModel();
}

OAIDvbSubDestinationSettings::~OAIDvbSubDestinationSettings() {}

void OAIDvbSubDestinationSettings::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_apply_font_color_isSet = false;
    m_apply_font_color_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_background_opacity_isSet = false;
    m_background_opacity_isValid = false;

    m_dds_handling_isSet = false;
    m_dds_handling_isValid = false;

    m_dds_x_coordinate_isSet = false;
    m_dds_x_coordinate_isValid = false;

    m_dds_y_coordinate_isSet = false;
    m_dds_y_coordinate_isValid = false;

    m_fallback_font_isSet = false;
    m_fallback_font_isValid = false;

    m_font_color_isSet = false;
    m_font_color_isValid = false;

    m_font_opacity_isSet = false;
    m_font_opacity_isValid = false;

    m_font_resolution_isSet = false;
    m_font_resolution_isValid = false;

    m_font_script_isSet = false;
    m_font_script_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_hex_font_color_isSet = false;
    m_hex_font_color_isValid = false;

    m_outline_color_isSet = false;
    m_outline_color_isValid = false;

    m_outline_size_isSet = false;
    m_outline_size_isValid = false;

    m_shadow_color_isSet = false;
    m_shadow_color_isValid = false;

    m_shadow_opacity_isSet = false;
    m_shadow_opacity_isValid = false;

    m_shadow_x_offset_isSet = false;
    m_shadow_x_offset_isValid = false;

    m_shadow_y_offset_isSet = false;
    m_shadow_y_offset_isValid = false;

    m_style_passthrough_isSet = false;
    m_style_passthrough_isValid = false;

    m_subtitling_type_isSet = false;
    m_subtitling_type_isValid = false;

    m_teletext_spacing_isSet = false;
    m_teletext_spacing_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_x_position_isSet = false;
    m_x_position_isValid = false;

    m_y_position_isSet = false;
    m_y_position_isValid = false;
}

void OAIDvbSubDestinationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDvbSubDestinationSettings::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("Alignment")]);
    m_alignment_isSet = !json[QString("Alignment")].isNull() && m_alignment_isValid;

    m_apply_font_color_isValid = ::OpenAPI::fromJsonValue(m_apply_font_color, json[QString("ApplyFontColor")]);
    m_apply_font_color_isSet = !json[QString("ApplyFontColor")].isNull() && m_apply_font_color_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;

    m_background_opacity_isValid = ::OpenAPI::fromJsonValue(m_background_opacity, json[QString("BackgroundOpacity")]);
    m_background_opacity_isSet = !json[QString("BackgroundOpacity")].isNull() && m_background_opacity_isValid;

    m_dds_handling_isValid = ::OpenAPI::fromJsonValue(m_dds_handling, json[QString("DdsHandling")]);
    m_dds_handling_isSet = !json[QString("DdsHandling")].isNull() && m_dds_handling_isValid;

    m_dds_x_coordinate_isValid = ::OpenAPI::fromJsonValue(m_dds_x_coordinate, json[QString("DdsXCoordinate")]);
    m_dds_x_coordinate_isSet = !json[QString("DdsXCoordinate")].isNull() && m_dds_x_coordinate_isValid;

    m_dds_y_coordinate_isValid = ::OpenAPI::fromJsonValue(m_dds_y_coordinate, json[QString("DdsYCoordinate")]);
    m_dds_y_coordinate_isSet = !json[QString("DdsYCoordinate")].isNull() && m_dds_y_coordinate_isValid;

    m_fallback_font_isValid = ::OpenAPI::fromJsonValue(m_fallback_font, json[QString("FallbackFont")]);
    m_fallback_font_isSet = !json[QString("FallbackFont")].isNull() && m_fallback_font_isValid;

    m_font_color_isValid = ::OpenAPI::fromJsonValue(m_font_color, json[QString("FontColor")]);
    m_font_color_isSet = !json[QString("FontColor")].isNull() && m_font_color_isValid;

    m_font_opacity_isValid = ::OpenAPI::fromJsonValue(m_font_opacity, json[QString("FontOpacity")]);
    m_font_opacity_isSet = !json[QString("FontOpacity")].isNull() && m_font_opacity_isValid;

    m_font_resolution_isValid = ::OpenAPI::fromJsonValue(m_font_resolution, json[QString("FontResolution")]);
    m_font_resolution_isSet = !json[QString("FontResolution")].isNull() && m_font_resolution_isValid;

    m_font_script_isValid = ::OpenAPI::fromJsonValue(m_font_script, json[QString("FontScript")]);
    m_font_script_isSet = !json[QString("FontScript")].isNull() && m_font_script_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("FontSize")]);
    m_font_size_isSet = !json[QString("FontSize")].isNull() && m_font_size_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_hex_font_color_isValid = ::OpenAPI::fromJsonValue(m_hex_font_color, json[QString("HexFontColor")]);
    m_hex_font_color_isSet = !json[QString("HexFontColor")].isNull() && m_hex_font_color_isValid;

    m_outline_color_isValid = ::OpenAPI::fromJsonValue(m_outline_color, json[QString("OutlineColor")]);
    m_outline_color_isSet = !json[QString("OutlineColor")].isNull() && m_outline_color_isValid;

    m_outline_size_isValid = ::OpenAPI::fromJsonValue(m_outline_size, json[QString("OutlineSize")]);
    m_outline_size_isSet = !json[QString("OutlineSize")].isNull() && m_outline_size_isValid;

    m_shadow_color_isValid = ::OpenAPI::fromJsonValue(m_shadow_color, json[QString("ShadowColor")]);
    m_shadow_color_isSet = !json[QString("ShadowColor")].isNull() && m_shadow_color_isValid;

    m_shadow_opacity_isValid = ::OpenAPI::fromJsonValue(m_shadow_opacity, json[QString("ShadowOpacity")]);
    m_shadow_opacity_isSet = !json[QString("ShadowOpacity")].isNull() && m_shadow_opacity_isValid;

    m_shadow_x_offset_isValid = ::OpenAPI::fromJsonValue(m_shadow_x_offset, json[QString("ShadowXOffset")]);
    m_shadow_x_offset_isSet = !json[QString("ShadowXOffset")].isNull() && m_shadow_x_offset_isValid;

    m_shadow_y_offset_isValid = ::OpenAPI::fromJsonValue(m_shadow_y_offset, json[QString("ShadowYOffset")]);
    m_shadow_y_offset_isSet = !json[QString("ShadowYOffset")].isNull() && m_shadow_y_offset_isValid;

    m_style_passthrough_isValid = ::OpenAPI::fromJsonValue(m_style_passthrough, json[QString("StylePassthrough")]);
    m_style_passthrough_isSet = !json[QString("StylePassthrough")].isNull() && m_style_passthrough_isValid;

    m_subtitling_type_isValid = ::OpenAPI::fromJsonValue(m_subtitling_type, json[QString("SubtitlingType")]);
    m_subtitling_type_isSet = !json[QString("SubtitlingType")].isNull() && m_subtitling_type_isValid;

    m_teletext_spacing_isValid = ::OpenAPI::fromJsonValue(m_teletext_spacing, json[QString("TeletextSpacing")]);
    m_teletext_spacing_isSet = !json[QString("TeletextSpacing")].isNull() && m_teletext_spacing_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;

    m_x_position_isValid = ::OpenAPI::fromJsonValue(m_x_position, json[QString("XPosition")]);
    m_x_position_isSet = !json[QString("XPosition")].isNull() && m_x_position_isValid;

    m_y_position_isValid = ::OpenAPI::fromJsonValue(m_y_position, json[QString("YPosition")]);
    m_y_position_isSet = !json[QString("YPosition")].isNull() && m_y_position_isValid;
}

QString OAIDvbSubDestinationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDvbSubDestinationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment.isSet()) {
        obj.insert(QString("Alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_apply_font_color.isSet()) {
        obj.insert(QString("ApplyFontColor"), ::OpenAPI::toJsonValue(m_apply_font_color));
    }
    if (m_background_color.isSet()) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_background_opacity_isSet) {
        obj.insert(QString("BackgroundOpacity"), ::OpenAPI::toJsonValue(m_background_opacity));
    }
    if (m_dds_handling.isSet()) {
        obj.insert(QString("DdsHandling"), ::OpenAPI::toJsonValue(m_dds_handling));
    }
    if (m_dds_x_coordinate_isSet) {
        obj.insert(QString("DdsXCoordinate"), ::OpenAPI::toJsonValue(m_dds_x_coordinate));
    }
    if (m_dds_y_coordinate_isSet) {
        obj.insert(QString("DdsYCoordinate"), ::OpenAPI::toJsonValue(m_dds_y_coordinate));
    }
    if (m_fallback_font.isSet()) {
        obj.insert(QString("FallbackFont"), ::OpenAPI::toJsonValue(m_fallback_font));
    }
    if (m_font_color.isSet()) {
        obj.insert(QString("FontColor"), ::OpenAPI::toJsonValue(m_font_color));
    }
    if (m_font_opacity_isSet) {
        obj.insert(QString("FontOpacity"), ::OpenAPI::toJsonValue(m_font_opacity));
    }
    if (m_font_resolution_isSet) {
        obj.insert(QString("FontResolution"), ::OpenAPI::toJsonValue(m_font_resolution));
    }
    if (m_font_script.isSet()) {
        obj.insert(QString("FontScript"), ::OpenAPI::toJsonValue(m_font_script));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("FontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_hex_font_color_isSet) {
        obj.insert(QString("HexFontColor"), ::OpenAPI::toJsonValue(m_hex_font_color));
    }
    if (m_outline_color.isSet()) {
        obj.insert(QString("OutlineColor"), ::OpenAPI::toJsonValue(m_outline_color));
    }
    if (m_outline_size_isSet) {
        obj.insert(QString("OutlineSize"), ::OpenAPI::toJsonValue(m_outline_size));
    }
    if (m_shadow_color.isSet()) {
        obj.insert(QString("ShadowColor"), ::OpenAPI::toJsonValue(m_shadow_color));
    }
    if (m_shadow_opacity_isSet) {
        obj.insert(QString("ShadowOpacity"), ::OpenAPI::toJsonValue(m_shadow_opacity));
    }
    if (m_shadow_x_offset_isSet) {
        obj.insert(QString("ShadowXOffset"), ::OpenAPI::toJsonValue(m_shadow_x_offset));
    }
    if (m_shadow_y_offset_isSet) {
        obj.insert(QString("ShadowYOffset"), ::OpenAPI::toJsonValue(m_shadow_y_offset));
    }
    if (m_style_passthrough.isSet()) {
        obj.insert(QString("StylePassthrough"), ::OpenAPI::toJsonValue(m_style_passthrough));
    }
    if (m_subtitling_type.isSet()) {
        obj.insert(QString("SubtitlingType"), ::OpenAPI::toJsonValue(m_subtitling_type));
    }
    if (m_teletext_spacing.isSet()) {
        obj.insert(QString("TeletextSpacing"), ::OpenAPI::toJsonValue(m_teletext_spacing));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_x_position_isSet) {
        obj.insert(QString("XPosition"), ::OpenAPI::toJsonValue(m_x_position));
    }
    if (m_y_position_isSet) {
        obj.insert(QString("YPosition"), ::OpenAPI::toJsonValue(m_y_position));
    }
    return obj;
}

OAIDvbSubtitleAlignment OAIDvbSubDestinationSettings::getAlignment() const {
    return m_alignment;
}
void OAIDvbSubDestinationSettings::setAlignment(const OAIDvbSubtitleAlignment &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIDvbSubDestinationSettings::is_alignment_Valid() const{
    return m_alignment_isValid;
}

OAIDvbSubtitleApplyFontColor OAIDvbSubDestinationSettings::getApplyFontColor() const {
    return m_apply_font_color;
}
void OAIDvbSubDestinationSettings::setApplyFontColor(const OAIDvbSubtitleApplyFontColor &apply_font_color) {
    m_apply_font_color = apply_font_color;
    m_apply_font_color_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_apply_font_color_Set() const{
    return m_apply_font_color_isSet;
}

bool OAIDvbSubDestinationSettings::is_apply_font_color_Valid() const{
    return m_apply_font_color_isValid;
}

OAIDvbSubtitleBackgroundColor OAIDvbSubDestinationSettings::getBackgroundColor() const {
    return m_background_color;
}
void OAIDvbSubDestinationSettings::setBackgroundColor(const OAIDvbSubtitleBackgroundColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIDvbSubDestinationSettings::is_background_color_Valid() const{
    return m_background_color_isValid;
}

qint32 OAIDvbSubDestinationSettings::getBackgroundOpacity() const {
    return m_background_opacity;
}
void OAIDvbSubDestinationSettings::setBackgroundOpacity(const qint32 &background_opacity) {
    m_background_opacity = background_opacity;
    m_background_opacity_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_background_opacity_Set() const{
    return m_background_opacity_isSet;
}

bool OAIDvbSubDestinationSettings::is_background_opacity_Valid() const{
    return m_background_opacity_isValid;
}

OAIDvbddsHandling OAIDvbSubDestinationSettings::getDdsHandling() const {
    return m_dds_handling;
}
void OAIDvbSubDestinationSettings::setDdsHandling(const OAIDvbddsHandling &dds_handling) {
    m_dds_handling = dds_handling;
    m_dds_handling_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_dds_handling_Set() const{
    return m_dds_handling_isSet;
}

bool OAIDvbSubDestinationSettings::is_dds_handling_Valid() const{
    return m_dds_handling_isValid;
}

qint32 OAIDvbSubDestinationSettings::getDdsXCoordinate() const {
    return m_dds_x_coordinate;
}
void OAIDvbSubDestinationSettings::setDdsXCoordinate(const qint32 &dds_x_coordinate) {
    m_dds_x_coordinate = dds_x_coordinate;
    m_dds_x_coordinate_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_dds_x_coordinate_Set() const{
    return m_dds_x_coordinate_isSet;
}

bool OAIDvbSubDestinationSettings::is_dds_x_coordinate_Valid() const{
    return m_dds_x_coordinate_isValid;
}

qint32 OAIDvbSubDestinationSettings::getDdsYCoordinate() const {
    return m_dds_y_coordinate;
}
void OAIDvbSubDestinationSettings::setDdsYCoordinate(const qint32 &dds_y_coordinate) {
    m_dds_y_coordinate = dds_y_coordinate;
    m_dds_y_coordinate_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_dds_y_coordinate_Set() const{
    return m_dds_y_coordinate_isSet;
}

bool OAIDvbSubDestinationSettings::is_dds_y_coordinate_Valid() const{
    return m_dds_y_coordinate_isValid;
}

OAIDvbSubSubtitleFallbackFont OAIDvbSubDestinationSettings::getFallbackFont() const {
    return m_fallback_font;
}
void OAIDvbSubDestinationSettings::setFallbackFont(const OAIDvbSubSubtitleFallbackFont &fallback_font) {
    m_fallback_font = fallback_font;
    m_fallback_font_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_fallback_font_Set() const{
    return m_fallback_font_isSet;
}

bool OAIDvbSubDestinationSettings::is_fallback_font_Valid() const{
    return m_fallback_font_isValid;
}

OAIDvbSubtitleFontColor OAIDvbSubDestinationSettings::getFontColor() const {
    return m_font_color;
}
void OAIDvbSubDestinationSettings::setFontColor(const OAIDvbSubtitleFontColor &font_color) {
    m_font_color = font_color;
    m_font_color_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_font_color_Set() const{
    return m_font_color_isSet;
}

bool OAIDvbSubDestinationSettings::is_font_color_Valid() const{
    return m_font_color_isValid;
}

qint32 OAIDvbSubDestinationSettings::getFontOpacity() const {
    return m_font_opacity;
}
void OAIDvbSubDestinationSettings::setFontOpacity(const qint32 &font_opacity) {
    m_font_opacity = font_opacity;
    m_font_opacity_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_font_opacity_Set() const{
    return m_font_opacity_isSet;
}

bool OAIDvbSubDestinationSettings::is_font_opacity_Valid() const{
    return m_font_opacity_isValid;
}

qint32 OAIDvbSubDestinationSettings::getFontResolution() const {
    return m_font_resolution;
}
void OAIDvbSubDestinationSettings::setFontResolution(const qint32 &font_resolution) {
    m_font_resolution = font_resolution;
    m_font_resolution_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_font_resolution_Set() const{
    return m_font_resolution_isSet;
}

bool OAIDvbSubDestinationSettings::is_font_resolution_Valid() const{
    return m_font_resolution_isValid;
}

OAIFontScript OAIDvbSubDestinationSettings::getFontScript() const {
    return m_font_script;
}
void OAIDvbSubDestinationSettings::setFontScript(const OAIFontScript &font_script) {
    m_font_script = font_script;
    m_font_script_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_font_script_Set() const{
    return m_font_script_isSet;
}

bool OAIDvbSubDestinationSettings::is_font_script_Valid() const{
    return m_font_script_isValid;
}

qint32 OAIDvbSubDestinationSettings::getFontSize() const {
    return m_font_size;
}
void OAIDvbSubDestinationSettings::setFontSize(const qint32 &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIDvbSubDestinationSettings::is_font_size_Valid() const{
    return m_font_size_isValid;
}

qint32 OAIDvbSubDestinationSettings::getHeight() const {
    return m_height;
}
void OAIDvbSubDestinationSettings::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_height_Set() const{
    return m_height_isSet;
}

bool OAIDvbSubDestinationSettings::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIDvbSubDestinationSettings::getHexFontColor() const {
    return m_hex_font_color;
}
void OAIDvbSubDestinationSettings::setHexFontColor(const QString &hex_font_color) {
    m_hex_font_color = hex_font_color;
    m_hex_font_color_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_hex_font_color_Set() const{
    return m_hex_font_color_isSet;
}

bool OAIDvbSubDestinationSettings::is_hex_font_color_Valid() const{
    return m_hex_font_color_isValid;
}

OAIDvbSubtitleOutlineColor OAIDvbSubDestinationSettings::getOutlineColor() const {
    return m_outline_color;
}
void OAIDvbSubDestinationSettings::setOutlineColor(const OAIDvbSubtitleOutlineColor &outline_color) {
    m_outline_color = outline_color;
    m_outline_color_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_outline_color_Set() const{
    return m_outline_color_isSet;
}

bool OAIDvbSubDestinationSettings::is_outline_color_Valid() const{
    return m_outline_color_isValid;
}

qint32 OAIDvbSubDestinationSettings::getOutlineSize() const {
    return m_outline_size;
}
void OAIDvbSubDestinationSettings::setOutlineSize(const qint32 &outline_size) {
    m_outline_size = outline_size;
    m_outline_size_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_outline_size_Set() const{
    return m_outline_size_isSet;
}

bool OAIDvbSubDestinationSettings::is_outline_size_Valid() const{
    return m_outline_size_isValid;
}

OAIDvbSubtitleShadowColor OAIDvbSubDestinationSettings::getShadowColor() const {
    return m_shadow_color;
}
void OAIDvbSubDestinationSettings::setShadowColor(const OAIDvbSubtitleShadowColor &shadow_color) {
    m_shadow_color = shadow_color;
    m_shadow_color_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_shadow_color_Set() const{
    return m_shadow_color_isSet;
}

bool OAIDvbSubDestinationSettings::is_shadow_color_Valid() const{
    return m_shadow_color_isValid;
}

qint32 OAIDvbSubDestinationSettings::getShadowOpacity() const {
    return m_shadow_opacity;
}
void OAIDvbSubDestinationSettings::setShadowOpacity(const qint32 &shadow_opacity) {
    m_shadow_opacity = shadow_opacity;
    m_shadow_opacity_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_shadow_opacity_Set() const{
    return m_shadow_opacity_isSet;
}

bool OAIDvbSubDestinationSettings::is_shadow_opacity_Valid() const{
    return m_shadow_opacity_isValid;
}

qint32 OAIDvbSubDestinationSettings::getShadowXOffset() const {
    return m_shadow_x_offset;
}
void OAIDvbSubDestinationSettings::setShadowXOffset(const qint32 &shadow_x_offset) {
    m_shadow_x_offset = shadow_x_offset;
    m_shadow_x_offset_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_shadow_x_offset_Set() const{
    return m_shadow_x_offset_isSet;
}

bool OAIDvbSubDestinationSettings::is_shadow_x_offset_Valid() const{
    return m_shadow_x_offset_isValid;
}

qint32 OAIDvbSubDestinationSettings::getShadowYOffset() const {
    return m_shadow_y_offset;
}
void OAIDvbSubDestinationSettings::setShadowYOffset(const qint32 &shadow_y_offset) {
    m_shadow_y_offset = shadow_y_offset;
    m_shadow_y_offset_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_shadow_y_offset_Set() const{
    return m_shadow_y_offset_isSet;
}

bool OAIDvbSubDestinationSettings::is_shadow_y_offset_Valid() const{
    return m_shadow_y_offset_isValid;
}

OAIDvbSubtitleStylePassthrough OAIDvbSubDestinationSettings::getStylePassthrough() const {
    return m_style_passthrough;
}
void OAIDvbSubDestinationSettings::setStylePassthrough(const OAIDvbSubtitleStylePassthrough &style_passthrough) {
    m_style_passthrough = style_passthrough;
    m_style_passthrough_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_style_passthrough_Set() const{
    return m_style_passthrough_isSet;
}

bool OAIDvbSubDestinationSettings::is_style_passthrough_Valid() const{
    return m_style_passthrough_isValid;
}

OAIDvbSubtitlingType OAIDvbSubDestinationSettings::getSubtitlingType() const {
    return m_subtitling_type;
}
void OAIDvbSubDestinationSettings::setSubtitlingType(const OAIDvbSubtitlingType &subtitling_type) {
    m_subtitling_type = subtitling_type;
    m_subtitling_type_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_subtitling_type_Set() const{
    return m_subtitling_type_isSet;
}

bool OAIDvbSubDestinationSettings::is_subtitling_type_Valid() const{
    return m_subtitling_type_isValid;
}

OAIDvbSubtitleTeletextSpacing OAIDvbSubDestinationSettings::getTeletextSpacing() const {
    return m_teletext_spacing;
}
void OAIDvbSubDestinationSettings::setTeletextSpacing(const OAIDvbSubtitleTeletextSpacing &teletext_spacing) {
    m_teletext_spacing = teletext_spacing;
    m_teletext_spacing_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_teletext_spacing_Set() const{
    return m_teletext_spacing_isSet;
}

bool OAIDvbSubDestinationSettings::is_teletext_spacing_Valid() const{
    return m_teletext_spacing_isValid;
}

qint32 OAIDvbSubDestinationSettings::getWidth() const {
    return m_width;
}
void OAIDvbSubDestinationSettings::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_width_Set() const{
    return m_width_isSet;
}

bool OAIDvbSubDestinationSettings::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAIDvbSubDestinationSettings::getXPosition() const {
    return m_x_position;
}
void OAIDvbSubDestinationSettings::setXPosition(const qint32 &x_position) {
    m_x_position = x_position;
    m_x_position_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_x_position_Set() const{
    return m_x_position_isSet;
}

bool OAIDvbSubDestinationSettings::is_x_position_Valid() const{
    return m_x_position_isValid;
}

qint32 OAIDvbSubDestinationSettings::getYPosition() const {
    return m_y_position;
}
void OAIDvbSubDestinationSettings::setYPosition(const qint32 &y_position) {
    m_y_position = y_position;
    m_y_position_isSet = true;
}

bool OAIDvbSubDestinationSettings::is_y_position_Set() const{
    return m_y_position_isSet;
}

bool OAIDvbSubDestinationSettings::is_y_position_Valid() const{
    return m_y_position_isValid;
}

bool OAIDvbSubDestinationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_font_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dds_handling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dds_x_coordinate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dds_y_coordinate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_font.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_script.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_font_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_x_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_y_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_passthrough.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitling_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_teletext_spacing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDvbSubDestinationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
