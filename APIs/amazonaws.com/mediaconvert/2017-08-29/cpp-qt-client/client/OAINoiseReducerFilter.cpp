/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINoiseReducerFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINoiseReducerFilter::OAINoiseReducerFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINoiseReducerFilter::OAINoiseReducerFilter() {
    this->initializeModel();
}

OAINoiseReducerFilter::~OAINoiseReducerFilter() {}

void OAINoiseReducerFilter::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINoiseReducerFilter::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINoiseReducerFilter::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BILATERAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoiseReducerFilter::BILATERAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoiseReducerFilter::MEAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GAUSSIAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoiseReducerFilter::GAUSSIAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LANCZOS", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoiseReducerFilter::LANCZOS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHARPEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoiseReducerFilter::SHARPEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONSERVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoiseReducerFilter::CONSERVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPATIAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoiseReducerFilter::SPATIAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEMPORAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAINoiseReducerFilter::TEMPORAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINoiseReducerFilter::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINoiseReducerFilter::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINoiseReducerFilter::BILATERAL:
            val = "BILATERAL";
            break;
        case eOAINoiseReducerFilter::MEAN:
            val = "MEAN";
            break;
        case eOAINoiseReducerFilter::GAUSSIAN:
            val = "GAUSSIAN";
            break;
        case eOAINoiseReducerFilter::LANCZOS:
            val = "LANCZOS";
            break;
        case eOAINoiseReducerFilter::SHARPEN:
            val = "SHARPEN";
            break;
        case eOAINoiseReducerFilter::CONSERVE:
            val = "CONSERVE";
            break;
        case eOAINoiseReducerFilter::SPATIAL:
            val = "SPATIAL";
            break;
        case eOAINoiseReducerFilter::TEMPORAL:
            val = "TEMPORAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINoiseReducerFilter::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINoiseReducerFilter::eOAINoiseReducerFilter OAINoiseReducerFilter::getValue() const {
    return m_value;
}

void OAINoiseReducerFilter::setValue(const OAINoiseReducerFilter::eOAINoiseReducerFilter& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINoiseReducerFilter::isSet() const {
    
    return m_value_isSet;
}

bool OAINoiseReducerFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
