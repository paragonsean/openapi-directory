/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresetSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresetSettings::OAIPresetSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresetSettings::OAIPresetSettings() {
    this->initializeModel();
}

OAIPresetSettings::~OAIPresetSettings() {}

void OAIPresetSettings::initializeModel() {

    m_audio_descriptions_isSet = false;
    m_audio_descriptions_isValid = false;

    m_caption_descriptions_isSet = false;
    m_caption_descriptions_isValid = false;

    m_container_settings_isSet = false;
    m_container_settings_isValid = false;

    m_video_description_isSet = false;
    m_video_description_isValid = false;
}

void OAIPresetSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresetSettings::fromJsonObject(QJsonObject json) {

    m_audio_descriptions_isValid = ::OpenAPI::fromJsonValue(m_audio_descriptions, json[QString("AudioDescriptions")]);
    m_audio_descriptions_isSet = !json[QString("AudioDescriptions")].isNull() && m_audio_descriptions_isValid;

    m_caption_descriptions_isValid = ::OpenAPI::fromJsonValue(m_caption_descriptions, json[QString("CaptionDescriptions")]);
    m_caption_descriptions_isSet = !json[QString("CaptionDescriptions")].isNull() && m_caption_descriptions_isValid;

    m_container_settings_isValid = ::OpenAPI::fromJsonValue(m_container_settings, json[QString("ContainerSettings")]);
    m_container_settings_isSet = !json[QString("ContainerSettings")].isNull() && m_container_settings_isValid;

    m_video_description_isValid = ::OpenAPI::fromJsonValue(m_video_description, json[QString("VideoDescription")]);
    m_video_description_isSet = !json[QString("VideoDescription")].isNull() && m_video_description_isValid;
}

QString OAIPresetSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresetSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_descriptions.isSet()) {
        obj.insert(QString("AudioDescriptions"), ::OpenAPI::toJsonValue(m_audio_descriptions));
    }
    if (m_caption_descriptions.isSet()) {
        obj.insert(QString("CaptionDescriptions"), ::OpenAPI::toJsonValue(m_caption_descriptions));
    }
    if (m_container_settings.isSet()) {
        obj.insert(QString("ContainerSettings"), ::OpenAPI::toJsonValue(m_container_settings));
    }
    if (m_video_description.isSet()) {
        obj.insert(QString("VideoDescription"), ::OpenAPI::toJsonValue(m_video_description));
    }
    return obj;
}

QList OAIPresetSettings::getAudioDescriptions() const {
    return m_audio_descriptions;
}
void OAIPresetSettings::setAudioDescriptions(const QList &audio_descriptions) {
    m_audio_descriptions = audio_descriptions;
    m_audio_descriptions_isSet = true;
}

bool OAIPresetSettings::is_audio_descriptions_Set() const{
    return m_audio_descriptions_isSet;
}

bool OAIPresetSettings::is_audio_descriptions_Valid() const{
    return m_audio_descriptions_isValid;
}

QList OAIPresetSettings::getCaptionDescriptions() const {
    return m_caption_descriptions;
}
void OAIPresetSettings::setCaptionDescriptions(const QList &caption_descriptions) {
    m_caption_descriptions = caption_descriptions;
    m_caption_descriptions_isSet = true;
}

bool OAIPresetSettings::is_caption_descriptions_Set() const{
    return m_caption_descriptions_isSet;
}

bool OAIPresetSettings::is_caption_descriptions_Valid() const{
    return m_caption_descriptions_isValid;
}

OAICreatePreset_request_settings_ContainerSettings OAIPresetSettings::getContainerSettings() const {
    return m_container_settings;
}
void OAIPresetSettings::setContainerSettings(const OAICreatePreset_request_settings_ContainerSettings &container_settings) {
    m_container_settings = container_settings;
    m_container_settings_isSet = true;
}

bool OAIPresetSettings::is_container_settings_Set() const{
    return m_container_settings_isSet;
}

bool OAIPresetSettings::is_container_settings_Valid() const{
    return m_container_settings_isValid;
}

OAICreatePreset_request_settings_VideoDescription OAIPresetSettings::getVideoDescription() const {
    return m_video_description;
}
void OAIPresetSettings::setVideoDescription(const OAICreatePreset_request_settings_VideoDescription &video_description) {
    m_video_description = video_description;
    m_video_description_isSet = true;
}

bool OAIPresetSettings::is_video_description_Set() const{
    return m_video_description_isSet;
}

bool OAIPresetSettings::is_video_description_Valid() const{
    return m_video_description_isValid;
}

bool OAIPresetSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresetSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
