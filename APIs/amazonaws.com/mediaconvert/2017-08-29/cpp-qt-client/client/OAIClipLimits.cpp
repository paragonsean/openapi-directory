/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClipLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClipLimits::OAIClipLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClipLimits::OAIClipLimits() {
    this->initializeModel();
}

OAIClipLimits::~OAIClipLimits() {}

void OAIClipLimits::initializeModel() {

    m_maximum_rgb_tolerance_isSet = false;
    m_maximum_rgb_tolerance_isValid = false;

    m_maximum_yuv_isSet = false;
    m_maximum_yuv_isValid = false;

    m_minimum_rgb_tolerance_isSet = false;
    m_minimum_rgb_tolerance_isValid = false;

    m_minimum_yuv_isSet = false;
    m_minimum_yuv_isValid = false;
}

void OAIClipLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClipLimits::fromJsonObject(QJsonObject json) {

    m_maximum_rgb_tolerance_isValid = ::OpenAPI::fromJsonValue(m_maximum_rgb_tolerance, json[QString("MaximumRGBTolerance")]);
    m_maximum_rgb_tolerance_isSet = !json[QString("MaximumRGBTolerance")].isNull() && m_maximum_rgb_tolerance_isValid;

    m_maximum_yuv_isValid = ::OpenAPI::fromJsonValue(m_maximum_yuv, json[QString("MaximumYUV")]);
    m_maximum_yuv_isSet = !json[QString("MaximumYUV")].isNull() && m_maximum_yuv_isValid;

    m_minimum_rgb_tolerance_isValid = ::OpenAPI::fromJsonValue(m_minimum_rgb_tolerance, json[QString("MinimumRGBTolerance")]);
    m_minimum_rgb_tolerance_isSet = !json[QString("MinimumRGBTolerance")].isNull() && m_minimum_rgb_tolerance_isValid;

    m_minimum_yuv_isValid = ::OpenAPI::fromJsonValue(m_minimum_yuv, json[QString("MinimumYUV")]);
    m_minimum_yuv_isSet = !json[QString("MinimumYUV")].isNull() && m_minimum_yuv_isValid;
}

QString OAIClipLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClipLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_rgb_tolerance_isSet) {
        obj.insert(QString("MaximumRGBTolerance"), ::OpenAPI::toJsonValue(m_maximum_rgb_tolerance));
    }
    if (m_maximum_yuv_isSet) {
        obj.insert(QString("MaximumYUV"), ::OpenAPI::toJsonValue(m_maximum_yuv));
    }
    if (m_minimum_rgb_tolerance_isSet) {
        obj.insert(QString("MinimumRGBTolerance"), ::OpenAPI::toJsonValue(m_minimum_rgb_tolerance));
    }
    if (m_minimum_yuv_isSet) {
        obj.insert(QString("MinimumYUV"), ::OpenAPI::toJsonValue(m_minimum_yuv));
    }
    return obj;
}

qint32 OAIClipLimits::getMaximumRgbTolerance() const {
    return m_maximum_rgb_tolerance;
}
void OAIClipLimits::setMaximumRgbTolerance(const qint32 &maximum_rgb_tolerance) {
    m_maximum_rgb_tolerance = maximum_rgb_tolerance;
    m_maximum_rgb_tolerance_isSet = true;
}

bool OAIClipLimits::is_maximum_rgb_tolerance_Set() const{
    return m_maximum_rgb_tolerance_isSet;
}

bool OAIClipLimits::is_maximum_rgb_tolerance_Valid() const{
    return m_maximum_rgb_tolerance_isValid;
}

qint32 OAIClipLimits::getMaximumYuv() const {
    return m_maximum_yuv;
}
void OAIClipLimits::setMaximumYuv(const qint32 &maximum_yuv) {
    m_maximum_yuv = maximum_yuv;
    m_maximum_yuv_isSet = true;
}

bool OAIClipLimits::is_maximum_yuv_Set() const{
    return m_maximum_yuv_isSet;
}

bool OAIClipLimits::is_maximum_yuv_Valid() const{
    return m_maximum_yuv_isValid;
}

qint32 OAIClipLimits::getMinimumRgbTolerance() const {
    return m_minimum_rgb_tolerance;
}
void OAIClipLimits::setMinimumRgbTolerance(const qint32 &minimum_rgb_tolerance) {
    m_minimum_rgb_tolerance = minimum_rgb_tolerance;
    m_minimum_rgb_tolerance_isSet = true;
}

bool OAIClipLimits::is_minimum_rgb_tolerance_Set() const{
    return m_minimum_rgb_tolerance_isSet;
}

bool OAIClipLimits::is_minimum_rgb_tolerance_Valid() const{
    return m_minimum_rgb_tolerance_isValid;
}

qint32 OAIClipLimits::getMinimumYuv() const {
    return m_minimum_yuv;
}
void OAIClipLimits::setMinimumYuv(const qint32 &minimum_yuv) {
    m_minimum_yuv = minimum_yuv;
    m_minimum_yuv_isSet = true;
}

bool OAIClipLimits::is_minimum_yuv_Set() const{
    return m_minimum_yuv_isSet;
}

bool OAIClipLimits::is_minimum_yuv_Valid() const{
    return m_minimum_yuv_isValid;
}

bool OAIClipLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_rgb_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_yuv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_rgb_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_yuv_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClipLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
