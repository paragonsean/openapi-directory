/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColorCorrector_Hdr10Metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorCorrector_Hdr10Metadata::OAIColorCorrector_Hdr10Metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorCorrector_Hdr10Metadata::OAIColorCorrector_Hdr10Metadata() {
    this->initializeModel();
}

OAIColorCorrector_Hdr10Metadata::~OAIColorCorrector_Hdr10Metadata() {}

void OAIColorCorrector_Hdr10Metadata::initializeModel() {

    m_blue_primary_x_isSet = false;
    m_blue_primary_x_isValid = false;

    m_blue_primary_y_isSet = false;
    m_blue_primary_y_isValid = false;

    m_green_primary_x_isSet = false;
    m_green_primary_x_isValid = false;

    m_green_primary_y_isSet = false;
    m_green_primary_y_isValid = false;

    m_max_content_light_level_isSet = false;
    m_max_content_light_level_isValid = false;

    m_max_frame_average_light_level_isSet = false;
    m_max_frame_average_light_level_isValid = false;

    m_max_luminance_isSet = false;
    m_max_luminance_isValid = false;

    m_min_luminance_isSet = false;
    m_min_luminance_isValid = false;

    m_red_primary_x_isSet = false;
    m_red_primary_x_isValid = false;

    m_red_primary_y_isSet = false;
    m_red_primary_y_isValid = false;

    m_white_point_x_isSet = false;
    m_white_point_x_isValid = false;

    m_white_point_y_isSet = false;
    m_white_point_y_isValid = false;
}

void OAIColorCorrector_Hdr10Metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColorCorrector_Hdr10Metadata::fromJsonObject(QJsonObject json) {

    m_blue_primary_x_isValid = ::OpenAPI::fromJsonValue(m_blue_primary_x, json[QString("BluePrimaryX")]);
    m_blue_primary_x_isSet = !json[QString("BluePrimaryX")].isNull() && m_blue_primary_x_isValid;

    m_blue_primary_y_isValid = ::OpenAPI::fromJsonValue(m_blue_primary_y, json[QString("BluePrimaryY")]);
    m_blue_primary_y_isSet = !json[QString("BluePrimaryY")].isNull() && m_blue_primary_y_isValid;

    m_green_primary_x_isValid = ::OpenAPI::fromJsonValue(m_green_primary_x, json[QString("GreenPrimaryX")]);
    m_green_primary_x_isSet = !json[QString("GreenPrimaryX")].isNull() && m_green_primary_x_isValid;

    m_green_primary_y_isValid = ::OpenAPI::fromJsonValue(m_green_primary_y, json[QString("GreenPrimaryY")]);
    m_green_primary_y_isSet = !json[QString("GreenPrimaryY")].isNull() && m_green_primary_y_isValid;

    m_max_content_light_level_isValid = ::OpenAPI::fromJsonValue(m_max_content_light_level, json[QString("MaxContentLightLevel")]);
    m_max_content_light_level_isSet = !json[QString("MaxContentLightLevel")].isNull() && m_max_content_light_level_isValid;

    m_max_frame_average_light_level_isValid = ::OpenAPI::fromJsonValue(m_max_frame_average_light_level, json[QString("MaxFrameAverageLightLevel")]);
    m_max_frame_average_light_level_isSet = !json[QString("MaxFrameAverageLightLevel")].isNull() && m_max_frame_average_light_level_isValid;

    m_max_luminance_isValid = ::OpenAPI::fromJsonValue(m_max_luminance, json[QString("MaxLuminance")]);
    m_max_luminance_isSet = !json[QString("MaxLuminance")].isNull() && m_max_luminance_isValid;

    m_min_luminance_isValid = ::OpenAPI::fromJsonValue(m_min_luminance, json[QString("MinLuminance")]);
    m_min_luminance_isSet = !json[QString("MinLuminance")].isNull() && m_min_luminance_isValid;

    m_red_primary_x_isValid = ::OpenAPI::fromJsonValue(m_red_primary_x, json[QString("RedPrimaryX")]);
    m_red_primary_x_isSet = !json[QString("RedPrimaryX")].isNull() && m_red_primary_x_isValid;

    m_red_primary_y_isValid = ::OpenAPI::fromJsonValue(m_red_primary_y, json[QString("RedPrimaryY")]);
    m_red_primary_y_isSet = !json[QString("RedPrimaryY")].isNull() && m_red_primary_y_isValid;

    m_white_point_x_isValid = ::OpenAPI::fromJsonValue(m_white_point_x, json[QString("WhitePointX")]);
    m_white_point_x_isSet = !json[QString("WhitePointX")].isNull() && m_white_point_x_isValid;

    m_white_point_y_isValid = ::OpenAPI::fromJsonValue(m_white_point_y, json[QString("WhitePointY")]);
    m_white_point_y_isSet = !json[QString("WhitePointY")].isNull() && m_white_point_y_isValid;
}

QString OAIColorCorrector_Hdr10Metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColorCorrector_Hdr10Metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_blue_primary_x_isSet) {
        obj.insert(QString("BluePrimaryX"), ::OpenAPI::toJsonValue(m_blue_primary_x));
    }
    if (m_blue_primary_y_isSet) {
        obj.insert(QString("BluePrimaryY"), ::OpenAPI::toJsonValue(m_blue_primary_y));
    }
    if (m_green_primary_x_isSet) {
        obj.insert(QString("GreenPrimaryX"), ::OpenAPI::toJsonValue(m_green_primary_x));
    }
    if (m_green_primary_y_isSet) {
        obj.insert(QString("GreenPrimaryY"), ::OpenAPI::toJsonValue(m_green_primary_y));
    }
    if (m_max_content_light_level_isSet) {
        obj.insert(QString("MaxContentLightLevel"), ::OpenAPI::toJsonValue(m_max_content_light_level));
    }
    if (m_max_frame_average_light_level_isSet) {
        obj.insert(QString("MaxFrameAverageLightLevel"), ::OpenAPI::toJsonValue(m_max_frame_average_light_level));
    }
    if (m_max_luminance_isSet) {
        obj.insert(QString("MaxLuminance"), ::OpenAPI::toJsonValue(m_max_luminance));
    }
    if (m_min_luminance_isSet) {
        obj.insert(QString("MinLuminance"), ::OpenAPI::toJsonValue(m_min_luminance));
    }
    if (m_red_primary_x_isSet) {
        obj.insert(QString("RedPrimaryX"), ::OpenAPI::toJsonValue(m_red_primary_x));
    }
    if (m_red_primary_y_isSet) {
        obj.insert(QString("RedPrimaryY"), ::OpenAPI::toJsonValue(m_red_primary_y));
    }
    if (m_white_point_x_isSet) {
        obj.insert(QString("WhitePointX"), ::OpenAPI::toJsonValue(m_white_point_x));
    }
    if (m_white_point_y_isSet) {
        obj.insert(QString("WhitePointY"), ::OpenAPI::toJsonValue(m_white_point_y));
    }
    return obj;
}

qint32 OAIColorCorrector_Hdr10Metadata::getBluePrimaryX() const {
    return m_blue_primary_x;
}
void OAIColorCorrector_Hdr10Metadata::setBluePrimaryX(const qint32 &blue_primary_x) {
    m_blue_primary_x = blue_primary_x;
    m_blue_primary_x_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_blue_primary_x_Set() const{
    return m_blue_primary_x_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_blue_primary_x_Valid() const{
    return m_blue_primary_x_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getBluePrimaryY() const {
    return m_blue_primary_y;
}
void OAIColorCorrector_Hdr10Metadata::setBluePrimaryY(const qint32 &blue_primary_y) {
    m_blue_primary_y = blue_primary_y;
    m_blue_primary_y_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_blue_primary_y_Set() const{
    return m_blue_primary_y_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_blue_primary_y_Valid() const{
    return m_blue_primary_y_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getGreenPrimaryX() const {
    return m_green_primary_x;
}
void OAIColorCorrector_Hdr10Metadata::setGreenPrimaryX(const qint32 &green_primary_x) {
    m_green_primary_x = green_primary_x;
    m_green_primary_x_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_green_primary_x_Set() const{
    return m_green_primary_x_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_green_primary_x_Valid() const{
    return m_green_primary_x_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getGreenPrimaryY() const {
    return m_green_primary_y;
}
void OAIColorCorrector_Hdr10Metadata::setGreenPrimaryY(const qint32 &green_primary_y) {
    m_green_primary_y = green_primary_y;
    m_green_primary_y_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_green_primary_y_Set() const{
    return m_green_primary_y_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_green_primary_y_Valid() const{
    return m_green_primary_y_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getMaxContentLightLevel() const {
    return m_max_content_light_level;
}
void OAIColorCorrector_Hdr10Metadata::setMaxContentLightLevel(const qint32 &max_content_light_level) {
    m_max_content_light_level = max_content_light_level;
    m_max_content_light_level_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_max_content_light_level_Set() const{
    return m_max_content_light_level_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_max_content_light_level_Valid() const{
    return m_max_content_light_level_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getMaxFrameAverageLightLevel() const {
    return m_max_frame_average_light_level;
}
void OAIColorCorrector_Hdr10Metadata::setMaxFrameAverageLightLevel(const qint32 &max_frame_average_light_level) {
    m_max_frame_average_light_level = max_frame_average_light_level;
    m_max_frame_average_light_level_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_max_frame_average_light_level_Set() const{
    return m_max_frame_average_light_level_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_max_frame_average_light_level_Valid() const{
    return m_max_frame_average_light_level_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getMaxLuminance() const {
    return m_max_luminance;
}
void OAIColorCorrector_Hdr10Metadata::setMaxLuminance(const qint32 &max_luminance) {
    m_max_luminance = max_luminance;
    m_max_luminance_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_max_luminance_Set() const{
    return m_max_luminance_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_max_luminance_Valid() const{
    return m_max_luminance_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getMinLuminance() const {
    return m_min_luminance;
}
void OAIColorCorrector_Hdr10Metadata::setMinLuminance(const qint32 &min_luminance) {
    m_min_luminance = min_luminance;
    m_min_luminance_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_min_luminance_Set() const{
    return m_min_luminance_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_min_luminance_Valid() const{
    return m_min_luminance_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getRedPrimaryX() const {
    return m_red_primary_x;
}
void OAIColorCorrector_Hdr10Metadata::setRedPrimaryX(const qint32 &red_primary_x) {
    m_red_primary_x = red_primary_x;
    m_red_primary_x_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_red_primary_x_Set() const{
    return m_red_primary_x_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_red_primary_x_Valid() const{
    return m_red_primary_x_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getRedPrimaryY() const {
    return m_red_primary_y;
}
void OAIColorCorrector_Hdr10Metadata::setRedPrimaryY(const qint32 &red_primary_y) {
    m_red_primary_y = red_primary_y;
    m_red_primary_y_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_red_primary_y_Set() const{
    return m_red_primary_y_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_red_primary_y_Valid() const{
    return m_red_primary_y_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getWhitePointX() const {
    return m_white_point_x;
}
void OAIColorCorrector_Hdr10Metadata::setWhitePointX(const qint32 &white_point_x) {
    m_white_point_x = white_point_x;
    m_white_point_x_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_white_point_x_Set() const{
    return m_white_point_x_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_white_point_x_Valid() const{
    return m_white_point_x_isValid;
}

qint32 OAIColorCorrector_Hdr10Metadata::getWhitePointY() const {
    return m_white_point_y;
}
void OAIColorCorrector_Hdr10Metadata::setWhitePointY(const qint32 &white_point_y) {
    m_white_point_y = white_point_y;
    m_white_point_y_isSet = true;
}

bool OAIColorCorrector_Hdr10Metadata::is_white_point_y_Set() const{
    return m_white_point_y_isSet;
}

bool OAIColorCorrector_Hdr10Metadata::is_white_point_y_Valid() const{
    return m_white_point_y_isValid;
}

bool OAIColorCorrector_Hdr10Metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blue_primary_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_primary_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_green_primary_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_green_primary_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_content_light_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_frame_average_light_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_luminance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_luminance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_primary_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_primary_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_white_point_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_white_point_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColorCorrector_Hdr10Metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
