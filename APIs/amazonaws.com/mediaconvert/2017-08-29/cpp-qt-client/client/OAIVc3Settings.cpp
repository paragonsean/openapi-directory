/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVc3Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVc3Settings::OAIVc3Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVc3Settings::OAIVc3Settings() {
    this->initializeModel();
}

OAIVc3Settings::~OAIVc3Settings() {}

void OAIVc3Settings::initializeModel() {

    m_framerate_control_isSet = false;
    m_framerate_control_isValid = false;

    m_framerate_conversion_algorithm_isSet = false;
    m_framerate_conversion_algorithm_isValid = false;

    m_framerate_denominator_isSet = false;
    m_framerate_denominator_isValid = false;

    m_framerate_numerator_isSet = false;
    m_framerate_numerator_isValid = false;

    m_interlace_mode_isSet = false;
    m_interlace_mode_isValid = false;

    m_scan_type_conversion_mode_isSet = false;
    m_scan_type_conversion_mode_isValid = false;

    m_slow_pal_isSet = false;
    m_slow_pal_isValid = false;

    m_telecine_isSet = false;
    m_telecine_isValid = false;

    m_vc3_class_isSet = false;
    m_vc3_class_isValid = false;
}

void OAIVc3Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVc3Settings::fromJsonObject(QJsonObject json) {

    m_framerate_control_isValid = ::OpenAPI::fromJsonValue(m_framerate_control, json[QString("FramerateControl")]);
    m_framerate_control_isSet = !json[QString("FramerateControl")].isNull() && m_framerate_control_isValid;

    m_framerate_conversion_algorithm_isValid = ::OpenAPI::fromJsonValue(m_framerate_conversion_algorithm, json[QString("FramerateConversionAlgorithm")]);
    m_framerate_conversion_algorithm_isSet = !json[QString("FramerateConversionAlgorithm")].isNull() && m_framerate_conversion_algorithm_isValid;

    m_framerate_denominator_isValid = ::OpenAPI::fromJsonValue(m_framerate_denominator, json[QString("FramerateDenominator")]);
    m_framerate_denominator_isSet = !json[QString("FramerateDenominator")].isNull() && m_framerate_denominator_isValid;

    m_framerate_numerator_isValid = ::OpenAPI::fromJsonValue(m_framerate_numerator, json[QString("FramerateNumerator")]);
    m_framerate_numerator_isSet = !json[QString("FramerateNumerator")].isNull() && m_framerate_numerator_isValid;

    m_interlace_mode_isValid = ::OpenAPI::fromJsonValue(m_interlace_mode, json[QString("InterlaceMode")]);
    m_interlace_mode_isSet = !json[QString("InterlaceMode")].isNull() && m_interlace_mode_isValid;

    m_scan_type_conversion_mode_isValid = ::OpenAPI::fromJsonValue(m_scan_type_conversion_mode, json[QString("ScanTypeConversionMode")]);
    m_scan_type_conversion_mode_isSet = !json[QString("ScanTypeConversionMode")].isNull() && m_scan_type_conversion_mode_isValid;

    m_slow_pal_isValid = ::OpenAPI::fromJsonValue(m_slow_pal, json[QString("SlowPal")]);
    m_slow_pal_isSet = !json[QString("SlowPal")].isNull() && m_slow_pal_isValid;

    m_telecine_isValid = ::OpenAPI::fromJsonValue(m_telecine, json[QString("Telecine")]);
    m_telecine_isSet = !json[QString("Telecine")].isNull() && m_telecine_isValid;

    m_vc3_class_isValid = ::OpenAPI::fromJsonValue(m_vc3_class, json[QString("Vc3Class")]);
    m_vc3_class_isSet = !json[QString("Vc3Class")].isNull() && m_vc3_class_isValid;
}

QString OAIVc3Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVc3Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_framerate_control.isSet()) {
        obj.insert(QString("FramerateControl"), ::OpenAPI::toJsonValue(m_framerate_control));
    }
    if (m_framerate_conversion_algorithm.isSet()) {
        obj.insert(QString("FramerateConversionAlgorithm"), ::OpenAPI::toJsonValue(m_framerate_conversion_algorithm));
    }
    if (m_framerate_denominator_isSet) {
        obj.insert(QString("FramerateDenominator"), ::OpenAPI::toJsonValue(m_framerate_denominator));
    }
    if (m_framerate_numerator_isSet) {
        obj.insert(QString("FramerateNumerator"), ::OpenAPI::toJsonValue(m_framerate_numerator));
    }
    if (m_interlace_mode.isSet()) {
        obj.insert(QString("InterlaceMode"), ::OpenAPI::toJsonValue(m_interlace_mode));
    }
    if (m_scan_type_conversion_mode.isSet()) {
        obj.insert(QString("ScanTypeConversionMode"), ::OpenAPI::toJsonValue(m_scan_type_conversion_mode));
    }
    if (m_slow_pal.isSet()) {
        obj.insert(QString("SlowPal"), ::OpenAPI::toJsonValue(m_slow_pal));
    }
    if (m_telecine.isSet()) {
        obj.insert(QString("Telecine"), ::OpenAPI::toJsonValue(m_telecine));
    }
    if (m_vc3_class.isSet()) {
        obj.insert(QString("Vc3Class"), ::OpenAPI::toJsonValue(m_vc3_class));
    }
    return obj;
}

OAIVc3FramerateControl OAIVc3Settings::getFramerateControl() const {
    return m_framerate_control;
}
void OAIVc3Settings::setFramerateControl(const OAIVc3FramerateControl &framerate_control) {
    m_framerate_control = framerate_control;
    m_framerate_control_isSet = true;
}

bool OAIVc3Settings::is_framerate_control_Set() const{
    return m_framerate_control_isSet;
}

bool OAIVc3Settings::is_framerate_control_Valid() const{
    return m_framerate_control_isValid;
}

OAIVc3FramerateConversionAlgorithm OAIVc3Settings::getFramerateConversionAlgorithm() const {
    return m_framerate_conversion_algorithm;
}
void OAIVc3Settings::setFramerateConversionAlgorithm(const OAIVc3FramerateConversionAlgorithm &framerate_conversion_algorithm) {
    m_framerate_conversion_algorithm = framerate_conversion_algorithm;
    m_framerate_conversion_algorithm_isSet = true;
}

bool OAIVc3Settings::is_framerate_conversion_algorithm_Set() const{
    return m_framerate_conversion_algorithm_isSet;
}

bool OAIVc3Settings::is_framerate_conversion_algorithm_Valid() const{
    return m_framerate_conversion_algorithm_isValid;
}

qint32 OAIVc3Settings::getFramerateDenominator() const {
    return m_framerate_denominator;
}
void OAIVc3Settings::setFramerateDenominator(const qint32 &framerate_denominator) {
    m_framerate_denominator = framerate_denominator;
    m_framerate_denominator_isSet = true;
}

bool OAIVc3Settings::is_framerate_denominator_Set() const{
    return m_framerate_denominator_isSet;
}

bool OAIVc3Settings::is_framerate_denominator_Valid() const{
    return m_framerate_denominator_isValid;
}

qint32 OAIVc3Settings::getFramerateNumerator() const {
    return m_framerate_numerator;
}
void OAIVc3Settings::setFramerateNumerator(const qint32 &framerate_numerator) {
    m_framerate_numerator = framerate_numerator;
    m_framerate_numerator_isSet = true;
}

bool OAIVc3Settings::is_framerate_numerator_Set() const{
    return m_framerate_numerator_isSet;
}

bool OAIVc3Settings::is_framerate_numerator_Valid() const{
    return m_framerate_numerator_isValid;
}

OAIVc3InterlaceMode OAIVc3Settings::getInterlaceMode() const {
    return m_interlace_mode;
}
void OAIVc3Settings::setInterlaceMode(const OAIVc3InterlaceMode &interlace_mode) {
    m_interlace_mode = interlace_mode;
    m_interlace_mode_isSet = true;
}

bool OAIVc3Settings::is_interlace_mode_Set() const{
    return m_interlace_mode_isSet;
}

bool OAIVc3Settings::is_interlace_mode_Valid() const{
    return m_interlace_mode_isValid;
}

OAIVc3ScanTypeConversionMode OAIVc3Settings::getScanTypeConversionMode() const {
    return m_scan_type_conversion_mode;
}
void OAIVc3Settings::setScanTypeConversionMode(const OAIVc3ScanTypeConversionMode &scan_type_conversion_mode) {
    m_scan_type_conversion_mode = scan_type_conversion_mode;
    m_scan_type_conversion_mode_isSet = true;
}

bool OAIVc3Settings::is_scan_type_conversion_mode_Set() const{
    return m_scan_type_conversion_mode_isSet;
}

bool OAIVc3Settings::is_scan_type_conversion_mode_Valid() const{
    return m_scan_type_conversion_mode_isValid;
}

OAIVc3SlowPal OAIVc3Settings::getSlowPal() const {
    return m_slow_pal;
}
void OAIVc3Settings::setSlowPal(const OAIVc3SlowPal &slow_pal) {
    m_slow_pal = slow_pal;
    m_slow_pal_isSet = true;
}

bool OAIVc3Settings::is_slow_pal_Set() const{
    return m_slow_pal_isSet;
}

bool OAIVc3Settings::is_slow_pal_Valid() const{
    return m_slow_pal_isValid;
}

OAIVc3Telecine OAIVc3Settings::getTelecine() const {
    return m_telecine;
}
void OAIVc3Settings::setTelecine(const OAIVc3Telecine &telecine) {
    m_telecine = telecine;
    m_telecine_isSet = true;
}

bool OAIVc3Settings::is_telecine_Set() const{
    return m_telecine_isSet;
}

bool OAIVc3Settings::is_telecine_Valid() const{
    return m_telecine_isValid;
}

OAIVc3Class OAIVc3Settings::getVc3Class() const {
    return m_vc3_class;
}
void OAIVc3Settings::setVc3Class(const OAIVc3Class &vc3_class) {
    m_vc3_class = vc3_class;
    m_vc3_class_isSet = true;
}

bool OAIVc3Settings::is_vc3_class_Set() const{
    return m_vc3_class_isSet;
}

bool OAIVc3Settings::is_vc3_class_Valid() const{
    return m_vc3_class_isValid;
}

bool OAIVc3Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_framerate_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_conversion_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interlace_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type_conversion_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slow_pal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telecine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vc3_class.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVc3Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
