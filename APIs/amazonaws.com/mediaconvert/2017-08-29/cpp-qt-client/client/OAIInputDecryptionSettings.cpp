/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDecryptionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDecryptionSettings::OAIInputDecryptionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDecryptionSettings::OAIInputDecryptionSettings() {
    this->initializeModel();
}

OAIInputDecryptionSettings::~OAIInputDecryptionSettings() {}

void OAIInputDecryptionSettings::initializeModel() {

    m_decryption_mode_isSet = false;
    m_decryption_mode_isValid = false;

    m_encrypted_decryption_key_isSet = false;
    m_encrypted_decryption_key_isValid = false;

    m_initialization_vector_isSet = false;
    m_initialization_vector_isValid = false;

    m_kms_key_region_isSet = false;
    m_kms_key_region_isValid = false;
}

void OAIInputDecryptionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDecryptionSettings::fromJsonObject(QJsonObject json) {

    m_decryption_mode_isValid = ::OpenAPI::fromJsonValue(m_decryption_mode, json[QString("DecryptionMode")]);
    m_decryption_mode_isSet = !json[QString("DecryptionMode")].isNull() && m_decryption_mode_isValid;

    m_encrypted_decryption_key_isValid = ::OpenAPI::fromJsonValue(m_encrypted_decryption_key, json[QString("EncryptedDecryptionKey")]);
    m_encrypted_decryption_key_isSet = !json[QString("EncryptedDecryptionKey")].isNull() && m_encrypted_decryption_key_isValid;

    m_initialization_vector_isValid = ::OpenAPI::fromJsonValue(m_initialization_vector, json[QString("InitializationVector")]);
    m_initialization_vector_isSet = !json[QString("InitializationVector")].isNull() && m_initialization_vector_isValid;

    m_kms_key_region_isValid = ::OpenAPI::fromJsonValue(m_kms_key_region, json[QString("KmsKeyRegion")]);
    m_kms_key_region_isSet = !json[QString("KmsKeyRegion")].isNull() && m_kms_key_region_isValid;
}

QString OAIInputDecryptionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDecryptionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_decryption_mode.isSet()) {
        obj.insert(QString("DecryptionMode"), ::OpenAPI::toJsonValue(m_decryption_mode));
    }
    if (m_encrypted_decryption_key_isSet) {
        obj.insert(QString("EncryptedDecryptionKey"), ::OpenAPI::toJsonValue(m_encrypted_decryption_key));
    }
    if (m_initialization_vector_isSet) {
        obj.insert(QString("InitializationVector"), ::OpenAPI::toJsonValue(m_initialization_vector));
    }
    if (m_kms_key_region_isSet) {
        obj.insert(QString("KmsKeyRegion"), ::OpenAPI::toJsonValue(m_kms_key_region));
    }
    return obj;
}

OAIDecryptionMode OAIInputDecryptionSettings::getDecryptionMode() const {
    return m_decryption_mode;
}
void OAIInputDecryptionSettings::setDecryptionMode(const OAIDecryptionMode &decryption_mode) {
    m_decryption_mode = decryption_mode;
    m_decryption_mode_isSet = true;
}

bool OAIInputDecryptionSettings::is_decryption_mode_Set() const{
    return m_decryption_mode_isSet;
}

bool OAIInputDecryptionSettings::is_decryption_mode_Valid() const{
    return m_decryption_mode_isValid;
}

QString OAIInputDecryptionSettings::getEncryptedDecryptionKey() const {
    return m_encrypted_decryption_key;
}
void OAIInputDecryptionSettings::setEncryptedDecryptionKey(const QString &encrypted_decryption_key) {
    m_encrypted_decryption_key = encrypted_decryption_key;
    m_encrypted_decryption_key_isSet = true;
}

bool OAIInputDecryptionSettings::is_encrypted_decryption_key_Set() const{
    return m_encrypted_decryption_key_isSet;
}

bool OAIInputDecryptionSettings::is_encrypted_decryption_key_Valid() const{
    return m_encrypted_decryption_key_isValid;
}

QString OAIInputDecryptionSettings::getInitializationVector() const {
    return m_initialization_vector;
}
void OAIInputDecryptionSettings::setInitializationVector(const QString &initialization_vector) {
    m_initialization_vector = initialization_vector;
    m_initialization_vector_isSet = true;
}

bool OAIInputDecryptionSettings::is_initialization_vector_Set() const{
    return m_initialization_vector_isSet;
}

bool OAIInputDecryptionSettings::is_initialization_vector_Valid() const{
    return m_initialization_vector_isValid;
}

QString OAIInputDecryptionSettings::getKmsKeyRegion() const {
    return m_kms_key_region;
}
void OAIInputDecryptionSettings::setKmsKeyRegion(const QString &kms_key_region) {
    m_kms_key_region = kms_key_region;
    m_kms_key_region_isSet = true;
}

bool OAIInputDecryptionSettings::is_kms_key_region_Set() const{
    return m_kms_key_region_isSet;
}

bool OAIInputDecryptionSettings::is_kms_key_region_Valid() const{
    return m_kms_key_region_isValid;
}

bool OAIInputDecryptionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decryption_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_decryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDecryptionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
