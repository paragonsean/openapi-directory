/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIXavcTemporalAdaptiveQuantization.h
 *
 * The best way to set up adaptive quantization is to keep the default value, Auto, for the setting Adaptive quantization. When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled, to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren&#39;t moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn&#39;t take into account where the viewer&#39;s attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn&#39;t have moving objects with sharp edges, such as sports athletes&#39; faces, you might choose to disable this feature. Related setting: When you enable temporal adaptive quantization, adjust the strength of the filter with the setting Adaptive quantization.
 */

#ifndef OAIXavcTemporalAdaptiveQuantization_H
#define OAIXavcTemporalAdaptiveQuantization_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIXavcTemporalAdaptiveQuantization : public OAIEnum {
public:
    OAIXavcTemporalAdaptiveQuantization();
    OAIXavcTemporalAdaptiveQuantization(QString json);
    ~OAIXavcTemporalAdaptiveQuantization() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIXavcTemporalAdaptiveQuantization {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        DISABLED, 
        ENABLED
    };
    OAIXavcTemporalAdaptiveQuantization::eOAIXavcTemporalAdaptiveQuantization getValue() const;
    void setValue(const OAIXavcTemporalAdaptiveQuantization::eOAIXavcTemporalAdaptiveQuantization& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIXavcTemporalAdaptiveQuantization m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIXavcTemporalAdaptiveQuantization)

#endif // OAIXavcTemporalAdaptiveQuantization_H
