/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDolbyVision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDolbyVision::OAIDolbyVision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDolbyVision::OAIDolbyVision() {
    this->initializeModel();
}

OAIDolbyVision::~OAIDolbyVision() {}

void OAIDolbyVision::initializeModel() {

    m_l6_metadata_isSet = false;
    m_l6_metadata_isValid = false;

    m_l6_mode_isSet = false;
    m_l6_mode_isValid = false;

    m_mapping_isSet = false;
    m_mapping_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;
}

void OAIDolbyVision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDolbyVision::fromJsonObject(QJsonObject json) {

    m_l6_metadata_isValid = ::OpenAPI::fromJsonValue(m_l6_metadata, json[QString("L6Metadata")]);
    m_l6_metadata_isSet = !json[QString("L6Metadata")].isNull() && m_l6_metadata_isValid;

    m_l6_mode_isValid = ::OpenAPI::fromJsonValue(m_l6_mode, json[QString("L6Mode")]);
    m_l6_mode_isSet = !json[QString("L6Mode")].isNull() && m_l6_mode_isValid;

    m_mapping_isValid = ::OpenAPI::fromJsonValue(m_mapping, json[QString("Mapping")]);
    m_mapping_isSet = !json[QString("Mapping")].isNull() && m_mapping_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("Profile")]);
    m_profile_isSet = !json[QString("Profile")].isNull() && m_profile_isValid;
}

QString OAIDolbyVision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDolbyVision::asJsonObject() const {
    QJsonObject obj;
    if (m_l6_metadata.isSet()) {
        obj.insert(QString("L6Metadata"), ::OpenAPI::toJsonValue(m_l6_metadata));
    }
    if (m_l6_mode.isSet()) {
        obj.insert(QString("L6Mode"), ::OpenAPI::toJsonValue(m_l6_mode));
    }
    if (m_mapping.isSet()) {
        obj.insert(QString("Mapping"), ::OpenAPI::toJsonValue(m_mapping));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("Profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    return obj;
}

OAIDolbyVision_L6Metadata OAIDolbyVision::getL6Metadata() const {
    return m_l6_metadata;
}
void OAIDolbyVision::setL6Metadata(const OAIDolbyVision_L6Metadata &l6_metadata) {
    m_l6_metadata = l6_metadata;
    m_l6_metadata_isSet = true;
}

bool OAIDolbyVision::is_l6_metadata_Set() const{
    return m_l6_metadata_isSet;
}

bool OAIDolbyVision::is_l6_metadata_Valid() const{
    return m_l6_metadata_isValid;
}

OAIDolbyVisionLevel6Mode OAIDolbyVision::getL6Mode() const {
    return m_l6_mode;
}
void OAIDolbyVision::setL6Mode(const OAIDolbyVisionLevel6Mode &l6_mode) {
    m_l6_mode = l6_mode;
    m_l6_mode_isSet = true;
}

bool OAIDolbyVision::is_l6_mode_Set() const{
    return m_l6_mode_isSet;
}

bool OAIDolbyVision::is_l6_mode_Valid() const{
    return m_l6_mode_isValid;
}

OAIDolbyVisionMapping OAIDolbyVision::getMapping() const {
    return m_mapping;
}
void OAIDolbyVision::setMapping(const OAIDolbyVisionMapping &mapping) {
    m_mapping = mapping;
    m_mapping_isSet = true;
}

bool OAIDolbyVision::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAIDolbyVision::is_mapping_Valid() const{
    return m_mapping_isValid;
}

OAIDolbyVisionProfile OAIDolbyVision::getProfile() const {
    return m_profile;
}
void OAIDolbyVision::setProfile(const OAIDolbyVisionProfile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIDolbyVision::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIDolbyVision::is_profile_Valid() const{
    return m_profile_isValid;
}

bool OAIDolbyVision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_l6_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_l6_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDolbyVision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
