/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashIsoGroupSettings_Encryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashIsoGroupSettings_Encryption::OAIDashIsoGroupSettings_Encryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashIsoGroupSettings_Encryption::OAIDashIsoGroupSettings_Encryption() {
    this->initializeModel();
}

OAIDashIsoGroupSettings_Encryption::~OAIDashIsoGroupSettings_Encryption() {}

void OAIDashIsoGroupSettings_Encryption::initializeModel() {

    m_playback_device_compatibility_isSet = false;
    m_playback_device_compatibility_isValid = false;

    m_speke_key_provider_isSet = false;
    m_speke_key_provider_isValid = false;
}

void OAIDashIsoGroupSettings_Encryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashIsoGroupSettings_Encryption::fromJsonObject(QJsonObject json) {

    m_playback_device_compatibility_isValid = ::OpenAPI::fromJsonValue(m_playback_device_compatibility, json[QString("PlaybackDeviceCompatibility")]);
    m_playback_device_compatibility_isSet = !json[QString("PlaybackDeviceCompatibility")].isNull() && m_playback_device_compatibility_isValid;

    m_speke_key_provider_isValid = ::OpenAPI::fromJsonValue(m_speke_key_provider, json[QString("SpekeKeyProvider")]);
    m_speke_key_provider_isSet = !json[QString("SpekeKeyProvider")].isNull() && m_speke_key_provider_isValid;
}

QString OAIDashIsoGroupSettings_Encryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashIsoGroupSettings_Encryption::asJsonObject() const {
    QJsonObject obj;
    if (m_playback_device_compatibility.isSet()) {
        obj.insert(QString("PlaybackDeviceCompatibility"), ::OpenAPI::toJsonValue(m_playback_device_compatibility));
    }
    if (m_speke_key_provider.isSet()) {
        obj.insert(QString("SpekeKeyProvider"), ::OpenAPI::toJsonValue(m_speke_key_provider));
    }
    return obj;
}

OAIDashIsoPlaybackDeviceCompatibility OAIDashIsoGroupSettings_Encryption::getPlaybackDeviceCompatibility() const {
    return m_playback_device_compatibility;
}
void OAIDashIsoGroupSettings_Encryption::setPlaybackDeviceCompatibility(const OAIDashIsoPlaybackDeviceCompatibility &playback_device_compatibility) {
    m_playback_device_compatibility = playback_device_compatibility;
    m_playback_device_compatibility_isSet = true;
}

bool OAIDashIsoGroupSettings_Encryption::is_playback_device_compatibility_Set() const{
    return m_playback_device_compatibility_isSet;
}

bool OAIDashIsoGroupSettings_Encryption::is_playback_device_compatibility_Valid() const{
    return m_playback_device_compatibility_isValid;
}

OAIDashIsoEncryptionSettings_SpekeKeyProvider OAIDashIsoGroupSettings_Encryption::getSpekeKeyProvider() const {
    return m_speke_key_provider;
}
void OAIDashIsoGroupSettings_Encryption::setSpekeKeyProvider(const OAIDashIsoEncryptionSettings_SpekeKeyProvider &speke_key_provider) {
    m_speke_key_provider = speke_key_provider;
    m_speke_key_provider_isSet = true;
}

bool OAIDashIsoGroupSettings_Encryption::is_speke_key_provider_Set() const{
    return m_speke_key_provider_isSet;
}

bool OAIDashIsoGroupSettings_Encryption::is_speke_key_provider_Valid() const{
    return m_speke_key_provider_isValid;
}

bool OAIDashIsoGroupSettings_Encryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_playback_device_compatibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speke_key_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashIsoGroupSettings_Encryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
