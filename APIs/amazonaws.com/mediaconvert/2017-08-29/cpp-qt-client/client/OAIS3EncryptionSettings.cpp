/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3EncryptionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3EncryptionSettings::OAIS3EncryptionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3EncryptionSettings::OAIS3EncryptionSettings() {
    this->initializeModel();
}

OAIS3EncryptionSettings::~OAIS3EncryptionSettings() {}

void OAIS3EncryptionSettings::initializeModel() {

    m_encryption_type_isSet = false;
    m_encryption_type_isValid = false;

    m_kms_encryption_context_isSet = false;
    m_kms_encryption_context_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;
}

void OAIS3EncryptionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3EncryptionSettings::fromJsonObject(QJsonObject json) {

    m_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_encryption_type, json[QString("EncryptionType")]);
    m_encryption_type_isSet = !json[QString("EncryptionType")].isNull() && m_encryption_type_isValid;

    m_kms_encryption_context_isValid = ::OpenAPI::fromJsonValue(m_kms_encryption_context, json[QString("KmsEncryptionContext")]);
    m_kms_encryption_context_isSet = !json[QString("KmsEncryptionContext")].isNull() && m_kms_encryption_context_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyArn")].isNull() && m_kms_key_arn_isValid;
}

QString OAIS3EncryptionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3EncryptionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_type.isSet()) {
        obj.insert(QString("EncryptionType"), ::OpenAPI::toJsonValue(m_encryption_type));
    }
    if (m_kms_encryption_context_isSet) {
        obj.insert(QString("KmsEncryptionContext"), ::OpenAPI::toJsonValue(m_kms_encryption_context));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    return obj;
}

OAIS3ServerSideEncryptionType OAIS3EncryptionSettings::getEncryptionType() const {
    return m_encryption_type;
}
void OAIS3EncryptionSettings::setEncryptionType(const OAIS3ServerSideEncryptionType &encryption_type) {
    m_encryption_type = encryption_type;
    m_encryption_type_isSet = true;
}

bool OAIS3EncryptionSettings::is_encryption_type_Set() const{
    return m_encryption_type_isSet;
}

bool OAIS3EncryptionSettings::is_encryption_type_Valid() const{
    return m_encryption_type_isValid;
}

QString OAIS3EncryptionSettings::getKmsEncryptionContext() const {
    return m_kms_encryption_context;
}
void OAIS3EncryptionSettings::setKmsEncryptionContext(const QString &kms_encryption_context) {
    m_kms_encryption_context = kms_encryption_context;
    m_kms_encryption_context_isSet = true;
}

bool OAIS3EncryptionSettings::is_kms_encryption_context_Set() const{
    return m_kms_encryption_context_isSet;
}

bool OAIS3EncryptionSettings::is_kms_encryption_context_Valid() const{
    return m_kms_encryption_context_isValid;
}

QString OAIS3EncryptionSettings::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIS3EncryptionSettings::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIS3EncryptionSettings::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIS3EncryptionSettings::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

bool OAIS3EncryptionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_encryption_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3EncryptionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
