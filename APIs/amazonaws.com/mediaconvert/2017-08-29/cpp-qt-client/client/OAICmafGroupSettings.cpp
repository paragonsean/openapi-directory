/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICmafGroupSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICmafGroupSettings::OAICmafGroupSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICmafGroupSettings::OAICmafGroupSettings() {
    this->initializeModel();
}

OAICmafGroupSettings::~OAICmafGroupSettings() {}

void OAICmafGroupSettings::initializeModel() {

    m_additional_manifests_isSet = false;
    m_additional_manifests_isValid = false;

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_client_cache_isSet = false;
    m_client_cache_isValid = false;

    m_codec_specification_isSet = false;
    m_codec_specification_isValid = false;

    m_dash_manifest_style_isSet = false;
    m_dash_manifest_style_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_settings_isSet = false;
    m_destination_settings_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_fragment_length_isSet = false;
    m_fragment_length_isValid = false;

    m_image_based_trick_play_isSet = false;
    m_image_based_trick_play_isValid = false;

    m_image_based_trick_play_settings_isSet = false;
    m_image_based_trick_play_settings_isValid = false;

    m_manifest_compression_isSet = false;
    m_manifest_compression_isValid = false;

    m_manifest_duration_format_isSet = false;
    m_manifest_duration_format_isValid = false;

    m_min_buffer_time_isSet = false;
    m_min_buffer_time_isValid = false;

    m_min_final_segment_length_isSet = false;
    m_min_final_segment_length_isValid = false;

    m_mpd_manifest_bandwidth_type_isSet = false;
    m_mpd_manifest_bandwidth_type_isValid = false;

    m_mpd_profile_isSet = false;
    m_mpd_profile_isValid = false;

    m_pts_offset_handling_for_b_frames_isSet = false;
    m_pts_offset_handling_for_b_frames_isValid = false;

    m_segment_control_isSet = false;
    m_segment_control_isValid = false;

    m_segment_length_isSet = false;
    m_segment_length_isValid = false;

    m_segment_length_control_isSet = false;
    m_segment_length_control_isValid = false;

    m_stream_inf_resolution_isSet = false;
    m_stream_inf_resolution_isValid = false;

    m_target_duration_compatibility_mode_isSet = false;
    m_target_duration_compatibility_mode_isValid = false;

    m_video_composition_offsets_isSet = false;
    m_video_composition_offsets_isValid = false;

    m_write_dash_manifest_isSet = false;
    m_write_dash_manifest_isValid = false;

    m_write_hls_manifest_isSet = false;
    m_write_hls_manifest_isValid = false;

    m_write_segment_timeline_in_representation_isSet = false;
    m_write_segment_timeline_in_representation_isValid = false;
}

void OAICmafGroupSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICmafGroupSettings::fromJsonObject(QJsonObject json) {

    m_additional_manifests_isValid = ::OpenAPI::fromJsonValue(m_additional_manifests, json[QString("AdditionalManifests")]);
    m_additional_manifests_isSet = !json[QString("AdditionalManifests")].isNull() && m_additional_manifests_isValid;

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("BaseUrl")]);
    m_base_url_isSet = !json[QString("BaseUrl")].isNull() && m_base_url_isValid;

    m_client_cache_isValid = ::OpenAPI::fromJsonValue(m_client_cache, json[QString("ClientCache")]);
    m_client_cache_isSet = !json[QString("ClientCache")].isNull() && m_client_cache_isValid;

    m_codec_specification_isValid = ::OpenAPI::fromJsonValue(m_codec_specification, json[QString("CodecSpecification")]);
    m_codec_specification_isSet = !json[QString("CodecSpecification")].isNull() && m_codec_specification_isValid;

    m_dash_manifest_style_isValid = ::OpenAPI::fromJsonValue(m_dash_manifest_style, json[QString("DashManifestStyle")]);
    m_dash_manifest_style_isSet = !json[QString("DashManifestStyle")].isNull() && m_dash_manifest_style_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_destination_settings_isValid = ::OpenAPI::fromJsonValue(m_destination_settings, json[QString("DestinationSettings")]);
    m_destination_settings_isSet = !json[QString("DestinationSettings")].isNull() && m_destination_settings_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_fragment_length_isValid = ::OpenAPI::fromJsonValue(m_fragment_length, json[QString("FragmentLength")]);
    m_fragment_length_isSet = !json[QString("FragmentLength")].isNull() && m_fragment_length_isValid;

    m_image_based_trick_play_isValid = ::OpenAPI::fromJsonValue(m_image_based_trick_play, json[QString("ImageBasedTrickPlay")]);
    m_image_based_trick_play_isSet = !json[QString("ImageBasedTrickPlay")].isNull() && m_image_based_trick_play_isValid;

    m_image_based_trick_play_settings_isValid = ::OpenAPI::fromJsonValue(m_image_based_trick_play_settings, json[QString("ImageBasedTrickPlaySettings")]);
    m_image_based_trick_play_settings_isSet = !json[QString("ImageBasedTrickPlaySettings")].isNull() && m_image_based_trick_play_settings_isValid;

    m_manifest_compression_isValid = ::OpenAPI::fromJsonValue(m_manifest_compression, json[QString("ManifestCompression")]);
    m_manifest_compression_isSet = !json[QString("ManifestCompression")].isNull() && m_manifest_compression_isValid;

    m_manifest_duration_format_isValid = ::OpenAPI::fromJsonValue(m_manifest_duration_format, json[QString("ManifestDurationFormat")]);
    m_manifest_duration_format_isSet = !json[QString("ManifestDurationFormat")].isNull() && m_manifest_duration_format_isValid;

    m_min_buffer_time_isValid = ::OpenAPI::fromJsonValue(m_min_buffer_time, json[QString("MinBufferTime")]);
    m_min_buffer_time_isSet = !json[QString("MinBufferTime")].isNull() && m_min_buffer_time_isValid;

    m_min_final_segment_length_isValid = ::OpenAPI::fromJsonValue(m_min_final_segment_length, json[QString("MinFinalSegmentLength")]);
    m_min_final_segment_length_isSet = !json[QString("MinFinalSegmentLength")].isNull() && m_min_final_segment_length_isValid;

    m_mpd_manifest_bandwidth_type_isValid = ::OpenAPI::fromJsonValue(m_mpd_manifest_bandwidth_type, json[QString("MpdManifestBandwidthType")]);
    m_mpd_manifest_bandwidth_type_isSet = !json[QString("MpdManifestBandwidthType")].isNull() && m_mpd_manifest_bandwidth_type_isValid;

    m_mpd_profile_isValid = ::OpenAPI::fromJsonValue(m_mpd_profile, json[QString("MpdProfile")]);
    m_mpd_profile_isSet = !json[QString("MpdProfile")].isNull() && m_mpd_profile_isValid;

    m_pts_offset_handling_for_b_frames_isValid = ::OpenAPI::fromJsonValue(m_pts_offset_handling_for_b_frames, json[QString("PtsOffsetHandlingForBFrames")]);
    m_pts_offset_handling_for_b_frames_isSet = !json[QString("PtsOffsetHandlingForBFrames")].isNull() && m_pts_offset_handling_for_b_frames_isValid;

    m_segment_control_isValid = ::OpenAPI::fromJsonValue(m_segment_control, json[QString("SegmentControl")]);
    m_segment_control_isSet = !json[QString("SegmentControl")].isNull() && m_segment_control_isValid;

    m_segment_length_isValid = ::OpenAPI::fromJsonValue(m_segment_length, json[QString("SegmentLength")]);
    m_segment_length_isSet = !json[QString("SegmentLength")].isNull() && m_segment_length_isValid;

    m_segment_length_control_isValid = ::OpenAPI::fromJsonValue(m_segment_length_control, json[QString("SegmentLengthControl")]);
    m_segment_length_control_isSet = !json[QString("SegmentLengthControl")].isNull() && m_segment_length_control_isValid;

    m_stream_inf_resolution_isValid = ::OpenAPI::fromJsonValue(m_stream_inf_resolution, json[QString("StreamInfResolution")]);
    m_stream_inf_resolution_isSet = !json[QString("StreamInfResolution")].isNull() && m_stream_inf_resolution_isValid;

    m_target_duration_compatibility_mode_isValid = ::OpenAPI::fromJsonValue(m_target_duration_compatibility_mode, json[QString("TargetDurationCompatibilityMode")]);
    m_target_duration_compatibility_mode_isSet = !json[QString("TargetDurationCompatibilityMode")].isNull() && m_target_duration_compatibility_mode_isValid;

    m_video_composition_offsets_isValid = ::OpenAPI::fromJsonValue(m_video_composition_offsets, json[QString("VideoCompositionOffsets")]);
    m_video_composition_offsets_isSet = !json[QString("VideoCompositionOffsets")].isNull() && m_video_composition_offsets_isValid;

    m_write_dash_manifest_isValid = ::OpenAPI::fromJsonValue(m_write_dash_manifest, json[QString("WriteDashManifest")]);
    m_write_dash_manifest_isSet = !json[QString("WriteDashManifest")].isNull() && m_write_dash_manifest_isValid;

    m_write_hls_manifest_isValid = ::OpenAPI::fromJsonValue(m_write_hls_manifest, json[QString("WriteHlsManifest")]);
    m_write_hls_manifest_isSet = !json[QString("WriteHlsManifest")].isNull() && m_write_hls_manifest_isValid;

    m_write_segment_timeline_in_representation_isValid = ::OpenAPI::fromJsonValue(m_write_segment_timeline_in_representation, json[QString("WriteSegmentTimelineInRepresentation")]);
    m_write_segment_timeline_in_representation_isSet = !json[QString("WriteSegmentTimelineInRepresentation")].isNull() && m_write_segment_timeline_in_representation_isValid;
}

QString OAICmafGroupSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICmafGroupSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_manifests.isSet()) {
        obj.insert(QString("AdditionalManifests"), ::OpenAPI::toJsonValue(m_additional_manifests));
    }
    if (m_base_url_isSet) {
        obj.insert(QString("BaseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_client_cache.isSet()) {
        obj.insert(QString("ClientCache"), ::OpenAPI::toJsonValue(m_client_cache));
    }
    if (m_codec_specification.isSet()) {
        obj.insert(QString("CodecSpecification"), ::OpenAPI::toJsonValue(m_codec_specification));
    }
    if (m_dash_manifest_style.isSet()) {
        obj.insert(QString("DashManifestStyle"), ::OpenAPI::toJsonValue(m_dash_manifest_style));
    }
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_settings.isSet()) {
        obj.insert(QString("DestinationSettings"), ::OpenAPI::toJsonValue(m_destination_settings));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_fragment_length_isSet) {
        obj.insert(QString("FragmentLength"), ::OpenAPI::toJsonValue(m_fragment_length));
    }
    if (m_image_based_trick_play.isSet()) {
        obj.insert(QString("ImageBasedTrickPlay"), ::OpenAPI::toJsonValue(m_image_based_trick_play));
    }
    if (m_image_based_trick_play_settings.isSet()) {
        obj.insert(QString("ImageBasedTrickPlaySettings"), ::OpenAPI::toJsonValue(m_image_based_trick_play_settings));
    }
    if (m_manifest_compression.isSet()) {
        obj.insert(QString("ManifestCompression"), ::OpenAPI::toJsonValue(m_manifest_compression));
    }
    if (m_manifest_duration_format.isSet()) {
        obj.insert(QString("ManifestDurationFormat"), ::OpenAPI::toJsonValue(m_manifest_duration_format));
    }
    if (m_min_buffer_time_isSet) {
        obj.insert(QString("MinBufferTime"), ::OpenAPI::toJsonValue(m_min_buffer_time));
    }
    if (m_min_final_segment_length_isSet) {
        obj.insert(QString("MinFinalSegmentLength"), ::OpenAPI::toJsonValue(m_min_final_segment_length));
    }
    if (m_mpd_manifest_bandwidth_type.isSet()) {
        obj.insert(QString("MpdManifestBandwidthType"), ::OpenAPI::toJsonValue(m_mpd_manifest_bandwidth_type));
    }
    if (m_mpd_profile.isSet()) {
        obj.insert(QString("MpdProfile"), ::OpenAPI::toJsonValue(m_mpd_profile));
    }
    if (m_pts_offset_handling_for_b_frames.isSet()) {
        obj.insert(QString("PtsOffsetHandlingForBFrames"), ::OpenAPI::toJsonValue(m_pts_offset_handling_for_b_frames));
    }
    if (m_segment_control.isSet()) {
        obj.insert(QString("SegmentControl"), ::OpenAPI::toJsonValue(m_segment_control));
    }
    if (m_segment_length_isSet) {
        obj.insert(QString("SegmentLength"), ::OpenAPI::toJsonValue(m_segment_length));
    }
    if (m_segment_length_control.isSet()) {
        obj.insert(QString("SegmentLengthControl"), ::OpenAPI::toJsonValue(m_segment_length_control));
    }
    if (m_stream_inf_resolution.isSet()) {
        obj.insert(QString("StreamInfResolution"), ::OpenAPI::toJsonValue(m_stream_inf_resolution));
    }
    if (m_target_duration_compatibility_mode.isSet()) {
        obj.insert(QString("TargetDurationCompatibilityMode"), ::OpenAPI::toJsonValue(m_target_duration_compatibility_mode));
    }
    if (m_video_composition_offsets.isSet()) {
        obj.insert(QString("VideoCompositionOffsets"), ::OpenAPI::toJsonValue(m_video_composition_offsets));
    }
    if (m_write_dash_manifest.isSet()) {
        obj.insert(QString("WriteDashManifest"), ::OpenAPI::toJsonValue(m_write_dash_manifest));
    }
    if (m_write_hls_manifest.isSet()) {
        obj.insert(QString("WriteHlsManifest"), ::OpenAPI::toJsonValue(m_write_hls_manifest));
    }
    if (m_write_segment_timeline_in_representation.isSet()) {
        obj.insert(QString("WriteSegmentTimelineInRepresentation"), ::OpenAPI::toJsonValue(m_write_segment_timeline_in_representation));
    }
    return obj;
}

QList OAICmafGroupSettings::getAdditionalManifests() const {
    return m_additional_manifests;
}
void OAICmafGroupSettings::setAdditionalManifests(const QList &additional_manifests) {
    m_additional_manifests = additional_manifests;
    m_additional_manifests_isSet = true;
}

bool OAICmafGroupSettings::is_additional_manifests_Set() const{
    return m_additional_manifests_isSet;
}

bool OAICmafGroupSettings::is_additional_manifests_Valid() const{
    return m_additional_manifests_isValid;
}

QString OAICmafGroupSettings::getBaseUrl() const {
    return m_base_url;
}
void OAICmafGroupSettings::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAICmafGroupSettings::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAICmafGroupSettings::is_base_url_Valid() const{
    return m_base_url_isValid;
}

OAICmafClientCache OAICmafGroupSettings::getClientCache() const {
    return m_client_cache;
}
void OAICmafGroupSettings::setClientCache(const OAICmafClientCache &client_cache) {
    m_client_cache = client_cache;
    m_client_cache_isSet = true;
}

bool OAICmafGroupSettings::is_client_cache_Set() const{
    return m_client_cache_isSet;
}

bool OAICmafGroupSettings::is_client_cache_Valid() const{
    return m_client_cache_isValid;
}

OAICmafCodecSpecification OAICmafGroupSettings::getCodecSpecification() const {
    return m_codec_specification;
}
void OAICmafGroupSettings::setCodecSpecification(const OAICmafCodecSpecification &codec_specification) {
    m_codec_specification = codec_specification;
    m_codec_specification_isSet = true;
}

bool OAICmafGroupSettings::is_codec_specification_Set() const{
    return m_codec_specification_isSet;
}

bool OAICmafGroupSettings::is_codec_specification_Valid() const{
    return m_codec_specification_isValid;
}

OAIDashManifestStyle OAICmafGroupSettings::getDashManifestStyle() const {
    return m_dash_manifest_style;
}
void OAICmafGroupSettings::setDashManifestStyle(const OAIDashManifestStyle &dash_manifest_style) {
    m_dash_manifest_style = dash_manifest_style;
    m_dash_manifest_style_isSet = true;
}

bool OAICmafGroupSettings::is_dash_manifest_style_Set() const{
    return m_dash_manifest_style_isSet;
}

bool OAICmafGroupSettings::is_dash_manifest_style_Valid() const{
    return m_dash_manifest_style_isValid;
}

QString OAICmafGroupSettings::getDestination() const {
    return m_destination;
}
void OAICmafGroupSettings::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAICmafGroupSettings::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAICmafGroupSettings::is_destination_Valid() const{
    return m_destination_isValid;
}

OAICmafGroupSettings_DestinationSettings OAICmafGroupSettings::getDestinationSettings() const {
    return m_destination_settings;
}
void OAICmafGroupSettings::setDestinationSettings(const OAICmafGroupSettings_DestinationSettings &destination_settings) {
    m_destination_settings = destination_settings;
    m_destination_settings_isSet = true;
}

bool OAICmafGroupSettings::is_destination_settings_Set() const{
    return m_destination_settings_isSet;
}

bool OAICmafGroupSettings::is_destination_settings_Valid() const{
    return m_destination_settings_isValid;
}

OAICmafGroupSettings_Encryption OAICmafGroupSettings::getEncryption() const {
    return m_encryption;
}
void OAICmafGroupSettings::setEncryption(const OAICmafGroupSettings_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAICmafGroupSettings::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAICmafGroupSettings::is_encryption_Valid() const{
    return m_encryption_isValid;
}

qint32 OAICmafGroupSettings::getFragmentLength() const {
    return m_fragment_length;
}
void OAICmafGroupSettings::setFragmentLength(const qint32 &fragment_length) {
    m_fragment_length = fragment_length;
    m_fragment_length_isSet = true;
}

bool OAICmafGroupSettings::is_fragment_length_Set() const{
    return m_fragment_length_isSet;
}

bool OAICmafGroupSettings::is_fragment_length_Valid() const{
    return m_fragment_length_isValid;
}

OAICmafImageBasedTrickPlay OAICmafGroupSettings::getImageBasedTrickPlay() const {
    return m_image_based_trick_play;
}
void OAICmafGroupSettings::setImageBasedTrickPlay(const OAICmafImageBasedTrickPlay &image_based_trick_play) {
    m_image_based_trick_play = image_based_trick_play;
    m_image_based_trick_play_isSet = true;
}

bool OAICmafGroupSettings::is_image_based_trick_play_Set() const{
    return m_image_based_trick_play_isSet;
}

bool OAICmafGroupSettings::is_image_based_trick_play_Valid() const{
    return m_image_based_trick_play_isValid;
}

OAICmafGroupSettings_ImageBasedTrickPlaySettings OAICmafGroupSettings::getImageBasedTrickPlaySettings() const {
    return m_image_based_trick_play_settings;
}
void OAICmafGroupSettings::setImageBasedTrickPlaySettings(const OAICmafGroupSettings_ImageBasedTrickPlaySettings &image_based_trick_play_settings) {
    m_image_based_trick_play_settings = image_based_trick_play_settings;
    m_image_based_trick_play_settings_isSet = true;
}

bool OAICmafGroupSettings::is_image_based_trick_play_settings_Set() const{
    return m_image_based_trick_play_settings_isSet;
}

bool OAICmafGroupSettings::is_image_based_trick_play_settings_Valid() const{
    return m_image_based_trick_play_settings_isValid;
}

OAICmafManifestCompression OAICmafGroupSettings::getManifestCompression() const {
    return m_manifest_compression;
}
void OAICmafGroupSettings::setManifestCompression(const OAICmafManifestCompression &manifest_compression) {
    m_manifest_compression = manifest_compression;
    m_manifest_compression_isSet = true;
}

bool OAICmafGroupSettings::is_manifest_compression_Set() const{
    return m_manifest_compression_isSet;
}

bool OAICmafGroupSettings::is_manifest_compression_Valid() const{
    return m_manifest_compression_isValid;
}

OAICmafManifestDurationFormat OAICmafGroupSettings::getManifestDurationFormat() const {
    return m_manifest_duration_format;
}
void OAICmafGroupSettings::setManifestDurationFormat(const OAICmafManifestDurationFormat &manifest_duration_format) {
    m_manifest_duration_format = manifest_duration_format;
    m_manifest_duration_format_isSet = true;
}

bool OAICmafGroupSettings::is_manifest_duration_format_Set() const{
    return m_manifest_duration_format_isSet;
}

bool OAICmafGroupSettings::is_manifest_duration_format_Valid() const{
    return m_manifest_duration_format_isValid;
}

qint32 OAICmafGroupSettings::getMinBufferTime() const {
    return m_min_buffer_time;
}
void OAICmafGroupSettings::setMinBufferTime(const qint32 &min_buffer_time) {
    m_min_buffer_time = min_buffer_time;
    m_min_buffer_time_isSet = true;
}

bool OAICmafGroupSettings::is_min_buffer_time_Set() const{
    return m_min_buffer_time_isSet;
}

bool OAICmafGroupSettings::is_min_buffer_time_Valid() const{
    return m_min_buffer_time_isValid;
}

double OAICmafGroupSettings::getMinFinalSegmentLength() const {
    return m_min_final_segment_length;
}
void OAICmafGroupSettings::setMinFinalSegmentLength(const double &min_final_segment_length) {
    m_min_final_segment_length = min_final_segment_length;
    m_min_final_segment_length_isSet = true;
}

bool OAICmafGroupSettings::is_min_final_segment_length_Set() const{
    return m_min_final_segment_length_isSet;
}

bool OAICmafGroupSettings::is_min_final_segment_length_Valid() const{
    return m_min_final_segment_length_isValid;
}

OAICmafMpdManifestBandwidthType OAICmafGroupSettings::getMpdManifestBandwidthType() const {
    return m_mpd_manifest_bandwidth_type;
}
void OAICmafGroupSettings::setMpdManifestBandwidthType(const OAICmafMpdManifestBandwidthType &mpd_manifest_bandwidth_type) {
    m_mpd_manifest_bandwidth_type = mpd_manifest_bandwidth_type;
    m_mpd_manifest_bandwidth_type_isSet = true;
}

bool OAICmafGroupSettings::is_mpd_manifest_bandwidth_type_Set() const{
    return m_mpd_manifest_bandwidth_type_isSet;
}

bool OAICmafGroupSettings::is_mpd_manifest_bandwidth_type_Valid() const{
    return m_mpd_manifest_bandwidth_type_isValid;
}

OAICmafMpdProfile OAICmafGroupSettings::getMpdProfile() const {
    return m_mpd_profile;
}
void OAICmafGroupSettings::setMpdProfile(const OAICmafMpdProfile &mpd_profile) {
    m_mpd_profile = mpd_profile;
    m_mpd_profile_isSet = true;
}

bool OAICmafGroupSettings::is_mpd_profile_Set() const{
    return m_mpd_profile_isSet;
}

bool OAICmafGroupSettings::is_mpd_profile_Valid() const{
    return m_mpd_profile_isValid;
}

OAICmafPtsOffsetHandlingForBFrames OAICmafGroupSettings::getPtsOffsetHandlingForBFrames() const {
    return m_pts_offset_handling_for_b_frames;
}
void OAICmafGroupSettings::setPtsOffsetHandlingForBFrames(const OAICmafPtsOffsetHandlingForBFrames &pts_offset_handling_for_b_frames) {
    m_pts_offset_handling_for_b_frames = pts_offset_handling_for_b_frames;
    m_pts_offset_handling_for_b_frames_isSet = true;
}

bool OAICmafGroupSettings::is_pts_offset_handling_for_b_frames_Set() const{
    return m_pts_offset_handling_for_b_frames_isSet;
}

bool OAICmafGroupSettings::is_pts_offset_handling_for_b_frames_Valid() const{
    return m_pts_offset_handling_for_b_frames_isValid;
}

OAICmafSegmentControl OAICmafGroupSettings::getSegmentControl() const {
    return m_segment_control;
}
void OAICmafGroupSettings::setSegmentControl(const OAICmafSegmentControl &segment_control) {
    m_segment_control = segment_control;
    m_segment_control_isSet = true;
}

bool OAICmafGroupSettings::is_segment_control_Set() const{
    return m_segment_control_isSet;
}

bool OAICmafGroupSettings::is_segment_control_Valid() const{
    return m_segment_control_isValid;
}

qint32 OAICmafGroupSettings::getSegmentLength() const {
    return m_segment_length;
}
void OAICmafGroupSettings::setSegmentLength(const qint32 &segment_length) {
    m_segment_length = segment_length;
    m_segment_length_isSet = true;
}

bool OAICmafGroupSettings::is_segment_length_Set() const{
    return m_segment_length_isSet;
}

bool OAICmafGroupSettings::is_segment_length_Valid() const{
    return m_segment_length_isValid;
}

OAICmafSegmentLengthControl OAICmafGroupSettings::getSegmentLengthControl() const {
    return m_segment_length_control;
}
void OAICmafGroupSettings::setSegmentLengthControl(const OAICmafSegmentLengthControl &segment_length_control) {
    m_segment_length_control = segment_length_control;
    m_segment_length_control_isSet = true;
}

bool OAICmafGroupSettings::is_segment_length_control_Set() const{
    return m_segment_length_control_isSet;
}

bool OAICmafGroupSettings::is_segment_length_control_Valid() const{
    return m_segment_length_control_isValid;
}

OAICmafStreamInfResolution OAICmafGroupSettings::getStreamInfResolution() const {
    return m_stream_inf_resolution;
}
void OAICmafGroupSettings::setStreamInfResolution(const OAICmafStreamInfResolution &stream_inf_resolution) {
    m_stream_inf_resolution = stream_inf_resolution;
    m_stream_inf_resolution_isSet = true;
}

bool OAICmafGroupSettings::is_stream_inf_resolution_Set() const{
    return m_stream_inf_resolution_isSet;
}

bool OAICmafGroupSettings::is_stream_inf_resolution_Valid() const{
    return m_stream_inf_resolution_isValid;
}

OAICmafTargetDurationCompatibilityMode OAICmafGroupSettings::getTargetDurationCompatibilityMode() const {
    return m_target_duration_compatibility_mode;
}
void OAICmafGroupSettings::setTargetDurationCompatibilityMode(const OAICmafTargetDurationCompatibilityMode &target_duration_compatibility_mode) {
    m_target_duration_compatibility_mode = target_duration_compatibility_mode;
    m_target_duration_compatibility_mode_isSet = true;
}

bool OAICmafGroupSettings::is_target_duration_compatibility_mode_Set() const{
    return m_target_duration_compatibility_mode_isSet;
}

bool OAICmafGroupSettings::is_target_duration_compatibility_mode_Valid() const{
    return m_target_duration_compatibility_mode_isValid;
}

OAICmafVideoCompositionOffsets OAICmafGroupSettings::getVideoCompositionOffsets() const {
    return m_video_composition_offsets;
}
void OAICmafGroupSettings::setVideoCompositionOffsets(const OAICmafVideoCompositionOffsets &video_composition_offsets) {
    m_video_composition_offsets = video_composition_offsets;
    m_video_composition_offsets_isSet = true;
}

bool OAICmafGroupSettings::is_video_composition_offsets_Set() const{
    return m_video_composition_offsets_isSet;
}

bool OAICmafGroupSettings::is_video_composition_offsets_Valid() const{
    return m_video_composition_offsets_isValid;
}

OAICmafWriteDASHManifest OAICmafGroupSettings::getWriteDashManifest() const {
    return m_write_dash_manifest;
}
void OAICmafGroupSettings::setWriteDashManifest(const OAICmafWriteDASHManifest &write_dash_manifest) {
    m_write_dash_manifest = write_dash_manifest;
    m_write_dash_manifest_isSet = true;
}

bool OAICmafGroupSettings::is_write_dash_manifest_Set() const{
    return m_write_dash_manifest_isSet;
}

bool OAICmafGroupSettings::is_write_dash_manifest_Valid() const{
    return m_write_dash_manifest_isValid;
}

OAICmafWriteHLSManifest OAICmafGroupSettings::getWriteHlsManifest() const {
    return m_write_hls_manifest;
}
void OAICmafGroupSettings::setWriteHlsManifest(const OAICmafWriteHLSManifest &write_hls_manifest) {
    m_write_hls_manifest = write_hls_manifest;
    m_write_hls_manifest_isSet = true;
}

bool OAICmafGroupSettings::is_write_hls_manifest_Set() const{
    return m_write_hls_manifest_isSet;
}

bool OAICmafGroupSettings::is_write_hls_manifest_Valid() const{
    return m_write_hls_manifest_isValid;
}

OAICmafWriteSegmentTimelineInRepresentation OAICmafGroupSettings::getWriteSegmentTimelineInRepresentation() const {
    return m_write_segment_timeline_in_representation;
}
void OAICmafGroupSettings::setWriteSegmentTimelineInRepresentation(const OAICmafWriteSegmentTimelineInRepresentation &write_segment_timeline_in_representation) {
    m_write_segment_timeline_in_representation = write_segment_timeline_in_representation;
    m_write_segment_timeline_in_representation_isSet = true;
}

bool OAICmafGroupSettings::is_write_segment_timeline_in_representation_Set() const{
    return m_write_segment_timeline_in_representation_isSet;
}

bool OAICmafGroupSettings::is_write_segment_timeline_in_representation_Valid() const{
    return m_write_segment_timeline_in_representation_isValid;
}

bool OAICmafGroupSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_manifests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_cache.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dash_manifest_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_based_trick_play.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_based_trick_play_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_duration_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_buffer_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_final_segment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpd_manifest_bandwidth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpd_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pts_offset_handling_for_b_frames.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_length_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_inf_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_duration_compatibility_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_composition_offsets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_dash_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_hls_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_segment_timeline_in_representation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICmafGroupSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
