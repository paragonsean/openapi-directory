/**
 * AWS Elemental MediaConvert
 * AWS Elemental MediaConvert
 *
 * The version of the OpenAPI document: 2017-08-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioDescription.h
 *
 * Settings related to one audio tab on the MediaConvert console. In your job JSON, an instance of AudioDescription is equivalent to one audio tab in the console. Usually, one audio tab corresponds to one output audio track. Depending on how you set up your input audio selectors and whether you use audio selector groups, one audio tab can correspond to a group of output audio tracks.
 */

#ifndef OAIAudioDescription_H
#define OAIAudioDescription_H

#include <QJsonObject>

#include "OAIAudioDescription_AudioChannelTaggingSettings.h"
#include "OAIAudioDescription_AudioNormalizationSettings.h"
#include "OAIAudioDescription_CodecSettings.h"
#include "OAIAudioDescription_RemixSettings.h"
#include "OAIAudioLanguageCodeControl.h"
#include "OAIAudioTypeControl.h"
#include "OAILanguageCode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAudioDescription_AudioChannelTaggingSettings;
class OAIAudioDescription_AudioNormalizationSettings;
class OAIAudioDescription_CodecSettings;
class OAIAudioDescription_RemixSettings;

class OAIAudioDescription : public OAIObject {
public:
    OAIAudioDescription();
    OAIAudioDescription(QString json);
    ~OAIAudioDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAudioDescription_AudioChannelTaggingSettings getAudioChannelTaggingSettings() const;
    void setAudioChannelTaggingSettings(const OAIAudioDescription_AudioChannelTaggingSettings &audio_channel_tagging_settings);
    bool is_audio_channel_tagging_settings_Set() const;
    bool is_audio_channel_tagging_settings_Valid() const;

    OAIAudioDescription_AudioNormalizationSettings getAudioNormalizationSettings() const;
    void setAudioNormalizationSettings(const OAIAudioDescription_AudioNormalizationSettings &audio_normalization_settings);
    bool is_audio_normalization_settings_Set() const;
    bool is_audio_normalization_settings_Valid() const;

    QString getAudioSourceName() const;
    void setAudioSourceName(const QString &audio_source_name);
    bool is_audio_source_name_Set() const;
    bool is_audio_source_name_Valid() const;

    qint32 getAudioType() const;
    void setAudioType(const qint32 &audio_type);
    bool is_audio_type_Set() const;
    bool is_audio_type_Valid() const;

    OAIAudioTypeControl getAudioTypeControl() const;
    void setAudioTypeControl(const OAIAudioTypeControl &audio_type_control);
    bool is_audio_type_control_Set() const;
    bool is_audio_type_control_Valid() const;

    OAIAudioDescription_CodecSettings getCodecSettings() const;
    void setCodecSettings(const OAIAudioDescription_CodecSettings &codec_settings);
    bool is_codec_settings_Set() const;
    bool is_codec_settings_Valid() const;

    QString getCustomLanguageCode() const;
    void setCustomLanguageCode(const QString &custom_language_code);
    bool is_custom_language_code_Set() const;
    bool is_custom_language_code_Valid() const;

    OAILanguageCode getLanguageCode() const;
    void setLanguageCode(const OAILanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    OAIAudioLanguageCodeControl getLanguageCodeControl() const;
    void setLanguageCodeControl(const OAIAudioLanguageCodeControl &language_code_control);
    bool is_language_code_control_Set() const;
    bool is_language_code_control_Valid() const;

    OAIAudioDescription_RemixSettings getRemixSettings() const;
    void setRemixSettings(const OAIAudioDescription_RemixSettings &remix_settings);
    bool is_remix_settings_Set() const;
    bool is_remix_settings_Valid() const;

    QString getStreamName() const;
    void setStreamName(const QString &stream_name);
    bool is_stream_name_Set() const;
    bool is_stream_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAudioDescription_AudioChannelTaggingSettings m_audio_channel_tagging_settings;
    bool m_audio_channel_tagging_settings_isSet;
    bool m_audio_channel_tagging_settings_isValid;

    OAIAudioDescription_AudioNormalizationSettings m_audio_normalization_settings;
    bool m_audio_normalization_settings_isSet;
    bool m_audio_normalization_settings_isValid;

    QString m_audio_source_name;
    bool m_audio_source_name_isSet;
    bool m_audio_source_name_isValid;

    qint32 m_audio_type;
    bool m_audio_type_isSet;
    bool m_audio_type_isValid;

    OAIAudioTypeControl m_audio_type_control;
    bool m_audio_type_control_isSet;
    bool m_audio_type_control_isValid;

    OAIAudioDescription_CodecSettings m_codec_settings;
    bool m_codec_settings_isSet;
    bool m_codec_settings_isValid;

    QString m_custom_language_code;
    bool m_custom_language_code_isSet;
    bool m_custom_language_code_isValid;

    OAILanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    OAIAudioLanguageCodeControl m_language_code_control;
    bool m_language_code_control_isSet;
    bool m_language_code_control_isValid;

    OAIAudioDescription_RemixSettings m_remix_settings;
    bool m_remix_settings_isSet;
    bool m_remix_settings_isValid;

    QString m_stream_name;
    bool m_stream_name_isSet;
    bool m_stream_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioDescription)

#endif // OAIAudioDescription_H
