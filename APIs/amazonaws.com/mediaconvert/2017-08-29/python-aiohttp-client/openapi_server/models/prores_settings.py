# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prores_chroma_sampling import ProresChromaSampling
from openapi_server.models.prores_codec_profile import ProresCodecProfile
from openapi_server.models.prores_framerate_control import ProresFramerateControl
from openapi_server.models.prores_framerate_conversion_algorithm import ProresFramerateConversionAlgorithm
from openapi_server.models.prores_interlace_mode import ProresInterlaceMode
from openapi_server.models.prores_par_control import ProresParControl
from openapi_server.models.prores_scan_type_conversion_mode import ProresScanTypeConversionMode
from openapi_server.models.prores_slow_pal import ProresSlowPal
from openapi_server.models.prores_telecine import ProresTelecine
from openapi_server import util


class ProresSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chroma_sampling: ProresChromaSampling=None, codec_profile: ProresCodecProfile=None, framerate_control: ProresFramerateControl=None, framerate_conversion_algorithm: ProresFramerateConversionAlgorithm=None, framerate_denominator: int=None, framerate_numerator: int=None, interlace_mode: ProresInterlaceMode=None, par_control: ProresParControl=None, par_denominator: int=None, par_numerator: int=None, scan_type_conversion_mode: ProresScanTypeConversionMode=None, slow_pal: ProresSlowPal=None, telecine: ProresTelecine=None):
        """ProresSettings - a model defined in OpenAPI

        :param chroma_sampling: The chroma_sampling of this ProresSettings.
        :param codec_profile: The codec_profile of this ProresSettings.
        :param framerate_control: The framerate_control of this ProresSettings.
        :param framerate_conversion_algorithm: The framerate_conversion_algorithm of this ProresSettings.
        :param framerate_denominator: The framerate_denominator of this ProresSettings.
        :param framerate_numerator: The framerate_numerator of this ProresSettings.
        :param interlace_mode: The interlace_mode of this ProresSettings.
        :param par_control: The par_control of this ProresSettings.
        :param par_denominator: The par_denominator of this ProresSettings.
        :param par_numerator: The par_numerator of this ProresSettings.
        :param scan_type_conversion_mode: The scan_type_conversion_mode of this ProresSettings.
        :param slow_pal: The slow_pal of this ProresSettings.
        :param telecine: The telecine of this ProresSettings.
        """
        self.openapi_types = {
            'chroma_sampling': ProresChromaSampling,
            'codec_profile': ProresCodecProfile,
            'framerate_control': ProresFramerateControl,
            'framerate_conversion_algorithm': ProresFramerateConversionAlgorithm,
            'framerate_denominator': int,
            'framerate_numerator': int,
            'interlace_mode': ProresInterlaceMode,
            'par_control': ProresParControl,
            'par_denominator': int,
            'par_numerator': int,
            'scan_type_conversion_mode': ProresScanTypeConversionMode,
            'slow_pal': ProresSlowPal,
            'telecine': ProresTelecine
        }

        self.attribute_map = {
            'chroma_sampling': 'ChromaSampling',
            'codec_profile': 'CodecProfile',
            'framerate_control': 'FramerateControl',
            'framerate_conversion_algorithm': 'FramerateConversionAlgorithm',
            'framerate_denominator': 'FramerateDenominator',
            'framerate_numerator': 'FramerateNumerator',
            'interlace_mode': 'InterlaceMode',
            'par_control': 'ParControl',
            'par_denominator': 'ParDenominator',
            'par_numerator': 'ParNumerator',
            'scan_type_conversion_mode': 'ScanTypeConversionMode',
            'slow_pal': 'SlowPal',
            'telecine': 'Telecine'
        }

        self._chroma_sampling = chroma_sampling
        self._codec_profile = codec_profile
        self._framerate_control = framerate_control
        self._framerate_conversion_algorithm = framerate_conversion_algorithm
        self._framerate_denominator = framerate_denominator
        self._framerate_numerator = framerate_numerator
        self._interlace_mode = interlace_mode
        self._par_control = par_control
        self._par_denominator = par_denominator
        self._par_numerator = par_numerator
        self._scan_type_conversion_mode = scan_type_conversion_mode
        self._slow_pal = slow_pal
        self._telecine = telecine

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProresSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProresSettings of this ProresSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chroma_sampling(self):
        """Gets the chroma_sampling of this ProresSettings.


        :return: The chroma_sampling of this ProresSettings.
        :rtype: ProresChromaSampling
        """
        return self._chroma_sampling

    @chroma_sampling.setter
    def chroma_sampling(self, chroma_sampling):
        """Sets the chroma_sampling of this ProresSettings.


        :param chroma_sampling: The chroma_sampling of this ProresSettings.
        :type chroma_sampling: ProresChromaSampling
        """

        self._chroma_sampling = chroma_sampling

    @property
    def codec_profile(self):
        """Gets the codec_profile of this ProresSettings.


        :return: The codec_profile of this ProresSettings.
        :rtype: ProresCodecProfile
        """
        return self._codec_profile

    @codec_profile.setter
    def codec_profile(self, codec_profile):
        """Sets the codec_profile of this ProresSettings.


        :param codec_profile: The codec_profile of this ProresSettings.
        :type codec_profile: ProresCodecProfile
        """

        self._codec_profile = codec_profile

    @property
    def framerate_control(self):
        """Gets the framerate_control of this ProresSettings.


        :return: The framerate_control of this ProresSettings.
        :rtype: ProresFramerateControl
        """
        return self._framerate_control

    @framerate_control.setter
    def framerate_control(self, framerate_control):
        """Sets the framerate_control of this ProresSettings.


        :param framerate_control: The framerate_control of this ProresSettings.
        :type framerate_control: ProresFramerateControl
        """

        self._framerate_control = framerate_control

    @property
    def framerate_conversion_algorithm(self):
        """Gets the framerate_conversion_algorithm of this ProresSettings.


        :return: The framerate_conversion_algorithm of this ProresSettings.
        :rtype: ProresFramerateConversionAlgorithm
        """
        return self._framerate_conversion_algorithm

    @framerate_conversion_algorithm.setter
    def framerate_conversion_algorithm(self, framerate_conversion_algorithm):
        """Sets the framerate_conversion_algorithm of this ProresSettings.


        :param framerate_conversion_algorithm: The framerate_conversion_algorithm of this ProresSettings.
        :type framerate_conversion_algorithm: ProresFramerateConversionAlgorithm
        """

        self._framerate_conversion_algorithm = framerate_conversion_algorithm

    @property
    def framerate_denominator(self):
        """Gets the framerate_denominator of this ProresSettings.


        :return: The framerate_denominator of this ProresSettings.
        :rtype: int
        """
        return self._framerate_denominator

    @framerate_denominator.setter
    def framerate_denominator(self, framerate_denominator):
        """Sets the framerate_denominator of this ProresSettings.


        :param framerate_denominator: The framerate_denominator of this ProresSettings.
        :type framerate_denominator: int
        """

        self._framerate_denominator = framerate_denominator

    @property
    def framerate_numerator(self):
        """Gets the framerate_numerator of this ProresSettings.


        :return: The framerate_numerator of this ProresSettings.
        :rtype: int
        """
        return self._framerate_numerator

    @framerate_numerator.setter
    def framerate_numerator(self, framerate_numerator):
        """Sets the framerate_numerator of this ProresSettings.


        :param framerate_numerator: The framerate_numerator of this ProresSettings.
        :type framerate_numerator: int
        """

        self._framerate_numerator = framerate_numerator

    @property
    def interlace_mode(self):
        """Gets the interlace_mode of this ProresSettings.


        :return: The interlace_mode of this ProresSettings.
        :rtype: ProresInterlaceMode
        """
        return self._interlace_mode

    @interlace_mode.setter
    def interlace_mode(self, interlace_mode):
        """Sets the interlace_mode of this ProresSettings.


        :param interlace_mode: The interlace_mode of this ProresSettings.
        :type interlace_mode: ProresInterlaceMode
        """

        self._interlace_mode = interlace_mode

    @property
    def par_control(self):
        """Gets the par_control of this ProresSettings.


        :return: The par_control of this ProresSettings.
        :rtype: ProresParControl
        """
        return self._par_control

    @par_control.setter
    def par_control(self, par_control):
        """Sets the par_control of this ProresSettings.


        :param par_control: The par_control of this ProresSettings.
        :type par_control: ProresParControl
        """

        self._par_control = par_control

    @property
    def par_denominator(self):
        """Gets the par_denominator of this ProresSettings.


        :return: The par_denominator of this ProresSettings.
        :rtype: int
        """
        return self._par_denominator

    @par_denominator.setter
    def par_denominator(self, par_denominator):
        """Sets the par_denominator of this ProresSettings.


        :param par_denominator: The par_denominator of this ProresSettings.
        :type par_denominator: int
        """

        self._par_denominator = par_denominator

    @property
    def par_numerator(self):
        """Gets the par_numerator of this ProresSettings.


        :return: The par_numerator of this ProresSettings.
        :rtype: int
        """
        return self._par_numerator

    @par_numerator.setter
    def par_numerator(self, par_numerator):
        """Sets the par_numerator of this ProresSettings.


        :param par_numerator: The par_numerator of this ProresSettings.
        :type par_numerator: int
        """

        self._par_numerator = par_numerator

    @property
    def scan_type_conversion_mode(self):
        """Gets the scan_type_conversion_mode of this ProresSettings.


        :return: The scan_type_conversion_mode of this ProresSettings.
        :rtype: ProresScanTypeConversionMode
        """
        return self._scan_type_conversion_mode

    @scan_type_conversion_mode.setter
    def scan_type_conversion_mode(self, scan_type_conversion_mode):
        """Sets the scan_type_conversion_mode of this ProresSettings.


        :param scan_type_conversion_mode: The scan_type_conversion_mode of this ProresSettings.
        :type scan_type_conversion_mode: ProresScanTypeConversionMode
        """

        self._scan_type_conversion_mode = scan_type_conversion_mode

    @property
    def slow_pal(self):
        """Gets the slow_pal of this ProresSettings.


        :return: The slow_pal of this ProresSettings.
        :rtype: ProresSlowPal
        """
        return self._slow_pal

    @slow_pal.setter
    def slow_pal(self, slow_pal):
        """Sets the slow_pal of this ProresSettings.


        :param slow_pal: The slow_pal of this ProresSettings.
        :type slow_pal: ProresSlowPal
        """

        self._slow_pal = slow_pal

    @property
    def telecine(self):
        """Gets the telecine of this ProresSettings.


        :return: The telecine of this ProresSettings.
        :rtype: ProresTelecine
        """
        return self._telecine

    @telecine.setter
    def telecine(self, telecine):
        """Sets the telecine of this ProresSettings.


        :param telecine: The telecine of this ProresSettings.
        :type telecine: ProresTelecine
        """

        self._telecine = telecine
