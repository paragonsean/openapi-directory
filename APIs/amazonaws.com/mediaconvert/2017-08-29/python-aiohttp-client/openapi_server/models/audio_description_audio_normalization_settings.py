# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_normalization_algorithm import AudioNormalizationAlgorithm
from openapi_server.models.audio_normalization_algorithm_control import AudioNormalizationAlgorithmControl
from openapi_server.models.audio_normalization_loudness_logging import AudioNormalizationLoudnessLogging
from openapi_server.models.audio_normalization_peak_calculation import AudioNormalizationPeakCalculation
from openapi_server import util


class AudioDescriptionAudioNormalizationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: AudioNormalizationAlgorithm=None, algorithm_control: AudioNormalizationAlgorithmControl=None, correction_gate_level: int=None, loudness_logging: AudioNormalizationLoudnessLogging=None, peak_calculation: AudioNormalizationPeakCalculation=None, target_lkfs: float=None, true_peak_limiter_threshold: float=None):
        """AudioDescriptionAudioNormalizationSettings - a model defined in OpenAPI

        :param algorithm: The algorithm of this AudioDescriptionAudioNormalizationSettings.
        :param algorithm_control: The algorithm_control of this AudioDescriptionAudioNormalizationSettings.
        :param correction_gate_level: The correction_gate_level of this AudioDescriptionAudioNormalizationSettings.
        :param loudness_logging: The loudness_logging of this AudioDescriptionAudioNormalizationSettings.
        :param peak_calculation: The peak_calculation of this AudioDescriptionAudioNormalizationSettings.
        :param target_lkfs: The target_lkfs of this AudioDescriptionAudioNormalizationSettings.
        :param true_peak_limiter_threshold: The true_peak_limiter_threshold of this AudioDescriptionAudioNormalizationSettings.
        """
        self.openapi_types = {
            'algorithm': AudioNormalizationAlgorithm,
            'algorithm_control': AudioNormalizationAlgorithmControl,
            'correction_gate_level': int,
            'loudness_logging': AudioNormalizationLoudnessLogging,
            'peak_calculation': AudioNormalizationPeakCalculation,
            'target_lkfs': float,
            'true_peak_limiter_threshold': float
        }

        self.attribute_map = {
            'algorithm': 'Algorithm',
            'algorithm_control': 'AlgorithmControl',
            'correction_gate_level': 'CorrectionGateLevel',
            'loudness_logging': 'LoudnessLogging',
            'peak_calculation': 'PeakCalculation',
            'target_lkfs': 'TargetLkfs',
            'true_peak_limiter_threshold': 'TruePeakLimiterThreshold'
        }

        self._algorithm = algorithm
        self._algorithm_control = algorithm_control
        self._correction_gate_level = correction_gate_level
        self._loudness_logging = loudness_logging
        self._peak_calculation = peak_calculation
        self._target_lkfs = target_lkfs
        self._true_peak_limiter_threshold = true_peak_limiter_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioDescriptionAudioNormalizationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioDescription_AudioNormalizationSettings of this AudioDescriptionAudioNormalizationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this AudioDescriptionAudioNormalizationSettings.


        :return: The algorithm of this AudioDescriptionAudioNormalizationSettings.
        :rtype: AudioNormalizationAlgorithm
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this AudioDescriptionAudioNormalizationSettings.


        :param algorithm: The algorithm of this AudioDescriptionAudioNormalizationSettings.
        :type algorithm: AudioNormalizationAlgorithm
        """

        self._algorithm = algorithm

    @property
    def algorithm_control(self):
        """Gets the algorithm_control of this AudioDescriptionAudioNormalizationSettings.


        :return: The algorithm_control of this AudioDescriptionAudioNormalizationSettings.
        :rtype: AudioNormalizationAlgorithmControl
        """
        return self._algorithm_control

    @algorithm_control.setter
    def algorithm_control(self, algorithm_control):
        """Sets the algorithm_control of this AudioDescriptionAudioNormalizationSettings.


        :param algorithm_control: The algorithm_control of this AudioDescriptionAudioNormalizationSettings.
        :type algorithm_control: AudioNormalizationAlgorithmControl
        """

        self._algorithm_control = algorithm_control

    @property
    def correction_gate_level(self):
        """Gets the correction_gate_level of this AudioDescriptionAudioNormalizationSettings.


        :return: The correction_gate_level of this AudioDescriptionAudioNormalizationSettings.
        :rtype: int
        """
        return self._correction_gate_level

    @correction_gate_level.setter
    def correction_gate_level(self, correction_gate_level):
        """Sets the correction_gate_level of this AudioDescriptionAudioNormalizationSettings.


        :param correction_gate_level: The correction_gate_level of this AudioDescriptionAudioNormalizationSettings.
        :type correction_gate_level: int
        """

        self._correction_gate_level = correction_gate_level

    @property
    def loudness_logging(self):
        """Gets the loudness_logging of this AudioDescriptionAudioNormalizationSettings.


        :return: The loudness_logging of this AudioDescriptionAudioNormalizationSettings.
        :rtype: AudioNormalizationLoudnessLogging
        """
        return self._loudness_logging

    @loudness_logging.setter
    def loudness_logging(self, loudness_logging):
        """Sets the loudness_logging of this AudioDescriptionAudioNormalizationSettings.


        :param loudness_logging: The loudness_logging of this AudioDescriptionAudioNormalizationSettings.
        :type loudness_logging: AudioNormalizationLoudnessLogging
        """

        self._loudness_logging = loudness_logging

    @property
    def peak_calculation(self):
        """Gets the peak_calculation of this AudioDescriptionAudioNormalizationSettings.


        :return: The peak_calculation of this AudioDescriptionAudioNormalizationSettings.
        :rtype: AudioNormalizationPeakCalculation
        """
        return self._peak_calculation

    @peak_calculation.setter
    def peak_calculation(self, peak_calculation):
        """Sets the peak_calculation of this AudioDescriptionAudioNormalizationSettings.


        :param peak_calculation: The peak_calculation of this AudioDescriptionAudioNormalizationSettings.
        :type peak_calculation: AudioNormalizationPeakCalculation
        """

        self._peak_calculation = peak_calculation

    @property
    def target_lkfs(self):
        """Gets the target_lkfs of this AudioDescriptionAudioNormalizationSettings.


        :return: The target_lkfs of this AudioDescriptionAudioNormalizationSettings.
        :rtype: float
        """
        return self._target_lkfs

    @target_lkfs.setter
    def target_lkfs(self, target_lkfs):
        """Sets the target_lkfs of this AudioDescriptionAudioNormalizationSettings.


        :param target_lkfs: The target_lkfs of this AudioDescriptionAudioNormalizationSettings.
        :type target_lkfs: float
        """

        self._target_lkfs = target_lkfs

    @property
    def true_peak_limiter_threshold(self):
        """Gets the true_peak_limiter_threshold of this AudioDescriptionAudioNormalizationSettings.


        :return: The true_peak_limiter_threshold of this AudioDescriptionAudioNormalizationSettings.
        :rtype: float
        """
        return self._true_peak_limiter_threshold

    @true_peak_limiter_threshold.setter
    def true_peak_limiter_threshold(self, true_peak_limiter_threshold):
        """Sets the true_peak_limiter_threshold of this AudioDescriptionAudioNormalizationSettings.


        :param true_peak_limiter_threshold: The true_peak_limiter_threshold of this AudioDescriptionAudioNormalizationSettings.
        :type true_peak_limiter_threshold: float
        """

        self._true_peak_limiter_threshold = true_peak_limiter_threshold
