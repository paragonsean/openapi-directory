# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vp8_framerate_control import Vp8FramerateControl
from openapi_server.models.vp8_framerate_conversion_algorithm import Vp8FramerateConversionAlgorithm
from openapi_server.models.vp8_par_control import Vp8ParControl
from openapi_server.models.vp8_quality_tuning_level import Vp8QualityTuningLevel
from openapi_server.models.vp8_rate_control_mode import Vp8RateControlMode
from openapi_server import util


class Vp8Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitrate: int=None, framerate_control: Vp8FramerateControl=None, framerate_conversion_algorithm: Vp8FramerateConversionAlgorithm=None, framerate_denominator: int=None, framerate_numerator: int=None, gop_size: float=None, hrd_buffer_size: int=None, max_bitrate: int=None, par_control: Vp8ParControl=None, par_denominator: int=None, par_numerator: int=None, quality_tuning_level: Vp8QualityTuningLevel=None, rate_control_mode: Vp8RateControlMode=None):
        """Vp8Settings - a model defined in OpenAPI

        :param bitrate: The bitrate of this Vp8Settings.
        :param framerate_control: The framerate_control of this Vp8Settings.
        :param framerate_conversion_algorithm: The framerate_conversion_algorithm of this Vp8Settings.
        :param framerate_denominator: The framerate_denominator of this Vp8Settings.
        :param framerate_numerator: The framerate_numerator of this Vp8Settings.
        :param gop_size: The gop_size of this Vp8Settings.
        :param hrd_buffer_size: The hrd_buffer_size of this Vp8Settings.
        :param max_bitrate: The max_bitrate of this Vp8Settings.
        :param par_control: The par_control of this Vp8Settings.
        :param par_denominator: The par_denominator of this Vp8Settings.
        :param par_numerator: The par_numerator of this Vp8Settings.
        :param quality_tuning_level: The quality_tuning_level of this Vp8Settings.
        :param rate_control_mode: The rate_control_mode of this Vp8Settings.
        """
        self.openapi_types = {
            'bitrate': int,
            'framerate_control': Vp8FramerateControl,
            'framerate_conversion_algorithm': Vp8FramerateConversionAlgorithm,
            'framerate_denominator': int,
            'framerate_numerator': int,
            'gop_size': float,
            'hrd_buffer_size': int,
            'max_bitrate': int,
            'par_control': Vp8ParControl,
            'par_denominator': int,
            'par_numerator': int,
            'quality_tuning_level': Vp8QualityTuningLevel,
            'rate_control_mode': Vp8RateControlMode
        }

        self.attribute_map = {
            'bitrate': 'Bitrate',
            'framerate_control': 'FramerateControl',
            'framerate_conversion_algorithm': 'FramerateConversionAlgorithm',
            'framerate_denominator': 'FramerateDenominator',
            'framerate_numerator': 'FramerateNumerator',
            'gop_size': 'GopSize',
            'hrd_buffer_size': 'HrdBufferSize',
            'max_bitrate': 'MaxBitrate',
            'par_control': 'ParControl',
            'par_denominator': 'ParDenominator',
            'par_numerator': 'ParNumerator',
            'quality_tuning_level': 'QualityTuningLevel',
            'rate_control_mode': 'RateControlMode'
        }

        self._bitrate = bitrate
        self._framerate_control = framerate_control
        self._framerate_conversion_algorithm = framerate_conversion_algorithm
        self._framerate_denominator = framerate_denominator
        self._framerate_numerator = framerate_numerator
        self._gop_size = gop_size
        self._hrd_buffer_size = hrd_buffer_size
        self._max_bitrate = max_bitrate
        self._par_control = par_control
        self._par_denominator = par_denominator
        self._par_numerator = par_numerator
        self._quality_tuning_level = quality_tuning_level
        self._rate_control_mode = rate_control_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vp8Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vp8Settings of this Vp8Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitrate(self):
        """Gets the bitrate of this Vp8Settings.


        :return: The bitrate of this Vp8Settings.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this Vp8Settings.


        :param bitrate: The bitrate of this Vp8Settings.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def framerate_control(self):
        """Gets the framerate_control of this Vp8Settings.


        :return: The framerate_control of this Vp8Settings.
        :rtype: Vp8FramerateControl
        """
        return self._framerate_control

    @framerate_control.setter
    def framerate_control(self, framerate_control):
        """Sets the framerate_control of this Vp8Settings.


        :param framerate_control: The framerate_control of this Vp8Settings.
        :type framerate_control: Vp8FramerateControl
        """

        self._framerate_control = framerate_control

    @property
    def framerate_conversion_algorithm(self):
        """Gets the framerate_conversion_algorithm of this Vp8Settings.


        :return: The framerate_conversion_algorithm of this Vp8Settings.
        :rtype: Vp8FramerateConversionAlgorithm
        """
        return self._framerate_conversion_algorithm

    @framerate_conversion_algorithm.setter
    def framerate_conversion_algorithm(self, framerate_conversion_algorithm):
        """Sets the framerate_conversion_algorithm of this Vp8Settings.


        :param framerate_conversion_algorithm: The framerate_conversion_algorithm of this Vp8Settings.
        :type framerate_conversion_algorithm: Vp8FramerateConversionAlgorithm
        """

        self._framerate_conversion_algorithm = framerate_conversion_algorithm

    @property
    def framerate_denominator(self):
        """Gets the framerate_denominator of this Vp8Settings.


        :return: The framerate_denominator of this Vp8Settings.
        :rtype: int
        """
        return self._framerate_denominator

    @framerate_denominator.setter
    def framerate_denominator(self, framerate_denominator):
        """Sets the framerate_denominator of this Vp8Settings.


        :param framerate_denominator: The framerate_denominator of this Vp8Settings.
        :type framerate_denominator: int
        """

        self._framerate_denominator = framerate_denominator

    @property
    def framerate_numerator(self):
        """Gets the framerate_numerator of this Vp8Settings.


        :return: The framerate_numerator of this Vp8Settings.
        :rtype: int
        """
        return self._framerate_numerator

    @framerate_numerator.setter
    def framerate_numerator(self, framerate_numerator):
        """Sets the framerate_numerator of this Vp8Settings.


        :param framerate_numerator: The framerate_numerator of this Vp8Settings.
        :type framerate_numerator: int
        """

        self._framerate_numerator = framerate_numerator

    @property
    def gop_size(self):
        """Gets the gop_size of this Vp8Settings.


        :return: The gop_size of this Vp8Settings.
        :rtype: float
        """
        return self._gop_size

    @gop_size.setter
    def gop_size(self, gop_size):
        """Sets the gop_size of this Vp8Settings.


        :param gop_size: The gop_size of this Vp8Settings.
        :type gop_size: float
        """

        self._gop_size = gop_size

    @property
    def hrd_buffer_size(self):
        """Gets the hrd_buffer_size of this Vp8Settings.


        :return: The hrd_buffer_size of this Vp8Settings.
        :rtype: int
        """
        return self._hrd_buffer_size

    @hrd_buffer_size.setter
    def hrd_buffer_size(self, hrd_buffer_size):
        """Sets the hrd_buffer_size of this Vp8Settings.


        :param hrd_buffer_size: The hrd_buffer_size of this Vp8Settings.
        :type hrd_buffer_size: int
        """

        self._hrd_buffer_size = hrd_buffer_size

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this Vp8Settings.


        :return: The max_bitrate of this Vp8Settings.
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this Vp8Settings.


        :param max_bitrate: The max_bitrate of this Vp8Settings.
        :type max_bitrate: int
        """

        self._max_bitrate = max_bitrate

    @property
    def par_control(self):
        """Gets the par_control of this Vp8Settings.


        :return: The par_control of this Vp8Settings.
        :rtype: Vp8ParControl
        """
        return self._par_control

    @par_control.setter
    def par_control(self, par_control):
        """Sets the par_control of this Vp8Settings.


        :param par_control: The par_control of this Vp8Settings.
        :type par_control: Vp8ParControl
        """

        self._par_control = par_control

    @property
    def par_denominator(self):
        """Gets the par_denominator of this Vp8Settings.


        :return: The par_denominator of this Vp8Settings.
        :rtype: int
        """
        return self._par_denominator

    @par_denominator.setter
    def par_denominator(self, par_denominator):
        """Sets the par_denominator of this Vp8Settings.


        :param par_denominator: The par_denominator of this Vp8Settings.
        :type par_denominator: int
        """

        self._par_denominator = par_denominator

    @property
    def par_numerator(self):
        """Gets the par_numerator of this Vp8Settings.


        :return: The par_numerator of this Vp8Settings.
        :rtype: int
        """
        return self._par_numerator

    @par_numerator.setter
    def par_numerator(self, par_numerator):
        """Sets the par_numerator of this Vp8Settings.


        :param par_numerator: The par_numerator of this Vp8Settings.
        :type par_numerator: int
        """

        self._par_numerator = par_numerator

    @property
    def quality_tuning_level(self):
        """Gets the quality_tuning_level of this Vp8Settings.


        :return: The quality_tuning_level of this Vp8Settings.
        :rtype: Vp8QualityTuningLevel
        """
        return self._quality_tuning_level

    @quality_tuning_level.setter
    def quality_tuning_level(self, quality_tuning_level):
        """Sets the quality_tuning_level of this Vp8Settings.


        :param quality_tuning_level: The quality_tuning_level of this Vp8Settings.
        :type quality_tuning_level: Vp8QualityTuningLevel
        """

        self._quality_tuning_level = quality_tuning_level

    @property
    def rate_control_mode(self):
        """Gets the rate_control_mode of this Vp8Settings.


        :return: The rate_control_mode of this Vp8Settings.
        :rtype: Vp8RateControlMode
        """
        return self._rate_control_mode

    @rate_control_mode.setter
    def rate_control_mode(self, rate_control_mode):
        """Sets the rate_control_mode of this Vp8Settings.


        :param rate_control_mode: The rate_control_mode of this Vp8Settings.
        :type rate_control_mode: Vp8RateControlMode
        """

        self._rate_control_mode = rate_control_mode
