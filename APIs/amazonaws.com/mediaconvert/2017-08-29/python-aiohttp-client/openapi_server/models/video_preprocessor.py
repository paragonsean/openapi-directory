# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_preprocessor_color_corrector import VideoPreprocessorColorCorrector
from openapi_server.models.video_preprocessor_deinterlacer import VideoPreprocessorDeinterlacer
from openapi_server.models.video_preprocessor_dolby_vision import VideoPreprocessorDolbyVision
from openapi_server.models.video_preprocessor_hdr10_plus import VideoPreprocessorHdr10Plus
from openapi_server.models.video_preprocessor_image_inserter import VideoPreprocessorImageInserter
from openapi_server.models.video_preprocessor_noise_reducer import VideoPreprocessorNoiseReducer
from openapi_server.models.video_preprocessor_partner_watermarking import VideoPreprocessorPartnerWatermarking
from openapi_server.models.video_preprocessor_timecode_burnin import VideoPreprocessorTimecodeBurnin
from openapi_server import util


class VideoPreprocessor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_corrector: VideoPreprocessorColorCorrector=None, deinterlacer: VideoPreprocessorDeinterlacer=None, dolby_vision: VideoPreprocessorDolbyVision=None, hdr10_plus: VideoPreprocessorHdr10Plus=None, image_inserter: VideoPreprocessorImageInserter=None, noise_reducer: VideoPreprocessorNoiseReducer=None, partner_watermarking: VideoPreprocessorPartnerWatermarking=None, timecode_burnin: VideoPreprocessorTimecodeBurnin=None):
        """VideoPreprocessor - a model defined in OpenAPI

        :param color_corrector: The color_corrector of this VideoPreprocessor.
        :param deinterlacer: The deinterlacer of this VideoPreprocessor.
        :param dolby_vision: The dolby_vision of this VideoPreprocessor.
        :param hdr10_plus: The hdr10_plus of this VideoPreprocessor.
        :param image_inserter: The image_inserter of this VideoPreprocessor.
        :param noise_reducer: The noise_reducer of this VideoPreprocessor.
        :param partner_watermarking: The partner_watermarking of this VideoPreprocessor.
        :param timecode_burnin: The timecode_burnin of this VideoPreprocessor.
        """
        self.openapi_types = {
            'color_corrector': VideoPreprocessorColorCorrector,
            'deinterlacer': VideoPreprocessorDeinterlacer,
            'dolby_vision': VideoPreprocessorDolbyVision,
            'hdr10_plus': VideoPreprocessorHdr10Plus,
            'image_inserter': VideoPreprocessorImageInserter,
            'noise_reducer': VideoPreprocessorNoiseReducer,
            'partner_watermarking': VideoPreprocessorPartnerWatermarking,
            'timecode_burnin': VideoPreprocessorTimecodeBurnin
        }

        self.attribute_map = {
            'color_corrector': 'ColorCorrector',
            'deinterlacer': 'Deinterlacer',
            'dolby_vision': 'DolbyVision',
            'hdr10_plus': 'Hdr10Plus',
            'image_inserter': 'ImageInserter',
            'noise_reducer': 'NoiseReducer',
            'partner_watermarking': 'PartnerWatermarking',
            'timecode_burnin': 'TimecodeBurnin'
        }

        self._color_corrector = color_corrector
        self._deinterlacer = deinterlacer
        self._dolby_vision = dolby_vision
        self._hdr10_plus = hdr10_plus
        self._image_inserter = image_inserter
        self._noise_reducer = noise_reducer
        self._partner_watermarking = partner_watermarking
        self._timecode_burnin = timecode_burnin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoPreprocessor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoPreprocessor of this VideoPreprocessor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_corrector(self):
        """Gets the color_corrector of this VideoPreprocessor.


        :return: The color_corrector of this VideoPreprocessor.
        :rtype: VideoPreprocessorColorCorrector
        """
        return self._color_corrector

    @color_corrector.setter
    def color_corrector(self, color_corrector):
        """Sets the color_corrector of this VideoPreprocessor.


        :param color_corrector: The color_corrector of this VideoPreprocessor.
        :type color_corrector: VideoPreprocessorColorCorrector
        """

        self._color_corrector = color_corrector

    @property
    def deinterlacer(self):
        """Gets the deinterlacer of this VideoPreprocessor.


        :return: The deinterlacer of this VideoPreprocessor.
        :rtype: VideoPreprocessorDeinterlacer
        """
        return self._deinterlacer

    @deinterlacer.setter
    def deinterlacer(self, deinterlacer):
        """Sets the deinterlacer of this VideoPreprocessor.


        :param deinterlacer: The deinterlacer of this VideoPreprocessor.
        :type deinterlacer: VideoPreprocessorDeinterlacer
        """

        self._deinterlacer = deinterlacer

    @property
    def dolby_vision(self):
        """Gets the dolby_vision of this VideoPreprocessor.


        :return: The dolby_vision of this VideoPreprocessor.
        :rtype: VideoPreprocessorDolbyVision
        """
        return self._dolby_vision

    @dolby_vision.setter
    def dolby_vision(self, dolby_vision):
        """Sets the dolby_vision of this VideoPreprocessor.


        :param dolby_vision: The dolby_vision of this VideoPreprocessor.
        :type dolby_vision: VideoPreprocessorDolbyVision
        """

        self._dolby_vision = dolby_vision

    @property
    def hdr10_plus(self):
        """Gets the hdr10_plus of this VideoPreprocessor.


        :return: The hdr10_plus of this VideoPreprocessor.
        :rtype: VideoPreprocessorHdr10Plus
        """
        return self._hdr10_plus

    @hdr10_plus.setter
    def hdr10_plus(self, hdr10_plus):
        """Sets the hdr10_plus of this VideoPreprocessor.


        :param hdr10_plus: The hdr10_plus of this VideoPreprocessor.
        :type hdr10_plus: VideoPreprocessorHdr10Plus
        """

        self._hdr10_plus = hdr10_plus

    @property
    def image_inserter(self):
        """Gets the image_inserter of this VideoPreprocessor.


        :return: The image_inserter of this VideoPreprocessor.
        :rtype: VideoPreprocessorImageInserter
        """
        return self._image_inserter

    @image_inserter.setter
    def image_inserter(self, image_inserter):
        """Sets the image_inserter of this VideoPreprocessor.


        :param image_inserter: The image_inserter of this VideoPreprocessor.
        :type image_inserter: VideoPreprocessorImageInserter
        """

        self._image_inserter = image_inserter

    @property
    def noise_reducer(self):
        """Gets the noise_reducer of this VideoPreprocessor.


        :return: The noise_reducer of this VideoPreprocessor.
        :rtype: VideoPreprocessorNoiseReducer
        """
        return self._noise_reducer

    @noise_reducer.setter
    def noise_reducer(self, noise_reducer):
        """Sets the noise_reducer of this VideoPreprocessor.


        :param noise_reducer: The noise_reducer of this VideoPreprocessor.
        :type noise_reducer: VideoPreprocessorNoiseReducer
        """

        self._noise_reducer = noise_reducer

    @property
    def partner_watermarking(self):
        """Gets the partner_watermarking of this VideoPreprocessor.


        :return: The partner_watermarking of this VideoPreprocessor.
        :rtype: VideoPreprocessorPartnerWatermarking
        """
        return self._partner_watermarking

    @partner_watermarking.setter
    def partner_watermarking(self, partner_watermarking):
        """Sets the partner_watermarking of this VideoPreprocessor.


        :param partner_watermarking: The partner_watermarking of this VideoPreprocessor.
        :type partner_watermarking: VideoPreprocessorPartnerWatermarking
        """

        self._partner_watermarking = partner_watermarking

    @property
    def timecode_burnin(self):
        """Gets the timecode_burnin of this VideoPreprocessor.


        :return: The timecode_burnin of this VideoPreprocessor.
        :rtype: VideoPreprocessorTimecodeBurnin
        """
        return self._timecode_burnin

    @timecode_burnin.setter
    def timecode_burnin(self, timecode_burnin):
        """Sets the timecode_burnin of this VideoPreprocessor.


        :param timecode_burnin: The timecode_burnin of this VideoPreprocessor.
        :type timecode_burnin: VideoPreprocessorTimecodeBurnin
        """

        self._timecode_burnin = timecode_burnin
