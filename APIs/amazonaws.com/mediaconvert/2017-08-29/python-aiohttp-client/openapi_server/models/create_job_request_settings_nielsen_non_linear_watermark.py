# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nielsen_active_watermark_process_type import NielsenActiveWatermarkProcessType
from openapi_server.models.nielsen_source_watermark_status_type import NielsenSourceWatermarkStatusType
from openapi_server.models.nielsen_unique_tic_per_audio_track_type import NielsenUniqueTicPerAudioTrackType
from openapi_server import util


class CreateJobRequestSettingsNielsenNonLinearWatermark(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_watermark_process: NielsenActiveWatermarkProcessType=None, adi_filename: str=None, asset_id: str=None, asset_name: str=None, cbet_source_id: str=None, episode_id: str=None, metadata_destination: str=None, source_id: int=None, source_watermark_status: NielsenSourceWatermarkStatusType=None, tic_server_url: str=None, unique_tic_per_audio_track: NielsenUniqueTicPerAudioTrackType=None):
        """CreateJobRequestSettingsNielsenNonLinearWatermark - a model defined in OpenAPI

        :param active_watermark_process: The active_watermark_process of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param adi_filename: The adi_filename of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param asset_id: The asset_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param asset_name: The asset_name of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param cbet_source_id: The cbet_source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param episode_id: The episode_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param metadata_destination: The metadata_destination of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param source_id: The source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param source_watermark_status: The source_watermark_status of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param tic_server_url: The tic_server_url of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :param unique_tic_per_audio_track: The unique_tic_per_audio_track of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        """
        self.openapi_types = {
            'active_watermark_process': NielsenActiveWatermarkProcessType,
            'adi_filename': str,
            'asset_id': str,
            'asset_name': str,
            'cbet_source_id': str,
            'episode_id': str,
            'metadata_destination': str,
            'source_id': int,
            'source_watermark_status': NielsenSourceWatermarkStatusType,
            'tic_server_url': str,
            'unique_tic_per_audio_track': NielsenUniqueTicPerAudioTrackType
        }

        self.attribute_map = {
            'active_watermark_process': 'ActiveWatermarkProcess',
            'adi_filename': 'AdiFilename',
            'asset_id': 'AssetId',
            'asset_name': 'AssetName',
            'cbet_source_id': 'CbetSourceId',
            'episode_id': 'EpisodeId',
            'metadata_destination': 'MetadataDestination',
            'source_id': 'SourceId',
            'source_watermark_status': 'SourceWatermarkStatus',
            'tic_server_url': 'TicServerUrl',
            'unique_tic_per_audio_track': 'UniqueTicPerAudioTrack'
        }

        self._active_watermark_process = active_watermark_process
        self._adi_filename = adi_filename
        self._asset_id = asset_id
        self._asset_name = asset_name
        self._cbet_source_id = cbet_source_id
        self._episode_id = episode_id
        self._metadata_destination = metadata_destination
        self._source_id = source_id
        self._source_watermark_status = source_watermark_status
        self._tic_server_url = tic_server_url
        self._unique_tic_per_audio_track = unique_tic_per_audio_track

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobRequestSettingsNielsenNonLinearWatermark':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJob_request_settings_NielsenNonLinearWatermark of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_watermark_process(self):
        """Gets the active_watermark_process of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The active_watermark_process of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: NielsenActiveWatermarkProcessType
        """
        return self._active_watermark_process

    @active_watermark_process.setter
    def active_watermark_process(self, active_watermark_process):
        """Sets the active_watermark_process of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param active_watermark_process: The active_watermark_process of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type active_watermark_process: NielsenActiveWatermarkProcessType
        """

        self._active_watermark_process = active_watermark_process

    @property
    def adi_filename(self):
        """Gets the adi_filename of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The adi_filename of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: str
        """
        return self._adi_filename

    @adi_filename.setter
    def adi_filename(self, adi_filename):
        """Sets the adi_filename of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param adi_filename: The adi_filename of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type adi_filename: str
        """

        self._adi_filename = adi_filename

    @property
    def asset_id(self):
        """Gets the asset_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The asset_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param asset_id: The asset_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def asset_name(self):
        """Gets the asset_name of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The asset_name of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param asset_name: The asset_name of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type asset_name: str
        """

        self._asset_name = asset_name

    @property
    def cbet_source_id(self):
        """Gets the cbet_source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The cbet_source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: str
        """
        return self._cbet_source_id

    @cbet_source_id.setter
    def cbet_source_id(self, cbet_source_id):
        """Sets the cbet_source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param cbet_source_id: The cbet_source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type cbet_source_id: str
        """

        self._cbet_source_id = cbet_source_id

    @property
    def episode_id(self):
        """Gets the episode_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The episode_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: str
        """
        return self._episode_id

    @episode_id.setter
    def episode_id(self, episode_id):
        """Sets the episode_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param episode_id: The episode_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type episode_id: str
        """

        self._episode_id = episode_id

    @property
    def metadata_destination(self):
        """Gets the metadata_destination of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The metadata_destination of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: str
        """
        return self._metadata_destination

    @metadata_destination.setter
    def metadata_destination(self, metadata_destination):
        """Sets the metadata_destination of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param metadata_destination: The metadata_destination of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type metadata_destination: str
        """

        self._metadata_destination = metadata_destination

    @property
    def source_id(self):
        """Gets the source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param source_id: The source_id of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type source_id: int
        """

        self._source_id = source_id

    @property
    def source_watermark_status(self):
        """Gets the source_watermark_status of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The source_watermark_status of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: NielsenSourceWatermarkStatusType
        """
        return self._source_watermark_status

    @source_watermark_status.setter
    def source_watermark_status(self, source_watermark_status):
        """Sets the source_watermark_status of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param source_watermark_status: The source_watermark_status of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type source_watermark_status: NielsenSourceWatermarkStatusType
        """

        self._source_watermark_status = source_watermark_status

    @property
    def tic_server_url(self):
        """Gets the tic_server_url of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The tic_server_url of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: str
        """
        return self._tic_server_url

    @tic_server_url.setter
    def tic_server_url(self, tic_server_url):
        """Sets the tic_server_url of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param tic_server_url: The tic_server_url of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type tic_server_url: str
        """

        self._tic_server_url = tic_server_url

    @property
    def unique_tic_per_audio_track(self):
        """Gets the unique_tic_per_audio_track of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :return: The unique_tic_per_audio_track of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :rtype: NielsenUniqueTicPerAudioTrackType
        """
        return self._unique_tic_per_audio_track

    @unique_tic_per_audio_track.setter
    def unique_tic_per_audio_track(self, unique_tic_per_audio_track):
        """Sets the unique_tic_per_audio_track of this CreateJobRequestSettingsNielsenNonLinearWatermark.


        :param unique_tic_per_audio_track: The unique_tic_per_audio_track of this CreateJobRequestSettingsNielsenNonLinearWatermark.
        :type unique_tic_per_audio_track: NielsenUniqueTicPerAudioTrackType
        """

        self._unique_tic_per_audio_track = unique_tic_per_audio_track
