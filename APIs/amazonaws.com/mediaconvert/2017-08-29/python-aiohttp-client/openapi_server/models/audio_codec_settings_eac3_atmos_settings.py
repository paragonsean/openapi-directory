# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eac3_atmos_bitstream_mode import Eac3AtmosBitstreamMode
from openapi_server.models.eac3_atmos_coding_mode import Eac3AtmosCodingMode
from openapi_server.models.eac3_atmos_dialogue_intelligence import Eac3AtmosDialogueIntelligence
from openapi_server.models.eac3_atmos_downmix_control import Eac3AtmosDownmixControl
from openapi_server.models.eac3_atmos_dynamic_range_compression_line import Eac3AtmosDynamicRangeCompressionLine
from openapi_server.models.eac3_atmos_dynamic_range_compression_rf import Eac3AtmosDynamicRangeCompressionRf
from openapi_server.models.eac3_atmos_dynamic_range_control import Eac3AtmosDynamicRangeControl
from openapi_server.models.eac3_atmos_metering_mode import Eac3AtmosMeteringMode
from openapi_server.models.eac3_atmos_stereo_downmix import Eac3AtmosStereoDownmix
from openapi_server.models.eac3_atmos_surround_ex_mode import Eac3AtmosSurroundExMode
from openapi_server import util


class AudioCodecSettingsEac3AtmosSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitrate: int=None, bitstream_mode: Eac3AtmosBitstreamMode=None, coding_mode: Eac3AtmosCodingMode=None, dialogue_intelligence: Eac3AtmosDialogueIntelligence=None, downmix_control: Eac3AtmosDownmixControl=None, dynamic_range_compression_line: Eac3AtmosDynamicRangeCompressionLine=None, dynamic_range_compression_rf: Eac3AtmosDynamicRangeCompressionRf=None, dynamic_range_control: Eac3AtmosDynamicRangeControl=None, lo_ro_center_mix_level: float=None, lo_ro_surround_mix_level: float=None, lt_rt_center_mix_level: float=None, lt_rt_surround_mix_level: float=None, metering_mode: Eac3AtmosMeteringMode=None, sample_rate: int=None, speech_threshold: int=None, stereo_downmix: Eac3AtmosStereoDownmix=None, surround_ex_mode: Eac3AtmosSurroundExMode=None):
        """AudioCodecSettingsEac3AtmosSettings - a model defined in OpenAPI

        :param bitrate: The bitrate of this AudioCodecSettingsEac3AtmosSettings.
        :param bitstream_mode: The bitstream_mode of this AudioCodecSettingsEac3AtmosSettings.
        :param coding_mode: The coding_mode of this AudioCodecSettingsEac3AtmosSettings.
        :param dialogue_intelligence: The dialogue_intelligence of this AudioCodecSettingsEac3AtmosSettings.
        :param downmix_control: The downmix_control of this AudioCodecSettingsEac3AtmosSettings.
        :param dynamic_range_compression_line: The dynamic_range_compression_line of this AudioCodecSettingsEac3AtmosSettings.
        :param dynamic_range_compression_rf: The dynamic_range_compression_rf of this AudioCodecSettingsEac3AtmosSettings.
        :param dynamic_range_control: The dynamic_range_control of this AudioCodecSettingsEac3AtmosSettings.
        :param lo_ro_center_mix_level: The lo_ro_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :param lo_ro_surround_mix_level: The lo_ro_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :param lt_rt_center_mix_level: The lt_rt_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :param lt_rt_surround_mix_level: The lt_rt_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :param metering_mode: The metering_mode of this AudioCodecSettingsEac3AtmosSettings.
        :param sample_rate: The sample_rate of this AudioCodecSettingsEac3AtmosSettings.
        :param speech_threshold: The speech_threshold of this AudioCodecSettingsEac3AtmosSettings.
        :param stereo_downmix: The stereo_downmix of this AudioCodecSettingsEac3AtmosSettings.
        :param surround_ex_mode: The surround_ex_mode of this AudioCodecSettingsEac3AtmosSettings.
        """
        self.openapi_types = {
            'bitrate': int,
            'bitstream_mode': Eac3AtmosBitstreamMode,
            'coding_mode': Eac3AtmosCodingMode,
            'dialogue_intelligence': Eac3AtmosDialogueIntelligence,
            'downmix_control': Eac3AtmosDownmixControl,
            'dynamic_range_compression_line': Eac3AtmosDynamicRangeCompressionLine,
            'dynamic_range_compression_rf': Eac3AtmosDynamicRangeCompressionRf,
            'dynamic_range_control': Eac3AtmosDynamicRangeControl,
            'lo_ro_center_mix_level': float,
            'lo_ro_surround_mix_level': float,
            'lt_rt_center_mix_level': float,
            'lt_rt_surround_mix_level': float,
            'metering_mode': Eac3AtmosMeteringMode,
            'sample_rate': int,
            'speech_threshold': int,
            'stereo_downmix': Eac3AtmosStereoDownmix,
            'surround_ex_mode': Eac3AtmosSurroundExMode
        }

        self.attribute_map = {
            'bitrate': 'Bitrate',
            'bitstream_mode': 'BitstreamMode',
            'coding_mode': 'CodingMode',
            'dialogue_intelligence': 'DialogueIntelligence',
            'downmix_control': 'DownmixControl',
            'dynamic_range_compression_line': 'DynamicRangeCompressionLine',
            'dynamic_range_compression_rf': 'DynamicRangeCompressionRf',
            'dynamic_range_control': 'DynamicRangeControl',
            'lo_ro_center_mix_level': 'LoRoCenterMixLevel',
            'lo_ro_surround_mix_level': 'LoRoSurroundMixLevel',
            'lt_rt_center_mix_level': 'LtRtCenterMixLevel',
            'lt_rt_surround_mix_level': 'LtRtSurroundMixLevel',
            'metering_mode': 'MeteringMode',
            'sample_rate': 'SampleRate',
            'speech_threshold': 'SpeechThreshold',
            'stereo_downmix': 'StereoDownmix',
            'surround_ex_mode': 'SurroundExMode'
        }

        self._bitrate = bitrate
        self._bitstream_mode = bitstream_mode
        self._coding_mode = coding_mode
        self._dialogue_intelligence = dialogue_intelligence
        self._downmix_control = downmix_control
        self._dynamic_range_compression_line = dynamic_range_compression_line
        self._dynamic_range_compression_rf = dynamic_range_compression_rf
        self._dynamic_range_control = dynamic_range_control
        self._lo_ro_center_mix_level = lo_ro_center_mix_level
        self._lo_ro_surround_mix_level = lo_ro_surround_mix_level
        self._lt_rt_center_mix_level = lt_rt_center_mix_level
        self._lt_rt_surround_mix_level = lt_rt_surround_mix_level
        self._metering_mode = metering_mode
        self._sample_rate = sample_rate
        self._speech_threshold = speech_threshold
        self._stereo_downmix = stereo_downmix
        self._surround_ex_mode = surround_ex_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioCodecSettingsEac3AtmosSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioCodecSettings_Eac3AtmosSettings of this AudioCodecSettingsEac3AtmosSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitrate(self):
        """Gets the bitrate of this AudioCodecSettingsEac3AtmosSettings.


        :return: The bitrate of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this AudioCodecSettingsEac3AtmosSettings.


        :param bitrate: The bitrate of this AudioCodecSettingsEac3AtmosSettings.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def bitstream_mode(self):
        """Gets the bitstream_mode of this AudioCodecSettingsEac3AtmosSettings.


        :return: The bitstream_mode of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosBitstreamMode
        """
        return self._bitstream_mode

    @bitstream_mode.setter
    def bitstream_mode(self, bitstream_mode):
        """Sets the bitstream_mode of this AudioCodecSettingsEac3AtmosSettings.


        :param bitstream_mode: The bitstream_mode of this AudioCodecSettingsEac3AtmosSettings.
        :type bitstream_mode: Eac3AtmosBitstreamMode
        """

        self._bitstream_mode = bitstream_mode

    @property
    def coding_mode(self):
        """Gets the coding_mode of this AudioCodecSettingsEac3AtmosSettings.


        :return: The coding_mode of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosCodingMode
        """
        return self._coding_mode

    @coding_mode.setter
    def coding_mode(self, coding_mode):
        """Sets the coding_mode of this AudioCodecSettingsEac3AtmosSettings.


        :param coding_mode: The coding_mode of this AudioCodecSettingsEac3AtmosSettings.
        :type coding_mode: Eac3AtmosCodingMode
        """

        self._coding_mode = coding_mode

    @property
    def dialogue_intelligence(self):
        """Gets the dialogue_intelligence of this AudioCodecSettingsEac3AtmosSettings.


        :return: The dialogue_intelligence of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosDialogueIntelligence
        """
        return self._dialogue_intelligence

    @dialogue_intelligence.setter
    def dialogue_intelligence(self, dialogue_intelligence):
        """Sets the dialogue_intelligence of this AudioCodecSettingsEac3AtmosSettings.


        :param dialogue_intelligence: The dialogue_intelligence of this AudioCodecSettingsEac3AtmosSettings.
        :type dialogue_intelligence: Eac3AtmosDialogueIntelligence
        """

        self._dialogue_intelligence = dialogue_intelligence

    @property
    def downmix_control(self):
        """Gets the downmix_control of this AudioCodecSettingsEac3AtmosSettings.


        :return: The downmix_control of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosDownmixControl
        """
        return self._downmix_control

    @downmix_control.setter
    def downmix_control(self, downmix_control):
        """Sets the downmix_control of this AudioCodecSettingsEac3AtmosSettings.


        :param downmix_control: The downmix_control of this AudioCodecSettingsEac3AtmosSettings.
        :type downmix_control: Eac3AtmosDownmixControl
        """

        self._downmix_control = downmix_control

    @property
    def dynamic_range_compression_line(self):
        """Gets the dynamic_range_compression_line of this AudioCodecSettingsEac3AtmosSettings.


        :return: The dynamic_range_compression_line of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosDynamicRangeCompressionLine
        """
        return self._dynamic_range_compression_line

    @dynamic_range_compression_line.setter
    def dynamic_range_compression_line(self, dynamic_range_compression_line):
        """Sets the dynamic_range_compression_line of this AudioCodecSettingsEac3AtmosSettings.


        :param dynamic_range_compression_line: The dynamic_range_compression_line of this AudioCodecSettingsEac3AtmosSettings.
        :type dynamic_range_compression_line: Eac3AtmosDynamicRangeCompressionLine
        """

        self._dynamic_range_compression_line = dynamic_range_compression_line

    @property
    def dynamic_range_compression_rf(self):
        """Gets the dynamic_range_compression_rf of this AudioCodecSettingsEac3AtmosSettings.


        :return: The dynamic_range_compression_rf of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosDynamicRangeCompressionRf
        """
        return self._dynamic_range_compression_rf

    @dynamic_range_compression_rf.setter
    def dynamic_range_compression_rf(self, dynamic_range_compression_rf):
        """Sets the dynamic_range_compression_rf of this AudioCodecSettingsEac3AtmosSettings.


        :param dynamic_range_compression_rf: The dynamic_range_compression_rf of this AudioCodecSettingsEac3AtmosSettings.
        :type dynamic_range_compression_rf: Eac3AtmosDynamicRangeCompressionRf
        """

        self._dynamic_range_compression_rf = dynamic_range_compression_rf

    @property
    def dynamic_range_control(self):
        """Gets the dynamic_range_control of this AudioCodecSettingsEac3AtmosSettings.


        :return: The dynamic_range_control of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosDynamicRangeControl
        """
        return self._dynamic_range_control

    @dynamic_range_control.setter
    def dynamic_range_control(self, dynamic_range_control):
        """Sets the dynamic_range_control of this AudioCodecSettingsEac3AtmosSettings.


        :param dynamic_range_control: The dynamic_range_control of this AudioCodecSettingsEac3AtmosSettings.
        :type dynamic_range_control: Eac3AtmosDynamicRangeControl
        """

        self._dynamic_range_control = dynamic_range_control

    @property
    def lo_ro_center_mix_level(self):
        """Gets the lo_ro_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.


        :return: The lo_ro_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: float
        """
        return self._lo_ro_center_mix_level

    @lo_ro_center_mix_level.setter
    def lo_ro_center_mix_level(self, lo_ro_center_mix_level):
        """Sets the lo_ro_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.


        :param lo_ro_center_mix_level: The lo_ro_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :type lo_ro_center_mix_level: float
        """

        self._lo_ro_center_mix_level = lo_ro_center_mix_level

    @property
    def lo_ro_surround_mix_level(self):
        """Gets the lo_ro_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.


        :return: The lo_ro_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: float
        """
        return self._lo_ro_surround_mix_level

    @lo_ro_surround_mix_level.setter
    def lo_ro_surround_mix_level(self, lo_ro_surround_mix_level):
        """Sets the lo_ro_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.


        :param lo_ro_surround_mix_level: The lo_ro_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :type lo_ro_surround_mix_level: float
        """

        self._lo_ro_surround_mix_level = lo_ro_surround_mix_level

    @property
    def lt_rt_center_mix_level(self):
        """Gets the lt_rt_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.


        :return: The lt_rt_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: float
        """
        return self._lt_rt_center_mix_level

    @lt_rt_center_mix_level.setter
    def lt_rt_center_mix_level(self, lt_rt_center_mix_level):
        """Sets the lt_rt_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.


        :param lt_rt_center_mix_level: The lt_rt_center_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :type lt_rt_center_mix_level: float
        """

        self._lt_rt_center_mix_level = lt_rt_center_mix_level

    @property
    def lt_rt_surround_mix_level(self):
        """Gets the lt_rt_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.


        :return: The lt_rt_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: float
        """
        return self._lt_rt_surround_mix_level

    @lt_rt_surround_mix_level.setter
    def lt_rt_surround_mix_level(self, lt_rt_surround_mix_level):
        """Sets the lt_rt_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.


        :param lt_rt_surround_mix_level: The lt_rt_surround_mix_level of this AudioCodecSettingsEac3AtmosSettings.
        :type lt_rt_surround_mix_level: float
        """

        self._lt_rt_surround_mix_level = lt_rt_surround_mix_level

    @property
    def metering_mode(self):
        """Gets the metering_mode of this AudioCodecSettingsEac3AtmosSettings.


        :return: The metering_mode of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosMeteringMode
        """
        return self._metering_mode

    @metering_mode.setter
    def metering_mode(self, metering_mode):
        """Sets the metering_mode of this AudioCodecSettingsEac3AtmosSettings.


        :param metering_mode: The metering_mode of this AudioCodecSettingsEac3AtmosSettings.
        :type metering_mode: Eac3AtmosMeteringMode
        """

        self._metering_mode = metering_mode

    @property
    def sample_rate(self):
        """Gets the sample_rate of this AudioCodecSettingsEac3AtmosSettings.


        :return: The sample_rate of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: int
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this AudioCodecSettingsEac3AtmosSettings.


        :param sample_rate: The sample_rate of this AudioCodecSettingsEac3AtmosSettings.
        :type sample_rate: int
        """

        self._sample_rate = sample_rate

    @property
    def speech_threshold(self):
        """Gets the speech_threshold of this AudioCodecSettingsEac3AtmosSettings.


        :return: The speech_threshold of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: int
        """
        return self._speech_threshold

    @speech_threshold.setter
    def speech_threshold(self, speech_threshold):
        """Sets the speech_threshold of this AudioCodecSettingsEac3AtmosSettings.


        :param speech_threshold: The speech_threshold of this AudioCodecSettingsEac3AtmosSettings.
        :type speech_threshold: int
        """

        self._speech_threshold = speech_threshold

    @property
    def stereo_downmix(self):
        """Gets the stereo_downmix of this AudioCodecSettingsEac3AtmosSettings.


        :return: The stereo_downmix of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosStereoDownmix
        """
        return self._stereo_downmix

    @stereo_downmix.setter
    def stereo_downmix(self, stereo_downmix):
        """Sets the stereo_downmix of this AudioCodecSettingsEac3AtmosSettings.


        :param stereo_downmix: The stereo_downmix of this AudioCodecSettingsEac3AtmosSettings.
        :type stereo_downmix: Eac3AtmosStereoDownmix
        """

        self._stereo_downmix = stereo_downmix

    @property
    def surround_ex_mode(self):
        """Gets the surround_ex_mode of this AudioCodecSettingsEac3AtmosSettings.


        :return: The surround_ex_mode of this AudioCodecSettingsEac3AtmosSettings.
        :rtype: Eac3AtmosSurroundExMode
        """
        return self._surround_ex_mode

    @surround_ex_mode.setter
    def surround_ex_mode(self, surround_ex_mode):
        """Sets the surround_ex_mode of this AudioCodecSettingsEac3AtmosSettings.


        :param surround_ex_mode: The surround_ex_mode of this AudioCodecSettingsEac3AtmosSettings.
        :type surround_ex_mode: Eac3AtmosSurroundExMode
        """

        self._surround_ex_mode = surround_ex_mode
