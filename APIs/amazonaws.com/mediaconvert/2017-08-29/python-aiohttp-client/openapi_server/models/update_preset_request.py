# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_preset_request_settings import CreatePresetRequestSettings
from openapi_server import util


class UpdatePresetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, description: str=None, settings: CreatePresetRequestSettings=None):
        """UpdatePresetRequest - a model defined in OpenAPI

        :param category: The category of this UpdatePresetRequest.
        :param description: The description of this UpdatePresetRequest.
        :param settings: The settings of this UpdatePresetRequest.
        """
        self.openapi_types = {
            'category': str,
            'description': str,
            'settings': CreatePresetRequestSettings
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description',
            'settings': 'settings'
        }

        self._category = category
        self._description = description
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePresetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePreset_request of this UpdatePresetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this UpdatePresetRequest.

        The new category for the preset, if you are changing it.

        :return: The category of this UpdatePresetRequest.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UpdatePresetRequest.

        The new category for the preset, if you are changing it.

        :param category: The category of this UpdatePresetRequest.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this UpdatePresetRequest.

        The new description for the preset, if you are changing it.

        :return: The description of this UpdatePresetRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatePresetRequest.

        The new description for the preset, if you are changing it.

        :param description: The description of this UpdatePresetRequest.
        :type description: str
        """

        self._description = description

    @property
    def settings(self):
        """Gets the settings of this UpdatePresetRequest.


        :return: The settings of this UpdatePresetRequest.
        :rtype: CreatePresetRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UpdatePresetRequest.


        :param settings: The settings of this UpdatePresetRequest.
        :type settings: CreatePresetRequestSettings
        """

        self._settings = settings
