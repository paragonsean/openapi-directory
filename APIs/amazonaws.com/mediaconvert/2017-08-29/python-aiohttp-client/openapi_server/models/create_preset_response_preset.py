# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_preset_request_settings import CreatePresetRequestSettings
from openapi_server.models.type import Type
from openapi_server import util


class CreatePresetResponsePreset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, category: str=None, created_at: datetime=None, description: str=None, last_updated: datetime=None, name: str=None, settings: CreatePresetRequestSettings=None, type: Type=None):
        """CreatePresetResponsePreset - a model defined in OpenAPI

        :param arn: The arn of this CreatePresetResponsePreset.
        :param category: The category of this CreatePresetResponsePreset.
        :param created_at: The created_at of this CreatePresetResponsePreset.
        :param description: The description of this CreatePresetResponsePreset.
        :param last_updated: The last_updated of this CreatePresetResponsePreset.
        :param name: The name of this CreatePresetResponsePreset.
        :param settings: The settings of this CreatePresetResponsePreset.
        :param type: The type of this CreatePresetResponsePreset.
        """
        self.openapi_types = {
            'arn': str,
            'category': str,
            'created_at': datetime,
            'description': str,
            'last_updated': datetime,
            'name': str,
            'settings': CreatePresetRequestSettings,
            'type': Type
        }

        self.attribute_map = {
            'arn': 'Arn',
            'category': 'Category',
            'created_at': 'CreatedAt',
            'description': 'Description',
            'last_updated': 'LastUpdated',
            'name': 'Name',
            'settings': 'Settings',
            'type': 'Type'
        }

        self._arn = arn
        self._category = category
        self._created_at = created_at
        self._description = description
        self._last_updated = last_updated
        self._name = name
        self._settings = settings
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePresetResponsePreset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePresetResponse_Preset of this CreatePresetResponsePreset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CreatePresetResponsePreset.


        :return: The arn of this CreatePresetResponsePreset.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreatePresetResponsePreset.


        :param arn: The arn of this CreatePresetResponsePreset.
        :type arn: str
        """

        self._arn = arn

    @property
    def category(self):
        """Gets the category of this CreatePresetResponsePreset.


        :return: The category of this CreatePresetResponsePreset.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CreatePresetResponsePreset.


        :param category: The category of this CreatePresetResponsePreset.
        :type category: str
        """

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this CreatePresetResponsePreset.


        :return: The created_at of this CreatePresetResponsePreset.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreatePresetResponsePreset.


        :param created_at: The created_at of this CreatePresetResponsePreset.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this CreatePresetResponsePreset.


        :return: The description of this CreatePresetResponsePreset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePresetResponsePreset.


        :param description: The description of this CreatePresetResponsePreset.
        :type description: str
        """

        self._description = description

    @property
    def last_updated(self):
        """Gets the last_updated of this CreatePresetResponsePreset.


        :return: The last_updated of this CreatePresetResponsePreset.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CreatePresetResponsePreset.


        :param last_updated: The last_updated of this CreatePresetResponsePreset.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this CreatePresetResponsePreset.


        :return: The name of this CreatePresetResponsePreset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePresetResponsePreset.


        :param name: The name of this CreatePresetResponsePreset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def settings(self):
        """Gets the settings of this CreatePresetResponsePreset.


        :return: The settings of this CreatePresetResponsePreset.
        :rtype: CreatePresetRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreatePresetResponsePreset.


        :param settings: The settings of this CreatePresetResponsePreset.
        :type settings: CreatePresetRequestSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def type(self):
        """Gets the type of this CreatePresetResponsePreset.


        :return: The type of this CreatePresetResponsePreset.
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreatePresetResponsePreset.


        :param type: The type of this CreatePresetResponsePreset.
        :type type: Type
        """

        self._type = type
