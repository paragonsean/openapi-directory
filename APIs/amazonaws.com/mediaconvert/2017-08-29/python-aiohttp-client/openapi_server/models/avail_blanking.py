# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailBlanking(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avail_blanking_image: str=None):
        """AvailBlanking - a model defined in OpenAPI

        :param avail_blanking_image: The avail_blanking_image of this AvailBlanking.
        """
        self.openapi_types = {
            'avail_blanking_image': str
        }

        self.attribute_map = {
            'avail_blanking_image': 'AvailBlankingImage'
        }

        self._avail_blanking_image = avail_blanking_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailBlanking':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailBlanking of this AvailBlanking.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avail_blanking_image(self):
        """Gets the avail_blanking_image of this AvailBlanking.


        :return: The avail_blanking_image of this AvailBlanking.
        :rtype: str
        """
        return self._avail_blanking_image

    @avail_blanking_image.setter
    def avail_blanking_image(self, avail_blanking_image):
        """Sets the avail_blanking_image of this AvailBlanking.


        :param avail_blanking_image: The avail_blanking_image of this AvailBlanking.
        :type avail_blanking_image: str
        """

        self._avail_blanking_image = avail_blanking_image
