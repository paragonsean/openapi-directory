# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_destination_settings_access_control import S3DestinationSettingsAccessControl
from openapi_server.models.s3_destination_settings_encryption import S3DestinationSettingsEncryption
from openapi_server import util


class DestinationSettingsS3Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_control: S3DestinationSettingsAccessControl=None, encryption: S3DestinationSettingsEncryption=None):
        """DestinationSettingsS3Settings - a model defined in OpenAPI

        :param access_control: The access_control of this DestinationSettingsS3Settings.
        :param encryption: The encryption of this DestinationSettingsS3Settings.
        """
        self.openapi_types = {
            'access_control': S3DestinationSettingsAccessControl,
            'encryption': S3DestinationSettingsEncryption
        }

        self.attribute_map = {
            'access_control': 'AccessControl',
            'encryption': 'Encryption'
        }

        self._access_control = access_control
        self._encryption = encryption

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationSettingsS3Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationSettings_S3Settings of this DestinationSettingsS3Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_control(self):
        """Gets the access_control of this DestinationSettingsS3Settings.


        :return: The access_control of this DestinationSettingsS3Settings.
        :rtype: S3DestinationSettingsAccessControl
        """
        return self._access_control

    @access_control.setter
    def access_control(self, access_control):
        """Sets the access_control of this DestinationSettingsS3Settings.


        :param access_control: The access_control of this DestinationSettingsS3Settings.
        :type access_control: S3DestinationSettingsAccessControl
        """

        self._access_control = access_control

    @property
    def encryption(self):
        """Gets the encryption of this DestinationSettingsS3Settings.


        :return: The encryption of this DestinationSettingsS3Settings.
        :rtype: S3DestinationSettingsEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this DestinationSettingsS3Settings.


        :param encryption: The encryption of this DestinationSettingsS3Settings.
        :type encryption: S3DestinationSettingsEncryption
        """

        self._encryption = encryption
