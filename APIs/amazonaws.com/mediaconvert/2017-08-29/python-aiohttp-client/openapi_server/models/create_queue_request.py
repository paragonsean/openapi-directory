# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_queue_request_reservation_plan_settings import CreateQueueRequestReservationPlanSettings
from openapi_server import util


class CreateQueueRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, pricing_plan: str=None, reservation_plan_settings: CreateQueueRequestReservationPlanSettings=None, status: str=None, tags: Dict[str, str]=None):
        """CreateQueueRequest - a model defined in OpenAPI

        :param description: The description of this CreateQueueRequest.
        :param name: The name of this CreateQueueRequest.
        :param pricing_plan: The pricing_plan of this CreateQueueRequest.
        :param reservation_plan_settings: The reservation_plan_settings of this CreateQueueRequest.
        :param status: The status of this CreateQueueRequest.
        :param tags: The tags of this CreateQueueRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'pricing_plan': str,
            'reservation_plan_settings': CreateQueueRequestReservationPlanSettings,
            'status': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'pricing_plan': 'pricingPlan',
            'reservation_plan_settings': 'reservationPlanSettings',
            'status': 'status',
            'tags': 'tags'
        }

        self._description = description
        self._name = name
        self._pricing_plan = pricing_plan
        self._reservation_plan_settings = reservation_plan_settings
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateQueueRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateQueue_request of this CreateQueueRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateQueueRequest.

        Optional. A description of the queue that you are creating.

        :return: The description of this CreateQueueRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateQueueRequest.

        Optional. A description of the queue that you are creating.

        :param description: The description of this CreateQueueRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateQueueRequest.

        The name of the queue that you are creating.

        :return: The name of this CreateQueueRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateQueueRequest.

        The name of the queue that you are creating.

        :param name: The name of this CreateQueueRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this CreateQueueRequest.

        Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.

        :return: The pricing_plan of this CreateQueueRequest.
        :rtype: str
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this CreateQueueRequest.

        Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.

        :param pricing_plan: The pricing_plan of this CreateQueueRequest.
        :type pricing_plan: str
        """
        allowed_values = ["ON_DEMAND", "RESERVED"]  # noqa: E501
        if pricing_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_plan` ({0}), must be one of {1}"
                .format(pricing_plan, allowed_values)
            )

        self._pricing_plan = pricing_plan

    @property
    def reservation_plan_settings(self):
        """Gets the reservation_plan_settings of this CreateQueueRequest.


        :return: The reservation_plan_settings of this CreateQueueRequest.
        :rtype: CreateQueueRequestReservationPlanSettings
        """
        return self._reservation_plan_settings

    @reservation_plan_settings.setter
    def reservation_plan_settings(self, reservation_plan_settings):
        """Sets the reservation_plan_settings of this CreateQueueRequest.


        :param reservation_plan_settings: The reservation_plan_settings of this CreateQueueRequest.
        :type reservation_plan_settings: CreateQueueRequestReservationPlanSettings
        """

        self._reservation_plan_settings = reservation_plan_settings

    @property
    def status(self):
        """Gets the status of this CreateQueueRequest.

        Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.

        :return: The status of this CreateQueueRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateQueueRequest.

        Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.

        :param status: The status of this CreateQueueRequest.
        :type status: str
        """
        allowed_values = ["ACTIVE", "PAUSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this CreateQueueRequest.

        The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.

        :return: The tags of this CreateQueueRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateQueueRequest.

        The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.

        :param tags: The tags of this CreateQueueRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
