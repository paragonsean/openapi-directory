# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alpha_behavior import AlphaBehavior
from openapi_server.models.color_space import ColorSpace
from openapi_server.models.color_space_usage import ColorSpaceUsage
from openapi_server.models.embedded_timecode_override import EmbeddedTimecodeOverride
from openapi_server.models.input_rotate import InputRotate
from openapi_server.models.input_sample_range import InputSampleRange
from openapi_server.models.pad_video import PadVideo
from openapi_server.models.video_selector_hdr10_metadata import VideoSelectorHdr10Metadata
from openapi_server import util


class VideoSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alpha_behavior: AlphaBehavior=None, color_space: ColorSpace=None, color_space_usage: ColorSpaceUsage=None, embedded_timecode_override: EmbeddedTimecodeOverride=None, hdr10_metadata: VideoSelectorHdr10Metadata=None, pad_video: PadVideo=None, pid: int=None, program_number: int=None, rotate: InputRotate=None, sample_range: InputSampleRange=None):
        """VideoSelector - a model defined in OpenAPI

        :param alpha_behavior: The alpha_behavior of this VideoSelector.
        :param color_space: The color_space of this VideoSelector.
        :param color_space_usage: The color_space_usage of this VideoSelector.
        :param embedded_timecode_override: The embedded_timecode_override of this VideoSelector.
        :param hdr10_metadata: The hdr10_metadata of this VideoSelector.
        :param pad_video: The pad_video of this VideoSelector.
        :param pid: The pid of this VideoSelector.
        :param program_number: The program_number of this VideoSelector.
        :param rotate: The rotate of this VideoSelector.
        :param sample_range: The sample_range of this VideoSelector.
        """
        self.openapi_types = {
            'alpha_behavior': AlphaBehavior,
            'color_space': ColorSpace,
            'color_space_usage': ColorSpaceUsage,
            'embedded_timecode_override': EmbeddedTimecodeOverride,
            'hdr10_metadata': VideoSelectorHdr10Metadata,
            'pad_video': PadVideo,
            'pid': int,
            'program_number': int,
            'rotate': InputRotate,
            'sample_range': InputSampleRange
        }

        self.attribute_map = {
            'alpha_behavior': 'AlphaBehavior',
            'color_space': 'ColorSpace',
            'color_space_usage': 'ColorSpaceUsage',
            'embedded_timecode_override': 'EmbeddedTimecodeOverride',
            'hdr10_metadata': 'Hdr10Metadata',
            'pad_video': 'PadVideo',
            'pid': 'Pid',
            'program_number': 'ProgramNumber',
            'rotate': 'Rotate',
            'sample_range': 'SampleRange'
        }

        self._alpha_behavior = alpha_behavior
        self._color_space = color_space
        self._color_space_usage = color_space_usage
        self._embedded_timecode_override = embedded_timecode_override
        self._hdr10_metadata = hdr10_metadata
        self._pad_video = pad_video
        self._pid = pid
        self._program_number = program_number
        self._rotate = rotate
        self._sample_range = sample_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoSelector of this VideoSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alpha_behavior(self):
        """Gets the alpha_behavior of this VideoSelector.


        :return: The alpha_behavior of this VideoSelector.
        :rtype: AlphaBehavior
        """
        return self._alpha_behavior

    @alpha_behavior.setter
    def alpha_behavior(self, alpha_behavior):
        """Sets the alpha_behavior of this VideoSelector.


        :param alpha_behavior: The alpha_behavior of this VideoSelector.
        :type alpha_behavior: AlphaBehavior
        """

        self._alpha_behavior = alpha_behavior

    @property
    def color_space(self):
        """Gets the color_space of this VideoSelector.


        :return: The color_space of this VideoSelector.
        :rtype: ColorSpace
        """
        return self._color_space

    @color_space.setter
    def color_space(self, color_space):
        """Sets the color_space of this VideoSelector.


        :param color_space: The color_space of this VideoSelector.
        :type color_space: ColorSpace
        """

        self._color_space = color_space

    @property
    def color_space_usage(self):
        """Gets the color_space_usage of this VideoSelector.


        :return: The color_space_usage of this VideoSelector.
        :rtype: ColorSpaceUsage
        """
        return self._color_space_usage

    @color_space_usage.setter
    def color_space_usage(self, color_space_usage):
        """Sets the color_space_usage of this VideoSelector.


        :param color_space_usage: The color_space_usage of this VideoSelector.
        :type color_space_usage: ColorSpaceUsage
        """

        self._color_space_usage = color_space_usage

    @property
    def embedded_timecode_override(self):
        """Gets the embedded_timecode_override of this VideoSelector.


        :return: The embedded_timecode_override of this VideoSelector.
        :rtype: EmbeddedTimecodeOverride
        """
        return self._embedded_timecode_override

    @embedded_timecode_override.setter
    def embedded_timecode_override(self, embedded_timecode_override):
        """Sets the embedded_timecode_override of this VideoSelector.


        :param embedded_timecode_override: The embedded_timecode_override of this VideoSelector.
        :type embedded_timecode_override: EmbeddedTimecodeOverride
        """

        self._embedded_timecode_override = embedded_timecode_override

    @property
    def hdr10_metadata(self):
        """Gets the hdr10_metadata of this VideoSelector.


        :return: The hdr10_metadata of this VideoSelector.
        :rtype: VideoSelectorHdr10Metadata
        """
        return self._hdr10_metadata

    @hdr10_metadata.setter
    def hdr10_metadata(self, hdr10_metadata):
        """Sets the hdr10_metadata of this VideoSelector.


        :param hdr10_metadata: The hdr10_metadata of this VideoSelector.
        :type hdr10_metadata: VideoSelectorHdr10Metadata
        """

        self._hdr10_metadata = hdr10_metadata

    @property
    def pad_video(self):
        """Gets the pad_video of this VideoSelector.


        :return: The pad_video of this VideoSelector.
        :rtype: PadVideo
        """
        return self._pad_video

    @pad_video.setter
    def pad_video(self, pad_video):
        """Sets the pad_video of this VideoSelector.


        :param pad_video: The pad_video of this VideoSelector.
        :type pad_video: PadVideo
        """

        self._pad_video = pad_video

    @property
    def pid(self):
        """Gets the pid of this VideoSelector.


        :return: The pid of this VideoSelector.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this VideoSelector.


        :param pid: The pid of this VideoSelector.
        :type pid: int
        """

        self._pid = pid

    @property
    def program_number(self):
        """Gets the program_number of this VideoSelector.


        :return: The program_number of this VideoSelector.
        :rtype: int
        """
        return self._program_number

    @program_number.setter
    def program_number(self, program_number):
        """Sets the program_number of this VideoSelector.


        :param program_number: The program_number of this VideoSelector.
        :type program_number: int
        """

        self._program_number = program_number

    @property
    def rotate(self):
        """Gets the rotate of this VideoSelector.


        :return: The rotate of this VideoSelector.
        :rtype: InputRotate
        """
        return self._rotate

    @rotate.setter
    def rotate(self, rotate):
        """Sets the rotate of this VideoSelector.


        :param rotate: The rotate of this VideoSelector.
        :type rotate: InputRotate
        """

        self._rotate = rotate

    @property
    def sample_range(self):
        """Gets the sample_range of this VideoSelector.


        :return: The sample_range of this VideoSelector.
        :rtype: InputSampleRange
        """
        return self._sample_range

    @sample_range.setter
    def sample_range(self, sample_range):
        """Sets the sample_range of this VideoSelector.


        :param sample_range: The sample_range of this VideoSelector.
        :type sample_range: InputSampleRange
        """

        self._sample_range = sample_range
