# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hls_interval_cadence import HlsIntervalCadence
from openapi_server import util


class HlsImageBasedTrickPlaySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval_cadence: HlsIntervalCadence=None, thumbnail_height: int=None, thumbnail_interval: float=None, thumbnail_width: int=None, tile_height: int=None, tile_width: int=None):
        """HlsImageBasedTrickPlaySettings - a model defined in OpenAPI

        :param interval_cadence: The interval_cadence of this HlsImageBasedTrickPlaySettings.
        :param thumbnail_height: The thumbnail_height of this HlsImageBasedTrickPlaySettings.
        :param thumbnail_interval: The thumbnail_interval of this HlsImageBasedTrickPlaySettings.
        :param thumbnail_width: The thumbnail_width of this HlsImageBasedTrickPlaySettings.
        :param tile_height: The tile_height of this HlsImageBasedTrickPlaySettings.
        :param tile_width: The tile_width of this HlsImageBasedTrickPlaySettings.
        """
        self.openapi_types = {
            'interval_cadence': HlsIntervalCadence,
            'thumbnail_height': int,
            'thumbnail_interval': float,
            'thumbnail_width': int,
            'tile_height': int,
            'tile_width': int
        }

        self.attribute_map = {
            'interval_cadence': 'IntervalCadence',
            'thumbnail_height': 'ThumbnailHeight',
            'thumbnail_interval': 'ThumbnailInterval',
            'thumbnail_width': 'ThumbnailWidth',
            'tile_height': 'TileHeight',
            'tile_width': 'TileWidth'
        }

        self._interval_cadence = interval_cadence
        self._thumbnail_height = thumbnail_height
        self._thumbnail_interval = thumbnail_interval
        self._thumbnail_width = thumbnail_width
        self._tile_height = tile_height
        self._tile_width = tile_width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HlsImageBasedTrickPlaySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HlsImageBasedTrickPlaySettings of this HlsImageBasedTrickPlaySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval_cadence(self):
        """Gets the interval_cadence of this HlsImageBasedTrickPlaySettings.


        :return: The interval_cadence of this HlsImageBasedTrickPlaySettings.
        :rtype: HlsIntervalCadence
        """
        return self._interval_cadence

    @interval_cadence.setter
    def interval_cadence(self, interval_cadence):
        """Sets the interval_cadence of this HlsImageBasedTrickPlaySettings.


        :param interval_cadence: The interval_cadence of this HlsImageBasedTrickPlaySettings.
        :type interval_cadence: HlsIntervalCadence
        """

        self._interval_cadence = interval_cadence

    @property
    def thumbnail_height(self):
        """Gets the thumbnail_height of this HlsImageBasedTrickPlaySettings.


        :return: The thumbnail_height of this HlsImageBasedTrickPlaySettings.
        :rtype: int
        """
        return self._thumbnail_height

    @thumbnail_height.setter
    def thumbnail_height(self, thumbnail_height):
        """Sets the thumbnail_height of this HlsImageBasedTrickPlaySettings.


        :param thumbnail_height: The thumbnail_height of this HlsImageBasedTrickPlaySettings.
        :type thumbnail_height: int
        """

        self._thumbnail_height = thumbnail_height

    @property
    def thumbnail_interval(self):
        """Gets the thumbnail_interval of this HlsImageBasedTrickPlaySettings.


        :return: The thumbnail_interval of this HlsImageBasedTrickPlaySettings.
        :rtype: float
        """
        return self._thumbnail_interval

    @thumbnail_interval.setter
    def thumbnail_interval(self, thumbnail_interval):
        """Sets the thumbnail_interval of this HlsImageBasedTrickPlaySettings.


        :param thumbnail_interval: The thumbnail_interval of this HlsImageBasedTrickPlaySettings.
        :type thumbnail_interval: float
        """

        self._thumbnail_interval = thumbnail_interval

    @property
    def thumbnail_width(self):
        """Gets the thumbnail_width of this HlsImageBasedTrickPlaySettings.


        :return: The thumbnail_width of this HlsImageBasedTrickPlaySettings.
        :rtype: int
        """
        return self._thumbnail_width

    @thumbnail_width.setter
    def thumbnail_width(self, thumbnail_width):
        """Sets the thumbnail_width of this HlsImageBasedTrickPlaySettings.


        :param thumbnail_width: The thumbnail_width of this HlsImageBasedTrickPlaySettings.
        :type thumbnail_width: int
        """

        self._thumbnail_width = thumbnail_width

    @property
    def tile_height(self):
        """Gets the tile_height of this HlsImageBasedTrickPlaySettings.


        :return: The tile_height of this HlsImageBasedTrickPlaySettings.
        :rtype: int
        """
        return self._tile_height

    @tile_height.setter
    def tile_height(self, tile_height):
        """Sets the tile_height of this HlsImageBasedTrickPlaySettings.


        :param tile_height: The tile_height of this HlsImageBasedTrickPlaySettings.
        :type tile_height: int
        """

        self._tile_height = tile_height

    @property
    def tile_width(self):
        """Gets the tile_width of this HlsImageBasedTrickPlaySettings.


        :return: The tile_width of this HlsImageBasedTrickPlaySettings.
        :rtype: int
        """
        return self._tile_width

    @tile_width.setter
    def tile_width(self, tile_width):
        """Sets the tile_width of this HlsImageBasedTrickPlaySettings.


        :param tile_width: The tile_width of this HlsImageBasedTrickPlaySettings.
        :type tile_width: int
        """

        self._tile_width = tile_width
