# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deinterlace_algorithm import DeinterlaceAlgorithm
from openapi_server.models.deinterlacer_control import DeinterlacerControl
from openapi_server.models.deinterlacer_mode import DeinterlacerMode
from openapi_server import util


class VideoPreprocessorDeinterlacer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: DeinterlaceAlgorithm=None, control: DeinterlacerControl=None, mode: DeinterlacerMode=None):
        """VideoPreprocessorDeinterlacer - a model defined in OpenAPI

        :param algorithm: The algorithm of this VideoPreprocessorDeinterlacer.
        :param control: The control of this VideoPreprocessorDeinterlacer.
        :param mode: The mode of this VideoPreprocessorDeinterlacer.
        """
        self.openapi_types = {
            'algorithm': DeinterlaceAlgorithm,
            'control': DeinterlacerControl,
            'mode': DeinterlacerMode
        }

        self.attribute_map = {
            'algorithm': 'Algorithm',
            'control': 'Control',
            'mode': 'Mode'
        }

        self._algorithm = algorithm
        self._control = control
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoPreprocessorDeinterlacer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoPreprocessor_Deinterlacer of this VideoPreprocessorDeinterlacer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this VideoPreprocessorDeinterlacer.


        :return: The algorithm of this VideoPreprocessorDeinterlacer.
        :rtype: DeinterlaceAlgorithm
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this VideoPreprocessorDeinterlacer.


        :param algorithm: The algorithm of this VideoPreprocessorDeinterlacer.
        :type algorithm: DeinterlaceAlgorithm
        """

        self._algorithm = algorithm

    @property
    def control(self):
        """Gets the control of this VideoPreprocessorDeinterlacer.


        :return: The control of this VideoPreprocessorDeinterlacer.
        :rtype: DeinterlacerControl
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this VideoPreprocessorDeinterlacer.


        :param control: The control of this VideoPreprocessorDeinterlacer.
        :type control: DeinterlacerControl
        """

        self._control = control

    @property
    def mode(self):
        """Gets the mode of this VideoPreprocessorDeinterlacer.


        :return: The mode of this VideoPreprocessorDeinterlacer.
        :rtype: DeinterlacerMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this VideoPreprocessorDeinterlacer.


        :param mode: The mode of this VideoPreprocessorDeinterlacer.
        :type mode: DeinterlacerMode
        """

        self._mode = mode
