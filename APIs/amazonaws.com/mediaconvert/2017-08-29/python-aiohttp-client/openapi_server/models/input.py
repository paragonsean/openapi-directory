# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_input_filter import AdvancedInputFilter
from openapi_server.models.input_advanced_input_filter_settings import InputAdvancedInputFilterSettings
from openapi_server.models.input_crop import InputCrop
from openapi_server.models.input_deblock_filter import InputDeblockFilter
from openapi_server.models.input_decryption_settings import InputDecryptionSettings
from openapi_server.models.input_denoise_filter import InputDenoiseFilter
from openapi_server.models.input_filter_enable import InputFilterEnable
from openapi_server.models.input_image_inserter import InputImageInserter
from openapi_server.models.input_position import InputPosition
from openapi_server.models.input_psi_control import InputPsiControl
from openapi_server.models.input_scan_type import InputScanType
from openapi_server.models.input_timecode_source import InputTimecodeSource
from openapi_server.models.input_video_generator import InputVideoGenerator
from openapi_server.models.input_video_selector import InputVideoSelector
from openapi_server import util


class Input(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_input_filter: AdvancedInputFilter=None, advanced_input_filter_settings: InputAdvancedInputFilterSettings=None, audio_selector_groups: Dict=None, audio_selectors: Dict=None, caption_selectors: Dict=None, crop: InputCrop=None, deblock_filter: InputDeblockFilter=None, decryption_settings: InputDecryptionSettings=None, denoise_filter: InputDenoiseFilter=None, dolby_vision_metadata_xml: str=None, file_input: str=None, filter_enable: InputFilterEnable=None, filter_strength: int=None, image_inserter: InputImageInserter=None, input_clippings: List=None, input_scan_type: InputScanType=None, position: InputPosition=None, program_number: int=None, psi_control: InputPsiControl=None, supplemental_imps: List=None, timecode_source: InputTimecodeSource=None, timecode_start: str=None, video_generator: InputVideoGenerator=None, video_selector: InputVideoSelector=None):
        """Input - a model defined in OpenAPI

        :param advanced_input_filter: The advanced_input_filter of this Input.
        :param advanced_input_filter_settings: The advanced_input_filter_settings of this Input.
        :param audio_selector_groups: The audio_selector_groups of this Input.
        :param audio_selectors: The audio_selectors of this Input.
        :param caption_selectors: The caption_selectors of this Input.
        :param crop: The crop of this Input.
        :param deblock_filter: The deblock_filter of this Input.
        :param decryption_settings: The decryption_settings of this Input.
        :param denoise_filter: The denoise_filter of this Input.
        :param dolby_vision_metadata_xml: The dolby_vision_metadata_xml of this Input.
        :param file_input: The file_input of this Input.
        :param filter_enable: The filter_enable of this Input.
        :param filter_strength: The filter_strength of this Input.
        :param image_inserter: The image_inserter of this Input.
        :param input_clippings: The input_clippings of this Input.
        :param input_scan_type: The input_scan_type of this Input.
        :param position: The position of this Input.
        :param program_number: The program_number of this Input.
        :param psi_control: The psi_control of this Input.
        :param supplemental_imps: The supplemental_imps of this Input.
        :param timecode_source: The timecode_source of this Input.
        :param timecode_start: The timecode_start of this Input.
        :param video_generator: The video_generator of this Input.
        :param video_selector: The video_selector of this Input.
        """
        self.openapi_types = {
            'advanced_input_filter': AdvancedInputFilter,
            'advanced_input_filter_settings': InputAdvancedInputFilterSettings,
            'audio_selector_groups': Dict,
            'audio_selectors': Dict,
            'caption_selectors': Dict,
            'crop': InputCrop,
            'deblock_filter': InputDeblockFilter,
            'decryption_settings': InputDecryptionSettings,
            'denoise_filter': InputDenoiseFilter,
            'dolby_vision_metadata_xml': str,
            'file_input': str,
            'filter_enable': InputFilterEnable,
            'filter_strength': int,
            'image_inserter': InputImageInserter,
            'input_clippings': List,
            'input_scan_type': InputScanType,
            'position': InputPosition,
            'program_number': int,
            'psi_control': InputPsiControl,
            'supplemental_imps': List,
            'timecode_source': InputTimecodeSource,
            'timecode_start': str,
            'video_generator': InputVideoGenerator,
            'video_selector': InputVideoSelector
        }

        self.attribute_map = {
            'advanced_input_filter': 'AdvancedInputFilter',
            'advanced_input_filter_settings': 'AdvancedInputFilterSettings',
            'audio_selector_groups': 'AudioSelectorGroups',
            'audio_selectors': 'AudioSelectors',
            'caption_selectors': 'CaptionSelectors',
            'crop': 'Crop',
            'deblock_filter': 'DeblockFilter',
            'decryption_settings': 'DecryptionSettings',
            'denoise_filter': 'DenoiseFilter',
            'dolby_vision_metadata_xml': 'DolbyVisionMetadataXml',
            'file_input': 'FileInput',
            'filter_enable': 'FilterEnable',
            'filter_strength': 'FilterStrength',
            'image_inserter': 'ImageInserter',
            'input_clippings': 'InputClippings',
            'input_scan_type': 'InputScanType',
            'position': 'Position',
            'program_number': 'ProgramNumber',
            'psi_control': 'PsiControl',
            'supplemental_imps': 'SupplementalImps',
            'timecode_source': 'TimecodeSource',
            'timecode_start': 'TimecodeStart',
            'video_generator': 'VideoGenerator',
            'video_selector': 'VideoSelector'
        }

        self._advanced_input_filter = advanced_input_filter
        self._advanced_input_filter_settings = advanced_input_filter_settings
        self._audio_selector_groups = audio_selector_groups
        self._audio_selectors = audio_selectors
        self._caption_selectors = caption_selectors
        self._crop = crop
        self._deblock_filter = deblock_filter
        self._decryption_settings = decryption_settings
        self._denoise_filter = denoise_filter
        self._dolby_vision_metadata_xml = dolby_vision_metadata_xml
        self._file_input = file_input
        self._filter_enable = filter_enable
        self._filter_strength = filter_strength
        self._image_inserter = image_inserter
        self._input_clippings = input_clippings
        self._input_scan_type = input_scan_type
        self._position = position
        self._program_number = program_number
        self._psi_control = psi_control
        self._supplemental_imps = supplemental_imps
        self._timecode_source = timecode_source
        self._timecode_start = timecode_start
        self._video_generator = video_generator
        self._video_selector = video_selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Input':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Input of this Input.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_input_filter(self):
        """Gets the advanced_input_filter of this Input.


        :return: The advanced_input_filter of this Input.
        :rtype: AdvancedInputFilter
        """
        return self._advanced_input_filter

    @advanced_input_filter.setter
    def advanced_input_filter(self, advanced_input_filter):
        """Sets the advanced_input_filter of this Input.


        :param advanced_input_filter: The advanced_input_filter of this Input.
        :type advanced_input_filter: AdvancedInputFilter
        """

        self._advanced_input_filter = advanced_input_filter

    @property
    def advanced_input_filter_settings(self):
        """Gets the advanced_input_filter_settings of this Input.


        :return: The advanced_input_filter_settings of this Input.
        :rtype: InputAdvancedInputFilterSettings
        """
        return self._advanced_input_filter_settings

    @advanced_input_filter_settings.setter
    def advanced_input_filter_settings(self, advanced_input_filter_settings):
        """Sets the advanced_input_filter_settings of this Input.


        :param advanced_input_filter_settings: The advanced_input_filter_settings of this Input.
        :type advanced_input_filter_settings: InputAdvancedInputFilterSettings
        """

        self._advanced_input_filter_settings = advanced_input_filter_settings

    @property
    def audio_selector_groups(self):
        """Gets the audio_selector_groups of this Input.


        :return: The audio_selector_groups of this Input.
        :rtype: Dict
        """
        return self._audio_selector_groups

    @audio_selector_groups.setter
    def audio_selector_groups(self, audio_selector_groups):
        """Sets the audio_selector_groups of this Input.


        :param audio_selector_groups: The audio_selector_groups of this Input.
        :type audio_selector_groups: Dict
        """

        self._audio_selector_groups = audio_selector_groups

    @property
    def audio_selectors(self):
        """Gets the audio_selectors of this Input.


        :return: The audio_selectors of this Input.
        :rtype: Dict
        """
        return self._audio_selectors

    @audio_selectors.setter
    def audio_selectors(self, audio_selectors):
        """Sets the audio_selectors of this Input.


        :param audio_selectors: The audio_selectors of this Input.
        :type audio_selectors: Dict
        """

        self._audio_selectors = audio_selectors

    @property
    def caption_selectors(self):
        """Gets the caption_selectors of this Input.


        :return: The caption_selectors of this Input.
        :rtype: Dict
        """
        return self._caption_selectors

    @caption_selectors.setter
    def caption_selectors(self, caption_selectors):
        """Sets the caption_selectors of this Input.


        :param caption_selectors: The caption_selectors of this Input.
        :type caption_selectors: Dict
        """

        self._caption_selectors = caption_selectors

    @property
    def crop(self):
        """Gets the crop of this Input.


        :return: The crop of this Input.
        :rtype: InputCrop
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this Input.


        :param crop: The crop of this Input.
        :type crop: InputCrop
        """

        self._crop = crop

    @property
    def deblock_filter(self):
        """Gets the deblock_filter of this Input.


        :return: The deblock_filter of this Input.
        :rtype: InputDeblockFilter
        """
        return self._deblock_filter

    @deblock_filter.setter
    def deblock_filter(self, deblock_filter):
        """Sets the deblock_filter of this Input.


        :param deblock_filter: The deblock_filter of this Input.
        :type deblock_filter: InputDeblockFilter
        """

        self._deblock_filter = deblock_filter

    @property
    def decryption_settings(self):
        """Gets the decryption_settings of this Input.


        :return: The decryption_settings of this Input.
        :rtype: InputDecryptionSettings
        """
        return self._decryption_settings

    @decryption_settings.setter
    def decryption_settings(self, decryption_settings):
        """Sets the decryption_settings of this Input.


        :param decryption_settings: The decryption_settings of this Input.
        :type decryption_settings: InputDecryptionSettings
        """

        self._decryption_settings = decryption_settings

    @property
    def denoise_filter(self):
        """Gets the denoise_filter of this Input.


        :return: The denoise_filter of this Input.
        :rtype: InputDenoiseFilter
        """
        return self._denoise_filter

    @denoise_filter.setter
    def denoise_filter(self, denoise_filter):
        """Sets the denoise_filter of this Input.


        :param denoise_filter: The denoise_filter of this Input.
        :type denoise_filter: InputDenoiseFilter
        """

        self._denoise_filter = denoise_filter

    @property
    def dolby_vision_metadata_xml(self):
        """Gets the dolby_vision_metadata_xml of this Input.


        :return: The dolby_vision_metadata_xml of this Input.
        :rtype: str
        """
        return self._dolby_vision_metadata_xml

    @dolby_vision_metadata_xml.setter
    def dolby_vision_metadata_xml(self, dolby_vision_metadata_xml):
        """Sets the dolby_vision_metadata_xml of this Input.


        :param dolby_vision_metadata_xml: The dolby_vision_metadata_xml of this Input.
        :type dolby_vision_metadata_xml: str
        """

        self._dolby_vision_metadata_xml = dolby_vision_metadata_xml

    @property
    def file_input(self):
        """Gets the file_input of this Input.


        :return: The file_input of this Input.
        :rtype: str
        """
        return self._file_input

    @file_input.setter
    def file_input(self, file_input):
        """Sets the file_input of this Input.


        :param file_input: The file_input of this Input.
        :type file_input: str
        """

        self._file_input = file_input

    @property
    def filter_enable(self):
        """Gets the filter_enable of this Input.


        :return: The filter_enable of this Input.
        :rtype: InputFilterEnable
        """
        return self._filter_enable

    @filter_enable.setter
    def filter_enable(self, filter_enable):
        """Sets the filter_enable of this Input.


        :param filter_enable: The filter_enable of this Input.
        :type filter_enable: InputFilterEnable
        """

        self._filter_enable = filter_enable

    @property
    def filter_strength(self):
        """Gets the filter_strength of this Input.


        :return: The filter_strength of this Input.
        :rtype: int
        """
        return self._filter_strength

    @filter_strength.setter
    def filter_strength(self, filter_strength):
        """Sets the filter_strength of this Input.


        :param filter_strength: The filter_strength of this Input.
        :type filter_strength: int
        """

        self._filter_strength = filter_strength

    @property
    def image_inserter(self):
        """Gets the image_inserter of this Input.


        :return: The image_inserter of this Input.
        :rtype: InputImageInserter
        """
        return self._image_inserter

    @image_inserter.setter
    def image_inserter(self, image_inserter):
        """Sets the image_inserter of this Input.


        :param image_inserter: The image_inserter of this Input.
        :type image_inserter: InputImageInserter
        """

        self._image_inserter = image_inserter

    @property
    def input_clippings(self):
        """Gets the input_clippings of this Input.


        :return: The input_clippings of this Input.
        :rtype: List
        """
        return self._input_clippings

    @input_clippings.setter
    def input_clippings(self, input_clippings):
        """Sets the input_clippings of this Input.


        :param input_clippings: The input_clippings of this Input.
        :type input_clippings: List
        """

        self._input_clippings = input_clippings

    @property
    def input_scan_type(self):
        """Gets the input_scan_type of this Input.


        :return: The input_scan_type of this Input.
        :rtype: InputScanType
        """
        return self._input_scan_type

    @input_scan_type.setter
    def input_scan_type(self, input_scan_type):
        """Sets the input_scan_type of this Input.


        :param input_scan_type: The input_scan_type of this Input.
        :type input_scan_type: InputScanType
        """

        self._input_scan_type = input_scan_type

    @property
    def position(self):
        """Gets the position of this Input.


        :return: The position of this Input.
        :rtype: InputPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Input.


        :param position: The position of this Input.
        :type position: InputPosition
        """

        self._position = position

    @property
    def program_number(self):
        """Gets the program_number of this Input.


        :return: The program_number of this Input.
        :rtype: int
        """
        return self._program_number

    @program_number.setter
    def program_number(self, program_number):
        """Sets the program_number of this Input.


        :param program_number: The program_number of this Input.
        :type program_number: int
        """

        self._program_number = program_number

    @property
    def psi_control(self):
        """Gets the psi_control of this Input.


        :return: The psi_control of this Input.
        :rtype: InputPsiControl
        """
        return self._psi_control

    @psi_control.setter
    def psi_control(self, psi_control):
        """Sets the psi_control of this Input.


        :param psi_control: The psi_control of this Input.
        :type psi_control: InputPsiControl
        """

        self._psi_control = psi_control

    @property
    def supplemental_imps(self):
        """Gets the supplemental_imps of this Input.


        :return: The supplemental_imps of this Input.
        :rtype: List
        """
        return self._supplemental_imps

    @supplemental_imps.setter
    def supplemental_imps(self, supplemental_imps):
        """Sets the supplemental_imps of this Input.


        :param supplemental_imps: The supplemental_imps of this Input.
        :type supplemental_imps: List
        """

        self._supplemental_imps = supplemental_imps

    @property
    def timecode_source(self):
        """Gets the timecode_source of this Input.


        :return: The timecode_source of this Input.
        :rtype: InputTimecodeSource
        """
        return self._timecode_source

    @timecode_source.setter
    def timecode_source(self, timecode_source):
        """Sets the timecode_source of this Input.


        :param timecode_source: The timecode_source of this Input.
        :type timecode_source: InputTimecodeSource
        """

        self._timecode_source = timecode_source

    @property
    def timecode_start(self):
        """Gets the timecode_start of this Input.


        :return: The timecode_start of this Input.
        :rtype: str
        """
        return self._timecode_start

    @timecode_start.setter
    def timecode_start(self, timecode_start):
        """Sets the timecode_start of this Input.


        :param timecode_start: The timecode_start of this Input.
        :type timecode_start: str
        """

        self._timecode_start = timecode_start

    @property
    def video_generator(self):
        """Gets the video_generator of this Input.


        :return: The video_generator of this Input.
        :rtype: InputVideoGenerator
        """
        return self._video_generator

    @video_generator.setter
    def video_generator(self, video_generator):
        """Sets the video_generator of this Input.


        :param video_generator: The video_generator of this Input.
        :type video_generator: InputVideoGenerator
        """

        self._video_generator = video_generator

    @property
    def video_selector(self):
        """Gets the video_selector of this Input.


        :return: The video_selector of this Input.
        :rtype: InputVideoSelector
        """
        return self._video_selector

    @video_selector.setter
    def video_selector(self, video_selector):
        """Sets the video_selector of this Input.


        :param video_selector: The video_selector of this Input.
        :type video_selector: InputVideoSelector
        """

        self._video_selector = video_selector
