# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.h264_settings_bandwidth_reduction_filter import H264SettingsBandwidthReductionFilter
from openapi_server.models.h265_adaptive_quantization import H265AdaptiveQuantization
from openapi_server.models.h265_alternate_transfer_function_sei import H265AlternateTransferFunctionSei
from openapi_server.models.h265_codec_level import H265CodecLevel
from openapi_server.models.h265_codec_profile import H265CodecProfile
from openapi_server.models.h265_dynamic_sub_gop import H265DynamicSubGop
from openapi_server.models.h265_flicker_adaptive_quantization import H265FlickerAdaptiveQuantization
from openapi_server.models.h265_framerate_control import H265FramerateControl
from openapi_server.models.h265_framerate_conversion_algorithm import H265FramerateConversionAlgorithm
from openapi_server.models.h265_gop_b_reference import H265GopBReference
from openapi_server.models.h265_gop_size_units import H265GopSizeUnits
from openapi_server.models.h265_interlace_mode import H265InterlaceMode
from openapi_server.models.h265_par_control import H265ParControl
from openapi_server.models.h265_quality_tuning_level import H265QualityTuningLevel
from openapi_server.models.h265_rate_control_mode import H265RateControlMode
from openapi_server.models.h265_sample_adaptive_offset_filter_mode import H265SampleAdaptiveOffsetFilterMode
from openapi_server.models.h265_scan_type_conversion_mode import H265ScanTypeConversionMode
from openapi_server.models.h265_scene_change_detect import H265SceneChangeDetect
from openapi_server.models.h265_settings_qvbr_settings import H265SettingsQvbrSettings
from openapi_server.models.h265_slow_pal import H265SlowPal
from openapi_server.models.h265_spatial_adaptive_quantization import H265SpatialAdaptiveQuantization
from openapi_server.models.h265_telecine import H265Telecine
from openapi_server.models.h265_temporal_adaptive_quantization import H265TemporalAdaptiveQuantization
from openapi_server.models.h265_temporal_ids import H265TemporalIds
from openapi_server.models.h265_tiles import H265Tiles
from openapi_server.models.h265_unregistered_sei_timecode import H265UnregisteredSeiTimecode
from openapi_server.models.h265_write_mp4_packaging_type import H265WriteMp4PackagingType
from openapi_server import util


class VideoCodecSettingsH265Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adaptive_quantization: H265AdaptiveQuantization=None, alternate_transfer_function_sei: H265AlternateTransferFunctionSei=None, bandwidth_reduction_filter: H264SettingsBandwidthReductionFilter=None, bitrate: int=None, codec_level: H265CodecLevel=None, codec_profile: H265CodecProfile=None, dynamic_sub_gop: H265DynamicSubGop=None, flicker_adaptive_quantization: H265FlickerAdaptiveQuantization=None, framerate_control: H265FramerateControl=None, framerate_conversion_algorithm: H265FramerateConversionAlgorithm=None, framerate_denominator: int=None, framerate_numerator: int=None, gop_b_reference: H265GopBReference=None, gop_closed_cadence: int=None, gop_size: float=None, gop_size_units: H265GopSizeUnits=None, hrd_buffer_final_fill_percentage: int=None, hrd_buffer_initial_fill_percentage: int=None, hrd_buffer_size: int=None, interlace_mode: H265InterlaceMode=None, max_bitrate: int=None, min_i_interval: int=None, number_b_frames_between_reference_frames: int=None, number_reference_frames: int=None, par_control: H265ParControl=None, par_denominator: int=None, par_numerator: int=None, quality_tuning_level: H265QualityTuningLevel=None, qvbr_settings: H265SettingsQvbrSettings=None, rate_control_mode: H265RateControlMode=None, sample_adaptive_offset_filter_mode: H265SampleAdaptiveOffsetFilterMode=None, scan_type_conversion_mode: H265ScanTypeConversionMode=None, scene_change_detect: H265SceneChangeDetect=None, slices: int=None, slow_pal: H265SlowPal=None, spatial_adaptive_quantization: H265SpatialAdaptiveQuantization=None, telecine: H265Telecine=None, temporal_adaptive_quantization: H265TemporalAdaptiveQuantization=None, temporal_ids: H265TemporalIds=None, tiles: H265Tiles=None, unregistered_sei_timecode: H265UnregisteredSeiTimecode=None, write_mp4_packaging_type: H265WriteMp4PackagingType=None):
        """VideoCodecSettingsH265Settings - a model defined in OpenAPI

        :param adaptive_quantization: The adaptive_quantization of this VideoCodecSettingsH265Settings.
        :param alternate_transfer_function_sei: The alternate_transfer_function_sei of this VideoCodecSettingsH265Settings.
        :param bandwidth_reduction_filter: The bandwidth_reduction_filter of this VideoCodecSettingsH265Settings.
        :param bitrate: The bitrate of this VideoCodecSettingsH265Settings.
        :param codec_level: The codec_level of this VideoCodecSettingsH265Settings.
        :param codec_profile: The codec_profile of this VideoCodecSettingsH265Settings.
        :param dynamic_sub_gop: The dynamic_sub_gop of this VideoCodecSettingsH265Settings.
        :param flicker_adaptive_quantization: The flicker_adaptive_quantization of this VideoCodecSettingsH265Settings.
        :param framerate_control: The framerate_control of this VideoCodecSettingsH265Settings.
        :param framerate_conversion_algorithm: The framerate_conversion_algorithm of this VideoCodecSettingsH265Settings.
        :param framerate_denominator: The framerate_denominator of this VideoCodecSettingsH265Settings.
        :param framerate_numerator: The framerate_numerator of this VideoCodecSettingsH265Settings.
        :param gop_b_reference: The gop_b_reference of this VideoCodecSettingsH265Settings.
        :param gop_closed_cadence: The gop_closed_cadence of this VideoCodecSettingsH265Settings.
        :param gop_size: The gop_size of this VideoCodecSettingsH265Settings.
        :param gop_size_units: The gop_size_units of this VideoCodecSettingsH265Settings.
        :param hrd_buffer_final_fill_percentage: The hrd_buffer_final_fill_percentage of this VideoCodecSettingsH265Settings.
        :param hrd_buffer_initial_fill_percentage: The hrd_buffer_initial_fill_percentage of this VideoCodecSettingsH265Settings.
        :param hrd_buffer_size: The hrd_buffer_size of this VideoCodecSettingsH265Settings.
        :param interlace_mode: The interlace_mode of this VideoCodecSettingsH265Settings.
        :param max_bitrate: The max_bitrate of this VideoCodecSettingsH265Settings.
        :param min_i_interval: The min_i_interval of this VideoCodecSettingsH265Settings.
        :param number_b_frames_between_reference_frames: The number_b_frames_between_reference_frames of this VideoCodecSettingsH265Settings.
        :param number_reference_frames: The number_reference_frames of this VideoCodecSettingsH265Settings.
        :param par_control: The par_control of this VideoCodecSettingsH265Settings.
        :param par_denominator: The par_denominator of this VideoCodecSettingsH265Settings.
        :param par_numerator: The par_numerator of this VideoCodecSettingsH265Settings.
        :param quality_tuning_level: The quality_tuning_level of this VideoCodecSettingsH265Settings.
        :param qvbr_settings: The qvbr_settings of this VideoCodecSettingsH265Settings.
        :param rate_control_mode: The rate_control_mode of this VideoCodecSettingsH265Settings.
        :param sample_adaptive_offset_filter_mode: The sample_adaptive_offset_filter_mode of this VideoCodecSettingsH265Settings.
        :param scan_type_conversion_mode: The scan_type_conversion_mode of this VideoCodecSettingsH265Settings.
        :param scene_change_detect: The scene_change_detect of this VideoCodecSettingsH265Settings.
        :param slices: The slices of this VideoCodecSettingsH265Settings.
        :param slow_pal: The slow_pal of this VideoCodecSettingsH265Settings.
        :param spatial_adaptive_quantization: The spatial_adaptive_quantization of this VideoCodecSettingsH265Settings.
        :param telecine: The telecine of this VideoCodecSettingsH265Settings.
        :param temporal_adaptive_quantization: The temporal_adaptive_quantization of this VideoCodecSettingsH265Settings.
        :param temporal_ids: The temporal_ids of this VideoCodecSettingsH265Settings.
        :param tiles: The tiles of this VideoCodecSettingsH265Settings.
        :param unregistered_sei_timecode: The unregistered_sei_timecode of this VideoCodecSettingsH265Settings.
        :param write_mp4_packaging_type: The write_mp4_packaging_type of this VideoCodecSettingsH265Settings.
        """
        self.openapi_types = {
            'adaptive_quantization': H265AdaptiveQuantization,
            'alternate_transfer_function_sei': H265AlternateTransferFunctionSei,
            'bandwidth_reduction_filter': H264SettingsBandwidthReductionFilter,
            'bitrate': int,
            'codec_level': H265CodecLevel,
            'codec_profile': H265CodecProfile,
            'dynamic_sub_gop': H265DynamicSubGop,
            'flicker_adaptive_quantization': H265FlickerAdaptiveQuantization,
            'framerate_control': H265FramerateControl,
            'framerate_conversion_algorithm': H265FramerateConversionAlgorithm,
            'framerate_denominator': int,
            'framerate_numerator': int,
            'gop_b_reference': H265GopBReference,
            'gop_closed_cadence': int,
            'gop_size': float,
            'gop_size_units': H265GopSizeUnits,
            'hrd_buffer_final_fill_percentage': int,
            'hrd_buffer_initial_fill_percentage': int,
            'hrd_buffer_size': int,
            'interlace_mode': H265InterlaceMode,
            'max_bitrate': int,
            'min_i_interval': int,
            'number_b_frames_between_reference_frames': int,
            'number_reference_frames': int,
            'par_control': H265ParControl,
            'par_denominator': int,
            'par_numerator': int,
            'quality_tuning_level': H265QualityTuningLevel,
            'qvbr_settings': H265SettingsQvbrSettings,
            'rate_control_mode': H265RateControlMode,
            'sample_adaptive_offset_filter_mode': H265SampleAdaptiveOffsetFilterMode,
            'scan_type_conversion_mode': H265ScanTypeConversionMode,
            'scene_change_detect': H265SceneChangeDetect,
            'slices': int,
            'slow_pal': H265SlowPal,
            'spatial_adaptive_quantization': H265SpatialAdaptiveQuantization,
            'telecine': H265Telecine,
            'temporal_adaptive_quantization': H265TemporalAdaptiveQuantization,
            'temporal_ids': H265TemporalIds,
            'tiles': H265Tiles,
            'unregistered_sei_timecode': H265UnregisteredSeiTimecode,
            'write_mp4_packaging_type': H265WriteMp4PackagingType
        }

        self.attribute_map = {
            'adaptive_quantization': 'AdaptiveQuantization',
            'alternate_transfer_function_sei': 'AlternateTransferFunctionSei',
            'bandwidth_reduction_filter': 'BandwidthReductionFilter',
            'bitrate': 'Bitrate',
            'codec_level': 'CodecLevel',
            'codec_profile': 'CodecProfile',
            'dynamic_sub_gop': 'DynamicSubGop',
            'flicker_adaptive_quantization': 'FlickerAdaptiveQuantization',
            'framerate_control': 'FramerateControl',
            'framerate_conversion_algorithm': 'FramerateConversionAlgorithm',
            'framerate_denominator': 'FramerateDenominator',
            'framerate_numerator': 'FramerateNumerator',
            'gop_b_reference': 'GopBReference',
            'gop_closed_cadence': 'GopClosedCadence',
            'gop_size': 'GopSize',
            'gop_size_units': 'GopSizeUnits',
            'hrd_buffer_final_fill_percentage': 'HrdBufferFinalFillPercentage',
            'hrd_buffer_initial_fill_percentage': 'HrdBufferInitialFillPercentage',
            'hrd_buffer_size': 'HrdBufferSize',
            'interlace_mode': 'InterlaceMode',
            'max_bitrate': 'MaxBitrate',
            'min_i_interval': 'MinIInterval',
            'number_b_frames_between_reference_frames': 'NumberBFramesBetweenReferenceFrames',
            'number_reference_frames': 'NumberReferenceFrames',
            'par_control': 'ParControl',
            'par_denominator': 'ParDenominator',
            'par_numerator': 'ParNumerator',
            'quality_tuning_level': 'QualityTuningLevel',
            'qvbr_settings': 'QvbrSettings',
            'rate_control_mode': 'RateControlMode',
            'sample_adaptive_offset_filter_mode': 'SampleAdaptiveOffsetFilterMode',
            'scan_type_conversion_mode': 'ScanTypeConversionMode',
            'scene_change_detect': 'SceneChangeDetect',
            'slices': 'Slices',
            'slow_pal': 'SlowPal',
            'spatial_adaptive_quantization': 'SpatialAdaptiveQuantization',
            'telecine': 'Telecine',
            'temporal_adaptive_quantization': 'TemporalAdaptiveQuantization',
            'temporal_ids': 'TemporalIds',
            'tiles': 'Tiles',
            'unregistered_sei_timecode': 'UnregisteredSeiTimecode',
            'write_mp4_packaging_type': 'WriteMp4PackagingType'
        }

        self._adaptive_quantization = adaptive_quantization
        self._alternate_transfer_function_sei = alternate_transfer_function_sei
        self._bandwidth_reduction_filter = bandwidth_reduction_filter
        self._bitrate = bitrate
        self._codec_level = codec_level
        self._codec_profile = codec_profile
        self._dynamic_sub_gop = dynamic_sub_gop
        self._flicker_adaptive_quantization = flicker_adaptive_quantization
        self._framerate_control = framerate_control
        self._framerate_conversion_algorithm = framerate_conversion_algorithm
        self._framerate_denominator = framerate_denominator
        self._framerate_numerator = framerate_numerator
        self._gop_b_reference = gop_b_reference
        self._gop_closed_cadence = gop_closed_cadence
        self._gop_size = gop_size
        self._gop_size_units = gop_size_units
        self._hrd_buffer_final_fill_percentage = hrd_buffer_final_fill_percentage
        self._hrd_buffer_initial_fill_percentage = hrd_buffer_initial_fill_percentage
        self._hrd_buffer_size = hrd_buffer_size
        self._interlace_mode = interlace_mode
        self._max_bitrate = max_bitrate
        self._min_i_interval = min_i_interval
        self._number_b_frames_between_reference_frames = number_b_frames_between_reference_frames
        self._number_reference_frames = number_reference_frames
        self._par_control = par_control
        self._par_denominator = par_denominator
        self._par_numerator = par_numerator
        self._quality_tuning_level = quality_tuning_level
        self._qvbr_settings = qvbr_settings
        self._rate_control_mode = rate_control_mode
        self._sample_adaptive_offset_filter_mode = sample_adaptive_offset_filter_mode
        self._scan_type_conversion_mode = scan_type_conversion_mode
        self._scene_change_detect = scene_change_detect
        self._slices = slices
        self._slow_pal = slow_pal
        self._spatial_adaptive_quantization = spatial_adaptive_quantization
        self._telecine = telecine
        self._temporal_adaptive_quantization = temporal_adaptive_quantization
        self._temporal_ids = temporal_ids
        self._tiles = tiles
        self._unregistered_sei_timecode = unregistered_sei_timecode
        self._write_mp4_packaging_type = write_mp4_packaging_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoCodecSettingsH265Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoCodecSettings_H265Settings of this VideoCodecSettingsH265Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adaptive_quantization(self):
        """Gets the adaptive_quantization of this VideoCodecSettingsH265Settings.


        :return: The adaptive_quantization of this VideoCodecSettingsH265Settings.
        :rtype: H265AdaptiveQuantization
        """
        return self._adaptive_quantization

    @adaptive_quantization.setter
    def adaptive_quantization(self, adaptive_quantization):
        """Sets the adaptive_quantization of this VideoCodecSettingsH265Settings.


        :param adaptive_quantization: The adaptive_quantization of this VideoCodecSettingsH265Settings.
        :type adaptive_quantization: H265AdaptiveQuantization
        """

        self._adaptive_quantization = adaptive_quantization

    @property
    def alternate_transfer_function_sei(self):
        """Gets the alternate_transfer_function_sei of this VideoCodecSettingsH265Settings.


        :return: The alternate_transfer_function_sei of this VideoCodecSettingsH265Settings.
        :rtype: H265AlternateTransferFunctionSei
        """
        return self._alternate_transfer_function_sei

    @alternate_transfer_function_sei.setter
    def alternate_transfer_function_sei(self, alternate_transfer_function_sei):
        """Sets the alternate_transfer_function_sei of this VideoCodecSettingsH265Settings.


        :param alternate_transfer_function_sei: The alternate_transfer_function_sei of this VideoCodecSettingsH265Settings.
        :type alternate_transfer_function_sei: H265AlternateTransferFunctionSei
        """

        self._alternate_transfer_function_sei = alternate_transfer_function_sei

    @property
    def bandwidth_reduction_filter(self):
        """Gets the bandwidth_reduction_filter of this VideoCodecSettingsH265Settings.


        :return: The bandwidth_reduction_filter of this VideoCodecSettingsH265Settings.
        :rtype: H264SettingsBandwidthReductionFilter
        """
        return self._bandwidth_reduction_filter

    @bandwidth_reduction_filter.setter
    def bandwidth_reduction_filter(self, bandwidth_reduction_filter):
        """Sets the bandwidth_reduction_filter of this VideoCodecSettingsH265Settings.


        :param bandwidth_reduction_filter: The bandwidth_reduction_filter of this VideoCodecSettingsH265Settings.
        :type bandwidth_reduction_filter: H264SettingsBandwidthReductionFilter
        """

        self._bandwidth_reduction_filter = bandwidth_reduction_filter

    @property
    def bitrate(self):
        """Gets the bitrate of this VideoCodecSettingsH265Settings.


        :return: The bitrate of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this VideoCodecSettingsH265Settings.


        :param bitrate: The bitrate of this VideoCodecSettingsH265Settings.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def codec_level(self):
        """Gets the codec_level of this VideoCodecSettingsH265Settings.


        :return: The codec_level of this VideoCodecSettingsH265Settings.
        :rtype: H265CodecLevel
        """
        return self._codec_level

    @codec_level.setter
    def codec_level(self, codec_level):
        """Sets the codec_level of this VideoCodecSettingsH265Settings.


        :param codec_level: The codec_level of this VideoCodecSettingsH265Settings.
        :type codec_level: H265CodecLevel
        """

        self._codec_level = codec_level

    @property
    def codec_profile(self):
        """Gets the codec_profile of this VideoCodecSettingsH265Settings.


        :return: The codec_profile of this VideoCodecSettingsH265Settings.
        :rtype: H265CodecProfile
        """
        return self._codec_profile

    @codec_profile.setter
    def codec_profile(self, codec_profile):
        """Sets the codec_profile of this VideoCodecSettingsH265Settings.


        :param codec_profile: The codec_profile of this VideoCodecSettingsH265Settings.
        :type codec_profile: H265CodecProfile
        """

        self._codec_profile = codec_profile

    @property
    def dynamic_sub_gop(self):
        """Gets the dynamic_sub_gop of this VideoCodecSettingsH265Settings.


        :return: The dynamic_sub_gop of this VideoCodecSettingsH265Settings.
        :rtype: H265DynamicSubGop
        """
        return self._dynamic_sub_gop

    @dynamic_sub_gop.setter
    def dynamic_sub_gop(self, dynamic_sub_gop):
        """Sets the dynamic_sub_gop of this VideoCodecSettingsH265Settings.


        :param dynamic_sub_gop: The dynamic_sub_gop of this VideoCodecSettingsH265Settings.
        :type dynamic_sub_gop: H265DynamicSubGop
        """

        self._dynamic_sub_gop = dynamic_sub_gop

    @property
    def flicker_adaptive_quantization(self):
        """Gets the flicker_adaptive_quantization of this VideoCodecSettingsH265Settings.


        :return: The flicker_adaptive_quantization of this VideoCodecSettingsH265Settings.
        :rtype: H265FlickerAdaptiveQuantization
        """
        return self._flicker_adaptive_quantization

    @flicker_adaptive_quantization.setter
    def flicker_adaptive_quantization(self, flicker_adaptive_quantization):
        """Sets the flicker_adaptive_quantization of this VideoCodecSettingsH265Settings.


        :param flicker_adaptive_quantization: The flicker_adaptive_quantization of this VideoCodecSettingsH265Settings.
        :type flicker_adaptive_quantization: H265FlickerAdaptiveQuantization
        """

        self._flicker_adaptive_quantization = flicker_adaptive_quantization

    @property
    def framerate_control(self):
        """Gets the framerate_control of this VideoCodecSettingsH265Settings.


        :return: The framerate_control of this VideoCodecSettingsH265Settings.
        :rtype: H265FramerateControl
        """
        return self._framerate_control

    @framerate_control.setter
    def framerate_control(self, framerate_control):
        """Sets the framerate_control of this VideoCodecSettingsH265Settings.


        :param framerate_control: The framerate_control of this VideoCodecSettingsH265Settings.
        :type framerate_control: H265FramerateControl
        """

        self._framerate_control = framerate_control

    @property
    def framerate_conversion_algorithm(self):
        """Gets the framerate_conversion_algorithm of this VideoCodecSettingsH265Settings.


        :return: The framerate_conversion_algorithm of this VideoCodecSettingsH265Settings.
        :rtype: H265FramerateConversionAlgorithm
        """
        return self._framerate_conversion_algorithm

    @framerate_conversion_algorithm.setter
    def framerate_conversion_algorithm(self, framerate_conversion_algorithm):
        """Sets the framerate_conversion_algorithm of this VideoCodecSettingsH265Settings.


        :param framerate_conversion_algorithm: The framerate_conversion_algorithm of this VideoCodecSettingsH265Settings.
        :type framerate_conversion_algorithm: H265FramerateConversionAlgorithm
        """

        self._framerate_conversion_algorithm = framerate_conversion_algorithm

    @property
    def framerate_denominator(self):
        """Gets the framerate_denominator of this VideoCodecSettingsH265Settings.


        :return: The framerate_denominator of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._framerate_denominator

    @framerate_denominator.setter
    def framerate_denominator(self, framerate_denominator):
        """Sets the framerate_denominator of this VideoCodecSettingsH265Settings.


        :param framerate_denominator: The framerate_denominator of this VideoCodecSettingsH265Settings.
        :type framerate_denominator: int
        """

        self._framerate_denominator = framerate_denominator

    @property
    def framerate_numerator(self):
        """Gets the framerate_numerator of this VideoCodecSettingsH265Settings.


        :return: The framerate_numerator of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._framerate_numerator

    @framerate_numerator.setter
    def framerate_numerator(self, framerate_numerator):
        """Sets the framerate_numerator of this VideoCodecSettingsH265Settings.


        :param framerate_numerator: The framerate_numerator of this VideoCodecSettingsH265Settings.
        :type framerate_numerator: int
        """

        self._framerate_numerator = framerate_numerator

    @property
    def gop_b_reference(self):
        """Gets the gop_b_reference of this VideoCodecSettingsH265Settings.


        :return: The gop_b_reference of this VideoCodecSettingsH265Settings.
        :rtype: H265GopBReference
        """
        return self._gop_b_reference

    @gop_b_reference.setter
    def gop_b_reference(self, gop_b_reference):
        """Sets the gop_b_reference of this VideoCodecSettingsH265Settings.


        :param gop_b_reference: The gop_b_reference of this VideoCodecSettingsH265Settings.
        :type gop_b_reference: H265GopBReference
        """

        self._gop_b_reference = gop_b_reference

    @property
    def gop_closed_cadence(self):
        """Gets the gop_closed_cadence of this VideoCodecSettingsH265Settings.


        :return: The gop_closed_cadence of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._gop_closed_cadence

    @gop_closed_cadence.setter
    def gop_closed_cadence(self, gop_closed_cadence):
        """Sets the gop_closed_cadence of this VideoCodecSettingsH265Settings.


        :param gop_closed_cadence: The gop_closed_cadence of this VideoCodecSettingsH265Settings.
        :type gop_closed_cadence: int
        """

        self._gop_closed_cadence = gop_closed_cadence

    @property
    def gop_size(self):
        """Gets the gop_size of this VideoCodecSettingsH265Settings.


        :return: The gop_size of this VideoCodecSettingsH265Settings.
        :rtype: float
        """
        return self._gop_size

    @gop_size.setter
    def gop_size(self, gop_size):
        """Sets the gop_size of this VideoCodecSettingsH265Settings.


        :param gop_size: The gop_size of this VideoCodecSettingsH265Settings.
        :type gop_size: float
        """

        self._gop_size = gop_size

    @property
    def gop_size_units(self):
        """Gets the gop_size_units of this VideoCodecSettingsH265Settings.


        :return: The gop_size_units of this VideoCodecSettingsH265Settings.
        :rtype: H265GopSizeUnits
        """
        return self._gop_size_units

    @gop_size_units.setter
    def gop_size_units(self, gop_size_units):
        """Sets the gop_size_units of this VideoCodecSettingsH265Settings.


        :param gop_size_units: The gop_size_units of this VideoCodecSettingsH265Settings.
        :type gop_size_units: H265GopSizeUnits
        """

        self._gop_size_units = gop_size_units

    @property
    def hrd_buffer_final_fill_percentage(self):
        """Gets the hrd_buffer_final_fill_percentage of this VideoCodecSettingsH265Settings.


        :return: The hrd_buffer_final_fill_percentage of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._hrd_buffer_final_fill_percentage

    @hrd_buffer_final_fill_percentage.setter
    def hrd_buffer_final_fill_percentage(self, hrd_buffer_final_fill_percentage):
        """Sets the hrd_buffer_final_fill_percentage of this VideoCodecSettingsH265Settings.


        :param hrd_buffer_final_fill_percentage: The hrd_buffer_final_fill_percentage of this VideoCodecSettingsH265Settings.
        :type hrd_buffer_final_fill_percentage: int
        """

        self._hrd_buffer_final_fill_percentage = hrd_buffer_final_fill_percentage

    @property
    def hrd_buffer_initial_fill_percentage(self):
        """Gets the hrd_buffer_initial_fill_percentage of this VideoCodecSettingsH265Settings.


        :return: The hrd_buffer_initial_fill_percentage of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._hrd_buffer_initial_fill_percentage

    @hrd_buffer_initial_fill_percentage.setter
    def hrd_buffer_initial_fill_percentage(self, hrd_buffer_initial_fill_percentage):
        """Sets the hrd_buffer_initial_fill_percentage of this VideoCodecSettingsH265Settings.


        :param hrd_buffer_initial_fill_percentage: The hrd_buffer_initial_fill_percentage of this VideoCodecSettingsH265Settings.
        :type hrd_buffer_initial_fill_percentage: int
        """

        self._hrd_buffer_initial_fill_percentage = hrd_buffer_initial_fill_percentage

    @property
    def hrd_buffer_size(self):
        """Gets the hrd_buffer_size of this VideoCodecSettingsH265Settings.


        :return: The hrd_buffer_size of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._hrd_buffer_size

    @hrd_buffer_size.setter
    def hrd_buffer_size(self, hrd_buffer_size):
        """Sets the hrd_buffer_size of this VideoCodecSettingsH265Settings.


        :param hrd_buffer_size: The hrd_buffer_size of this VideoCodecSettingsH265Settings.
        :type hrd_buffer_size: int
        """

        self._hrd_buffer_size = hrd_buffer_size

    @property
    def interlace_mode(self):
        """Gets the interlace_mode of this VideoCodecSettingsH265Settings.


        :return: The interlace_mode of this VideoCodecSettingsH265Settings.
        :rtype: H265InterlaceMode
        """
        return self._interlace_mode

    @interlace_mode.setter
    def interlace_mode(self, interlace_mode):
        """Sets the interlace_mode of this VideoCodecSettingsH265Settings.


        :param interlace_mode: The interlace_mode of this VideoCodecSettingsH265Settings.
        :type interlace_mode: H265InterlaceMode
        """

        self._interlace_mode = interlace_mode

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this VideoCodecSettingsH265Settings.


        :return: The max_bitrate of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this VideoCodecSettingsH265Settings.


        :param max_bitrate: The max_bitrate of this VideoCodecSettingsH265Settings.
        :type max_bitrate: int
        """

        self._max_bitrate = max_bitrate

    @property
    def min_i_interval(self):
        """Gets the min_i_interval of this VideoCodecSettingsH265Settings.


        :return: The min_i_interval of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._min_i_interval

    @min_i_interval.setter
    def min_i_interval(self, min_i_interval):
        """Sets the min_i_interval of this VideoCodecSettingsH265Settings.


        :param min_i_interval: The min_i_interval of this VideoCodecSettingsH265Settings.
        :type min_i_interval: int
        """

        self._min_i_interval = min_i_interval

    @property
    def number_b_frames_between_reference_frames(self):
        """Gets the number_b_frames_between_reference_frames of this VideoCodecSettingsH265Settings.


        :return: The number_b_frames_between_reference_frames of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._number_b_frames_between_reference_frames

    @number_b_frames_between_reference_frames.setter
    def number_b_frames_between_reference_frames(self, number_b_frames_between_reference_frames):
        """Sets the number_b_frames_between_reference_frames of this VideoCodecSettingsH265Settings.


        :param number_b_frames_between_reference_frames: The number_b_frames_between_reference_frames of this VideoCodecSettingsH265Settings.
        :type number_b_frames_between_reference_frames: int
        """

        self._number_b_frames_between_reference_frames = number_b_frames_between_reference_frames

    @property
    def number_reference_frames(self):
        """Gets the number_reference_frames of this VideoCodecSettingsH265Settings.


        :return: The number_reference_frames of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._number_reference_frames

    @number_reference_frames.setter
    def number_reference_frames(self, number_reference_frames):
        """Sets the number_reference_frames of this VideoCodecSettingsH265Settings.


        :param number_reference_frames: The number_reference_frames of this VideoCodecSettingsH265Settings.
        :type number_reference_frames: int
        """

        self._number_reference_frames = number_reference_frames

    @property
    def par_control(self):
        """Gets the par_control of this VideoCodecSettingsH265Settings.


        :return: The par_control of this VideoCodecSettingsH265Settings.
        :rtype: H265ParControl
        """
        return self._par_control

    @par_control.setter
    def par_control(self, par_control):
        """Sets the par_control of this VideoCodecSettingsH265Settings.


        :param par_control: The par_control of this VideoCodecSettingsH265Settings.
        :type par_control: H265ParControl
        """

        self._par_control = par_control

    @property
    def par_denominator(self):
        """Gets the par_denominator of this VideoCodecSettingsH265Settings.


        :return: The par_denominator of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._par_denominator

    @par_denominator.setter
    def par_denominator(self, par_denominator):
        """Sets the par_denominator of this VideoCodecSettingsH265Settings.


        :param par_denominator: The par_denominator of this VideoCodecSettingsH265Settings.
        :type par_denominator: int
        """

        self._par_denominator = par_denominator

    @property
    def par_numerator(self):
        """Gets the par_numerator of this VideoCodecSettingsH265Settings.


        :return: The par_numerator of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._par_numerator

    @par_numerator.setter
    def par_numerator(self, par_numerator):
        """Sets the par_numerator of this VideoCodecSettingsH265Settings.


        :param par_numerator: The par_numerator of this VideoCodecSettingsH265Settings.
        :type par_numerator: int
        """

        self._par_numerator = par_numerator

    @property
    def quality_tuning_level(self):
        """Gets the quality_tuning_level of this VideoCodecSettingsH265Settings.


        :return: The quality_tuning_level of this VideoCodecSettingsH265Settings.
        :rtype: H265QualityTuningLevel
        """
        return self._quality_tuning_level

    @quality_tuning_level.setter
    def quality_tuning_level(self, quality_tuning_level):
        """Sets the quality_tuning_level of this VideoCodecSettingsH265Settings.


        :param quality_tuning_level: The quality_tuning_level of this VideoCodecSettingsH265Settings.
        :type quality_tuning_level: H265QualityTuningLevel
        """

        self._quality_tuning_level = quality_tuning_level

    @property
    def qvbr_settings(self):
        """Gets the qvbr_settings of this VideoCodecSettingsH265Settings.


        :return: The qvbr_settings of this VideoCodecSettingsH265Settings.
        :rtype: H265SettingsQvbrSettings
        """
        return self._qvbr_settings

    @qvbr_settings.setter
    def qvbr_settings(self, qvbr_settings):
        """Sets the qvbr_settings of this VideoCodecSettingsH265Settings.


        :param qvbr_settings: The qvbr_settings of this VideoCodecSettingsH265Settings.
        :type qvbr_settings: H265SettingsQvbrSettings
        """

        self._qvbr_settings = qvbr_settings

    @property
    def rate_control_mode(self):
        """Gets the rate_control_mode of this VideoCodecSettingsH265Settings.


        :return: The rate_control_mode of this VideoCodecSettingsH265Settings.
        :rtype: H265RateControlMode
        """
        return self._rate_control_mode

    @rate_control_mode.setter
    def rate_control_mode(self, rate_control_mode):
        """Sets the rate_control_mode of this VideoCodecSettingsH265Settings.


        :param rate_control_mode: The rate_control_mode of this VideoCodecSettingsH265Settings.
        :type rate_control_mode: H265RateControlMode
        """

        self._rate_control_mode = rate_control_mode

    @property
    def sample_adaptive_offset_filter_mode(self):
        """Gets the sample_adaptive_offset_filter_mode of this VideoCodecSettingsH265Settings.


        :return: The sample_adaptive_offset_filter_mode of this VideoCodecSettingsH265Settings.
        :rtype: H265SampleAdaptiveOffsetFilterMode
        """
        return self._sample_adaptive_offset_filter_mode

    @sample_adaptive_offset_filter_mode.setter
    def sample_adaptive_offset_filter_mode(self, sample_adaptive_offset_filter_mode):
        """Sets the sample_adaptive_offset_filter_mode of this VideoCodecSettingsH265Settings.


        :param sample_adaptive_offset_filter_mode: The sample_adaptive_offset_filter_mode of this VideoCodecSettingsH265Settings.
        :type sample_adaptive_offset_filter_mode: H265SampleAdaptiveOffsetFilterMode
        """

        self._sample_adaptive_offset_filter_mode = sample_adaptive_offset_filter_mode

    @property
    def scan_type_conversion_mode(self):
        """Gets the scan_type_conversion_mode of this VideoCodecSettingsH265Settings.


        :return: The scan_type_conversion_mode of this VideoCodecSettingsH265Settings.
        :rtype: H265ScanTypeConversionMode
        """
        return self._scan_type_conversion_mode

    @scan_type_conversion_mode.setter
    def scan_type_conversion_mode(self, scan_type_conversion_mode):
        """Sets the scan_type_conversion_mode of this VideoCodecSettingsH265Settings.


        :param scan_type_conversion_mode: The scan_type_conversion_mode of this VideoCodecSettingsH265Settings.
        :type scan_type_conversion_mode: H265ScanTypeConversionMode
        """

        self._scan_type_conversion_mode = scan_type_conversion_mode

    @property
    def scene_change_detect(self):
        """Gets the scene_change_detect of this VideoCodecSettingsH265Settings.


        :return: The scene_change_detect of this VideoCodecSettingsH265Settings.
        :rtype: H265SceneChangeDetect
        """
        return self._scene_change_detect

    @scene_change_detect.setter
    def scene_change_detect(self, scene_change_detect):
        """Sets the scene_change_detect of this VideoCodecSettingsH265Settings.


        :param scene_change_detect: The scene_change_detect of this VideoCodecSettingsH265Settings.
        :type scene_change_detect: H265SceneChangeDetect
        """

        self._scene_change_detect = scene_change_detect

    @property
    def slices(self):
        """Gets the slices of this VideoCodecSettingsH265Settings.


        :return: The slices of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._slices

    @slices.setter
    def slices(self, slices):
        """Sets the slices of this VideoCodecSettingsH265Settings.


        :param slices: The slices of this VideoCodecSettingsH265Settings.
        :type slices: int
        """

        self._slices = slices

    @property
    def slow_pal(self):
        """Gets the slow_pal of this VideoCodecSettingsH265Settings.


        :return: The slow_pal of this VideoCodecSettingsH265Settings.
        :rtype: H265SlowPal
        """
        return self._slow_pal

    @slow_pal.setter
    def slow_pal(self, slow_pal):
        """Sets the slow_pal of this VideoCodecSettingsH265Settings.


        :param slow_pal: The slow_pal of this VideoCodecSettingsH265Settings.
        :type slow_pal: H265SlowPal
        """

        self._slow_pal = slow_pal

    @property
    def spatial_adaptive_quantization(self):
        """Gets the spatial_adaptive_quantization of this VideoCodecSettingsH265Settings.


        :return: The spatial_adaptive_quantization of this VideoCodecSettingsH265Settings.
        :rtype: H265SpatialAdaptiveQuantization
        """
        return self._spatial_adaptive_quantization

    @spatial_adaptive_quantization.setter
    def spatial_adaptive_quantization(self, spatial_adaptive_quantization):
        """Sets the spatial_adaptive_quantization of this VideoCodecSettingsH265Settings.


        :param spatial_adaptive_quantization: The spatial_adaptive_quantization of this VideoCodecSettingsH265Settings.
        :type spatial_adaptive_quantization: H265SpatialAdaptiveQuantization
        """

        self._spatial_adaptive_quantization = spatial_adaptive_quantization

    @property
    def telecine(self):
        """Gets the telecine of this VideoCodecSettingsH265Settings.


        :return: The telecine of this VideoCodecSettingsH265Settings.
        :rtype: H265Telecine
        """
        return self._telecine

    @telecine.setter
    def telecine(self, telecine):
        """Sets the telecine of this VideoCodecSettingsH265Settings.


        :param telecine: The telecine of this VideoCodecSettingsH265Settings.
        :type telecine: H265Telecine
        """

        self._telecine = telecine

    @property
    def temporal_adaptive_quantization(self):
        """Gets the temporal_adaptive_quantization of this VideoCodecSettingsH265Settings.


        :return: The temporal_adaptive_quantization of this VideoCodecSettingsH265Settings.
        :rtype: H265TemporalAdaptiveQuantization
        """
        return self._temporal_adaptive_quantization

    @temporal_adaptive_quantization.setter
    def temporal_adaptive_quantization(self, temporal_adaptive_quantization):
        """Sets the temporal_adaptive_quantization of this VideoCodecSettingsH265Settings.


        :param temporal_adaptive_quantization: The temporal_adaptive_quantization of this VideoCodecSettingsH265Settings.
        :type temporal_adaptive_quantization: H265TemporalAdaptiveQuantization
        """

        self._temporal_adaptive_quantization = temporal_adaptive_quantization

    @property
    def temporal_ids(self):
        """Gets the temporal_ids of this VideoCodecSettingsH265Settings.


        :return: The temporal_ids of this VideoCodecSettingsH265Settings.
        :rtype: H265TemporalIds
        """
        return self._temporal_ids

    @temporal_ids.setter
    def temporal_ids(self, temporal_ids):
        """Sets the temporal_ids of this VideoCodecSettingsH265Settings.


        :param temporal_ids: The temporal_ids of this VideoCodecSettingsH265Settings.
        :type temporal_ids: H265TemporalIds
        """

        self._temporal_ids = temporal_ids

    @property
    def tiles(self):
        """Gets the tiles of this VideoCodecSettingsH265Settings.


        :return: The tiles of this VideoCodecSettingsH265Settings.
        :rtype: H265Tiles
        """
        return self._tiles

    @tiles.setter
    def tiles(self, tiles):
        """Sets the tiles of this VideoCodecSettingsH265Settings.


        :param tiles: The tiles of this VideoCodecSettingsH265Settings.
        :type tiles: H265Tiles
        """

        self._tiles = tiles

    @property
    def unregistered_sei_timecode(self):
        """Gets the unregistered_sei_timecode of this VideoCodecSettingsH265Settings.


        :return: The unregistered_sei_timecode of this VideoCodecSettingsH265Settings.
        :rtype: H265UnregisteredSeiTimecode
        """
        return self._unregistered_sei_timecode

    @unregistered_sei_timecode.setter
    def unregistered_sei_timecode(self, unregistered_sei_timecode):
        """Sets the unregistered_sei_timecode of this VideoCodecSettingsH265Settings.


        :param unregistered_sei_timecode: The unregistered_sei_timecode of this VideoCodecSettingsH265Settings.
        :type unregistered_sei_timecode: H265UnregisteredSeiTimecode
        """

        self._unregistered_sei_timecode = unregistered_sei_timecode

    @property
    def write_mp4_packaging_type(self):
        """Gets the write_mp4_packaging_type of this VideoCodecSettingsH265Settings.


        :return: The write_mp4_packaging_type of this VideoCodecSettingsH265Settings.
        :rtype: H265WriteMp4PackagingType
        """
        return self._write_mp4_packaging_type

    @write_mp4_packaging_type.setter
    def write_mp4_packaging_type(self, write_mp4_packaging_type):
        """Sets the write_mp4_packaging_type of this VideoCodecSettingsH265Settings.


        :param write_mp4_packaging_type: The write_mp4_packaging_type of this VideoCodecSettingsH265Settings.
        :type write_mp4_packaging_type: H265WriteMp4PackagingType
        """

        self._write_mp4_packaging_type = write_mp4_packaging_type
