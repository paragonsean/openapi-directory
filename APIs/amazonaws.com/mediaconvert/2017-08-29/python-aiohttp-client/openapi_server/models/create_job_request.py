# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_job_request_acceleration_settings import CreateJobRequestAccelerationSettings
from openapi_server.models.create_job_request_settings import CreateJobRequestSettings
from openapi_server.models.hop_destination import HopDestination
from openapi_server import util


class CreateJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acceleration_settings: CreateJobRequestAccelerationSettings=None, billing_tags_source: str=None, client_request_token: str=None, hop_destinations: List[HopDestination]=None, job_template: str=None, priority: int=None, queue: str=None, role: str=None, settings: CreateJobRequestSettings=None, simulate_reserved_queue: str=None, status_update_interval: str=None, tags: Dict[str, str]=None, user_metadata: Dict[str, str]=None):
        """CreateJobRequest - a model defined in OpenAPI

        :param acceleration_settings: The acceleration_settings of this CreateJobRequest.
        :param billing_tags_source: The billing_tags_source of this CreateJobRequest.
        :param client_request_token: The client_request_token of this CreateJobRequest.
        :param hop_destinations: The hop_destinations of this CreateJobRequest.
        :param job_template: The job_template of this CreateJobRequest.
        :param priority: The priority of this CreateJobRequest.
        :param queue: The queue of this CreateJobRequest.
        :param role: The role of this CreateJobRequest.
        :param settings: The settings of this CreateJobRequest.
        :param simulate_reserved_queue: The simulate_reserved_queue of this CreateJobRequest.
        :param status_update_interval: The status_update_interval of this CreateJobRequest.
        :param tags: The tags of this CreateJobRequest.
        :param user_metadata: The user_metadata of this CreateJobRequest.
        """
        self.openapi_types = {
            'acceleration_settings': CreateJobRequestAccelerationSettings,
            'billing_tags_source': str,
            'client_request_token': str,
            'hop_destinations': List[HopDestination],
            'job_template': str,
            'priority': int,
            'queue': str,
            'role': str,
            'settings': CreateJobRequestSettings,
            'simulate_reserved_queue': str,
            'status_update_interval': str,
            'tags': Dict[str, str],
            'user_metadata': Dict[str, str]
        }

        self.attribute_map = {
            'acceleration_settings': 'accelerationSettings',
            'billing_tags_source': 'billingTagsSource',
            'client_request_token': 'clientRequestToken',
            'hop_destinations': 'hopDestinations',
            'job_template': 'jobTemplate',
            'priority': 'priority',
            'queue': 'queue',
            'role': 'role',
            'settings': 'settings',
            'simulate_reserved_queue': 'simulateReservedQueue',
            'status_update_interval': 'statusUpdateInterval',
            'tags': 'tags',
            'user_metadata': 'userMetadata'
        }

        self._acceleration_settings = acceleration_settings
        self._billing_tags_source = billing_tags_source
        self._client_request_token = client_request_token
        self._hop_destinations = hop_destinations
        self._job_template = job_template
        self._priority = priority
        self._queue = queue
        self._role = role
        self._settings = settings
        self._simulate_reserved_queue = simulate_reserved_queue
        self._status_update_interval = status_update_interval
        self._tags = tags
        self._user_metadata = user_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJob_request of this CreateJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceleration_settings(self):
        """Gets the acceleration_settings of this CreateJobRequest.


        :return: The acceleration_settings of this CreateJobRequest.
        :rtype: CreateJobRequestAccelerationSettings
        """
        return self._acceleration_settings

    @acceleration_settings.setter
    def acceleration_settings(self, acceleration_settings):
        """Sets the acceleration_settings of this CreateJobRequest.


        :param acceleration_settings: The acceleration_settings of this CreateJobRequest.
        :type acceleration_settings: CreateJobRequestAccelerationSettings
        """

        self._acceleration_settings = acceleration_settings

    @property
    def billing_tags_source(self):
        """Gets the billing_tags_source of this CreateJobRequest.

        The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.

        :return: The billing_tags_source of this CreateJobRequest.
        :rtype: str
        """
        return self._billing_tags_source

    @billing_tags_source.setter
    def billing_tags_source(self, billing_tags_source):
        """Sets the billing_tags_source of this CreateJobRequest.

        The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.

        :param billing_tags_source: The billing_tags_source of this CreateJobRequest.
        :type billing_tags_source: str
        """
        allowed_values = ["QUEUE", "PRESET", "JOB_TEMPLATE", "JOB"]  # noqa: E501
        if billing_tags_source not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_tags_source` ({0}), must be one of {1}"
                .format(billing_tags_source, allowed_values)
            )

        self._billing_tags_source = billing_tags_source

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateJobRequest.

        Prevent duplicate jobs from being created and ensure idempotency for your requests. A client request token can be any string that includes up to 64 ASCII characters. If you reuse a client request token within one minute of a successful request, the API returns the job details of the original request instead. For more information see https://docs.aws.amazon.com/mediaconvert/latest/apireference/idempotency.html.

        :return: The client_request_token of this CreateJobRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateJobRequest.

        Prevent duplicate jobs from being created and ensure idempotency for your requests. A client request token can be any string that includes up to 64 ASCII characters. If you reuse a client request token within one minute of a successful request, the API returns the job details of the original request instead. For more information see https://docs.aws.amazon.com/mediaconvert/latest/apireference/idempotency.html.

        :param client_request_token: The client_request_token of this CreateJobRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def hop_destinations(self):
        """Gets the hop_destinations of this CreateJobRequest.

        Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.

        :return: The hop_destinations of this CreateJobRequest.
        :rtype: List[HopDestination]
        """
        return self._hop_destinations

    @hop_destinations.setter
    def hop_destinations(self, hop_destinations):
        """Sets the hop_destinations of this CreateJobRequest.

        Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.

        :param hop_destinations: The hop_destinations of this CreateJobRequest.
        :type hop_destinations: List[HopDestination]
        """

        self._hop_destinations = hop_destinations

    @property
    def job_template(self):
        """Gets the job_template of this CreateJobRequest.

        Optional. When you create a job, you can either specify a job template or specify the transcoding settings individually.

        :return: The job_template of this CreateJobRequest.
        :rtype: str
        """
        return self._job_template

    @job_template.setter
    def job_template(self, job_template):
        """Sets the job_template of this CreateJobRequest.

        Optional. When you create a job, you can either specify a job template or specify the transcoding settings individually.

        :param job_template: The job_template of this CreateJobRequest.
        :type job_template: str
        """

        self._job_template = job_template

    @property
    def priority(self):
        """Gets the priority of this CreateJobRequest.

        Optional. Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.

        :return: The priority of this CreateJobRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateJobRequest.

        Optional. Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.

        :param priority: The priority of this CreateJobRequest.
        :type priority: int
        """
        if priority is not None and priority > 50:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `50`")
        if priority is not None and priority < -50:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `-50`")

        self._priority = priority

    @property
    def queue(self):
        """Gets the queue of this CreateJobRequest.

        Optional. When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html.

        :return: The queue of this CreateJobRequest.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this CreateJobRequest.

        Optional. When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html.

        :param queue: The queue of this CreateJobRequest.
        :type queue: str
        """

        self._queue = queue

    @property
    def role(self):
        """Gets the role of this CreateJobRequest.

        Required. The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.

        :return: The role of this CreateJobRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreateJobRequest.

        Required. The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.

        :param role: The role of this CreateJobRequest.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def settings(self):
        """Gets the settings of this CreateJobRequest.


        :return: The settings of this CreateJobRequest.
        :rtype: CreateJobRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateJobRequest.


        :param settings: The settings of this CreateJobRequest.
        :type settings: CreateJobRequestSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def simulate_reserved_queue(self):
        """Gets the simulate_reserved_queue of this CreateJobRequest.

        Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.

        :return: The simulate_reserved_queue of this CreateJobRequest.
        :rtype: str
        """
        return self._simulate_reserved_queue

    @simulate_reserved_queue.setter
    def simulate_reserved_queue(self, simulate_reserved_queue):
        """Sets the simulate_reserved_queue of this CreateJobRequest.

        Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.

        :param simulate_reserved_queue: The simulate_reserved_queue of this CreateJobRequest.
        :type simulate_reserved_queue: str
        """
        allowed_values = ["DISABLED", "ENABLED"]  # noqa: E501
        if simulate_reserved_queue not in allowed_values:
            raise ValueError(
                "Invalid value for `simulate_reserved_queue` ({0}), must be one of {1}"
                .format(simulate_reserved_queue, allowed_values)
            )

        self._simulate_reserved_queue = simulate_reserved_queue

    @property
    def status_update_interval(self):
        """Gets the status_update_interval of this CreateJobRequest.

        Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.

        :return: The status_update_interval of this CreateJobRequest.
        :rtype: str
        """
        return self._status_update_interval

    @status_update_interval.setter
    def status_update_interval(self, status_update_interval):
        """Sets the status_update_interval of this CreateJobRequest.

        Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.

        :param status_update_interval: The status_update_interval of this CreateJobRequest.
        :type status_update_interval: str
        """
        allowed_values = ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]  # noqa: E501
        if status_update_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `status_update_interval` ({0}), must be one of {1}"
                .format(status_update_interval, allowed_values)
            )

        self._status_update_interval = status_update_interval

    @property
    def tags(self):
        """Gets the tags of this CreateJobRequest.

        Optional. The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.  Use standard AWS tags on your job for automatic integration with AWS services and for custom integrations and workflows.

        :return: The tags of this CreateJobRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateJobRequest.

        Optional. The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.  Use standard AWS tags on your job for automatic integration with AWS services and for custom integrations and workflows.

        :param tags: The tags of this CreateJobRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def user_metadata(self):
        """Gets the user_metadata of this CreateJobRequest.

        Optional. User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs.  Use only for existing integrations or workflows that rely on job metadata tags. Otherwise, we recommend that you use standard AWS tags.

        :return: The user_metadata of this CreateJobRequest.
        :rtype: Dict[str, str]
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata):
        """Sets the user_metadata of this CreateJobRequest.

        Optional. User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs.  Use only for existing integrations or workflows that rely on job metadata tags. Otherwise, we recommend that you use standard AWS tags.

        :param user_metadata: The user_metadata of this CreateJobRequest.
        :type user_metadata: Dict[str, str]
        """

        self._user_metadata = user_metadata
