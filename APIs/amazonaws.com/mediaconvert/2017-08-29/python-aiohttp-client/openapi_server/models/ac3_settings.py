# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ac3_bitstream_mode import Ac3BitstreamMode
from openapi_server.models.ac3_coding_mode import Ac3CodingMode
from openapi_server.models.ac3_dynamic_range_compression_line import Ac3DynamicRangeCompressionLine
from openapi_server.models.ac3_dynamic_range_compression_profile import Ac3DynamicRangeCompressionProfile
from openapi_server.models.ac3_dynamic_range_compression_rf import Ac3DynamicRangeCompressionRf
from openapi_server.models.ac3_lfe_filter import Ac3LfeFilter
from openapi_server.models.ac3_metadata_control import Ac3MetadataControl
from openapi_server import util


class Ac3Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitrate: int=None, bitstream_mode: Ac3BitstreamMode=None, coding_mode: Ac3CodingMode=None, dialnorm: int=None, dynamic_range_compression_line: Ac3DynamicRangeCompressionLine=None, dynamic_range_compression_profile: Ac3DynamicRangeCompressionProfile=None, dynamic_range_compression_rf: Ac3DynamicRangeCompressionRf=None, lfe_filter: Ac3LfeFilter=None, metadata_control: Ac3MetadataControl=None, sample_rate: int=None):
        """Ac3Settings - a model defined in OpenAPI

        :param bitrate: The bitrate of this Ac3Settings.
        :param bitstream_mode: The bitstream_mode of this Ac3Settings.
        :param coding_mode: The coding_mode of this Ac3Settings.
        :param dialnorm: The dialnorm of this Ac3Settings.
        :param dynamic_range_compression_line: The dynamic_range_compression_line of this Ac3Settings.
        :param dynamic_range_compression_profile: The dynamic_range_compression_profile of this Ac3Settings.
        :param dynamic_range_compression_rf: The dynamic_range_compression_rf of this Ac3Settings.
        :param lfe_filter: The lfe_filter of this Ac3Settings.
        :param metadata_control: The metadata_control of this Ac3Settings.
        :param sample_rate: The sample_rate of this Ac3Settings.
        """
        self.openapi_types = {
            'bitrate': int,
            'bitstream_mode': Ac3BitstreamMode,
            'coding_mode': Ac3CodingMode,
            'dialnorm': int,
            'dynamic_range_compression_line': Ac3DynamicRangeCompressionLine,
            'dynamic_range_compression_profile': Ac3DynamicRangeCompressionProfile,
            'dynamic_range_compression_rf': Ac3DynamicRangeCompressionRf,
            'lfe_filter': Ac3LfeFilter,
            'metadata_control': Ac3MetadataControl,
            'sample_rate': int
        }

        self.attribute_map = {
            'bitrate': 'Bitrate',
            'bitstream_mode': 'BitstreamMode',
            'coding_mode': 'CodingMode',
            'dialnorm': 'Dialnorm',
            'dynamic_range_compression_line': 'DynamicRangeCompressionLine',
            'dynamic_range_compression_profile': 'DynamicRangeCompressionProfile',
            'dynamic_range_compression_rf': 'DynamicRangeCompressionRf',
            'lfe_filter': 'LfeFilter',
            'metadata_control': 'MetadataControl',
            'sample_rate': 'SampleRate'
        }

        self._bitrate = bitrate
        self._bitstream_mode = bitstream_mode
        self._coding_mode = coding_mode
        self._dialnorm = dialnorm
        self._dynamic_range_compression_line = dynamic_range_compression_line
        self._dynamic_range_compression_profile = dynamic_range_compression_profile
        self._dynamic_range_compression_rf = dynamic_range_compression_rf
        self._lfe_filter = lfe_filter
        self._metadata_control = metadata_control
        self._sample_rate = sample_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ac3Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ac3Settings of this Ac3Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitrate(self):
        """Gets the bitrate of this Ac3Settings.


        :return: The bitrate of this Ac3Settings.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this Ac3Settings.


        :param bitrate: The bitrate of this Ac3Settings.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def bitstream_mode(self):
        """Gets the bitstream_mode of this Ac3Settings.


        :return: The bitstream_mode of this Ac3Settings.
        :rtype: Ac3BitstreamMode
        """
        return self._bitstream_mode

    @bitstream_mode.setter
    def bitstream_mode(self, bitstream_mode):
        """Sets the bitstream_mode of this Ac3Settings.


        :param bitstream_mode: The bitstream_mode of this Ac3Settings.
        :type bitstream_mode: Ac3BitstreamMode
        """

        self._bitstream_mode = bitstream_mode

    @property
    def coding_mode(self):
        """Gets the coding_mode of this Ac3Settings.


        :return: The coding_mode of this Ac3Settings.
        :rtype: Ac3CodingMode
        """
        return self._coding_mode

    @coding_mode.setter
    def coding_mode(self, coding_mode):
        """Sets the coding_mode of this Ac3Settings.


        :param coding_mode: The coding_mode of this Ac3Settings.
        :type coding_mode: Ac3CodingMode
        """

        self._coding_mode = coding_mode

    @property
    def dialnorm(self):
        """Gets the dialnorm of this Ac3Settings.


        :return: The dialnorm of this Ac3Settings.
        :rtype: int
        """
        return self._dialnorm

    @dialnorm.setter
    def dialnorm(self, dialnorm):
        """Sets the dialnorm of this Ac3Settings.


        :param dialnorm: The dialnorm of this Ac3Settings.
        :type dialnorm: int
        """

        self._dialnorm = dialnorm

    @property
    def dynamic_range_compression_line(self):
        """Gets the dynamic_range_compression_line of this Ac3Settings.


        :return: The dynamic_range_compression_line of this Ac3Settings.
        :rtype: Ac3DynamicRangeCompressionLine
        """
        return self._dynamic_range_compression_line

    @dynamic_range_compression_line.setter
    def dynamic_range_compression_line(self, dynamic_range_compression_line):
        """Sets the dynamic_range_compression_line of this Ac3Settings.


        :param dynamic_range_compression_line: The dynamic_range_compression_line of this Ac3Settings.
        :type dynamic_range_compression_line: Ac3DynamicRangeCompressionLine
        """

        self._dynamic_range_compression_line = dynamic_range_compression_line

    @property
    def dynamic_range_compression_profile(self):
        """Gets the dynamic_range_compression_profile of this Ac3Settings.


        :return: The dynamic_range_compression_profile of this Ac3Settings.
        :rtype: Ac3DynamicRangeCompressionProfile
        """
        return self._dynamic_range_compression_profile

    @dynamic_range_compression_profile.setter
    def dynamic_range_compression_profile(self, dynamic_range_compression_profile):
        """Sets the dynamic_range_compression_profile of this Ac3Settings.


        :param dynamic_range_compression_profile: The dynamic_range_compression_profile of this Ac3Settings.
        :type dynamic_range_compression_profile: Ac3DynamicRangeCompressionProfile
        """

        self._dynamic_range_compression_profile = dynamic_range_compression_profile

    @property
    def dynamic_range_compression_rf(self):
        """Gets the dynamic_range_compression_rf of this Ac3Settings.


        :return: The dynamic_range_compression_rf of this Ac3Settings.
        :rtype: Ac3DynamicRangeCompressionRf
        """
        return self._dynamic_range_compression_rf

    @dynamic_range_compression_rf.setter
    def dynamic_range_compression_rf(self, dynamic_range_compression_rf):
        """Sets the dynamic_range_compression_rf of this Ac3Settings.


        :param dynamic_range_compression_rf: The dynamic_range_compression_rf of this Ac3Settings.
        :type dynamic_range_compression_rf: Ac3DynamicRangeCompressionRf
        """

        self._dynamic_range_compression_rf = dynamic_range_compression_rf

    @property
    def lfe_filter(self):
        """Gets the lfe_filter of this Ac3Settings.


        :return: The lfe_filter of this Ac3Settings.
        :rtype: Ac3LfeFilter
        """
        return self._lfe_filter

    @lfe_filter.setter
    def lfe_filter(self, lfe_filter):
        """Sets the lfe_filter of this Ac3Settings.


        :param lfe_filter: The lfe_filter of this Ac3Settings.
        :type lfe_filter: Ac3LfeFilter
        """

        self._lfe_filter = lfe_filter

    @property
    def metadata_control(self):
        """Gets the metadata_control of this Ac3Settings.


        :return: The metadata_control of this Ac3Settings.
        :rtype: Ac3MetadataControl
        """
        return self._metadata_control

    @metadata_control.setter
    def metadata_control(self, metadata_control):
        """Sets the metadata_control of this Ac3Settings.


        :param metadata_control: The metadata_control of this Ac3Settings.
        :type metadata_control: Ac3MetadataControl
        """

        self._metadata_control = metadata_control

    @property
    def sample_rate(self):
        """Gets the sample_rate of this Ac3Settings.


        :return: The sample_rate of this Ac3Settings.
        :rtype: int
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this Ac3Settings.


        :param sample_rate: The sample_rate of this Ac3Settings.
        :type sample_rate: int
        """

        self._sample_rate = sample_rate
