# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.watermarking_strength import WatermarkingStrength
from openapi_server import util


class PartnerWatermarkingNexguardFileMarkerSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license: str=None, payload: int=None, preset: str=None, strength: WatermarkingStrength=None):
        """PartnerWatermarkingNexguardFileMarkerSettings - a model defined in OpenAPI

        :param license: The license of this PartnerWatermarkingNexguardFileMarkerSettings.
        :param payload: The payload of this PartnerWatermarkingNexguardFileMarkerSettings.
        :param preset: The preset of this PartnerWatermarkingNexguardFileMarkerSettings.
        :param strength: The strength of this PartnerWatermarkingNexguardFileMarkerSettings.
        """
        self.openapi_types = {
            'license': str,
            'payload': int,
            'preset': str,
            'strength': WatermarkingStrength
        }

        self.attribute_map = {
            'license': 'License',
            'payload': 'Payload',
            'preset': 'Preset',
            'strength': 'Strength'
        }

        self._license = license
        self._payload = payload
        self._preset = preset
        self._strength = strength

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartnerWatermarkingNexguardFileMarkerSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartnerWatermarking_NexguardFileMarkerSettings of this PartnerWatermarkingNexguardFileMarkerSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license(self):
        """Gets the license of this PartnerWatermarkingNexguardFileMarkerSettings.


        :return: The license of this PartnerWatermarkingNexguardFileMarkerSettings.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this PartnerWatermarkingNexguardFileMarkerSettings.


        :param license: The license of this PartnerWatermarkingNexguardFileMarkerSettings.
        :type license: str
        """

        self._license = license

    @property
    def payload(self):
        """Gets the payload of this PartnerWatermarkingNexguardFileMarkerSettings.


        :return: The payload of this PartnerWatermarkingNexguardFileMarkerSettings.
        :rtype: int
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this PartnerWatermarkingNexguardFileMarkerSettings.


        :param payload: The payload of this PartnerWatermarkingNexguardFileMarkerSettings.
        :type payload: int
        """

        self._payload = payload

    @property
    def preset(self):
        """Gets the preset of this PartnerWatermarkingNexguardFileMarkerSettings.


        :return: The preset of this PartnerWatermarkingNexguardFileMarkerSettings.
        :rtype: str
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this PartnerWatermarkingNexguardFileMarkerSettings.


        :param preset: The preset of this PartnerWatermarkingNexguardFileMarkerSettings.
        :type preset: str
        """

        self._preset = preset

    @property
    def strength(self):
        """Gets the strength of this PartnerWatermarkingNexguardFileMarkerSettings.


        :return: The strength of this PartnerWatermarkingNexguardFileMarkerSettings.
        :rtype: WatermarkingStrength
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this PartnerWatermarkingNexguardFileMarkerSettings.


        :param strength: The strength of this PartnerWatermarkingNexguardFileMarkerSettings.
        :type strength: WatermarkingStrength
        """

        self._strength = strength
