# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_job_request_acceleration_settings import CreateJobRequestAccelerationSettings
from openapi_server.models.create_job_template_request_settings import CreateJobTemplateRequestSettings
from openapi_server.models.hop_destination import HopDestination
from openapi_server import util


class CreateJobTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acceleration_settings: CreateJobRequestAccelerationSettings=None, category: str=None, description: str=None, hop_destinations: List[HopDestination]=None, name: str=None, priority: int=None, queue: str=None, settings: CreateJobTemplateRequestSettings=None, status_update_interval: str=None, tags: Dict[str, str]=None):
        """CreateJobTemplateRequest - a model defined in OpenAPI

        :param acceleration_settings: The acceleration_settings of this CreateJobTemplateRequest.
        :param category: The category of this CreateJobTemplateRequest.
        :param description: The description of this CreateJobTemplateRequest.
        :param hop_destinations: The hop_destinations of this CreateJobTemplateRequest.
        :param name: The name of this CreateJobTemplateRequest.
        :param priority: The priority of this CreateJobTemplateRequest.
        :param queue: The queue of this CreateJobTemplateRequest.
        :param settings: The settings of this CreateJobTemplateRequest.
        :param status_update_interval: The status_update_interval of this CreateJobTemplateRequest.
        :param tags: The tags of this CreateJobTemplateRequest.
        """
        self.openapi_types = {
            'acceleration_settings': CreateJobRequestAccelerationSettings,
            'category': str,
            'description': str,
            'hop_destinations': List[HopDestination],
            'name': str,
            'priority': int,
            'queue': str,
            'settings': CreateJobTemplateRequestSettings,
            'status_update_interval': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'acceleration_settings': 'accelerationSettings',
            'category': 'category',
            'description': 'description',
            'hop_destinations': 'hopDestinations',
            'name': 'name',
            'priority': 'priority',
            'queue': 'queue',
            'settings': 'settings',
            'status_update_interval': 'statusUpdateInterval',
            'tags': 'tags'
        }

        self._acceleration_settings = acceleration_settings
        self._category = category
        self._description = description
        self._hop_destinations = hop_destinations
        self._name = name
        self._priority = priority
        self._queue = queue
        self._settings = settings
        self._status_update_interval = status_update_interval
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJobTemplate_request of this CreateJobTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceleration_settings(self):
        """Gets the acceleration_settings of this CreateJobTemplateRequest.


        :return: The acceleration_settings of this CreateJobTemplateRequest.
        :rtype: CreateJobRequestAccelerationSettings
        """
        return self._acceleration_settings

    @acceleration_settings.setter
    def acceleration_settings(self, acceleration_settings):
        """Sets the acceleration_settings of this CreateJobTemplateRequest.


        :param acceleration_settings: The acceleration_settings of this CreateJobTemplateRequest.
        :type acceleration_settings: CreateJobRequestAccelerationSettings
        """

        self._acceleration_settings = acceleration_settings

    @property
    def category(self):
        """Gets the category of this CreateJobTemplateRequest.

        Optional. A category for the job template you are creating

        :return: The category of this CreateJobTemplateRequest.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CreateJobTemplateRequest.

        Optional. A category for the job template you are creating

        :param category: The category of this CreateJobTemplateRequest.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this CreateJobTemplateRequest.

        Optional. A description of the job template you are creating.

        :return: The description of this CreateJobTemplateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateJobTemplateRequest.

        Optional. A description of the job template you are creating.

        :param description: The description of this CreateJobTemplateRequest.
        :type description: str
        """

        self._description = description

    @property
    def hop_destinations(self):
        """Gets the hop_destinations of this CreateJobTemplateRequest.

        Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.

        :return: The hop_destinations of this CreateJobTemplateRequest.
        :rtype: List[HopDestination]
        """
        return self._hop_destinations

    @hop_destinations.setter
    def hop_destinations(self, hop_destinations):
        """Sets the hop_destinations of this CreateJobTemplateRequest.

        Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.

        :param hop_destinations: The hop_destinations of this CreateJobTemplateRequest.
        :type hop_destinations: List[HopDestination]
        """

        self._hop_destinations = hop_destinations

    @property
    def name(self):
        """Gets the name of this CreateJobTemplateRequest.

        The name of the job template you are creating.

        :return: The name of this CreateJobTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateJobTemplateRequest.

        The name of the job template you are creating.

        :param name: The name of this CreateJobTemplateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this CreateJobTemplateRequest.

        Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.

        :return: The priority of this CreateJobTemplateRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateJobTemplateRequest.

        Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.

        :param priority: The priority of this CreateJobTemplateRequest.
        :type priority: int
        """
        if priority is not None and priority > 50:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `50`")
        if priority is not None and priority < -50:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `-50`")

        self._priority = priority

    @property
    def queue(self):
        """Gets the queue of this CreateJobTemplateRequest.

        Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.

        :return: The queue of this CreateJobTemplateRequest.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this CreateJobTemplateRequest.

        Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.

        :param queue: The queue of this CreateJobTemplateRequest.
        :type queue: str
        """

        self._queue = queue

    @property
    def settings(self):
        """Gets the settings of this CreateJobTemplateRequest.


        :return: The settings of this CreateJobTemplateRequest.
        :rtype: CreateJobTemplateRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateJobTemplateRequest.


        :param settings: The settings of this CreateJobTemplateRequest.
        :type settings: CreateJobTemplateRequestSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def status_update_interval(self):
        """Gets the status_update_interval of this CreateJobTemplateRequest.

        Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.

        :return: The status_update_interval of this CreateJobTemplateRequest.
        :rtype: str
        """
        return self._status_update_interval

    @status_update_interval.setter
    def status_update_interval(self, status_update_interval):
        """Sets the status_update_interval of this CreateJobTemplateRequest.

        Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.

        :param status_update_interval: The status_update_interval of this CreateJobTemplateRequest.
        :type status_update_interval: str
        """
        allowed_values = ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]  # noqa: E501
        if status_update_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `status_update_interval` ({0}), must be one of {1}"
                .format(status_update_interval, allowed_values)
            )

        self._status_update_interval = status_update_interval

    @property
    def tags(self):
        """Gets the tags of this CreateJobTemplateRequest.

        The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.

        :return: The tags of this CreateJobTemplateRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateJobTemplateRequest.

        The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.

        :param tags: The tags of this CreateJobTemplateRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
