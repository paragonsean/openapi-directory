# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.esam_settings_manifest_confirm_condition_notification import EsamSettingsManifestConfirmConditionNotification
from openapi_server.models.esam_settings_signal_processing_notification import EsamSettingsSignalProcessingNotification
from openapi_server import util


class CreateJobRequestSettingsEsam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manifest_confirm_condition_notification: EsamSettingsManifestConfirmConditionNotification=None, response_signal_preroll: int=None, signal_processing_notification: EsamSettingsSignalProcessingNotification=None):
        """CreateJobRequestSettingsEsam - a model defined in OpenAPI

        :param manifest_confirm_condition_notification: The manifest_confirm_condition_notification of this CreateJobRequestSettingsEsam.
        :param response_signal_preroll: The response_signal_preroll of this CreateJobRequestSettingsEsam.
        :param signal_processing_notification: The signal_processing_notification of this CreateJobRequestSettingsEsam.
        """
        self.openapi_types = {
            'manifest_confirm_condition_notification': EsamSettingsManifestConfirmConditionNotification,
            'response_signal_preroll': int,
            'signal_processing_notification': EsamSettingsSignalProcessingNotification
        }

        self.attribute_map = {
            'manifest_confirm_condition_notification': 'ManifestConfirmConditionNotification',
            'response_signal_preroll': 'ResponseSignalPreroll',
            'signal_processing_notification': 'SignalProcessingNotification'
        }

        self._manifest_confirm_condition_notification = manifest_confirm_condition_notification
        self._response_signal_preroll = response_signal_preroll
        self._signal_processing_notification = signal_processing_notification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobRequestSettingsEsam':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJob_request_settings_Esam of this CreateJobRequestSettingsEsam.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manifest_confirm_condition_notification(self):
        """Gets the manifest_confirm_condition_notification of this CreateJobRequestSettingsEsam.


        :return: The manifest_confirm_condition_notification of this CreateJobRequestSettingsEsam.
        :rtype: EsamSettingsManifestConfirmConditionNotification
        """
        return self._manifest_confirm_condition_notification

    @manifest_confirm_condition_notification.setter
    def manifest_confirm_condition_notification(self, manifest_confirm_condition_notification):
        """Sets the manifest_confirm_condition_notification of this CreateJobRequestSettingsEsam.


        :param manifest_confirm_condition_notification: The manifest_confirm_condition_notification of this CreateJobRequestSettingsEsam.
        :type manifest_confirm_condition_notification: EsamSettingsManifestConfirmConditionNotification
        """

        self._manifest_confirm_condition_notification = manifest_confirm_condition_notification

    @property
    def response_signal_preroll(self):
        """Gets the response_signal_preroll of this CreateJobRequestSettingsEsam.


        :return: The response_signal_preroll of this CreateJobRequestSettingsEsam.
        :rtype: int
        """
        return self._response_signal_preroll

    @response_signal_preroll.setter
    def response_signal_preroll(self, response_signal_preroll):
        """Sets the response_signal_preroll of this CreateJobRequestSettingsEsam.


        :param response_signal_preroll: The response_signal_preroll of this CreateJobRequestSettingsEsam.
        :type response_signal_preroll: int
        """

        self._response_signal_preroll = response_signal_preroll

    @property
    def signal_processing_notification(self):
        """Gets the signal_processing_notification of this CreateJobRequestSettingsEsam.


        :return: The signal_processing_notification of this CreateJobRequestSettingsEsam.
        :rtype: EsamSettingsSignalProcessingNotification
        """
        return self._signal_processing_notification

    @signal_processing_notification.setter
    def signal_processing_notification(self, signal_processing_notification):
        """Sets the signal_processing_notification of this CreateJobRequestSettingsEsam.


        :param signal_processing_notification: The signal_processing_notification of this CreateJobRequestSettingsEsam.
        :type signal_processing_notification: EsamSettingsSignalProcessingNotification
        """

        self._signal_processing_notification = signal_processing_notification
