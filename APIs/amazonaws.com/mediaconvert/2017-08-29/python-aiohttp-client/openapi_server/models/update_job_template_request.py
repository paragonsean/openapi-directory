# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_job_request_acceleration_settings import CreateJobRequestAccelerationSettings
from openapi_server.models.create_job_template_request_settings import CreateJobTemplateRequestSettings
from openapi_server.models.hop_destination import HopDestination
from openapi_server import util


class UpdateJobTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acceleration_settings: CreateJobRequestAccelerationSettings=None, category: str=None, description: str=None, hop_destinations: List[HopDestination]=None, priority: int=None, queue: str=None, settings: CreateJobTemplateRequestSettings=None, status_update_interval: str=None):
        """UpdateJobTemplateRequest - a model defined in OpenAPI

        :param acceleration_settings: The acceleration_settings of this UpdateJobTemplateRequest.
        :param category: The category of this UpdateJobTemplateRequest.
        :param description: The description of this UpdateJobTemplateRequest.
        :param hop_destinations: The hop_destinations of this UpdateJobTemplateRequest.
        :param priority: The priority of this UpdateJobTemplateRequest.
        :param queue: The queue of this UpdateJobTemplateRequest.
        :param settings: The settings of this UpdateJobTemplateRequest.
        :param status_update_interval: The status_update_interval of this UpdateJobTemplateRequest.
        """
        self.openapi_types = {
            'acceleration_settings': CreateJobRequestAccelerationSettings,
            'category': str,
            'description': str,
            'hop_destinations': List[HopDestination],
            'priority': int,
            'queue': str,
            'settings': CreateJobTemplateRequestSettings,
            'status_update_interval': str
        }

        self.attribute_map = {
            'acceleration_settings': 'accelerationSettings',
            'category': 'category',
            'description': 'description',
            'hop_destinations': 'hopDestinations',
            'priority': 'priority',
            'queue': 'queue',
            'settings': 'settings',
            'status_update_interval': 'statusUpdateInterval'
        }

        self._acceleration_settings = acceleration_settings
        self._category = category
        self._description = description
        self._hop_destinations = hop_destinations
        self._priority = priority
        self._queue = queue
        self._settings = settings
        self._status_update_interval = status_update_interval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateJobTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateJobTemplate_request of this UpdateJobTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceleration_settings(self):
        """Gets the acceleration_settings of this UpdateJobTemplateRequest.


        :return: The acceleration_settings of this UpdateJobTemplateRequest.
        :rtype: CreateJobRequestAccelerationSettings
        """
        return self._acceleration_settings

    @acceleration_settings.setter
    def acceleration_settings(self, acceleration_settings):
        """Sets the acceleration_settings of this UpdateJobTemplateRequest.


        :param acceleration_settings: The acceleration_settings of this UpdateJobTemplateRequest.
        :type acceleration_settings: CreateJobRequestAccelerationSettings
        """

        self._acceleration_settings = acceleration_settings

    @property
    def category(self):
        """Gets the category of this UpdateJobTemplateRequest.

        The new category for the job template, if you are changing it.

        :return: The category of this UpdateJobTemplateRequest.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UpdateJobTemplateRequest.

        The new category for the job template, if you are changing it.

        :param category: The category of this UpdateJobTemplateRequest.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this UpdateJobTemplateRequest.

        The new description for the job template, if you are changing it.

        :return: The description of this UpdateJobTemplateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateJobTemplateRequest.

        The new description for the job template, if you are changing it.

        :param description: The description of this UpdateJobTemplateRequest.
        :type description: str
        """

        self._description = description

    @property
    def hop_destinations(self):
        """Gets the hop_destinations of this UpdateJobTemplateRequest.

        Optional list of hop destinations.

        :return: The hop_destinations of this UpdateJobTemplateRequest.
        :rtype: List[HopDestination]
        """
        return self._hop_destinations

    @hop_destinations.setter
    def hop_destinations(self, hop_destinations):
        """Sets the hop_destinations of this UpdateJobTemplateRequest.

        Optional list of hop destinations.

        :param hop_destinations: The hop_destinations of this UpdateJobTemplateRequest.
        :type hop_destinations: List[HopDestination]
        """

        self._hop_destinations = hop_destinations

    @property
    def priority(self):
        """Gets the priority of this UpdateJobTemplateRequest.

        Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.

        :return: The priority of this UpdateJobTemplateRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this UpdateJobTemplateRequest.

        Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.

        :param priority: The priority of this UpdateJobTemplateRequest.
        :type priority: int
        """
        if priority is not None and priority > 50:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `50`")
        if priority is not None and priority < -50:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `-50`")

        self._priority = priority

    @property
    def queue(self):
        """Gets the queue of this UpdateJobTemplateRequest.

        The new queue for the job template, if you are changing it.

        :return: The queue of this UpdateJobTemplateRequest.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this UpdateJobTemplateRequest.

        The new queue for the job template, if you are changing it.

        :param queue: The queue of this UpdateJobTemplateRequest.
        :type queue: str
        """

        self._queue = queue

    @property
    def settings(self):
        """Gets the settings of this UpdateJobTemplateRequest.


        :return: The settings of this UpdateJobTemplateRequest.
        :rtype: CreateJobTemplateRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UpdateJobTemplateRequest.


        :param settings: The settings of this UpdateJobTemplateRequest.
        :type settings: CreateJobTemplateRequestSettings
        """

        self._settings = settings

    @property
    def status_update_interval(self):
        """Gets the status_update_interval of this UpdateJobTemplateRequest.

        Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.

        :return: The status_update_interval of this UpdateJobTemplateRequest.
        :rtype: str
        """
        return self._status_update_interval

    @status_update_interval.setter
    def status_update_interval(self, status_update_interval):
        """Sets the status_update_interval of this UpdateJobTemplateRequest.

        Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.

        :param status_update_interval: The status_update_interval of this UpdateJobTemplateRequest.
        :type status_update_interval: str
        """
        allowed_values = ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]  # noqa: E501
        if status_update_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `status_update_interval` ({0}), must be one of {1}"
                .format(status_update_interval, allowed_values)
            )

        self._status_update_interval = status_update_interval
