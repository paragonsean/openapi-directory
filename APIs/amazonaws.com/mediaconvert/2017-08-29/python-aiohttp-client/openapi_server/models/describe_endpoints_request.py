# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeEndpointsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, mode: str=None, next_token: str=None):
        """DescribeEndpointsRequest - a model defined in OpenAPI

        :param max_results: The max_results of this DescribeEndpointsRequest.
        :param mode: The mode of this DescribeEndpointsRequest.
        :param next_token: The next_token of this DescribeEndpointsRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'mode': str,
            'next_token': str
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'mode': 'mode',
            'next_token': 'nextToken'
        }

        self._max_results = max_results
        self._mode = mode
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeEndpointsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeEndpoints_request of this DescribeEndpointsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this DescribeEndpointsRequest.

        Optional. Max number of endpoints, up to twenty, that will be returned at one time.

        :return: The max_results of this DescribeEndpointsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeEndpointsRequest.

        Optional. Max number of endpoints, up to twenty, that will be returned at one time.

        :param max_results: The max_results of this DescribeEndpointsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def mode(self):
        """Gets the mode of this DescribeEndpointsRequest.

        Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.

        :return: The mode of this DescribeEndpointsRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DescribeEndpointsRequest.

        Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.

        :param mode: The mode of this DescribeEndpointsRequest.
        :type mode: str
        """
        allowed_values = ["DEFAULT", "GET_ONLY"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def next_token(self):
        """Gets the next_token of this DescribeEndpointsRequest.

        Use this string, provided with the response to a previous request, to request the next batch of endpoints.

        :return: The next_token of this DescribeEndpointsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeEndpointsRequest.

        Use this string, provided with the response to a previous request, to request the next batch of endpoints.

        :param next_token: The next_token of this DescribeEndpointsRequest.
        :type next_token: str
        """

        self._next_token = next_token
