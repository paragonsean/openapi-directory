# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bandwidth_reduction_filter_sharpening import BandwidthReductionFilterSharpening
from openapi_server.models.bandwidth_reduction_filter_strength import BandwidthReductionFilterStrength
from openapi_server import util


class BandwidthReductionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sharpening: BandwidthReductionFilterSharpening=None, strength: BandwidthReductionFilterStrength=None):
        """BandwidthReductionFilter - a model defined in OpenAPI

        :param sharpening: The sharpening of this BandwidthReductionFilter.
        :param strength: The strength of this BandwidthReductionFilter.
        """
        self.openapi_types = {
            'sharpening': BandwidthReductionFilterSharpening,
            'strength': BandwidthReductionFilterStrength
        }

        self.attribute_map = {
            'sharpening': 'Sharpening',
            'strength': 'Strength'
        }

        self._sharpening = sharpening
        self._strength = strength

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BandwidthReductionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BandwidthReductionFilter of this BandwidthReductionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sharpening(self):
        """Gets the sharpening of this BandwidthReductionFilter.


        :return: The sharpening of this BandwidthReductionFilter.
        :rtype: BandwidthReductionFilterSharpening
        """
        return self._sharpening

    @sharpening.setter
    def sharpening(self, sharpening):
        """Sets the sharpening of this BandwidthReductionFilter.


        :param sharpening: The sharpening of this BandwidthReductionFilter.
        :type sharpening: BandwidthReductionFilterSharpening
        """

        self._sharpening = sharpening

    @property
    def strength(self):
        """Gets the strength of this BandwidthReductionFilter.


        :return: The strength of this BandwidthReductionFilter.
        :rtype: BandwidthReductionFilterStrength
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this BandwidthReductionFilter.


        :param strength: The strength of this BandwidthReductionFilter.
        :type strength: BandwidthReductionFilterStrength
        """

        self._strength = strength
