# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_preset_request_settings import CreatePresetRequestSettings
from openapi_server import util


class CreatePresetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, description: str=None, name: str=None, settings: CreatePresetRequestSettings=None, tags: Dict[str, str]=None):
        """CreatePresetRequest - a model defined in OpenAPI

        :param category: The category of this CreatePresetRequest.
        :param description: The description of this CreatePresetRequest.
        :param name: The name of this CreatePresetRequest.
        :param settings: The settings of this CreatePresetRequest.
        :param tags: The tags of this CreatePresetRequest.
        """
        self.openapi_types = {
            'category': str,
            'description': str,
            'name': str,
            'settings': CreatePresetRequestSettings,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description',
            'name': 'name',
            'settings': 'settings',
            'tags': 'tags'
        }

        self._category = category
        self._description = description
        self._name = name
        self._settings = settings
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePresetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePreset_request of this CreatePresetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CreatePresetRequest.

        Optional. A category for the preset you are creating.

        :return: The category of this CreatePresetRequest.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CreatePresetRequest.

        Optional. A category for the preset you are creating.

        :param category: The category of this CreatePresetRequest.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this CreatePresetRequest.

        Optional. A description of the preset you are creating.

        :return: The description of this CreatePresetRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePresetRequest.

        Optional. A description of the preset you are creating.

        :param description: The description of this CreatePresetRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreatePresetRequest.

        The name of the preset you are creating.

        :return: The name of this CreatePresetRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePresetRequest.

        The name of the preset you are creating.

        :param name: The name of this CreatePresetRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def settings(self):
        """Gets the settings of this CreatePresetRequest.


        :return: The settings of this CreatePresetRequest.
        :rtype: CreatePresetRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreatePresetRequest.


        :param settings: The settings of this CreatePresetRequest.
        :type settings: CreatePresetRequestSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def tags(self):
        """Gets the tags of this CreatePresetRequest.

        The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.

        :return: The tags of this CreatePresetRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePresetRequest.

        The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.

        :param tags: The tags of this CreatePresetRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
