# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.afd_signaling import AfdSignaling
from openapi_server.models.anti_alias import AntiAlias
from openapi_server.models.color_metadata import ColorMetadata
from openapi_server.models.drop_frame_timecode import DropFrameTimecode
from openapi_server.models.respond_to_afd import RespondToAfd
from openapi_server.models.scaling_behavior import ScalingBehavior
from openapi_server.models.video_description_codec_settings import VideoDescriptionCodecSettings
from openapi_server.models.video_description_crop import VideoDescriptionCrop
from openapi_server.models.video_description_position import VideoDescriptionPosition
from openapi_server.models.video_description_video_preprocessors import VideoDescriptionVideoPreprocessors
from openapi_server.models.video_timecode_insertion import VideoTimecodeInsertion
from openapi_server import util


class VideoDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, afd_signaling: AfdSignaling=None, anti_alias: AntiAlias=None, codec_settings: VideoDescriptionCodecSettings=None, color_metadata: ColorMetadata=None, crop: VideoDescriptionCrop=None, drop_frame_timecode: DropFrameTimecode=None, fixed_afd: int=None, height: int=None, position: VideoDescriptionPosition=None, respond_to_afd: RespondToAfd=None, scaling_behavior: ScalingBehavior=None, sharpness: int=None, timecode_insertion: VideoTimecodeInsertion=None, video_preprocessors: VideoDescriptionVideoPreprocessors=None, width: int=None):
        """VideoDescription - a model defined in OpenAPI

        :param afd_signaling: The afd_signaling of this VideoDescription.
        :param anti_alias: The anti_alias of this VideoDescription.
        :param codec_settings: The codec_settings of this VideoDescription.
        :param color_metadata: The color_metadata of this VideoDescription.
        :param crop: The crop of this VideoDescription.
        :param drop_frame_timecode: The drop_frame_timecode of this VideoDescription.
        :param fixed_afd: The fixed_afd of this VideoDescription.
        :param height: The height of this VideoDescription.
        :param position: The position of this VideoDescription.
        :param respond_to_afd: The respond_to_afd of this VideoDescription.
        :param scaling_behavior: The scaling_behavior of this VideoDescription.
        :param sharpness: The sharpness of this VideoDescription.
        :param timecode_insertion: The timecode_insertion of this VideoDescription.
        :param video_preprocessors: The video_preprocessors of this VideoDescription.
        :param width: The width of this VideoDescription.
        """
        self.openapi_types = {
            'afd_signaling': AfdSignaling,
            'anti_alias': AntiAlias,
            'codec_settings': VideoDescriptionCodecSettings,
            'color_metadata': ColorMetadata,
            'crop': VideoDescriptionCrop,
            'drop_frame_timecode': DropFrameTimecode,
            'fixed_afd': int,
            'height': int,
            'position': VideoDescriptionPosition,
            'respond_to_afd': RespondToAfd,
            'scaling_behavior': ScalingBehavior,
            'sharpness': int,
            'timecode_insertion': VideoTimecodeInsertion,
            'video_preprocessors': VideoDescriptionVideoPreprocessors,
            'width': int
        }

        self.attribute_map = {
            'afd_signaling': 'AfdSignaling',
            'anti_alias': 'AntiAlias',
            'codec_settings': 'CodecSettings',
            'color_metadata': 'ColorMetadata',
            'crop': 'Crop',
            'drop_frame_timecode': 'DropFrameTimecode',
            'fixed_afd': 'FixedAfd',
            'height': 'Height',
            'position': 'Position',
            'respond_to_afd': 'RespondToAfd',
            'scaling_behavior': 'ScalingBehavior',
            'sharpness': 'Sharpness',
            'timecode_insertion': 'TimecodeInsertion',
            'video_preprocessors': 'VideoPreprocessors',
            'width': 'Width'
        }

        self._afd_signaling = afd_signaling
        self._anti_alias = anti_alias
        self._codec_settings = codec_settings
        self._color_metadata = color_metadata
        self._crop = crop
        self._drop_frame_timecode = drop_frame_timecode
        self._fixed_afd = fixed_afd
        self._height = height
        self._position = position
        self._respond_to_afd = respond_to_afd
        self._scaling_behavior = scaling_behavior
        self._sharpness = sharpness
        self._timecode_insertion = timecode_insertion
        self._video_preprocessors = video_preprocessors
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoDescription of this VideoDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def afd_signaling(self):
        """Gets the afd_signaling of this VideoDescription.


        :return: The afd_signaling of this VideoDescription.
        :rtype: AfdSignaling
        """
        return self._afd_signaling

    @afd_signaling.setter
    def afd_signaling(self, afd_signaling):
        """Sets the afd_signaling of this VideoDescription.


        :param afd_signaling: The afd_signaling of this VideoDescription.
        :type afd_signaling: AfdSignaling
        """

        self._afd_signaling = afd_signaling

    @property
    def anti_alias(self):
        """Gets the anti_alias of this VideoDescription.


        :return: The anti_alias of this VideoDescription.
        :rtype: AntiAlias
        """
        return self._anti_alias

    @anti_alias.setter
    def anti_alias(self, anti_alias):
        """Sets the anti_alias of this VideoDescription.


        :param anti_alias: The anti_alias of this VideoDescription.
        :type anti_alias: AntiAlias
        """

        self._anti_alias = anti_alias

    @property
    def codec_settings(self):
        """Gets the codec_settings of this VideoDescription.


        :return: The codec_settings of this VideoDescription.
        :rtype: VideoDescriptionCodecSettings
        """
        return self._codec_settings

    @codec_settings.setter
    def codec_settings(self, codec_settings):
        """Sets the codec_settings of this VideoDescription.


        :param codec_settings: The codec_settings of this VideoDescription.
        :type codec_settings: VideoDescriptionCodecSettings
        """

        self._codec_settings = codec_settings

    @property
    def color_metadata(self):
        """Gets the color_metadata of this VideoDescription.


        :return: The color_metadata of this VideoDescription.
        :rtype: ColorMetadata
        """
        return self._color_metadata

    @color_metadata.setter
    def color_metadata(self, color_metadata):
        """Sets the color_metadata of this VideoDescription.


        :param color_metadata: The color_metadata of this VideoDescription.
        :type color_metadata: ColorMetadata
        """

        self._color_metadata = color_metadata

    @property
    def crop(self):
        """Gets the crop of this VideoDescription.


        :return: The crop of this VideoDescription.
        :rtype: VideoDescriptionCrop
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this VideoDescription.


        :param crop: The crop of this VideoDescription.
        :type crop: VideoDescriptionCrop
        """

        self._crop = crop

    @property
    def drop_frame_timecode(self):
        """Gets the drop_frame_timecode of this VideoDescription.


        :return: The drop_frame_timecode of this VideoDescription.
        :rtype: DropFrameTimecode
        """
        return self._drop_frame_timecode

    @drop_frame_timecode.setter
    def drop_frame_timecode(self, drop_frame_timecode):
        """Sets the drop_frame_timecode of this VideoDescription.


        :param drop_frame_timecode: The drop_frame_timecode of this VideoDescription.
        :type drop_frame_timecode: DropFrameTimecode
        """

        self._drop_frame_timecode = drop_frame_timecode

    @property
    def fixed_afd(self):
        """Gets the fixed_afd of this VideoDescription.


        :return: The fixed_afd of this VideoDescription.
        :rtype: int
        """
        return self._fixed_afd

    @fixed_afd.setter
    def fixed_afd(self, fixed_afd):
        """Sets the fixed_afd of this VideoDescription.


        :param fixed_afd: The fixed_afd of this VideoDescription.
        :type fixed_afd: int
        """

        self._fixed_afd = fixed_afd

    @property
    def height(self):
        """Gets the height of this VideoDescription.


        :return: The height of this VideoDescription.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this VideoDescription.


        :param height: The height of this VideoDescription.
        :type height: int
        """

        self._height = height

    @property
    def position(self):
        """Gets the position of this VideoDescription.


        :return: The position of this VideoDescription.
        :rtype: VideoDescriptionPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this VideoDescription.


        :param position: The position of this VideoDescription.
        :type position: VideoDescriptionPosition
        """

        self._position = position

    @property
    def respond_to_afd(self):
        """Gets the respond_to_afd of this VideoDescription.


        :return: The respond_to_afd of this VideoDescription.
        :rtype: RespondToAfd
        """
        return self._respond_to_afd

    @respond_to_afd.setter
    def respond_to_afd(self, respond_to_afd):
        """Sets the respond_to_afd of this VideoDescription.


        :param respond_to_afd: The respond_to_afd of this VideoDescription.
        :type respond_to_afd: RespondToAfd
        """

        self._respond_to_afd = respond_to_afd

    @property
    def scaling_behavior(self):
        """Gets the scaling_behavior of this VideoDescription.


        :return: The scaling_behavior of this VideoDescription.
        :rtype: ScalingBehavior
        """
        return self._scaling_behavior

    @scaling_behavior.setter
    def scaling_behavior(self, scaling_behavior):
        """Sets the scaling_behavior of this VideoDescription.


        :param scaling_behavior: The scaling_behavior of this VideoDescription.
        :type scaling_behavior: ScalingBehavior
        """

        self._scaling_behavior = scaling_behavior

    @property
    def sharpness(self):
        """Gets the sharpness of this VideoDescription.


        :return: The sharpness of this VideoDescription.
        :rtype: int
        """
        return self._sharpness

    @sharpness.setter
    def sharpness(self, sharpness):
        """Sets the sharpness of this VideoDescription.


        :param sharpness: The sharpness of this VideoDescription.
        :type sharpness: int
        """

        self._sharpness = sharpness

    @property
    def timecode_insertion(self):
        """Gets the timecode_insertion of this VideoDescription.


        :return: The timecode_insertion of this VideoDescription.
        :rtype: VideoTimecodeInsertion
        """
        return self._timecode_insertion

    @timecode_insertion.setter
    def timecode_insertion(self, timecode_insertion):
        """Sets the timecode_insertion of this VideoDescription.


        :param timecode_insertion: The timecode_insertion of this VideoDescription.
        :type timecode_insertion: VideoTimecodeInsertion
        """

        self._timecode_insertion = timecode_insertion

    @property
    def video_preprocessors(self):
        """Gets the video_preprocessors of this VideoDescription.


        :return: The video_preprocessors of this VideoDescription.
        :rtype: VideoDescriptionVideoPreprocessors
        """
        return self._video_preprocessors

    @video_preprocessors.setter
    def video_preprocessors(self, video_preprocessors):
        """Sets the video_preprocessors of this VideoDescription.


        :param video_preprocessors: The video_preprocessors of this VideoDescription.
        :type video_preprocessors: VideoDescriptionVideoPreprocessors
        """

        self._video_preprocessors = video_preprocessors

    @property
    def width(self):
        """Gets the width of this VideoDescription.


        :return: The width of this VideoDescription.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this VideoDescription.


        :param width: The width of this VideoDescription.
        :type width: int
        """

        self._width = width
