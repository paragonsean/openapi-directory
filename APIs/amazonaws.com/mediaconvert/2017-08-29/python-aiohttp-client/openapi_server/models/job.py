# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acceleration_status import AccelerationStatus
from openapi_server.models.billing_tags_source import BillingTagsSource
from openapi_server.models.create_job_request_settings import CreateJobRequestSettings
from openapi_server.models.job_acceleration_settings import JobAccelerationSettings
from openapi_server.models.job_messages import JobMessages
from openapi_server.models.job_phase import JobPhase
from openapi_server.models.job_status import JobStatus
from openapi_server.models.job_timing import JobTiming
from openapi_server.models.simulate_reserved_queue import SimulateReservedQueue
from openapi_server.models.status_update_interval import StatusUpdateInterval
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acceleration_settings: JobAccelerationSettings=None, acceleration_status: AccelerationStatus=None, arn: str=None, billing_tags_source: BillingTagsSource=None, client_request_token: str=None, created_at: datetime=None, current_phase: JobPhase=None, error_code: int=None, error_message: str=None, hop_destinations: List=None, id: str=None, job_percent_complete: int=None, job_template: str=None, messages: JobMessages=None, output_group_details: List=None, priority: int=None, queue: str=None, queue_transitions: List=None, retry_count: int=None, role: str=None, settings: CreateJobRequestSettings=None, simulate_reserved_queue: SimulateReservedQueue=None, status: JobStatus=None, status_update_interval: StatusUpdateInterval=None, timing: JobTiming=None, user_metadata: Dict=None, warnings: List=None):
        """Job - a model defined in OpenAPI

        :param acceleration_settings: The acceleration_settings of this Job.
        :param acceleration_status: The acceleration_status of this Job.
        :param arn: The arn of this Job.
        :param billing_tags_source: The billing_tags_source of this Job.
        :param client_request_token: The client_request_token of this Job.
        :param created_at: The created_at of this Job.
        :param current_phase: The current_phase of this Job.
        :param error_code: The error_code of this Job.
        :param error_message: The error_message of this Job.
        :param hop_destinations: The hop_destinations of this Job.
        :param id: The id of this Job.
        :param job_percent_complete: The job_percent_complete of this Job.
        :param job_template: The job_template of this Job.
        :param messages: The messages of this Job.
        :param output_group_details: The output_group_details of this Job.
        :param priority: The priority of this Job.
        :param queue: The queue of this Job.
        :param queue_transitions: The queue_transitions of this Job.
        :param retry_count: The retry_count of this Job.
        :param role: The role of this Job.
        :param settings: The settings of this Job.
        :param simulate_reserved_queue: The simulate_reserved_queue of this Job.
        :param status: The status of this Job.
        :param status_update_interval: The status_update_interval of this Job.
        :param timing: The timing of this Job.
        :param user_metadata: The user_metadata of this Job.
        :param warnings: The warnings of this Job.
        """
        self.openapi_types = {
            'acceleration_settings': JobAccelerationSettings,
            'acceleration_status': AccelerationStatus,
            'arn': str,
            'billing_tags_source': BillingTagsSource,
            'client_request_token': str,
            'created_at': datetime,
            'current_phase': JobPhase,
            'error_code': int,
            'error_message': str,
            'hop_destinations': List,
            'id': str,
            'job_percent_complete': int,
            'job_template': str,
            'messages': JobMessages,
            'output_group_details': List,
            'priority': int,
            'queue': str,
            'queue_transitions': List,
            'retry_count': int,
            'role': str,
            'settings': CreateJobRequestSettings,
            'simulate_reserved_queue': SimulateReservedQueue,
            'status': JobStatus,
            'status_update_interval': StatusUpdateInterval,
            'timing': JobTiming,
            'user_metadata': Dict,
            'warnings': List
        }

        self.attribute_map = {
            'acceleration_settings': 'AccelerationSettings',
            'acceleration_status': 'AccelerationStatus',
            'arn': 'Arn',
            'billing_tags_source': 'BillingTagsSource',
            'client_request_token': 'ClientRequestToken',
            'created_at': 'CreatedAt',
            'current_phase': 'CurrentPhase',
            'error_code': 'ErrorCode',
            'error_message': 'ErrorMessage',
            'hop_destinations': 'HopDestinations',
            'id': 'Id',
            'job_percent_complete': 'JobPercentComplete',
            'job_template': 'JobTemplate',
            'messages': 'Messages',
            'output_group_details': 'OutputGroupDetails',
            'priority': 'Priority',
            'queue': 'Queue',
            'queue_transitions': 'QueueTransitions',
            'retry_count': 'RetryCount',
            'role': 'Role',
            'settings': 'Settings',
            'simulate_reserved_queue': 'SimulateReservedQueue',
            'status': 'Status',
            'status_update_interval': 'StatusUpdateInterval',
            'timing': 'Timing',
            'user_metadata': 'UserMetadata',
            'warnings': 'Warnings'
        }

        self._acceleration_settings = acceleration_settings
        self._acceleration_status = acceleration_status
        self._arn = arn
        self._billing_tags_source = billing_tags_source
        self._client_request_token = client_request_token
        self._created_at = created_at
        self._current_phase = current_phase
        self._error_code = error_code
        self._error_message = error_message
        self._hop_destinations = hop_destinations
        self._id = id
        self._job_percent_complete = job_percent_complete
        self._job_template = job_template
        self._messages = messages
        self._output_group_details = output_group_details
        self._priority = priority
        self._queue = queue
        self._queue_transitions = queue_transitions
        self._retry_count = retry_count
        self._role = role
        self._settings = settings
        self._simulate_reserved_queue = simulate_reserved_queue
        self._status = status
        self._status_update_interval = status_update_interval
        self._timing = timing
        self._user_metadata = user_metadata
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceleration_settings(self):
        """Gets the acceleration_settings of this Job.


        :return: The acceleration_settings of this Job.
        :rtype: JobAccelerationSettings
        """
        return self._acceleration_settings

    @acceleration_settings.setter
    def acceleration_settings(self, acceleration_settings):
        """Sets the acceleration_settings of this Job.


        :param acceleration_settings: The acceleration_settings of this Job.
        :type acceleration_settings: JobAccelerationSettings
        """

        self._acceleration_settings = acceleration_settings

    @property
    def acceleration_status(self):
        """Gets the acceleration_status of this Job.


        :return: The acceleration_status of this Job.
        :rtype: AccelerationStatus
        """
        return self._acceleration_status

    @acceleration_status.setter
    def acceleration_status(self, acceleration_status):
        """Sets the acceleration_status of this Job.


        :param acceleration_status: The acceleration_status of this Job.
        :type acceleration_status: AccelerationStatus
        """

        self._acceleration_status = acceleration_status

    @property
    def arn(self):
        """Gets the arn of this Job.


        :return: The arn of this Job.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Job.


        :param arn: The arn of this Job.
        :type arn: str
        """

        self._arn = arn

    @property
    def billing_tags_source(self):
        """Gets the billing_tags_source of this Job.


        :return: The billing_tags_source of this Job.
        :rtype: BillingTagsSource
        """
        return self._billing_tags_source

    @billing_tags_source.setter
    def billing_tags_source(self, billing_tags_source):
        """Sets the billing_tags_source of this Job.


        :param billing_tags_source: The billing_tags_source of this Job.
        :type billing_tags_source: BillingTagsSource
        """

        self._billing_tags_source = billing_tags_source

    @property
    def client_request_token(self):
        """Gets the client_request_token of this Job.


        :return: The client_request_token of this Job.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this Job.


        :param client_request_token: The client_request_token of this Job.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def created_at(self):
        """Gets the created_at of this Job.


        :return: The created_at of this Job.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Job.


        :param created_at: The created_at of this Job.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def current_phase(self):
        """Gets the current_phase of this Job.


        :return: The current_phase of this Job.
        :rtype: JobPhase
        """
        return self._current_phase

    @current_phase.setter
    def current_phase(self, current_phase):
        """Sets the current_phase of this Job.


        :param current_phase: The current_phase of this Job.
        :type current_phase: JobPhase
        """

        self._current_phase = current_phase

    @property
    def error_code(self):
        """Gets the error_code of this Job.


        :return: The error_code of this Job.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Job.


        :param error_code: The error_code of this Job.
        :type error_code: int
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this Job.


        :return: The error_message of this Job.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Job.


        :param error_message: The error_message of this Job.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def hop_destinations(self):
        """Gets the hop_destinations of this Job.


        :return: The hop_destinations of this Job.
        :rtype: List
        """
        return self._hop_destinations

    @hop_destinations.setter
    def hop_destinations(self, hop_destinations):
        """Sets the hop_destinations of this Job.


        :param hop_destinations: The hop_destinations of this Job.
        :type hop_destinations: List
        """

        self._hop_destinations = hop_destinations

    @property
    def id(self):
        """Gets the id of this Job.


        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.
        :type id: str
        """

        self._id = id

    @property
    def job_percent_complete(self):
        """Gets the job_percent_complete of this Job.


        :return: The job_percent_complete of this Job.
        :rtype: int
        """
        return self._job_percent_complete

    @job_percent_complete.setter
    def job_percent_complete(self, job_percent_complete):
        """Sets the job_percent_complete of this Job.


        :param job_percent_complete: The job_percent_complete of this Job.
        :type job_percent_complete: int
        """

        self._job_percent_complete = job_percent_complete

    @property
    def job_template(self):
        """Gets the job_template of this Job.


        :return: The job_template of this Job.
        :rtype: str
        """
        return self._job_template

    @job_template.setter
    def job_template(self, job_template):
        """Sets the job_template of this Job.


        :param job_template: The job_template of this Job.
        :type job_template: str
        """

        self._job_template = job_template

    @property
    def messages(self):
        """Gets the messages of this Job.


        :return: The messages of this Job.
        :rtype: JobMessages
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Job.


        :param messages: The messages of this Job.
        :type messages: JobMessages
        """

        self._messages = messages

    @property
    def output_group_details(self):
        """Gets the output_group_details of this Job.


        :return: The output_group_details of this Job.
        :rtype: List
        """
        return self._output_group_details

    @output_group_details.setter
    def output_group_details(self, output_group_details):
        """Sets the output_group_details of this Job.


        :param output_group_details: The output_group_details of this Job.
        :type output_group_details: List
        """

        self._output_group_details = output_group_details

    @property
    def priority(self):
        """Gets the priority of this Job.


        :return: The priority of this Job.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Job.


        :param priority: The priority of this Job.
        :type priority: int
        """

        self._priority = priority

    @property
    def queue(self):
        """Gets the queue of this Job.


        :return: The queue of this Job.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this Job.


        :param queue: The queue of this Job.
        :type queue: str
        """

        self._queue = queue

    @property
    def queue_transitions(self):
        """Gets the queue_transitions of this Job.


        :return: The queue_transitions of this Job.
        :rtype: List
        """
        return self._queue_transitions

    @queue_transitions.setter
    def queue_transitions(self, queue_transitions):
        """Sets the queue_transitions of this Job.


        :param queue_transitions: The queue_transitions of this Job.
        :type queue_transitions: List
        """

        self._queue_transitions = queue_transitions

    @property
    def retry_count(self):
        """Gets the retry_count of this Job.


        :return: The retry_count of this Job.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this Job.


        :param retry_count: The retry_count of this Job.
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def role(self):
        """Gets the role of this Job.


        :return: The role of this Job.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Job.


        :param role: The role of this Job.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def settings(self):
        """Gets the settings of this Job.


        :return: The settings of this Job.
        :rtype: CreateJobRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Job.


        :param settings: The settings of this Job.
        :type settings: CreateJobRequestSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def simulate_reserved_queue(self):
        """Gets the simulate_reserved_queue of this Job.


        :return: The simulate_reserved_queue of this Job.
        :rtype: SimulateReservedQueue
        """
        return self._simulate_reserved_queue

    @simulate_reserved_queue.setter
    def simulate_reserved_queue(self, simulate_reserved_queue):
        """Sets the simulate_reserved_queue of this Job.


        :param simulate_reserved_queue: The simulate_reserved_queue of this Job.
        :type simulate_reserved_queue: SimulateReservedQueue
        """

        self._simulate_reserved_queue = simulate_reserved_queue

    @property
    def status(self):
        """Gets the status of this Job.


        :return: The status of this Job.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.
        :type status: JobStatus
        """

        self._status = status

    @property
    def status_update_interval(self):
        """Gets the status_update_interval of this Job.


        :return: The status_update_interval of this Job.
        :rtype: StatusUpdateInterval
        """
        return self._status_update_interval

    @status_update_interval.setter
    def status_update_interval(self, status_update_interval):
        """Sets the status_update_interval of this Job.


        :param status_update_interval: The status_update_interval of this Job.
        :type status_update_interval: StatusUpdateInterval
        """

        self._status_update_interval = status_update_interval

    @property
    def timing(self):
        """Gets the timing of this Job.


        :return: The timing of this Job.
        :rtype: JobTiming
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this Job.


        :param timing: The timing of this Job.
        :type timing: JobTiming
        """

        self._timing = timing

    @property
    def user_metadata(self):
        """Gets the user_metadata of this Job.


        :return: The user_metadata of this Job.
        :rtype: Dict
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata):
        """Sets the user_metadata of this Job.


        :param user_metadata: The user_metadata of this Job.
        :type user_metadata: Dict
        """

        self._user_metadata = user_metadata

    @property
    def warnings(self):
        """Gets the warnings of this Job.


        :return: The warnings of this Job.
        :rtype: List
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Job.


        :param warnings: The warnings of this Job.
        :type warnings: List
        """

        self._warnings = warnings
