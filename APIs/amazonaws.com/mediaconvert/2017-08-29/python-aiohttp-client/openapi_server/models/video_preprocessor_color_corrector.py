# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color_corrector_clip_limits import ColorCorrectorClipLimits
from openapi_server.models.color_corrector_hdr10_metadata import ColorCorrectorHdr10Metadata
from openapi_server.models.color_space_conversion import ColorSpaceConversion
from openapi_server.models.hdrto_sdr_tone_mapper import HDRToSDRToneMapper
from openapi_server.models.sample_range_conversion import SampleRangeConversion
from openapi_server import util


class VideoPreprocessorColorCorrector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brightness: int=None, clip_limits: ColorCorrectorClipLimits=None, color_space_conversion: ColorSpaceConversion=None, contrast: int=None, hdr10_metadata: ColorCorrectorHdr10Metadata=None, hdr_to_sdr_tone_mapper: HDRToSDRToneMapper=None, hue: int=None, sample_range_conversion: SampleRangeConversion=None, saturation: int=None, sdr_reference_white_level: int=None):
        """VideoPreprocessorColorCorrector - a model defined in OpenAPI

        :param brightness: The brightness of this VideoPreprocessorColorCorrector.
        :param clip_limits: The clip_limits of this VideoPreprocessorColorCorrector.
        :param color_space_conversion: The color_space_conversion of this VideoPreprocessorColorCorrector.
        :param contrast: The contrast of this VideoPreprocessorColorCorrector.
        :param hdr10_metadata: The hdr10_metadata of this VideoPreprocessorColorCorrector.
        :param hdr_to_sdr_tone_mapper: The hdr_to_sdr_tone_mapper of this VideoPreprocessorColorCorrector.
        :param hue: The hue of this VideoPreprocessorColorCorrector.
        :param sample_range_conversion: The sample_range_conversion of this VideoPreprocessorColorCorrector.
        :param saturation: The saturation of this VideoPreprocessorColorCorrector.
        :param sdr_reference_white_level: The sdr_reference_white_level of this VideoPreprocessorColorCorrector.
        """
        self.openapi_types = {
            'brightness': int,
            'clip_limits': ColorCorrectorClipLimits,
            'color_space_conversion': ColorSpaceConversion,
            'contrast': int,
            'hdr10_metadata': ColorCorrectorHdr10Metadata,
            'hdr_to_sdr_tone_mapper': HDRToSDRToneMapper,
            'hue': int,
            'sample_range_conversion': SampleRangeConversion,
            'saturation': int,
            'sdr_reference_white_level': int
        }

        self.attribute_map = {
            'brightness': 'Brightness',
            'clip_limits': 'ClipLimits',
            'color_space_conversion': 'ColorSpaceConversion',
            'contrast': 'Contrast',
            'hdr10_metadata': 'Hdr10Metadata',
            'hdr_to_sdr_tone_mapper': 'HdrToSdrToneMapper',
            'hue': 'Hue',
            'sample_range_conversion': 'SampleRangeConversion',
            'saturation': 'Saturation',
            'sdr_reference_white_level': 'SdrReferenceWhiteLevel'
        }

        self._brightness = brightness
        self._clip_limits = clip_limits
        self._color_space_conversion = color_space_conversion
        self._contrast = contrast
        self._hdr10_metadata = hdr10_metadata
        self._hdr_to_sdr_tone_mapper = hdr_to_sdr_tone_mapper
        self._hue = hue
        self._sample_range_conversion = sample_range_conversion
        self._saturation = saturation
        self._sdr_reference_white_level = sdr_reference_white_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoPreprocessorColorCorrector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoPreprocessor_ColorCorrector of this VideoPreprocessorColorCorrector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brightness(self):
        """Gets the brightness of this VideoPreprocessorColorCorrector.


        :return: The brightness of this VideoPreprocessorColorCorrector.
        :rtype: int
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness):
        """Sets the brightness of this VideoPreprocessorColorCorrector.


        :param brightness: The brightness of this VideoPreprocessorColorCorrector.
        :type brightness: int
        """

        self._brightness = brightness

    @property
    def clip_limits(self):
        """Gets the clip_limits of this VideoPreprocessorColorCorrector.


        :return: The clip_limits of this VideoPreprocessorColorCorrector.
        :rtype: ColorCorrectorClipLimits
        """
        return self._clip_limits

    @clip_limits.setter
    def clip_limits(self, clip_limits):
        """Sets the clip_limits of this VideoPreprocessorColorCorrector.


        :param clip_limits: The clip_limits of this VideoPreprocessorColorCorrector.
        :type clip_limits: ColorCorrectorClipLimits
        """

        self._clip_limits = clip_limits

    @property
    def color_space_conversion(self):
        """Gets the color_space_conversion of this VideoPreprocessorColorCorrector.


        :return: The color_space_conversion of this VideoPreprocessorColorCorrector.
        :rtype: ColorSpaceConversion
        """
        return self._color_space_conversion

    @color_space_conversion.setter
    def color_space_conversion(self, color_space_conversion):
        """Sets the color_space_conversion of this VideoPreprocessorColorCorrector.


        :param color_space_conversion: The color_space_conversion of this VideoPreprocessorColorCorrector.
        :type color_space_conversion: ColorSpaceConversion
        """

        self._color_space_conversion = color_space_conversion

    @property
    def contrast(self):
        """Gets the contrast of this VideoPreprocessorColorCorrector.


        :return: The contrast of this VideoPreprocessorColorCorrector.
        :rtype: int
        """
        return self._contrast

    @contrast.setter
    def contrast(self, contrast):
        """Sets the contrast of this VideoPreprocessorColorCorrector.


        :param contrast: The contrast of this VideoPreprocessorColorCorrector.
        :type contrast: int
        """

        self._contrast = contrast

    @property
    def hdr10_metadata(self):
        """Gets the hdr10_metadata of this VideoPreprocessorColorCorrector.


        :return: The hdr10_metadata of this VideoPreprocessorColorCorrector.
        :rtype: ColorCorrectorHdr10Metadata
        """
        return self._hdr10_metadata

    @hdr10_metadata.setter
    def hdr10_metadata(self, hdr10_metadata):
        """Sets the hdr10_metadata of this VideoPreprocessorColorCorrector.


        :param hdr10_metadata: The hdr10_metadata of this VideoPreprocessorColorCorrector.
        :type hdr10_metadata: ColorCorrectorHdr10Metadata
        """

        self._hdr10_metadata = hdr10_metadata

    @property
    def hdr_to_sdr_tone_mapper(self):
        """Gets the hdr_to_sdr_tone_mapper of this VideoPreprocessorColorCorrector.


        :return: The hdr_to_sdr_tone_mapper of this VideoPreprocessorColorCorrector.
        :rtype: HDRToSDRToneMapper
        """
        return self._hdr_to_sdr_tone_mapper

    @hdr_to_sdr_tone_mapper.setter
    def hdr_to_sdr_tone_mapper(self, hdr_to_sdr_tone_mapper):
        """Sets the hdr_to_sdr_tone_mapper of this VideoPreprocessorColorCorrector.


        :param hdr_to_sdr_tone_mapper: The hdr_to_sdr_tone_mapper of this VideoPreprocessorColorCorrector.
        :type hdr_to_sdr_tone_mapper: HDRToSDRToneMapper
        """

        self._hdr_to_sdr_tone_mapper = hdr_to_sdr_tone_mapper

    @property
    def hue(self):
        """Gets the hue of this VideoPreprocessorColorCorrector.


        :return: The hue of this VideoPreprocessorColorCorrector.
        :rtype: int
        """
        return self._hue

    @hue.setter
    def hue(self, hue):
        """Sets the hue of this VideoPreprocessorColorCorrector.


        :param hue: The hue of this VideoPreprocessorColorCorrector.
        :type hue: int
        """

        self._hue = hue

    @property
    def sample_range_conversion(self):
        """Gets the sample_range_conversion of this VideoPreprocessorColorCorrector.


        :return: The sample_range_conversion of this VideoPreprocessorColorCorrector.
        :rtype: SampleRangeConversion
        """
        return self._sample_range_conversion

    @sample_range_conversion.setter
    def sample_range_conversion(self, sample_range_conversion):
        """Sets the sample_range_conversion of this VideoPreprocessorColorCorrector.


        :param sample_range_conversion: The sample_range_conversion of this VideoPreprocessorColorCorrector.
        :type sample_range_conversion: SampleRangeConversion
        """

        self._sample_range_conversion = sample_range_conversion

    @property
    def saturation(self):
        """Gets the saturation of this VideoPreprocessorColorCorrector.


        :return: The saturation of this VideoPreprocessorColorCorrector.
        :rtype: int
        """
        return self._saturation

    @saturation.setter
    def saturation(self, saturation):
        """Sets the saturation of this VideoPreprocessorColorCorrector.


        :param saturation: The saturation of this VideoPreprocessorColorCorrector.
        :type saturation: int
        """

        self._saturation = saturation

    @property
    def sdr_reference_white_level(self):
        """Gets the sdr_reference_white_level of this VideoPreprocessorColorCorrector.


        :return: The sdr_reference_white_level of this VideoPreprocessorColorCorrector.
        :rtype: int
        """
        return self._sdr_reference_white_level

    @sdr_reference_white_level.setter
    def sdr_reference_white_level(self, sdr_reference_white_level):
        """Sets the sdr_reference_white_level of this VideoPreprocessorColorCorrector.


        :param sdr_reference_white_level: The sdr_reference_white_level of this VideoPreprocessorColorCorrector.
        :type sdr_reference_white_level: int
        """

        self._sdr_reference_white_level = sdr_reference_white_level
