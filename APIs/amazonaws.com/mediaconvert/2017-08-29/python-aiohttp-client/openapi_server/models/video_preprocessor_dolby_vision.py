# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dolby_vision_l6_metadata import DolbyVisionL6Metadata
from openapi_server.models.dolby_vision_level6_mode import DolbyVisionLevel6Mode
from openapi_server.models.dolby_vision_mapping import DolbyVisionMapping
from openapi_server.models.dolby_vision_profile import DolbyVisionProfile
from openapi_server import util


class VideoPreprocessorDolbyVision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, l6_metadata: DolbyVisionL6Metadata=None, l6_mode: DolbyVisionLevel6Mode=None, mapping: DolbyVisionMapping=None, profile: DolbyVisionProfile=None):
        """VideoPreprocessorDolbyVision - a model defined in OpenAPI

        :param l6_metadata: The l6_metadata of this VideoPreprocessorDolbyVision.
        :param l6_mode: The l6_mode of this VideoPreprocessorDolbyVision.
        :param mapping: The mapping of this VideoPreprocessorDolbyVision.
        :param profile: The profile of this VideoPreprocessorDolbyVision.
        """
        self.openapi_types = {
            'l6_metadata': DolbyVisionL6Metadata,
            'l6_mode': DolbyVisionLevel6Mode,
            'mapping': DolbyVisionMapping,
            'profile': DolbyVisionProfile
        }

        self.attribute_map = {
            'l6_metadata': 'L6Metadata',
            'l6_mode': 'L6Mode',
            'mapping': 'Mapping',
            'profile': 'Profile'
        }

        self._l6_metadata = l6_metadata
        self._l6_mode = l6_mode
        self._mapping = mapping
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoPreprocessorDolbyVision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoPreprocessor_DolbyVision of this VideoPreprocessorDolbyVision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def l6_metadata(self):
        """Gets the l6_metadata of this VideoPreprocessorDolbyVision.


        :return: The l6_metadata of this VideoPreprocessorDolbyVision.
        :rtype: DolbyVisionL6Metadata
        """
        return self._l6_metadata

    @l6_metadata.setter
    def l6_metadata(self, l6_metadata):
        """Sets the l6_metadata of this VideoPreprocessorDolbyVision.


        :param l6_metadata: The l6_metadata of this VideoPreprocessorDolbyVision.
        :type l6_metadata: DolbyVisionL6Metadata
        """

        self._l6_metadata = l6_metadata

    @property
    def l6_mode(self):
        """Gets the l6_mode of this VideoPreprocessorDolbyVision.


        :return: The l6_mode of this VideoPreprocessorDolbyVision.
        :rtype: DolbyVisionLevel6Mode
        """
        return self._l6_mode

    @l6_mode.setter
    def l6_mode(self, l6_mode):
        """Sets the l6_mode of this VideoPreprocessorDolbyVision.


        :param l6_mode: The l6_mode of this VideoPreprocessorDolbyVision.
        :type l6_mode: DolbyVisionLevel6Mode
        """

        self._l6_mode = l6_mode

    @property
    def mapping(self):
        """Gets the mapping of this VideoPreprocessorDolbyVision.


        :return: The mapping of this VideoPreprocessorDolbyVision.
        :rtype: DolbyVisionMapping
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this VideoPreprocessorDolbyVision.


        :param mapping: The mapping of this VideoPreprocessorDolbyVision.
        :type mapping: DolbyVisionMapping
        """

        self._mapping = mapping

    @property
    def profile(self):
        """Gets the profile of this VideoPreprocessorDolbyVision.


        :return: The profile of this VideoPreprocessorDolbyVision.
        :rtype: DolbyVisionProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this VideoPreprocessorDolbyVision.


        :param profile: The profile of this VideoPreprocessorDolbyVision.
        :type profile: DolbyVisionProfile
        """

        self._profile = profile
