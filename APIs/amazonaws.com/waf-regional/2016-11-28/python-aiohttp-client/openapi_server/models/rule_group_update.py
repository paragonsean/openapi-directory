# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_action import ChangeAction
from openapi_server.models.rule_group_update_activated_rule import RuleGroupUpdateActivatedRule
from openapi_server import util


class RuleGroupUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ChangeAction=None, activated_rule: RuleGroupUpdateActivatedRule=None):
        """RuleGroupUpdate - a model defined in OpenAPI

        :param action: The action of this RuleGroupUpdate.
        :param activated_rule: The activated_rule of this RuleGroupUpdate.
        """
        self.openapi_types = {
            'action': ChangeAction,
            'activated_rule': RuleGroupUpdateActivatedRule
        }

        self.attribute_map = {
            'action': 'Action',
            'activated_rule': 'ActivatedRule'
        }

        self._action = action
        self._activated_rule = activated_rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleGroupUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleGroupUpdate of this RuleGroupUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this RuleGroupUpdate.


        :return: The action of this RuleGroupUpdate.
        :rtype: ChangeAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RuleGroupUpdate.


        :param action: The action of this RuleGroupUpdate.
        :type action: ChangeAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def activated_rule(self):
        """Gets the activated_rule of this RuleGroupUpdate.


        :return: The activated_rule of this RuleGroupUpdate.
        :rtype: RuleGroupUpdateActivatedRule
        """
        return self._activated_rule

    @activated_rule.setter
    def activated_rule(self, activated_rule):
        """Sets the activated_rule of this RuleGroupUpdate.


        :param activated_rule: The activated_rule of this RuleGroupUpdate.
        :type activated_rule: RuleGroupUpdateActivatedRule
        """
        if activated_rule is None:
            raise ValueError("Invalid value for `activated_rule`, must not be `None`")

        self._activated_rule = activated_rule
