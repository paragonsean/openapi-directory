# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_web_acl_request_default_action import CreateWebACLRequestDefaultAction
from openapi_server import util


class CreateWebACLRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, metric_name: str=None, default_action: CreateWebACLRequestDefaultAction=None, change_token: str=None, tags: List=None):
        """CreateWebACLRequest - a model defined in OpenAPI

        :param name: The name of this CreateWebACLRequest.
        :param metric_name: The metric_name of this CreateWebACLRequest.
        :param default_action: The default_action of this CreateWebACLRequest.
        :param change_token: The change_token of this CreateWebACLRequest.
        :param tags: The tags of this CreateWebACLRequest.
        """
        self.openapi_types = {
            'name': str,
            'metric_name': str,
            'default_action': CreateWebACLRequestDefaultAction,
            'change_token': str,
            'tags': List
        }

        self.attribute_map = {
            'name': 'Name',
            'metric_name': 'MetricName',
            'default_action': 'DefaultAction',
            'change_token': 'ChangeToken',
            'tags': 'Tags'
        }

        self._name = name
        self._metric_name = metric_name
        self._default_action = default_action
        self._change_token = change_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWebACLRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWebACLRequest of this CreateWebACLRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateWebACLRequest.


        :return: The name of this CreateWebACLRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWebACLRequest.


        :param name: The name of this CreateWebACLRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def metric_name(self):
        """Gets the metric_name of this CreateWebACLRequest.


        :return: The metric_name of this CreateWebACLRequest.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this CreateWebACLRequest.


        :param metric_name: The metric_name of this CreateWebACLRequest.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def default_action(self):
        """Gets the default_action of this CreateWebACLRequest.


        :return: The default_action of this CreateWebACLRequest.
        :rtype: CreateWebACLRequestDefaultAction
        """
        return self._default_action

    @default_action.setter
    def default_action(self, default_action):
        """Sets the default_action of this CreateWebACLRequest.


        :param default_action: The default_action of this CreateWebACLRequest.
        :type default_action: CreateWebACLRequestDefaultAction
        """
        if default_action is None:
            raise ValueError("Invalid value for `default_action`, must not be `None`")

        self._default_action = default_action

    @property
    def change_token(self):
        """Gets the change_token of this CreateWebACLRequest.


        :return: The change_token of this CreateWebACLRequest.
        :rtype: str
        """
        return self._change_token

    @change_token.setter
    def change_token(self, change_token):
        """Sets the change_token of this CreateWebACLRequest.


        :param change_token: The change_token of this CreateWebACLRequest.
        :type change_token: str
        """
        if change_token is None:
            raise ValueError("Invalid value for `change_token`, must not be `None`")

        self._change_token = change_token

    @property
    def tags(self):
        """Gets the tags of this CreateWebACLRequest.


        :return: The tags of this CreateWebACLRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWebACLRequest.


        :param tags: The tags of this CreateWebACLRequest.
        :type tags: List
        """

        self._tags = tags
