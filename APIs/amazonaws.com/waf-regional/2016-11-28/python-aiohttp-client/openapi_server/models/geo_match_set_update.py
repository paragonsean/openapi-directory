# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_action import ChangeAction
from openapi_server.models.geo_match_set_update_geo_match_constraint import GeoMatchSetUpdateGeoMatchConstraint
from openapi_server import util


class GeoMatchSetUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ChangeAction=None, geo_match_constraint: GeoMatchSetUpdateGeoMatchConstraint=None):
        """GeoMatchSetUpdate - a model defined in OpenAPI

        :param action: The action of this GeoMatchSetUpdate.
        :param geo_match_constraint: The geo_match_constraint of this GeoMatchSetUpdate.
        """
        self.openapi_types = {
            'action': ChangeAction,
            'geo_match_constraint': GeoMatchSetUpdateGeoMatchConstraint
        }

        self.attribute_map = {
            'action': 'Action',
            'geo_match_constraint': 'GeoMatchConstraint'
        }

        self._action = action
        self._geo_match_constraint = geo_match_constraint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoMatchSetUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoMatchSetUpdate of this GeoMatchSetUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this GeoMatchSetUpdate.


        :return: The action of this GeoMatchSetUpdate.
        :rtype: ChangeAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this GeoMatchSetUpdate.


        :param action: The action of this GeoMatchSetUpdate.
        :type action: ChangeAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def geo_match_constraint(self):
        """Gets the geo_match_constraint of this GeoMatchSetUpdate.


        :return: The geo_match_constraint of this GeoMatchSetUpdate.
        :rtype: GeoMatchSetUpdateGeoMatchConstraint
        """
        return self._geo_match_constraint

    @geo_match_constraint.setter
    def geo_match_constraint(self, geo_match_constraint):
        """Sets the geo_match_constraint of this GeoMatchSetUpdate.


        :param geo_match_constraint: The geo_match_constraint of this GeoMatchSetUpdate.
        :type geo_match_constraint: GeoMatchSetUpdateGeoMatchConstraint
        """
        if geo_match_constraint is None:
            raise ValueError("Invalid value for `geo_match_constraint`, must not be `None`")

        self._geo_match_constraint = geo_match_constraint
