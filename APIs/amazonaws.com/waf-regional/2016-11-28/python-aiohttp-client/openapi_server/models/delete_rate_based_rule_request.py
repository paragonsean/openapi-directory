# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteRateBasedRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_id: str=None, change_token: str=None):
        """DeleteRateBasedRuleRequest - a model defined in OpenAPI

        :param rule_id: The rule_id of this DeleteRateBasedRuleRequest.
        :param change_token: The change_token of this DeleteRateBasedRuleRequest.
        """
        self.openapi_types = {
            'rule_id': str,
            'change_token': str
        }

        self.attribute_map = {
            'rule_id': 'RuleId',
            'change_token': 'ChangeToken'
        }

        self._rule_id = rule_id
        self._change_token = change_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteRateBasedRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteRateBasedRuleRequest of this DeleteRateBasedRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_id(self):
        """Gets the rule_id of this DeleteRateBasedRuleRequest.


        :return: The rule_id of this DeleteRateBasedRuleRequest.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this DeleteRateBasedRuleRequest.


        :param rule_id: The rule_id of this DeleteRateBasedRuleRequest.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def change_token(self):
        """Gets the change_token of this DeleteRateBasedRuleRequest.


        :return: The change_token of this DeleteRateBasedRuleRequest.
        :rtype: str
        """
        return self._change_token

    @change_token.setter
    def change_token(self, change_token):
        """Sets the change_token of this DeleteRateBasedRuleRequest.


        :param change_token: The change_token of this DeleteRateBasedRuleRequest.
        :type change_token: str
        """
        if change_token is None:
            raise ValueError("Invalid value for `change_token`, must not be `None`")

        self._change_token = change_token
