# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteRuleGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_group_id: str=None, change_token: str=None):
        """DeleteRuleGroupRequest - a model defined in OpenAPI

        :param rule_group_id: The rule_group_id of this DeleteRuleGroupRequest.
        :param change_token: The change_token of this DeleteRuleGroupRequest.
        """
        self.openapi_types = {
            'rule_group_id': str,
            'change_token': str
        }

        self.attribute_map = {
            'rule_group_id': 'RuleGroupId',
            'change_token': 'ChangeToken'
        }

        self._rule_group_id = rule_group_id
        self._change_token = change_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteRuleGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteRuleGroupRequest of this DeleteRuleGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_group_id(self):
        """Gets the rule_group_id of this DeleteRuleGroupRequest.


        :return: The rule_group_id of this DeleteRuleGroupRequest.
        :rtype: str
        """
        return self._rule_group_id

    @rule_group_id.setter
    def rule_group_id(self, rule_group_id):
        """Sets the rule_group_id of this DeleteRuleGroupRequest.


        :param rule_group_id: The rule_group_id of this DeleteRuleGroupRequest.
        :type rule_group_id: str
        """
        if rule_group_id is None:
            raise ValueError("Invalid value for `rule_group_id`, must not be `None`")

        self._rule_group_id = rule_group_id

    @property
    def change_token(self):
        """Gets the change_token of this DeleteRuleGroupRequest.


        :return: The change_token of this DeleteRuleGroupRequest.
        :rtype: str
        """
        return self._change_token

    @change_token.setter
    def change_token(self, change_token):
        """Sets the change_token of this DeleteRuleGroupRequest.


        :param change_token: The change_token of this DeleteRuleGroupRequest.
        :type change_token: str
        """
        if change_token is None:
            raise ValueError("Invalid value for `change_token`, must not be `None`")

        self._change_token = change_token
