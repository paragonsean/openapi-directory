# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_action import ChangeAction
from openapi_server.models.ip_set_update_ip_set_descriptor import IPSetUpdateIPSetDescriptor
from openapi_server import util


class IPSetUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ChangeAction=None, ip_set_descriptor: IPSetUpdateIPSetDescriptor=None):
        """IPSetUpdate - a model defined in OpenAPI

        :param action: The action of this IPSetUpdate.
        :param ip_set_descriptor: The ip_set_descriptor of this IPSetUpdate.
        """
        self.openapi_types = {
            'action': ChangeAction,
            'ip_set_descriptor': IPSetUpdateIPSetDescriptor
        }

        self.attribute_map = {
            'action': 'Action',
            'ip_set_descriptor': 'IPSetDescriptor'
        }

        self._action = action
        self._ip_set_descriptor = ip_set_descriptor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPSetUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPSetUpdate of this IPSetUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this IPSetUpdate.


        :return: The action of this IPSetUpdate.
        :rtype: ChangeAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IPSetUpdate.


        :param action: The action of this IPSetUpdate.
        :type action: ChangeAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def ip_set_descriptor(self):
        """Gets the ip_set_descriptor of this IPSetUpdate.


        :return: The ip_set_descriptor of this IPSetUpdate.
        :rtype: IPSetUpdateIPSetDescriptor
        """
        return self._ip_set_descriptor

    @ip_set_descriptor.setter
    def ip_set_descriptor(self, ip_set_descriptor):
        """Sets the ip_set_descriptor of this IPSetUpdate.


        :param ip_set_descriptor: The ip_set_descriptor of this IPSetUpdate.
        :type ip_set_descriptor: IPSetUpdateIPSetDescriptor
        """
        if ip_set_descriptor is None:
            raise ValueError("Invalid value for `ip_set_descriptor`, must not be `None`")

        self._ip_set_descriptor = ip_set_descriptor
