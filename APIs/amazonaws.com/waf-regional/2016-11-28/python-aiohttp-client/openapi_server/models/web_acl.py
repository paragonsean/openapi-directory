# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_acl_default_action import WebACLDefaultAction
from openapi_server import util


class WebACL(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, web_aclid: str=None, name: str=None, metric_name: str=None, default_action: WebACLDefaultAction=None, rules: List=None, web_acl_arn: str=None):
        """WebACL - a model defined in OpenAPI

        :param web_aclid: The web_aclid of this WebACL.
        :param name: The name of this WebACL.
        :param metric_name: The metric_name of this WebACL.
        :param default_action: The default_action of this WebACL.
        :param rules: The rules of this WebACL.
        :param web_acl_arn: The web_acl_arn of this WebACL.
        """
        self.openapi_types = {
            'web_aclid': str,
            'name': str,
            'metric_name': str,
            'default_action': WebACLDefaultAction,
            'rules': List,
            'web_acl_arn': str
        }

        self.attribute_map = {
            'web_aclid': 'WebACLId',
            'name': 'Name',
            'metric_name': 'MetricName',
            'default_action': 'DefaultAction',
            'rules': 'Rules',
            'web_acl_arn': 'WebACLArn'
        }

        self._web_aclid = web_aclid
        self._name = name
        self._metric_name = metric_name
        self._default_action = default_action
        self._rules = rules
        self._web_acl_arn = web_acl_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebACL':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebACL of this WebACL.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def web_aclid(self):
        """Gets the web_aclid of this WebACL.


        :return: The web_aclid of this WebACL.
        :rtype: str
        """
        return self._web_aclid

    @web_aclid.setter
    def web_aclid(self, web_aclid):
        """Sets the web_aclid of this WebACL.


        :param web_aclid: The web_aclid of this WebACL.
        :type web_aclid: str
        """
        if web_aclid is None:
            raise ValueError("Invalid value for `web_aclid`, must not be `None`")

        self._web_aclid = web_aclid

    @property
    def name(self):
        """Gets the name of this WebACL.


        :return: The name of this WebACL.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebACL.


        :param name: The name of this WebACL.
        :type name: str
        """

        self._name = name

    @property
    def metric_name(self):
        """Gets the metric_name of this WebACL.


        :return: The metric_name of this WebACL.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this WebACL.


        :param metric_name: The metric_name of this WebACL.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def default_action(self):
        """Gets the default_action of this WebACL.


        :return: The default_action of this WebACL.
        :rtype: WebACLDefaultAction
        """
        return self._default_action

    @default_action.setter
    def default_action(self, default_action):
        """Sets the default_action of this WebACL.


        :param default_action: The default_action of this WebACL.
        :type default_action: WebACLDefaultAction
        """
        if default_action is None:
            raise ValueError("Invalid value for `default_action`, must not be `None`")

        self._default_action = default_action

    @property
    def rules(self):
        """Gets the rules of this WebACL.


        :return: The rules of this WebACL.
        :rtype: List
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this WebACL.


        :param rules: The rules of this WebACL.
        :type rules: List
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules

    @property
    def web_acl_arn(self):
        """Gets the web_acl_arn of this WebACL.


        :return: The web_acl_arn of this WebACL.
        :rtype: str
        """
        return self._web_acl_arn

    @web_acl_arn.setter
    def web_acl_arn(self, web_acl_arn):
        """Sets the web_acl_arn of this WebACL.


        :param web_acl_arn: The web_acl_arn of this WebACL.
        :type web_acl_arn: str
        """

        self._web_acl_arn = web_acl_arn
