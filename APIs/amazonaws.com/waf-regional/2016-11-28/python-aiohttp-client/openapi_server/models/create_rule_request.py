# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, metric_name: str=None, change_token: str=None, tags: List=None):
        """CreateRuleRequest - a model defined in OpenAPI

        :param name: The name of this CreateRuleRequest.
        :param metric_name: The metric_name of this CreateRuleRequest.
        :param change_token: The change_token of this CreateRuleRequest.
        :param tags: The tags of this CreateRuleRequest.
        """
        self.openapi_types = {
            'name': str,
            'metric_name': str,
            'change_token': str,
            'tags': List
        }

        self.attribute_map = {
            'name': 'Name',
            'metric_name': 'MetricName',
            'change_token': 'ChangeToken',
            'tags': 'Tags'
        }

        self._name = name
        self._metric_name = metric_name
        self._change_token = change_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRuleRequest of this CreateRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRuleRequest.


        :return: The name of this CreateRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRuleRequest.


        :param name: The name of this CreateRuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def metric_name(self):
        """Gets the metric_name of this CreateRuleRequest.


        :return: The metric_name of this CreateRuleRequest.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this CreateRuleRequest.


        :param metric_name: The metric_name of this CreateRuleRequest.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def change_token(self):
        """Gets the change_token of this CreateRuleRequest.


        :return: The change_token of this CreateRuleRequest.
        :rtype: str
        """
        return self._change_token

    @change_token.setter
    def change_token(self, change_token):
        """Sets the change_token of this CreateRuleRequest.


        :param change_token: The change_token of this CreateRuleRequest.
        :type change_token: str
        """
        if change_token is None:
            raise ValueError("Invalid value for `change_token`, must not be `None`")

        self._change_token = change_token

    @property
    def tags(self):
        """Gets the tags of this CreateRuleRequest.


        :return: The tags of this CreateRuleRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRuleRequest.


        :param tags: The tags of this CreateRuleRequest.
        :type tags: List
        """

        self._tags = tags
