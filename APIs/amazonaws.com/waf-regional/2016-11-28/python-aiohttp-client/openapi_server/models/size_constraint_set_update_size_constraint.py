# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comparison_operator import ComparisonOperator
from openapi_server.models.size_constraint_field_to_match import SizeConstraintFieldToMatch
from openapi_server.models.text_transformation import TextTransformation
from openapi_server import util


class SizeConstraintSetUpdateSizeConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_to_match: SizeConstraintFieldToMatch=None, text_transformation: TextTransformation=None, comparison_operator: ComparisonOperator=None, size: int=None):
        """SizeConstraintSetUpdateSizeConstraint - a model defined in OpenAPI

        :param field_to_match: The field_to_match of this SizeConstraintSetUpdateSizeConstraint.
        :param text_transformation: The text_transformation of this SizeConstraintSetUpdateSizeConstraint.
        :param comparison_operator: The comparison_operator of this SizeConstraintSetUpdateSizeConstraint.
        :param size: The size of this SizeConstraintSetUpdateSizeConstraint.
        """
        self.openapi_types = {
            'field_to_match': SizeConstraintFieldToMatch,
            'text_transformation': TextTransformation,
            'comparison_operator': ComparisonOperator,
            'size': int
        }

        self.attribute_map = {
            'field_to_match': 'FieldToMatch',
            'text_transformation': 'TextTransformation',
            'comparison_operator': 'ComparisonOperator',
            'size': 'Size'
        }

        self._field_to_match = field_to_match
        self._text_transformation = text_transformation
        self._comparison_operator = comparison_operator
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SizeConstraintSetUpdateSizeConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SizeConstraintSetUpdate_SizeConstraint of this SizeConstraintSetUpdateSizeConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_to_match(self):
        """Gets the field_to_match of this SizeConstraintSetUpdateSizeConstraint.


        :return: The field_to_match of this SizeConstraintSetUpdateSizeConstraint.
        :rtype: SizeConstraintFieldToMatch
        """
        return self._field_to_match

    @field_to_match.setter
    def field_to_match(self, field_to_match):
        """Sets the field_to_match of this SizeConstraintSetUpdateSizeConstraint.


        :param field_to_match: The field_to_match of this SizeConstraintSetUpdateSizeConstraint.
        :type field_to_match: SizeConstraintFieldToMatch
        """
        if field_to_match is None:
            raise ValueError("Invalid value for `field_to_match`, must not be `None`")

        self._field_to_match = field_to_match

    @property
    def text_transformation(self):
        """Gets the text_transformation of this SizeConstraintSetUpdateSizeConstraint.


        :return: The text_transformation of this SizeConstraintSetUpdateSizeConstraint.
        :rtype: TextTransformation
        """
        return self._text_transformation

    @text_transformation.setter
    def text_transformation(self, text_transformation):
        """Sets the text_transformation of this SizeConstraintSetUpdateSizeConstraint.


        :param text_transformation: The text_transformation of this SizeConstraintSetUpdateSizeConstraint.
        :type text_transformation: TextTransformation
        """
        if text_transformation is None:
            raise ValueError("Invalid value for `text_transformation`, must not be `None`")

        self._text_transformation = text_transformation

    @property
    def comparison_operator(self):
        """Gets the comparison_operator of this SizeConstraintSetUpdateSizeConstraint.


        :return: The comparison_operator of this SizeConstraintSetUpdateSizeConstraint.
        :rtype: ComparisonOperator
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):
        """Sets the comparison_operator of this SizeConstraintSetUpdateSizeConstraint.


        :param comparison_operator: The comparison_operator of this SizeConstraintSetUpdateSizeConstraint.
        :type comparison_operator: ComparisonOperator
        """
        if comparison_operator is None:
            raise ValueError("Invalid value for `comparison_operator`, must not be `None`")

        self._comparison_operator = comparison_operator

    @property
    def size(self):
        """Gets the size of this SizeConstraintSetUpdateSizeConstraint.


        :return: The size of this SizeConstraintSetUpdateSizeConstraint.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SizeConstraintSetUpdateSizeConstraint.


        :param size: The size of this SizeConstraintSetUpdateSizeConstraint.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
