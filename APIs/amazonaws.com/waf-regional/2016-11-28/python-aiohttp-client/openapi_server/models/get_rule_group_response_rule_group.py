# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRuleGroupResponseRuleGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_group_id: str=None, name: str=None, metric_name: str=None):
        """GetRuleGroupResponseRuleGroup - a model defined in OpenAPI

        :param rule_group_id: The rule_group_id of this GetRuleGroupResponseRuleGroup.
        :param name: The name of this GetRuleGroupResponseRuleGroup.
        :param metric_name: The metric_name of this GetRuleGroupResponseRuleGroup.
        """
        self.openapi_types = {
            'rule_group_id': str,
            'name': str,
            'metric_name': str
        }

        self.attribute_map = {
            'rule_group_id': 'RuleGroupId',
            'name': 'Name',
            'metric_name': 'MetricName'
        }

        self._rule_group_id = rule_group_id
        self._name = name
        self._metric_name = metric_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRuleGroupResponseRuleGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRuleGroupResponse_RuleGroup of this GetRuleGroupResponseRuleGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_group_id(self):
        """Gets the rule_group_id of this GetRuleGroupResponseRuleGroup.


        :return: The rule_group_id of this GetRuleGroupResponseRuleGroup.
        :rtype: str
        """
        return self._rule_group_id

    @rule_group_id.setter
    def rule_group_id(self, rule_group_id):
        """Sets the rule_group_id of this GetRuleGroupResponseRuleGroup.


        :param rule_group_id: The rule_group_id of this GetRuleGroupResponseRuleGroup.
        :type rule_group_id: str
        """
        if rule_group_id is None:
            raise ValueError("Invalid value for `rule_group_id`, must not be `None`")

        self._rule_group_id = rule_group_id

    @property
    def name(self):
        """Gets the name of this GetRuleGroupResponseRuleGroup.


        :return: The name of this GetRuleGroupResponseRuleGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetRuleGroupResponseRuleGroup.


        :param name: The name of this GetRuleGroupResponseRuleGroup.
        :type name: str
        """

        self._name = name

    @property
    def metric_name(self):
        """Gets the metric_name of this GetRuleGroupResponseRuleGroup.


        :return: The metric_name of this GetRuleGroupResponseRuleGroup.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this GetRuleGroupResponseRuleGroup.


        :param metric_name: The metric_name of this GetRuleGroupResponseRuleGroup.
        :type metric_name: str
        """

        self._metric_name = metric_name
