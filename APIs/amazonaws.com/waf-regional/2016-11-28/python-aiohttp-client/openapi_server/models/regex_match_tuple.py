# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.regex_match_tuple_field_to_match import RegexMatchTupleFieldToMatch
from openapi_server.models.text_transformation import TextTransformation
from openapi_server import util


class RegexMatchTuple(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_to_match: RegexMatchTupleFieldToMatch=None, text_transformation: TextTransformation=None, regex_pattern_set_id: str=None):
        """RegexMatchTuple - a model defined in OpenAPI

        :param field_to_match: The field_to_match of this RegexMatchTuple.
        :param text_transformation: The text_transformation of this RegexMatchTuple.
        :param regex_pattern_set_id: The regex_pattern_set_id of this RegexMatchTuple.
        """
        self.openapi_types = {
            'field_to_match': RegexMatchTupleFieldToMatch,
            'text_transformation': TextTransformation,
            'regex_pattern_set_id': str
        }

        self.attribute_map = {
            'field_to_match': 'FieldToMatch',
            'text_transformation': 'TextTransformation',
            'regex_pattern_set_id': 'RegexPatternSetId'
        }

        self._field_to_match = field_to_match
        self._text_transformation = text_transformation
        self._regex_pattern_set_id = regex_pattern_set_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegexMatchTuple':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegexMatchTuple of this RegexMatchTuple.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_to_match(self):
        """Gets the field_to_match of this RegexMatchTuple.


        :return: The field_to_match of this RegexMatchTuple.
        :rtype: RegexMatchTupleFieldToMatch
        """
        return self._field_to_match

    @field_to_match.setter
    def field_to_match(self, field_to_match):
        """Sets the field_to_match of this RegexMatchTuple.


        :param field_to_match: The field_to_match of this RegexMatchTuple.
        :type field_to_match: RegexMatchTupleFieldToMatch
        """
        if field_to_match is None:
            raise ValueError("Invalid value for `field_to_match`, must not be `None`")

        self._field_to_match = field_to_match

    @property
    def text_transformation(self):
        """Gets the text_transformation of this RegexMatchTuple.


        :return: The text_transformation of this RegexMatchTuple.
        :rtype: TextTransformation
        """
        return self._text_transformation

    @text_transformation.setter
    def text_transformation(self, text_transformation):
        """Sets the text_transformation of this RegexMatchTuple.


        :param text_transformation: The text_transformation of this RegexMatchTuple.
        :type text_transformation: TextTransformation
        """
        if text_transformation is None:
            raise ValueError("Invalid value for `text_transformation`, must not be `None`")

        self._text_transformation = text_transformation

    @property
    def regex_pattern_set_id(self):
        """Gets the regex_pattern_set_id of this RegexMatchTuple.


        :return: The regex_pattern_set_id of this RegexMatchTuple.
        :rtype: str
        """
        return self._regex_pattern_set_id

    @regex_pattern_set_id.setter
    def regex_pattern_set_id(self, regex_pattern_set_id):
        """Sets the regex_pattern_set_id of this RegexMatchTuple.


        :param regex_pattern_set_id: The regex_pattern_set_id of this RegexMatchTuple.
        :type regex_pattern_set_id: str
        """
        if regex_pattern_set_id is None:
            raise ValueError("Invalid value for `regex_pattern_set_id`, must not be `None`")

        self._regex_pattern_set_id = regex_pattern_set_id
