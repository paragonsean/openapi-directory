# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRegexPatternSetResponseRegexPatternSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, regex_pattern_set_id: str=None, name: str=None, regex_pattern_strings: List=None):
        """GetRegexPatternSetResponseRegexPatternSet - a model defined in OpenAPI

        :param regex_pattern_set_id: The regex_pattern_set_id of this GetRegexPatternSetResponseRegexPatternSet.
        :param name: The name of this GetRegexPatternSetResponseRegexPatternSet.
        :param regex_pattern_strings: The regex_pattern_strings of this GetRegexPatternSetResponseRegexPatternSet.
        """
        self.openapi_types = {
            'regex_pattern_set_id': str,
            'name': str,
            'regex_pattern_strings': List
        }

        self.attribute_map = {
            'regex_pattern_set_id': 'RegexPatternSetId',
            'name': 'Name',
            'regex_pattern_strings': 'RegexPatternStrings'
        }

        self._regex_pattern_set_id = regex_pattern_set_id
        self._name = name
        self._regex_pattern_strings = regex_pattern_strings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRegexPatternSetResponseRegexPatternSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRegexPatternSetResponse_RegexPatternSet of this GetRegexPatternSetResponseRegexPatternSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def regex_pattern_set_id(self):
        """Gets the regex_pattern_set_id of this GetRegexPatternSetResponseRegexPatternSet.


        :return: The regex_pattern_set_id of this GetRegexPatternSetResponseRegexPatternSet.
        :rtype: str
        """
        return self._regex_pattern_set_id

    @regex_pattern_set_id.setter
    def regex_pattern_set_id(self, regex_pattern_set_id):
        """Sets the regex_pattern_set_id of this GetRegexPatternSetResponseRegexPatternSet.


        :param regex_pattern_set_id: The regex_pattern_set_id of this GetRegexPatternSetResponseRegexPatternSet.
        :type regex_pattern_set_id: str
        """
        if regex_pattern_set_id is None:
            raise ValueError("Invalid value for `regex_pattern_set_id`, must not be `None`")

        self._regex_pattern_set_id = regex_pattern_set_id

    @property
    def name(self):
        """Gets the name of this GetRegexPatternSetResponseRegexPatternSet.


        :return: The name of this GetRegexPatternSetResponseRegexPatternSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetRegexPatternSetResponseRegexPatternSet.


        :param name: The name of this GetRegexPatternSetResponseRegexPatternSet.
        :type name: str
        """

        self._name = name

    @property
    def regex_pattern_strings(self):
        """Gets the regex_pattern_strings of this GetRegexPatternSetResponseRegexPatternSet.


        :return: The regex_pattern_strings of this GetRegexPatternSetResponseRegexPatternSet.
        :rtype: List
        """
        return self._regex_pattern_strings

    @regex_pattern_strings.setter
    def regex_pattern_strings(self, regex_pattern_strings):
        """Sets the regex_pattern_strings of this GetRegexPatternSetResponseRegexPatternSet.


        :param regex_pattern_strings: The regex_pattern_strings of this GetRegexPatternSetResponseRegexPatternSet.
        :type regex_pattern_strings: List
        """
        if regex_pattern_strings is None:
            raise ValueError("Invalid value for `regex_pattern_strings`, must not be `None`")

        self._regex_pattern_strings = regex_pattern_strings
