/**
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISampledHTTPRequest_Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISampledHTTPRequest_Request::OAISampledHTTPRequest_Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISampledHTTPRequest_Request::OAISampledHTTPRequest_Request() {
    this->initializeModel();
}

OAISampledHTTPRequest_Request::~OAISampledHTTPRequest_Request() {}

void OAISampledHTTPRequest_Request::initializeModel() {

    m_client_ip_isSet = false;
    m_client_ip_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_http_version_isSet = false;
    m_http_version_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;
}

void OAISampledHTTPRequest_Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISampledHTTPRequest_Request::fromJsonObject(QJsonObject json) {

    m_client_ip_isValid = ::OpenAPI::fromJsonValue(m_client_ip, json[QString("ClientIP")]);
    m_client_ip_isSet = !json[QString("ClientIP")].isNull() && m_client_ip_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("URI")]);
    m_uri_isSet = !json[QString("URI")].isNull() && m_uri_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("Method")]);
    m_method_isSet = !json[QString("Method")].isNull() && m_method_isValid;

    m_http_version_isValid = ::OpenAPI::fromJsonValue(m_http_version, json[QString("HTTPVersion")]);
    m_http_version_isSet = !json[QString("HTTPVersion")].isNull() && m_http_version_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;
}

QString OAISampledHTTPRequest_Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISampledHTTPRequest_Request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_ip_isSet) {
        obj.insert(QString("ClientIP"), ::OpenAPI::toJsonValue(m_client_ip));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_uri_isSet) {
        obj.insert(QString("URI"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_method_isSet) {
        obj.insert(QString("Method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_http_version_isSet) {
        obj.insert(QString("HTTPVersion"), ::OpenAPI::toJsonValue(m_http_version));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    return obj;
}

QString OAISampledHTTPRequest_Request::getClientIp() const {
    return m_client_ip;
}
void OAISampledHTTPRequest_Request::setClientIp(const QString &client_ip) {
    m_client_ip = client_ip;
    m_client_ip_isSet = true;
}

bool OAISampledHTTPRequest_Request::is_client_ip_Set() const{
    return m_client_ip_isSet;
}

bool OAISampledHTTPRequest_Request::is_client_ip_Valid() const{
    return m_client_ip_isValid;
}

QString OAISampledHTTPRequest_Request::getCountry() const {
    return m_country;
}
void OAISampledHTTPRequest_Request::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAISampledHTTPRequest_Request::is_country_Set() const{
    return m_country_isSet;
}

bool OAISampledHTTPRequest_Request::is_country_Valid() const{
    return m_country_isValid;
}

QString OAISampledHTTPRequest_Request::getUri() const {
    return m_uri;
}
void OAISampledHTTPRequest_Request::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAISampledHTTPRequest_Request::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAISampledHTTPRequest_Request::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAISampledHTTPRequest_Request::getMethod() const {
    return m_method;
}
void OAISampledHTTPRequest_Request::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAISampledHTTPRequest_Request::is_method_Set() const{
    return m_method_isSet;
}

bool OAISampledHTTPRequest_Request::is_method_Valid() const{
    return m_method_isValid;
}

QString OAISampledHTTPRequest_Request::getHttpVersion() const {
    return m_http_version;
}
void OAISampledHTTPRequest_Request::setHttpVersion(const QString &http_version) {
    m_http_version = http_version;
    m_http_version_isSet = true;
}

bool OAISampledHTTPRequest_Request::is_http_version_Set() const{
    return m_http_version_isSet;
}

bool OAISampledHTTPRequest_Request::is_http_version_Valid() const{
    return m_http_version_isValid;
}

QList OAISampledHTTPRequest_Request::getHeaders() const {
    return m_headers;
}
void OAISampledHTTPRequest_Request::setHeaders(const QList &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAISampledHTTPRequest_Request::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAISampledHTTPRequest_Request::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAISampledHTTPRequest_Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISampledHTTPRequest_Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
