/**
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWebACLMigrationStackRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWebACLMigrationStackRequest::OAICreateWebACLMigrationStackRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWebACLMigrationStackRequest::OAICreateWebACLMigrationStackRequest() {
    this->initializeModel();
}

OAICreateWebACLMigrationStackRequest::~OAICreateWebACLMigrationStackRequest() {}

void OAICreateWebACLMigrationStackRequest::initializeModel() {

    m_web_aclid_isSet = false;
    m_web_aclid_isValid = false;

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_ignore_unsupported_type_isSet = false;
    m_ignore_unsupported_type_isValid = false;
}

void OAICreateWebACLMigrationStackRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWebACLMigrationStackRequest::fromJsonObject(QJsonObject json) {

    m_web_aclid_isValid = ::OpenAPI::fromJsonValue(m_web_aclid, json[QString("WebACLId")]);
    m_web_aclid_isSet = !json[QString("WebACLId")].isNull() && m_web_aclid_isValid;

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("S3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("S3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_ignore_unsupported_type_isValid = ::OpenAPI::fromJsonValue(m_ignore_unsupported_type, json[QString("IgnoreUnsupportedType")]);
    m_ignore_unsupported_type_isSet = !json[QString("IgnoreUnsupportedType")].isNull() && m_ignore_unsupported_type_isValid;
}

QString OAICreateWebACLMigrationStackRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWebACLMigrationStackRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_web_aclid_isSet) {
        obj.insert(QString("WebACLId"), ::OpenAPI::toJsonValue(m_web_aclid));
    }
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("S3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_ignore_unsupported_type_isSet) {
        obj.insert(QString("IgnoreUnsupportedType"), ::OpenAPI::toJsonValue(m_ignore_unsupported_type));
    }
    return obj;
}

QString OAICreateWebACLMigrationStackRequest::getWebAclid() const {
    return m_web_aclid;
}
void OAICreateWebACLMigrationStackRequest::setWebAclid(const QString &web_aclid) {
    m_web_aclid = web_aclid;
    m_web_aclid_isSet = true;
}

bool OAICreateWebACLMigrationStackRequest::is_web_aclid_Set() const{
    return m_web_aclid_isSet;
}

bool OAICreateWebACLMigrationStackRequest::is_web_aclid_Valid() const{
    return m_web_aclid_isValid;
}

QString OAICreateWebACLMigrationStackRequest::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAICreateWebACLMigrationStackRequest::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAICreateWebACLMigrationStackRequest::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAICreateWebACLMigrationStackRequest::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

bool OAICreateWebACLMigrationStackRequest::getIgnoreUnsupportedType() const {
    return m_ignore_unsupported_type;
}
void OAICreateWebACLMigrationStackRequest::setIgnoreUnsupportedType(const bool &ignore_unsupported_type) {
    m_ignore_unsupported_type = ignore_unsupported_type;
    m_ignore_unsupported_type_isSet = true;
}

bool OAICreateWebACLMigrationStackRequest::is_ignore_unsupported_type_Set() const{
    return m_ignore_unsupported_type_isSet;
}

bool OAICreateWebACLMigrationStackRequest::is_ignore_unsupported_type_Valid() const{
    return m_ignore_unsupported_type_isValid;
}

bool OAICreateWebACLMigrationStackRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_web_aclid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_unsupported_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWebACLMigrationStackRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_web_aclid_isValid && m_s3_bucket_name_isValid && m_ignore_unsupported_type_isValid && true;
}

} // namespace OpenAPI
