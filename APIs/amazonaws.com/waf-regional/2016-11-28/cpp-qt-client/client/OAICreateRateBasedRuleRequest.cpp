/**
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRateBasedRuleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRateBasedRuleRequest::OAICreateRateBasedRuleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRateBasedRuleRequest::OAICreateRateBasedRuleRequest() {
    this->initializeModel();
}

OAICreateRateBasedRuleRequest::~OAICreateRateBasedRuleRequest() {}

void OAICreateRateBasedRuleRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_rate_key_isSet = false;
    m_rate_key_isValid = false;

    m_rate_limit_isSet = false;
    m_rate_limit_isValid = false;

    m_change_token_isSet = false;
    m_change_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateRateBasedRuleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRateBasedRuleRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_rate_key_isValid = ::OpenAPI::fromJsonValue(m_rate_key, json[QString("RateKey")]);
    m_rate_key_isSet = !json[QString("RateKey")].isNull() && m_rate_key_isValid;

    m_rate_limit_isValid = ::OpenAPI::fromJsonValue(m_rate_limit, json[QString("RateLimit")]);
    m_rate_limit_isSet = !json[QString("RateLimit")].isNull() && m_rate_limit_isValid;

    m_change_token_isValid = ::OpenAPI::fromJsonValue(m_change_token, json[QString("ChangeToken")]);
    m_change_token_isSet = !json[QString("ChangeToken")].isNull() && m_change_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateRateBasedRuleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRateBasedRuleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_rate_key.isSet()) {
        obj.insert(QString("RateKey"), ::OpenAPI::toJsonValue(m_rate_key));
    }
    if (m_rate_limit_isSet) {
        obj.insert(QString("RateLimit"), ::OpenAPI::toJsonValue(m_rate_limit));
    }
    if (m_change_token_isSet) {
        obj.insert(QString("ChangeToken"), ::OpenAPI::toJsonValue(m_change_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateRateBasedRuleRequest::getName() const {
    return m_name;
}
void OAICreateRateBasedRuleRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRateBasedRuleRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRateBasedRuleRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateRateBasedRuleRequest::getMetricName() const {
    return m_metric_name;
}
void OAICreateRateBasedRuleRequest::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAICreateRateBasedRuleRequest::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAICreateRateBasedRuleRequest::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

OAIRateKey OAICreateRateBasedRuleRequest::getRateKey() const {
    return m_rate_key;
}
void OAICreateRateBasedRuleRequest::setRateKey(const OAIRateKey &rate_key) {
    m_rate_key = rate_key;
    m_rate_key_isSet = true;
}

bool OAICreateRateBasedRuleRequest::is_rate_key_Set() const{
    return m_rate_key_isSet;
}

bool OAICreateRateBasedRuleRequest::is_rate_key_Valid() const{
    return m_rate_key_isValid;
}

qint32 OAICreateRateBasedRuleRequest::getRateLimit() const {
    return m_rate_limit;
}
void OAICreateRateBasedRuleRequest::setRateLimit(const qint32 &rate_limit) {
    m_rate_limit = rate_limit;
    m_rate_limit_isSet = true;
}

bool OAICreateRateBasedRuleRequest::is_rate_limit_Set() const{
    return m_rate_limit_isSet;
}

bool OAICreateRateBasedRuleRequest::is_rate_limit_Valid() const{
    return m_rate_limit_isValid;
}

QString OAICreateRateBasedRuleRequest::getChangeToken() const {
    return m_change_token;
}
void OAICreateRateBasedRuleRequest::setChangeToken(const QString &change_token) {
    m_change_token = change_token;
    m_change_token_isSet = true;
}

bool OAICreateRateBasedRuleRequest::is_change_token_Set() const{
    return m_change_token_isSet;
}

bool OAICreateRateBasedRuleRequest::is_change_token_Valid() const{
    return m_change_token_isValid;
}

QList OAICreateRateBasedRuleRequest::getTags() const {
    return m_tags;
}
void OAICreateRateBasedRuleRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRateBasedRuleRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRateBasedRuleRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateRateBasedRuleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRateBasedRuleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_metric_name_isValid && m_rate_key_isValid && m_rate_limit_isValid && m_change_token_isValid && true;
}

} // namespace OpenAPI
