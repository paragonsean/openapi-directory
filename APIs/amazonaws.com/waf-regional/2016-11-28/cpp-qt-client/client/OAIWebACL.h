/**
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebACL.h
 *
 * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Contains the &lt;code&gt;Rules&lt;/code&gt; that identify the requests that you want to allow, block, or count. In a &lt;code&gt;WebACL&lt;/code&gt;, you also specify a default action (&lt;code&gt;ALLOW&lt;/code&gt; or &lt;code&gt;BLOCK&lt;/code&gt;), and the action for each &lt;code&gt;Rule&lt;/code&gt; that you add to a &lt;code&gt;WebACL&lt;/code&gt;, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the &lt;code&gt;WebACL&lt;/code&gt; with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, a request needs to match only one of the specifications to be allowed, blocked, or counted. For more information, see &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt;
 */

#ifndef OAIWebACL_H
#define OAIWebACL_H

#include <QJsonObject>

#include "OAIWebACL_DefaultAction.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWebACL_DefaultAction;

class OAIWebACL : public OAIObject {
public:
    OAIWebACL();
    OAIWebACL(QString json);
    ~OAIWebACL() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWebAclid() const;
    void setWebAclid(const QString &web_aclid);
    bool is_web_aclid_Set() const;
    bool is_web_aclid_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    OAIWebACL_DefaultAction getDefaultAction() const;
    void setDefaultAction(const OAIWebACL_DefaultAction &default_action);
    bool is_default_action_Set() const;
    bool is_default_action_Valid() const;

    QList getRules() const;
    void setRules(const QList &rules);
    bool is_rules_Set() const;
    bool is_rules_Valid() const;

    QString getWebAclArn() const;
    void setWebAclArn(const QString &web_acl_arn);
    bool is_web_acl_arn_Set() const;
    bool is_web_acl_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_web_aclid;
    bool m_web_aclid_isSet;
    bool m_web_aclid_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    OAIWebACL_DefaultAction m_default_action;
    bool m_default_action_isSet;
    bool m_default_action_isValid;

    QList m_rules;
    bool m_rules_isSet;
    bool m_rules_isValid;

    QString m_web_acl_arn;
    bool m_web_acl_arn_isSet;
    bool m_web_acl_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebACL)

#endif // OAIWebACL_H
