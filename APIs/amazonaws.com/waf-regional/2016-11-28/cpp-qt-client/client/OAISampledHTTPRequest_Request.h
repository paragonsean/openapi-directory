/**
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISampledHTTPRequest_Request.h
 *
 * 
 */

#ifndef OAISampledHTTPRequest_Request_H
#define OAISampledHTTPRequest_Request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISampledHTTPRequest_Request : public OAIObject {
public:
    OAISampledHTTPRequest_Request();
    OAISampledHTTPRequest_Request(QString json);
    ~OAISampledHTTPRequest_Request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientIp() const;
    void setClientIp(const QString &client_ip);
    bool is_client_ip_Set() const;
    bool is_client_ip_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    QString getMethod() const;
    void setMethod(const QString &method);
    bool is_method_Set() const;
    bool is_method_Valid() const;

    QString getHttpVersion() const;
    void setHttpVersion(const QString &http_version);
    bool is_http_version_Set() const;
    bool is_http_version_Valid() const;

    QList getHeaders() const;
    void setHeaders(const QList &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_ip;
    bool m_client_ip_isSet;
    bool m_client_ip_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;

    QString m_method;
    bool m_method_isSet;
    bool m_method_isValid;

    QString m_http_version;
    bool m_http_version_isSet;
    bool m_http_version_isValid;

    QList m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISampledHTTPRequest_Request)

#endif // OAISampledHTTPRequest_Request_H
