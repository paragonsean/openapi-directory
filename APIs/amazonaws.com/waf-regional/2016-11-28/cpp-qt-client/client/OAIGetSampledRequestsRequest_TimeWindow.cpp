/**
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSampledRequestsRequest_TimeWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSampledRequestsRequest_TimeWindow::OAIGetSampledRequestsRequest_TimeWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSampledRequestsRequest_TimeWindow::OAIGetSampledRequestsRequest_TimeWindow() {
    this->initializeModel();
}

OAIGetSampledRequestsRequest_TimeWindow::~OAIGetSampledRequestsRequest_TimeWindow() {}

void OAIGetSampledRequestsRequest_TimeWindow::initializeModel() {

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;
}

void OAIGetSampledRequestsRequest_TimeWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSampledRequestsRequest_TimeWindow::fromJsonObject(QJsonObject json) {

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;
}

QString OAIGetSampledRequestsRequest_TimeWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSampledRequestsRequest_TimeWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    return obj;
}

QDateTime OAIGetSampledRequestsRequest_TimeWindow::getStartTime() const {
    return m_start_time;
}
void OAIGetSampledRequestsRequest_TimeWindow::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetSampledRequestsRequest_TimeWindow::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetSampledRequestsRequest_TimeWindow::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetSampledRequestsRequest_TimeWindow::getEndTime() const {
    return m_end_time;
}
void OAIGetSampledRequestsRequest_TimeWindow::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetSampledRequestsRequest_TimeWindow::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetSampledRequestsRequest_TimeWindow::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAIGetSampledRequestsRequest_TimeWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSampledRequestsRequest_TimeWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_time_isValid && m_end_time_isValid && true;
}

} // namespace OpenAPI
