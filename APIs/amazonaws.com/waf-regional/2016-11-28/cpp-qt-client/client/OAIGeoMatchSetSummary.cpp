/**
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoMatchSetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoMatchSetSummary::OAIGeoMatchSetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoMatchSetSummary::OAIGeoMatchSetSummary() {
    this->initializeModel();
}

OAIGeoMatchSetSummary::~OAIGeoMatchSetSummary() {}

void OAIGeoMatchSetSummary::initializeModel() {

    m_geo_match_set_id_isSet = false;
    m_geo_match_set_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGeoMatchSetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoMatchSetSummary::fromJsonObject(QJsonObject json) {

    m_geo_match_set_id_isValid = ::OpenAPI::fromJsonValue(m_geo_match_set_id, json[QString("GeoMatchSetId")]);
    m_geo_match_set_id_isSet = !json[QString("GeoMatchSetId")].isNull() && m_geo_match_set_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIGeoMatchSetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoMatchSetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_geo_match_set_id_isSet) {
        obj.insert(QString("GeoMatchSetId"), ::OpenAPI::toJsonValue(m_geo_match_set_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIGeoMatchSetSummary::getGeoMatchSetId() const {
    return m_geo_match_set_id;
}
void OAIGeoMatchSetSummary::setGeoMatchSetId(const QString &geo_match_set_id) {
    m_geo_match_set_id = geo_match_set_id;
    m_geo_match_set_id_isSet = true;
}

bool OAIGeoMatchSetSummary::is_geo_match_set_id_Set() const{
    return m_geo_match_set_id_isSet;
}

bool OAIGeoMatchSetSummary::is_geo_match_set_id_Valid() const{
    return m_geo_match_set_id_isValid;
}

QString OAIGeoMatchSetSummary::getName() const {
    return m_name;
}
void OAIGeoMatchSetSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGeoMatchSetSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGeoMatchSetSummary::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGeoMatchSetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geo_match_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoMatchSetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_geo_match_set_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
