/*
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssociateWebACLRequest;
import org.openapitools.client.model.CreateByteMatchSetRequest;
import org.openapitools.client.model.CreateByteMatchSetResponse;
import org.openapitools.client.model.CreateGeoMatchSetRequest;
import org.openapitools.client.model.CreateGeoMatchSetResponse;
import org.openapitools.client.model.CreateIPSetRequest;
import org.openapitools.client.model.CreateIPSetResponse;
import org.openapitools.client.model.CreateRateBasedRuleRequest;
import org.openapitools.client.model.CreateRateBasedRuleResponse;
import org.openapitools.client.model.CreateRegexMatchSetRequest;
import org.openapitools.client.model.CreateRegexMatchSetResponse;
import org.openapitools.client.model.CreateRegexPatternSetRequest;
import org.openapitools.client.model.CreateRegexPatternSetResponse;
import org.openapitools.client.model.CreateRuleGroupRequest;
import org.openapitools.client.model.CreateRuleGroupResponse;
import org.openapitools.client.model.CreateRuleRequest;
import org.openapitools.client.model.CreateRuleResponse;
import org.openapitools.client.model.CreateSizeConstraintSetRequest;
import org.openapitools.client.model.CreateSizeConstraintSetResponse;
import org.openapitools.client.model.CreateSqlInjectionMatchSetRequest;
import org.openapitools.client.model.CreateSqlInjectionMatchSetResponse;
import org.openapitools.client.model.CreateWebACLMigrationStackRequest;
import org.openapitools.client.model.CreateWebACLMigrationStackResponse;
import org.openapitools.client.model.CreateWebACLRequest;
import org.openapitools.client.model.CreateWebACLResponse;
import org.openapitools.client.model.CreateXssMatchSetRequest;
import org.openapitools.client.model.CreateXssMatchSetResponse;
import org.openapitools.client.model.DeleteByteMatchSetRequest;
import org.openapitools.client.model.DeleteByteMatchSetResponse;
import org.openapitools.client.model.DeleteGeoMatchSetRequest;
import org.openapitools.client.model.DeleteGeoMatchSetResponse;
import org.openapitools.client.model.DeleteIPSetRequest;
import org.openapitools.client.model.DeleteIPSetResponse;
import org.openapitools.client.model.DeleteLoggingConfigurationRequest;
import org.openapitools.client.model.DeletePermissionPolicyRequest;
import org.openapitools.client.model.DeleteRateBasedRuleRequest;
import org.openapitools.client.model.DeleteRateBasedRuleResponse;
import org.openapitools.client.model.DeleteRegexMatchSetRequest;
import org.openapitools.client.model.DeleteRegexMatchSetResponse;
import org.openapitools.client.model.DeleteRegexPatternSetRequest;
import org.openapitools.client.model.DeleteRegexPatternSetResponse;
import org.openapitools.client.model.DeleteRuleGroupRequest;
import org.openapitools.client.model.DeleteRuleGroupResponse;
import org.openapitools.client.model.DeleteRuleRequest;
import org.openapitools.client.model.DeleteRuleResponse;
import org.openapitools.client.model.DeleteSizeConstraintSetRequest;
import org.openapitools.client.model.DeleteSizeConstraintSetResponse;
import org.openapitools.client.model.DeleteSqlInjectionMatchSetRequest;
import org.openapitools.client.model.DeleteSqlInjectionMatchSetResponse;
import org.openapitools.client.model.DeleteWebACLRequest;
import org.openapitools.client.model.DeleteWebACLResponse;
import org.openapitools.client.model.DeleteXssMatchSetRequest;
import org.openapitools.client.model.DeleteXssMatchSetResponse;
import org.openapitools.client.model.DisassociateWebACLRequest;
import org.openapitools.client.model.GetByteMatchSetRequest;
import org.openapitools.client.model.GetByteMatchSetResponse;
import org.openapitools.client.model.GetChangeTokenResponse;
import org.openapitools.client.model.GetChangeTokenStatusRequest;
import org.openapitools.client.model.GetChangeTokenStatusResponse;
import org.openapitools.client.model.GetGeoMatchSetRequest;
import org.openapitools.client.model.GetGeoMatchSetResponse;
import org.openapitools.client.model.GetIPSetRequest;
import org.openapitools.client.model.GetIPSetResponse;
import org.openapitools.client.model.GetLoggingConfigurationRequest;
import org.openapitools.client.model.GetLoggingConfigurationResponse;
import org.openapitools.client.model.GetPermissionPolicyRequest;
import org.openapitools.client.model.GetPermissionPolicyResponse;
import org.openapitools.client.model.GetRateBasedRuleManagedKeysRequest;
import org.openapitools.client.model.GetRateBasedRuleManagedKeysResponse;
import org.openapitools.client.model.GetRateBasedRuleRequest;
import org.openapitools.client.model.GetRateBasedRuleResponse;
import org.openapitools.client.model.GetRegexMatchSetRequest;
import org.openapitools.client.model.GetRegexMatchSetResponse;
import org.openapitools.client.model.GetRegexPatternSetRequest;
import org.openapitools.client.model.GetRegexPatternSetResponse;
import org.openapitools.client.model.GetRuleGroupRequest;
import org.openapitools.client.model.GetRuleGroupResponse;
import org.openapitools.client.model.GetRuleRequest;
import org.openapitools.client.model.GetRuleResponse;
import org.openapitools.client.model.GetSampledRequestsRequest;
import org.openapitools.client.model.GetSampledRequestsResponse;
import org.openapitools.client.model.GetSizeConstraintSetRequest;
import org.openapitools.client.model.GetSizeConstraintSetResponse;
import org.openapitools.client.model.GetSqlInjectionMatchSetRequest;
import org.openapitools.client.model.GetSqlInjectionMatchSetResponse;
import org.openapitools.client.model.GetWebACLForResourceRequest;
import org.openapitools.client.model.GetWebACLForResourceResponse;
import org.openapitools.client.model.GetWebACLRequest;
import org.openapitools.client.model.GetWebACLResponse;
import org.openapitools.client.model.GetXssMatchSetRequest;
import org.openapitools.client.model.GetXssMatchSetResponse;
import org.openapitools.client.model.ListActivatedRulesInRuleGroupRequest;
import org.openapitools.client.model.ListActivatedRulesInRuleGroupResponse;
import org.openapitools.client.model.ListByteMatchSetsRequest;
import org.openapitools.client.model.ListByteMatchSetsResponse;
import org.openapitools.client.model.ListGeoMatchSetsRequest;
import org.openapitools.client.model.ListGeoMatchSetsResponse;
import org.openapitools.client.model.ListIPSetsRequest;
import org.openapitools.client.model.ListIPSetsResponse;
import org.openapitools.client.model.ListLoggingConfigurationsRequest;
import org.openapitools.client.model.ListLoggingConfigurationsResponse;
import org.openapitools.client.model.ListRateBasedRulesRequest;
import org.openapitools.client.model.ListRateBasedRulesResponse;
import org.openapitools.client.model.ListRegexMatchSetsRequest;
import org.openapitools.client.model.ListRegexMatchSetsResponse;
import org.openapitools.client.model.ListRegexPatternSetsRequest;
import org.openapitools.client.model.ListRegexPatternSetsResponse;
import org.openapitools.client.model.ListResourcesForWebACLRequest;
import org.openapitools.client.model.ListResourcesForWebACLResponse;
import org.openapitools.client.model.ListRuleGroupsRequest;
import org.openapitools.client.model.ListRuleGroupsResponse;
import org.openapitools.client.model.ListRulesRequest;
import org.openapitools.client.model.ListRulesResponse;
import org.openapitools.client.model.ListSizeConstraintSetsRequest;
import org.openapitools.client.model.ListSizeConstraintSetsResponse;
import org.openapitools.client.model.ListSqlInjectionMatchSetsRequest;
import org.openapitools.client.model.ListSqlInjectionMatchSetsResponse;
import org.openapitools.client.model.ListSubscribedRuleGroupsRequest;
import org.openapitools.client.model.ListSubscribedRuleGroupsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListWebACLsRequest;
import org.openapitools.client.model.ListWebACLsResponse;
import org.openapitools.client.model.ListXssMatchSetsRequest;
import org.openapitools.client.model.ListXssMatchSetsResponse;
import org.openapitools.client.model.PutLoggingConfigurationRequest;
import org.openapitools.client.model.PutLoggingConfigurationResponse;
import org.openapitools.client.model.PutPermissionPolicyRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateByteMatchSetRequest;
import org.openapitools.client.model.UpdateByteMatchSetResponse;
import org.openapitools.client.model.UpdateGeoMatchSetRequest;
import org.openapitools.client.model.UpdateGeoMatchSetResponse;
import org.openapitools.client.model.UpdateIPSetRequest;
import org.openapitools.client.model.UpdateIPSetResponse;
import org.openapitools.client.model.UpdateRateBasedRuleRequest;
import org.openapitools.client.model.UpdateRateBasedRuleResponse;
import org.openapitools.client.model.UpdateRegexMatchSetRequest;
import org.openapitools.client.model.UpdateRegexMatchSetResponse;
import org.openapitools.client.model.UpdateRegexPatternSetRequest;
import org.openapitools.client.model.UpdateRegexPatternSetResponse;
import org.openapitools.client.model.UpdateRuleGroupRequest;
import org.openapitools.client.model.UpdateRuleGroupResponse;
import org.openapitools.client.model.UpdateRuleRequest;
import org.openapitools.client.model.UpdateRuleResponse;
import org.openapitools.client.model.UpdateSizeConstraintSetRequest;
import org.openapitools.client.model.UpdateSizeConstraintSetResponse;
import org.openapitools.client.model.UpdateSqlInjectionMatchSetRequest;
import org.openapitools.client.model.UpdateSqlInjectionMatchSetResponse;
import org.openapitools.client.model.UpdateWebACLRequest;
import org.openapitools.client.model.UpdateWebACLResponse;
import org.openapitools.client.model.UpdateXssMatchSetRequest;
import org.openapitools.client.model.UpdateXssMatchSetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for associateWebACL
     * @param xAmzTarget  (required)
     * @param associateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFUnavailableEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateWebACLCall(String xAmzTarget, AssociateWebACLRequest associateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateWebACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.AssociateWebACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateWebACLValidateBeforeCall(String xAmzTarget, AssociateWebACLRequest associateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling associateWebACL(Async)");
        }

        // verify the required parameter 'associateWebACLRequest' is set
        if (associateWebACLRequest == null) {
            throw new ApiException("Missing the required parameter 'associateWebACLRequest' when calling associateWebACL(Async)");
        }

        return associateWebACLCall(xAmzTarget, associateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Associates a web ACL with a resource, either an application load balancer or Amazon API Gateway stage.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFUnavailableEntityException </td><td>  -  </td></tr>
     </table>
     */
    public Object associateWebACL(String xAmzTarget, AssociateWebACLRequest associateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = associateWebACLWithHttpInfo(xAmzTarget, associateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Associates a web ACL with a resource, either an application load balancer or Amazon API Gateway stage.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFUnavailableEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> associateWebACLWithHttpInfo(String xAmzTarget, AssociateWebACLRequest associateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateWebACLValidateBeforeCall(xAmzTarget, associateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Associates a web ACL with a resource, either an application load balancer or Amazon API Gateway stage.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFUnavailableEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateWebACLAsync(String xAmzTarget, AssociateWebACLRequest associateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateWebACLValidateBeforeCall(xAmzTarget, associateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createByteMatchSet
     * @param xAmzTarget  (required)
     * @param createByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createByteMatchSetCall(String xAmzTarget, CreateByteMatchSetRequest createByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createByteMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateByteMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createByteMatchSetValidateBeforeCall(String xAmzTarget, CreateByteMatchSetRequest createByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createByteMatchSet(Async)");
        }

        // verify the required parameter 'createByteMatchSetRequest' is set
        if (createByteMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createByteMatchSetRequest' when calling createByteMatchSet(Async)");
        }

        return createByteMatchSetCall(xAmzTarget, createByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;ByteMatchSet&lt;/code&gt;. You then use &lt;a&gt;UpdateByteMatchSet&lt;/a&gt; to identify the part of a web request that you want AWS WAF to inspect, such as the values of the &lt;code&gt;User-Agent&lt;/code&gt; header or the query string. For example, you can create a &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches any requests with &lt;code&gt;User-Agent&lt;/code&gt; headers that contain the string &lt;code&gt;BadBot&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;ByteMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateByteMatchSet&lt;/a&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateByteMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateByteMatchSetResponse createByteMatchSet(String xAmzTarget, CreateByteMatchSetRequest createByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateByteMatchSetResponse> localVarResp = createByteMatchSetWithHttpInfo(xAmzTarget, createByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;ByteMatchSet&lt;/code&gt;. You then use &lt;a&gt;UpdateByteMatchSet&lt;/a&gt; to identify the part of a web request that you want AWS WAF to inspect, such as the values of the &lt;code&gt;User-Agent&lt;/code&gt; header or the query string. For example, you can create a &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches any requests with &lt;code&gt;User-Agent&lt;/code&gt; headers that contain the string &lt;code&gt;BadBot&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;ByteMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateByteMatchSet&lt;/a&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateByteMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateByteMatchSetResponse> createByteMatchSetWithHttpInfo(String xAmzTarget, CreateByteMatchSetRequest createByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createByteMatchSetValidateBeforeCall(xAmzTarget, createByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateByteMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;ByteMatchSet&lt;/code&gt;. You then use &lt;a&gt;UpdateByteMatchSet&lt;/a&gt; to identify the part of a web request that you want AWS WAF to inspect, such as the values of the &lt;code&gt;User-Agent&lt;/code&gt; header or the query string. For example, you can create a &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches any requests with &lt;code&gt;User-Agent&lt;/code&gt; headers that contain the string &lt;code&gt;BadBot&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;ByteMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateByteMatchSet&lt;/a&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createByteMatchSetAsync(String xAmzTarget, CreateByteMatchSetRequest createByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateByteMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createByteMatchSetValidateBeforeCall(xAmzTarget, createByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateByteMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGeoMatchSet
     * @param xAmzTarget  (required)
     * @param createGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGeoMatchSetCall(String xAmzTarget, CreateGeoMatchSetRequest createGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGeoMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateGeoMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGeoMatchSetValidateBeforeCall(String xAmzTarget, CreateGeoMatchSetRequest createGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createGeoMatchSet(Async)");
        }

        // verify the required parameter 'createGeoMatchSetRequest' is set
        if (createGeoMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createGeoMatchSetRequest' when calling createGeoMatchSet(Async)");
        }

        return createGeoMatchSetCall(xAmzTarget, createGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates an &lt;a&gt;GeoMatchSet&lt;/a&gt;, which you use to specify which web requests you want to allow or block based on the country that the requests originate from. For example, if you&#39;re receiving a lot of requests from one or more countries and you want to block the requests, you can create an &lt;code&gt;GeoMatchSet&lt;/code&gt; that contains those countries and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;GeoMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateGeoMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateGeoMatchSetSet&lt;/code&gt; request to specify the countries that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateGeoMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateGeoMatchSetResponse createGeoMatchSet(String xAmzTarget, CreateGeoMatchSetRequest createGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateGeoMatchSetResponse> localVarResp = createGeoMatchSetWithHttpInfo(xAmzTarget, createGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates an &lt;a&gt;GeoMatchSet&lt;/a&gt;, which you use to specify which web requests you want to allow or block based on the country that the requests originate from. For example, if you&#39;re receiving a lot of requests from one or more countries and you want to block the requests, you can create an &lt;code&gt;GeoMatchSet&lt;/code&gt; that contains those countries and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;GeoMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateGeoMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateGeoMatchSetSet&lt;/code&gt; request to specify the countries that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateGeoMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGeoMatchSetResponse> createGeoMatchSetWithHttpInfo(String xAmzTarget, CreateGeoMatchSetRequest createGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createGeoMatchSetValidateBeforeCall(xAmzTarget, createGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateGeoMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates an &lt;a&gt;GeoMatchSet&lt;/a&gt;, which you use to specify which web requests you want to allow or block based on the country that the requests originate from. For example, if you&#39;re receiving a lot of requests from one or more countries and you want to block the requests, you can create an &lt;code&gt;GeoMatchSet&lt;/code&gt; that contains those countries and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;GeoMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateGeoMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateGeoMatchSetSet&lt;/code&gt; request to specify the countries that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGeoMatchSetAsync(String xAmzTarget, CreateGeoMatchSetRequest createGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateGeoMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGeoMatchSetValidateBeforeCall(xAmzTarget, createGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateGeoMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createIPSet
     * @param xAmzTarget  (required)
     * @param createIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIPSetCall(String xAmzTarget, CreateIPSetRequest createIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createIPSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateIPSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIPSetValidateBeforeCall(String xAmzTarget, CreateIPSetRequest createIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createIPSet(Async)");
        }

        // verify the required parameter 'createIPSetRequest' is set
        if (createIPSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createIPSetRequest' when calling createIPSet(Async)");
        }

        return createIPSetCall(xAmzTarget, createIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates an &lt;a&gt;IPSet&lt;/a&gt;, which you use to specify which web requests that you want to allow or block based on the IP addresses that the requests originate from. For example, if you&#39;re receiving a lot of requests from one or more individual IP addresses or one or more ranges of IP addresses and you want to block the requests, you can create an &lt;code&gt;IPSet&lt;/code&gt; that contains those IP addresses and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;IPSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateIPSet&lt;/code&gt; request to specify the IP addresses that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateIPSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateIPSetResponse createIPSet(String xAmzTarget, CreateIPSetRequest createIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateIPSetResponse> localVarResp = createIPSetWithHttpInfo(xAmzTarget, createIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates an &lt;a&gt;IPSet&lt;/a&gt;, which you use to specify which web requests that you want to allow or block based on the IP addresses that the requests originate from. For example, if you&#39;re receiving a lot of requests from one or more individual IP addresses or one or more ranges of IP addresses and you want to block the requests, you can create an &lt;code&gt;IPSet&lt;/code&gt; that contains those IP addresses and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;IPSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateIPSet&lt;/code&gt; request to specify the IP addresses that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateIPSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateIPSetResponse> createIPSetWithHttpInfo(String xAmzTarget, CreateIPSetRequest createIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createIPSetValidateBeforeCall(xAmzTarget, createIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateIPSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates an &lt;a&gt;IPSet&lt;/a&gt;, which you use to specify which web requests that you want to allow or block based on the IP addresses that the requests originate from. For example, if you&#39;re receiving a lot of requests from one or more individual IP addresses or one or more ranges of IP addresses and you want to block the requests, you can create an &lt;code&gt;IPSet&lt;/code&gt; that contains those IP addresses and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;IPSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateIPSet&lt;/code&gt; request to specify the IP addresses that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIPSetAsync(String xAmzTarget, CreateIPSetRequest createIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateIPSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIPSetValidateBeforeCall(xAmzTarget, createIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateIPSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRateBasedRule
     * @param xAmzTarget  (required)
     * @param createRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRateBasedRuleCall(String xAmzTarget, CreateRateBasedRuleRequest createRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRateBasedRuleRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateRateBasedRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRateBasedRuleValidateBeforeCall(String xAmzTarget, CreateRateBasedRuleRequest createRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createRateBasedRule(Async)");
        }

        // verify the required parameter 'createRateBasedRuleRequest' is set
        if (createRateBasedRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'createRateBasedRuleRequest' when calling createRateBasedRule(Async)");
        }

        return createRateBasedRuleCall(xAmzTarget, createRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;a&gt;RateBasedRule&lt;/a&gt;. The &lt;code&gt;RateBasedRule&lt;/code&gt; contains a &lt;code&gt;RateLimit&lt;/code&gt;, which specifies the maximum number of requests that AWS WAF allows from a specified IP address in a five-minute period. The &lt;code&gt;RateBasedRule&lt;/code&gt; also contains the &lt;code&gt;IPSet&lt;/code&gt; objects, &lt;code&gt;ByteMatchSet&lt;/code&gt; objects, and other predicates that identify the requests that you want to count or block if these requests exceed the &lt;code&gt;RateLimit&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you add more than one predicate to a &lt;code&gt;RateBasedRule&lt;/code&gt;, a request not only must exceed the &lt;code&gt;RateLimit&lt;/code&gt;, but it also must match all the conditions to be counted or blocked. For example, suppose you add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44/32&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;You then add the &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to block requests that meet the conditions in the rule. For a request to be blocked, it must come from the IP address 192.0.2.44 &lt;i&gt;and&lt;/i&gt; the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt;. Further, requests that match these two conditions must be received at a rate of more than 1,000 requests every five minutes. If both conditions are met and the rate is exceeded, AWS WAF blocks the requests. If the rate drops below 1,000 for a five-minute period, AWS WAF no longer blocks the requests.&lt;/p&gt; &lt;p&gt;As a second example, suppose you want to limit requests to a particular page on your site. To do this, you could add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; with &lt;code&gt;FieldToMatch&lt;/code&gt; of &lt;code&gt;URI&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;PositionalConstraint&lt;/code&gt; of &lt;code&gt;STARTS_WITH&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;TargetString&lt;/code&gt; of &lt;code&gt;login&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;By adding this &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, you could limit requests to your login page without affecting the rest of your site.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RateBasedRule&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in the rule. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, and &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRateBasedRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRule&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRateBasedRule&lt;/code&gt; request to specify the predicates that you want to include in the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;RateBasedRule&lt;/code&gt;. For more information, see &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRateBasedRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRateBasedRuleResponse createRateBasedRule(String xAmzTarget, CreateRateBasedRuleRequest createRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRateBasedRuleResponse> localVarResp = createRateBasedRuleWithHttpInfo(xAmzTarget, createRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;a&gt;RateBasedRule&lt;/a&gt;. The &lt;code&gt;RateBasedRule&lt;/code&gt; contains a &lt;code&gt;RateLimit&lt;/code&gt;, which specifies the maximum number of requests that AWS WAF allows from a specified IP address in a five-minute period. The &lt;code&gt;RateBasedRule&lt;/code&gt; also contains the &lt;code&gt;IPSet&lt;/code&gt; objects, &lt;code&gt;ByteMatchSet&lt;/code&gt; objects, and other predicates that identify the requests that you want to count or block if these requests exceed the &lt;code&gt;RateLimit&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you add more than one predicate to a &lt;code&gt;RateBasedRule&lt;/code&gt;, a request not only must exceed the &lt;code&gt;RateLimit&lt;/code&gt;, but it also must match all the conditions to be counted or blocked. For example, suppose you add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44/32&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;You then add the &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to block requests that meet the conditions in the rule. For a request to be blocked, it must come from the IP address 192.0.2.44 &lt;i&gt;and&lt;/i&gt; the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt;. Further, requests that match these two conditions must be received at a rate of more than 1,000 requests every five minutes. If both conditions are met and the rate is exceeded, AWS WAF blocks the requests. If the rate drops below 1,000 for a five-minute period, AWS WAF no longer blocks the requests.&lt;/p&gt; &lt;p&gt;As a second example, suppose you want to limit requests to a particular page on your site. To do this, you could add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; with &lt;code&gt;FieldToMatch&lt;/code&gt; of &lt;code&gt;URI&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;PositionalConstraint&lt;/code&gt; of &lt;code&gt;STARTS_WITH&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;TargetString&lt;/code&gt; of &lt;code&gt;login&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;By adding this &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, you could limit requests to your login page without affecting the rest of your site.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RateBasedRule&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in the rule. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, and &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRateBasedRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRule&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRateBasedRule&lt;/code&gt; request to specify the predicates that you want to include in the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;RateBasedRule&lt;/code&gt;. For more information, see &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRateBasedRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRateBasedRuleResponse> createRateBasedRuleWithHttpInfo(String xAmzTarget, CreateRateBasedRuleRequest createRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRateBasedRuleValidateBeforeCall(xAmzTarget, createRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRateBasedRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;a&gt;RateBasedRule&lt;/a&gt;. The &lt;code&gt;RateBasedRule&lt;/code&gt; contains a &lt;code&gt;RateLimit&lt;/code&gt;, which specifies the maximum number of requests that AWS WAF allows from a specified IP address in a five-minute period. The &lt;code&gt;RateBasedRule&lt;/code&gt; also contains the &lt;code&gt;IPSet&lt;/code&gt; objects, &lt;code&gt;ByteMatchSet&lt;/code&gt; objects, and other predicates that identify the requests that you want to count or block if these requests exceed the &lt;code&gt;RateLimit&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you add more than one predicate to a &lt;code&gt;RateBasedRule&lt;/code&gt;, a request not only must exceed the &lt;code&gt;RateLimit&lt;/code&gt;, but it also must match all the conditions to be counted or blocked. For example, suppose you add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44/32&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;You then add the &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to block requests that meet the conditions in the rule. For a request to be blocked, it must come from the IP address 192.0.2.44 &lt;i&gt;and&lt;/i&gt; the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt;. Further, requests that match these two conditions must be received at a rate of more than 1,000 requests every five minutes. If both conditions are met and the rate is exceeded, AWS WAF blocks the requests. If the rate drops below 1,000 for a five-minute period, AWS WAF no longer blocks the requests.&lt;/p&gt; &lt;p&gt;As a second example, suppose you want to limit requests to a particular page on your site. To do this, you could add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; with &lt;code&gt;FieldToMatch&lt;/code&gt; of &lt;code&gt;URI&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;PositionalConstraint&lt;/code&gt; of &lt;code&gt;STARTS_WITH&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;TargetString&lt;/code&gt; of &lt;code&gt;login&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;By adding this &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, you could limit requests to your login page without affecting the rest of your site.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RateBasedRule&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in the rule. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, and &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRateBasedRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRule&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRateBasedRule&lt;/code&gt; request to specify the predicates that you want to include in the rule.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;RateBasedRule&lt;/code&gt;. For more information, see &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRateBasedRuleAsync(String xAmzTarget, CreateRateBasedRuleRequest createRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRateBasedRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRateBasedRuleValidateBeforeCall(xAmzTarget, createRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRateBasedRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRegexMatchSet
     * @param xAmzTarget  (required)
     * @param createRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegexMatchSetCall(String xAmzTarget, CreateRegexMatchSetRequest createRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRegexMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateRegexMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRegexMatchSetValidateBeforeCall(String xAmzTarget, CreateRegexMatchSetRequest createRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createRegexMatchSet(Async)");
        }

        // verify the required parameter 'createRegexMatchSetRequest' is set
        if (createRegexMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createRegexMatchSetRequest' when calling createRegexMatchSet(Async)");
        }

        return createRegexMatchSetCall(xAmzTarget, createRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;a&gt;RegexMatchSet&lt;/a&gt;. You then use &lt;a&gt;UpdateRegexMatchSet&lt;/a&gt; to identify the part of a web request that you want AWS WAF to inspect, such as the values of the &lt;code&gt;User-Agent&lt;/code&gt; header or the query string. For example, you can create a &lt;code&gt;RegexMatchSet&lt;/code&gt; that contains a &lt;code&gt;RegexMatchTuple&lt;/code&gt; that looks for any requests with &lt;code&gt;User-Agent&lt;/code&gt; headers that match a &lt;code&gt;RegexPatternSet&lt;/code&gt; with pattern &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateRegexMatchSet&lt;/a&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value, using a &lt;code&gt;RegexPatternSet&lt;/code&gt;, that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRegexMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRegexMatchSetResponse createRegexMatchSet(String xAmzTarget, CreateRegexMatchSetRequest createRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRegexMatchSetResponse> localVarResp = createRegexMatchSetWithHttpInfo(xAmzTarget, createRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;a&gt;RegexMatchSet&lt;/a&gt;. You then use &lt;a&gt;UpdateRegexMatchSet&lt;/a&gt; to identify the part of a web request that you want AWS WAF to inspect, such as the values of the &lt;code&gt;User-Agent&lt;/code&gt; header or the query string. For example, you can create a &lt;code&gt;RegexMatchSet&lt;/code&gt; that contains a &lt;code&gt;RegexMatchTuple&lt;/code&gt; that looks for any requests with &lt;code&gt;User-Agent&lt;/code&gt; headers that match a &lt;code&gt;RegexPatternSet&lt;/code&gt; with pattern &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateRegexMatchSet&lt;/a&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value, using a &lt;code&gt;RegexPatternSet&lt;/code&gt;, that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRegexMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRegexMatchSetResponse> createRegexMatchSetWithHttpInfo(String xAmzTarget, CreateRegexMatchSetRequest createRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRegexMatchSetValidateBeforeCall(xAmzTarget, createRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRegexMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;a&gt;RegexMatchSet&lt;/a&gt;. You then use &lt;a&gt;UpdateRegexMatchSet&lt;/a&gt; to identify the part of a web request that you want AWS WAF to inspect, such as the values of the &lt;code&gt;User-Agent&lt;/code&gt; header or the query string. For example, you can create a &lt;code&gt;RegexMatchSet&lt;/code&gt; that contains a &lt;code&gt;RegexMatchTuple&lt;/code&gt; that looks for any requests with &lt;code&gt;User-Agent&lt;/code&gt; headers that match a &lt;code&gt;RegexPatternSet&lt;/code&gt; with pattern &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateRegexMatchSet&lt;/a&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value, using a &lt;code&gt;RegexPatternSet&lt;/code&gt;, that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegexMatchSetAsync(String xAmzTarget, CreateRegexMatchSetRequest createRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRegexMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRegexMatchSetValidateBeforeCall(xAmzTarget, createRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRegexMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRegexPatternSet
     * @param xAmzTarget  (required)
     * @param createRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegexPatternSetCall(String xAmzTarget, CreateRegexPatternSetRequest createRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRegexPatternSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateRegexPatternSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRegexPatternSetValidateBeforeCall(String xAmzTarget, CreateRegexPatternSetRequest createRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createRegexPatternSet(Async)");
        }

        // verify the required parameter 'createRegexPatternSetRequest' is set
        if (createRegexPatternSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createRegexPatternSetRequest' when calling createRegexPatternSet(Async)");
        }

        return createRegexPatternSetCall(xAmzTarget, createRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;RegexPatternSet&lt;/code&gt;. You then use &lt;a&gt;UpdateRegexPatternSet&lt;/a&gt; to specify the regular expression (regex) pattern that you want AWS WAF to search for, such as &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexPatternSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateRegexPatternSet&lt;/a&gt; request to specify the string that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRegexPatternSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRegexPatternSetResponse createRegexPatternSet(String xAmzTarget, CreateRegexPatternSetRequest createRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRegexPatternSetResponse> localVarResp = createRegexPatternSetWithHttpInfo(xAmzTarget, createRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;RegexPatternSet&lt;/code&gt;. You then use &lt;a&gt;UpdateRegexPatternSet&lt;/a&gt; to specify the regular expression (regex) pattern that you want AWS WAF to search for, such as &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexPatternSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateRegexPatternSet&lt;/a&gt; request to specify the string that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRegexPatternSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRegexPatternSetResponse> createRegexPatternSetWithHttpInfo(String xAmzTarget, CreateRegexPatternSetRequest createRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRegexPatternSetValidateBeforeCall(xAmzTarget, createRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRegexPatternSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;RegexPatternSet&lt;/code&gt;. You then use &lt;a&gt;UpdateRegexPatternSet&lt;/a&gt; to specify the regular expression (regex) pattern that you want AWS WAF to search for, such as &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexPatternSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateRegexPatternSet&lt;/a&gt; request to specify the string that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegexPatternSetAsync(String xAmzTarget, CreateRegexPatternSetRequest createRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRegexPatternSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRegexPatternSetValidateBeforeCall(xAmzTarget, createRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRegexPatternSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRule
     * @param xAmzTarget  (required)
     * @param createRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleCall(String xAmzTarget, CreateRuleRequest createRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRuleRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRuleValidateBeforeCall(String xAmzTarget, CreateRuleRequest createRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createRule(Async)");
        }

        // verify the required parameter 'createRuleRequest' is set
        if (createRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'createRuleRequest' when calling createRule(Async)");
        }

        return createRuleCall(xAmzTarget, createRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;Rule&lt;/code&gt;, which contains the &lt;code&gt;IPSet&lt;/code&gt; objects, &lt;code&gt;ByteMatchSet&lt;/code&gt; objects, and other predicates that identify the requests that you want to block. If you add more than one predicate to a &lt;code&gt;Rule&lt;/code&gt;, a request must match all of the specifications to be allowed or blocked. For example, suppose that you add the following to a &lt;code&gt;Rule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44/32&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You then add the &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to blocks requests that satisfy the &lt;code&gt;Rule&lt;/code&gt;. For a request to be blocked, it must come from the IP address 192.0.2.44 &lt;i&gt;and&lt;/i&gt; the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;Rule&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in the &lt;code&gt;Rule&lt;/code&gt;. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, and &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRule&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRule&lt;/code&gt; request to specify the predicates that you want to include in the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;Rule&lt;/code&gt;. For more information, see &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRuleResponse createRule(String xAmzTarget, CreateRuleRequest createRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRuleResponse> localVarResp = createRuleWithHttpInfo(xAmzTarget, createRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;Rule&lt;/code&gt;, which contains the &lt;code&gt;IPSet&lt;/code&gt; objects, &lt;code&gt;ByteMatchSet&lt;/code&gt; objects, and other predicates that identify the requests that you want to block. If you add more than one predicate to a &lt;code&gt;Rule&lt;/code&gt;, a request must match all of the specifications to be allowed or blocked. For example, suppose that you add the following to a &lt;code&gt;Rule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44/32&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You then add the &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to blocks requests that satisfy the &lt;code&gt;Rule&lt;/code&gt;. For a request to be blocked, it must come from the IP address 192.0.2.44 &lt;i&gt;and&lt;/i&gt; the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;Rule&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in the &lt;code&gt;Rule&lt;/code&gt;. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, and &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRule&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRule&lt;/code&gt; request to specify the predicates that you want to include in the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;Rule&lt;/code&gt;. For more information, see &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRuleResponse> createRuleWithHttpInfo(String xAmzTarget, CreateRuleRequest createRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRuleValidateBeforeCall(xAmzTarget, createRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;Rule&lt;/code&gt;, which contains the &lt;code&gt;IPSet&lt;/code&gt; objects, &lt;code&gt;ByteMatchSet&lt;/code&gt; objects, and other predicates that identify the requests that you want to block. If you add more than one predicate to a &lt;code&gt;Rule&lt;/code&gt;, a request must match all of the specifications to be allowed or blocked. For example, suppose that you add the following to a &lt;code&gt;Rule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44/32&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You then add the &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to blocks requests that satisfy the &lt;code&gt;Rule&lt;/code&gt;. For a request to be blocked, it must come from the IP address 192.0.2.44 &lt;i&gt;and&lt;/i&gt; the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;Rule&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in the &lt;code&gt;Rule&lt;/code&gt;. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, and &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRule&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRule&lt;/code&gt; request to specify the predicates that you want to include in the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;Rule&lt;/code&gt;. For more information, see &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleAsync(String xAmzTarget, CreateRuleRequest createRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRuleValidateBeforeCall(xAmzTarget, createRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRuleGroup
     * @param xAmzTarget  (required)
     * @param createRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleGroupCall(String xAmzTarget, CreateRuleGroupRequest createRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRuleGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateRuleGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRuleGroupValidateBeforeCall(String xAmzTarget, CreateRuleGroupRequest createRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createRuleGroup(Async)");
        }

        // verify the required parameter 'createRuleGroupRequest' is set
        if (createRuleGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createRuleGroupRequest' when calling createRuleGroup(Async)");
        }

        return createRuleGroupCall(xAmzTarget, createRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;RuleGroup&lt;/code&gt;. A rule group is a collection of predefined rules that you add to a web ACL. You use &lt;a&gt;UpdateRuleGroup&lt;/a&gt; to add rules to the rule group.&lt;/p&gt; &lt;p&gt;Rule groups are subject to the following limits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Three rule groups per account. You can request an increase to this limit by contacting customer support.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;One rule group per web ACL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Ten rules per rule group.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRuleGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRuleGroupResponse createRuleGroup(String xAmzTarget, CreateRuleGroupRequest createRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRuleGroupResponse> localVarResp = createRuleGroupWithHttpInfo(xAmzTarget, createRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;RuleGroup&lt;/code&gt;. A rule group is a collection of predefined rules that you add to a web ACL. You use &lt;a&gt;UpdateRuleGroup&lt;/a&gt; to add rules to the rule group.&lt;/p&gt; &lt;p&gt;Rule groups are subject to the following limits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Three rule groups per account. You can request an increase to this limit by contacting customer support.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;One rule group per web ACL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Ten rules per rule group.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRuleGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRuleGroupResponse> createRuleGroupWithHttpInfo(String xAmzTarget, CreateRuleGroupRequest createRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRuleGroupValidateBeforeCall(xAmzTarget, createRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRuleGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;RuleGroup&lt;/code&gt;. A rule group is a collection of predefined rules that you add to a web ACL. You use &lt;a&gt;UpdateRuleGroup&lt;/a&gt; to add rules to the rule group.&lt;/p&gt; &lt;p&gt;Rule groups are subject to the following limits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Three rule groups per account. You can request an increase to this limit by contacting customer support.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;One rule group per web ACL.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Ten rules per rule group.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleGroupAsync(String xAmzTarget, CreateRuleGroupRequest createRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRuleGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRuleGroupValidateBeforeCall(xAmzTarget, createRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRuleGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSizeConstraintSet
     * @param xAmzTarget  (required)
     * @param createSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSizeConstraintSetCall(String xAmzTarget, CreateSizeConstraintSetRequest createSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSizeConstraintSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateSizeConstraintSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSizeConstraintSetValidateBeforeCall(String xAmzTarget, CreateSizeConstraintSetRequest createSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createSizeConstraintSet(Async)");
        }

        // verify the required parameter 'createSizeConstraintSetRequest' is set
        if (createSizeConstraintSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createSizeConstraintSetRequest' when calling createSizeConstraintSet(Async)");
        }

        return createSizeConstraintSetCall(xAmzTarget, createSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;SizeConstraintSet&lt;/code&gt;. You then use &lt;a&gt;UpdateSizeConstraintSet&lt;/a&gt; to identify the part of a web request that you want AWS WAF to check for length, such as the length of the &lt;code&gt;User-Agent&lt;/code&gt; header or the length of the query string. For example, you can create a &lt;code&gt;SizeConstraintSet&lt;/code&gt; that matches any requests that have a query string that is longer than 100 bytes. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SizeConstraintSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateSizeConstraintSet&lt;/a&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateSizeConstraintSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateSizeConstraintSetResponse createSizeConstraintSet(String xAmzTarget, CreateSizeConstraintSetRequest createSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateSizeConstraintSetResponse> localVarResp = createSizeConstraintSetWithHttpInfo(xAmzTarget, createSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;SizeConstraintSet&lt;/code&gt;. You then use &lt;a&gt;UpdateSizeConstraintSet&lt;/a&gt; to identify the part of a web request that you want AWS WAF to check for length, such as the length of the &lt;code&gt;User-Agent&lt;/code&gt; header or the length of the query string. For example, you can create a &lt;code&gt;SizeConstraintSet&lt;/code&gt; that matches any requests that have a query string that is longer than 100 bytes. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SizeConstraintSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateSizeConstraintSet&lt;/a&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateSizeConstraintSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSizeConstraintSetResponse> createSizeConstraintSetWithHttpInfo(String xAmzTarget, CreateSizeConstraintSetRequest createSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSizeConstraintSetValidateBeforeCall(xAmzTarget, createSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateSizeConstraintSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;SizeConstraintSet&lt;/code&gt;. You then use &lt;a&gt;UpdateSizeConstraintSet&lt;/a&gt; to identify the part of a web request that you want AWS WAF to check for length, such as the length of the &lt;code&gt;User-Agent&lt;/code&gt; header or the length of the query string. For example, you can create a &lt;code&gt;SizeConstraintSet&lt;/code&gt; that matches any requests that have a query string that is longer than 100 bytes. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SizeConstraintSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateSizeConstraintSet&lt;/a&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSizeConstraintSetAsync(String xAmzTarget, CreateSizeConstraintSetRequest createSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateSizeConstraintSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSizeConstraintSetValidateBeforeCall(xAmzTarget, createSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateSizeConstraintSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSqlInjectionMatchSet
     * @param xAmzTarget  (required)
     * @param createSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSqlInjectionMatchSetCall(String xAmzTarget, CreateSqlInjectionMatchSetRequest createSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSqlInjectionMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateSqlInjectionMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSqlInjectionMatchSetValidateBeforeCall(String xAmzTarget, CreateSqlInjectionMatchSetRequest createSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createSqlInjectionMatchSet(Async)");
        }

        // verify the required parameter 'createSqlInjectionMatchSetRequest' is set
        if (createSqlInjectionMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createSqlInjectionMatchSetRequest' when calling createSqlInjectionMatchSet(Async)");
        }

        return createSqlInjectionMatchSetCall(xAmzTarget, createSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;, which you use to allow, block, or count requests that contain snippets of SQL code in a specified part of web requests. AWS WAF searches for character sequences that are likely to be malicious strings.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt; request to specify the parts of web requests in which you want to allow, block, or count malicious SQL code.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateSqlInjectionMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateSqlInjectionMatchSetResponse createSqlInjectionMatchSet(String xAmzTarget, CreateSqlInjectionMatchSetRequest createSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateSqlInjectionMatchSetResponse> localVarResp = createSqlInjectionMatchSetWithHttpInfo(xAmzTarget, createSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;, which you use to allow, block, or count requests that contain snippets of SQL code in a specified part of web requests. AWS WAF searches for character sequences that are likely to be malicious strings.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt; request to specify the parts of web requests in which you want to allow, block, or count malicious SQL code.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateSqlInjectionMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSqlInjectionMatchSetResponse> createSqlInjectionMatchSetWithHttpInfo(String xAmzTarget, CreateSqlInjectionMatchSetRequest createSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSqlInjectionMatchSetValidateBeforeCall(xAmzTarget, createSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateSqlInjectionMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;, which you use to allow, block, or count requests that contain snippets of SQL code in a specified part of web requests. AWS WAF searches for character sequences that are likely to be malicious strings.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt; request to specify the parts of web requests in which you want to allow, block, or count malicious SQL code.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSqlInjectionMatchSetAsync(String xAmzTarget, CreateSqlInjectionMatchSetRequest createSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateSqlInjectionMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSqlInjectionMatchSetValidateBeforeCall(xAmzTarget, createSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateSqlInjectionMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWebACL
     * @param xAmzTarget  (required)
     * @param createWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebACLCall(String xAmzTarget, CreateWebACLRequest createWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateWebACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebACLValidateBeforeCall(String xAmzTarget, CreateWebACLRequest createWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createWebACL(Async)");
        }

        // verify the required parameter 'createWebACLRequest' is set
        if (createWebACLRequest == null) {
            throw new ApiException("Missing the required parameter 'createWebACLRequest' when calling createWebACL(Async)");
        }

        return createWebACLCall(xAmzTarget, createWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;WebACL&lt;/code&gt;, which contains the &lt;code&gt;Rules&lt;/code&gt; that identify the CloudFront web requests that you want to allow, block, or count. AWS WAF evaluates &lt;code&gt;Rules&lt;/code&gt; in order based on the value of &lt;code&gt;Priority&lt;/code&gt; for each &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You also specify a default action, either &lt;code&gt;ALLOW&lt;/code&gt; or &lt;code&gt;BLOCK&lt;/code&gt;. If a web request doesn&#39;t match any of the &lt;code&gt;Rules&lt;/code&gt; in a &lt;code&gt;WebACL&lt;/code&gt;, AWS WAF responds to the request with the default action. &lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;WebACL&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;ByteMatchSet&lt;/code&gt; objects and other predicates that you want to include in &lt;code&gt;Rules&lt;/code&gt;. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;UpdateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, &lt;a&gt;UpdateIPSet&lt;/a&gt;, &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;, and &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;. For more information, see &lt;a&gt;CreateRule&lt;/a&gt; and &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateWebACL&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateWebACL&lt;/a&gt; request to specify the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;, to specify the default action, and to associate the &lt;code&gt;WebACL&lt;/code&gt; with a CloudFront distribution.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateWebACLResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebACLResponse createWebACL(String xAmzTarget, CreateWebACLRequest createWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateWebACLResponse> localVarResp = createWebACLWithHttpInfo(xAmzTarget, createWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;WebACL&lt;/code&gt;, which contains the &lt;code&gt;Rules&lt;/code&gt; that identify the CloudFront web requests that you want to allow, block, or count. AWS WAF evaluates &lt;code&gt;Rules&lt;/code&gt; in order based on the value of &lt;code&gt;Priority&lt;/code&gt; for each &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You also specify a default action, either &lt;code&gt;ALLOW&lt;/code&gt; or &lt;code&gt;BLOCK&lt;/code&gt;. If a web request doesn&#39;t match any of the &lt;code&gt;Rules&lt;/code&gt; in a &lt;code&gt;WebACL&lt;/code&gt;, AWS WAF responds to the request with the default action. &lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;WebACL&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;ByteMatchSet&lt;/code&gt; objects and other predicates that you want to include in &lt;code&gt;Rules&lt;/code&gt;. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;UpdateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, &lt;a&gt;UpdateIPSet&lt;/a&gt;, &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;, and &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;. For more information, see &lt;a&gt;CreateRule&lt;/a&gt; and &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateWebACL&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateWebACL&lt;/a&gt; request to specify the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;, to specify the default action, and to associate the &lt;code&gt;WebACL&lt;/code&gt; with a CloudFront distribution.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateWebACLResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateWebACLResponse> createWebACLWithHttpInfo(String xAmzTarget, CreateWebACLRequest createWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createWebACLValidateBeforeCall(xAmzTarget, createWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateWebACLResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a &lt;code&gt;WebACL&lt;/code&gt;, which contains the &lt;code&gt;Rules&lt;/code&gt; that identify the CloudFront web requests that you want to allow, block, or count. AWS WAF evaluates &lt;code&gt;Rules&lt;/code&gt; in order based on the value of &lt;code&gt;Priority&lt;/code&gt; for each &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You also specify a default action, either &lt;code&gt;ALLOW&lt;/code&gt; or &lt;code&gt;BLOCK&lt;/code&gt;. If a web request doesn&#39;t match any of the &lt;code&gt;Rules&lt;/code&gt; in a &lt;code&gt;WebACL&lt;/code&gt;, AWS WAF responds to the request with the default action. &lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;WebACL&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;ByteMatchSet&lt;/code&gt; objects and other predicates that you want to include in &lt;code&gt;Rules&lt;/code&gt;. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;UpdateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, &lt;a&gt;UpdateIPSet&lt;/a&gt;, &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;, and &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;. For more information, see &lt;a&gt;CreateRule&lt;/a&gt; and &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateWebACL&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateWebACL&lt;/a&gt; request to specify the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;, to specify the default action, and to associate the &lt;code&gt;WebACL&lt;/code&gt; with a CloudFront distribution.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebACLAsync(String xAmzTarget, CreateWebACLRequest createWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateWebACLResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebACLValidateBeforeCall(xAmzTarget, createWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateWebACLResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWebACLMigrationStack
     * @param xAmzTarget  (required)
     * @param createWebACLMigrationStackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFEntityMigrationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebACLMigrationStackCall(String xAmzTarget, CreateWebACLMigrationStackRequest createWebACLMigrationStackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebACLMigrationStackRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateWebACLMigrationStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebACLMigrationStackValidateBeforeCall(String xAmzTarget, CreateWebACLMigrationStackRequest createWebACLMigrationStackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createWebACLMigrationStack(Async)");
        }

        // verify the required parameter 'createWebACLMigrationStackRequest' is set
        if (createWebACLMigrationStackRequest == null) {
            throw new ApiException("Missing the required parameter 'createWebACLMigrationStackRequest' when calling createWebACLMigrationStack(Async)");
        }

        return createWebACLMigrationStackCall(xAmzTarget, createWebACLMigrationStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an AWS CloudFormation WAFV2 template for the specified web ACL in the specified Amazon S3 bucket. Then, in CloudFormation, you create a stack from the template, to create the web ACL and its resources in AWS WAFV2. Use this to migrate your AWS WAF Classic web ACL to the latest version of AWS WAF.&lt;/p&gt; &lt;p&gt;This is part of a larger migration procedure for web ACLs from AWS WAF Classic to the latest version of AWS WAF. For the full procedure, including caveats and manual steps to complete the migration and switch over to the new web ACL, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-migrating-from-classic.html\&quot;&gt;Migrating your AWS WAF Classic resources to AWS WAF&lt;/a&gt; in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createWebACLMigrationStackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateWebACLMigrationStackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFEntityMigrationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebACLMigrationStackResponse createWebACLMigrationStack(String xAmzTarget, CreateWebACLMigrationStackRequest createWebACLMigrationStackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateWebACLMigrationStackResponse> localVarResp = createWebACLMigrationStackWithHttpInfo(xAmzTarget, createWebACLMigrationStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an AWS CloudFormation WAFV2 template for the specified web ACL in the specified Amazon S3 bucket. Then, in CloudFormation, you create a stack from the template, to create the web ACL and its resources in AWS WAFV2. Use this to migrate your AWS WAF Classic web ACL to the latest version of AWS WAF.&lt;/p&gt; &lt;p&gt;This is part of a larger migration procedure for web ACLs from AWS WAF Classic to the latest version of AWS WAF. For the full procedure, including caveats and manual steps to complete the migration and switch over to the new web ACL, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-migrating-from-classic.html\&quot;&gt;Migrating your AWS WAF Classic resources to AWS WAF&lt;/a&gt; in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createWebACLMigrationStackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateWebACLMigrationStackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFEntityMigrationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateWebACLMigrationStackResponse> createWebACLMigrationStackWithHttpInfo(String xAmzTarget, CreateWebACLMigrationStackRequest createWebACLMigrationStackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createWebACLMigrationStackValidateBeforeCall(xAmzTarget, createWebACLMigrationStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateWebACLMigrationStackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an AWS CloudFormation WAFV2 template for the specified web ACL in the specified Amazon S3 bucket. Then, in CloudFormation, you create a stack from the template, to create the web ACL and its resources in AWS WAFV2. Use this to migrate your AWS WAF Classic web ACL to the latest version of AWS WAF.&lt;/p&gt; &lt;p&gt;This is part of a larger migration procedure for web ACLs from AWS WAF Classic to the latest version of AWS WAF. For the full procedure, including caveats and manual steps to complete the migration and switch over to the new web ACL, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-migrating-from-classic.html\&quot;&gt;Migrating your AWS WAF Classic resources to AWS WAF&lt;/a&gt; in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createWebACLMigrationStackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFEntityMigrationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebACLMigrationStackAsync(String xAmzTarget, CreateWebACLMigrationStackRequest createWebACLMigrationStackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateWebACLMigrationStackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebACLMigrationStackValidateBeforeCall(xAmzTarget, createWebACLMigrationStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateWebACLMigrationStackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createXssMatchSet
     * @param xAmzTarget  (required)
     * @param createXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createXssMatchSetCall(String xAmzTarget, CreateXssMatchSetRequest createXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createXssMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.CreateXssMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createXssMatchSetValidateBeforeCall(String xAmzTarget, CreateXssMatchSetRequest createXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createXssMatchSet(Async)");
        }

        // verify the required parameter 'createXssMatchSetRequest' is set
        if (createXssMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'createXssMatchSetRequest' when calling createXssMatchSet(Async)");
        }

        return createXssMatchSetCall(xAmzTarget, createXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates an &lt;a&gt;XssMatchSet&lt;/a&gt;, which you use to allow, block, or count requests that contain cross-site scripting attacks in the specified part of web requests. AWS WAF searches for character sequences that are likely to be malicious strings.&lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;XssMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateXssMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateXssMatchSet&lt;/a&gt; request to specify the parts of web requests in which you want to allow, block, or count cross-site scripting attacks.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateXssMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateXssMatchSetResponse createXssMatchSet(String xAmzTarget, CreateXssMatchSetRequest createXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateXssMatchSetResponse> localVarResp = createXssMatchSetWithHttpInfo(xAmzTarget, createXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates an &lt;a&gt;XssMatchSet&lt;/a&gt;, which you use to allow, block, or count requests that contain cross-site scripting attacks in the specified part of web requests. AWS WAF searches for character sequences that are likely to be malicious strings.&lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;XssMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateXssMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateXssMatchSet&lt;/a&gt; request to specify the parts of web requests in which you want to allow, block, or count cross-site scripting attacks.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateXssMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateXssMatchSetResponse> createXssMatchSetWithHttpInfo(String xAmzTarget, CreateXssMatchSetRequest createXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createXssMatchSetValidateBeforeCall(xAmzTarget, createXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateXssMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates an &lt;a&gt;XssMatchSet&lt;/a&gt;, which you use to allow, block, or count requests that contain cross-site scripting attacks in the specified part of web requests. AWS WAF searches for character sequences that are likely to be malicious strings.&lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;XssMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;CreateXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;CreateXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateXssMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;a&gt;UpdateXssMatchSet&lt;/a&gt; request to specify the parts of web requests in which you want to allow, block, or count cross-site scripting attacks.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createXssMatchSetAsync(String xAmzTarget, CreateXssMatchSetRequest createXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateXssMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createXssMatchSetValidateBeforeCall(xAmzTarget, createXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateXssMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteByteMatchSet
     * @param xAmzTarget  (required)
     * @param deleteByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteByteMatchSetCall(String xAmzTarget, DeleteByteMatchSetRequest deleteByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteByteMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteByteMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByteMatchSetValidateBeforeCall(String xAmzTarget, DeleteByteMatchSetRequest deleteByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteByteMatchSet(Async)");
        }

        // verify the required parameter 'deleteByteMatchSetRequest' is set
        if (deleteByteMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteByteMatchSetRequest' when calling deleteByteMatchSet(Async)");
        }

        return deleteByteMatchSetCall(xAmzTarget, deleteByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;ByteMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;ByteMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any &lt;a&gt;ByteMatchTuple&lt;/a&gt; objects (any filters).&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;ByteMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;ByteMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;ByteMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateByteMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteByteMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByteMatchSetResponse deleteByteMatchSet(String xAmzTarget, DeleteByteMatchSetRequest deleteByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteByteMatchSetResponse> localVarResp = deleteByteMatchSetWithHttpInfo(xAmzTarget, deleteByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;ByteMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;ByteMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any &lt;a&gt;ByteMatchTuple&lt;/a&gt; objects (any filters).&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;ByteMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;ByteMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;ByteMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateByteMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteByteMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteByteMatchSetResponse> deleteByteMatchSetWithHttpInfo(String xAmzTarget, DeleteByteMatchSetRequest deleteByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteByteMatchSetValidateBeforeCall(xAmzTarget, deleteByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteByteMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;ByteMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;ByteMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any &lt;a&gt;ByteMatchTuple&lt;/a&gt; objects (any filters).&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;ByteMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;ByteMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;ByteMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateByteMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteByteMatchSetAsync(String xAmzTarget, DeleteByteMatchSetRequest deleteByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteByteMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByteMatchSetValidateBeforeCall(xAmzTarget, deleteByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteByteMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGeoMatchSet
     * @param xAmzTarget  (required)
     * @param deleteGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGeoMatchSetCall(String xAmzTarget, DeleteGeoMatchSetRequest deleteGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteGeoMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteGeoMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGeoMatchSetValidateBeforeCall(String xAmzTarget, DeleteGeoMatchSetRequest deleteGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteGeoMatchSet(Async)");
        }

        // verify the required parameter 'deleteGeoMatchSetRequest' is set
        if (deleteGeoMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteGeoMatchSetRequest' when calling deleteGeoMatchSet(Async)");
        }

        return deleteGeoMatchSetCall(xAmzTarget, deleteGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;GeoMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;GeoMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any countries.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;GeoMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;GeoMatchSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;GeoMatchSet&lt;/code&gt; to remove any countries. For more information, see &lt;a&gt;UpdateGeoMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteGeoMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGeoMatchSetResponse deleteGeoMatchSet(String xAmzTarget, DeleteGeoMatchSetRequest deleteGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteGeoMatchSetResponse> localVarResp = deleteGeoMatchSetWithHttpInfo(xAmzTarget, deleteGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;GeoMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;GeoMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any countries.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;GeoMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;GeoMatchSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;GeoMatchSet&lt;/code&gt; to remove any countries. For more information, see &lt;a&gt;UpdateGeoMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteGeoMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGeoMatchSetResponse> deleteGeoMatchSetWithHttpInfo(String xAmzTarget, DeleteGeoMatchSetRequest deleteGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteGeoMatchSetValidateBeforeCall(xAmzTarget, deleteGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteGeoMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;GeoMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;GeoMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any countries.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;GeoMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;GeoMatchSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;GeoMatchSet&lt;/code&gt; to remove any countries. For more information, see &lt;a&gt;UpdateGeoMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteGeoMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGeoMatchSetAsync(String xAmzTarget, DeleteGeoMatchSetRequest deleteGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteGeoMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGeoMatchSetValidateBeforeCall(xAmzTarget, deleteGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteGeoMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIPSet
     * @param xAmzTarget  (required)
     * @param deleteIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIPSetCall(String xAmzTarget, DeleteIPSetRequest deleteIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteIPSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteIPSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIPSetValidateBeforeCall(String xAmzTarget, DeleteIPSetRequest deleteIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteIPSet(Async)");
        }

        // verify the required parameter 'deleteIPSetRequest' is set
        if (deleteIPSetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteIPSetRequest' when calling deleteIPSet(Async)");
        }

        return deleteIPSetCall(xAmzTarget, deleteIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes an &lt;a&gt;IPSet&lt;/a&gt;. You can&#39;t delete an &lt;code&gt;IPSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any IP addresses.&lt;/p&gt; &lt;p&gt;If you just want to remove an &lt;code&gt;IPSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete an &lt;code&gt;IPSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;IPSet&lt;/code&gt; to remove IP address ranges, if any. For more information, see &lt;a&gt;UpdateIPSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteIPSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteIPSetResponse deleteIPSet(String xAmzTarget, DeleteIPSetRequest deleteIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteIPSetResponse> localVarResp = deleteIPSetWithHttpInfo(xAmzTarget, deleteIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes an &lt;a&gt;IPSet&lt;/a&gt;. You can&#39;t delete an &lt;code&gt;IPSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any IP addresses.&lt;/p&gt; &lt;p&gt;If you just want to remove an &lt;code&gt;IPSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete an &lt;code&gt;IPSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;IPSet&lt;/code&gt; to remove IP address ranges, if any. For more information, see &lt;a&gt;UpdateIPSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteIPSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteIPSetResponse> deleteIPSetWithHttpInfo(String xAmzTarget, DeleteIPSetRequest deleteIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteIPSetValidateBeforeCall(xAmzTarget, deleteIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteIPSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes an &lt;a&gt;IPSet&lt;/a&gt;. You can&#39;t delete an &lt;code&gt;IPSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any IP addresses.&lt;/p&gt; &lt;p&gt;If you just want to remove an &lt;code&gt;IPSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete an &lt;code&gt;IPSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;IPSet&lt;/code&gt; to remove IP address ranges, if any. For more information, see &lt;a&gt;UpdateIPSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteIPSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIPSetAsync(String xAmzTarget, DeleteIPSetRequest deleteIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteIPSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIPSetValidateBeforeCall(xAmzTarget, deleteIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteIPSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoggingConfiguration
     * @param xAmzTarget  (required)
     * @param deleteLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoggingConfigurationCall(String xAmzTarget, DeleteLoggingConfigurationRequest deleteLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteLoggingConfigurationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteLoggingConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoggingConfigurationValidateBeforeCall(String xAmzTarget, DeleteLoggingConfigurationRequest deleteLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteLoggingConfiguration(Async)");
        }

        // verify the required parameter 'deleteLoggingConfigurationRequest' is set
        if (deleteLoggingConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteLoggingConfigurationRequest' when calling deleteLoggingConfiguration(Async)");
        }

        return deleteLoggingConfigurationCall(xAmzTarget, deleteLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes the &lt;a&gt;LoggingConfiguration&lt;/a&gt; from the specified web ACL.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteLoggingConfiguration(String xAmzTarget, DeleteLoggingConfigurationRequest deleteLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteLoggingConfigurationWithHttpInfo(xAmzTarget, deleteLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes the &lt;a&gt;LoggingConfiguration&lt;/a&gt; from the specified web ACL.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteLoggingConfigurationWithHttpInfo(String xAmzTarget, DeleteLoggingConfigurationRequest deleteLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteLoggingConfigurationValidateBeforeCall(xAmzTarget, deleteLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes the &lt;a&gt;LoggingConfiguration&lt;/a&gt; from the specified web ACL.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLoggingConfigurationAsync(String xAmzTarget, DeleteLoggingConfigurationRequest deleteLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoggingConfigurationValidateBeforeCall(xAmzTarget, deleteLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePermissionPolicy
     * @param xAmzTarget  (required)
     * @param deletePermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePermissionPolicyCall(String xAmzTarget, DeletePermissionPolicyRequest deletePermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePermissionPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeletePermissionPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePermissionPolicyValidateBeforeCall(String xAmzTarget, DeletePermissionPolicyRequest deletePermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deletePermissionPolicy(Async)");
        }

        // verify the required parameter 'deletePermissionPolicyRequest' is set
        if (deletePermissionPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'deletePermissionPolicyRequest' when calling deletePermissionPolicy(Async)");
        }

        return deletePermissionPolicyCall(xAmzTarget, deletePermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes an IAM policy from the specified RuleGroup.&lt;/p&gt; &lt;p&gt;The user making the request must be the owner of the RuleGroup.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deletePermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public Object deletePermissionPolicy(String xAmzTarget, DeletePermissionPolicyRequest deletePermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deletePermissionPolicyWithHttpInfo(xAmzTarget, deletePermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes an IAM policy from the specified RuleGroup.&lt;/p&gt; &lt;p&gt;The user making the request must be the owner of the RuleGroup.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deletePermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deletePermissionPolicyWithHttpInfo(String xAmzTarget, DeletePermissionPolicyRequest deletePermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deletePermissionPolicyValidateBeforeCall(xAmzTarget, deletePermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes an IAM policy from the specified RuleGroup.&lt;/p&gt; &lt;p&gt;The user making the request must be the owner of the RuleGroup.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deletePermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePermissionPolicyAsync(String xAmzTarget, DeletePermissionPolicyRequest deletePermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePermissionPolicyValidateBeforeCall(xAmzTarget, deletePermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRateBasedRule
     * @param xAmzTarget  (required)
     * @param deleteRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRateBasedRuleCall(String xAmzTarget, DeleteRateBasedRuleRequest deleteRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRateBasedRuleRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteRateBasedRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRateBasedRuleValidateBeforeCall(String xAmzTarget, DeleteRateBasedRuleRequest deleteRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteRateBasedRule(Async)");
        }

        // verify the required parameter 'deleteRateBasedRuleRequest' is set
        if (deleteRateBasedRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRateBasedRuleRequest' when calling deleteRateBasedRule(Async)");
        }

        return deleteRateBasedRuleCall(xAmzTarget, deleteRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RateBasedRule&lt;/a&gt;. You can&#39;t delete a rule if it&#39;s still used in any &lt;code&gt;WebACL&lt;/code&gt; objects or if it still includes any predicates, such as &lt;code&gt;ByteMatchSet&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove a rule from a &lt;code&gt;WebACL&lt;/code&gt;, use &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;RateBasedRule&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;RateBasedRule&lt;/code&gt; to remove predicates, if any. For more information, see &lt;a&gt;UpdateRateBasedRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRateBasedRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRateBasedRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteRateBasedRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRateBasedRuleResponse deleteRateBasedRule(String xAmzTarget, DeleteRateBasedRuleRequest deleteRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteRateBasedRuleResponse> localVarResp = deleteRateBasedRuleWithHttpInfo(xAmzTarget, deleteRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RateBasedRule&lt;/a&gt;. You can&#39;t delete a rule if it&#39;s still used in any &lt;code&gt;WebACL&lt;/code&gt; objects or if it still includes any predicates, such as &lt;code&gt;ByteMatchSet&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove a rule from a &lt;code&gt;WebACL&lt;/code&gt;, use &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;RateBasedRule&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;RateBasedRule&lt;/code&gt; to remove predicates, if any. For more information, see &lt;a&gt;UpdateRateBasedRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRateBasedRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRateBasedRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteRateBasedRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRateBasedRuleResponse> deleteRateBasedRuleWithHttpInfo(String xAmzTarget, DeleteRateBasedRuleRequest deleteRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRateBasedRuleValidateBeforeCall(xAmzTarget, deleteRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteRateBasedRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RateBasedRule&lt;/a&gt;. You can&#39;t delete a rule if it&#39;s still used in any &lt;code&gt;WebACL&lt;/code&gt; objects or if it still includes any predicates, such as &lt;code&gt;ByteMatchSet&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove a rule from a &lt;code&gt;WebACL&lt;/code&gt;, use &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;RateBasedRule&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;RateBasedRule&lt;/code&gt; to remove predicates, if any. For more information, see &lt;a&gt;UpdateRateBasedRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRateBasedRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRateBasedRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRateBasedRuleAsync(String xAmzTarget, DeleteRateBasedRuleRequest deleteRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteRateBasedRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRateBasedRuleValidateBeforeCall(xAmzTarget, deleteRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteRateBasedRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRegexMatchSet
     * @param xAmzTarget  (required)
     * @param deleteRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegexMatchSetCall(String xAmzTarget, DeleteRegexMatchSetRequest deleteRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRegexMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteRegexMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegexMatchSetValidateBeforeCall(String xAmzTarget, DeleteRegexMatchSetRequest deleteRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteRegexMatchSet(Async)");
        }

        // verify the required parameter 'deleteRegexMatchSetRequest' is set
        if (deleteRegexMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRegexMatchSetRequest' when calling deleteRegexMatchSet(Async)");
        }

        return deleteRegexMatchSetCall(xAmzTarget, deleteRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RegexMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;RegexMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any &lt;code&gt;RegexMatchTuples&lt;/code&gt; objects (any filters).&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;RegexMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;RegexMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;RegexMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateRegexMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteRegexMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRegexMatchSetResponse deleteRegexMatchSet(String xAmzTarget, DeleteRegexMatchSetRequest deleteRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteRegexMatchSetResponse> localVarResp = deleteRegexMatchSetWithHttpInfo(xAmzTarget, deleteRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RegexMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;RegexMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any &lt;code&gt;RegexMatchTuples&lt;/code&gt; objects (any filters).&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;RegexMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;RegexMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;RegexMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateRegexMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteRegexMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRegexMatchSetResponse> deleteRegexMatchSetWithHttpInfo(String xAmzTarget, DeleteRegexMatchSetRequest deleteRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRegexMatchSetValidateBeforeCall(xAmzTarget, deleteRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteRegexMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RegexMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;RegexMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any &lt;code&gt;RegexMatchTuples&lt;/code&gt; objects (any filters).&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;RegexMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;RegexMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;RegexMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateRegexMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegexMatchSetAsync(String xAmzTarget, DeleteRegexMatchSetRequest deleteRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteRegexMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegexMatchSetValidateBeforeCall(xAmzTarget, deleteRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteRegexMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRegexPatternSet
     * @param xAmzTarget  (required)
     * @param deleteRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegexPatternSetCall(String xAmzTarget, DeleteRegexPatternSetRequest deleteRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRegexPatternSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteRegexPatternSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegexPatternSetValidateBeforeCall(String xAmzTarget, DeleteRegexPatternSetRequest deleteRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteRegexPatternSet(Async)");
        }

        // verify the required parameter 'deleteRegexPatternSetRequest' is set
        if (deleteRegexPatternSetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRegexPatternSetRequest' when calling deleteRegexPatternSet(Async)");
        }

        return deleteRegexPatternSetCall(xAmzTarget, deleteRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RegexPatternSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;RegexPatternSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;RegexMatchSet&lt;/code&gt; or if the &lt;code&gt;RegexPatternSet&lt;/code&gt; is not empty. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteRegexPatternSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRegexPatternSetResponse deleteRegexPatternSet(String xAmzTarget, DeleteRegexPatternSetRequest deleteRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteRegexPatternSetResponse> localVarResp = deleteRegexPatternSetWithHttpInfo(xAmzTarget, deleteRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RegexPatternSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;RegexPatternSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;RegexMatchSet&lt;/code&gt; or if the &lt;code&gt;RegexPatternSet&lt;/code&gt; is not empty. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteRegexPatternSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRegexPatternSetResponse> deleteRegexPatternSetWithHttpInfo(String xAmzTarget, DeleteRegexPatternSetRequest deleteRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRegexPatternSetValidateBeforeCall(xAmzTarget, deleteRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteRegexPatternSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RegexPatternSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;RegexPatternSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;RegexMatchSet&lt;/code&gt; or if the &lt;code&gt;RegexPatternSet&lt;/code&gt; is not empty. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegexPatternSetAsync(String xAmzTarget, DeleteRegexPatternSetRequest deleteRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteRegexPatternSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegexPatternSetValidateBeforeCall(xAmzTarget, deleteRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteRegexPatternSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRule
     * @param xAmzTarget  (required)
     * @param deleteRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleCall(String xAmzTarget, DeleteRuleRequest deleteRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRuleRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRuleValidateBeforeCall(String xAmzTarget, DeleteRuleRequest deleteRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteRule(Async)");
        }

        // verify the required parameter 'deleteRuleRequest' is set
        if (deleteRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRuleRequest' when calling deleteRule(Async)");
        }

        return deleteRuleCall(xAmzTarget, deleteRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;Rule&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;Rule&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;WebACL&lt;/code&gt; objects or if it still includes any predicates, such as &lt;code&gt;ByteMatchSet&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;Rule&lt;/code&gt; from a &lt;code&gt;WebACL&lt;/code&gt;, use &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;Rule&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;Rule&lt;/code&gt; to remove predicates, if any. For more information, see &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRuleResponse deleteRule(String xAmzTarget, DeleteRuleRequest deleteRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteRuleResponse> localVarResp = deleteRuleWithHttpInfo(xAmzTarget, deleteRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;Rule&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;Rule&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;WebACL&lt;/code&gt; objects or if it still includes any predicates, such as &lt;code&gt;ByteMatchSet&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;Rule&lt;/code&gt; from a &lt;code&gt;WebACL&lt;/code&gt;, use &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;Rule&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;Rule&lt;/code&gt; to remove predicates, if any. For more information, see &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRuleResponse> deleteRuleWithHttpInfo(String xAmzTarget, DeleteRuleRequest deleteRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(xAmzTarget, deleteRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;Rule&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;Rule&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;WebACL&lt;/code&gt; objects or if it still includes any predicates, such as &lt;code&gt;ByteMatchSet&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;Rule&lt;/code&gt; from a &lt;code&gt;WebACL&lt;/code&gt;, use &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;Rule&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;Rule&lt;/code&gt; to remove predicates, if any. For more information, see &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRule&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleAsync(String xAmzTarget, DeleteRuleRequest deleteRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(xAmzTarget, deleteRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRuleGroup
     * @param xAmzTarget  (required)
     * @param deleteRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleGroupCall(String xAmzTarget, DeleteRuleGroupRequest deleteRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRuleGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteRuleGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRuleGroupValidateBeforeCall(String xAmzTarget, DeleteRuleGroupRequest deleteRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteRuleGroup(Async)");
        }

        // verify the required parameter 'deleteRuleGroupRequest' is set
        if (deleteRuleGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRuleGroupRequest' when calling deleteRuleGroup(Async)");
        }

        return deleteRuleGroupCall(xAmzTarget, deleteRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RuleGroup&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;RuleGroup&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;WebACL&lt;/code&gt; objects or if it still includes any rules.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;RuleGroup&lt;/code&gt; from a &lt;code&gt;WebACL&lt;/code&gt;, use &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;RuleGroup&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;RuleGroup&lt;/code&gt; to remove rules, if any. For more information, see &lt;a&gt;UpdateRuleGroup&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRuleGroup&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRuleGroup&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteRuleGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRuleGroupResponse deleteRuleGroup(String xAmzTarget, DeleteRuleGroupRequest deleteRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteRuleGroupResponse> localVarResp = deleteRuleGroupWithHttpInfo(xAmzTarget, deleteRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RuleGroup&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;RuleGroup&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;WebACL&lt;/code&gt; objects or if it still includes any rules.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;RuleGroup&lt;/code&gt; from a &lt;code&gt;WebACL&lt;/code&gt;, use &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;RuleGroup&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;RuleGroup&lt;/code&gt; to remove rules, if any. For more information, see &lt;a&gt;UpdateRuleGroup&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRuleGroup&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRuleGroup&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteRuleGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRuleGroupResponse> deleteRuleGroupWithHttpInfo(String xAmzTarget, DeleteRuleGroupRequest deleteRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRuleGroupValidateBeforeCall(xAmzTarget, deleteRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteRuleGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;RuleGroup&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;RuleGroup&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;WebACL&lt;/code&gt; objects or if it still includes any rules.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;RuleGroup&lt;/code&gt; from a &lt;code&gt;WebACL&lt;/code&gt;, use &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;RuleGroup&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;RuleGroup&lt;/code&gt; to remove rules, if any. For more information, see &lt;a&gt;UpdateRuleGroup&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteRuleGroup&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteRuleGroup&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleGroupAsync(String xAmzTarget, DeleteRuleGroupRequest deleteRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteRuleGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRuleGroupValidateBeforeCall(xAmzTarget, deleteRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteRuleGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSizeConstraintSet
     * @param xAmzTarget  (required)
     * @param deleteSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSizeConstraintSetCall(String xAmzTarget, DeleteSizeConstraintSetRequest deleteSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSizeConstraintSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteSizeConstraintSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSizeConstraintSetValidateBeforeCall(String xAmzTarget, DeleteSizeConstraintSetRequest deleteSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteSizeConstraintSet(Async)");
        }

        // verify the required parameter 'deleteSizeConstraintSetRequest' is set
        if (deleteSizeConstraintSetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteSizeConstraintSetRequest' when calling deleteSizeConstraintSet(Async)");
        }

        return deleteSizeConstraintSetCall(xAmzTarget, deleteSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;SizeConstraintSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;SizeConstraintSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any &lt;a&gt;SizeConstraint&lt;/a&gt; objects (any filters).&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;SizeConstraintSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;SizeConstraintSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;SizeConstraintSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateSizeConstraintSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteSizeConstraintSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSizeConstraintSetResponse deleteSizeConstraintSet(String xAmzTarget, DeleteSizeConstraintSetRequest deleteSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteSizeConstraintSetResponse> localVarResp = deleteSizeConstraintSetWithHttpInfo(xAmzTarget, deleteSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;SizeConstraintSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;SizeConstraintSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any &lt;a&gt;SizeConstraint&lt;/a&gt; objects (any filters).&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;SizeConstraintSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;SizeConstraintSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;SizeConstraintSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateSizeConstraintSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteSizeConstraintSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteSizeConstraintSetResponse> deleteSizeConstraintSetWithHttpInfo(String xAmzTarget, DeleteSizeConstraintSetRequest deleteSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSizeConstraintSetValidateBeforeCall(xAmzTarget, deleteSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteSizeConstraintSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;SizeConstraintSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;SizeConstraintSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still includes any &lt;a&gt;SizeConstraint&lt;/a&gt; objects (any filters).&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;SizeConstraintSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;SizeConstraintSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;SizeConstraintSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateSizeConstraintSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSizeConstraintSetAsync(String xAmzTarget, DeleteSizeConstraintSetRequest deleteSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteSizeConstraintSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSizeConstraintSetValidateBeforeCall(xAmzTarget, deleteSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteSizeConstraintSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSqlInjectionMatchSet
     * @param xAmzTarget  (required)
     * @param deleteSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSqlInjectionMatchSetCall(String xAmzTarget, DeleteSqlInjectionMatchSetRequest deleteSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSqlInjectionMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteSqlInjectionMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSqlInjectionMatchSetValidateBeforeCall(String xAmzTarget, DeleteSqlInjectionMatchSetRequest deleteSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteSqlInjectionMatchSet(Async)");
        }

        // verify the required parameter 'deleteSqlInjectionMatchSetRequest' is set
        if (deleteSqlInjectionMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteSqlInjectionMatchSetRequest' when calling deleteSqlInjectionMatchSet(Async)");
        }

        return deleteSqlInjectionMatchSetCall(xAmzTarget, deleteSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still contains any &lt;a&gt;SqlInjectionMatchTuple&lt;/a&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteSqlInjectionMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSqlInjectionMatchSetResponse deleteSqlInjectionMatchSet(String xAmzTarget, DeleteSqlInjectionMatchSetRequest deleteSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteSqlInjectionMatchSetResponse> localVarResp = deleteSqlInjectionMatchSetWithHttpInfo(xAmzTarget, deleteSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still contains any &lt;a&gt;SqlInjectionMatchTuple&lt;/a&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteSqlInjectionMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteSqlInjectionMatchSetResponse> deleteSqlInjectionMatchSetWithHttpInfo(String xAmzTarget, DeleteSqlInjectionMatchSetRequest deleteSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSqlInjectionMatchSetValidateBeforeCall(xAmzTarget, deleteSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteSqlInjectionMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still contains any &lt;a&gt;SqlInjectionMatchTuple&lt;/a&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteSqlInjectionMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSqlInjectionMatchSetAsync(String xAmzTarget, DeleteSqlInjectionMatchSetRequest deleteSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteSqlInjectionMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSqlInjectionMatchSetValidateBeforeCall(xAmzTarget, deleteSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteSqlInjectionMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWebACL
     * @param xAmzTarget  (required)
     * @param deleteWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebACLCall(String xAmzTarget, DeleteWebACLRequest deleteWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteWebACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteWebACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebACLValidateBeforeCall(String xAmzTarget, DeleteWebACLRequest deleteWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteWebACL(Async)");
        }

        // verify the required parameter 'deleteWebACLRequest' is set
        if (deleteWebACLRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteWebACLRequest' when calling deleteWebACL(Async)");
        }

        return deleteWebACLCall(xAmzTarget, deleteWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;WebACL&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;WebACL&lt;/code&gt; if it still contains any &lt;code&gt;Rules&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To delete a &lt;code&gt;WebACL&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;WebACL&lt;/code&gt; to remove &lt;code&gt;Rules&lt;/code&gt;, if any. For more information, see &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteWebACLResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteWebACLResponse deleteWebACL(String xAmzTarget, DeleteWebACLRequest deleteWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteWebACLResponse> localVarResp = deleteWebACLWithHttpInfo(xAmzTarget, deleteWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;WebACL&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;WebACL&lt;/code&gt; if it still contains any &lt;code&gt;Rules&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To delete a &lt;code&gt;WebACL&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;WebACL&lt;/code&gt; to remove &lt;code&gt;Rules&lt;/code&gt;, if any. For more information, see &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteWebACLResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteWebACLResponse> deleteWebACLWithHttpInfo(String xAmzTarget, DeleteWebACLRequest deleteWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteWebACLValidateBeforeCall(xAmzTarget, deleteWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteWebACLResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes a &lt;a&gt;WebACL&lt;/a&gt;. You can&#39;t delete a &lt;code&gt;WebACL&lt;/code&gt; if it still contains any &lt;code&gt;Rules&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To delete a &lt;code&gt;WebACL&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;WebACL&lt;/code&gt; to remove &lt;code&gt;Rules&lt;/code&gt;, if any. For more information, see &lt;a&gt;UpdateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteWebACL&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebACLAsync(String xAmzTarget, DeleteWebACLRequest deleteWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteWebACLResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebACLValidateBeforeCall(xAmzTarget, deleteWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteWebACLResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteXssMatchSet
     * @param xAmzTarget  (required)
     * @param deleteXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteXssMatchSetCall(String xAmzTarget, DeleteXssMatchSetRequest deleteXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteXssMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DeleteXssMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteXssMatchSetValidateBeforeCall(String xAmzTarget, DeleteXssMatchSetRequest deleteXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteXssMatchSet(Async)");
        }

        // verify the required parameter 'deleteXssMatchSetRequest' is set
        if (deleteXssMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteXssMatchSetRequest' when calling deleteXssMatchSet(Async)");
        }

        return deleteXssMatchSetCall(xAmzTarget, deleteXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes an &lt;a&gt;XssMatchSet&lt;/a&gt;. You can&#39;t delete an &lt;code&gt;XssMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still contains any &lt;a&gt;XssMatchTuple&lt;/a&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove an &lt;code&gt;XssMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete an &lt;code&gt;XssMatchSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;XssMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateXssMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteXssMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteXssMatchSetResponse deleteXssMatchSet(String xAmzTarget, DeleteXssMatchSetRequest deleteXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteXssMatchSetResponse> localVarResp = deleteXssMatchSetWithHttpInfo(xAmzTarget, deleteXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes an &lt;a&gt;XssMatchSet&lt;/a&gt;. You can&#39;t delete an &lt;code&gt;XssMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still contains any &lt;a&gt;XssMatchTuple&lt;/a&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove an &lt;code&gt;XssMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete an &lt;code&gt;XssMatchSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;XssMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateXssMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteXssMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteXssMatchSetResponse> deleteXssMatchSetWithHttpInfo(String xAmzTarget, DeleteXssMatchSetRequest deleteXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteXssMatchSetValidateBeforeCall(xAmzTarget, deleteXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteXssMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Permanently deletes an &lt;a&gt;XssMatchSet&lt;/a&gt;. You can&#39;t delete an &lt;code&gt;XssMatchSet&lt;/code&gt; if it&#39;s still used in any &lt;code&gt;Rules&lt;/code&gt; or if it still contains any &lt;a&gt;XssMatchTuple&lt;/a&gt; objects.&lt;/p&gt; &lt;p&gt;If you just want to remove an &lt;code&gt;XssMatchSet&lt;/code&gt; from a &lt;code&gt;Rule&lt;/code&gt;, use &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To permanently delete an &lt;code&gt;XssMatchSet&lt;/code&gt; from AWS WAF, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;XssMatchSet&lt;/code&gt; to remove filters, if any. For more information, see &lt;a&gt;UpdateXssMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of a &lt;code&gt;DeleteXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DeleteXssMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonEmptyEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteXssMatchSetAsync(String xAmzTarget, DeleteXssMatchSetRequest deleteXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteXssMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteXssMatchSetValidateBeforeCall(xAmzTarget, deleteXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteXssMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateWebACL
     * @param xAmzTarget  (required)
     * @param disassociateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateWebACLCall(String xAmzTarget, DisassociateWebACLRequest disassociateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateWebACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.DisassociateWebACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateWebACLValidateBeforeCall(String xAmzTarget, DisassociateWebACLRequest disassociateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disassociateWebACL(Async)");
        }

        // verify the required parameter 'disassociateWebACLRequest' is set
        if (disassociateWebACLRequest == null) {
            throw new ApiException("Missing the required parameter 'disassociateWebACLRequest' when calling disassociateWebACL(Async)");
        }

        return disassociateWebACLCall(xAmzTarget, disassociateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Removes a web ACL from the specified resource, either an application load balancer or Amazon API Gateway stage.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disassociateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public Object disassociateWebACL(String xAmzTarget, DisassociateWebACLRequest disassociateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = disassociateWebACLWithHttpInfo(xAmzTarget, disassociateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Removes a web ACL from the specified resource, either an application load balancer or Amazon API Gateway stage.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disassociateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disassociateWebACLWithHttpInfo(String xAmzTarget, DisassociateWebACLRequest disassociateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateWebACLValidateBeforeCall(xAmzTarget, disassociateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Removes a web ACL from the specified resource, either an application load balancer or Amazon API Gateway stage.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param disassociateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateWebACLAsync(String xAmzTarget, DisassociateWebACLRequest disassociateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateWebACLValidateBeforeCall(xAmzTarget, disassociateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByteMatchSet
     * @param xAmzTarget  (required)
     * @param getByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByteMatchSetCall(String xAmzTarget, GetByteMatchSetRequest getByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getByteMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetByteMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByteMatchSetValidateBeforeCall(String xAmzTarget, GetByteMatchSetRequest getByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getByteMatchSet(Async)");
        }

        // verify the required parameter 'getByteMatchSetRequest' is set
        if (getByteMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'getByteMatchSetRequest' when calling getByteMatchSet(Async)");
        }

        return getByteMatchSetCall(xAmzTarget, getByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;ByteMatchSet&lt;/a&gt; specified by &lt;code&gt;ByteMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetByteMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetByteMatchSetResponse getByteMatchSet(String xAmzTarget, GetByteMatchSetRequest getByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetByteMatchSetResponse> localVarResp = getByteMatchSetWithHttpInfo(xAmzTarget, getByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;ByteMatchSet&lt;/a&gt; specified by &lt;code&gt;ByteMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetByteMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetByteMatchSetResponse> getByteMatchSetWithHttpInfo(String xAmzTarget, GetByteMatchSetRequest getByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getByteMatchSetValidateBeforeCall(xAmzTarget, getByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetByteMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;ByteMatchSet&lt;/a&gt; specified by &lt;code&gt;ByteMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByteMatchSetAsync(String xAmzTarget, GetByteMatchSetRequest getByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetByteMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByteMatchSetValidateBeforeCall(xAmzTarget, getByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetByteMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChangeToken
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangeTokenCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetChangeToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChangeTokenValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getChangeToken(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getChangeToken(Async)");
        }

        return getChangeTokenCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you want to create, update, or delete AWS WAF objects, get a change token and include the change token in the create, update, or delete request. Change tokens ensure that your application doesn&#39;t submit conflicting requests to AWS WAF.&lt;/p&gt; &lt;p&gt;Each create, update, or delete request must use a unique change token. If your application submits a &lt;code&gt;GetChangeToken&lt;/code&gt; request and then submits a second &lt;code&gt;GetChangeToken&lt;/code&gt; request before submitting a create, update, or delete request, the second &lt;code&gt;GetChangeToken&lt;/code&gt; request returns the same value as the first &lt;code&gt;GetChangeToken&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;When you use a change token in a create, update, or delete request, the status of the change token changes to &lt;code&gt;PENDING&lt;/code&gt;, which indicates that AWS WAF is propagating the change to all AWS WAF servers. Use &lt;code&gt;GetChangeTokenStatus&lt;/code&gt; to determine the status of your change token.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetChangeTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetChangeTokenResponse getChangeToken(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetChangeTokenResponse> localVarResp = getChangeTokenWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you want to create, update, or delete AWS WAF objects, get a change token and include the change token in the create, update, or delete request. Change tokens ensure that your application doesn&#39;t submit conflicting requests to AWS WAF.&lt;/p&gt; &lt;p&gt;Each create, update, or delete request must use a unique change token. If your application submits a &lt;code&gt;GetChangeToken&lt;/code&gt; request and then submits a second &lt;code&gt;GetChangeToken&lt;/code&gt; request before submitting a create, update, or delete request, the second &lt;code&gt;GetChangeToken&lt;/code&gt; request returns the same value as the first &lt;code&gt;GetChangeToken&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;When you use a change token in a create, update, or delete request, the status of the change token changes to &lt;code&gt;PENDING&lt;/code&gt;, which indicates that AWS WAF is propagating the change to all AWS WAF servers. Use &lt;code&gt;GetChangeTokenStatus&lt;/code&gt; to determine the status of your change token.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetChangeTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChangeTokenResponse> getChangeTokenWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getChangeTokenValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetChangeTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;When you want to create, update, or delete AWS WAF objects, get a change token and include the change token in the create, update, or delete request. Change tokens ensure that your application doesn&#39;t submit conflicting requests to AWS WAF.&lt;/p&gt; &lt;p&gt;Each create, update, or delete request must use a unique change token. If your application submits a &lt;code&gt;GetChangeToken&lt;/code&gt; request and then submits a second &lt;code&gt;GetChangeToken&lt;/code&gt; request before submitting a create, update, or delete request, the second &lt;code&gt;GetChangeToken&lt;/code&gt; request returns the same value as the first &lt;code&gt;GetChangeToken&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;When you use a change token in a create, update, or delete request, the status of the change token changes to &lt;code&gt;PENDING&lt;/code&gt;, which indicates that AWS WAF is propagating the change to all AWS WAF servers. Use &lt;code&gt;GetChangeTokenStatus&lt;/code&gt; to determine the status of your change token.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangeTokenAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetChangeTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChangeTokenValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetChangeTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChangeTokenStatus
     * @param xAmzTarget  (required)
     * @param getChangeTokenStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangeTokenStatusCall(String xAmzTarget, GetChangeTokenStatusRequest getChangeTokenStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getChangeTokenStatusRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetChangeTokenStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChangeTokenStatusValidateBeforeCall(String xAmzTarget, GetChangeTokenStatusRequest getChangeTokenStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getChangeTokenStatus(Async)");
        }

        // verify the required parameter 'getChangeTokenStatusRequest' is set
        if (getChangeTokenStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'getChangeTokenStatusRequest' when calling getChangeTokenStatus(Async)");
        }

        return getChangeTokenStatusCall(xAmzTarget, getChangeTokenStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the status of a &lt;code&gt;ChangeToken&lt;/code&gt; that you got by calling &lt;a&gt;GetChangeToken&lt;/a&gt;. &lt;code&gt;ChangeTokenStatus&lt;/code&gt; is one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PROVISIONED&lt;/code&gt;: You requested the change token by calling &lt;code&gt;GetChangeToken&lt;/code&gt;, but you haven&#39;t used it yet in a call to create, update, or delete an AWS WAF object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING&lt;/code&gt;: AWS WAF is propagating the create, update, or delete request to all AWS WAF servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSYNC&lt;/code&gt;: Propagation is complete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param getChangeTokenStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetChangeTokenStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetChangeTokenStatusResponse getChangeTokenStatus(String xAmzTarget, GetChangeTokenStatusRequest getChangeTokenStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetChangeTokenStatusResponse> localVarResp = getChangeTokenStatusWithHttpInfo(xAmzTarget, getChangeTokenStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the status of a &lt;code&gt;ChangeToken&lt;/code&gt; that you got by calling &lt;a&gt;GetChangeToken&lt;/a&gt;. &lt;code&gt;ChangeTokenStatus&lt;/code&gt; is one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PROVISIONED&lt;/code&gt;: You requested the change token by calling &lt;code&gt;GetChangeToken&lt;/code&gt;, but you haven&#39;t used it yet in a call to create, update, or delete an AWS WAF object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING&lt;/code&gt;: AWS WAF is propagating the create, update, or delete request to all AWS WAF servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSYNC&lt;/code&gt;: Propagation is complete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param getChangeTokenStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetChangeTokenStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChangeTokenStatusResponse> getChangeTokenStatusWithHttpInfo(String xAmzTarget, GetChangeTokenStatusRequest getChangeTokenStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getChangeTokenStatusValidateBeforeCall(xAmzTarget, getChangeTokenStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetChangeTokenStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the status of a &lt;code&gt;ChangeToken&lt;/code&gt; that you got by calling &lt;a&gt;GetChangeToken&lt;/a&gt;. &lt;code&gt;ChangeTokenStatus&lt;/code&gt; is one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PROVISIONED&lt;/code&gt;: You requested the change token by calling &lt;code&gt;GetChangeToken&lt;/code&gt;, but you haven&#39;t used it yet in a call to create, update, or delete an AWS WAF object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING&lt;/code&gt;: AWS WAF is propagating the create, update, or delete request to all AWS WAF servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INSYNC&lt;/code&gt;: Propagation is complete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param getChangeTokenStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangeTokenStatusAsync(String xAmzTarget, GetChangeTokenStatusRequest getChangeTokenStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetChangeTokenStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChangeTokenStatusValidateBeforeCall(xAmzTarget, getChangeTokenStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetChangeTokenStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeoMatchSet
     * @param xAmzTarget  (required)
     * @param getGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeoMatchSetCall(String xAmzTarget, GetGeoMatchSetRequest getGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGeoMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetGeoMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeoMatchSetValidateBeforeCall(String xAmzTarget, GetGeoMatchSetRequest getGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getGeoMatchSet(Async)");
        }

        // verify the required parameter 'getGeoMatchSetRequest' is set
        if (getGeoMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'getGeoMatchSetRequest' when calling getGeoMatchSet(Async)");
        }

        return getGeoMatchSetCall(xAmzTarget, getGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;GeoMatchSet&lt;/a&gt; that is specified by &lt;code&gt;GeoMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetGeoMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetGeoMatchSetResponse getGeoMatchSet(String xAmzTarget, GetGeoMatchSetRequest getGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetGeoMatchSetResponse> localVarResp = getGeoMatchSetWithHttpInfo(xAmzTarget, getGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;GeoMatchSet&lt;/a&gt; that is specified by &lt;code&gt;GeoMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetGeoMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGeoMatchSetResponse> getGeoMatchSetWithHttpInfo(String xAmzTarget, GetGeoMatchSetRequest getGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getGeoMatchSetValidateBeforeCall(xAmzTarget, getGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetGeoMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;GeoMatchSet&lt;/a&gt; that is specified by &lt;code&gt;GeoMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeoMatchSetAsync(String xAmzTarget, GetGeoMatchSetRequest getGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetGeoMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeoMatchSetValidateBeforeCall(xAmzTarget, getGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetGeoMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIPSet
     * @param xAmzTarget  (required)
     * @param getIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIPSetCall(String xAmzTarget, GetIPSetRequest getIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getIPSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetIPSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIPSetValidateBeforeCall(String xAmzTarget, GetIPSetRequest getIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getIPSet(Async)");
        }

        // verify the required parameter 'getIPSetRequest' is set
        if (getIPSetRequest == null) {
            throw new ApiException("Missing the required parameter 'getIPSetRequest' when calling getIPSet(Async)");
        }

        return getIPSetCall(xAmzTarget, getIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;IPSet&lt;/a&gt; that is specified by &lt;code&gt;IPSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetIPSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetIPSetResponse getIPSet(String xAmzTarget, GetIPSetRequest getIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetIPSetResponse> localVarResp = getIPSetWithHttpInfo(xAmzTarget, getIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;IPSet&lt;/a&gt; that is specified by &lt;code&gt;IPSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetIPSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetIPSetResponse> getIPSetWithHttpInfo(String xAmzTarget, GetIPSetRequest getIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getIPSetValidateBeforeCall(xAmzTarget, getIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetIPSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;IPSet&lt;/a&gt; that is specified by &lt;code&gt;IPSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIPSetAsync(String xAmzTarget, GetIPSetRequest getIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetIPSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIPSetValidateBeforeCall(xAmzTarget, getIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetIPSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoggingConfiguration
     * @param xAmzTarget  (required)
     * @param getLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoggingConfigurationCall(String xAmzTarget, GetLoggingConfigurationRequest getLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLoggingConfigurationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetLoggingConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoggingConfigurationValidateBeforeCall(String xAmzTarget, GetLoggingConfigurationRequest getLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getLoggingConfiguration(Async)");
        }

        // verify the required parameter 'getLoggingConfigurationRequest' is set
        if (getLoggingConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'getLoggingConfigurationRequest' when calling getLoggingConfiguration(Async)");
        }

        return getLoggingConfigurationCall(xAmzTarget, getLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;LoggingConfiguration&lt;/a&gt; for the specified web ACL.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetLoggingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetLoggingConfigurationResponse getLoggingConfiguration(String xAmzTarget, GetLoggingConfigurationRequest getLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetLoggingConfigurationResponse> localVarResp = getLoggingConfigurationWithHttpInfo(xAmzTarget, getLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;LoggingConfiguration&lt;/a&gt; for the specified web ACL.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetLoggingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLoggingConfigurationResponse> getLoggingConfigurationWithHttpInfo(String xAmzTarget, GetLoggingConfigurationRequest getLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getLoggingConfigurationValidateBeforeCall(xAmzTarget, getLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetLoggingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;LoggingConfiguration&lt;/a&gt; for the specified web ACL.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoggingConfigurationAsync(String xAmzTarget, GetLoggingConfigurationRequest getLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetLoggingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoggingConfigurationValidateBeforeCall(xAmzTarget, getLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetLoggingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPermissionPolicy
     * @param xAmzTarget  (required)
     * @param getPermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionPolicyCall(String xAmzTarget, GetPermissionPolicyRequest getPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPermissionPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetPermissionPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionPolicyValidateBeforeCall(String xAmzTarget, GetPermissionPolicyRequest getPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getPermissionPolicy(Async)");
        }

        // verify the required parameter 'getPermissionPolicyRequest' is set
        if (getPermissionPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'getPermissionPolicyRequest' when calling getPermissionPolicy(Async)");
        }

        return getPermissionPolicyCall(xAmzTarget, getPermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the IAM policy attached to the RuleGroup.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getPermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPermissionPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetPermissionPolicyResponse getPermissionPolicy(String xAmzTarget, GetPermissionPolicyRequest getPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPermissionPolicyResponse> localVarResp = getPermissionPolicyWithHttpInfo(xAmzTarget, getPermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the IAM policy attached to the RuleGroup.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getPermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPermissionPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPermissionPolicyResponse> getPermissionPolicyWithHttpInfo(String xAmzTarget, GetPermissionPolicyRequest getPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPermissionPolicyValidateBeforeCall(xAmzTarget, getPermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPermissionPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the IAM policy attached to the RuleGroup.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getPermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionPolicyAsync(String xAmzTarget, GetPermissionPolicyRequest getPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPermissionPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionPolicyValidateBeforeCall(xAmzTarget, getPermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPermissionPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRateBasedRule
     * @param xAmzTarget  (required)
     * @param getRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRateBasedRuleCall(String xAmzTarget, GetRateBasedRuleRequest getRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRateBasedRuleRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetRateBasedRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRateBasedRuleValidateBeforeCall(String xAmzTarget, GetRateBasedRuleRequest getRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRateBasedRule(Async)");
        }

        // verify the required parameter 'getRateBasedRuleRequest' is set
        if (getRateBasedRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'getRateBasedRuleRequest' when calling getRateBasedRule(Async)");
        }

        return getRateBasedRuleCall(xAmzTarget, getRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RateBasedRule&lt;/a&gt; that is specified by the &lt;code&gt;RuleId&lt;/code&gt; that you included in the &lt;code&gt;GetRateBasedRule&lt;/code&gt; request.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRateBasedRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetRateBasedRuleResponse getRateBasedRule(String xAmzTarget, GetRateBasedRuleRequest getRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRateBasedRuleResponse> localVarResp = getRateBasedRuleWithHttpInfo(xAmzTarget, getRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RateBasedRule&lt;/a&gt; that is specified by the &lt;code&gt;RuleId&lt;/code&gt; that you included in the &lt;code&gt;GetRateBasedRule&lt;/code&gt; request.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRateBasedRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRateBasedRuleResponse> getRateBasedRuleWithHttpInfo(String xAmzTarget, GetRateBasedRuleRequest getRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRateBasedRuleValidateBeforeCall(xAmzTarget, getRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRateBasedRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RateBasedRule&lt;/a&gt; that is specified by the &lt;code&gt;RuleId&lt;/code&gt; that you included in the &lt;code&gt;GetRateBasedRule&lt;/code&gt; request.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRateBasedRuleAsync(String xAmzTarget, GetRateBasedRuleRequest getRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRateBasedRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRateBasedRuleValidateBeforeCall(xAmzTarget, getRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRateBasedRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRateBasedRuleManagedKeys
     * @param xAmzTarget  (required)
     * @param getRateBasedRuleManagedKeysRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRateBasedRuleManagedKeysCall(String xAmzTarget, GetRateBasedRuleManagedKeysRequest getRateBasedRuleManagedKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRateBasedRuleManagedKeysRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetRateBasedRuleManagedKeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRateBasedRuleManagedKeysValidateBeforeCall(String xAmzTarget, GetRateBasedRuleManagedKeysRequest getRateBasedRuleManagedKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRateBasedRuleManagedKeys(Async)");
        }

        // verify the required parameter 'getRateBasedRuleManagedKeysRequest' is set
        if (getRateBasedRuleManagedKeysRequest == null) {
            throw new ApiException("Missing the required parameter 'getRateBasedRuleManagedKeysRequest' when calling getRateBasedRuleManagedKeys(Async)");
        }

        return getRateBasedRuleManagedKeysCall(xAmzTarget, getRateBasedRuleManagedKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of IP addresses currently being blocked by the &lt;a&gt;RateBasedRule&lt;/a&gt; that is specified by the &lt;code&gt;RuleId&lt;/code&gt;. The maximum number of managed keys that will be blocked is 10,000. If more than 10,000 addresses exceed the rate limit, the 10,000 addresses with the highest rates will be blocked.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRateBasedRuleManagedKeysRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRateBasedRuleManagedKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public GetRateBasedRuleManagedKeysResponse getRateBasedRuleManagedKeys(String xAmzTarget, GetRateBasedRuleManagedKeysRequest getRateBasedRuleManagedKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRateBasedRuleManagedKeysResponse> localVarResp = getRateBasedRuleManagedKeysWithHttpInfo(xAmzTarget, getRateBasedRuleManagedKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of IP addresses currently being blocked by the &lt;a&gt;RateBasedRule&lt;/a&gt; that is specified by the &lt;code&gt;RuleId&lt;/code&gt;. The maximum number of managed keys that will be blocked is 10,000. If more than 10,000 addresses exceed the rate limit, the 10,000 addresses with the highest rates will be blocked.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRateBasedRuleManagedKeysRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRateBasedRuleManagedKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRateBasedRuleManagedKeysResponse> getRateBasedRuleManagedKeysWithHttpInfo(String xAmzTarget, GetRateBasedRuleManagedKeysRequest getRateBasedRuleManagedKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRateBasedRuleManagedKeysValidateBeforeCall(xAmzTarget, getRateBasedRuleManagedKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRateBasedRuleManagedKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of IP addresses currently being blocked by the &lt;a&gt;RateBasedRule&lt;/a&gt; that is specified by the &lt;code&gt;RuleId&lt;/code&gt;. The maximum number of managed keys that will be blocked is 10,000. If more than 10,000 addresses exceed the rate limit, the 10,000 addresses with the highest rates will be blocked.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRateBasedRuleManagedKeysRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRateBasedRuleManagedKeysAsync(String xAmzTarget, GetRateBasedRuleManagedKeysRequest getRateBasedRuleManagedKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRateBasedRuleManagedKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRateBasedRuleManagedKeysValidateBeforeCall(xAmzTarget, getRateBasedRuleManagedKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRateBasedRuleManagedKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegexMatchSet
     * @param xAmzTarget  (required)
     * @param getRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegexMatchSetCall(String xAmzTarget, GetRegexMatchSetRequest getRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRegexMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetRegexMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegexMatchSetValidateBeforeCall(String xAmzTarget, GetRegexMatchSetRequest getRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRegexMatchSet(Async)");
        }

        // verify the required parameter 'getRegexMatchSetRequest' is set
        if (getRegexMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'getRegexMatchSetRequest' when calling getRegexMatchSet(Async)");
        }

        return getRegexMatchSetCall(xAmzTarget, getRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RegexMatchSet&lt;/a&gt; specified by &lt;code&gt;RegexMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRegexMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetRegexMatchSetResponse getRegexMatchSet(String xAmzTarget, GetRegexMatchSetRequest getRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRegexMatchSetResponse> localVarResp = getRegexMatchSetWithHttpInfo(xAmzTarget, getRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RegexMatchSet&lt;/a&gt; specified by &lt;code&gt;RegexMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRegexMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRegexMatchSetResponse> getRegexMatchSetWithHttpInfo(String xAmzTarget, GetRegexMatchSetRequest getRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRegexMatchSetValidateBeforeCall(xAmzTarget, getRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRegexMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RegexMatchSet&lt;/a&gt; specified by &lt;code&gt;RegexMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegexMatchSetAsync(String xAmzTarget, GetRegexMatchSetRequest getRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRegexMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegexMatchSetValidateBeforeCall(xAmzTarget, getRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRegexMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegexPatternSet
     * @param xAmzTarget  (required)
     * @param getRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegexPatternSetCall(String xAmzTarget, GetRegexPatternSetRequest getRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRegexPatternSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetRegexPatternSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegexPatternSetValidateBeforeCall(String xAmzTarget, GetRegexPatternSetRequest getRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRegexPatternSet(Async)");
        }

        // verify the required parameter 'getRegexPatternSetRequest' is set
        if (getRegexPatternSetRequest == null) {
            throw new ApiException("Missing the required parameter 'getRegexPatternSetRequest' when calling getRegexPatternSet(Async)");
        }

        return getRegexPatternSetCall(xAmzTarget, getRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RegexPatternSet&lt;/a&gt; specified by &lt;code&gt;RegexPatternSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRegexPatternSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetRegexPatternSetResponse getRegexPatternSet(String xAmzTarget, GetRegexPatternSetRequest getRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRegexPatternSetResponse> localVarResp = getRegexPatternSetWithHttpInfo(xAmzTarget, getRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RegexPatternSet&lt;/a&gt; specified by &lt;code&gt;RegexPatternSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRegexPatternSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRegexPatternSetResponse> getRegexPatternSetWithHttpInfo(String xAmzTarget, GetRegexPatternSetRequest getRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRegexPatternSetValidateBeforeCall(xAmzTarget, getRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRegexPatternSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RegexPatternSet&lt;/a&gt; specified by &lt;code&gt;RegexPatternSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegexPatternSetAsync(String xAmzTarget, GetRegexPatternSetRequest getRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRegexPatternSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegexPatternSetValidateBeforeCall(xAmzTarget, getRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRegexPatternSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRule
     * @param xAmzTarget  (required)
     * @param getRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleCall(String xAmzTarget, GetRuleRequest getRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRuleRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleValidateBeforeCall(String xAmzTarget, GetRuleRequest getRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRule(Async)");
        }

        // verify the required parameter 'getRuleRequest' is set
        if (getRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'getRuleRequest' when calling getRule(Async)");
        }

        return getRuleCall(xAmzTarget, getRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;Rule&lt;/a&gt; that is specified by the &lt;code&gt;RuleId&lt;/code&gt; that you included in the &lt;code&gt;GetRule&lt;/code&gt; request.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetRuleResponse getRule(String xAmzTarget, GetRuleRequest getRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRuleResponse> localVarResp = getRuleWithHttpInfo(xAmzTarget, getRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;Rule&lt;/a&gt; that is specified by the &lt;code&gt;RuleId&lt;/code&gt; that you included in the &lt;code&gt;GetRule&lt;/code&gt; request.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRuleResponse> getRuleWithHttpInfo(String xAmzTarget, GetRuleRequest getRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRuleValidateBeforeCall(xAmzTarget, getRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;Rule&lt;/a&gt; that is specified by the &lt;code&gt;RuleId&lt;/code&gt; that you included in the &lt;code&gt;GetRule&lt;/code&gt; request.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleAsync(String xAmzTarget, GetRuleRequest getRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleValidateBeforeCall(xAmzTarget, getRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRuleGroup
     * @param xAmzTarget  (required)
     * @param getRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleGroupCall(String xAmzTarget, GetRuleGroupRequest getRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRuleGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetRuleGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleGroupValidateBeforeCall(String xAmzTarget, GetRuleGroupRequest getRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRuleGroup(Async)");
        }

        // verify the required parameter 'getRuleGroupRequest' is set
        if (getRuleGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'getRuleGroupRequest' when calling getRuleGroup(Async)");
        }

        return getRuleGroupCall(xAmzTarget, getRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RuleGroup&lt;/a&gt; that is specified by the &lt;code&gt;RuleGroupId&lt;/code&gt; that you included in the &lt;code&gt;GetRuleGroup&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;To view the rules in a rule group, use &lt;a&gt;ListActivatedRulesInRuleGroup&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRuleGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetRuleGroupResponse getRuleGroup(String xAmzTarget, GetRuleGroupRequest getRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRuleGroupResponse> localVarResp = getRuleGroupWithHttpInfo(xAmzTarget, getRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RuleGroup&lt;/a&gt; that is specified by the &lt;code&gt;RuleGroupId&lt;/code&gt; that you included in the &lt;code&gt;GetRuleGroup&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;To view the rules in a rule group, use &lt;a&gt;ListActivatedRulesInRuleGroup&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRuleGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRuleGroupResponse> getRuleGroupWithHttpInfo(String xAmzTarget, GetRuleGroupRequest getRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRuleGroupValidateBeforeCall(xAmzTarget, getRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRuleGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;RuleGroup&lt;/a&gt; that is specified by the &lt;code&gt;RuleGroupId&lt;/code&gt; that you included in the &lt;code&gt;GetRuleGroup&lt;/code&gt; request.&lt;/p&gt; &lt;p&gt;To view the rules in a rule group, use &lt;a&gt;ListActivatedRulesInRuleGroup&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleGroupAsync(String xAmzTarget, GetRuleGroupRequest getRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRuleGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleGroupValidateBeforeCall(xAmzTarget, getRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRuleGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSampledRequests
     * @param xAmzTarget  (required)
     * @param getSampledRequestsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSampledRequestsCall(String xAmzTarget, GetSampledRequestsRequest getSampledRequestsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSampledRequestsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetSampledRequests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSampledRequestsValidateBeforeCall(String xAmzTarget, GetSampledRequestsRequest getSampledRequestsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getSampledRequests(Async)");
        }

        // verify the required parameter 'getSampledRequestsRequest' is set
        if (getSampledRequestsRequest == null) {
            throw new ApiException("Missing the required parameter 'getSampledRequestsRequest' when calling getSampledRequests(Async)");
        }

        return getSampledRequestsCall(xAmzTarget, getSampledRequestsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets detailed information about a specified number of requests--a sample--that AWS WAF randomly selects from among the first 5,000 requests that your AWS resource received during a time range that you choose. You can specify a sample size of up to 500 requests, and you can specify any time range in the previous three hours.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetSampledRequests&lt;/code&gt; returns a time range, which is usually the time range that you specified. However, if your resource (such as a CloudFront distribution) received 5,000 requests before the specified time range elapsed, &lt;code&gt;GetSampledRequests&lt;/code&gt; returns an updated time range. This new time range indicates the actual period during which AWS WAF selected the requests in the sample.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSampledRequestsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSampledRequestsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetSampledRequestsResponse getSampledRequests(String xAmzTarget, GetSampledRequestsRequest getSampledRequestsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSampledRequestsResponse> localVarResp = getSampledRequestsWithHttpInfo(xAmzTarget, getSampledRequestsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets detailed information about a specified number of requests--a sample--that AWS WAF randomly selects from among the first 5,000 requests that your AWS resource received during a time range that you choose. You can specify a sample size of up to 500 requests, and you can specify any time range in the previous three hours.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetSampledRequests&lt;/code&gt; returns a time range, which is usually the time range that you specified. However, if your resource (such as a CloudFront distribution) received 5,000 requests before the specified time range elapsed, &lt;code&gt;GetSampledRequests&lt;/code&gt; returns an updated time range. This new time range indicates the actual period during which AWS WAF selected the requests in the sample.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSampledRequestsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSampledRequestsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSampledRequestsResponse> getSampledRequestsWithHttpInfo(String xAmzTarget, GetSampledRequestsRequest getSampledRequestsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSampledRequestsValidateBeforeCall(xAmzTarget, getSampledRequestsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSampledRequestsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets detailed information about a specified number of requests--a sample--that AWS WAF randomly selects from among the first 5,000 requests that your AWS resource received during a time range that you choose. You can specify a sample size of up to 500 requests, and you can specify any time range in the previous three hours.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetSampledRequests&lt;/code&gt; returns a time range, which is usually the time range that you specified. However, if your resource (such as a CloudFront distribution) received 5,000 requests before the specified time range elapsed, &lt;code&gt;GetSampledRequests&lt;/code&gt; returns an updated time range. This new time range indicates the actual period during which AWS WAF selected the requests in the sample.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSampledRequestsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSampledRequestsAsync(String xAmzTarget, GetSampledRequestsRequest getSampledRequestsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSampledRequestsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSampledRequestsValidateBeforeCall(xAmzTarget, getSampledRequestsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSampledRequestsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSizeConstraintSet
     * @param xAmzTarget  (required)
     * @param getSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSizeConstraintSetCall(String xAmzTarget, GetSizeConstraintSetRequest getSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSizeConstraintSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetSizeConstraintSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSizeConstraintSetValidateBeforeCall(String xAmzTarget, GetSizeConstraintSetRequest getSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getSizeConstraintSet(Async)");
        }

        // verify the required parameter 'getSizeConstraintSetRequest' is set
        if (getSizeConstraintSetRequest == null) {
            throw new ApiException("Missing the required parameter 'getSizeConstraintSetRequest' when calling getSizeConstraintSet(Async)");
        }

        return getSizeConstraintSetCall(xAmzTarget, getSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;SizeConstraintSet&lt;/a&gt; specified by &lt;code&gt;SizeConstraintSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSizeConstraintSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetSizeConstraintSetResponse getSizeConstraintSet(String xAmzTarget, GetSizeConstraintSetRequest getSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSizeConstraintSetResponse> localVarResp = getSizeConstraintSetWithHttpInfo(xAmzTarget, getSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;SizeConstraintSet&lt;/a&gt; specified by &lt;code&gt;SizeConstraintSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSizeConstraintSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSizeConstraintSetResponse> getSizeConstraintSetWithHttpInfo(String xAmzTarget, GetSizeConstraintSetRequest getSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSizeConstraintSetValidateBeforeCall(xAmzTarget, getSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSizeConstraintSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;SizeConstraintSet&lt;/a&gt; specified by &lt;code&gt;SizeConstraintSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSizeConstraintSetAsync(String xAmzTarget, GetSizeConstraintSetRequest getSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSizeConstraintSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSizeConstraintSetValidateBeforeCall(xAmzTarget, getSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSizeConstraintSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSqlInjectionMatchSet
     * @param xAmzTarget  (required)
     * @param getSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSqlInjectionMatchSetCall(String xAmzTarget, GetSqlInjectionMatchSetRequest getSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSqlInjectionMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetSqlInjectionMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSqlInjectionMatchSetValidateBeforeCall(String xAmzTarget, GetSqlInjectionMatchSetRequest getSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getSqlInjectionMatchSet(Async)");
        }

        // verify the required parameter 'getSqlInjectionMatchSetRequest' is set
        if (getSqlInjectionMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'getSqlInjectionMatchSetRequest' when calling getSqlInjectionMatchSet(Async)");
        }

        return getSqlInjectionMatchSetCall(xAmzTarget, getSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt; that is specified by &lt;code&gt;SqlInjectionMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSqlInjectionMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetSqlInjectionMatchSetResponse getSqlInjectionMatchSet(String xAmzTarget, GetSqlInjectionMatchSetRequest getSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSqlInjectionMatchSetResponse> localVarResp = getSqlInjectionMatchSetWithHttpInfo(xAmzTarget, getSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt; that is specified by &lt;code&gt;SqlInjectionMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSqlInjectionMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSqlInjectionMatchSetResponse> getSqlInjectionMatchSetWithHttpInfo(String xAmzTarget, GetSqlInjectionMatchSetRequest getSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSqlInjectionMatchSetValidateBeforeCall(xAmzTarget, getSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSqlInjectionMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt; that is specified by &lt;code&gt;SqlInjectionMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSqlInjectionMatchSetAsync(String xAmzTarget, GetSqlInjectionMatchSetRequest getSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSqlInjectionMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSqlInjectionMatchSetValidateBeforeCall(xAmzTarget, getSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSqlInjectionMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebACL
     * @param xAmzTarget  (required)
     * @param getWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebACLCall(String xAmzTarget, GetWebACLRequest getWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getWebACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetWebACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebACLValidateBeforeCall(String xAmzTarget, GetWebACLRequest getWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getWebACL(Async)");
        }

        // verify the required parameter 'getWebACLRequest' is set
        if (getWebACLRequest == null) {
            throw new ApiException("Missing the required parameter 'getWebACLRequest' when calling getWebACL(Async)");
        }

        return getWebACLCall(xAmzTarget, getWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;WebACL&lt;/a&gt; that is specified by &lt;code&gt;WebACLId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetWebACLResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetWebACLResponse getWebACL(String xAmzTarget, GetWebACLRequest getWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetWebACLResponse> localVarResp = getWebACLWithHttpInfo(xAmzTarget, getWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;WebACL&lt;/a&gt; that is specified by &lt;code&gt;WebACLId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetWebACLResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetWebACLResponse> getWebACLWithHttpInfo(String xAmzTarget, GetWebACLRequest getWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getWebACLValidateBeforeCall(xAmzTarget, getWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetWebACLResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;WebACL&lt;/a&gt; that is specified by &lt;code&gt;WebACLId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebACLAsync(String xAmzTarget, GetWebACLRequest getWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetWebACLResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebACLValidateBeforeCall(xAmzTarget, getWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetWebACLResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebACLForResource
     * @param xAmzTarget  (required)
     * @param getWebACLForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFUnavailableEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebACLForResourceCall(String xAmzTarget, GetWebACLForResourceRequest getWebACLForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getWebACLForResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetWebACLForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebACLForResourceValidateBeforeCall(String xAmzTarget, GetWebACLForResourceRequest getWebACLForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getWebACLForResource(Async)");
        }

        // verify the required parameter 'getWebACLForResourceRequest' is set
        if (getWebACLForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'getWebACLForResourceRequest' when calling getWebACLForResource(Async)");
        }

        return getWebACLForResourceCall(xAmzTarget, getWebACLForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the web ACL for the specified resource, either an application load balancer or Amazon API Gateway stage.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getWebACLForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetWebACLForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFUnavailableEntityException </td><td>  -  </td></tr>
     </table>
     */
    public GetWebACLForResourceResponse getWebACLForResource(String xAmzTarget, GetWebACLForResourceRequest getWebACLForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetWebACLForResourceResponse> localVarResp = getWebACLForResourceWithHttpInfo(xAmzTarget, getWebACLForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the web ACL for the specified resource, either an application load balancer or Amazon API Gateway stage.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getWebACLForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetWebACLForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFUnavailableEntityException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetWebACLForResourceResponse> getWebACLForResourceWithHttpInfo(String xAmzTarget, GetWebACLForResourceRequest getWebACLForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getWebACLForResourceValidateBeforeCall(xAmzTarget, getWebACLForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetWebACLForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the web ACL for the specified resource, either an application load balancer or Amazon API Gateway stage.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getWebACLForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFUnavailableEntityException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebACLForResourceAsync(String xAmzTarget, GetWebACLForResourceRequest getWebACLForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetWebACLForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebACLForResourceValidateBeforeCall(xAmzTarget, getWebACLForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetWebACLForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getXssMatchSet
     * @param xAmzTarget  (required)
     * @param getXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getXssMatchSetCall(String xAmzTarget, GetXssMatchSetRequest getXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getXssMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.GetXssMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getXssMatchSetValidateBeforeCall(String xAmzTarget, GetXssMatchSetRequest getXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getXssMatchSet(Async)");
        }

        // verify the required parameter 'getXssMatchSetRequest' is set
        if (getXssMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'getXssMatchSetRequest' when calling getXssMatchSet(Async)");
        }

        return getXssMatchSetCall(xAmzTarget, getXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;XssMatchSet&lt;/a&gt; that is specified by &lt;code&gt;XssMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetXssMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public GetXssMatchSetResponse getXssMatchSet(String xAmzTarget, GetXssMatchSetRequest getXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetXssMatchSetResponse> localVarResp = getXssMatchSetWithHttpInfo(xAmzTarget, getXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;XssMatchSet&lt;/a&gt; that is specified by &lt;code&gt;XssMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetXssMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetXssMatchSetResponse> getXssMatchSetWithHttpInfo(String xAmzTarget, GetXssMatchSetRequest getXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getXssMatchSetValidateBeforeCall(xAmzTarget, getXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetXssMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns the &lt;a&gt;XssMatchSet&lt;/a&gt; that is specified by &lt;code&gt;XssMatchSetId&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getXssMatchSetAsync(String xAmzTarget, GetXssMatchSetRequest getXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetXssMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getXssMatchSetValidateBeforeCall(xAmzTarget, getXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetXssMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listActivatedRulesInRuleGroup
     * @param xAmzTarget  (required)
     * @param listActivatedRulesInRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActivatedRulesInRuleGroupCall(String xAmzTarget, ListActivatedRulesInRuleGroupRequest listActivatedRulesInRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listActivatedRulesInRuleGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListActivatedRulesInRuleGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActivatedRulesInRuleGroupValidateBeforeCall(String xAmzTarget, ListActivatedRulesInRuleGroupRequest listActivatedRulesInRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listActivatedRulesInRuleGroup(Async)");
        }

        // verify the required parameter 'listActivatedRulesInRuleGroupRequest' is set
        if (listActivatedRulesInRuleGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'listActivatedRulesInRuleGroupRequest' when calling listActivatedRulesInRuleGroup(Async)");
        }

        return listActivatedRulesInRuleGroupCall(xAmzTarget, listActivatedRulesInRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;ActivatedRule&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listActivatedRulesInRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListActivatedRulesInRuleGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListActivatedRulesInRuleGroupResponse listActivatedRulesInRuleGroup(String xAmzTarget, ListActivatedRulesInRuleGroupRequest listActivatedRulesInRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListActivatedRulesInRuleGroupResponse> localVarResp = listActivatedRulesInRuleGroupWithHttpInfo(xAmzTarget, listActivatedRulesInRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;ActivatedRule&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listActivatedRulesInRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListActivatedRulesInRuleGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListActivatedRulesInRuleGroupResponse> listActivatedRulesInRuleGroupWithHttpInfo(String xAmzTarget, ListActivatedRulesInRuleGroupRequest listActivatedRulesInRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listActivatedRulesInRuleGroupValidateBeforeCall(xAmzTarget, listActivatedRulesInRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListActivatedRulesInRuleGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;ActivatedRule&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listActivatedRulesInRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActivatedRulesInRuleGroupAsync(String xAmzTarget, ListActivatedRulesInRuleGroupRequest listActivatedRulesInRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListActivatedRulesInRuleGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActivatedRulesInRuleGroupValidateBeforeCall(xAmzTarget, listActivatedRulesInRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListActivatedRulesInRuleGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listByteMatchSets
     * @param xAmzTarget  (required)
     * @param listByteMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listByteMatchSetsCall(String xAmzTarget, ListByteMatchSetsRequest listByteMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listByteMatchSetsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListByteMatchSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByteMatchSetsValidateBeforeCall(String xAmzTarget, ListByteMatchSetsRequest listByteMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listByteMatchSets(Async)");
        }

        // verify the required parameter 'listByteMatchSetsRequest' is set
        if (listByteMatchSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'listByteMatchSetsRequest' when calling listByteMatchSets(Async)");
        }

        return listByteMatchSetsCall(xAmzTarget, listByteMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;ByteMatchSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listByteMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListByteMatchSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListByteMatchSetsResponse listByteMatchSets(String xAmzTarget, ListByteMatchSetsRequest listByteMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListByteMatchSetsResponse> localVarResp = listByteMatchSetsWithHttpInfo(xAmzTarget, listByteMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;ByteMatchSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listByteMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListByteMatchSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListByteMatchSetsResponse> listByteMatchSetsWithHttpInfo(String xAmzTarget, ListByteMatchSetsRequest listByteMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listByteMatchSetsValidateBeforeCall(xAmzTarget, listByteMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListByteMatchSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;ByteMatchSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listByteMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listByteMatchSetsAsync(String xAmzTarget, ListByteMatchSetsRequest listByteMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListByteMatchSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByteMatchSetsValidateBeforeCall(xAmzTarget, listByteMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListByteMatchSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGeoMatchSets
     * @param xAmzTarget  (required)
     * @param listGeoMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGeoMatchSetsCall(String xAmzTarget, ListGeoMatchSetsRequest listGeoMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listGeoMatchSetsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListGeoMatchSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGeoMatchSetsValidateBeforeCall(String xAmzTarget, ListGeoMatchSetsRequest listGeoMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listGeoMatchSets(Async)");
        }

        // verify the required parameter 'listGeoMatchSetsRequest' is set
        if (listGeoMatchSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'listGeoMatchSetsRequest' when calling listGeoMatchSets(Async)");
        }

        return listGeoMatchSetsCall(xAmzTarget, listGeoMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;GeoMatchSetSummary&lt;/a&gt; objects in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listGeoMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListGeoMatchSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListGeoMatchSetsResponse listGeoMatchSets(String xAmzTarget, ListGeoMatchSetsRequest listGeoMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListGeoMatchSetsResponse> localVarResp = listGeoMatchSetsWithHttpInfo(xAmzTarget, listGeoMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;GeoMatchSetSummary&lt;/a&gt; objects in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listGeoMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListGeoMatchSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListGeoMatchSetsResponse> listGeoMatchSetsWithHttpInfo(String xAmzTarget, ListGeoMatchSetsRequest listGeoMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listGeoMatchSetsValidateBeforeCall(xAmzTarget, listGeoMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListGeoMatchSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;GeoMatchSetSummary&lt;/a&gt; objects in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listGeoMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGeoMatchSetsAsync(String xAmzTarget, ListGeoMatchSetsRequest listGeoMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListGeoMatchSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGeoMatchSetsValidateBeforeCall(xAmzTarget, listGeoMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListGeoMatchSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIPSets
     * @param xAmzTarget  (required)
     * @param listIPSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIPSetsCall(String xAmzTarget, ListIPSetsRequest listIPSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listIPSetsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListIPSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIPSetsValidateBeforeCall(String xAmzTarget, ListIPSetsRequest listIPSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listIPSets(Async)");
        }

        // verify the required parameter 'listIPSetsRequest' is set
        if (listIPSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'listIPSetsRequest' when calling listIPSets(Async)");
        }

        return listIPSetsCall(xAmzTarget, listIPSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;IPSetSummary&lt;/a&gt; objects in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listIPSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListIPSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListIPSetsResponse listIPSets(String xAmzTarget, ListIPSetsRequest listIPSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListIPSetsResponse> localVarResp = listIPSetsWithHttpInfo(xAmzTarget, listIPSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;IPSetSummary&lt;/a&gt; objects in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listIPSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListIPSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListIPSetsResponse> listIPSetsWithHttpInfo(String xAmzTarget, ListIPSetsRequest listIPSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listIPSetsValidateBeforeCall(xAmzTarget, listIPSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListIPSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;IPSetSummary&lt;/a&gt; objects in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listIPSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIPSetsAsync(String xAmzTarget, ListIPSetsRequest listIPSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListIPSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIPSetsValidateBeforeCall(xAmzTarget, listIPSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListIPSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoggingConfigurations
     * @param xAmzTarget  (required)
     * @param listLoggingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoggingConfigurationsCall(String xAmzTarget, ListLoggingConfigurationsRequest listLoggingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listLoggingConfigurationsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListLoggingConfigurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoggingConfigurationsValidateBeforeCall(String xAmzTarget, ListLoggingConfigurationsRequest listLoggingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listLoggingConfigurations(Async)");
        }

        // verify the required parameter 'listLoggingConfigurationsRequest' is set
        if (listLoggingConfigurationsRequest == null) {
            throw new ApiException("Missing the required parameter 'listLoggingConfigurationsRequest' when calling listLoggingConfigurations(Async)");
        }

        return listLoggingConfigurationsCall(xAmzTarget, listLoggingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;LoggingConfiguration&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listLoggingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListLoggingConfigurationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListLoggingConfigurationsResponse listLoggingConfigurations(String xAmzTarget, ListLoggingConfigurationsRequest listLoggingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListLoggingConfigurationsResponse> localVarResp = listLoggingConfigurationsWithHttpInfo(xAmzTarget, listLoggingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;LoggingConfiguration&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listLoggingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListLoggingConfigurationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListLoggingConfigurationsResponse> listLoggingConfigurationsWithHttpInfo(String xAmzTarget, ListLoggingConfigurationsRequest listLoggingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listLoggingConfigurationsValidateBeforeCall(xAmzTarget, listLoggingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListLoggingConfigurationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;LoggingConfiguration&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listLoggingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLoggingConfigurationsAsync(String xAmzTarget, ListLoggingConfigurationsRequest listLoggingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListLoggingConfigurationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoggingConfigurationsValidateBeforeCall(xAmzTarget, listLoggingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListLoggingConfigurationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRateBasedRules
     * @param xAmzTarget  (required)
     * @param listRateBasedRulesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRateBasedRulesCall(String xAmzTarget, ListRateBasedRulesRequest listRateBasedRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRateBasedRulesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListRateBasedRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRateBasedRulesValidateBeforeCall(String xAmzTarget, ListRateBasedRulesRequest listRateBasedRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listRateBasedRules(Async)");
        }

        // verify the required parameter 'listRateBasedRulesRequest' is set
        if (listRateBasedRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'listRateBasedRulesRequest' when calling listRateBasedRules(Async)");
        }

        return listRateBasedRulesCall(xAmzTarget, listRateBasedRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRateBasedRulesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListRateBasedRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListRateBasedRulesResponse listRateBasedRules(String xAmzTarget, ListRateBasedRulesRequest listRateBasedRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListRateBasedRulesResponse> localVarResp = listRateBasedRulesWithHttpInfo(xAmzTarget, listRateBasedRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRateBasedRulesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListRateBasedRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRateBasedRulesResponse> listRateBasedRulesWithHttpInfo(String xAmzTarget, ListRateBasedRulesRequest listRateBasedRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listRateBasedRulesValidateBeforeCall(xAmzTarget, listRateBasedRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListRateBasedRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRateBasedRulesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRateBasedRulesAsync(String xAmzTarget, ListRateBasedRulesRequest listRateBasedRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListRateBasedRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRateBasedRulesValidateBeforeCall(xAmzTarget, listRateBasedRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListRateBasedRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRegexMatchSets
     * @param xAmzTarget  (required)
     * @param listRegexMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRegexMatchSetsCall(String xAmzTarget, ListRegexMatchSetsRequest listRegexMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRegexMatchSetsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListRegexMatchSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegexMatchSetsValidateBeforeCall(String xAmzTarget, ListRegexMatchSetsRequest listRegexMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listRegexMatchSets(Async)");
        }

        // verify the required parameter 'listRegexMatchSetsRequest' is set
        if (listRegexMatchSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'listRegexMatchSetsRequest' when calling listRegexMatchSets(Async)");
        }

        return listRegexMatchSetsCall(xAmzTarget, listRegexMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RegexMatchSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRegexMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListRegexMatchSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListRegexMatchSetsResponse listRegexMatchSets(String xAmzTarget, ListRegexMatchSetsRequest listRegexMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListRegexMatchSetsResponse> localVarResp = listRegexMatchSetsWithHttpInfo(xAmzTarget, listRegexMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RegexMatchSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRegexMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListRegexMatchSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRegexMatchSetsResponse> listRegexMatchSetsWithHttpInfo(String xAmzTarget, ListRegexMatchSetsRequest listRegexMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listRegexMatchSetsValidateBeforeCall(xAmzTarget, listRegexMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListRegexMatchSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RegexMatchSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRegexMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRegexMatchSetsAsync(String xAmzTarget, ListRegexMatchSetsRequest listRegexMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListRegexMatchSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegexMatchSetsValidateBeforeCall(xAmzTarget, listRegexMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListRegexMatchSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRegexPatternSets
     * @param xAmzTarget  (required)
     * @param listRegexPatternSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRegexPatternSetsCall(String xAmzTarget, ListRegexPatternSetsRequest listRegexPatternSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRegexPatternSetsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListRegexPatternSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegexPatternSetsValidateBeforeCall(String xAmzTarget, ListRegexPatternSetsRequest listRegexPatternSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listRegexPatternSets(Async)");
        }

        // verify the required parameter 'listRegexPatternSetsRequest' is set
        if (listRegexPatternSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'listRegexPatternSetsRequest' when calling listRegexPatternSets(Async)");
        }

        return listRegexPatternSetsCall(xAmzTarget, listRegexPatternSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RegexPatternSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRegexPatternSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListRegexPatternSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListRegexPatternSetsResponse listRegexPatternSets(String xAmzTarget, ListRegexPatternSetsRequest listRegexPatternSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListRegexPatternSetsResponse> localVarResp = listRegexPatternSetsWithHttpInfo(xAmzTarget, listRegexPatternSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RegexPatternSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRegexPatternSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListRegexPatternSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRegexPatternSetsResponse> listRegexPatternSetsWithHttpInfo(String xAmzTarget, ListRegexPatternSetsRequest listRegexPatternSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listRegexPatternSetsValidateBeforeCall(xAmzTarget, listRegexPatternSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListRegexPatternSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RegexPatternSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRegexPatternSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRegexPatternSetsAsync(String xAmzTarget, ListRegexPatternSetsRequest listRegexPatternSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListRegexPatternSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegexPatternSetsValidateBeforeCall(xAmzTarget, listRegexPatternSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListRegexPatternSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listResourcesForWebACL
     * @param xAmzTarget  (required)
     * @param listResourcesForWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourcesForWebACLCall(String xAmzTarget, ListResourcesForWebACLRequest listResourcesForWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listResourcesForWebACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListResourcesForWebACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResourcesForWebACLValidateBeforeCall(String xAmzTarget, ListResourcesForWebACLRequest listResourcesForWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listResourcesForWebACL(Async)");
        }

        // verify the required parameter 'listResourcesForWebACLRequest' is set
        if (listResourcesForWebACLRequest == null) {
            throw new ApiException("Missing the required parameter 'listResourcesForWebACLRequest' when calling listResourcesForWebACL(Async)");
        }

        return listResourcesForWebACLCall(xAmzTarget, listResourcesForWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of resources associated with the specified web ACL.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listResourcesForWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListResourcesForWebACLResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ListResourcesForWebACLResponse listResourcesForWebACL(String xAmzTarget, ListResourcesForWebACLRequest listResourcesForWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListResourcesForWebACLResponse> localVarResp = listResourcesForWebACLWithHttpInfo(xAmzTarget, listResourcesForWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of resources associated with the specified web ACL.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listResourcesForWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListResourcesForWebACLResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResourcesForWebACLResponse> listResourcesForWebACLWithHttpInfo(String xAmzTarget, ListResourcesForWebACLRequest listResourcesForWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listResourcesForWebACLValidateBeforeCall(xAmzTarget, listResourcesForWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListResourcesForWebACLResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic Regional&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of resources associated with the specified web ACL.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listResourcesForWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourcesForWebACLAsync(String xAmzTarget, ListResourcesForWebACLRequest listResourcesForWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListResourcesForWebACLResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResourcesForWebACLValidateBeforeCall(xAmzTarget, listResourcesForWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListResourcesForWebACLResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRuleGroups
     * @param xAmzTarget  (required)
     * @param listRuleGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRuleGroupsCall(String xAmzTarget, ListRuleGroupsRequest listRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRuleGroupsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListRuleGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRuleGroupsValidateBeforeCall(String xAmzTarget, ListRuleGroupsRequest listRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listRuleGroups(Async)");
        }

        // verify the required parameter 'listRuleGroupsRequest' is set
        if (listRuleGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'listRuleGroupsRequest' when calling listRuleGroups(Async)");
        }

        return listRuleGroupsCall(xAmzTarget, listRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleGroup&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRuleGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListRuleGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListRuleGroupsResponse listRuleGroups(String xAmzTarget, ListRuleGroupsRequest listRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListRuleGroupsResponse> localVarResp = listRuleGroupsWithHttpInfo(xAmzTarget, listRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleGroup&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRuleGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListRuleGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRuleGroupsResponse> listRuleGroupsWithHttpInfo(String xAmzTarget, ListRuleGroupsRequest listRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listRuleGroupsValidateBeforeCall(xAmzTarget, listRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListRuleGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleGroup&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRuleGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRuleGroupsAsync(String xAmzTarget, ListRuleGroupsRequest listRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListRuleGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRuleGroupsValidateBeforeCall(xAmzTarget, listRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListRuleGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRules
     * @param xAmzTarget  (required)
     * @param listRulesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRulesCall(String xAmzTarget, ListRulesRequest listRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRulesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRulesValidateBeforeCall(String xAmzTarget, ListRulesRequest listRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listRules(Async)");
        }

        // verify the required parameter 'listRulesRequest' is set
        if (listRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'listRulesRequest' when calling listRules(Async)");
        }

        return listRulesCall(xAmzTarget, listRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRulesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListRulesResponse listRules(String xAmzTarget, ListRulesRequest listRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListRulesResponse> localVarResp = listRulesWithHttpInfo(xAmzTarget, listRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRulesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRulesResponse> listRulesWithHttpInfo(String xAmzTarget, ListRulesRequest listRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listRulesValidateBeforeCall(xAmzTarget, listRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listRulesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRulesAsync(String xAmzTarget, ListRulesRequest listRulesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRulesValidateBeforeCall(xAmzTarget, listRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSizeConstraintSets
     * @param xAmzTarget  (required)
     * @param listSizeConstraintSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSizeConstraintSetsCall(String xAmzTarget, ListSizeConstraintSetsRequest listSizeConstraintSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listSizeConstraintSetsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListSizeConstraintSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSizeConstraintSetsValidateBeforeCall(String xAmzTarget, ListSizeConstraintSetsRequest listSizeConstraintSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listSizeConstraintSets(Async)");
        }

        // verify the required parameter 'listSizeConstraintSetsRequest' is set
        if (listSizeConstraintSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'listSizeConstraintSetsRequest' when calling listSizeConstraintSets(Async)");
        }

        return listSizeConstraintSetsCall(xAmzTarget, listSizeConstraintSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;SizeConstraintSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listSizeConstraintSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListSizeConstraintSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListSizeConstraintSetsResponse listSizeConstraintSets(String xAmzTarget, ListSizeConstraintSetsRequest listSizeConstraintSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListSizeConstraintSetsResponse> localVarResp = listSizeConstraintSetsWithHttpInfo(xAmzTarget, listSizeConstraintSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;SizeConstraintSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listSizeConstraintSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListSizeConstraintSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSizeConstraintSetsResponse> listSizeConstraintSetsWithHttpInfo(String xAmzTarget, ListSizeConstraintSetsRequest listSizeConstraintSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listSizeConstraintSetsValidateBeforeCall(xAmzTarget, listSizeConstraintSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListSizeConstraintSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;SizeConstraintSetSummary&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listSizeConstraintSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSizeConstraintSetsAsync(String xAmzTarget, ListSizeConstraintSetsRequest listSizeConstraintSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListSizeConstraintSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSizeConstraintSetsValidateBeforeCall(xAmzTarget, listSizeConstraintSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListSizeConstraintSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSqlInjectionMatchSets
     * @param xAmzTarget  (required)
     * @param listSqlInjectionMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSqlInjectionMatchSetsCall(String xAmzTarget, ListSqlInjectionMatchSetsRequest listSqlInjectionMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listSqlInjectionMatchSetsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListSqlInjectionMatchSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSqlInjectionMatchSetsValidateBeforeCall(String xAmzTarget, ListSqlInjectionMatchSetsRequest listSqlInjectionMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listSqlInjectionMatchSets(Async)");
        }

        // verify the required parameter 'listSqlInjectionMatchSetsRequest' is set
        if (listSqlInjectionMatchSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'listSqlInjectionMatchSetsRequest' when calling listSqlInjectionMatchSets(Async)");
        }

        return listSqlInjectionMatchSetsCall(xAmzTarget, listSqlInjectionMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listSqlInjectionMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListSqlInjectionMatchSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListSqlInjectionMatchSetsResponse listSqlInjectionMatchSets(String xAmzTarget, ListSqlInjectionMatchSetsRequest listSqlInjectionMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListSqlInjectionMatchSetsResponse> localVarResp = listSqlInjectionMatchSetsWithHttpInfo(xAmzTarget, listSqlInjectionMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listSqlInjectionMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListSqlInjectionMatchSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSqlInjectionMatchSetsResponse> listSqlInjectionMatchSetsWithHttpInfo(String xAmzTarget, ListSqlInjectionMatchSetsRequest listSqlInjectionMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listSqlInjectionMatchSetsValidateBeforeCall(xAmzTarget, listSqlInjectionMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListSqlInjectionMatchSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listSqlInjectionMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSqlInjectionMatchSetsAsync(String xAmzTarget, ListSqlInjectionMatchSetsRequest listSqlInjectionMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListSqlInjectionMatchSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSqlInjectionMatchSetsValidateBeforeCall(xAmzTarget, listSqlInjectionMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListSqlInjectionMatchSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSubscribedRuleGroups
     * @param xAmzTarget  (required)
     * @param listSubscribedRuleGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubscribedRuleGroupsCall(String xAmzTarget, ListSubscribedRuleGroupsRequest listSubscribedRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listSubscribedRuleGroupsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListSubscribedRuleGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubscribedRuleGroupsValidateBeforeCall(String xAmzTarget, ListSubscribedRuleGroupsRequest listSubscribedRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listSubscribedRuleGroups(Async)");
        }

        // verify the required parameter 'listSubscribedRuleGroupsRequest' is set
        if (listSubscribedRuleGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'listSubscribedRuleGroupsRequest' when calling listSubscribedRuleGroups(Async)");
        }

        return listSubscribedRuleGroupsCall(xAmzTarget, listSubscribedRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleGroup&lt;/a&gt; objects that you are subscribed to.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listSubscribedRuleGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListSubscribedRuleGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscribedRuleGroupsResponse listSubscribedRuleGroups(String xAmzTarget, ListSubscribedRuleGroupsRequest listSubscribedRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListSubscribedRuleGroupsResponse> localVarResp = listSubscribedRuleGroupsWithHttpInfo(xAmzTarget, listSubscribedRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleGroup&lt;/a&gt; objects that you are subscribed to.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listSubscribedRuleGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListSubscribedRuleGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubscribedRuleGroupsResponse> listSubscribedRuleGroupsWithHttpInfo(String xAmzTarget, ListSubscribedRuleGroupsRequest listSubscribedRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listSubscribedRuleGroupsValidateBeforeCall(xAmzTarget, listSubscribedRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListSubscribedRuleGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;RuleGroup&lt;/a&gt; objects that you are subscribed to.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listSubscribedRuleGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubscribedRuleGroupsAsync(String xAmzTarget, ListSubscribedRuleGroupsRequest listSubscribedRuleGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListSubscribedRuleGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscribedRuleGroupsValidateBeforeCall(xAmzTarget, listSubscribedRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListSubscribedRuleGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceRequest' is set
        if (listTagsForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Retrieves the tags associated with the specified AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \&quot;customer\&quot; and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.&lt;/p&gt; &lt;p&gt;Tagging is only available through the API, SDKs, and CLI. You can&#39;t manage or view tags through the AWS WAF Classic console. You can tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Retrieves the tags associated with the specified AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \&quot;customer\&quot; and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.&lt;/p&gt; &lt;p&gt;Tagging is only available through the API, SDKs, and CLI. You can&#39;t manage or view tags through the AWS WAF Classic console. You can tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Retrieves the tags associated with the specified AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \&quot;customer\&quot; and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.&lt;/p&gt; &lt;p&gt;Tagging is only available through the API, SDKs, and CLI. You can&#39;t manage or view tags through the AWS WAF Classic console. You can tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWebACLs
     * @param xAmzTarget  (required)
     * @param listWebACLsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebACLsCall(String xAmzTarget, ListWebACLsRequest listWebACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listWebACLsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListWebACLs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebACLsValidateBeforeCall(String xAmzTarget, ListWebACLsRequest listWebACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listWebACLs(Async)");
        }

        // verify the required parameter 'listWebACLsRequest' is set
        if (listWebACLsRequest == null) {
            throw new ApiException("Missing the required parameter 'listWebACLsRequest' when calling listWebACLs(Async)");
        }

        return listWebACLsCall(xAmzTarget, listWebACLsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;WebACLSummary&lt;/a&gt; objects in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listWebACLsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListWebACLsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListWebACLsResponse listWebACLs(String xAmzTarget, ListWebACLsRequest listWebACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListWebACLsResponse> localVarResp = listWebACLsWithHttpInfo(xAmzTarget, listWebACLsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;WebACLSummary&lt;/a&gt; objects in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listWebACLsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListWebACLsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListWebACLsResponse> listWebACLsWithHttpInfo(String xAmzTarget, ListWebACLsRequest listWebACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listWebACLsValidateBeforeCall(xAmzTarget, listWebACLsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListWebACLsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;WebACLSummary&lt;/a&gt; objects in the response.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listWebACLsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebACLsAsync(String xAmzTarget, ListWebACLsRequest listWebACLsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListWebACLsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebACLsValidateBeforeCall(xAmzTarget, listWebACLsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListWebACLsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listXssMatchSets
     * @param xAmzTarget  (required)
     * @param listXssMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listXssMatchSetsCall(String xAmzTarget, ListXssMatchSetsRequest listXssMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listXssMatchSetsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.ListXssMatchSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listXssMatchSetsValidateBeforeCall(String xAmzTarget, ListXssMatchSetsRequest listXssMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listXssMatchSets(Async)");
        }

        // verify the required parameter 'listXssMatchSetsRequest' is set
        if (listXssMatchSetsRequest == null) {
            throw new ApiException("Missing the required parameter 'listXssMatchSetsRequest' when calling listXssMatchSets(Async)");
        }

        return listXssMatchSetsCall(xAmzTarget, listXssMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;XssMatchSet&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listXssMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListXssMatchSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ListXssMatchSetsResponse listXssMatchSets(String xAmzTarget, ListXssMatchSetsRequest listXssMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListXssMatchSetsResponse> localVarResp = listXssMatchSetsWithHttpInfo(xAmzTarget, listXssMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;XssMatchSet&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listXssMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListXssMatchSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListXssMatchSetsResponse> listXssMatchSetsWithHttpInfo(String xAmzTarget, ListXssMatchSetsRequest listXssMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listXssMatchSetsValidateBeforeCall(xAmzTarget, listXssMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListXssMatchSetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Returns an array of &lt;a&gt;XssMatchSet&lt;/a&gt; objects.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listXssMatchSetsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listXssMatchSetsAsync(String xAmzTarget, ListXssMatchSetsRequest listXssMatchSetsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListXssMatchSetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listXssMatchSetsValidateBeforeCall(xAmzTarget, listXssMatchSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListXssMatchSetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putLoggingConfiguration
     * @param xAmzTarget  (required)
     * @param putLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFServiceLinkedRoleErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putLoggingConfigurationCall(String xAmzTarget, PutLoggingConfigurationRequest putLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putLoggingConfigurationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.PutLoggingConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putLoggingConfigurationValidateBeforeCall(String xAmzTarget, PutLoggingConfigurationRequest putLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putLoggingConfiguration(Async)");
        }

        // verify the required parameter 'putLoggingConfigurationRequest' is set
        if (putLoggingConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'putLoggingConfigurationRequest' when calling putLoggingConfiguration(Async)");
        }

        return putLoggingConfigurationCall(xAmzTarget, putLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Associates a &lt;a&gt;LoggingConfiguration&lt;/a&gt; with a specified web ACL.&lt;/p&gt; &lt;p&gt;You can access information about all traffic that AWS WAF inspects using the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create an Amazon Kinesis Data Firehose. &lt;/p&gt; &lt;p&gt;Create the data firehose with a PUT source and in the region that you are operating. However, if you are capturing logs for Amazon CloudFront, always create the firehose in US East (N. Virginia). &lt;/p&gt; &lt;note&gt; &lt;p&gt;Do not create the data firehose using a &lt;code&gt;Kinesis stream&lt;/code&gt; as your source.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Associate that firehose to your web ACL using a &lt;code&gt;PutLoggingConfiguration&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;When you successfully enable logging using a &lt;code&gt;PutLoggingConfiguration&lt;/code&gt; request, AWS WAF will create a service linked role with the necessary permissions to write logs to the Amazon Kinesis Data Firehose. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/logging.html\&quot;&gt;Logging Web ACL Traffic Information&lt;/a&gt; in the &lt;i&gt;AWS WAF Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutLoggingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFServiceLinkedRoleErrorException </td><td>  -  </td></tr>
     </table>
     */
    public PutLoggingConfigurationResponse putLoggingConfiguration(String xAmzTarget, PutLoggingConfigurationRequest putLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutLoggingConfigurationResponse> localVarResp = putLoggingConfigurationWithHttpInfo(xAmzTarget, putLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Associates a &lt;a&gt;LoggingConfiguration&lt;/a&gt; with a specified web ACL.&lt;/p&gt; &lt;p&gt;You can access information about all traffic that AWS WAF inspects using the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create an Amazon Kinesis Data Firehose. &lt;/p&gt; &lt;p&gt;Create the data firehose with a PUT source and in the region that you are operating. However, if you are capturing logs for Amazon CloudFront, always create the firehose in US East (N. Virginia). &lt;/p&gt; &lt;note&gt; &lt;p&gt;Do not create the data firehose using a &lt;code&gt;Kinesis stream&lt;/code&gt; as your source.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Associate that firehose to your web ACL using a &lt;code&gt;PutLoggingConfiguration&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;When you successfully enable logging using a &lt;code&gt;PutLoggingConfiguration&lt;/code&gt; request, AWS WAF will create a service linked role with the necessary permissions to write logs to the Amazon Kinesis Data Firehose. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/logging.html\&quot;&gt;Logging Web ACL Traffic Information&lt;/a&gt; in the &lt;i&gt;AWS WAF Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutLoggingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFServiceLinkedRoleErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutLoggingConfigurationResponse> putLoggingConfigurationWithHttpInfo(String xAmzTarget, PutLoggingConfigurationRequest putLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putLoggingConfigurationValidateBeforeCall(xAmzTarget, putLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutLoggingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Associates a &lt;a&gt;LoggingConfiguration&lt;/a&gt; with a specified web ACL.&lt;/p&gt; &lt;p&gt;You can access information about all traffic that AWS WAF inspects using the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create an Amazon Kinesis Data Firehose. &lt;/p&gt; &lt;p&gt;Create the data firehose with a PUT source and in the region that you are operating. However, if you are capturing logs for Amazon CloudFront, always create the firehose in US East (N. Virginia). &lt;/p&gt; &lt;note&gt; &lt;p&gt;Do not create the data firehose using a &lt;code&gt;Kinesis stream&lt;/code&gt; as your source.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Associate that firehose to your web ACL using a &lt;code&gt;PutLoggingConfiguration&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;When you successfully enable logging using a &lt;code&gt;PutLoggingConfiguration&lt;/code&gt; request, AWS WAF will create a service linked role with the necessary permissions to write logs to the Amazon Kinesis Data Firehose. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/logging.html\&quot;&gt;Logging Web ACL Traffic Information&lt;/a&gt; in the &lt;i&gt;AWS WAF Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFServiceLinkedRoleErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putLoggingConfigurationAsync(String xAmzTarget, PutLoggingConfigurationRequest putLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutLoggingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putLoggingConfigurationValidateBeforeCall(xAmzTarget, putLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutLoggingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPermissionPolicy
     * @param xAmzTarget  (required)
     * @param putPermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidPermissionPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPermissionPolicyCall(String xAmzTarget, PutPermissionPolicyRequest putPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putPermissionPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.PutPermissionPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPermissionPolicyValidateBeforeCall(String xAmzTarget, PutPermissionPolicyRequest putPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putPermissionPolicy(Async)");
        }

        // verify the required parameter 'putPermissionPolicyRequest' is set
        if (putPermissionPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'putPermissionPolicyRequest' when calling putPermissionPolicy(Async)");
        }

        return putPermissionPolicyCall(xAmzTarget, putPermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches an IAM policy to the specified resource. The only supported use for this action is to share a RuleGroup across accounts.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;PutPermissionPolicy&lt;/code&gt; is subject to the following restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can attach only one policy with each &lt;code&gt;PutPermissionPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The policy must include an &lt;code&gt;Effect&lt;/code&gt;, &lt;code&gt;Action&lt;/code&gt; and &lt;code&gt;Principal&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Effect&lt;/code&gt; must specify &lt;code&gt;Allow&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Action&lt;/code&gt; in the policy must be &lt;code&gt;waf:UpdateWebACL&lt;/code&gt;, &lt;code&gt;waf-regional:UpdateWebACL&lt;/code&gt;, &lt;code&gt;waf:GetRuleGroup&lt;/code&gt; and &lt;code&gt;waf-regional:GetRuleGroup&lt;/code&gt; . Any extra or wildcard actions in the policy will be rejected.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The policy cannot include a &lt;code&gt;Resource&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The ARN in the request must be a valid WAF RuleGroup ARN and the RuleGroup must exist in the same region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The user making the request must be the owner of the RuleGroup.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your policy must be composed using IAM Policy version 2012-10-17.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html\&quot;&gt;IAM Policies&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;An example of a valid policy parameter is shown in the Examples section below.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putPermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidPermissionPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public Object putPermissionPolicy(String xAmzTarget, PutPermissionPolicyRequest putPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = putPermissionPolicyWithHttpInfo(xAmzTarget, putPermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches an IAM policy to the specified resource. The only supported use for this action is to share a RuleGroup across accounts.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;PutPermissionPolicy&lt;/code&gt; is subject to the following restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can attach only one policy with each &lt;code&gt;PutPermissionPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The policy must include an &lt;code&gt;Effect&lt;/code&gt;, &lt;code&gt;Action&lt;/code&gt; and &lt;code&gt;Principal&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Effect&lt;/code&gt; must specify &lt;code&gt;Allow&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Action&lt;/code&gt; in the policy must be &lt;code&gt;waf:UpdateWebACL&lt;/code&gt;, &lt;code&gt;waf-regional:UpdateWebACL&lt;/code&gt;, &lt;code&gt;waf:GetRuleGroup&lt;/code&gt; and &lt;code&gt;waf-regional:GetRuleGroup&lt;/code&gt; . Any extra or wildcard actions in the policy will be rejected.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The policy cannot include a &lt;code&gt;Resource&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The ARN in the request must be a valid WAF RuleGroup ARN and the RuleGroup must exist in the same region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The user making the request must be the owner of the RuleGroup.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your policy must be composed using IAM Policy version 2012-10-17.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html\&quot;&gt;IAM Policies&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;An example of a valid policy parameter is shown in the Examples section below.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putPermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidPermissionPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> putPermissionPolicyWithHttpInfo(String xAmzTarget, PutPermissionPolicyRequest putPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putPermissionPolicyValidateBeforeCall(xAmzTarget, putPermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches an IAM policy to the specified resource. The only supported use for this action is to share a RuleGroup across accounts.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;PutPermissionPolicy&lt;/code&gt; is subject to the following restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can attach only one policy with each &lt;code&gt;PutPermissionPolicy&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The policy must include an &lt;code&gt;Effect&lt;/code&gt;, &lt;code&gt;Action&lt;/code&gt; and &lt;code&gt;Principal&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Effect&lt;/code&gt; must specify &lt;code&gt;Allow&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Action&lt;/code&gt; in the policy must be &lt;code&gt;waf:UpdateWebACL&lt;/code&gt;, &lt;code&gt;waf-regional:UpdateWebACL&lt;/code&gt;, &lt;code&gt;waf:GetRuleGroup&lt;/code&gt; and &lt;code&gt;waf-regional:GetRuleGroup&lt;/code&gt; . Any extra or wildcard actions in the policy will be rejected.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The policy cannot include a &lt;code&gt;Resource&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The ARN in the request must be a valid WAF RuleGroup ARN and the RuleGroup must exist in the same region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The user making the request must be the owner of the RuleGroup.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your policy must be composed using IAM Policy version 2012-10-17.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html\&quot;&gt;IAM Policies&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;An example of a valid policy parameter is shown in the Examples section below.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putPermissionPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidPermissionPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPermissionPolicyAsync(String xAmzTarget, PutPermissionPolicyRequest putPermissionPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPermissionPolicyValidateBeforeCall(xAmzTarget, putPermissionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Associates tags with the specified AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \&quot;customer\&quot; and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.&lt;/p&gt; &lt;p&gt;Tagging is only available through the API, SDKs, and CLI. You can&#39;t manage or view tags through the AWS WAF Classic console. You can use this action to tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Associates tags with the specified AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \&quot;customer\&quot; and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.&lt;/p&gt; &lt;p&gt;Tagging is only available through the API, SDKs, and CLI. You can&#39;t manage or view tags through the AWS WAF Classic console. You can use this action to tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Associates tags with the specified AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \&quot;customer\&quot; and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.&lt;/p&gt; &lt;p&gt;Tagging is only available through the API, SDKs, and CLI. You can&#39;t manage or view tags through the AWS WAF Classic console. You can use this action to tag the AWS resources that you manage through AWS WAF Classic: web ACLs, rule groups, and rules. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFBadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFTagOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFTagOperationInternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateByteMatchSet
     * @param xAmzTarget  (required)
     * @param updateByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateByteMatchSetCall(String xAmzTarget, UpdateByteMatchSetRequest updateByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateByteMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateByteMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByteMatchSetValidateBeforeCall(String xAmzTarget, UpdateByteMatchSetRequest updateByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateByteMatchSet(Async)");
        }

        // verify the required parameter 'updateByteMatchSetRequest' is set
        if (updateByteMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateByteMatchSetRequest' when calling updateByteMatchSet(Async)");
        }

        return updateByteMatchSetCall(xAmzTarget, updateByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;ByteMatchTuple&lt;/a&gt; objects (filters) in a &lt;a&gt;ByteMatchSet&lt;/a&gt;. For each &lt;code&gt;ByteMatchTuple&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change a &lt;code&gt;ByteMatchSetUpdate&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The part of a web request that you want AWS WAF to inspect, such as a query string or the value of the &lt;code&gt;User-Agent&lt;/code&gt; header. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to look for. For more information, including how you specify the values for the AWS WAF API and the AWS CLI or SDKs, see &lt;code&gt;TargetString&lt;/code&gt; in the &lt;a&gt;ByteMatchTuple&lt;/a&gt; data type. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Where to look, such as at the beginning or the end of a query string.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, you can add a &lt;code&gt;ByteMatchSetUpdate&lt;/code&gt; object that matches web requests in which &lt;code&gt;User-Agent&lt;/code&gt; headers contain the string &lt;code&gt;BadBot&lt;/code&gt;. You can then configure AWS WAF to block those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;ByteMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;ByteMatchSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateByteMatchSet&lt;/code&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateByteMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByteMatchSetResponse updateByteMatchSet(String xAmzTarget, UpdateByteMatchSetRequest updateByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateByteMatchSetResponse> localVarResp = updateByteMatchSetWithHttpInfo(xAmzTarget, updateByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;ByteMatchTuple&lt;/a&gt; objects (filters) in a &lt;a&gt;ByteMatchSet&lt;/a&gt;. For each &lt;code&gt;ByteMatchTuple&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change a &lt;code&gt;ByteMatchSetUpdate&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The part of a web request that you want AWS WAF to inspect, such as a query string or the value of the &lt;code&gt;User-Agent&lt;/code&gt; header. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to look for. For more information, including how you specify the values for the AWS WAF API and the AWS CLI or SDKs, see &lt;code&gt;TargetString&lt;/code&gt; in the &lt;a&gt;ByteMatchTuple&lt;/a&gt; data type. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Where to look, such as at the beginning or the end of a query string.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, you can add a &lt;code&gt;ByteMatchSetUpdate&lt;/code&gt; object that matches web requests in which &lt;code&gt;User-Agent&lt;/code&gt; headers contain the string &lt;code&gt;BadBot&lt;/code&gt;. You can then configure AWS WAF to block those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;ByteMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;ByteMatchSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateByteMatchSet&lt;/code&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateByteMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateByteMatchSetResponse> updateByteMatchSetWithHttpInfo(String xAmzTarget, UpdateByteMatchSetRequest updateByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateByteMatchSetValidateBeforeCall(xAmzTarget, updateByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateByteMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;ByteMatchTuple&lt;/a&gt; objects (filters) in a &lt;a&gt;ByteMatchSet&lt;/a&gt;. For each &lt;code&gt;ByteMatchTuple&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change a &lt;code&gt;ByteMatchSetUpdate&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The part of a web request that you want AWS WAF to inspect, such as a query string or the value of the &lt;code&gt;User-Agent&lt;/code&gt; header. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to look for. For more information, including how you specify the values for the AWS WAF API and the AWS CLI or SDKs, see &lt;code&gt;TargetString&lt;/code&gt; in the &lt;a&gt;ByteMatchTuple&lt;/a&gt; data type. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Where to look, such as at the beginning or the end of a query string.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, you can add a &lt;code&gt;ByteMatchSetUpdate&lt;/code&gt; object that matches web requests in which &lt;code&gt;User-Agent&lt;/code&gt; headers contain the string &lt;code&gt;BadBot&lt;/code&gt;. You can then configure AWS WAF to block those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;ByteMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;ByteMatchSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateByteMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateByteMatchSet&lt;/code&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateByteMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateByteMatchSetAsync(String xAmzTarget, UpdateByteMatchSetRequest updateByteMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateByteMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByteMatchSetValidateBeforeCall(xAmzTarget, updateByteMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateByteMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGeoMatchSet
     * @param xAmzTarget  (required)
     * @param updateGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGeoMatchSetCall(String xAmzTarget, UpdateGeoMatchSetRequest updateGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGeoMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateGeoMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGeoMatchSetValidateBeforeCall(String xAmzTarget, UpdateGeoMatchSetRequest updateGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateGeoMatchSet(Async)");
        }

        // verify the required parameter 'updateGeoMatchSetRequest' is set
        if (updateGeoMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGeoMatchSetRequest' when calling updateGeoMatchSet(Async)");
        }

        return updateGeoMatchSetCall(xAmzTarget, updateGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;GeoMatchConstraint&lt;/a&gt; objects in an &lt;code&gt;GeoMatchSet&lt;/code&gt;. For each &lt;code&gt;GeoMatchConstraint&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change an &lt;code&gt;GeoMatchConstraint&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Type&lt;/code&gt;. The only valid value for &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;Country&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Value&lt;/code&gt;, which is a two character code for the country to add to the &lt;code&gt;GeoMatchConstraint&lt;/code&gt; object. Valid codes are listed in &lt;a&gt;GeoMatchConstraint$Value&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create and configure an &lt;code&gt;GeoMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateGeoMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateGeoMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateGeoMatchSet&lt;/code&gt; request to specify the country that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;When you update an &lt;code&gt;GeoMatchSet&lt;/code&gt;, you specify the country that you want to add and/or the country that you want to delete. If you want to change a country, you delete the existing country and add the new one.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateGeoMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGeoMatchSetResponse updateGeoMatchSet(String xAmzTarget, UpdateGeoMatchSetRequest updateGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateGeoMatchSetResponse> localVarResp = updateGeoMatchSetWithHttpInfo(xAmzTarget, updateGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;GeoMatchConstraint&lt;/a&gt; objects in an &lt;code&gt;GeoMatchSet&lt;/code&gt;. For each &lt;code&gt;GeoMatchConstraint&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change an &lt;code&gt;GeoMatchConstraint&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Type&lt;/code&gt;. The only valid value for &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;Country&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Value&lt;/code&gt;, which is a two character code for the country to add to the &lt;code&gt;GeoMatchConstraint&lt;/code&gt; object. Valid codes are listed in &lt;a&gt;GeoMatchConstraint$Value&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create and configure an &lt;code&gt;GeoMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateGeoMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateGeoMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateGeoMatchSet&lt;/code&gt; request to specify the country that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;When you update an &lt;code&gt;GeoMatchSet&lt;/code&gt;, you specify the country that you want to add and/or the country that you want to delete. If you want to change a country, you delete the existing country and add the new one.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateGeoMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGeoMatchSetResponse> updateGeoMatchSetWithHttpInfo(String xAmzTarget, UpdateGeoMatchSetRequest updateGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateGeoMatchSetValidateBeforeCall(xAmzTarget, updateGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateGeoMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;GeoMatchConstraint&lt;/a&gt; objects in an &lt;code&gt;GeoMatchSet&lt;/code&gt;. For each &lt;code&gt;GeoMatchConstraint&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change an &lt;code&gt;GeoMatchConstraint&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Type&lt;/code&gt;. The only valid value for &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;Country&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Value&lt;/code&gt;, which is a two character code for the country to add to the &lt;code&gt;GeoMatchConstraint&lt;/code&gt; object. Valid codes are listed in &lt;a&gt;GeoMatchConstraint$Value&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create and configure an &lt;code&gt;GeoMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateGeoMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateGeoMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateGeoMatchSet&lt;/code&gt; request to specify the country that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;When you update an &lt;code&gt;GeoMatchSet&lt;/code&gt;, you specify the country that you want to add and/or the country that you want to delete. If you want to change a country, you delete the existing country and add the new one.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateGeoMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGeoMatchSetAsync(String xAmzTarget, UpdateGeoMatchSetRequest updateGeoMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateGeoMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGeoMatchSetValidateBeforeCall(xAmzTarget, updateGeoMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateGeoMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIPSet
     * @param xAmzTarget  (required)
     * @param updateIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIPSetCall(String xAmzTarget, UpdateIPSetRequest updateIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIPSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateIPSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIPSetValidateBeforeCall(String xAmzTarget, UpdateIPSetRequest updateIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateIPSet(Async)");
        }

        // verify the required parameter 'updateIPSetRequest' is set
        if (updateIPSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateIPSetRequest' when calling updateIPSet(Async)");
        }

        return updateIPSetCall(xAmzTarget, updateIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;IPSetDescriptor&lt;/a&gt; objects in an &lt;code&gt;IPSet&lt;/code&gt;. For each &lt;code&gt;IPSetDescriptor&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change an &lt;code&gt;IPSetDescriptor&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The IP address version, &lt;code&gt;IPv4&lt;/code&gt; or &lt;code&gt;IPv6&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The IP address in CIDR notation, for example, &lt;code&gt;192.0.2.0/24&lt;/code&gt; (for the range of IP addresses from &lt;code&gt;192.0.2.0&lt;/code&gt; to &lt;code&gt;192.0.2.255&lt;/code&gt;) or &lt;code&gt;192.0.2.44/32&lt;/code&gt; (for the individual IP address &lt;code&gt;192.0.2.44&lt;/code&gt;). &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;AWS WAF supports IPv4 address ranges: /8 and any range between /16 through /32. AWS WAF supports IPv6 address ranges: /24, /32, /48, /56, /64, and /128. For more information about CIDR notation, see the Wikipedia entry &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Classless Inter-Domain Routing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;IPv6 addresses can be represented using any of the following formats:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;1111:0000:0000:0000:0000:0000:0000:0111/128&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;1111:0:0:0:0:0:0:0111/128&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;1111::0111/128&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;1111::111/128&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You use an &lt;code&gt;IPSet&lt;/code&gt; to specify which web requests you want to allow or block based on the IP addresses that the requests originated from. For example, if you&#39;re receiving a lot of requests from one or a small number of IP addresses and you want to block the requests, you can create an &lt;code&gt;IPSet&lt;/code&gt; that specifies those IP addresses, and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;IPSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateIPSet&lt;/code&gt; request to specify the IP addresses that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;When you update an &lt;code&gt;IPSet&lt;/code&gt;, you specify the IP addresses that you want to add and/or the IP addresses that you want to delete. If you want to change an IP address, you delete the existing IP address and add the new one.&lt;/p&gt; &lt;p&gt;You can insert a maximum of 1000 addresses in a single request.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateIPSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIPSetResponse updateIPSet(String xAmzTarget, UpdateIPSetRequest updateIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateIPSetResponse> localVarResp = updateIPSetWithHttpInfo(xAmzTarget, updateIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;IPSetDescriptor&lt;/a&gt; objects in an &lt;code&gt;IPSet&lt;/code&gt;. For each &lt;code&gt;IPSetDescriptor&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change an &lt;code&gt;IPSetDescriptor&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The IP address version, &lt;code&gt;IPv4&lt;/code&gt; or &lt;code&gt;IPv6&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The IP address in CIDR notation, for example, &lt;code&gt;192.0.2.0/24&lt;/code&gt; (for the range of IP addresses from &lt;code&gt;192.0.2.0&lt;/code&gt; to &lt;code&gt;192.0.2.255&lt;/code&gt;) or &lt;code&gt;192.0.2.44/32&lt;/code&gt; (for the individual IP address &lt;code&gt;192.0.2.44&lt;/code&gt;). &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;AWS WAF supports IPv4 address ranges: /8 and any range between /16 through /32. AWS WAF supports IPv6 address ranges: /24, /32, /48, /56, /64, and /128. For more information about CIDR notation, see the Wikipedia entry &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Classless Inter-Domain Routing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;IPv6 addresses can be represented using any of the following formats:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;1111:0000:0000:0000:0000:0000:0000:0111/128&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;1111:0:0:0:0:0:0:0111/128&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;1111::0111/128&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;1111::111/128&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You use an &lt;code&gt;IPSet&lt;/code&gt; to specify which web requests you want to allow or block based on the IP addresses that the requests originated from. For example, if you&#39;re receiving a lot of requests from one or a small number of IP addresses and you want to block the requests, you can create an &lt;code&gt;IPSet&lt;/code&gt; that specifies those IP addresses, and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;IPSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateIPSet&lt;/code&gt; request to specify the IP addresses that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;When you update an &lt;code&gt;IPSet&lt;/code&gt;, you specify the IP addresses that you want to add and/or the IP addresses that you want to delete. If you want to change an IP address, you delete the existing IP address and add the new one.&lt;/p&gt; &lt;p&gt;You can insert a maximum of 1000 addresses in a single request.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateIPSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateIPSetResponse> updateIPSetWithHttpInfo(String xAmzTarget, UpdateIPSetRequest updateIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateIPSetValidateBeforeCall(xAmzTarget, updateIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateIPSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;IPSetDescriptor&lt;/a&gt; objects in an &lt;code&gt;IPSet&lt;/code&gt;. For each &lt;code&gt;IPSetDescriptor&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change an &lt;code&gt;IPSetDescriptor&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The IP address version, &lt;code&gt;IPv4&lt;/code&gt; or &lt;code&gt;IPv6&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The IP address in CIDR notation, for example, &lt;code&gt;192.0.2.0/24&lt;/code&gt; (for the range of IP addresses from &lt;code&gt;192.0.2.0&lt;/code&gt; to &lt;code&gt;192.0.2.255&lt;/code&gt;) or &lt;code&gt;192.0.2.44/32&lt;/code&gt; (for the individual IP address &lt;code&gt;192.0.2.44&lt;/code&gt;). &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;AWS WAF supports IPv4 address ranges: /8 and any range between /16 through /32. AWS WAF supports IPv6 address ranges: /24, /32, /48, /56, /64, and /128. For more information about CIDR notation, see the Wikipedia entry &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Classless Inter-Domain Routing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;IPv6 addresses can be represented using any of the following formats:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;1111:0000:0000:0000:0000:0000:0000:0111/128&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;1111:0:0:0:0:0:0:0111/128&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;1111::0111/128&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;1111::111/128&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You use an &lt;code&gt;IPSet&lt;/code&gt; to specify which web requests you want to allow or block based on the IP addresses that the requests originated from. For example, if you&#39;re receiving a lot of requests from one or a small number of IP addresses and you want to block the requests, you can create an &lt;code&gt;IPSet&lt;/code&gt; that specifies those IP addresses, and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;IPSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateIPSet&lt;/code&gt; request to specify the IP addresses that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;When you update an &lt;code&gt;IPSet&lt;/code&gt;, you specify the IP addresses that you want to add and/or the IP addresses that you want to delete. If you want to change an IP address, you delete the existing IP address and add the new one.&lt;/p&gt; &lt;p&gt;You can insert a maximum of 1000 addresses in a single request.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateIPSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIPSetAsync(String xAmzTarget, UpdateIPSetRequest updateIPSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateIPSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIPSetValidateBeforeCall(xAmzTarget, updateIPSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateIPSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRateBasedRule
     * @param xAmzTarget  (required)
     * @param updateRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRateBasedRuleCall(String xAmzTarget, UpdateRateBasedRuleRequest updateRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRateBasedRuleRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateRateBasedRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRateBasedRuleValidateBeforeCall(String xAmzTarget, UpdateRateBasedRuleRequest updateRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateRateBasedRule(Async)");
        }

        // verify the required parameter 'updateRateBasedRuleRequest' is set
        if (updateRateBasedRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRateBasedRuleRequest' when calling updateRateBasedRule(Async)");
        }

        return updateRateBasedRuleCall(xAmzTarget, updateRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;Predicate&lt;/a&gt; objects in a rule and updates the &lt;code&gt;RateLimit&lt;/code&gt; in the rule. &lt;/p&gt; &lt;p&gt;Each &lt;code&gt;Predicate&lt;/code&gt; object identifies a predicate, such as a &lt;a&gt;ByteMatchSet&lt;/a&gt; or an &lt;a&gt;IPSet&lt;/a&gt;, that specifies the web requests that you want to block or count. The &lt;code&gt;RateLimit&lt;/code&gt; specifies the number of requests every five minutes that triggers the rule.&lt;/p&gt; &lt;p&gt;If you add more than one predicate to a &lt;code&gt;RateBasedRule&lt;/code&gt;, a request must match all the predicates and exceed the &lt;code&gt;RateLimit&lt;/code&gt; to be counted or blocked. For example, suppose you add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44/32&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;You then add the &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to block requests that satisfy the rule. For a request to be blocked, it must come from the IP address 192.0.2.44 &lt;i&gt;and&lt;/i&gt; the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt;. Further, requests that match these two conditions much be received at a rate of more than 1,000 every five minutes. If the rate drops below this limit, AWS WAF no longer blocks the requests.&lt;/p&gt; &lt;p&gt;As a second example, suppose you want to limit requests to a particular page on your site. To do this, you could add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; with &lt;code&gt;FieldToMatch&lt;/code&gt; of &lt;code&gt;URI&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;PositionalConstraint&lt;/code&gt; of &lt;code&gt;STARTS_WITH&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;TargetString&lt;/code&gt; of &lt;code&gt;login&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;By adding this &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, you could limit requests to your login page without affecting the rest of your site.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateRateBasedRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRateBasedRuleResponse updateRateBasedRule(String xAmzTarget, UpdateRateBasedRuleRequest updateRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateRateBasedRuleResponse> localVarResp = updateRateBasedRuleWithHttpInfo(xAmzTarget, updateRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;Predicate&lt;/a&gt; objects in a rule and updates the &lt;code&gt;RateLimit&lt;/code&gt; in the rule. &lt;/p&gt; &lt;p&gt;Each &lt;code&gt;Predicate&lt;/code&gt; object identifies a predicate, such as a &lt;a&gt;ByteMatchSet&lt;/a&gt; or an &lt;a&gt;IPSet&lt;/a&gt;, that specifies the web requests that you want to block or count. The &lt;code&gt;RateLimit&lt;/code&gt; specifies the number of requests every five minutes that triggers the rule.&lt;/p&gt; &lt;p&gt;If you add more than one predicate to a &lt;code&gt;RateBasedRule&lt;/code&gt;, a request must match all the predicates and exceed the &lt;code&gt;RateLimit&lt;/code&gt; to be counted or blocked. For example, suppose you add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44/32&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;You then add the &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to block requests that satisfy the rule. For a request to be blocked, it must come from the IP address 192.0.2.44 &lt;i&gt;and&lt;/i&gt; the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt;. Further, requests that match these two conditions much be received at a rate of more than 1,000 every five minutes. If the rate drops below this limit, AWS WAF no longer blocks the requests.&lt;/p&gt; &lt;p&gt;As a second example, suppose you want to limit requests to a particular page on your site. To do this, you could add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; with &lt;code&gt;FieldToMatch&lt;/code&gt; of &lt;code&gt;URI&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;PositionalConstraint&lt;/code&gt; of &lt;code&gt;STARTS_WITH&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;TargetString&lt;/code&gt; of &lt;code&gt;login&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;By adding this &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, you could limit requests to your login page without affecting the rest of your site.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateRateBasedRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRateBasedRuleResponse> updateRateBasedRuleWithHttpInfo(String xAmzTarget, UpdateRateBasedRuleRequest updateRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRateBasedRuleValidateBeforeCall(xAmzTarget, updateRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateRateBasedRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;Predicate&lt;/a&gt; objects in a rule and updates the &lt;code&gt;RateLimit&lt;/code&gt; in the rule. &lt;/p&gt; &lt;p&gt;Each &lt;code&gt;Predicate&lt;/code&gt; object identifies a predicate, such as a &lt;a&gt;ByteMatchSet&lt;/a&gt; or an &lt;a&gt;IPSet&lt;/a&gt;, that specifies the web requests that you want to block or count. The &lt;code&gt;RateLimit&lt;/code&gt; specifies the number of requests every five minutes that triggers the rule.&lt;/p&gt; &lt;p&gt;If you add more than one predicate to a &lt;code&gt;RateBasedRule&lt;/code&gt;, a request must match all the predicates and exceed the &lt;code&gt;RateLimit&lt;/code&gt; to be counted or blocked. For example, suppose you add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44/32&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;You then add the &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to block requests that satisfy the rule. For a request to be blocked, it must come from the IP address 192.0.2.44 &lt;i&gt;and&lt;/i&gt; the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt;. Further, requests that match these two conditions much be received at a rate of more than 1,000 every five minutes. If the rate drops below this limit, AWS WAF no longer blocks the requests.&lt;/p&gt; &lt;p&gt;As a second example, suppose you want to limit requests to a particular page on your site. To do this, you could add the following to a &lt;code&gt;RateBasedRule&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; with &lt;code&gt;FieldToMatch&lt;/code&gt; of &lt;code&gt;URI&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;PositionalConstraint&lt;/code&gt; of &lt;code&gt;STARTS_WITH&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;TargetString&lt;/code&gt; of &lt;code&gt;login&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Further, you specify a &lt;code&gt;RateLimit&lt;/code&gt; of 1,000.&lt;/p&gt; &lt;p&gt;By adding this &lt;code&gt;RateBasedRule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, you could limit requests to your login page without affecting the rest of your site.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRateBasedRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRateBasedRuleAsync(String xAmzTarget, UpdateRateBasedRuleRequest updateRateBasedRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateRateBasedRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRateBasedRuleValidateBeforeCall(xAmzTarget, updateRateBasedRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateRateBasedRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRegexMatchSet
     * @param xAmzTarget  (required)
     * @param updateRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegexMatchSetCall(String xAmzTarget, UpdateRegexMatchSetRequest updateRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRegexMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateRegexMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegexMatchSetValidateBeforeCall(String xAmzTarget, UpdateRegexMatchSetRequest updateRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateRegexMatchSet(Async)");
        }

        // verify the required parameter 'updateRegexMatchSetRequest' is set
        if (updateRegexMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRegexMatchSetRequest' when calling updateRegexMatchSet(Async)");
        }

        return updateRegexMatchSetCall(xAmzTarget, updateRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;RegexMatchTuple&lt;/a&gt; objects (filters) in a &lt;a&gt;RegexMatchSet&lt;/a&gt;. For each &lt;code&gt;RegexMatchSetUpdate&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change a &lt;code&gt;RegexMatchSetUpdate&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The part of a web request that you want AWS WAF to inspectupdate, such as a query string or the value of the &lt;code&gt;User-Agent&lt;/code&gt; header. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The identifier of the pattern (a regular expression) that you want AWS WAF to look for. For more information, see &lt;a&gt;RegexPatternSet&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For example, you can create a &lt;code&gt;RegexPatternSet&lt;/code&gt; that matches any requests with &lt;code&gt;User-Agent&lt;/code&gt; headers that contain the string &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;RegexMatchSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateRegexMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRegexMatchSet&lt;/code&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the identifier of the &lt;code&gt;RegexPatternSet&lt;/code&gt; that contain the regular expression patters you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateRegexMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRegexMatchSetResponse updateRegexMatchSet(String xAmzTarget, UpdateRegexMatchSetRequest updateRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateRegexMatchSetResponse> localVarResp = updateRegexMatchSetWithHttpInfo(xAmzTarget, updateRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;RegexMatchTuple&lt;/a&gt; objects (filters) in a &lt;a&gt;RegexMatchSet&lt;/a&gt;. For each &lt;code&gt;RegexMatchSetUpdate&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change a &lt;code&gt;RegexMatchSetUpdate&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The part of a web request that you want AWS WAF to inspectupdate, such as a query string or the value of the &lt;code&gt;User-Agent&lt;/code&gt; header. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The identifier of the pattern (a regular expression) that you want AWS WAF to look for. For more information, see &lt;a&gt;RegexPatternSet&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For example, you can create a &lt;code&gt;RegexPatternSet&lt;/code&gt; that matches any requests with &lt;code&gt;User-Agent&lt;/code&gt; headers that contain the string &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;RegexMatchSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateRegexMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRegexMatchSet&lt;/code&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the identifier of the &lt;code&gt;RegexPatternSet&lt;/code&gt; that contain the regular expression patters you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateRegexMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRegexMatchSetResponse> updateRegexMatchSetWithHttpInfo(String xAmzTarget, UpdateRegexMatchSetRequest updateRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRegexMatchSetValidateBeforeCall(xAmzTarget, updateRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateRegexMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;RegexMatchTuple&lt;/a&gt; objects (filters) in a &lt;a&gt;RegexMatchSet&lt;/a&gt;. For each &lt;code&gt;RegexMatchSetUpdate&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change a &lt;code&gt;RegexMatchSetUpdate&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The part of a web request that you want AWS WAF to inspectupdate, such as a query string or the value of the &lt;code&gt;User-Agent&lt;/code&gt; header. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The identifier of the pattern (a regular expression) that you want AWS WAF to look for. For more information, see &lt;a&gt;RegexPatternSet&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether to perform any conversions on the request, such as converting it to lowercase, before inspecting it for the specified string.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For example, you can create a &lt;code&gt;RegexPatternSet&lt;/code&gt; that matches any requests with &lt;code&gt;User-Agent&lt;/code&gt; headers that contain the string &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. You can then configure AWS WAF to reject those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;RegexMatchSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateRegexMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexMatchSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRegexMatchSet&lt;/code&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the identifier of the &lt;code&gt;RegexPatternSet&lt;/code&gt; that contain the regular expression patters you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRegexMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFDisallowedNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegexMatchSetAsync(String xAmzTarget, UpdateRegexMatchSetRequest updateRegexMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateRegexMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegexMatchSetValidateBeforeCall(xAmzTarget, updateRegexMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateRegexMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRegexPatternSet
     * @param xAmzTarget  (required)
     * @param updateRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFInvalidRegexPatternException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegexPatternSetCall(String xAmzTarget, UpdateRegexPatternSetRequest updateRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRegexPatternSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateRegexPatternSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegexPatternSetValidateBeforeCall(String xAmzTarget, UpdateRegexPatternSetRequest updateRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateRegexPatternSet(Async)");
        }

        // verify the required parameter 'updateRegexPatternSetRequest' is set
        if (updateRegexPatternSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRegexPatternSetRequest' when calling updateRegexPatternSet(Async)");
        }

        return updateRegexPatternSetCall(xAmzTarget, updateRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;code&gt;RegexPatternString&lt;/code&gt; objects in a &lt;a&gt;RegexPatternSet&lt;/a&gt;. For each &lt;code&gt;RegexPatternString&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the &lt;code&gt;RegexPatternString&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The regular expression pattern that you want to insert or delete. For more information, see &lt;a&gt;RegexPatternSet&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For example, you can create a &lt;code&gt;RegexPatternString&lt;/code&gt; such as &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. AWS WAF will match this &lt;code&gt;RegexPatternString&lt;/code&gt; to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;BadBot&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;BadB0t&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;B@dBot&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;B@dB0t&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexPatternSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;RegexPatternSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateRegexPatternSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRegexPatternSet&lt;/code&gt; request to specify the regular expression pattern that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateRegexPatternSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFInvalidRegexPatternException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRegexPatternSetResponse updateRegexPatternSet(String xAmzTarget, UpdateRegexPatternSetRequest updateRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateRegexPatternSetResponse> localVarResp = updateRegexPatternSetWithHttpInfo(xAmzTarget, updateRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;code&gt;RegexPatternString&lt;/code&gt; objects in a &lt;a&gt;RegexPatternSet&lt;/a&gt;. For each &lt;code&gt;RegexPatternString&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the &lt;code&gt;RegexPatternString&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The regular expression pattern that you want to insert or delete. For more information, see &lt;a&gt;RegexPatternSet&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For example, you can create a &lt;code&gt;RegexPatternString&lt;/code&gt; such as &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. AWS WAF will match this &lt;code&gt;RegexPatternString&lt;/code&gt; to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;BadBot&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;BadB0t&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;B@dBot&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;B@dB0t&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexPatternSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;RegexPatternSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateRegexPatternSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRegexPatternSet&lt;/code&gt; request to specify the regular expression pattern that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateRegexPatternSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFInvalidRegexPatternException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRegexPatternSetResponse> updateRegexPatternSetWithHttpInfo(String xAmzTarget, UpdateRegexPatternSetRequest updateRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRegexPatternSetValidateBeforeCall(xAmzTarget, updateRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateRegexPatternSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;code&gt;RegexPatternString&lt;/code&gt; objects in a &lt;a&gt;RegexPatternSet&lt;/a&gt;. For each &lt;code&gt;RegexPatternString&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the &lt;code&gt;RegexPatternString&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The regular expression pattern that you want to insert or delete. For more information, see &lt;a&gt;RegexPatternSet&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For example, you can create a &lt;code&gt;RegexPatternString&lt;/code&gt; such as &lt;code&gt;B[a@]dB[o0]t&lt;/code&gt;. AWS WAF will match this &lt;code&gt;RegexPatternString&lt;/code&gt; to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;BadBot&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;BadB0t&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;B@dBot&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;B@dB0t&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create and configure a &lt;code&gt;RegexPatternSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;RegexPatternSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateRegexPatternSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateRegexPatternSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRegexPatternSet&lt;/code&gt; request to specify the regular expression pattern that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRegexPatternSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFInvalidRegexPatternException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegexPatternSetAsync(String xAmzTarget, UpdateRegexPatternSetRequest updateRegexPatternSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateRegexPatternSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegexPatternSetValidateBeforeCall(xAmzTarget, updateRegexPatternSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateRegexPatternSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRule
     * @param xAmzTarget  (required)
     * @param updateRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleCall(String xAmzTarget, UpdateRuleRequest updateRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRuleRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateRule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRuleValidateBeforeCall(String xAmzTarget, UpdateRuleRequest updateRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateRule(Async)");
        }

        // verify the required parameter 'updateRuleRequest' is set
        if (updateRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRuleRequest' when calling updateRule(Async)");
        }

        return updateRuleCall(xAmzTarget, updateRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;Predicate&lt;/a&gt; objects in a &lt;code&gt;Rule&lt;/code&gt;. Each &lt;code&gt;Predicate&lt;/code&gt; object identifies a predicate, such as a &lt;a&gt;ByteMatchSet&lt;/a&gt; or an &lt;a&gt;IPSet&lt;/a&gt;, that specifies the web requests that you want to allow, block, or count. If you add more than one predicate to a &lt;code&gt;Rule&lt;/code&gt;, a request must match all of the specifications to be allowed, blocked, or counted. For example, suppose that you add the following to a &lt;code&gt;Rule&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches the value &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You then add the &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to block requests that satisfy the &lt;code&gt;Rule&lt;/code&gt;. For a request to be blocked, the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt; &lt;i&gt;and&lt;/i&gt; the request must originate from the IP address 192.0.2.44.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;Rule&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the &lt;code&gt;Rule&lt;/code&gt;. See &lt;a&gt;CreateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRule&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRule&lt;/code&gt; request to add predicates to the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;Rule&lt;/code&gt;. See &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you want to replace one &lt;code&gt;ByteMatchSet&lt;/code&gt; or &lt;code&gt;IPSet&lt;/code&gt; with another, you delete the existing one and add the new one.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRuleResponse updateRule(String xAmzTarget, UpdateRuleRequest updateRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateRuleResponse> localVarResp = updateRuleWithHttpInfo(xAmzTarget, updateRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;Predicate&lt;/a&gt; objects in a &lt;code&gt;Rule&lt;/code&gt;. Each &lt;code&gt;Predicate&lt;/code&gt; object identifies a predicate, such as a &lt;a&gt;ByteMatchSet&lt;/a&gt; or an &lt;a&gt;IPSet&lt;/a&gt;, that specifies the web requests that you want to allow, block, or count. If you add more than one predicate to a &lt;code&gt;Rule&lt;/code&gt;, a request must match all of the specifications to be allowed, blocked, or counted. For example, suppose that you add the following to a &lt;code&gt;Rule&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches the value &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You then add the &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to block requests that satisfy the &lt;code&gt;Rule&lt;/code&gt;. For a request to be blocked, the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt; &lt;i&gt;and&lt;/i&gt; the request must originate from the IP address 192.0.2.44.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;Rule&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the &lt;code&gt;Rule&lt;/code&gt;. See &lt;a&gt;CreateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRule&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRule&lt;/code&gt; request to add predicates to the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;Rule&lt;/code&gt;. See &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you want to replace one &lt;code&gt;ByteMatchSet&lt;/code&gt; or &lt;code&gt;IPSet&lt;/code&gt; with another, you delete the existing one and add the new one.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRuleResponse> updateRuleWithHttpInfo(String xAmzTarget, UpdateRuleRequest updateRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(xAmzTarget, updateRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;Predicate&lt;/a&gt; objects in a &lt;code&gt;Rule&lt;/code&gt;. Each &lt;code&gt;Predicate&lt;/code&gt; object identifies a predicate, such as a &lt;a&gt;ByteMatchSet&lt;/a&gt; or an &lt;a&gt;IPSet&lt;/a&gt;, that specifies the web requests that you want to allow, block, or count. If you add more than one predicate to a &lt;code&gt;Rule&lt;/code&gt;, a request must match all of the specifications to be allowed, blocked, or counted. For example, suppose that you add the following to a &lt;code&gt;Rule&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ByteMatchSet&lt;/code&gt; that matches the value &lt;code&gt;BadBot&lt;/code&gt; in the &lt;code&gt;User-Agent&lt;/code&gt; header&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An &lt;code&gt;IPSet&lt;/code&gt; that matches the IP address &lt;code&gt;192.0.2.44&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You then add the &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt; and specify that you want to block requests that satisfy the &lt;code&gt;Rule&lt;/code&gt;. For a request to be blocked, the &lt;code&gt;User-Agent&lt;/code&gt; header in the request must contain the value &lt;code&gt;BadBot&lt;/code&gt; &lt;i&gt;and&lt;/i&gt; the request must originate from the IP address 192.0.2.44.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;Rule&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the &lt;code&gt;Rule&lt;/code&gt;. See &lt;a&gt;CreateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRule&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRule&lt;/code&gt; request to add predicates to the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;Rule&lt;/code&gt;. See &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you want to replace one &lt;code&gt;ByteMatchSet&lt;/code&gt; or &lt;code&gt;IPSet&lt;/code&gt; with another, you delete the existing one and add the new one.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleAsync(String xAmzTarget, UpdateRuleRequest updateRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(xAmzTarget, updateRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRuleGroup
     * @param xAmzTarget  (required)
     * @param updateRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleGroupCall(String xAmzTarget, UpdateRuleGroupRequest updateRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRuleGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateRuleGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRuleGroupValidateBeforeCall(String xAmzTarget, UpdateRuleGroupRequest updateRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateRuleGroup(Async)");
        }

        // verify the required parameter 'updateRuleGroupRequest' is set
        if (updateRuleGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRuleGroupRequest' when calling updateRuleGroup(Async)");
        }

        return updateRuleGroupCall(xAmzTarget, updateRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;ActivatedRule&lt;/a&gt; objects in a &lt;code&gt;RuleGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can only insert &lt;code&gt;REGULAR&lt;/code&gt; rules into a rule group.&lt;/p&gt; &lt;p&gt;You can have a maximum of ten rules per rule group.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RuleGroup&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;RuleGroup&lt;/code&gt;. See &lt;a&gt;CreateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRuleGroup&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRuleGroup&lt;/code&gt; request to add &lt;code&gt;Rules&lt;/code&gt; to the &lt;code&gt;RuleGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;RuleGroup&lt;/code&gt;. See &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you want to replace one &lt;code&gt;Rule&lt;/code&gt; with another, you delete the existing one and add the new one.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateRuleGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRuleGroupResponse updateRuleGroup(String xAmzTarget, UpdateRuleGroupRequest updateRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateRuleGroupResponse> localVarResp = updateRuleGroupWithHttpInfo(xAmzTarget, updateRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;ActivatedRule&lt;/a&gt; objects in a &lt;code&gt;RuleGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can only insert &lt;code&gt;REGULAR&lt;/code&gt; rules into a rule group.&lt;/p&gt; &lt;p&gt;You can have a maximum of ten rules per rule group.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RuleGroup&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;RuleGroup&lt;/code&gt;. See &lt;a&gt;CreateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRuleGroup&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRuleGroup&lt;/code&gt; request to add &lt;code&gt;Rules&lt;/code&gt; to the &lt;code&gt;RuleGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;RuleGroup&lt;/code&gt;. See &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you want to replace one &lt;code&gt;Rule&lt;/code&gt; with another, you delete the existing one and add the new one.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateRuleGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRuleGroupResponse> updateRuleGroupWithHttpInfo(String xAmzTarget, UpdateRuleGroupRequest updateRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRuleGroupValidateBeforeCall(xAmzTarget, updateRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateRuleGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;ActivatedRule&lt;/a&gt; objects in a &lt;code&gt;RuleGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can only insert &lt;code&gt;REGULAR&lt;/code&gt; rules into a rule group.&lt;/p&gt; &lt;p&gt;You can have a maximum of ten rules per rule group.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;RuleGroup&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;RuleGroup&lt;/code&gt;. See &lt;a&gt;CreateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateRuleGroup&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateRuleGroup&lt;/code&gt; request to add &lt;code&gt;Rules&lt;/code&gt; to the &lt;code&gt;RuleGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update a &lt;code&gt;WebACL&lt;/code&gt; that contains the &lt;code&gt;RuleGroup&lt;/code&gt;. See &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you want to replace one &lt;code&gt;Rule&lt;/code&gt; with another, you delete the existing one and add the new one.&lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateRuleGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleGroupAsync(String xAmzTarget, UpdateRuleGroupRequest updateRuleGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateRuleGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRuleGroupValidateBeforeCall(xAmzTarget, updateRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateRuleGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSizeConstraintSet
     * @param xAmzTarget  (required)
     * @param updateSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSizeConstraintSetCall(String xAmzTarget, UpdateSizeConstraintSetRequest updateSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSizeConstraintSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateSizeConstraintSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSizeConstraintSetValidateBeforeCall(String xAmzTarget, UpdateSizeConstraintSetRequest updateSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateSizeConstraintSet(Async)");
        }

        // verify the required parameter 'updateSizeConstraintSetRequest' is set
        if (updateSizeConstraintSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSizeConstraintSetRequest' when calling updateSizeConstraintSet(Async)");
        }

        return updateSizeConstraintSetCall(xAmzTarget, updateSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;SizeConstraint&lt;/a&gt; objects (filters) in a &lt;a&gt;SizeConstraintSet&lt;/a&gt;. For each &lt;code&gt;SizeConstraint&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change a &lt;code&gt;SizeConstraintSetUpdate&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The part of a web request that you want AWS WAF to evaluate, such as the length of a query string or the length of the &lt;code&gt;User-Agent&lt;/code&gt; header.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether to perform any transformations on the request, such as converting it to lowercase, before checking its length. Note that transformations of the request body are not supported because the AWS resource forwards only the first &lt;code&gt;8192&lt;/code&gt; bytes of your request to AWS WAF.&lt;/p&gt; &lt;p&gt;You can only specify a single type of TextTransformation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ComparisonOperator&lt;/code&gt; used for evaluating the selected part of the request against the specified &lt;code&gt;Size&lt;/code&gt;, such as equals, greater than, less than, and so on.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The length, in bytes, that you want AWS WAF to watch for in selected part of the request. The length is computed after applying the transformation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, you can add a &lt;code&gt;SizeConstraintSetUpdate&lt;/code&gt; object that matches web requests in which the length of the &lt;code&gt;User-Agent&lt;/code&gt; header is greater than 100 bytes. You can then configure AWS WAF to block those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SizeConstraintSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;SizeConstraintSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateSizeConstraintSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateSizeConstraintSet&lt;/code&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateSizeConstraintSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSizeConstraintSetResponse updateSizeConstraintSet(String xAmzTarget, UpdateSizeConstraintSetRequest updateSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateSizeConstraintSetResponse> localVarResp = updateSizeConstraintSetWithHttpInfo(xAmzTarget, updateSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;SizeConstraint&lt;/a&gt; objects (filters) in a &lt;a&gt;SizeConstraintSet&lt;/a&gt;. For each &lt;code&gt;SizeConstraint&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change a &lt;code&gt;SizeConstraintSetUpdate&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The part of a web request that you want AWS WAF to evaluate, such as the length of a query string or the length of the &lt;code&gt;User-Agent&lt;/code&gt; header.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether to perform any transformations on the request, such as converting it to lowercase, before checking its length. Note that transformations of the request body are not supported because the AWS resource forwards only the first &lt;code&gt;8192&lt;/code&gt; bytes of your request to AWS WAF.&lt;/p&gt; &lt;p&gt;You can only specify a single type of TextTransformation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ComparisonOperator&lt;/code&gt; used for evaluating the selected part of the request against the specified &lt;code&gt;Size&lt;/code&gt;, such as equals, greater than, less than, and so on.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The length, in bytes, that you want AWS WAF to watch for in selected part of the request. The length is computed after applying the transformation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, you can add a &lt;code&gt;SizeConstraintSetUpdate&lt;/code&gt; object that matches web requests in which the length of the &lt;code&gt;User-Agent&lt;/code&gt; header is greater than 100 bytes. You can then configure AWS WAF to block those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SizeConstraintSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;SizeConstraintSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateSizeConstraintSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateSizeConstraintSet&lt;/code&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateSizeConstraintSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSizeConstraintSetResponse> updateSizeConstraintSetWithHttpInfo(String xAmzTarget, UpdateSizeConstraintSetRequest updateSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSizeConstraintSetValidateBeforeCall(xAmzTarget, updateSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateSizeConstraintSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;SizeConstraint&lt;/a&gt; objects (filters) in a &lt;a&gt;SizeConstraintSet&lt;/a&gt;. For each &lt;code&gt;SizeConstraint&lt;/code&gt; object, you specify the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether to insert or delete the object from the array. If you want to change a &lt;code&gt;SizeConstraintSetUpdate&lt;/code&gt; object, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The part of a web request that you want AWS WAF to evaluate, such as the length of a query string or the length of the &lt;code&gt;User-Agent&lt;/code&gt; header.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether to perform any transformations on the request, such as converting it to lowercase, before checking its length. Note that transformations of the request body are not supported because the AWS resource forwards only the first &lt;code&gt;8192&lt;/code&gt; bytes of your request to AWS WAF.&lt;/p&gt; &lt;p&gt;You can only specify a single type of TextTransformation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;ComparisonOperator&lt;/code&gt; used for evaluating the selected part of the request against the specified &lt;code&gt;Size&lt;/code&gt;, such as equals, greater than, less than, and so on.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The length, in bytes, that you want AWS WAF to watch for in selected part of the request. The length is computed after applying the transformation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, you can add a &lt;code&gt;SizeConstraintSetUpdate&lt;/code&gt; object that matches web requests in which the length of the &lt;code&gt;User-Agent&lt;/code&gt; header is greater than 100 bytes. You can then configure AWS WAF to block those requests.&lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SizeConstraintSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;SizeConstraintSet.&lt;/code&gt; For more information, see &lt;a&gt;CreateSizeConstraintSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;code&gt;UpdateSizeConstraintSet&lt;/code&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateSizeConstraintSet&lt;/code&gt; request to specify the part of the request that you want AWS WAF to inspect (for example, the header or the URI) and the value that you want AWS WAF to watch for.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateSizeConstraintSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSizeConstraintSetAsync(String xAmzTarget, UpdateSizeConstraintSetRequest updateSizeConstraintSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateSizeConstraintSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSizeConstraintSetValidateBeforeCall(xAmzTarget, updateSizeConstraintSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateSizeConstraintSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSqlInjectionMatchSet
     * @param xAmzTarget  (required)
     * @param updateSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSqlInjectionMatchSetCall(String xAmzTarget, UpdateSqlInjectionMatchSetRequest updateSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSqlInjectionMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateSqlInjectionMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSqlInjectionMatchSetValidateBeforeCall(String xAmzTarget, UpdateSqlInjectionMatchSetRequest updateSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateSqlInjectionMatchSet(Async)");
        }

        // verify the required parameter 'updateSqlInjectionMatchSetRequest' is set
        if (updateSqlInjectionMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSqlInjectionMatchSetRequest' when calling updateSqlInjectionMatchSet(Async)");
        }

        return updateSqlInjectionMatchSetCall(xAmzTarget, updateSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;SqlInjectionMatchTuple&lt;/a&gt; objects (filters) in a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;. For each &lt;code&gt;SqlInjectionMatchTuple&lt;/code&gt; object, you specify the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Action&lt;/code&gt;: Whether to insert the object into or delete the object from the array. To change a &lt;code&gt;SqlInjectionMatchTuple&lt;/code&gt;, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FieldToMatch&lt;/code&gt;: The part of web requests that you want AWS WAF to inspect and, if you want AWS WAF to inspect a header or custom query parameter, the name of the header or parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TextTransformation&lt;/code&gt;: Which text transformation, if any, to perform on the web request before inspecting the request for snippets of malicious SQL code.&lt;/p&gt; &lt;p&gt;You can only specify a single type of TextTransformation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You use &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; objects to specify which CloudFront requests that you want to allow, block, or count. For example, if you&#39;re receiving requests that contain snippets of SQL code in the query string and you want to block the requests, you can create a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; with the applicable settings, and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateSqlInjectionMatchSet&lt;/code&gt; request to specify the parts of web requests that you want AWS WAF to inspect for snippets of SQL code.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateSqlInjectionMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSqlInjectionMatchSetResponse updateSqlInjectionMatchSet(String xAmzTarget, UpdateSqlInjectionMatchSetRequest updateSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateSqlInjectionMatchSetResponse> localVarResp = updateSqlInjectionMatchSetWithHttpInfo(xAmzTarget, updateSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;SqlInjectionMatchTuple&lt;/a&gt; objects (filters) in a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;. For each &lt;code&gt;SqlInjectionMatchTuple&lt;/code&gt; object, you specify the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Action&lt;/code&gt;: Whether to insert the object into or delete the object from the array. To change a &lt;code&gt;SqlInjectionMatchTuple&lt;/code&gt;, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FieldToMatch&lt;/code&gt;: The part of web requests that you want AWS WAF to inspect and, if you want AWS WAF to inspect a header or custom query parameter, the name of the header or parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TextTransformation&lt;/code&gt;: Which text transformation, if any, to perform on the web request before inspecting the request for snippets of malicious SQL code.&lt;/p&gt; &lt;p&gt;You can only specify a single type of TextTransformation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You use &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; objects to specify which CloudFront requests that you want to allow, block, or count. For example, if you&#39;re receiving requests that contain snippets of SQL code in the query string and you want to block the requests, you can create a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; with the applicable settings, and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateSqlInjectionMatchSet&lt;/code&gt; request to specify the parts of web requests that you want AWS WAF to inspect for snippets of SQL code.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateSqlInjectionMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSqlInjectionMatchSetResponse> updateSqlInjectionMatchSetWithHttpInfo(String xAmzTarget, UpdateSqlInjectionMatchSetRequest updateSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSqlInjectionMatchSetValidateBeforeCall(xAmzTarget, updateSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateSqlInjectionMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;SqlInjectionMatchTuple&lt;/a&gt; objects (filters) in a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;. For each &lt;code&gt;SqlInjectionMatchTuple&lt;/code&gt; object, you specify the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Action&lt;/code&gt;: Whether to insert the object into or delete the object from the array. To change a &lt;code&gt;SqlInjectionMatchTuple&lt;/code&gt;, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FieldToMatch&lt;/code&gt;: The part of web requests that you want AWS WAF to inspect and, if you want AWS WAF to inspect a header or custom query parameter, the name of the header or parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TextTransformation&lt;/code&gt;: Which text transformation, if any, to perform on the web request before inspecting the request for snippets of malicious SQL code.&lt;/p&gt; &lt;p&gt;You can only specify a single type of TextTransformation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You use &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; objects to specify which CloudFront requests that you want to allow, block, or count. For example, if you&#39;re receiving requests that contain snippets of SQL code in the query string and you want to block the requests, you can create a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt; with the applicable settings, and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure a &lt;code&gt;SqlInjectionMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateSqlInjectionMatchSet&lt;/code&gt; request to specify the parts of web requests that you want AWS WAF to inspect for snippets of SQL code.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateSqlInjectionMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSqlInjectionMatchSetAsync(String xAmzTarget, UpdateSqlInjectionMatchSetRequest updateSqlInjectionMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateSqlInjectionMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSqlInjectionMatchSetValidateBeforeCall(xAmzTarget, updateSqlInjectionMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateSqlInjectionMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebACL
     * @param xAmzTarget  (required)
     * @param updateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> WAFSubscriptionNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebACLCall(String xAmzTarget, UpdateWebACLRequest updateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWebACLRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateWebACL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebACLValidateBeforeCall(String xAmzTarget, UpdateWebACLRequest updateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateWebACL(Async)");
        }

        // verify the required parameter 'updateWebACLRequest' is set
        if (updateWebACLRequest == null) {
            throw new ApiException("Missing the required parameter 'updateWebACLRequest' when calling updateWebACL(Async)");
        }

        return updateWebACLCall(xAmzTarget, updateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;ActivatedRule&lt;/a&gt; objects in a &lt;code&gt;WebACL&lt;/code&gt;. Each &lt;code&gt;Rule&lt;/code&gt; identifies web requests that you want to allow, block, or count. When you update a &lt;code&gt;WebACL&lt;/code&gt;, you specify the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A default action for the &lt;code&gt;WebACL&lt;/code&gt;, either &lt;code&gt;ALLOW&lt;/code&gt; or &lt;code&gt;BLOCK&lt;/code&gt;. AWS WAF performs the default action if a request doesn&#39;t match the criteria in any of the &lt;code&gt;Rules&lt;/code&gt; in a &lt;code&gt;WebACL&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Rules&lt;/code&gt; that you want to add or delete. If you want to replace one &lt;code&gt;Rule&lt;/code&gt; with another, you delete the existing &lt;code&gt;Rule&lt;/code&gt; and add the new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For each &lt;code&gt;Rule&lt;/code&gt;, whether you want AWS WAF to allow requests, block requests, or count requests that match the conditions in the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order in which you want AWS WAF to evaluate the &lt;code&gt;Rules&lt;/code&gt; in a &lt;code&gt;WebACL&lt;/code&gt;. If you add more than one &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, AWS WAF evaluates each request against the &lt;code&gt;Rules&lt;/code&gt; in order based on the value of &lt;code&gt;Priority&lt;/code&gt;. (The &lt;code&gt;Rule&lt;/code&gt; that has the lowest value for &lt;code&gt;Priority&lt;/code&gt; is evaluated first.) When a web request matches all the predicates (such as &lt;code&gt;ByteMatchSets&lt;/code&gt; and &lt;code&gt;IPSets&lt;/code&gt;) in a &lt;code&gt;Rule&lt;/code&gt;, AWS WAF immediately takes the corresponding action, allow or block, and doesn&#39;t evaluate the request against the remaining &lt;code&gt;Rules&lt;/code&gt; in the &lt;code&gt;WebACL&lt;/code&gt;, if any. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create and configure a &lt;code&gt;WebACL&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in &lt;code&gt;Rules&lt;/code&gt;. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;UpdateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, &lt;a&gt;UpdateIPSet&lt;/a&gt;, &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;, and &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;. For more information, see &lt;a&gt;CreateRule&lt;/a&gt; and &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;WebACL&lt;/code&gt;. See &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateWebACL&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateWebACL&lt;/code&gt; request to specify the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;, to specify the default action, and to associate the &lt;code&gt;WebACL&lt;/code&gt; with a CloudFront distribution. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;ActivatedRule&lt;/code&gt; can be a rule group. If you specify a rule group as your &lt;code&gt;ActivatedRule&lt;/code&gt; , you can exclude specific rules from that rule group.&lt;/p&gt; &lt;p&gt;If you already have a rule group associated with a web ACL and want to submit an &lt;code&gt;UpdateWebACL&lt;/code&gt; request to exclude certain rules from that rule group, you must first remove the rule group from the web ACL, the re-insert it again, specifying the excluded rules. For details, see &lt;a&gt;ActivatedRule$ExcludedRules&lt;/a&gt; . &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Be aware that if you try to add a RATE_BASED rule to a web ACL without setting the rule type when first creating the rule, the &lt;a&gt;UpdateWebACL&lt;/a&gt; request will fail because the request tries to add a REGULAR rule (the default rule type) with the specified ID, which does not exist. &lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateWebACLResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> WAFSubscriptionNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebACLResponse updateWebACL(String xAmzTarget, UpdateWebACLRequest updateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateWebACLResponse> localVarResp = updateWebACLWithHttpInfo(xAmzTarget, updateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;ActivatedRule&lt;/a&gt; objects in a &lt;code&gt;WebACL&lt;/code&gt;. Each &lt;code&gt;Rule&lt;/code&gt; identifies web requests that you want to allow, block, or count. When you update a &lt;code&gt;WebACL&lt;/code&gt;, you specify the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A default action for the &lt;code&gt;WebACL&lt;/code&gt;, either &lt;code&gt;ALLOW&lt;/code&gt; or &lt;code&gt;BLOCK&lt;/code&gt;. AWS WAF performs the default action if a request doesn&#39;t match the criteria in any of the &lt;code&gt;Rules&lt;/code&gt; in a &lt;code&gt;WebACL&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Rules&lt;/code&gt; that you want to add or delete. If you want to replace one &lt;code&gt;Rule&lt;/code&gt; with another, you delete the existing &lt;code&gt;Rule&lt;/code&gt; and add the new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For each &lt;code&gt;Rule&lt;/code&gt;, whether you want AWS WAF to allow requests, block requests, or count requests that match the conditions in the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order in which you want AWS WAF to evaluate the &lt;code&gt;Rules&lt;/code&gt; in a &lt;code&gt;WebACL&lt;/code&gt;. If you add more than one &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, AWS WAF evaluates each request against the &lt;code&gt;Rules&lt;/code&gt; in order based on the value of &lt;code&gt;Priority&lt;/code&gt;. (The &lt;code&gt;Rule&lt;/code&gt; that has the lowest value for &lt;code&gt;Priority&lt;/code&gt; is evaluated first.) When a web request matches all the predicates (such as &lt;code&gt;ByteMatchSets&lt;/code&gt; and &lt;code&gt;IPSets&lt;/code&gt;) in a &lt;code&gt;Rule&lt;/code&gt;, AWS WAF immediately takes the corresponding action, allow or block, and doesn&#39;t evaluate the request against the remaining &lt;code&gt;Rules&lt;/code&gt; in the &lt;code&gt;WebACL&lt;/code&gt;, if any. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create and configure a &lt;code&gt;WebACL&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in &lt;code&gt;Rules&lt;/code&gt;. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;UpdateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, &lt;a&gt;UpdateIPSet&lt;/a&gt;, &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;, and &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;. For more information, see &lt;a&gt;CreateRule&lt;/a&gt; and &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;WebACL&lt;/code&gt;. See &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateWebACL&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateWebACL&lt;/code&gt; request to specify the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;, to specify the default action, and to associate the &lt;code&gt;WebACL&lt;/code&gt; with a CloudFront distribution. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;ActivatedRule&lt;/code&gt; can be a rule group. If you specify a rule group as your &lt;code&gt;ActivatedRule&lt;/code&gt; , you can exclude specific rules from that rule group.&lt;/p&gt; &lt;p&gt;If you already have a rule group associated with a web ACL and want to submit an &lt;code&gt;UpdateWebACL&lt;/code&gt; request to exclude certain rules from that rule group, you must first remove the rule group from the web ACL, the re-insert it again, specifying the excluded rules. For details, see &lt;a&gt;ActivatedRule$ExcludedRules&lt;/a&gt; . &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Be aware that if you try to add a RATE_BASED rule to a web ACL without setting the rule type when first creating the rule, the &lt;a&gt;UpdateWebACL&lt;/a&gt; request will fail because the request tries to add a REGULAR rule (the default rule type) with the specified ID, which does not exist. &lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateWebACLResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> WAFSubscriptionNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateWebACLResponse> updateWebACLWithHttpInfo(String xAmzTarget, UpdateWebACLRequest updateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateWebACLValidateBeforeCall(xAmzTarget, updateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateWebACLResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;ActivatedRule&lt;/a&gt; objects in a &lt;code&gt;WebACL&lt;/code&gt;. Each &lt;code&gt;Rule&lt;/code&gt; identifies web requests that you want to allow, block, or count. When you update a &lt;code&gt;WebACL&lt;/code&gt;, you specify the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A default action for the &lt;code&gt;WebACL&lt;/code&gt;, either &lt;code&gt;ALLOW&lt;/code&gt; or &lt;code&gt;BLOCK&lt;/code&gt;. AWS WAF performs the default action if a request doesn&#39;t match the criteria in any of the &lt;code&gt;Rules&lt;/code&gt; in a &lt;code&gt;WebACL&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Rules&lt;/code&gt; that you want to add or delete. If you want to replace one &lt;code&gt;Rule&lt;/code&gt; with another, you delete the existing &lt;code&gt;Rule&lt;/code&gt; and add the new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For each &lt;code&gt;Rule&lt;/code&gt;, whether you want AWS WAF to allow requests, block requests, or count requests that match the conditions in the &lt;code&gt;Rule&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The order in which you want AWS WAF to evaluate the &lt;code&gt;Rules&lt;/code&gt; in a &lt;code&gt;WebACL&lt;/code&gt;. If you add more than one &lt;code&gt;Rule&lt;/code&gt; to a &lt;code&gt;WebACL&lt;/code&gt;, AWS WAF evaluates each request against the &lt;code&gt;Rules&lt;/code&gt; in order based on the value of &lt;code&gt;Priority&lt;/code&gt;. (The &lt;code&gt;Rule&lt;/code&gt; that has the lowest value for &lt;code&gt;Priority&lt;/code&gt; is evaluated first.) When a web request matches all the predicates (such as &lt;code&gt;ByteMatchSets&lt;/code&gt; and &lt;code&gt;IPSets&lt;/code&gt;) in a &lt;code&gt;Rule&lt;/code&gt;, AWS WAF immediately takes the corresponding action, allow or block, and doesn&#39;t evaluate the request against the remaining &lt;code&gt;Rules&lt;/code&gt; in the &lt;code&gt;WebACL&lt;/code&gt;, if any. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create and configure a &lt;code&gt;WebACL&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Create and update the predicates that you want to include in &lt;code&gt;Rules&lt;/code&gt;. For more information, see &lt;a&gt;CreateByteMatchSet&lt;/a&gt;, &lt;a&gt;UpdateByteMatchSet&lt;/a&gt;, &lt;a&gt;CreateIPSet&lt;/a&gt;, &lt;a&gt;UpdateIPSet&lt;/a&gt;, &lt;a&gt;CreateSqlInjectionMatchSet&lt;/a&gt;, and &lt;a&gt;UpdateSqlInjectionMatchSet&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create and update the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;. For more information, see &lt;a&gt;CreateRule&lt;/a&gt; and &lt;a&gt;UpdateRule&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;WebACL&lt;/code&gt;. See &lt;a&gt;CreateWebACL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetChangeToken&lt;/code&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateWebACL&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateWebACL&lt;/code&gt; request to specify the &lt;code&gt;Rules&lt;/code&gt; that you want to include in the &lt;code&gt;WebACL&lt;/code&gt;, to specify the default action, and to associate the &lt;code&gt;WebACL&lt;/code&gt; with a CloudFront distribution. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;ActivatedRule&lt;/code&gt; can be a rule group. If you specify a rule group as your &lt;code&gt;ActivatedRule&lt;/code&gt; , you can exclude specific rules from that rule group.&lt;/p&gt; &lt;p&gt;If you already have a rule group associated with a web ACL and want to submit an &lt;code&gt;UpdateWebACL&lt;/code&gt; request to exclude certain rules from that rule group, you must first remove the rule group from the web ACL, the re-insert it again, specifying the excluded rules. For details, see &lt;a&gt;ActivatedRule$ExcludedRules&lt;/a&gt; . &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Be aware that if you try to add a RATE_BASED rule to a web ACL without setting the rule type when first creating the rule, the &lt;a&gt;UpdateWebACL&lt;/a&gt; request will fail because the request tries to add a REGULAR rule (the default rule type) with the specified ID, which does not exist. &lt;/p&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateWebACLRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFReferencedItemException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> WAFSubscriptionNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebACLAsync(String xAmzTarget, UpdateWebACLRequest updateWebACLRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateWebACLResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebACLValidateBeforeCall(xAmzTarget, updateWebACLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateWebACLResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateXssMatchSet
     * @param xAmzTarget  (required)
     * @param updateXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateXssMatchSetCall(String xAmzTarget, UpdateXssMatchSetRequest updateXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateXssMatchSetRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSWAF_Regional_20161128.UpdateXssMatchSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateXssMatchSetValidateBeforeCall(String xAmzTarget, UpdateXssMatchSetRequest updateXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateXssMatchSet(Async)");
        }

        // verify the required parameter 'updateXssMatchSetRequest' is set
        if (updateXssMatchSetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateXssMatchSetRequest' when calling updateXssMatchSet(Async)");
        }

        return updateXssMatchSetCall(xAmzTarget, updateXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;XssMatchTuple&lt;/a&gt; objects (filters) in an &lt;a&gt;XssMatchSet&lt;/a&gt;. For each &lt;code&gt;XssMatchTuple&lt;/code&gt; object, you specify the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Action&lt;/code&gt;: Whether to insert the object into or delete the object from the array. To change an &lt;code&gt;XssMatchTuple&lt;/code&gt;, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FieldToMatch&lt;/code&gt;: The part of web requests that you want AWS WAF to inspect and, if you want AWS WAF to inspect a header or custom query parameter, the name of the header or parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TextTransformation&lt;/code&gt;: Which text transformation, if any, to perform on the web request before inspecting the request for cross-site scripting attacks.&lt;/p&gt; &lt;p&gt;You can only specify a single type of TextTransformation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You use &lt;code&gt;XssMatchSet&lt;/code&gt; objects to specify which CloudFront requests that you want to allow, block, or count. For example, if you&#39;re receiving requests that contain cross-site scripting attacks in the request body and you want to block the requests, you can create an &lt;code&gt;XssMatchSet&lt;/code&gt; with the applicable settings, and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;XssMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateXssMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateXssMatchSet&lt;/code&gt; request to specify the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateXssMatchSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateXssMatchSetResponse updateXssMatchSet(String xAmzTarget, UpdateXssMatchSetRequest updateXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateXssMatchSetResponse> localVarResp = updateXssMatchSetWithHttpInfo(xAmzTarget, updateXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;XssMatchTuple&lt;/a&gt; objects (filters) in an &lt;a&gt;XssMatchSet&lt;/a&gt;. For each &lt;code&gt;XssMatchTuple&lt;/code&gt; object, you specify the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Action&lt;/code&gt;: Whether to insert the object into or delete the object from the array. To change an &lt;code&gt;XssMatchTuple&lt;/code&gt;, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FieldToMatch&lt;/code&gt;: The part of web requests that you want AWS WAF to inspect and, if you want AWS WAF to inspect a header or custom query parameter, the name of the header or parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TextTransformation&lt;/code&gt;: Which text transformation, if any, to perform on the web request before inspecting the request for cross-site scripting attacks.&lt;/p&gt; &lt;p&gt;You can only specify a single type of TextTransformation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You use &lt;code&gt;XssMatchSet&lt;/code&gt; objects to specify which CloudFront requests that you want to allow, block, or count. For example, if you&#39;re receiving requests that contain cross-site scripting attacks in the request body and you want to block the requests, you can create an &lt;code&gt;XssMatchSet&lt;/code&gt; with the applicable settings, and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;XssMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateXssMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateXssMatchSet&lt;/code&gt; request to specify the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateXssMatchSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateXssMatchSetResponse> updateXssMatchSetWithHttpInfo(String xAmzTarget, UpdateXssMatchSetRequest updateXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateXssMatchSetValidateBeforeCall(xAmzTarget, updateXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateXssMatchSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Inserts or deletes &lt;a&gt;XssMatchTuple&lt;/a&gt; objects (filters) in an &lt;a&gt;XssMatchSet&lt;/a&gt;. For each &lt;code&gt;XssMatchTuple&lt;/code&gt; object, you specify the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Action&lt;/code&gt;: Whether to insert the object into or delete the object from the array. To change an &lt;code&gt;XssMatchTuple&lt;/code&gt;, you delete the existing object and add a new one.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FieldToMatch&lt;/code&gt;: The part of web requests that you want AWS WAF to inspect and, if you want AWS WAF to inspect a header or custom query parameter, the name of the header or parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TextTransformation&lt;/code&gt;: Which text transformation, if any, to perform on the web request before inspecting the request for cross-site scripting attacks.&lt;/p&gt; &lt;p&gt;You can only specify a single type of TextTransformation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You use &lt;code&gt;XssMatchSet&lt;/code&gt; objects to specify which CloudFront requests that you want to allow, block, or count. For example, if you&#39;re receiving requests that contain cross-site scripting attacks in the request body and you want to block the requests, you can create an &lt;code&gt;XssMatchSet&lt;/code&gt; with the applicable settings, and then configure AWS WAF to block the requests. &lt;/p&gt; &lt;p&gt;To create and configure an &lt;code&gt;XssMatchSet&lt;/code&gt;, perform the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;CreateXssMatchSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;GetChangeToken&lt;/a&gt; to get the change token that you provide in the &lt;code&gt;ChangeToken&lt;/code&gt; parameter of an &lt;a&gt;UpdateIPSet&lt;/a&gt; request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateXssMatchSet&lt;/code&gt; request to specify the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information about how to use the AWS WAF API to allow or block HTTP requests, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateXssMatchSetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> WAFInternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> WAFInvalidAccountException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> WAFInvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> WAFInvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> WAFNonexistentContainerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> WAFNonexistentItemException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> WAFStaleDataException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> WAFLimitsExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateXssMatchSetAsync(String xAmzTarget, UpdateXssMatchSetRequest updateXssMatchSetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateXssMatchSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateXssMatchSetValidateBeforeCall(xAmzTarget, updateXssMatchSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateXssMatchSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
