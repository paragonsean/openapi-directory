/*
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to update a &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:19.199917-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSqlInjectionMatchSetRequest {
  public static final String SERIALIZED_NAME_SQL_INJECTION_MATCH_SET_ID = "SqlInjectionMatchSetId";
  @SerializedName(SERIALIZED_NAME_SQL_INJECTION_MATCH_SET_ID)
  private String sqlInjectionMatchSetId;

  public static final String SERIALIZED_NAME_CHANGE_TOKEN = "ChangeToken";
  @SerializedName(SERIALIZED_NAME_CHANGE_TOKEN)
  private String changeToken;

  public static final String SERIALIZED_NAME_UPDATES = "Updates";
  @SerializedName(SERIALIZED_NAME_UPDATES)
  private List updates;

  public UpdateSqlInjectionMatchSetRequest() {
  }

  public UpdateSqlInjectionMatchSetRequest sqlInjectionMatchSetId(String sqlInjectionMatchSetId) {
    this.sqlInjectionMatchSetId = sqlInjectionMatchSetId;
    return this;
  }

  /**
   * Get sqlInjectionMatchSetId
   * @return sqlInjectionMatchSetId
   */
  @javax.annotation.Nonnull
  public String getSqlInjectionMatchSetId() {
    return sqlInjectionMatchSetId;
  }

  public void setSqlInjectionMatchSetId(String sqlInjectionMatchSetId) {
    this.sqlInjectionMatchSetId = sqlInjectionMatchSetId;
  }


  public UpdateSqlInjectionMatchSetRequest changeToken(String changeToken) {
    this.changeToken = changeToken;
    return this;
  }

  /**
   * Get changeToken
   * @return changeToken
   */
  @javax.annotation.Nonnull
  public String getChangeToken() {
    return changeToken;
  }

  public void setChangeToken(String changeToken) {
    this.changeToken = changeToken;
  }


  public UpdateSqlInjectionMatchSetRequest updates(List updates) {
    this.updates = updates;
    return this;
  }

  /**
   * Get updates
   * @return updates
   */
  @javax.annotation.Nonnull
  public List getUpdates() {
    return updates;
  }

  public void setUpdates(List updates) {
    this.updates = updates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSqlInjectionMatchSetRequest updateSqlInjectionMatchSetRequest = (UpdateSqlInjectionMatchSetRequest) o;
    return Objects.equals(this.sqlInjectionMatchSetId, updateSqlInjectionMatchSetRequest.sqlInjectionMatchSetId) &&
        Objects.equals(this.changeToken, updateSqlInjectionMatchSetRequest.changeToken) &&
        Objects.equals(this.updates, updateSqlInjectionMatchSetRequest.updates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sqlInjectionMatchSetId, changeToken, updates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSqlInjectionMatchSetRequest {\n");
    sb.append("    sqlInjectionMatchSetId: ").append(toIndentedString(sqlInjectionMatchSetId)).append("\n");
    sb.append("    changeToken: ").append(toIndentedString(changeToken)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SqlInjectionMatchSetId");
    openapiFields.add("ChangeToken");
    openapiFields.add("Updates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SqlInjectionMatchSetId");
    openapiRequiredFields.add("ChangeToken");
    openapiRequiredFields.add("Updates");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSqlInjectionMatchSetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSqlInjectionMatchSetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSqlInjectionMatchSetRequest is not found in the empty JSON string", UpdateSqlInjectionMatchSetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSqlInjectionMatchSetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSqlInjectionMatchSetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSqlInjectionMatchSetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SqlInjectionMatchSetId`
      String.validateJsonElement(jsonObj.get("SqlInjectionMatchSetId"));
      // validate the required field `ChangeToken`
      String.validateJsonElement(jsonObj.get("ChangeToken"));
      // validate the required field `Updates`
      List.validateJsonElement(jsonObj.get("Updates"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSqlInjectionMatchSetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSqlInjectionMatchSetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSqlInjectionMatchSetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSqlInjectionMatchSetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSqlInjectionMatchSetRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSqlInjectionMatchSetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSqlInjectionMatchSetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSqlInjectionMatchSetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSqlInjectionMatchSetRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSqlInjectionMatchSetRequest
   */
  public static UpdateSqlInjectionMatchSetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSqlInjectionMatchSetRequest.class);
  }

  /**
   * Convert an instance of UpdateSqlInjectionMatchSetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

