/*
 * AWS WAF Regional
 * <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic with the AWS resources, Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. The AWS WAF Classic actions and data types listed in the reference are available for protecting Elastic Load Balancing (ELB) Application Load Balancers and API Gateway APIs. You can use these actions and data types by means of the endpoints listed in <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region\">AWS Regions and Endpoints</a>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The response from a &lt;a&gt;GetSampledRequests&lt;/a&gt; request includes an &lt;code&gt;HTTPRequest&lt;/code&gt; complex type that appears as &lt;code&gt;Request&lt;/code&gt; in the response syntax. &lt;code&gt;HTTPRequest&lt;/code&gt; contains information about one of the web requests that were returned by &lt;code&gt;GetSampledRequests&lt;/code&gt;. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:19.199917-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HTTPRequest {
  public static final String SERIALIZED_NAME_CLIENT_I_P = "ClientIP";
  @SerializedName(SERIALIZED_NAME_CLIENT_I_P)
  private String clientIP;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_U_R_I = "URI";
  @SerializedName(SERIALIZED_NAME_U_R_I)
  private String URI;

  public static final String SERIALIZED_NAME_METHOD = "Method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_HT_T_P_VERSION = "HTTPVersion";
  @SerializedName(SERIALIZED_NAME_HT_T_P_VERSION)
  private String htTPVersion;

  public static final String SERIALIZED_NAME_HEADERS = "Headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List headers;

  public HTTPRequest() {
  }

  public HTTPRequest clientIP(String clientIP) {
    this.clientIP = clientIP;
    return this;
  }

  /**
   * Get clientIP
   * @return clientIP
   */
  @javax.annotation.Nullable
  public String getClientIP() {
    return clientIP;
  }

  public void setClientIP(String clientIP) {
    this.clientIP = clientIP;
  }


  public HTTPRequest country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public HTTPRequest URI(String URI) {
    this.URI = URI;
    return this;
  }

  /**
   * Get URI
   * @return URI
   */
  @javax.annotation.Nullable
  public String getURI() {
    return URI;
  }

  public void setURI(String URI) {
    this.URI = URI;
  }


  public HTTPRequest method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public HTTPRequest htTPVersion(String htTPVersion) {
    this.htTPVersion = htTPVersion;
    return this;
  }

  /**
   * Get htTPVersion
   * @return htTPVersion
   */
  @javax.annotation.Nullable
  public String getHtTPVersion() {
    return htTPVersion;
  }

  public void setHtTPVersion(String htTPVersion) {
    this.htTPVersion = htTPVersion;
  }


  public HTTPRequest headers(List headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public List getHeaders() {
    return headers;
  }

  public void setHeaders(List headers) {
    this.headers = headers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTTPRequest htTPRequest = (HTTPRequest) o;
    return Objects.equals(this.clientIP, htTPRequest.clientIP) &&
        Objects.equals(this.country, htTPRequest.country) &&
        Objects.equals(this.URI, htTPRequest.URI) &&
        Objects.equals(this.method, htTPRequest.method) &&
        Objects.equals(this.htTPVersion, htTPRequest.htTPVersion) &&
        Objects.equals(this.headers, htTPRequest.headers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientIP, country, URI, method, htTPVersion, headers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTTPRequest {\n");
    sb.append("    clientIP: ").append(toIndentedString(clientIP)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    URI: ").append(toIndentedString(URI)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    htTPVersion: ").append(toIndentedString(htTPVersion)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientIP");
    openapiFields.add("Country");
    openapiFields.add("URI");
    openapiFields.add("Method");
    openapiFields.add("HTTPVersion");
    openapiFields.add("Headers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HTTPRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HTTPRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HTTPRequest is not found in the empty JSON string", HTTPRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HTTPRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HTTPRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClientIP`
      if (jsonObj.get("ClientIP") != null && !jsonObj.get("ClientIP").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientIP"));
      }
      // validate the optional field `Country`
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Country"));
      }
      // validate the optional field `URI`
      if (jsonObj.get("URI") != null && !jsonObj.get("URI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("URI"));
      }
      // validate the optional field `Method`
      if (jsonObj.get("Method") != null && !jsonObj.get("Method").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Method"));
      }
      // validate the optional field `HTTPVersion`
      if (jsonObj.get("HTTPVersion") != null && !jsonObj.get("HTTPVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HTTPVersion"));
      }
      // validate the optional field `Headers`
      if (jsonObj.get("Headers") != null && !jsonObj.get("Headers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Headers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HTTPRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HTTPRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HTTPRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HTTPRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<HTTPRequest>() {
           @Override
           public void write(JsonWriter out, HTTPRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HTTPRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HTTPRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HTTPRequest
   * @throws IOException if the JSON string is invalid with respect to HTTPRequest
   */
  public static HTTPRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HTTPRequest.class);
  }

  /**
   * Convert an instance of HTTPRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

