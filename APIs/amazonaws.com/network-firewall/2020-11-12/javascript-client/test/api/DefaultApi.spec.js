/**
 * AWS Network Firewall
 * <p>This is the API Reference for Network Firewall. This guide is for developers who need detailed information about the Network Firewall API actions, data types, and errors. </p> <ul> <li> <p>The REST API requires you to handle connection details, such as calculating signatures, handling request retries, and error handling. For general information about using the Amazon Web Services REST APIs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a>. </p> <p>To access Network Firewall using the REST API endpoint: <code>https://network-firewall.&lt;region&gt;.amazonaws.com </code> </p> </li> <li> <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> </li> <li> <p>For descriptions of Network Firewall features, including and step-by-step instructions on how to use them through the Network Firewall console, see the <a href=\"https://docs.aws.amazon.com/network-firewall/latest/developerguide/\">Network Firewall Developer Guide</a>.</p> </li> </ul> <p>Network Firewall is a stateful, managed, network firewall and intrusion detection and prevention service for Amazon Virtual Private Cloud (Amazon VPC). With Network Firewall, you can filter traffic at the perimeter of your VPC. This includes filtering traffic going to and coming from an internet gateway, NAT gateway, or over VPN or Direct Connect. Network Firewall uses rules that are compatible with Suricata, a free, open source network analysis and threat detection engine. Network Firewall supports Suricata version 6.0.9. For information about Suricata, see the <a href=\"https://suricata.io/\">Suricata website</a>.</p> <p>You can use Network Firewall to monitor and protect your VPC traffic in a number of ways. The following are just a few examples: </p> <ul> <li> <p>Allow domains or IP addresses for known Amazon Web Services service endpoints, such as Amazon S3, and block all other forms of traffic.</p> </li> <li> <p>Use custom lists of known bad domains to limit the types of domain names that your applications can access.</p> </li> <li> <p>Perform deep packet inspection on traffic entering or leaving your VPC.</p> </li> <li> <p>Use stateful protocol detection to filter protocols like HTTPS, regardless of the port used.</p> </li> </ul> <p>To enable Network Firewall for your VPCs, you perform steps in both Amazon VPC and in Network Firewall. For information about using Amazon VPC, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/\">Amazon VPC User Guide</a>.</p> <p>To start using Network Firewall, do the following: </p> <ol> <li> <p>(Optional) If you don't already have a VPC that you want to protect, create it in Amazon VPC. </p> </li> <li> <p>In Amazon VPC, in each Availability Zone where you want to have a firewall endpoint, create a subnet for the sole use of Network Firewall. </p> </li> <li> <p>In Network Firewall, create stateless and stateful rule groups, to define the components of the network traffic filtering behavior that you want your firewall to have. </p> </li> <li> <p>In Network Firewall, create a firewall policy that uses your rule groups and specifies additional default traffic filtering behavior. </p> </li> <li> <p>In Network Firewall, create a firewall and specify your new firewall policy and VPC subnets. Network Firewall creates a firewall endpoint in each subnet that you specify, with the behavior that's defined in the firewall policy.</p> </li> <li> <p>In Amazon VPC, use ingress routing enhancements to route traffic through the new firewall endpoints.</p> </li> </ol>
 *
 * The version of the OpenAPI document: 2020-11-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsNetworkFirewall);
  }
}(this, function(expect, AwsNetworkFirewall) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsNetworkFirewall.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateFirewallPolicy', function() {
      it('should call associateFirewallPolicy successfully', function(done) {
        //uncomment below and update the code to test associateFirewallPolicy
        //instance.associateFirewallPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateSubnets', function() {
      it('should call associateSubnets successfully', function(done) {
        //uncomment below and update the code to test associateSubnets
        //instance.associateSubnets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFirewall', function() {
      it('should call createFirewall successfully', function(done) {
        //uncomment below and update the code to test createFirewall
        //instance.createFirewall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFirewallPolicy', function() {
      it('should call createFirewallPolicy successfully', function(done) {
        //uncomment below and update the code to test createFirewallPolicy
        //instance.createFirewallPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRuleGroup', function() {
      it('should call createRuleGroup successfully', function(done) {
        //uncomment below and update the code to test createRuleGroup
        //instance.createRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTLSInspectionConfiguration', function() {
      it('should call createTLSInspectionConfiguration successfully', function(done) {
        //uncomment below and update the code to test createTLSInspectionConfiguration
        //instance.createTLSInspectionConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFirewall', function() {
      it('should call deleteFirewall successfully', function(done) {
        //uncomment below and update the code to test deleteFirewall
        //instance.deleteFirewall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFirewallPolicy', function() {
      it('should call deleteFirewallPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteFirewallPolicy
        //instance.deleteFirewallPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourcePolicy', function() {
      it('should call deleteResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test deleteResourcePolicy
        //instance.deleteResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRuleGroup', function() {
      it('should call deleteRuleGroup successfully', function(done) {
        //uncomment below and update the code to test deleteRuleGroup
        //instance.deleteRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTLSInspectionConfiguration', function() {
      it('should call deleteTLSInspectionConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteTLSInspectionConfiguration
        //instance.deleteTLSInspectionConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFirewall', function() {
      it('should call describeFirewall successfully', function(done) {
        //uncomment below and update the code to test describeFirewall
        //instance.describeFirewall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFirewallPolicy', function() {
      it('should call describeFirewallPolicy successfully', function(done) {
        //uncomment below and update the code to test describeFirewallPolicy
        //instance.describeFirewallPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLoggingConfiguration', function() {
      it('should call describeLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeLoggingConfiguration
        //instance.describeLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeResourcePolicy', function() {
      it('should call describeResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test describeResourcePolicy
        //instance.describeResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRuleGroup', function() {
      it('should call describeRuleGroup successfully', function(done) {
        //uncomment below and update the code to test describeRuleGroup
        //instance.describeRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRuleGroupMetadata', function() {
      it('should call describeRuleGroupMetadata successfully', function(done) {
        //uncomment below and update the code to test describeRuleGroupMetadata
        //instance.describeRuleGroupMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTLSInspectionConfiguration', function() {
      it('should call describeTLSInspectionConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeTLSInspectionConfiguration
        //instance.describeTLSInspectionConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateSubnets', function() {
      it('should call disassociateSubnets successfully', function(done) {
        //uncomment below and update the code to test disassociateSubnets
        //instance.disassociateSubnets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFirewallPolicies', function() {
      it('should call listFirewallPolicies successfully', function(done) {
        //uncomment below and update the code to test listFirewallPolicies
        //instance.listFirewallPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFirewalls', function() {
      it('should call listFirewalls successfully', function(done) {
        //uncomment below and update the code to test listFirewalls
        //instance.listFirewalls(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRuleGroups', function() {
      it('should call listRuleGroups successfully', function(done) {
        //uncomment below and update the code to test listRuleGroups
        //instance.listRuleGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTLSInspectionConfigurations', function() {
      it('should call listTLSInspectionConfigurations successfully', function(done) {
        //uncomment below and update the code to test listTLSInspectionConfigurations
        //instance.listTLSInspectionConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResourcePolicy', function() {
      it('should call putResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test putResourcePolicy
        //instance.putResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFirewallDeleteProtection', function() {
      it('should call updateFirewallDeleteProtection successfully', function(done) {
        //uncomment below and update the code to test updateFirewallDeleteProtection
        //instance.updateFirewallDeleteProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFirewallDescription', function() {
      it('should call updateFirewallDescription successfully', function(done) {
        //uncomment below and update the code to test updateFirewallDescription
        //instance.updateFirewallDescription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFirewallEncryptionConfiguration', function() {
      it('should call updateFirewallEncryptionConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateFirewallEncryptionConfiguration
        //instance.updateFirewallEncryptionConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFirewallPolicy', function() {
      it('should call updateFirewallPolicy successfully', function(done) {
        //uncomment below and update the code to test updateFirewallPolicy
        //instance.updateFirewallPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFirewallPolicyChangeProtection', function() {
      it('should call updateFirewallPolicyChangeProtection successfully', function(done) {
        //uncomment below and update the code to test updateFirewallPolicyChangeProtection
        //instance.updateFirewallPolicyChangeProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLoggingConfiguration', function() {
      it('should call updateLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateLoggingConfiguration
        //instance.updateLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRuleGroup', function() {
      it('should call updateRuleGroup successfully', function(done) {
        //uncomment below and update the code to test updateRuleGroup
        //instance.updateRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubnetChangeProtection', function() {
      it('should call updateSubnetChangeProtection successfully', function(done) {
        //uncomment below and update the code to test updateSubnetChangeProtection
        //instance.updateSubnetChangeProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTLSInspectionConfiguration', function() {
      it('should call updateTLSInspectionConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateTLSInspectionConfiguration
        //instance.updateTLSInspectionConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
