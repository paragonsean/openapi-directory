/**
 * AWS Network Firewall
 * <p>This is the API Reference for Network Firewall. This guide is for developers who need detailed information about the Network Firewall API actions, data types, and errors. </p> <ul> <li> <p>The REST API requires you to handle connection details, such as calculating signatures, handling request retries, and error handling. For general information about using the Amazon Web Services REST APIs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a>. </p> <p>To access Network Firewall using the REST API endpoint: <code>https://network-firewall.&lt;region&gt;.amazonaws.com </code> </p> </li> <li> <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> </li> <li> <p>For descriptions of Network Firewall features, including and step-by-step instructions on how to use them through the Network Firewall console, see the <a href=\"https://docs.aws.amazon.com/network-firewall/latest/developerguide/\">Network Firewall Developer Guide</a>.</p> </li> </ul> <p>Network Firewall is a stateful, managed, network firewall and intrusion detection and prevention service for Amazon Virtual Private Cloud (Amazon VPC). With Network Firewall, you can filter traffic at the perimeter of your VPC. This includes filtering traffic going to and coming from an internet gateway, NAT gateway, or over VPN or Direct Connect. Network Firewall uses rules that are compatible with Suricata, a free, open source network analysis and threat detection engine. Network Firewall supports Suricata version 6.0.9. For information about Suricata, see the <a href=\"https://suricata.io/\">Suricata website</a>.</p> <p>You can use Network Firewall to monitor and protect your VPC traffic in a number of ways. The following are just a few examples: </p> <ul> <li> <p>Allow domains or IP addresses for known Amazon Web Services service endpoints, such as Amazon S3, and block all other forms of traffic.</p> </li> <li> <p>Use custom lists of known bad domains to limit the types of domain names that your applications can access.</p> </li> <li> <p>Perform deep packet inspection on traffic entering or leaving your VPC.</p> </li> <li> <p>Use stateful protocol detection to filter protocols like HTTPS, regardless of the port used.</p> </li> </ul> <p>To enable Network Firewall for your VPCs, you perform steps in both Amazon VPC and in Network Firewall. For information about using Amazon VPC, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/\">Amazon VPC User Guide</a>.</p> <p>To start using Network Firewall, do the following: </p> <ol> <li> <p>(Optional) If you don't already have a VPC that you want to protect, create it in Amazon VPC. </p> </li> <li> <p>In Amazon VPC, in each Availability Zone where you want to have a firewall endpoint, create a subnet for the sole use of Network Firewall. </p> </li> <li> <p>In Network Firewall, create stateless and stateful rule groups, to define the components of the network traffic filtering behavior that you want your firewall to have. </p> </li> <li> <p>In Network Firewall, create a firewall policy that uses your rule groups and specifies additional default traffic filtering behavior. </p> </li> <li> <p>In Network Firewall, create a firewall and specify your new firewall policy and VPC subnets. Network Firewall creates a firewall endpoint in each subnet that you specify, with the behavior that's defined in the firewall policy.</p> </li> <li> <p>In Amazon VPC, use ingress routing enhancements to route traffic through the new firewall endpoints.</p> </li> </ol>
 *
 * The version of the OpenAPI document: 2020-11-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateFirewallPolicyRequest from '../model/AssociateFirewallPolicyRequest';
import AssociateFirewallPolicyResponse from '../model/AssociateFirewallPolicyResponse';
import AssociateSubnetsRequest from '../model/AssociateSubnetsRequest';
import AssociateSubnetsResponse from '../model/AssociateSubnetsResponse';
import CreateFirewallPolicyRequest from '../model/CreateFirewallPolicyRequest';
import CreateFirewallPolicyResponse from '../model/CreateFirewallPolicyResponse';
import CreateFirewallRequest from '../model/CreateFirewallRequest';
import CreateFirewallResponse from '../model/CreateFirewallResponse';
import CreateRuleGroupRequest from '../model/CreateRuleGroupRequest';
import CreateRuleGroupResponse from '../model/CreateRuleGroupResponse';
import CreateTLSInspectionConfigurationRequest from '../model/CreateTLSInspectionConfigurationRequest';
import CreateTLSInspectionConfigurationResponse from '../model/CreateTLSInspectionConfigurationResponse';
import DeleteFirewallPolicyRequest from '../model/DeleteFirewallPolicyRequest';
import DeleteFirewallPolicyResponse from '../model/DeleteFirewallPolicyResponse';
import DeleteFirewallRequest from '../model/DeleteFirewallRequest';
import DeleteFirewallResponse from '../model/DeleteFirewallResponse';
import DeleteResourcePolicyRequest from '../model/DeleteResourcePolicyRequest';
import DeleteRuleGroupRequest from '../model/DeleteRuleGroupRequest';
import DeleteRuleGroupResponse from '../model/DeleteRuleGroupResponse';
import DeleteTLSInspectionConfigurationRequest from '../model/DeleteTLSInspectionConfigurationRequest';
import DeleteTLSInspectionConfigurationResponse from '../model/DeleteTLSInspectionConfigurationResponse';
import DescribeFirewallPolicyRequest from '../model/DescribeFirewallPolicyRequest';
import DescribeFirewallPolicyResponse from '../model/DescribeFirewallPolicyResponse';
import DescribeFirewallRequest from '../model/DescribeFirewallRequest';
import DescribeFirewallResponse from '../model/DescribeFirewallResponse';
import DescribeLoggingConfigurationRequest from '../model/DescribeLoggingConfigurationRequest';
import DescribeLoggingConfigurationResponse from '../model/DescribeLoggingConfigurationResponse';
import DescribeResourcePolicyRequest from '../model/DescribeResourcePolicyRequest';
import DescribeResourcePolicyResponse from '../model/DescribeResourcePolicyResponse';
import DescribeRuleGroupMetadataRequest from '../model/DescribeRuleGroupMetadataRequest';
import DescribeRuleGroupMetadataResponse from '../model/DescribeRuleGroupMetadataResponse';
import DescribeRuleGroupRequest from '../model/DescribeRuleGroupRequest';
import DescribeRuleGroupResponse from '../model/DescribeRuleGroupResponse';
import DescribeTLSInspectionConfigurationRequest from '../model/DescribeTLSInspectionConfigurationRequest';
import DescribeTLSInspectionConfigurationResponse from '../model/DescribeTLSInspectionConfigurationResponse';
import DisassociateSubnetsRequest from '../model/DisassociateSubnetsRequest';
import DisassociateSubnetsResponse from '../model/DisassociateSubnetsResponse';
import ListFirewallPoliciesRequest from '../model/ListFirewallPoliciesRequest';
import ListFirewallPoliciesResponse from '../model/ListFirewallPoliciesResponse';
import ListFirewallsRequest from '../model/ListFirewallsRequest';
import ListFirewallsResponse from '../model/ListFirewallsResponse';
import ListRuleGroupsRequest from '../model/ListRuleGroupsRequest';
import ListRuleGroupsResponse from '../model/ListRuleGroupsResponse';
import ListTLSInspectionConfigurationsRequest from '../model/ListTLSInspectionConfigurationsRequest';
import ListTLSInspectionConfigurationsResponse from '../model/ListTLSInspectionConfigurationsResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutResourcePolicyRequest from '../model/PutResourcePolicyRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateFirewallDeleteProtectionRequest from '../model/UpdateFirewallDeleteProtectionRequest';
import UpdateFirewallDeleteProtectionResponse from '../model/UpdateFirewallDeleteProtectionResponse';
import UpdateFirewallDescriptionRequest from '../model/UpdateFirewallDescriptionRequest';
import UpdateFirewallDescriptionResponse from '../model/UpdateFirewallDescriptionResponse';
import UpdateFirewallEncryptionConfigurationRequest from '../model/UpdateFirewallEncryptionConfigurationRequest';
import UpdateFirewallEncryptionConfigurationResponse from '../model/UpdateFirewallEncryptionConfigurationResponse';
import UpdateFirewallPolicyChangeProtectionRequest from '../model/UpdateFirewallPolicyChangeProtectionRequest';
import UpdateFirewallPolicyChangeProtectionResponse from '../model/UpdateFirewallPolicyChangeProtectionResponse';
import UpdateFirewallPolicyRequest from '../model/UpdateFirewallPolicyRequest';
import UpdateFirewallPolicyResponse from '../model/UpdateFirewallPolicyResponse';
import UpdateLoggingConfigurationRequest from '../model/UpdateLoggingConfigurationRequest';
import UpdateLoggingConfigurationResponse from '../model/UpdateLoggingConfigurationResponse';
import UpdateRuleGroupRequest from '../model/UpdateRuleGroupRequest';
import UpdateRuleGroupResponse from '../model/UpdateRuleGroupResponse';
import UpdateSubnetChangeProtectionRequest from '../model/UpdateSubnetChangeProtectionRequest';
import UpdateSubnetChangeProtectionResponse from '../model/UpdateSubnetChangeProtectionResponse';
import UpdateTLSInspectionConfigurationRequest from '../model/UpdateTLSInspectionConfigurationRequest';
import UpdateTLSInspectionConfigurationResponse from '../model/UpdateTLSInspectionConfigurationResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-11-12
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateFirewallPolicy operation.
     * @callback module:api/DefaultApi~associateFirewallPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateFirewallPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates a <a>FirewallPolicy</a> to a <a>Firewall</a>. </p> <p>A firewall policy defines how to monitor and manage your VPC network traffic, using a collection of inspection rule groups and other settings. Each firewall requires one firewall policy association, and you can use the same firewall policy for multiple firewalls. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateFirewallPolicyRequest} associateFirewallPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateFirewallPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateFirewallPolicyResponse}
     */
    associateFirewallPolicy(xAmzTarget, associateFirewallPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateFirewallPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateFirewallPolicy");
      }
      // verify the required parameter 'associateFirewallPolicyRequest' is set
      if (associateFirewallPolicyRequest === undefined || associateFirewallPolicyRequest === null) {
        throw new Error("Missing the required parameter 'associateFirewallPolicyRequest' when calling associateFirewallPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateFirewallPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.AssociateFirewallPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateSubnets operation.
     * @callback module:api/DefaultApi~associateSubnetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateSubnetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates the specified subnets in the Amazon VPC to the firewall. You can specify one subnet for each of the Availability Zones that the VPC spans. </p> <p>This request creates an Network Firewall firewall endpoint in each of the subnets. To enable the firewall's protections, you must also modify the VPC's route tables for each subnet's Availability Zone, to redirect the traffic that's coming into and going out of the zone through the firewall endpoint. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateSubnetsRequest} associateSubnetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateSubnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateSubnetsResponse}
     */
    associateSubnets(xAmzTarget, associateSubnetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateSubnetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateSubnets");
      }
      // verify the required parameter 'associateSubnetsRequest' is set
      if (associateSubnetsRequest === undefined || associateSubnetsRequest === null) {
        throw new Error("Missing the required parameter 'associateSubnetsRequest' when calling associateSubnets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateSubnetsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.AssociateSubnets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFirewall operation.
     * @callback module:api/DefaultApi~createFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFirewallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Network Firewall <a>Firewall</a> and accompanying <a>FirewallStatus</a> for a VPC. </p> <p>The firewall defines the configuration settings for an Network Firewall firewall. The settings that you can define at creation include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. </p> <p>After you create a firewall, you can provide additional settings, like the logging configuration. </p> <p>To update the settings for a firewall, you use the operations that apply to the settings themselves, for example <a>UpdateLoggingConfiguration</a>, <a>AssociateSubnets</a>, and <a>UpdateFirewallDeleteProtection</a>. </p> <p>To manage a firewall's tags, use the standard Amazon Web Services resource tagging operations, <a>ListTagsForResource</a>, <a>TagResource</a>, and <a>UntagResource</a>.</p> <p>To retrieve information about firewalls, use <a>ListFirewalls</a> and <a>DescribeFirewall</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFirewallRequest} createFirewallRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFirewallResponse}
     */
    createFirewall(xAmzTarget, createFirewallRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFirewallRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFirewall");
      }
      // verify the required parameter 'createFirewallRequest' is set
      if (createFirewallRequest === undefined || createFirewallRequest === null) {
        throw new Error("Missing the required parameter 'createFirewallRequest' when calling createFirewall");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFirewallResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.CreateFirewall', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFirewallPolicy operation.
     * @callback module:api/DefaultApi~createFirewallPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFirewallPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates the firewall policy for the firewall according to the specifications. </p> <p>An Network Firewall firewall policy defines the behavior of a firewall, in a collection of stateless and stateful rule groups and other settings. You can use one firewall policy for multiple firewalls. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFirewallPolicyRequest} createFirewallPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFirewallPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFirewallPolicyResponse}
     */
    createFirewallPolicy(xAmzTarget, createFirewallPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFirewallPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFirewallPolicy");
      }
      // verify the required parameter 'createFirewallPolicyRequest' is set
      if (createFirewallPolicyRequest === undefined || createFirewallPolicyRequest === null) {
        throw new Error("Missing the required parameter 'createFirewallPolicyRequest' when calling createFirewallPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFirewallPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.CreateFirewallPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRuleGroup operation.
     * @callback module:api/DefaultApi~createRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRuleGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates the specified stateless or stateful rule group, which includes the rules for network traffic inspection, a capacity setting, and tags. </p> <p>You provide your rule group specification in your request using either <code>RuleGroup</code> or <code>Rules</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateRuleGroupRequest} createRuleGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRuleGroupResponse}
     */
    createRuleGroup(xAmzTarget, createRuleGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRuleGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createRuleGroup");
      }
      // verify the required parameter 'createRuleGroupRequest' is set
      if (createRuleGroupRequest === undefined || createRuleGroupRequest === null) {
        throw new Error("Missing the required parameter 'createRuleGroupRequest' when calling createRuleGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRuleGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.CreateRuleGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTLSInspectionConfiguration operation.
     * @callback module:api/DefaultApi~createTLSInspectionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTLSInspectionConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Network Firewall TLS inspection configuration. A TLS inspection configuration contains the Certificate Manager certificate references that Network Firewall uses to decrypt and re-encrypt inbound traffic.</p> <p>After you create a TLS inspection configuration, you associate it with a firewall policy.</p> <p>To update the settings for a TLS inspection configuration, use <a>UpdateTLSInspectionConfiguration</a>.</p> <p>To manage a TLS inspection configuration's tags, use the standard Amazon Web Services resource tagging operations, <a>ListTagsForResource</a>, <a>TagResource</a>, and <a>UntagResource</a>.</p> <p>To retrieve information about TLS inspection configurations, use <a>ListTLSInspectionConfigurations</a> and <a>DescribeTLSInspectionConfiguration</a>.</p> <p> For more information about TLS inspection configurations, see <a href=\"https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html\">Decrypting SSL/TLS traffic with TLS inspection configurations</a> in the <i>Network Firewall Developer Guide</i>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTLSInspectionConfigurationRequest} createTLSInspectionConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTLSInspectionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTLSInspectionConfigurationResponse}
     */
    createTLSInspectionConfiguration(xAmzTarget, createTLSInspectionConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTLSInspectionConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTLSInspectionConfiguration");
      }
      // verify the required parameter 'createTLSInspectionConfigurationRequest' is set
      if (createTLSInspectionConfigurationRequest === undefined || createTLSInspectionConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createTLSInspectionConfigurationRequest' when calling createTLSInspectionConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTLSInspectionConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.CreateTLSInspectionConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFirewall operation.
     * @callback module:api/DefaultApi~deleteFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFirewallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified <a>Firewall</a> and its <a>FirewallStatus</a>. This operation requires the firewall's <code>DeleteProtection</code> flag to be <code>FALSE</code>. You can't revert this operation. </p> <p>You can check whether a firewall is in use by reviewing the route tables for the Availability Zones where you have firewall subnet mappings. Retrieve the subnet mappings by calling <a>DescribeFirewall</a>. You define and update the route tables through Amazon VPC. As needed, update the route tables for the zones to remove the firewall endpoints. When the route tables no longer use the firewall endpoints, you can remove the firewall safely.</p> <p>To delete a firewall, remove the delete protection if you need to using <a>UpdateFirewallDeleteProtection</a>, then delete the firewall by calling <a>DeleteFirewall</a>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFirewallRequest} deleteFirewallRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFirewallResponse}
     */
    deleteFirewall(xAmzTarget, deleteFirewallRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFirewallRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFirewall");
      }
      // verify the required parameter 'deleteFirewallRequest' is set
      if (deleteFirewallRequest === undefined || deleteFirewallRequest === null) {
        throw new Error("Missing the required parameter 'deleteFirewallRequest' when calling deleteFirewall");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteFirewallResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DeleteFirewall', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFirewallPolicy operation.
     * @callback module:api/DefaultApi~deleteFirewallPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFirewallPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified <a>FirewallPolicy</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFirewallPolicyRequest} deleteFirewallPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFirewallPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFirewallPolicyResponse}
     */
    deleteFirewallPolicy(xAmzTarget, deleteFirewallPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFirewallPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFirewallPolicy");
      }
      // verify the required parameter 'deleteFirewallPolicyRequest' is set
      if (deleteFirewallPolicyRequest === undefined || deleteFirewallPolicyRequest === null) {
        throw new Error("Missing the required parameter 'deleteFirewallPolicyRequest' when calling deleteFirewallPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteFirewallPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DeleteFirewallPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourcePolicy operation.
     * @callback module:api/DefaultApi~deleteResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a resource policy that you created in a <a>PutResourcePolicy</a> request. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteResourcePolicyRequest} deleteResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteResourcePolicy(xAmzTarget, deleteResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteResourcePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteResourcePolicy");
      }
      // verify the required parameter 'deleteResourcePolicyRequest' is set
      if (deleteResourcePolicyRequest === undefined || deleteResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'deleteResourcePolicyRequest' when calling deleteResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DeleteResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRuleGroup operation.
     * @callback module:api/DefaultApi~deleteRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRuleGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified <a>RuleGroup</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRuleGroupRequest} deleteRuleGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRuleGroupResponse}
     */
    deleteRuleGroup(xAmzTarget, deleteRuleGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRuleGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRuleGroup");
      }
      // verify the required parameter 'deleteRuleGroupRequest' is set
      if (deleteRuleGroupRequest === undefined || deleteRuleGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteRuleGroupRequest' when calling deleteRuleGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRuleGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DeleteRuleGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTLSInspectionConfiguration operation.
     * @callback module:api/DefaultApi~deleteTLSInspectionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteTLSInspectionConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified <a>TLSInspectionConfiguration</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTLSInspectionConfigurationRequest} deleteTLSInspectionConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTLSInspectionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteTLSInspectionConfigurationResponse}
     */
    deleteTLSInspectionConfiguration(xAmzTarget, deleteTLSInspectionConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTLSInspectionConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTLSInspectionConfiguration");
      }
      // verify the required parameter 'deleteTLSInspectionConfigurationRequest' is set
      if (deleteTLSInspectionConfigurationRequest === undefined || deleteTLSInspectionConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteTLSInspectionConfigurationRequest' when calling deleteTLSInspectionConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteTLSInspectionConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DeleteTLSInspectionConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFirewall operation.
     * @callback module:api/DefaultApi~describeFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFirewallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the data objects for the specified firewall. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFirewallRequest} describeFirewallRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFirewallResponse}
     */
    describeFirewall(xAmzTarget, describeFirewallRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFirewallRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFirewall");
      }
      // verify the required parameter 'describeFirewallRequest' is set
      if (describeFirewallRequest === undefined || describeFirewallRequest === null) {
        throw new Error("Missing the required parameter 'describeFirewallRequest' when calling describeFirewall");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFirewallResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DescribeFirewall', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFirewallPolicy operation.
     * @callback module:api/DefaultApi~describeFirewallPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFirewallPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the data objects for the specified firewall policy. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFirewallPolicyRequest} describeFirewallPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFirewallPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFirewallPolicyResponse}
     */
    describeFirewallPolicy(xAmzTarget, describeFirewallPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFirewallPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFirewallPolicy");
      }
      // verify the required parameter 'describeFirewallPolicyRequest' is set
      if (describeFirewallPolicyRequest === undefined || describeFirewallPolicyRequest === null) {
        throw new Error("Missing the required parameter 'describeFirewallPolicyRequest' when calling describeFirewallPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFirewallPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DescribeFirewallPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLoggingConfiguration operation.
     * @callback module:api/DefaultApi~describeLoggingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLoggingConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the logging configuration for the specified firewall. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLoggingConfigurationRequest} describeLoggingConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLoggingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLoggingConfigurationResponse}
     */
    describeLoggingConfiguration(xAmzTarget, describeLoggingConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLoggingConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLoggingConfiguration");
      }
      // verify the required parameter 'describeLoggingConfigurationRequest' is set
      if (describeLoggingConfigurationRequest === undefined || describeLoggingConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'describeLoggingConfigurationRequest' when calling describeLoggingConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLoggingConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DescribeLoggingConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeResourcePolicy operation.
     * @callback module:api/DefaultApi~describeResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a resource policy that you created in a <a>PutResourcePolicy</a> request. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeResourcePolicyRequest} describeResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeResourcePolicyResponse}
     */
    describeResourcePolicy(xAmzTarget, describeResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeResourcePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeResourcePolicy");
      }
      // verify the required parameter 'describeResourcePolicyRequest' is set
      if (describeResourcePolicyRequest === undefined || describeResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'describeResourcePolicyRequest' when calling describeResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeResourcePolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DescribeResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRuleGroup operation.
     * @callback module:api/DefaultApi~describeRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRuleGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the data objects for the specified rule group. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeRuleGroupRequest} describeRuleGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRuleGroupResponse}
     */
    describeRuleGroup(xAmzTarget, describeRuleGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeRuleGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeRuleGroup");
      }
      // verify the required parameter 'describeRuleGroupRequest' is set
      if (describeRuleGroupRequest === undefined || describeRuleGroupRequest === null) {
        throw new Error("Missing the required parameter 'describeRuleGroupRequest' when calling describeRuleGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRuleGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DescribeRuleGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRuleGroupMetadata operation.
     * @callback module:api/DefaultApi~describeRuleGroupMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRuleGroupMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * High-level information about a rule group, returned by operations like create and describe. You can use the information provided in the metadata to retrieve and manage a rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeRuleGroupMetadataRequest} describeRuleGroupMetadataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRuleGroupMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRuleGroupMetadataResponse}
     */
    describeRuleGroupMetadata(xAmzTarget, describeRuleGroupMetadataRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeRuleGroupMetadataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeRuleGroupMetadata");
      }
      // verify the required parameter 'describeRuleGroupMetadataRequest' is set
      if (describeRuleGroupMetadataRequest === undefined || describeRuleGroupMetadataRequest === null) {
        throw new Error("Missing the required parameter 'describeRuleGroupMetadataRequest' when calling describeRuleGroupMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRuleGroupMetadataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DescribeRuleGroupMetadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTLSInspectionConfiguration operation.
     * @callback module:api/DefaultApi~describeTLSInspectionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTLSInspectionConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the data objects for the specified TLS inspection configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTLSInspectionConfigurationRequest} describeTLSInspectionConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTLSInspectionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTLSInspectionConfigurationResponse}
     */
    describeTLSInspectionConfiguration(xAmzTarget, describeTLSInspectionConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTLSInspectionConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTLSInspectionConfiguration");
      }
      // verify the required parameter 'describeTLSInspectionConfigurationRequest' is set
      if (describeTLSInspectionConfigurationRequest === undefined || describeTLSInspectionConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'describeTLSInspectionConfigurationRequest' when calling describeTLSInspectionConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTLSInspectionConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DescribeTLSInspectionConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateSubnets operation.
     * @callback module:api/DefaultApi~disassociateSubnetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateSubnetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified subnet associations from the firewall. This removes the firewall endpoints from the subnets and removes any network filtering protections that the endpoints were providing. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateSubnetsRequest} disassociateSubnetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateSubnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateSubnetsResponse}
     */
    disassociateSubnets(xAmzTarget, disassociateSubnetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateSubnetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateSubnets");
      }
      // verify the required parameter 'disassociateSubnetsRequest' is set
      if (disassociateSubnetsRequest === undefined || disassociateSubnetsRequest === null) {
        throw new Error("Missing the required parameter 'disassociateSubnetsRequest' when calling disassociateSubnets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateSubnetsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.DisassociateSubnets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewallPolicies operation.
     * @callback module:api/DefaultApi~listFirewallPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFirewallPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metadata for the firewall policies that you have defined. Depending on your setting for max results and the number of firewall policies, a single call might not return the full list. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFirewallPoliciesRequest} listFirewallPoliciesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFirewallPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFirewallPoliciesResponse}
     */
    listFirewallPolicies(xAmzTarget, listFirewallPoliciesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFirewallPoliciesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFirewallPolicies");
      }
      // verify the required parameter 'listFirewallPoliciesRequest' is set
      if (listFirewallPoliciesRequest === undefined || listFirewallPoliciesRequest === null) {
        throw new Error("Missing the required parameter 'listFirewallPoliciesRequest' when calling listFirewallPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFirewallPoliciesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.ListFirewallPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewalls operation.
     * @callback module:api/DefaultApi~listFirewallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFirewallsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the metadata for the firewalls that you have defined. If you provide VPC identifiers in your request, this returns only the firewalls for those VPCs.</p> <p>Depending on your setting for max results and the number of firewalls, a single call might not return the full list. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFirewallsRequest} listFirewallsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFirewallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFirewallsResponse}
     */
    listFirewalls(xAmzTarget, listFirewallsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFirewallsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFirewalls");
      }
      // verify the required parameter 'listFirewallsRequest' is set
      if (listFirewallsRequest === undefined || listFirewallsRequest === null) {
        throw new Error("Missing the required parameter 'listFirewallsRequest' when calling listFirewalls");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFirewallsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.ListFirewalls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRuleGroups operation.
     * @callback module:api/DefaultApi~listRuleGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRuleGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metadata for the rule groups that you have defined. Depending on your setting for max results and the number of rule groups, a single call might not return the full list. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListRuleGroupsRequest} listRuleGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRuleGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRuleGroupsResponse}
     */
    listRuleGroups(xAmzTarget, listRuleGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRuleGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listRuleGroups");
      }
      // verify the required parameter 'listRuleGroupsRequest' is set
      if (listRuleGroupsRequest === undefined || listRuleGroupsRequest === null) {
        throw new Error("Missing the required parameter 'listRuleGroupsRequest' when calling listRuleGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRuleGroupsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.ListRuleGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTLSInspectionConfigurations operation.
     * @callback module:api/DefaultApi~listTLSInspectionConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTLSInspectionConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metadata for the TLS inspection configurations that you have defined. Depending on your setting for max results and the number of TLS inspection configurations, a single call might not return the full list.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTLSInspectionConfigurationsRequest} listTLSInspectionConfigurationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTLSInspectionConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTLSInspectionConfigurationsResponse}
     */
    listTLSInspectionConfigurations(xAmzTarget, listTLSInspectionConfigurationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTLSInspectionConfigurationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTLSInspectionConfigurations");
      }
      // verify the required parameter 'listTLSInspectionConfigurationsRequest' is set
      if (listTLSInspectionConfigurationsRequest === undefined || listTLSInspectionConfigurationsRequest === null) {
        throw new Error("Missing the required parameter 'listTLSInspectionConfigurationsRequest' when calling listTLSInspectionConfigurations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTLSInspectionConfigurationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.ListTLSInspectionConfigurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the tags associated with the specified resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \"customer\" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.</p> <p>You can tag the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall policies, and rule groups. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResourcePolicy operation.
     * @callback module:api/DefaultApi~putResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates or updates an IAM policy for your rule group or firewall policy. Use this to share rule groups and firewall policies between accounts. This operation works in conjunction with the Amazon Web Services Resource Access Manager (RAM) service to manage resource sharing for Network Firewall. </p> <p>Use this operation to create or update a resource policy for your rule group or firewall policy. In the policy, you specify the accounts that you want to share the resource with and the operations that you want the accounts to be able to perform. </p> <p>When you add an account in the resource policy, you then run the following Resource Access Manager (RAM) operations to access and accept the shared rule group or firewall policy. </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_GetResourceShareInvitations.html\">GetResourceShareInvitations</a> - Returns the Amazon Resource Names (ARNs) of the resource share invitations. </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/APIReference/API_AcceptResourceShareInvitation.html\">AcceptResourceShareInvitation</a> - Accepts the share invitation for a specified resource share. </p> </li> </ul> <p>For additional information about resource sharing using RAM, see <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/what-is.html\">Resource Access Manager User Guide</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutResourcePolicyRequest} putResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putResourcePolicy(xAmzTarget, putResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putResourcePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putResourcePolicy");
      }
      // verify the required parameter 'putResourcePolicyRequest' is set
      if (putResourcePolicyRequest === undefined || putResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'putResourcePolicyRequest' when calling putResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.PutResourcePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds the specified tags to the specified resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \"customer\" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.</p> <p>You can tag the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall policies, and rule groups. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the tags with the specified keys from the specified resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \"customer\" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.</p> <p>You can manage tags for the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall policies, and rule groups. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFirewallDeleteProtection operation.
     * @callback module:api/DefaultApi~updateFirewallDeleteProtectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFirewallDeleteProtectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the flag, <code>DeleteProtection</code>, which indicates whether it is possible to delete the firewall. If the flag is set to <code>TRUE</code>, the firewall is protected against deletion. This setting helps protect against accidentally deleting a firewall that's in use. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFirewallDeleteProtectionRequest} updateFirewallDeleteProtectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFirewallDeleteProtectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFirewallDeleteProtectionResponse}
     */
    updateFirewallDeleteProtection(xAmzTarget, updateFirewallDeleteProtectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFirewallDeleteProtectionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFirewallDeleteProtection");
      }
      // verify the required parameter 'updateFirewallDeleteProtectionRequest' is set
      if (updateFirewallDeleteProtectionRequest === undefined || updateFirewallDeleteProtectionRequest === null) {
        throw new Error("Missing the required parameter 'updateFirewallDeleteProtectionRequest' when calling updateFirewallDeleteProtection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFirewallDeleteProtectionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UpdateFirewallDeleteProtection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFirewallDescription operation.
     * @callback module:api/DefaultApi~updateFirewallDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFirewallDescriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the description for the specified firewall. Use the description to help you identify the firewall when you're working with it. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFirewallDescriptionRequest} updateFirewallDescriptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFirewallDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFirewallDescriptionResponse}
     */
    updateFirewallDescription(xAmzTarget, updateFirewallDescriptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFirewallDescriptionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFirewallDescription");
      }
      // verify the required parameter 'updateFirewallDescriptionRequest' is set
      if (updateFirewallDescriptionRequest === undefined || updateFirewallDescriptionRequest === null) {
        throw new Error("Missing the required parameter 'updateFirewallDescriptionRequest' when calling updateFirewallDescription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFirewallDescriptionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UpdateFirewallDescription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFirewallEncryptionConfiguration operation.
     * @callback module:api/DefaultApi~updateFirewallEncryptionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFirewallEncryptionConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A complex type that contains settings for encryption of your firewall resources.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFirewallEncryptionConfigurationRequest} updateFirewallEncryptionConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFirewallEncryptionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFirewallEncryptionConfigurationResponse}
     */
    updateFirewallEncryptionConfiguration(xAmzTarget, updateFirewallEncryptionConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFirewallEncryptionConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFirewallEncryptionConfiguration");
      }
      // verify the required parameter 'updateFirewallEncryptionConfigurationRequest' is set
      if (updateFirewallEncryptionConfigurationRequest === undefined || updateFirewallEncryptionConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateFirewallEncryptionConfigurationRequest' when calling updateFirewallEncryptionConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFirewallEncryptionConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UpdateFirewallEncryptionConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFirewallPolicy operation.
     * @callback module:api/DefaultApi~updateFirewallPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFirewallPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of the specified firewall policy.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFirewallPolicyRequest} updateFirewallPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFirewallPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFirewallPolicyResponse}
     */
    updateFirewallPolicy(xAmzTarget, updateFirewallPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFirewallPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFirewallPolicy");
      }
      // verify the required parameter 'updateFirewallPolicyRequest' is set
      if (updateFirewallPolicyRequest === undefined || updateFirewallPolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateFirewallPolicyRequest' when calling updateFirewallPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFirewallPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UpdateFirewallPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFirewallPolicyChangeProtection operation.
     * @callback module:api/DefaultApi~updateFirewallPolicyChangeProtectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFirewallPolicyChangeProtectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the flag, <code>ChangeProtection</code>, which indicates whether it is possible to change the firewall. If the flag is set to <code>TRUE</code>, the firewall is protected from changes. This setting helps protect against accidentally changing a firewall that's in use.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFirewallPolicyChangeProtectionRequest} updateFirewallPolicyChangeProtectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFirewallPolicyChangeProtectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFirewallPolicyChangeProtectionResponse}
     */
    updateFirewallPolicyChangeProtection(xAmzTarget, updateFirewallPolicyChangeProtectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFirewallPolicyChangeProtectionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFirewallPolicyChangeProtection");
      }
      // verify the required parameter 'updateFirewallPolicyChangeProtectionRequest' is set
      if (updateFirewallPolicyChangeProtectionRequest === undefined || updateFirewallPolicyChangeProtectionRequest === null) {
        throw new Error("Missing the required parameter 'updateFirewallPolicyChangeProtectionRequest' when calling updateFirewallPolicyChangeProtection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFirewallPolicyChangeProtectionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UpdateFirewallPolicyChangeProtection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoggingConfiguration operation.
     * @callback module:api/DefaultApi~updateLoggingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateLoggingConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the logging configuration for the specified firewall. </p> <p>To change the logging configuration, retrieve the <a>LoggingConfiguration</a> by calling <a>DescribeLoggingConfiguration</a>, then change it and provide the modified object to this update call. You must change the logging configuration one <a>LogDestinationConfig</a> at a time inside the retrieved <a>LoggingConfiguration</a> object. </p> <p>You can perform only one of the following actions in any call to <code>UpdateLoggingConfiguration</code>: </p> <ul> <li> <p>Create a new log destination object by adding a single <code>LogDestinationConfig</code> array element to <code>LogDestinationConfigs</code>.</p> </li> <li> <p>Delete a log destination object by removing a single <code>LogDestinationConfig</code> array element from <code>LogDestinationConfigs</code>.</p> </li> <li> <p>Change the <code>LogDestination</code> setting in a single <code>LogDestinationConfig</code> array element.</p> </li> </ul> <p>You can't change the <code>LogDestinationType</code> or <code>LogType</code> in a <code>LogDestinationConfig</code>. To change these settings, delete the existing <code>LogDestinationConfig</code> object and create a new one, using two separate calls to this update operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLoggingConfigurationRequest} updateLoggingConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLoggingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateLoggingConfigurationResponse}
     */
    updateLoggingConfiguration(xAmzTarget, updateLoggingConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLoggingConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLoggingConfiguration");
      }
      // verify the required parameter 'updateLoggingConfigurationRequest' is set
      if (updateLoggingConfigurationRequest === undefined || updateLoggingConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateLoggingConfigurationRequest' when calling updateLoggingConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLoggingConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UpdateLoggingConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRuleGroup operation.
     * @callback module:api/DefaultApi~updateRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRuleGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the rule settings for the specified rule group. You use a rule group by reference in one or more firewall policies. When you modify a rule group, you modify all firewall policies that use the rule group. </p> <p>To update a rule group, first call <a>DescribeRuleGroup</a> to retrieve the current <a>RuleGroup</a> object, update the object as needed, and then provide the updated object to this call. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateRuleGroupRequest} updateRuleGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRuleGroupResponse}
     */
    updateRuleGroup(xAmzTarget, updateRuleGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRuleGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateRuleGroup");
      }
      // verify the required parameter 'updateRuleGroupRequest' is set
      if (updateRuleGroupRequest === undefined || updateRuleGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateRuleGroupRequest' when calling updateRuleGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRuleGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UpdateRuleGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubnetChangeProtection operation.
     * @callback module:api/DefaultApi~updateSubnetChangeProtectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSubnetChangeProtectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p/>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateSubnetChangeProtectionRequest} updateSubnetChangeProtectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSubnetChangeProtectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSubnetChangeProtectionResponse}
     */
    updateSubnetChangeProtection(xAmzTarget, updateSubnetChangeProtectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSubnetChangeProtectionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateSubnetChangeProtection");
      }
      // verify the required parameter 'updateSubnetChangeProtectionRequest' is set
      if (updateSubnetChangeProtectionRequest === undefined || updateSubnetChangeProtectionRequest === null) {
        throw new Error("Missing the required parameter 'updateSubnetChangeProtectionRequest' when calling updateSubnetChangeProtection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSubnetChangeProtectionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UpdateSubnetChangeProtection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTLSInspectionConfiguration operation.
     * @callback module:api/DefaultApi~updateTLSInspectionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTLSInspectionConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the TLS inspection configuration settings for the specified TLS inspection configuration. You use a TLS inspection configuration by reference in one or more firewall policies. When you modify a TLS inspection configuration, you modify all firewall policies that use the TLS inspection configuration. </p> <p>To update a TLS inspection configuration, first call <a>DescribeTLSInspectionConfiguration</a> to retrieve the current <a>TLSInspectionConfiguration</a> object, update the object as needed, and then provide the updated object to this call. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTLSInspectionConfigurationRequest} updateTLSInspectionConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTLSInspectionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTLSInspectionConfigurationResponse}
     */
    updateTLSInspectionConfiguration(xAmzTarget, updateTLSInspectionConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTLSInspectionConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTLSInspectionConfiguration");
      }
      // verify the required parameter 'updateTLSInspectionConfigurationRequest' is set
      if (updateTLSInspectionConfigurationRequest === undefined || updateTLSInspectionConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateTLSInspectionConfigurationRequest' when calling updateTLSInspectionConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTLSInspectionConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=NetworkFirewall_20201112.UpdateTLSInspectionConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
