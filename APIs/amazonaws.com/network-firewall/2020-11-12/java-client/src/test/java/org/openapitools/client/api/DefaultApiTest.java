/*
 * AWS Network Firewall
 * <p>This is the API Reference for Network Firewall. This guide is for developers who need detailed information about the Network Firewall API actions, data types, and errors. </p> <ul> <li> <p>The REST API requires you to handle connection details, such as calculating signatures, handling request retries, and error handling. For general information about using the Amazon Web Services REST APIs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a>. </p> <p>To access Network Firewall using the REST API endpoint: <code>https://network-firewall.&lt;region&gt;.amazonaws.com </code> </p> </li> <li> <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> </li> <li> <p>For descriptions of Network Firewall features, including and step-by-step instructions on how to use them through the Network Firewall console, see the <a href=\"https://docs.aws.amazon.com/network-firewall/latest/developerguide/\">Network Firewall Developer Guide</a>.</p> </li> </ul> <p>Network Firewall is a stateful, managed, network firewall and intrusion detection and prevention service for Amazon Virtual Private Cloud (Amazon VPC). With Network Firewall, you can filter traffic at the perimeter of your VPC. This includes filtering traffic going to and coming from an internet gateway, NAT gateway, or over VPN or Direct Connect. Network Firewall uses rules that are compatible with Suricata, a free, open source network analysis and threat detection engine. Network Firewall supports Suricata version 6.0.9. For information about Suricata, see the <a href=\"https://suricata.io/\">Suricata website</a>.</p> <p>You can use Network Firewall to monitor and protect your VPC traffic in a number of ways. The following are just a few examples: </p> <ul> <li> <p>Allow domains or IP addresses for known Amazon Web Services service endpoints, such as Amazon S3, and block all other forms of traffic.</p> </li> <li> <p>Use custom lists of known bad domains to limit the types of domain names that your applications can access.</p> </li> <li> <p>Perform deep packet inspection on traffic entering or leaving your VPC.</p> </li> <li> <p>Use stateful protocol detection to filter protocols like HTTPS, regardless of the port used.</p> </li> </ul> <p>To enable Network Firewall for your VPCs, you perform steps in both Amazon VPC and in Network Firewall. For information about using Amazon VPC, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/\">Amazon VPC User Guide</a>.</p> <p>To start using Network Firewall, do the following: </p> <ol> <li> <p>(Optional) If you don't already have a VPC that you want to protect, create it in Amazon VPC. </p> </li> <li> <p>In Amazon VPC, in each Availability Zone where you want to have a firewall endpoint, create a subnet for the sole use of Network Firewall. </p> </li> <li> <p>In Network Firewall, create stateless and stateful rule groups, to define the components of the network traffic filtering behavior that you want your firewall to have. </p> </li> <li> <p>In Network Firewall, create a firewall policy that uses your rule groups and specifies additional default traffic filtering behavior. </p> </li> <li> <p>In Network Firewall, create a firewall and specify your new firewall policy and VPC subnets. Network Firewall creates a firewall endpoint in each subnet that you specify, with the behavior that's defined in the firewall policy.</p> </li> <li> <p>In Amazon VPC, use ingress routing enhancements to route traffic through the new firewall endpoints.</p> </li> </ol>
 *
 * The version of the OpenAPI document: 2020-11-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateFirewallPolicyRequest;
import org.openapitools.client.model.AssociateFirewallPolicyResponse;
import org.openapitools.client.model.AssociateSubnetsRequest;
import org.openapitools.client.model.AssociateSubnetsResponse;
import org.openapitools.client.model.CreateFirewallPolicyRequest;
import org.openapitools.client.model.CreateFirewallPolicyResponse;
import org.openapitools.client.model.CreateFirewallRequest;
import org.openapitools.client.model.CreateFirewallResponse;
import org.openapitools.client.model.CreateRuleGroupRequest;
import org.openapitools.client.model.CreateRuleGroupResponse;
import org.openapitools.client.model.CreateTLSInspectionConfigurationRequest;
import org.openapitools.client.model.CreateTLSInspectionConfigurationResponse;
import org.openapitools.client.model.DeleteFirewallPolicyRequest;
import org.openapitools.client.model.DeleteFirewallPolicyResponse;
import org.openapitools.client.model.DeleteFirewallRequest;
import org.openapitools.client.model.DeleteFirewallResponse;
import org.openapitools.client.model.DeleteResourcePolicyRequest;
import org.openapitools.client.model.DeleteRuleGroupRequest;
import org.openapitools.client.model.DeleteRuleGroupResponse;
import org.openapitools.client.model.DeleteTLSInspectionConfigurationRequest;
import org.openapitools.client.model.DeleteTLSInspectionConfigurationResponse;
import org.openapitools.client.model.DescribeFirewallPolicyRequest;
import org.openapitools.client.model.DescribeFirewallPolicyResponse;
import org.openapitools.client.model.DescribeFirewallRequest;
import org.openapitools.client.model.DescribeFirewallResponse;
import org.openapitools.client.model.DescribeLoggingConfigurationRequest;
import org.openapitools.client.model.DescribeLoggingConfigurationResponse;
import org.openapitools.client.model.DescribeResourcePolicyRequest;
import org.openapitools.client.model.DescribeResourcePolicyResponse;
import org.openapitools.client.model.DescribeRuleGroupMetadataRequest;
import org.openapitools.client.model.DescribeRuleGroupMetadataResponse;
import org.openapitools.client.model.DescribeRuleGroupRequest;
import org.openapitools.client.model.DescribeRuleGroupResponse;
import org.openapitools.client.model.DescribeTLSInspectionConfigurationRequest;
import org.openapitools.client.model.DescribeTLSInspectionConfigurationResponse;
import org.openapitools.client.model.DisassociateSubnetsRequest;
import org.openapitools.client.model.DisassociateSubnetsResponse;
import org.openapitools.client.model.ListFirewallPoliciesRequest;
import org.openapitools.client.model.ListFirewallPoliciesResponse;
import org.openapitools.client.model.ListFirewallsRequest;
import org.openapitools.client.model.ListFirewallsResponse;
import org.openapitools.client.model.ListRuleGroupsRequest;
import org.openapitools.client.model.ListRuleGroupsResponse;
import org.openapitools.client.model.ListTLSInspectionConfigurationsRequest;
import org.openapitools.client.model.ListTLSInspectionConfigurationsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutResourcePolicyRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateFirewallDeleteProtectionRequest;
import org.openapitools.client.model.UpdateFirewallDeleteProtectionResponse;
import org.openapitools.client.model.UpdateFirewallDescriptionRequest;
import org.openapitools.client.model.UpdateFirewallDescriptionResponse;
import org.openapitools.client.model.UpdateFirewallEncryptionConfigurationRequest;
import org.openapitools.client.model.UpdateFirewallEncryptionConfigurationResponse;
import org.openapitools.client.model.UpdateFirewallPolicyChangeProtectionRequest;
import org.openapitools.client.model.UpdateFirewallPolicyChangeProtectionResponse;
import org.openapitools.client.model.UpdateFirewallPolicyRequest;
import org.openapitools.client.model.UpdateFirewallPolicyResponse;
import org.openapitools.client.model.UpdateLoggingConfigurationRequest;
import org.openapitools.client.model.UpdateLoggingConfigurationResponse;
import org.openapitools.client.model.UpdateRuleGroupRequest;
import org.openapitools.client.model.UpdateRuleGroupResponse;
import org.openapitools.client.model.UpdateSubnetChangeProtectionRequest;
import org.openapitools.client.model.UpdateSubnetChangeProtectionResponse;
import org.openapitools.client.model.UpdateTLSInspectionConfigurationRequest;
import org.openapitools.client.model.UpdateTLSInspectionConfigurationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Associates a &lt;a&gt;FirewallPolicy&lt;/a&gt; to a &lt;a&gt;Firewall&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;A firewall policy defines how to monitor and manage your VPC network traffic, using a collection of inspection rule groups and other settings. Each firewall requires one firewall policy association, and you can use the same firewall policy for multiple firewalls. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateFirewallPolicyTest() throws ApiException {
        String xAmzTarget = null;
        AssociateFirewallPolicyRequest associateFirewallPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateFirewallPolicyResponse response = api.associateFirewallPolicy(xAmzTarget, associateFirewallPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates the specified subnets in the Amazon VPC to the firewall. You can specify one subnet for each of the Availability Zones that the VPC spans. &lt;/p&gt; &lt;p&gt;This request creates an Network Firewall firewall endpoint in each of the subnets. To enable the firewall&#39;s protections, you must also modify the VPC&#39;s route tables for each subnet&#39;s Availability Zone, to redirect the traffic that&#39;s coming into and going out of the zone through the firewall endpoint. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateSubnetsTest() throws ApiException {
        String xAmzTarget = null;
        AssociateSubnetsRequest associateSubnetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateSubnetsResponse response = api.associateSubnets(xAmzTarget, associateSubnetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Network Firewall &lt;a&gt;Firewall&lt;/a&gt; and accompanying &lt;a&gt;FirewallStatus&lt;/a&gt; for a VPC. &lt;/p&gt; &lt;p&gt;The firewall defines the configuration settings for an Network Firewall firewall. The settings that you can define at creation include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. &lt;/p&gt; &lt;p&gt;After you create a firewall, you can provide additional settings, like the logging configuration. &lt;/p&gt; &lt;p&gt;To update the settings for a firewall, you use the operations that apply to the settings themselves, for example &lt;a&gt;UpdateLoggingConfiguration&lt;/a&gt;, &lt;a&gt;AssociateSubnets&lt;/a&gt;, and &lt;a&gt;UpdateFirewallDeleteProtection&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;To manage a firewall&#39;s tags, use the standard Amazon Web Services resource tagging operations, &lt;a&gt;ListTagsForResource&lt;/a&gt;, &lt;a&gt;TagResource&lt;/a&gt;, and &lt;a&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To retrieve information about firewalls, use &lt;a&gt;ListFirewalls&lt;/a&gt; and &lt;a&gt;DescribeFirewall&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFirewallTest() throws ApiException {
        String xAmzTarget = null;
        CreateFirewallRequest createFirewallRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFirewallResponse response = api.createFirewall(xAmzTarget, createFirewallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates the firewall policy for the firewall according to the specifications. &lt;/p&gt; &lt;p&gt;An Network Firewall firewall policy defines the behavior of a firewall, in a collection of stateless and stateful rule groups and other settings. You can use one firewall policy for multiple firewalls. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFirewallPolicyTest() throws ApiException {
        String xAmzTarget = null;
        CreateFirewallPolicyRequest createFirewallPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFirewallPolicyResponse response = api.createFirewallPolicy(xAmzTarget, createFirewallPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates the specified stateless or stateful rule group, which includes the rules for network traffic inspection, a capacity setting, and tags. &lt;/p&gt; &lt;p&gt;You provide your rule group specification in your request using either &lt;code&gt;RuleGroup&lt;/code&gt; or &lt;code&gt;Rules&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRuleGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateRuleGroupRequest createRuleGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRuleGroupResponse response = api.createRuleGroup(xAmzTarget, createRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Network Firewall TLS inspection configuration. A TLS inspection configuration contains the Certificate Manager certificate references that Network Firewall uses to decrypt and re-encrypt inbound traffic.&lt;/p&gt; &lt;p&gt;After you create a TLS inspection configuration, you associate it with a firewall policy.&lt;/p&gt; &lt;p&gt;To update the settings for a TLS inspection configuration, use &lt;a&gt;UpdateTLSInspectionConfiguration&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To manage a TLS inspection configuration&#39;s tags, use the standard Amazon Web Services resource tagging operations, &lt;a&gt;ListTagsForResource&lt;/a&gt;, &lt;a&gt;TagResource&lt;/a&gt;, and &lt;a&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To retrieve information about TLS inspection configurations, use &lt;a&gt;ListTLSInspectionConfigurations&lt;/a&gt; and &lt;a&gt;DescribeTLSInspectionConfiguration&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For more information about TLS inspection configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html\&quot;&gt;Decrypting SSL/TLS traffic with TLS inspection configurations&lt;/a&gt; in the &lt;i&gt;Network Firewall Developer Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTLSInspectionConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        CreateTLSInspectionConfigurationRequest createTLSInspectionConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTLSInspectionConfigurationResponse response = api.createTLSInspectionConfiguration(xAmzTarget, createTLSInspectionConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified &lt;a&gt;Firewall&lt;/a&gt; and its &lt;a&gt;FirewallStatus&lt;/a&gt;. This operation requires the firewall&#39;s &lt;code&gt;DeleteProtection&lt;/code&gt; flag to be &lt;code&gt;FALSE&lt;/code&gt;. You can&#39;t revert this operation. &lt;/p&gt; &lt;p&gt;You can check whether a firewall is in use by reviewing the route tables for the Availability Zones where you have firewall subnet mappings. Retrieve the subnet mappings by calling &lt;a&gt;DescribeFirewall&lt;/a&gt;. You define and update the route tables through Amazon VPC. As needed, update the route tables for the zones to remove the firewall endpoints. When the route tables no longer use the firewall endpoints, you can remove the firewall safely.&lt;/p&gt; &lt;p&gt;To delete a firewall, remove the delete protection if you need to using &lt;a&gt;UpdateFirewallDeleteProtection&lt;/a&gt;, then delete the firewall by calling &lt;a&gt;DeleteFirewall&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFirewallTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFirewallRequest deleteFirewallRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteFirewallResponse response = api.deleteFirewall(xAmzTarget, deleteFirewallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified &lt;a&gt;FirewallPolicy&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFirewallPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFirewallPolicyRequest deleteFirewallPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteFirewallPolicyResponse response = api.deleteFirewallPolicy(xAmzTarget, deleteFirewallPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a resource policy that you created in a &lt;a&gt;PutResourcePolicy&lt;/a&gt; request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResourcePolicyRequest deleteResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteResourcePolicy(xAmzTarget, deleteResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified &lt;a&gt;RuleGroup&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRuleGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRuleGroupRequest deleteRuleGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRuleGroupResponse response = api.deleteRuleGroup(xAmzTarget, deleteRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified &lt;a&gt;TLSInspectionConfiguration&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTLSInspectionConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTLSInspectionConfigurationRequest deleteTLSInspectionConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTLSInspectionConfigurationResponse response = api.deleteTLSInspectionConfiguration(xAmzTarget, deleteTLSInspectionConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the data objects for the specified firewall. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFirewallTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFirewallRequest describeFirewallRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFirewallResponse response = api.describeFirewall(xAmzTarget, describeFirewallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the data objects for the specified firewall policy. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFirewallPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFirewallPolicyRequest describeFirewallPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFirewallPolicyResponse response = api.describeFirewallPolicy(xAmzTarget, describeFirewallPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the logging configuration for the specified firewall. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeLoggingConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeLoggingConfigurationRequest describeLoggingConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLoggingConfigurationResponse response = api.describeLoggingConfiguration(xAmzTarget, describeLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a resource policy that you created in a &lt;a&gt;PutResourcePolicy&lt;/a&gt; request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DescribeResourcePolicyRequest describeResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeResourcePolicyResponse response = api.describeResourcePolicy(xAmzTarget, describeResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the data objects for the specified rule group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRuleGroupTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRuleGroupRequest describeRuleGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRuleGroupResponse response = api.describeRuleGroup(xAmzTarget, describeRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * High-level information about a rule group, returned by operations like create and describe. You can use the information provided in the metadata to retrieve and manage a rule group. You can retrieve all objects for a rule group by calling &lt;a&gt;DescribeRuleGroup&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRuleGroupMetadataTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRuleGroupMetadataRequest describeRuleGroupMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRuleGroupMetadataResponse response = api.describeRuleGroupMetadata(xAmzTarget, describeRuleGroupMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the data objects for the specified TLS inspection configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTLSInspectionConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTLSInspectionConfigurationRequest describeTLSInspectionConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTLSInspectionConfigurationResponse response = api.describeTLSInspectionConfiguration(xAmzTarget, describeTLSInspectionConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified subnet associations from the firewall. This removes the firewall endpoints from the subnets and removes any network filtering protections that the endpoints were providing. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateSubnetsTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateSubnetsRequest disassociateSubnetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateSubnetsResponse response = api.disassociateSubnets(xAmzTarget, disassociateSubnetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the metadata for the firewall policies that you have defined. Depending on your setting for max results and the number of firewall policies, a single call might not return the full list. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFirewallPoliciesTest() throws ApiException {
        String xAmzTarget = null;
        ListFirewallPoliciesRequest listFirewallPoliciesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFirewallPoliciesResponse response = api.listFirewallPolicies(xAmzTarget, listFirewallPoliciesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the metadata for the firewalls that you have defined. If you provide VPC identifiers in your request, this returns only the firewalls for those VPCs.&lt;/p&gt; &lt;p&gt;Depending on your setting for max results and the number of firewalls, a single call might not return the full list. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFirewallsTest() throws ApiException {
        String xAmzTarget = null;
        ListFirewallsRequest listFirewallsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFirewallsResponse response = api.listFirewalls(xAmzTarget, listFirewallsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the metadata for the rule groups that you have defined. Depending on your setting for max results and the number of rule groups, a single call might not return the full list. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRuleGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListRuleGroupsRequest listRuleGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListRuleGroupsResponse response = api.listRuleGroups(xAmzTarget, listRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the metadata for the TLS inspection configurations that you have defined. Depending on your setting for max results and the number of TLS inspection configurations, a single call might not return the full list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTLSInspectionConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        ListTLSInspectionConfigurationsRequest listTLSInspectionConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTLSInspectionConfigurationsResponse response = api.listTLSInspectionConfigurations(xAmzTarget, listTLSInspectionConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the tags associated with the specified resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \&quot;customer\&quot; and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.&lt;/p&gt; &lt;p&gt;You can tag the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall policies, and rule groups. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates an IAM policy for your rule group or firewall policy. Use this to share rule groups and firewall policies between accounts. This operation works in conjunction with the Amazon Web Services Resource Access Manager (RAM) service to manage resource sharing for Network Firewall. &lt;/p&gt; &lt;p&gt;Use this operation to create or update a resource policy for your rule group or firewall policy. In the policy, you specify the accounts that you want to share the resource with and the operations that you want the accounts to be able to perform. &lt;/p&gt; &lt;p&gt;When you add an account in the resource policy, you then run the following Resource Access Manager (RAM) operations to access and accept the shared rule group or firewall policy. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ram/latest/APIReference/API_GetResourceShareInvitations.html\&quot;&gt;GetResourceShareInvitations&lt;/a&gt; - Returns the Amazon Resource Names (ARNs) of the resource share invitations. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ram/latest/APIReference/API_AcceptResourceShareInvitation.html\&quot;&gt;AcceptResourceShareInvitation&lt;/a&gt; - Accepts the share invitation for a specified resource share. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For additional information about resource sharing using RAM, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ram/latest/userguide/what-is.html\&quot;&gt;Resource Access Manager User Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutResourcePolicyRequest putResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putResourcePolicy(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds the specified tags to the specified resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \&quot;customer\&quot; and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.&lt;/p&gt; &lt;p&gt;You can tag the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall policies, and rule groups. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes the tags with the specified keys from the specified resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to \&quot;customer\&quot; and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.&lt;/p&gt; &lt;p&gt;You can manage tags for the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall policies, and rule groups. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the flag, &lt;code&gt;DeleteProtection&lt;/code&gt;, which indicates whether it is possible to delete the firewall. If the flag is set to &lt;code&gt;TRUE&lt;/code&gt;, the firewall is protected against deletion. This setting helps protect against accidentally deleting a firewall that&#39;s in use. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFirewallDeleteProtectionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFirewallDeleteProtectionRequest updateFirewallDeleteProtectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFirewallDeleteProtectionResponse response = api.updateFirewallDeleteProtection(xAmzTarget, updateFirewallDeleteProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the description for the specified firewall. Use the description to help you identify the firewall when you&#39;re working with it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFirewallDescriptionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFirewallDescriptionRequest updateFirewallDescriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFirewallDescriptionResponse response = api.updateFirewallDescription(xAmzTarget, updateFirewallDescriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A complex type that contains settings for encryption of your firewall resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFirewallEncryptionConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFirewallEncryptionConfigurationRequest updateFirewallEncryptionConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFirewallEncryptionConfigurationResponse response = api.updateFirewallEncryptionConfiguration(xAmzTarget, updateFirewallEncryptionConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the properties of the specified firewall policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFirewallPolicyTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFirewallPolicyRequest updateFirewallPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFirewallPolicyResponse response = api.updateFirewallPolicy(xAmzTarget, updateFirewallPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the flag, &lt;code&gt;ChangeProtection&lt;/code&gt;, which indicates whether it is possible to change the firewall. If the flag is set to &lt;code&gt;TRUE&lt;/code&gt;, the firewall is protected from changes. This setting helps protect against accidentally changing a firewall that&#39;s in use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFirewallPolicyChangeProtectionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFirewallPolicyChangeProtectionRequest updateFirewallPolicyChangeProtectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFirewallPolicyChangeProtectionResponse response = api.updateFirewallPolicyChangeProtection(xAmzTarget, updateFirewallPolicyChangeProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the logging configuration for the specified firewall. &lt;/p&gt; &lt;p&gt;To change the logging configuration, retrieve the &lt;a&gt;LoggingConfiguration&lt;/a&gt; by calling &lt;a&gt;DescribeLoggingConfiguration&lt;/a&gt;, then change it and provide the modified object to this update call. You must change the logging configuration one &lt;a&gt;LogDestinationConfig&lt;/a&gt; at a time inside the retrieved &lt;a&gt;LoggingConfiguration&lt;/a&gt; object. &lt;/p&gt; &lt;p&gt;You can perform only one of the following actions in any call to &lt;code&gt;UpdateLoggingConfiguration&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Create a new log destination object by adding a single &lt;code&gt;LogDestinationConfig&lt;/code&gt; array element to &lt;code&gt;LogDestinationConfigs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Delete a log destination object by removing a single &lt;code&gt;LogDestinationConfig&lt;/code&gt; array element from &lt;code&gt;LogDestinationConfigs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the &lt;code&gt;LogDestination&lt;/code&gt; setting in a single &lt;code&gt;LogDestinationConfig&lt;/code&gt; array element.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can&#39;t change the &lt;code&gt;LogDestinationType&lt;/code&gt; or &lt;code&gt;LogType&lt;/code&gt; in a &lt;code&gt;LogDestinationConfig&lt;/code&gt;. To change these settings, delete the existing &lt;code&gt;LogDestinationConfig&lt;/code&gt; object and create a new one, using two separate calls to this update operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLoggingConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateLoggingConfigurationRequest updateLoggingConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateLoggingConfigurationResponse response = api.updateLoggingConfiguration(xAmzTarget, updateLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the rule settings for the specified rule group. You use a rule group by reference in one or more firewall policies. When you modify a rule group, you modify all firewall policies that use the rule group. &lt;/p&gt; &lt;p&gt;To update a rule group, first call &lt;a&gt;DescribeRuleGroup&lt;/a&gt; to retrieve the current &lt;a&gt;RuleGroup&lt;/a&gt; object, update the object as needed, and then provide the updated object to this call. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRuleGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateRuleGroupRequest updateRuleGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRuleGroupResponse response = api.updateRuleGroup(xAmzTarget, updateRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubnetChangeProtectionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateSubnetChangeProtectionRequest updateSubnetChangeProtectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSubnetChangeProtectionResponse response = api.updateSubnetChangeProtection(xAmzTarget, updateSubnetChangeProtectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the TLS inspection configuration settings for the specified TLS inspection configuration. You use a TLS inspection configuration by reference in one or more firewall policies. When you modify a TLS inspection configuration, you modify all firewall policies that use the TLS inspection configuration. &lt;/p&gt; &lt;p&gt;To update a TLS inspection configuration, first call &lt;a&gt;DescribeTLSInspectionConfiguration&lt;/a&gt; to retrieve the current &lt;a&gt;TLSInspectionConfiguration&lt;/a&gt; object, update the object as needed, and then provide the updated object to this call. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTLSInspectionConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTLSInspectionConfigurationRequest updateTLSInspectionConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTLSInspectionConfigurationResponse response = api.updateTLSInspectionConfiguration(xAmzTarget, updateTLSInspectionConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
