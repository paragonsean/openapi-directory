/**
 * AWS Network Firewall
 * <p>This is the API Reference for Network Firewall. This guide is for developers who need detailed information about the Network Firewall API actions, data types, and errors. </p> <ul> <li> <p>The REST API requires you to handle connection details, such as calculating signatures, handling request retries, and error handling. For general information about using the Amazon Web Services REST APIs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a>. </p> <p>To access Network Firewall using the REST API endpoint: <code>https://network-firewall.&lt;region&gt;.amazonaws.com </code> </p> </li> <li> <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> </li> <li> <p>For descriptions of Network Firewall features, including and step-by-step instructions on how to use them through the Network Firewall console, see the <a href=\"https://docs.aws.amazon.com/network-firewall/latest/developerguide/\">Network Firewall Developer Guide</a>.</p> </li> </ul> <p>Network Firewall is a stateful, managed, network firewall and intrusion detection and prevention service for Amazon Virtual Private Cloud (Amazon VPC). With Network Firewall, you can filter traffic at the perimeter of your VPC. This includes filtering traffic going to and coming from an internet gateway, NAT gateway, or over VPN or Direct Connect. Network Firewall uses rules that are compatible with Suricata, a free, open source network analysis and threat detection engine. Network Firewall supports Suricata version 6.0.9. For information about Suricata, see the <a href=\"https://suricata.io/\">Suricata website</a>.</p> <p>You can use Network Firewall to monitor and protect your VPC traffic in a number of ways. The following are just a few examples: </p> <ul> <li> <p>Allow domains or IP addresses for known Amazon Web Services service endpoints, such as Amazon S3, and block all other forms of traffic.</p> </li> <li> <p>Use custom lists of known bad domains to limit the types of domain names that your applications can access.</p> </li> <li> <p>Perform deep packet inspection on traffic entering or leaving your VPC.</p> </li> <li> <p>Use stateful protocol detection to filter protocols like HTTPS, regardless of the port used.</p> </li> </ul> <p>To enable Network Firewall for your VPCs, you perform steps in both Amazon VPC and in Network Firewall. For information about using Amazon VPC, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/\">Amazon VPC User Guide</a>.</p> <p>To start using Network Firewall, do the following: </p> <ol> <li> <p>(Optional) If you don't already have a VPC that you want to protect, create it in Amazon VPC. </p> </li> <li> <p>In Amazon VPC, in each Availability Zone where you want to have a firewall endpoint, create a subnet for the sole use of Network Firewall. </p> </li> <li> <p>In Network Firewall, create stateless and stateful rule groups, to define the components of the network traffic filtering behavior that you want your firewall to have. </p> </li> <li> <p>In Network Firewall, create a firewall policy that uses your rule groups and specifies additional default traffic filtering behavior. </p> </li> <li> <p>In Network Firewall, create a firewall and specify your new firewall policy and VPC subnets. Network Firewall creates a firewall endpoint in each subnet that you specify, with the behavior that's defined in the firewall policy.</p> </li> <li> <p>In Amazon VPC, use ingress routing enhancements to route traffic through the new firewall endpoints.</p> </li> </ol>
 *
 * The version of the OpenAPI document: 2020-11-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleGroupResponse::OAIRuleGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleGroupResponse::OAIRuleGroupResponse() {
    this->initializeModel();
}

OAIRuleGroupResponse::~OAIRuleGroupResponse() {}

void OAIRuleGroupResponse::initializeModel() {

    m_rule_group_arn_isSet = false;
    m_rule_group_arn_isValid = false;

    m_rule_group_name_isSet = false;
    m_rule_group_name_isValid = false;

    m_rule_group_id_isSet = false;
    m_rule_group_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_rule_group_status_isSet = false;
    m_rule_group_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_consumed_capacity_isSet = false;
    m_consumed_capacity_isValid = false;

    m_number_of_associations_isSet = false;
    m_number_of_associations_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;

    m_source_metadata_isSet = false;
    m_source_metadata_isValid = false;

    m_sns_topic_isSet = false;
    m_sns_topic_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;
}

void OAIRuleGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleGroupResponse::fromJsonObject(QJsonObject json) {

    m_rule_group_arn_isValid = ::OpenAPI::fromJsonValue(m_rule_group_arn, json[QString("RuleGroupArn")]);
    m_rule_group_arn_isSet = !json[QString("RuleGroupArn")].isNull() && m_rule_group_arn_isValid;

    m_rule_group_name_isValid = ::OpenAPI::fromJsonValue(m_rule_group_name, json[QString("RuleGroupName")]);
    m_rule_group_name_isSet = !json[QString("RuleGroupName")].isNull() && m_rule_group_name_isValid;

    m_rule_group_id_isValid = ::OpenAPI::fromJsonValue(m_rule_group_id, json[QString("RuleGroupId")]);
    m_rule_group_id_isSet = !json[QString("RuleGroupId")].isNull() && m_rule_group_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("Capacity")]);
    m_capacity_isSet = !json[QString("Capacity")].isNull() && m_capacity_isValid;

    m_rule_group_status_isValid = ::OpenAPI::fromJsonValue(m_rule_group_status, json[QString("RuleGroupStatus")]);
    m_rule_group_status_isSet = !json[QString("RuleGroupStatus")].isNull() && m_rule_group_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_consumed_capacity_isValid = ::OpenAPI::fromJsonValue(m_consumed_capacity, json[QString("ConsumedCapacity")]);
    m_consumed_capacity_isSet = !json[QString("ConsumedCapacity")].isNull() && m_consumed_capacity_isValid;

    m_number_of_associations_isValid = ::OpenAPI::fromJsonValue(m_number_of_associations, json[QString("NumberOfAssociations")]);
    m_number_of_associations_isSet = !json[QString("NumberOfAssociations")].isNull() && m_number_of_associations_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("EncryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("EncryptionConfiguration")].isNull() && m_encryption_configuration_isValid;

    m_source_metadata_isValid = ::OpenAPI::fromJsonValue(m_source_metadata, json[QString("SourceMetadata")]);
    m_source_metadata_isSet = !json[QString("SourceMetadata")].isNull() && m_source_metadata_isValid;

    m_sns_topic_isValid = ::OpenAPI::fromJsonValue(m_sns_topic, json[QString("SnsTopic")]);
    m_sns_topic_isSet = !json[QString("SnsTopic")].isNull() && m_sns_topic_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;
}

QString OAIRuleGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_group_arn_isSet) {
        obj.insert(QString("RuleGroupArn"), ::OpenAPI::toJsonValue(m_rule_group_arn));
    }
    if (m_rule_group_name_isSet) {
        obj.insert(QString("RuleGroupName"), ::OpenAPI::toJsonValue(m_rule_group_name));
    }
    if (m_rule_group_id_isSet) {
        obj.insert(QString("RuleGroupId"), ::OpenAPI::toJsonValue(m_rule_group_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_capacity_isSet) {
        obj.insert(QString("Capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_rule_group_status.isSet()) {
        obj.insert(QString("RuleGroupStatus"), ::OpenAPI::toJsonValue(m_rule_group_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_consumed_capacity_isSet) {
        obj.insert(QString("ConsumedCapacity"), ::OpenAPI::toJsonValue(m_consumed_capacity));
    }
    if (m_number_of_associations_isSet) {
        obj.insert(QString("NumberOfAssociations"), ::OpenAPI::toJsonValue(m_number_of_associations));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("EncryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    if (m_source_metadata.isSet()) {
        obj.insert(QString("SourceMetadata"), ::OpenAPI::toJsonValue(m_source_metadata));
    }
    if (m_sns_topic_isSet) {
        obj.insert(QString("SnsTopic"), ::OpenAPI::toJsonValue(m_sns_topic));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    return obj;
}

QString OAIRuleGroupResponse::getRuleGroupArn() const {
    return m_rule_group_arn;
}
void OAIRuleGroupResponse::setRuleGroupArn(const QString &rule_group_arn) {
    m_rule_group_arn = rule_group_arn;
    m_rule_group_arn_isSet = true;
}

bool OAIRuleGroupResponse::is_rule_group_arn_Set() const{
    return m_rule_group_arn_isSet;
}

bool OAIRuleGroupResponse::is_rule_group_arn_Valid() const{
    return m_rule_group_arn_isValid;
}

QString OAIRuleGroupResponse::getRuleGroupName() const {
    return m_rule_group_name;
}
void OAIRuleGroupResponse::setRuleGroupName(const QString &rule_group_name) {
    m_rule_group_name = rule_group_name;
    m_rule_group_name_isSet = true;
}

bool OAIRuleGroupResponse::is_rule_group_name_Set() const{
    return m_rule_group_name_isSet;
}

bool OAIRuleGroupResponse::is_rule_group_name_Valid() const{
    return m_rule_group_name_isValid;
}

QString OAIRuleGroupResponse::getRuleGroupId() const {
    return m_rule_group_id;
}
void OAIRuleGroupResponse::setRuleGroupId(const QString &rule_group_id) {
    m_rule_group_id = rule_group_id;
    m_rule_group_id_isSet = true;
}

bool OAIRuleGroupResponse::is_rule_group_id_Set() const{
    return m_rule_group_id_isSet;
}

bool OAIRuleGroupResponse::is_rule_group_id_Valid() const{
    return m_rule_group_id_isValid;
}

QString OAIRuleGroupResponse::getDescription() const {
    return m_description;
}
void OAIRuleGroupResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRuleGroupResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRuleGroupResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIRuleGroupType OAIRuleGroupResponse::getType() const {
    return m_type;
}
void OAIRuleGroupResponse::setType(const OAIRuleGroupType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRuleGroupResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRuleGroupResponse::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIRuleGroupResponse::getCapacity() const {
    return m_capacity;
}
void OAIRuleGroupResponse::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIRuleGroupResponse::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIRuleGroupResponse::is_capacity_Valid() const{
    return m_capacity_isValid;
}

OAIResourceStatus OAIRuleGroupResponse::getRuleGroupStatus() const {
    return m_rule_group_status;
}
void OAIRuleGroupResponse::setRuleGroupStatus(const OAIResourceStatus &rule_group_status) {
    m_rule_group_status = rule_group_status;
    m_rule_group_status_isSet = true;
}

bool OAIRuleGroupResponse::is_rule_group_status_Set() const{
    return m_rule_group_status_isSet;
}

bool OAIRuleGroupResponse::is_rule_group_status_Valid() const{
    return m_rule_group_status_isValid;
}

QList OAIRuleGroupResponse::getTags() const {
    return m_tags;
}
void OAIRuleGroupResponse::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRuleGroupResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRuleGroupResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIRuleGroupResponse::getConsumedCapacity() const {
    return m_consumed_capacity;
}
void OAIRuleGroupResponse::setConsumedCapacity(const qint32 &consumed_capacity) {
    m_consumed_capacity = consumed_capacity;
    m_consumed_capacity_isSet = true;
}

bool OAIRuleGroupResponse::is_consumed_capacity_Set() const{
    return m_consumed_capacity_isSet;
}

bool OAIRuleGroupResponse::is_consumed_capacity_Valid() const{
    return m_consumed_capacity_isValid;
}

qint32 OAIRuleGroupResponse::getNumberOfAssociations() const {
    return m_number_of_associations;
}
void OAIRuleGroupResponse::setNumberOfAssociations(const qint32 &number_of_associations) {
    m_number_of_associations = number_of_associations;
    m_number_of_associations_isSet = true;
}

bool OAIRuleGroupResponse::is_number_of_associations_Set() const{
    return m_number_of_associations_isSet;
}

bool OAIRuleGroupResponse::is_number_of_associations_Valid() const{
    return m_number_of_associations_isValid;
}

OAIRuleGroupResponse_EncryptionConfiguration OAIRuleGroupResponse::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAIRuleGroupResponse::setEncryptionConfiguration(const OAIRuleGroupResponse_EncryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAIRuleGroupResponse::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAIRuleGroupResponse::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

OAIRuleGroupResponse_SourceMetadata OAIRuleGroupResponse::getSourceMetadata() const {
    return m_source_metadata;
}
void OAIRuleGroupResponse::setSourceMetadata(const OAIRuleGroupResponse_SourceMetadata &source_metadata) {
    m_source_metadata = source_metadata;
    m_source_metadata_isSet = true;
}

bool OAIRuleGroupResponse::is_source_metadata_Set() const{
    return m_source_metadata_isSet;
}

bool OAIRuleGroupResponse::is_source_metadata_Valid() const{
    return m_source_metadata_isValid;
}

QString OAIRuleGroupResponse::getSnsTopic() const {
    return m_sns_topic;
}
void OAIRuleGroupResponse::setSnsTopic(const QString &sns_topic) {
    m_sns_topic = sns_topic;
    m_sns_topic_isSet = true;
}

bool OAIRuleGroupResponse::is_sns_topic_Set() const{
    return m_sns_topic_isSet;
}

bool OAIRuleGroupResponse::is_sns_topic_Valid() const{
    return m_sns_topic_isValid;
}

QDateTime OAIRuleGroupResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIRuleGroupResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIRuleGroupResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIRuleGroupResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAIRuleGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_group_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_associations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_group_arn_isValid && m_rule_group_name_isValid && m_rule_group_id_isValid && true;
}

} // namespace OpenAPI
