/**
 * AWS Network Firewall
 * <p>This is the API Reference for Network Firewall. This guide is for developers who need detailed information about the Network Firewall API actions, data types, and errors. </p> <ul> <li> <p>The REST API requires you to handle connection details, such as calculating signatures, handling request retries, and error handling. For general information about using the Amazon Web Services REST APIs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a>. </p> <p>To access Network Firewall using the REST API endpoint: <code>https://network-firewall.&lt;region&gt;.amazonaws.com </code> </p> </li> <li> <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> </li> <li> <p>For descriptions of Network Firewall features, including and step-by-step instructions on how to use them through the Network Firewall console, see the <a href=\"https://docs.aws.amazon.com/network-firewall/latest/developerguide/\">Network Firewall Developer Guide</a>.</p> </li> </ul> <p>Network Firewall is a stateful, managed, network firewall and intrusion detection and prevention service for Amazon Virtual Private Cloud (Amazon VPC). With Network Firewall, you can filter traffic at the perimeter of your VPC. This includes filtering traffic going to and coming from an internet gateway, NAT gateway, or over VPN or Direct Connect. Network Firewall uses rules that are compatible with Suricata, a free, open source network analysis and threat detection engine. Network Firewall supports Suricata version 6.0.9. For information about Suricata, see the <a href=\"https://suricata.io/\">Suricata website</a>.</p> <p>You can use Network Firewall to monitor and protect your VPC traffic in a number of ways. The following are just a few examples: </p> <ul> <li> <p>Allow domains or IP addresses for known Amazon Web Services service endpoints, such as Amazon S3, and block all other forms of traffic.</p> </li> <li> <p>Use custom lists of known bad domains to limit the types of domain names that your applications can access.</p> </li> <li> <p>Perform deep packet inspection on traffic entering or leaving your VPC.</p> </li> <li> <p>Use stateful protocol detection to filter protocols like HTTPS, regardless of the port used.</p> </li> </ul> <p>To enable Network Firewall for your VPCs, you perform steps in both Amazon VPC and in Network Firewall. For information about using Amazon VPC, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/\">Amazon VPC User Guide</a>.</p> <p>To start using Network Firewall, do the following: </p> <ol> <li> <p>(Optional) If you don't already have a VPC that you want to protect, create it in Amazon VPC. </p> </li> <li> <p>In Amazon VPC, in each Availability Zone where you want to have a firewall endpoint, create a subnet for the sole use of Network Firewall. </p> </li> <li> <p>In Network Firewall, create stateless and stateful rule groups, to define the components of the network traffic filtering behavior that you want your firewall to have. </p> </li> <li> <p>In Network Firewall, create a firewall policy that uses your rule groups and specifies additional default traffic filtering behavior. </p> </li> <li> <p>In Network Firewall, create a firewall and specify your new firewall policy and VPC subnets. Network Firewall creates a firewall endpoint in each subnet that you specify, with the behavior that's defined in the firewall policy.</p> </li> <li> <p>In Amazon VPC, use ingress routing enhancements to route traffic through the new firewall endpoints.</p> </li> </ol>
 *
 * The version of the OpenAPI document: 2020-11-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITLSInspectionConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITLSInspectionConfigurationResponse::OAITLSInspectionConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITLSInspectionConfigurationResponse::OAITLSInspectionConfigurationResponse() {
    this->initializeModel();
}

OAITLSInspectionConfigurationResponse::~OAITLSInspectionConfigurationResponse() {}

void OAITLSInspectionConfigurationResponse::initializeModel() {

    m_tls_inspection_configuration_arn_isSet = false;
    m_tls_inspection_configuration_arn_isValid = false;

    m_tls_inspection_configuration_name_isSet = false;
    m_tls_inspection_configuration_name_isValid = false;

    m_tls_inspection_configuration_id_isSet = false;
    m_tls_inspection_configuration_id_isValid = false;

    m_tls_inspection_configuration_status_isSet = false;
    m_tls_inspection_configuration_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_number_of_associations_isSet = false;
    m_number_of_associations_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;

    m_certificates_isSet = false;
    m_certificates_isValid = false;
}

void OAITLSInspectionConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITLSInspectionConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_tls_inspection_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_tls_inspection_configuration_arn, json[QString("TLSInspectionConfigurationArn")]);
    m_tls_inspection_configuration_arn_isSet = !json[QString("TLSInspectionConfigurationArn")].isNull() && m_tls_inspection_configuration_arn_isValid;

    m_tls_inspection_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_tls_inspection_configuration_name, json[QString("TLSInspectionConfigurationName")]);
    m_tls_inspection_configuration_name_isSet = !json[QString("TLSInspectionConfigurationName")].isNull() && m_tls_inspection_configuration_name_isValid;

    m_tls_inspection_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_tls_inspection_configuration_id, json[QString("TLSInspectionConfigurationId")]);
    m_tls_inspection_configuration_id_isSet = !json[QString("TLSInspectionConfigurationId")].isNull() && m_tls_inspection_configuration_id_isValid;

    m_tls_inspection_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_tls_inspection_configuration_status, json[QString("TLSInspectionConfigurationStatus")]);
    m_tls_inspection_configuration_status_isSet = !json[QString("TLSInspectionConfigurationStatus")].isNull() && m_tls_inspection_configuration_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_number_of_associations_isValid = ::OpenAPI::fromJsonValue(m_number_of_associations, json[QString("NumberOfAssociations")]);
    m_number_of_associations_isSet = !json[QString("NumberOfAssociations")].isNull() && m_number_of_associations_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("EncryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("EncryptionConfiguration")].isNull() && m_encryption_configuration_isValid;

    m_certificates_isValid = ::OpenAPI::fromJsonValue(m_certificates, json[QString("Certificates")]);
    m_certificates_isSet = !json[QString("Certificates")].isNull() && m_certificates_isValid;
}

QString OAITLSInspectionConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITLSInspectionConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_tls_inspection_configuration_arn_isSet) {
        obj.insert(QString("TLSInspectionConfigurationArn"), ::OpenAPI::toJsonValue(m_tls_inspection_configuration_arn));
    }
    if (m_tls_inspection_configuration_name_isSet) {
        obj.insert(QString("TLSInspectionConfigurationName"), ::OpenAPI::toJsonValue(m_tls_inspection_configuration_name));
    }
    if (m_tls_inspection_configuration_id_isSet) {
        obj.insert(QString("TLSInspectionConfigurationId"), ::OpenAPI::toJsonValue(m_tls_inspection_configuration_id));
    }
    if (m_tls_inspection_configuration_status.isSet()) {
        obj.insert(QString("TLSInspectionConfigurationStatus"), ::OpenAPI::toJsonValue(m_tls_inspection_configuration_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_number_of_associations_isSet) {
        obj.insert(QString("NumberOfAssociations"), ::OpenAPI::toJsonValue(m_number_of_associations));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("EncryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    if (m_certificates.isSet()) {
        obj.insert(QString("Certificates"), ::OpenAPI::toJsonValue(m_certificates));
    }
    return obj;
}

QString OAITLSInspectionConfigurationResponse::getTlsInspectionConfigurationArn() const {
    return m_tls_inspection_configuration_arn;
}
void OAITLSInspectionConfigurationResponse::setTlsInspectionConfigurationArn(const QString &tls_inspection_configuration_arn) {
    m_tls_inspection_configuration_arn = tls_inspection_configuration_arn;
    m_tls_inspection_configuration_arn_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_tls_inspection_configuration_arn_Set() const{
    return m_tls_inspection_configuration_arn_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_tls_inspection_configuration_arn_Valid() const{
    return m_tls_inspection_configuration_arn_isValid;
}

QString OAITLSInspectionConfigurationResponse::getTlsInspectionConfigurationName() const {
    return m_tls_inspection_configuration_name;
}
void OAITLSInspectionConfigurationResponse::setTlsInspectionConfigurationName(const QString &tls_inspection_configuration_name) {
    m_tls_inspection_configuration_name = tls_inspection_configuration_name;
    m_tls_inspection_configuration_name_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_tls_inspection_configuration_name_Set() const{
    return m_tls_inspection_configuration_name_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_tls_inspection_configuration_name_Valid() const{
    return m_tls_inspection_configuration_name_isValid;
}

QString OAITLSInspectionConfigurationResponse::getTlsInspectionConfigurationId() const {
    return m_tls_inspection_configuration_id;
}
void OAITLSInspectionConfigurationResponse::setTlsInspectionConfigurationId(const QString &tls_inspection_configuration_id) {
    m_tls_inspection_configuration_id = tls_inspection_configuration_id;
    m_tls_inspection_configuration_id_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_tls_inspection_configuration_id_Set() const{
    return m_tls_inspection_configuration_id_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_tls_inspection_configuration_id_Valid() const{
    return m_tls_inspection_configuration_id_isValid;
}

OAIResourceStatus OAITLSInspectionConfigurationResponse::getTlsInspectionConfigurationStatus() const {
    return m_tls_inspection_configuration_status;
}
void OAITLSInspectionConfigurationResponse::setTlsInspectionConfigurationStatus(const OAIResourceStatus &tls_inspection_configuration_status) {
    m_tls_inspection_configuration_status = tls_inspection_configuration_status;
    m_tls_inspection_configuration_status_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_tls_inspection_configuration_status_Set() const{
    return m_tls_inspection_configuration_status_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_tls_inspection_configuration_status_Valid() const{
    return m_tls_inspection_configuration_status_isValid;
}

QString OAITLSInspectionConfigurationResponse::getDescription() const {
    return m_description;
}
void OAITLSInspectionConfigurationResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_description_Valid() const{
    return m_description_isValid;
}

QList OAITLSInspectionConfigurationResponse::getTags() const {
    return m_tags;
}
void OAITLSInspectionConfigurationResponse::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAITLSInspectionConfigurationResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAITLSInspectionConfigurationResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

qint32 OAITLSInspectionConfigurationResponse::getNumberOfAssociations() const {
    return m_number_of_associations;
}
void OAITLSInspectionConfigurationResponse::setNumberOfAssociations(const qint32 &number_of_associations) {
    m_number_of_associations = number_of_associations;
    m_number_of_associations_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_number_of_associations_Set() const{
    return m_number_of_associations_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_number_of_associations_Valid() const{
    return m_number_of_associations_isValid;
}

OAIUpdateTLSInspectionConfigurationRequest_EncryptionConfiguration OAITLSInspectionConfigurationResponse::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAITLSInspectionConfigurationResponse::setEncryptionConfiguration(const OAIUpdateTLSInspectionConfigurationRequest_EncryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

QList OAITLSInspectionConfigurationResponse::getCertificates() const {
    return m_certificates;
}
void OAITLSInspectionConfigurationResponse::setCertificates(const QList &certificates) {
    m_certificates = certificates;
    m_certificates_isSet = true;
}

bool OAITLSInspectionConfigurationResponse::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool OAITLSInspectionConfigurationResponse::is_certificates_Valid() const{
    return m_certificates_isValid;
}

bool OAITLSInspectionConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tls_inspection_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_inspection_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_inspection_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_inspection_configuration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_associations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITLSInspectionConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tls_inspection_configuration_arn_isValid && m_tls_inspection_configuration_name_isValid && m_tls_inspection_configuration_id_isValid && true;
}

} // namespace OpenAPI
