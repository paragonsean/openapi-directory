/**
 * AWS Network Firewall
 * <p>This is the API Reference for Network Firewall. This guide is for developers who need detailed information about the Network Firewall API actions, data types, and errors. </p> <ul> <li> <p>The REST API requires you to handle connection details, such as calculating signatures, handling request retries, and error handling. For general information about using the Amazon Web Services REST APIs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-apis.html\">Amazon Web Services APIs</a>. </p> <p>To access Network Firewall using the REST API endpoint: <code>https://network-firewall.&lt;region&gt;.amazonaws.com </code> </p> </li> <li> <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> </li> <li> <p>For descriptions of Network Firewall features, including and step-by-step instructions on how to use them through the Network Firewall console, see the <a href=\"https://docs.aws.amazon.com/network-firewall/latest/developerguide/\">Network Firewall Developer Guide</a>.</p> </li> </ul> <p>Network Firewall is a stateful, managed, network firewall and intrusion detection and prevention service for Amazon Virtual Private Cloud (Amazon VPC). With Network Firewall, you can filter traffic at the perimeter of your VPC. This includes filtering traffic going to and coming from an internet gateway, NAT gateway, or over VPN or Direct Connect. Network Firewall uses rules that are compatible with Suricata, a free, open source network analysis and threat detection engine. Network Firewall supports Suricata version 6.0.9. For information about Suricata, see the <a href=\"https://suricata.io/\">Suricata website</a>.</p> <p>You can use Network Firewall to monitor and protect your VPC traffic in a number of ways. The following are just a few examples: </p> <ul> <li> <p>Allow domains or IP addresses for known Amazon Web Services service endpoints, such as Amazon S3, and block all other forms of traffic.</p> </li> <li> <p>Use custom lists of known bad domains to limit the types of domain names that your applications can access.</p> </li> <li> <p>Perform deep packet inspection on traffic entering or leaving your VPC.</p> </li> <li> <p>Use stateful protocol detection to filter protocols like HTTPS, regardless of the port used.</p> </li> </ul> <p>To enable Network Firewall for your VPCs, you perform steps in both Amazon VPC and in Network Firewall. For information about using Amazon VPC, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/\">Amazon VPC User Guide</a>.</p> <p>To start using Network Firewall, do the following: </p> <ol> <li> <p>(Optional) If you don't already have a VPC that you want to protect, create it in Amazon VPC. </p> </li> <li> <p>In Amazon VPC, in each Availability Zone where you want to have a firewall endpoint, create a subnet for the sole use of Network Firewall. </p> </li> <li> <p>In Network Firewall, create stateless and stateful rule groups, to define the components of the network traffic filtering behavior that you want your firewall to have. </p> </li> <li> <p>In Network Firewall, create a firewall policy that uses your rule groups and specifies additional default traffic filtering behavior. </p> </li> <li> <p>In Network Firewall, create a firewall and specify your new firewall policy and VPC subnets. Network Firewall creates a firewall endpoint in each subnet that you specify, with the behavior that's defined in the firewall policy.</p> </li> <li> <p>In Amazon VPC, use ingress routing enhancements to route traffic through the new firewall endpoints.</p> </li> </ol>
 *
 * The version of the OpenAPI document: 2020-11-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateFirewallPolicyRequest_FirewallPolicy.h
 *
 * 
 */

#ifndef OAIUpdateFirewallPolicyRequest_FirewallPolicy_H
#define OAIUpdateFirewallPolicyRequest_FirewallPolicy_H

#include <QJsonObject>

#include "OAIFirewallPolicy_PolicyVariables.h"
#include "OAIFirewallPolicy_StatefulEngineOptions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFirewallPolicy_StatefulEngineOptions;
class OAIFirewallPolicy_PolicyVariables;

class OAIUpdateFirewallPolicyRequest_FirewallPolicy : public OAIObject {
public:
    OAIUpdateFirewallPolicyRequest_FirewallPolicy();
    OAIUpdateFirewallPolicyRequest_FirewallPolicy(QString json);
    ~OAIUpdateFirewallPolicyRequest_FirewallPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getStatelessRuleGroupReferences() const;
    void setStatelessRuleGroupReferences(const QList &stateless_rule_group_references);
    bool is_stateless_rule_group_references_Set() const;
    bool is_stateless_rule_group_references_Valid() const;

    QList getStatelessDefaultActions() const;
    void setStatelessDefaultActions(const QList &stateless_default_actions);
    bool is_stateless_default_actions_Set() const;
    bool is_stateless_default_actions_Valid() const;

    QList getStatelessFragmentDefaultActions() const;
    void setStatelessFragmentDefaultActions(const QList &stateless_fragment_default_actions);
    bool is_stateless_fragment_default_actions_Set() const;
    bool is_stateless_fragment_default_actions_Valid() const;

    QList getStatelessCustomActions() const;
    void setStatelessCustomActions(const QList &stateless_custom_actions);
    bool is_stateless_custom_actions_Set() const;
    bool is_stateless_custom_actions_Valid() const;

    QList getStatefulRuleGroupReferences() const;
    void setStatefulRuleGroupReferences(const QList &stateful_rule_group_references);
    bool is_stateful_rule_group_references_Set() const;
    bool is_stateful_rule_group_references_Valid() const;

    QList getStatefulDefaultActions() const;
    void setStatefulDefaultActions(const QList &stateful_default_actions);
    bool is_stateful_default_actions_Set() const;
    bool is_stateful_default_actions_Valid() const;

    OAIFirewallPolicy_StatefulEngineOptions getStatefulEngineOptions() const;
    void setStatefulEngineOptions(const OAIFirewallPolicy_StatefulEngineOptions &stateful_engine_options);
    bool is_stateful_engine_options_Set() const;
    bool is_stateful_engine_options_Valid() const;

    QString getTlsInspectionConfigurationArn() const;
    void setTlsInspectionConfigurationArn(const QString &tls_inspection_configuration_arn);
    bool is_tls_inspection_configuration_arn_Set() const;
    bool is_tls_inspection_configuration_arn_Valid() const;

    OAIFirewallPolicy_PolicyVariables getPolicyVariables() const;
    void setPolicyVariables(const OAIFirewallPolicy_PolicyVariables &policy_variables);
    bool is_policy_variables_Set() const;
    bool is_policy_variables_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_stateless_rule_group_references;
    bool m_stateless_rule_group_references_isSet;
    bool m_stateless_rule_group_references_isValid;

    QList m_stateless_default_actions;
    bool m_stateless_default_actions_isSet;
    bool m_stateless_default_actions_isValid;

    QList m_stateless_fragment_default_actions;
    bool m_stateless_fragment_default_actions_isSet;
    bool m_stateless_fragment_default_actions_isValid;

    QList m_stateless_custom_actions;
    bool m_stateless_custom_actions_isSet;
    bool m_stateless_custom_actions_isValid;

    QList m_stateful_rule_group_references;
    bool m_stateful_rule_group_references_isSet;
    bool m_stateful_rule_group_references_isValid;

    QList m_stateful_default_actions;
    bool m_stateful_default_actions_isSet;
    bool m_stateful_default_actions_isValid;

    OAIFirewallPolicy_StatefulEngineOptions m_stateful_engine_options;
    bool m_stateful_engine_options_isSet;
    bool m_stateful_engine_options_isValid;

    QString m_tls_inspection_configuration_arn;
    bool m_tls_inspection_configuration_arn_isSet;
    bool m_tls_inspection_configuration_arn_isValid;

    OAIFirewallPolicy_PolicyVariables m_policy_variables;
    bool m_policy_variables_isSet;
    bool m_policy_variables_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateFirewallPolicyRequest_FirewallPolicy)

#endif // OAIUpdateFirewallPolicyRequest_FirewallPolicy_H
