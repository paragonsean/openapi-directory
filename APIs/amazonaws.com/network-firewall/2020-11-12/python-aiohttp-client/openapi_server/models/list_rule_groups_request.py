# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_managed_status import ResourceManagedStatus
from openapi_server.models.resource_managed_type import ResourceManagedType
from openapi_server.models.rule_group_type import RuleGroupType
from openapi_server import util


class ListRuleGroupsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None, scope: ResourceManagedStatus=None, managed_type: ResourceManagedType=None, type: RuleGroupType=None):
        """ListRuleGroupsRequest - a model defined in OpenAPI

        :param next_token: The next_token of this ListRuleGroupsRequest.
        :param max_results: The max_results of this ListRuleGroupsRequest.
        :param scope: The scope of this ListRuleGroupsRequest.
        :param managed_type: The managed_type of this ListRuleGroupsRequest.
        :param type: The type of this ListRuleGroupsRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int,
            'scope': ResourceManagedStatus,
            'managed_type': ResourceManagedType,
            'type': RuleGroupType
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'scope': 'Scope',
            'managed_type': 'ManagedType',
            'type': 'Type'
        }

        self._next_token = next_token
        self._max_results = max_results
        self._scope = scope
        self._managed_type = managed_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRuleGroupsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRuleGroupsRequest of this ListRuleGroupsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListRuleGroupsRequest.


        :return: The next_token of this ListRuleGroupsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListRuleGroupsRequest.


        :param next_token: The next_token of this ListRuleGroupsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListRuleGroupsRequest.


        :return: The max_results of this ListRuleGroupsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListRuleGroupsRequest.


        :param max_results: The max_results of this ListRuleGroupsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def scope(self):
        """Gets the scope of this ListRuleGroupsRequest.


        :return: The scope of this ListRuleGroupsRequest.
        :rtype: ResourceManagedStatus
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ListRuleGroupsRequest.


        :param scope: The scope of this ListRuleGroupsRequest.
        :type scope: ResourceManagedStatus
        """

        self._scope = scope

    @property
    def managed_type(self):
        """Gets the managed_type of this ListRuleGroupsRequest.


        :return: The managed_type of this ListRuleGroupsRequest.
        :rtype: ResourceManagedType
        """
        return self._managed_type

    @managed_type.setter
    def managed_type(self, managed_type):
        """Sets the managed_type of this ListRuleGroupsRequest.


        :param managed_type: The managed_type of this ListRuleGroupsRequest.
        :type managed_type: ResourceManagedType
        """

        self._managed_type = managed_type

    @property
    def type(self):
        """Gets the type of this ListRuleGroupsRequest.


        :return: The type of this ListRuleGroupsRequest.
        :rtype: RuleGroupType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListRuleGroupsRequest.


        :param type: The type of this ListRuleGroupsRequest.
        :type type: RuleGroupType
        """

        self._type = type
