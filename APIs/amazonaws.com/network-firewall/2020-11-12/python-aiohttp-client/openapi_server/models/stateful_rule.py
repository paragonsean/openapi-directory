# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stateful_action import StatefulAction
from openapi_server.models.stateful_rule_header import StatefulRuleHeader
from openapi_server import util


class StatefulRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: StatefulAction=None, header: StatefulRuleHeader=None, rule_options: List=None):
        """StatefulRule - a model defined in OpenAPI

        :param action: The action of this StatefulRule.
        :param header: The header of this StatefulRule.
        :param rule_options: The rule_options of this StatefulRule.
        """
        self.openapi_types = {
            'action': StatefulAction,
            'header': StatefulRuleHeader,
            'rule_options': List
        }

        self.attribute_map = {
            'action': 'Action',
            'header': 'Header',
            'rule_options': 'RuleOptions'
        }

        self._action = action
        self._header = header
        self._rule_options = rule_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatefulRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatefulRule of this StatefulRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this StatefulRule.


        :return: The action of this StatefulRule.
        :rtype: StatefulAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this StatefulRule.


        :param action: The action of this StatefulRule.
        :type action: StatefulAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def header(self):
        """Gets the header of this StatefulRule.


        :return: The header of this StatefulRule.
        :rtype: StatefulRuleHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this StatefulRule.


        :param header: The header of this StatefulRule.
        :type header: StatefulRuleHeader
        """
        if header is None:
            raise ValueError("Invalid value for `header`, must not be `None`")

        self._header = header

    @property
    def rule_options(self):
        """Gets the rule_options of this StatefulRule.


        :return: The rule_options of this StatefulRule.
        :rtype: List
        """
        return self._rule_options

    @rule_options.setter
    def rule_options(self, rule_options):
        """Sets the rule_options of this StatefulRule.


        :param rule_options: The rule_options of this StatefulRule.
        :type rule_options: List
        """
        if rule_options is None:
            raise ValueError("Invalid value for `rule_options`, must not be `None`")

        self._rule_options = rule_options
