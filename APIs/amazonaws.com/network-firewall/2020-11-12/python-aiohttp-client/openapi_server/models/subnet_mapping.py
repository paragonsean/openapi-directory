# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_address_type import IPAddressType
from openapi_server import util


class SubnetMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subnet_id: str=None, ip_address_type: IPAddressType=None):
        """SubnetMapping - a model defined in OpenAPI

        :param subnet_id: The subnet_id of this SubnetMapping.
        :param ip_address_type: The ip_address_type of this SubnetMapping.
        """
        self.openapi_types = {
            'subnet_id': str,
            'ip_address_type': IPAddressType
        }

        self.attribute_map = {
            'subnet_id': 'SubnetId',
            'ip_address_type': 'IPAddressType'
        }

        self._subnet_id = subnet_id
        self._ip_address_type = ip_address_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubnetMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubnetMapping of this SubnetMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subnet_id(self):
        """Gets the subnet_id of this SubnetMapping.


        :return: The subnet_id of this SubnetMapping.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this SubnetMapping.


        :param subnet_id: The subnet_id of this SubnetMapping.
        :type subnet_id: str
        """
        if subnet_id is None:
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")

        self._subnet_id = subnet_id

    @property
    def ip_address_type(self):
        """Gets the ip_address_type of this SubnetMapping.


        :return: The ip_address_type of this SubnetMapping.
        :rtype: IPAddressType
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type):
        """Sets the ip_address_type of this SubnetMapping.


        :param ip_address_type: The ip_address_type of this SubnetMapping.
        :type ip_address_type: IPAddressType
        """

        self._ip_address_type = ip_address_type
