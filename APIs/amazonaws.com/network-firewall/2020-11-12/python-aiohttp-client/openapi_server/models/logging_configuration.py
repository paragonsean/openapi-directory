# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoggingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_destination_configs: List=None):
        """LoggingConfiguration - a model defined in OpenAPI

        :param log_destination_configs: The log_destination_configs of this LoggingConfiguration.
        """
        self.openapi_types = {
            'log_destination_configs': List
        }

        self.attribute_map = {
            'log_destination_configs': 'LogDestinationConfigs'
        }

        self._log_destination_configs = log_destination_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggingConfiguration of this LoggingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_destination_configs(self):
        """Gets the log_destination_configs of this LoggingConfiguration.


        :return: The log_destination_configs of this LoggingConfiguration.
        :rtype: List
        """
        return self._log_destination_configs

    @log_destination_configs.setter
    def log_destination_configs(self, log_destination_configs):
        """Sets the log_destination_configs of this LoggingConfiguration.


        :param log_destination_configs: The log_destination_configs of this LoggingConfiguration.
        :type log_destination_configs: List
        """
        if log_destination_configs is None:
            raise ValueError("Invalid value for `log_destination_configs`, must not be `None`")

        self._log_destination_configs = log_destination_configs
