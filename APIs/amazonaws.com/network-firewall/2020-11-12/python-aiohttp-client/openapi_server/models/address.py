# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_definition: str=None):
        """Address - a model defined in OpenAPI

        :param address_definition: The address_definition of this Address.
        """
        self.openapi_types = {
            'address_definition': str
        }

        self.attribute_map = {
            'address_definition': 'AddressDefinition'
        }

        self._address_definition = address_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_definition(self):
        """Gets the address_definition of this Address.


        :return: The address_definition of this Address.
        :rtype: str
        """
        return self._address_definition

    @address_definition.setter
    def address_definition(self, address_definition):
        """Sets the address_definition of this Address.


        :param address_definition: The address_definition of this Address.
        :type address_definition: str
        """
        if address_definition is None:
            raise ValueError("Invalid value for `address_definition`, must not be `None`")

        self._address_definition = address_definition
