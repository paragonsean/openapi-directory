# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_port: int=None, to_port: int=None):
        """PortRange - a model defined in OpenAPI

        :param from_port: The from_port of this PortRange.
        :param to_port: The to_port of this PortRange.
        """
        self.openapi_types = {
            'from_port': int,
            'to_port': int
        }

        self.attribute_map = {
            'from_port': 'FromPort',
            'to_port': 'ToPort'
        }

        self._from_port = from_port
        self._to_port = to_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortRange of this PortRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_port(self):
        """Gets the from_port of this PortRange.


        :return: The from_port of this PortRange.
        :rtype: int
        """
        return self._from_port

    @from_port.setter
    def from_port(self, from_port):
        """Sets the from_port of this PortRange.


        :param from_port: The from_port of this PortRange.
        :type from_port: int
        """
        if from_port is None:
            raise ValueError("Invalid value for `from_port`, must not be `None`")

        self._from_port = from_port

    @property
    def to_port(self):
        """Gets the to_port of this PortRange.


        :return: The to_port of this PortRange.
        :rtype: int
        """
        return self._to_port

    @to_port.setter
    def to_port(self, to_port):
        """Sets the to_port of this PortRange.


        :param to_port: The to_port of this PortRange.
        :type to_port: int
        """
        if to_port is None:
            raise ValueError("Invalid value for `to_port`, must not be `None`")

        self._to_port = to_port
