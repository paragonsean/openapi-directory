# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_destination_type import LogDestinationType
from openapi_server.models.log_type import LogType
from openapi_server import util


class LogDestinationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_type: LogType=None, log_destination_type: LogDestinationType=None, log_destination: Dict=None):
        """LogDestinationConfig - a model defined in OpenAPI

        :param log_type: The log_type of this LogDestinationConfig.
        :param log_destination_type: The log_destination_type of this LogDestinationConfig.
        :param log_destination: The log_destination of this LogDestinationConfig.
        """
        self.openapi_types = {
            'log_type': LogType,
            'log_destination_type': LogDestinationType,
            'log_destination': Dict
        }

        self.attribute_map = {
            'log_type': 'LogType',
            'log_destination_type': 'LogDestinationType',
            'log_destination': 'LogDestination'
        }

        self._log_type = log_type
        self._log_destination_type = log_destination_type
        self._log_destination = log_destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogDestinationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogDestinationConfig of this LogDestinationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_type(self):
        """Gets the log_type of this LogDestinationConfig.


        :return: The log_type of this LogDestinationConfig.
        :rtype: LogType
        """
        return self._log_type

    @log_type.setter
    def log_type(self, log_type):
        """Sets the log_type of this LogDestinationConfig.


        :param log_type: The log_type of this LogDestinationConfig.
        :type log_type: LogType
        """
        if log_type is None:
            raise ValueError("Invalid value for `log_type`, must not be `None`")

        self._log_type = log_type

    @property
    def log_destination_type(self):
        """Gets the log_destination_type of this LogDestinationConfig.


        :return: The log_destination_type of this LogDestinationConfig.
        :rtype: LogDestinationType
        """
        return self._log_destination_type

    @log_destination_type.setter
    def log_destination_type(self, log_destination_type):
        """Sets the log_destination_type of this LogDestinationConfig.


        :param log_destination_type: The log_destination_type of this LogDestinationConfig.
        :type log_destination_type: LogDestinationType
        """
        if log_destination_type is None:
            raise ValueError("Invalid value for `log_destination_type`, must not be `None`")

        self._log_destination_type = log_destination_type

    @property
    def log_destination(self):
        """Gets the log_destination of this LogDestinationConfig.


        :return: The log_destination of this LogDestinationConfig.
        :rtype: Dict
        """
        return self._log_destination

    @log_destination.setter
    def log_destination(self, log_destination):
        """Sets the log_destination of this LogDestinationConfig.


        :param log_destination: The log_destination of this LogDestinationConfig.
        :type log_destination: Dict
        """
        if log_destination is None:
            raise ValueError("Invalid value for `log_destination`, must not be `None`")

        self._log_destination = log_destination
