# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TCPFlagField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flags: List=None, masks: List=None):
        """TCPFlagField - a model defined in OpenAPI

        :param flags: The flags of this TCPFlagField.
        :param masks: The masks of this TCPFlagField.
        """
        self.openapi_types = {
            'flags': List,
            'masks': List
        }

        self.attribute_map = {
            'flags': 'Flags',
            'masks': 'Masks'
        }

        self._flags = flags
        self._masks = masks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TCPFlagField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TCPFlagField of this TCPFlagField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flags(self):
        """Gets the flags of this TCPFlagField.


        :return: The flags of this TCPFlagField.
        :rtype: List
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this TCPFlagField.


        :param flags: The flags of this TCPFlagField.
        :type flags: List
        """
        if flags is None:
            raise ValueError("Invalid value for `flags`, must not be `None`")

        self._flags = flags

    @property
    def masks(self):
        """Gets the masks of this TCPFlagField.


        :return: The masks of this TCPFlagField.
        :rtype: List
        """
        return self._masks

    @masks.setter
    def masks(self, masks):
        """Sets the masks of this TCPFlagField.


        :param masks: The masks of this TCPFlagField.
        :type masks: List
        """

        self._masks = masks
