# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_encryption_configuration import FirewallEncryptionConfiguration
from openapi_server import util


class CreateFirewallResponseFirewall(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firewall_name: str=None, firewall_arn: str=None, firewall_policy_arn: str=None, vpc_id: str=None, subnet_mappings: List=None, delete_protection: bool=None, subnet_change_protection: bool=None, firewall_policy_change_protection: bool=None, description: str=None, firewall_id: str=None, tags: List=None, encryption_configuration: FirewallEncryptionConfiguration=None):
        """CreateFirewallResponseFirewall - a model defined in OpenAPI

        :param firewall_name: The firewall_name of this CreateFirewallResponseFirewall.
        :param firewall_arn: The firewall_arn of this CreateFirewallResponseFirewall.
        :param firewall_policy_arn: The firewall_policy_arn of this CreateFirewallResponseFirewall.
        :param vpc_id: The vpc_id of this CreateFirewallResponseFirewall.
        :param subnet_mappings: The subnet_mappings of this CreateFirewallResponseFirewall.
        :param delete_protection: The delete_protection of this CreateFirewallResponseFirewall.
        :param subnet_change_protection: The subnet_change_protection of this CreateFirewallResponseFirewall.
        :param firewall_policy_change_protection: The firewall_policy_change_protection of this CreateFirewallResponseFirewall.
        :param description: The description of this CreateFirewallResponseFirewall.
        :param firewall_id: The firewall_id of this CreateFirewallResponseFirewall.
        :param tags: The tags of this CreateFirewallResponseFirewall.
        :param encryption_configuration: The encryption_configuration of this CreateFirewallResponseFirewall.
        """
        self.openapi_types = {
            'firewall_name': str,
            'firewall_arn': str,
            'firewall_policy_arn': str,
            'vpc_id': str,
            'subnet_mappings': List,
            'delete_protection': bool,
            'subnet_change_protection': bool,
            'firewall_policy_change_protection': bool,
            'description': str,
            'firewall_id': str,
            'tags': List,
            'encryption_configuration': FirewallEncryptionConfiguration
        }

        self.attribute_map = {
            'firewall_name': 'FirewallName',
            'firewall_arn': 'FirewallArn',
            'firewall_policy_arn': 'FirewallPolicyArn',
            'vpc_id': 'VpcId',
            'subnet_mappings': 'SubnetMappings',
            'delete_protection': 'DeleteProtection',
            'subnet_change_protection': 'SubnetChangeProtection',
            'firewall_policy_change_protection': 'FirewallPolicyChangeProtection',
            'description': 'Description',
            'firewall_id': 'FirewallId',
            'tags': 'Tags',
            'encryption_configuration': 'EncryptionConfiguration'
        }

        self._firewall_name = firewall_name
        self._firewall_arn = firewall_arn
        self._firewall_policy_arn = firewall_policy_arn
        self._vpc_id = vpc_id
        self._subnet_mappings = subnet_mappings
        self._delete_protection = delete_protection
        self._subnet_change_protection = subnet_change_protection
        self._firewall_policy_change_protection = firewall_policy_change_protection
        self._description = description
        self._firewall_id = firewall_id
        self._tags = tags
        self._encryption_configuration = encryption_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFirewallResponseFirewall':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFirewallResponse_Firewall of this CreateFirewallResponseFirewall.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firewall_name(self):
        """Gets the firewall_name of this CreateFirewallResponseFirewall.


        :return: The firewall_name of this CreateFirewallResponseFirewall.
        :rtype: str
        """
        return self._firewall_name

    @firewall_name.setter
    def firewall_name(self, firewall_name):
        """Sets the firewall_name of this CreateFirewallResponseFirewall.


        :param firewall_name: The firewall_name of this CreateFirewallResponseFirewall.
        :type firewall_name: str
        """

        self._firewall_name = firewall_name

    @property
    def firewall_arn(self):
        """Gets the firewall_arn of this CreateFirewallResponseFirewall.


        :return: The firewall_arn of this CreateFirewallResponseFirewall.
        :rtype: str
        """
        return self._firewall_arn

    @firewall_arn.setter
    def firewall_arn(self, firewall_arn):
        """Sets the firewall_arn of this CreateFirewallResponseFirewall.


        :param firewall_arn: The firewall_arn of this CreateFirewallResponseFirewall.
        :type firewall_arn: str
        """

        self._firewall_arn = firewall_arn

    @property
    def firewall_policy_arn(self):
        """Gets the firewall_policy_arn of this CreateFirewallResponseFirewall.


        :return: The firewall_policy_arn of this CreateFirewallResponseFirewall.
        :rtype: str
        """
        return self._firewall_policy_arn

    @firewall_policy_arn.setter
    def firewall_policy_arn(self, firewall_policy_arn):
        """Sets the firewall_policy_arn of this CreateFirewallResponseFirewall.


        :param firewall_policy_arn: The firewall_policy_arn of this CreateFirewallResponseFirewall.
        :type firewall_policy_arn: str
        """
        if firewall_policy_arn is None:
            raise ValueError("Invalid value for `firewall_policy_arn`, must not be `None`")

        self._firewall_policy_arn = firewall_policy_arn

    @property
    def vpc_id(self):
        """Gets the vpc_id of this CreateFirewallResponseFirewall.


        :return: The vpc_id of this CreateFirewallResponseFirewall.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this CreateFirewallResponseFirewall.


        :param vpc_id: The vpc_id of this CreateFirewallResponseFirewall.
        :type vpc_id: str
        """
        if vpc_id is None:
            raise ValueError("Invalid value for `vpc_id`, must not be `None`")

        self._vpc_id = vpc_id

    @property
    def subnet_mappings(self):
        """Gets the subnet_mappings of this CreateFirewallResponseFirewall.


        :return: The subnet_mappings of this CreateFirewallResponseFirewall.
        :rtype: List
        """
        return self._subnet_mappings

    @subnet_mappings.setter
    def subnet_mappings(self, subnet_mappings):
        """Sets the subnet_mappings of this CreateFirewallResponseFirewall.


        :param subnet_mappings: The subnet_mappings of this CreateFirewallResponseFirewall.
        :type subnet_mappings: List
        """
        if subnet_mappings is None:
            raise ValueError("Invalid value for `subnet_mappings`, must not be `None`")

        self._subnet_mappings = subnet_mappings

    @property
    def delete_protection(self):
        """Gets the delete_protection of this CreateFirewallResponseFirewall.


        :return: The delete_protection of this CreateFirewallResponseFirewall.
        :rtype: bool
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this CreateFirewallResponseFirewall.


        :param delete_protection: The delete_protection of this CreateFirewallResponseFirewall.
        :type delete_protection: bool
        """

        self._delete_protection = delete_protection

    @property
    def subnet_change_protection(self):
        """Gets the subnet_change_protection of this CreateFirewallResponseFirewall.


        :return: The subnet_change_protection of this CreateFirewallResponseFirewall.
        :rtype: bool
        """
        return self._subnet_change_protection

    @subnet_change_protection.setter
    def subnet_change_protection(self, subnet_change_protection):
        """Sets the subnet_change_protection of this CreateFirewallResponseFirewall.


        :param subnet_change_protection: The subnet_change_protection of this CreateFirewallResponseFirewall.
        :type subnet_change_protection: bool
        """

        self._subnet_change_protection = subnet_change_protection

    @property
    def firewall_policy_change_protection(self):
        """Gets the firewall_policy_change_protection of this CreateFirewallResponseFirewall.


        :return: The firewall_policy_change_protection of this CreateFirewallResponseFirewall.
        :rtype: bool
        """
        return self._firewall_policy_change_protection

    @firewall_policy_change_protection.setter
    def firewall_policy_change_protection(self, firewall_policy_change_protection):
        """Sets the firewall_policy_change_protection of this CreateFirewallResponseFirewall.


        :param firewall_policy_change_protection: The firewall_policy_change_protection of this CreateFirewallResponseFirewall.
        :type firewall_policy_change_protection: bool
        """

        self._firewall_policy_change_protection = firewall_policy_change_protection

    @property
    def description(self):
        """Gets the description of this CreateFirewallResponseFirewall.


        :return: The description of this CreateFirewallResponseFirewall.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFirewallResponseFirewall.


        :param description: The description of this CreateFirewallResponseFirewall.
        :type description: str
        """

        self._description = description

    @property
    def firewall_id(self):
        """Gets the firewall_id of this CreateFirewallResponseFirewall.


        :return: The firewall_id of this CreateFirewallResponseFirewall.
        :rtype: str
        """
        return self._firewall_id

    @firewall_id.setter
    def firewall_id(self, firewall_id):
        """Sets the firewall_id of this CreateFirewallResponseFirewall.


        :param firewall_id: The firewall_id of this CreateFirewallResponseFirewall.
        :type firewall_id: str
        """
        if firewall_id is None:
            raise ValueError("Invalid value for `firewall_id`, must not be `None`")

        self._firewall_id = firewall_id

    @property
    def tags(self):
        """Gets the tags of this CreateFirewallResponseFirewall.


        :return: The tags of this CreateFirewallResponseFirewall.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFirewallResponseFirewall.


        :param tags: The tags of this CreateFirewallResponseFirewall.
        :type tags: List
        """

        self._tags = tags

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this CreateFirewallResponseFirewall.


        :return: The encryption_configuration of this CreateFirewallResponseFirewall.
        :rtype: FirewallEncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this CreateFirewallResponseFirewall.


        :param encryption_configuration: The encryption_configuration of this CreateFirewallResponseFirewall.
        :type encryption_configuration: FirewallEncryptionConfiguration
        """

        self._encryption_configuration = encryption_configuration
