# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_group_response_rule_group_response import CreateRuleGroupResponseRuleGroupResponse
from openapi_server import util


class UpdateRuleGroupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, update_token: str=None, rule_group_response: CreateRuleGroupResponseRuleGroupResponse=None):
        """UpdateRuleGroupResponse - a model defined in OpenAPI

        :param update_token: The update_token of this UpdateRuleGroupResponse.
        :param rule_group_response: The rule_group_response of this UpdateRuleGroupResponse.
        """
        self.openapi_types = {
            'update_token': str,
            'rule_group_response': CreateRuleGroupResponseRuleGroupResponse
        }

        self.attribute_map = {
            'update_token': 'UpdateToken',
            'rule_group_response': 'RuleGroupResponse'
        }

        self._update_token = update_token
        self._rule_group_response = rule_group_response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRuleGroupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRuleGroupResponse of this UpdateRuleGroupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def update_token(self):
        """Gets the update_token of this UpdateRuleGroupResponse.


        :return: The update_token of this UpdateRuleGroupResponse.
        :rtype: str
        """
        return self._update_token

    @update_token.setter
    def update_token(self, update_token):
        """Sets the update_token of this UpdateRuleGroupResponse.


        :param update_token: The update_token of this UpdateRuleGroupResponse.
        :type update_token: str
        """
        if update_token is None:
            raise ValueError("Invalid value for `update_token`, must not be `None`")

        self._update_token = update_token

    @property
    def rule_group_response(self):
        """Gets the rule_group_response of this UpdateRuleGroupResponse.


        :return: The rule_group_response of this UpdateRuleGroupResponse.
        :rtype: CreateRuleGroupResponseRuleGroupResponse
        """
        return self._rule_group_response

    @rule_group_response.setter
    def rule_group_response(self, rule_group_response):
        """Sets the rule_group_response of this UpdateRuleGroupResponse.


        :param rule_group_response: The rule_group_response of this UpdateRuleGroupResponse.
        :type rule_group_response: CreateRuleGroupResponseRuleGroupResponse
        """
        if rule_group_response is None:
            raise ValueError("Invalid value for `rule_group_response`, must not be `None`")

        self._rule_group_response = rule_group_response
