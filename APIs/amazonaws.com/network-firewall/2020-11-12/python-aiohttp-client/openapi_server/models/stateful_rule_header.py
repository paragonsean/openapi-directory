# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stateful_rule_direction import StatefulRuleDirection
from openapi_server.models.stateful_rule_protocol import StatefulRuleProtocol
from openapi_server import util


class StatefulRuleHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protocol: StatefulRuleProtocol=None, source: str=None, source_port: str=None, direction: StatefulRuleDirection=None, destination: str=None, destination_port: str=None):
        """StatefulRuleHeader - a model defined in OpenAPI

        :param protocol: The protocol of this StatefulRuleHeader.
        :param source: The source of this StatefulRuleHeader.
        :param source_port: The source_port of this StatefulRuleHeader.
        :param direction: The direction of this StatefulRuleHeader.
        :param destination: The destination of this StatefulRuleHeader.
        :param destination_port: The destination_port of this StatefulRuleHeader.
        """
        self.openapi_types = {
            'protocol': StatefulRuleProtocol,
            'source': str,
            'source_port': str,
            'direction': StatefulRuleDirection,
            'destination': str,
            'destination_port': str
        }

        self.attribute_map = {
            'protocol': 'Protocol',
            'source': 'Source',
            'source_port': 'SourcePort',
            'direction': 'Direction',
            'destination': 'Destination',
            'destination_port': 'DestinationPort'
        }

        self._protocol = protocol
        self._source = source
        self._source_port = source_port
        self._direction = direction
        self._destination = destination
        self._destination_port = destination_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatefulRuleHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatefulRule_Header of this StatefulRuleHeader.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protocol(self):
        """Gets the protocol of this StatefulRuleHeader.


        :return: The protocol of this StatefulRuleHeader.
        :rtype: StatefulRuleProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this StatefulRuleHeader.


        :param protocol: The protocol of this StatefulRuleHeader.
        :type protocol: StatefulRuleProtocol
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def source(self):
        """Gets the source of this StatefulRuleHeader.


        :return: The source of this StatefulRuleHeader.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this StatefulRuleHeader.


        :param source: The source of this StatefulRuleHeader.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def source_port(self):
        """Gets the source_port of this StatefulRuleHeader.


        :return: The source_port of this StatefulRuleHeader.
        :rtype: str
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this StatefulRuleHeader.


        :param source_port: The source_port of this StatefulRuleHeader.
        :type source_port: str
        """
        if source_port is None:
            raise ValueError("Invalid value for `source_port`, must not be `None`")

        self._source_port = source_port

    @property
    def direction(self):
        """Gets the direction of this StatefulRuleHeader.


        :return: The direction of this StatefulRuleHeader.
        :rtype: StatefulRuleDirection
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this StatefulRuleHeader.


        :param direction: The direction of this StatefulRuleHeader.
        :type direction: StatefulRuleDirection
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")

        self._direction = direction

    @property
    def destination(self):
        """Gets the destination of this StatefulRuleHeader.


        :return: The destination of this StatefulRuleHeader.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this StatefulRuleHeader.


        :param destination: The destination of this StatefulRuleHeader.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def destination_port(self):
        """Gets the destination_port of this StatefulRuleHeader.


        :return: The destination_port of this StatefulRuleHeader.
        :rtype: str
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this StatefulRuleHeader.


        :param destination_port: The destination_port of this StatefulRuleHeader.
        :type destination_port: str
        """
        if destination_port is None:
            raise ValueError("Invalid value for `destination_port`, must not be `None`")

        self._destination_port = destination_port
