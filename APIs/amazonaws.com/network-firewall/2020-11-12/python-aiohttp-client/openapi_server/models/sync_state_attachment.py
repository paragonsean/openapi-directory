# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_status import AttachmentStatus
from openapi_server import util


class SyncStateAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subnet_id: str=None, endpoint_id: str=None, status: AttachmentStatus=None, status_message: str=None):
        """SyncStateAttachment - a model defined in OpenAPI

        :param subnet_id: The subnet_id of this SyncStateAttachment.
        :param endpoint_id: The endpoint_id of this SyncStateAttachment.
        :param status: The status of this SyncStateAttachment.
        :param status_message: The status_message of this SyncStateAttachment.
        """
        self.openapi_types = {
            'subnet_id': str,
            'endpoint_id': str,
            'status': AttachmentStatus,
            'status_message': str
        }

        self.attribute_map = {
            'subnet_id': 'SubnetId',
            'endpoint_id': 'EndpointId',
            'status': 'Status',
            'status_message': 'StatusMessage'
        }

        self._subnet_id = subnet_id
        self._endpoint_id = endpoint_id
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncStateAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncState_Attachment of this SyncStateAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subnet_id(self):
        """Gets the subnet_id of this SyncStateAttachment.


        :return: The subnet_id of this SyncStateAttachment.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this SyncStateAttachment.


        :param subnet_id: The subnet_id of this SyncStateAttachment.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this SyncStateAttachment.


        :return: The endpoint_id of this SyncStateAttachment.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this SyncStateAttachment.


        :param endpoint_id: The endpoint_id of this SyncStateAttachment.
        :type endpoint_id: str
        """

        self._endpoint_id = endpoint_id

    @property
    def status(self):
        """Gets the status of this SyncStateAttachment.


        :return: The status of this SyncStateAttachment.
        :rtype: AttachmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SyncStateAttachment.


        :param status: The status of this SyncStateAttachment.
        :type status: AttachmentStatus
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this SyncStateAttachment.


        :return: The status_message of this SyncStateAttachment.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this SyncStateAttachment.


        :param status_message: The status_message of this SyncStateAttachment.
        :type status_message: str
        """

        self._status_message = status_message
