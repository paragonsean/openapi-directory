# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CapacityUsageSummaryCIDRs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_cidr_count: int=None, utilized_cidr_count: int=None, ip_set_references: Dict=None):
        """CapacityUsageSummaryCIDRs - a model defined in OpenAPI

        :param available_cidr_count: The available_cidr_count of this CapacityUsageSummaryCIDRs.
        :param utilized_cidr_count: The utilized_cidr_count of this CapacityUsageSummaryCIDRs.
        :param ip_set_references: The ip_set_references of this CapacityUsageSummaryCIDRs.
        """
        self.openapi_types = {
            'available_cidr_count': int,
            'utilized_cidr_count': int,
            'ip_set_references': Dict
        }

        self.attribute_map = {
            'available_cidr_count': 'AvailableCIDRCount',
            'utilized_cidr_count': 'UtilizedCIDRCount',
            'ip_set_references': 'IPSetReferences'
        }

        self._available_cidr_count = available_cidr_count
        self._utilized_cidr_count = utilized_cidr_count
        self._ip_set_references = ip_set_references

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapacityUsageSummaryCIDRs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapacityUsageSummary_CIDRs of this CapacityUsageSummaryCIDRs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_cidr_count(self):
        """Gets the available_cidr_count of this CapacityUsageSummaryCIDRs.


        :return: The available_cidr_count of this CapacityUsageSummaryCIDRs.
        :rtype: int
        """
        return self._available_cidr_count

    @available_cidr_count.setter
    def available_cidr_count(self, available_cidr_count):
        """Sets the available_cidr_count of this CapacityUsageSummaryCIDRs.


        :param available_cidr_count: The available_cidr_count of this CapacityUsageSummaryCIDRs.
        :type available_cidr_count: int
        """

        self._available_cidr_count = available_cidr_count

    @property
    def utilized_cidr_count(self):
        """Gets the utilized_cidr_count of this CapacityUsageSummaryCIDRs.


        :return: The utilized_cidr_count of this CapacityUsageSummaryCIDRs.
        :rtype: int
        """
        return self._utilized_cidr_count

    @utilized_cidr_count.setter
    def utilized_cidr_count(self, utilized_cidr_count):
        """Sets the utilized_cidr_count of this CapacityUsageSummaryCIDRs.


        :param utilized_cidr_count: The utilized_cidr_count of this CapacityUsageSummaryCIDRs.
        :type utilized_cidr_count: int
        """

        self._utilized_cidr_count = utilized_cidr_count

    @property
    def ip_set_references(self):
        """Gets the ip_set_references of this CapacityUsageSummaryCIDRs.


        :return: The ip_set_references of this CapacityUsageSummaryCIDRs.
        :rtype: Dict
        """
        return self._ip_set_references

    @ip_set_references.setter
    def ip_set_references(self, ip_set_references):
        """Sets the ip_set_references of this CapacityUsageSummaryCIDRs.


        :param ip_set_references: The ip_set_references of this CapacityUsageSummaryCIDRs.
        :type ip_set_references: Dict
        """

        self._ip_set_references = ip_set_references
