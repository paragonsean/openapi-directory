# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.generated_rules_type import GeneratedRulesType
from openapi_server import util


class RulesSourceRulesSourceList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, targets: List=None, target_types: List=None, generated_rules_type: GeneratedRulesType=None):
        """RulesSourceRulesSourceList - a model defined in OpenAPI

        :param targets: The targets of this RulesSourceRulesSourceList.
        :param target_types: The target_types of this RulesSourceRulesSourceList.
        :param generated_rules_type: The generated_rules_type of this RulesSourceRulesSourceList.
        """
        self.openapi_types = {
            'targets': List,
            'target_types': List,
            'generated_rules_type': GeneratedRulesType
        }

        self.attribute_map = {
            'targets': 'Targets',
            'target_types': 'TargetTypes',
            'generated_rules_type': 'GeneratedRulesType'
        }

        self._targets = targets
        self._target_types = target_types
        self._generated_rules_type = generated_rules_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RulesSourceRulesSourceList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RulesSource_RulesSourceList of this RulesSourceRulesSourceList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def targets(self):
        """Gets the targets of this RulesSourceRulesSourceList.


        :return: The targets of this RulesSourceRulesSourceList.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this RulesSourceRulesSourceList.


        :param targets: The targets of this RulesSourceRulesSourceList.
        :type targets: List
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets

    @property
    def target_types(self):
        """Gets the target_types of this RulesSourceRulesSourceList.


        :return: The target_types of this RulesSourceRulesSourceList.
        :rtype: List
        """
        return self._target_types

    @target_types.setter
    def target_types(self, target_types):
        """Sets the target_types of this RulesSourceRulesSourceList.


        :param target_types: The target_types of this RulesSourceRulesSourceList.
        :type target_types: List
        """
        if target_types is None:
            raise ValueError("Invalid value for `target_types`, must not be `None`")

        self._target_types = target_types

    @property
    def generated_rules_type(self):
        """Gets the generated_rules_type of this RulesSourceRulesSourceList.


        :return: The generated_rules_type of this RulesSourceRulesSourceList.
        :rtype: GeneratedRulesType
        """
        return self._generated_rules_type

    @generated_rules_type.setter
    def generated_rules_type(self, generated_rules_type):
        """Sets the generated_rules_type of this RulesSourceRulesSourceList.


        :param generated_rules_type: The generated_rules_type of this RulesSourceRulesSourceList.
        :type generated_rules_type: GeneratedRulesType
        """
        if generated_rules_type is None:
            raise ValueError("Invalid value for `generated_rules_type`, must not be `None`")

        self._generated_rules_type = generated_rules_type
