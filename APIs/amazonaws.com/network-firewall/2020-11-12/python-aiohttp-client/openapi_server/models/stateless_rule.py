# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stateless_rule_rule_definition import StatelessRuleRuleDefinition
from openapi_server import util


class StatelessRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_definition: StatelessRuleRuleDefinition=None, priority: int=None):
        """StatelessRule - a model defined in OpenAPI

        :param rule_definition: The rule_definition of this StatelessRule.
        :param priority: The priority of this StatelessRule.
        """
        self.openapi_types = {
            'rule_definition': StatelessRuleRuleDefinition,
            'priority': int
        }

        self.attribute_map = {
            'rule_definition': 'RuleDefinition',
            'priority': 'Priority'
        }

        self._rule_definition = rule_definition
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatelessRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatelessRule of this StatelessRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_definition(self):
        """Gets the rule_definition of this StatelessRule.


        :return: The rule_definition of this StatelessRule.
        :rtype: StatelessRuleRuleDefinition
        """
        return self._rule_definition

    @rule_definition.setter
    def rule_definition(self, rule_definition):
        """Sets the rule_definition of this StatelessRule.


        :param rule_definition: The rule_definition of this StatelessRule.
        :type rule_definition: StatelessRuleRuleDefinition
        """
        if rule_definition is None:
            raise ValueError("Invalid value for `rule_definition`, must not be `None`")

        self._rule_definition = rule_definition

    @property
    def priority(self):
        """Gets the priority of this StatelessRule.


        :return: The priority of this StatelessRule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this StatelessRule.


        :param priority: The priority of this StatelessRule.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority
