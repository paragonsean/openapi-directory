# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RulesSourceStatelessRulesAndCustomActions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stateless_rules: List=None, custom_actions: List=None):
        """RulesSourceStatelessRulesAndCustomActions - a model defined in OpenAPI

        :param stateless_rules: The stateless_rules of this RulesSourceStatelessRulesAndCustomActions.
        :param custom_actions: The custom_actions of this RulesSourceStatelessRulesAndCustomActions.
        """
        self.openapi_types = {
            'stateless_rules': List,
            'custom_actions': List
        }

        self.attribute_map = {
            'stateless_rules': 'StatelessRules',
            'custom_actions': 'CustomActions'
        }

        self._stateless_rules = stateless_rules
        self._custom_actions = custom_actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RulesSourceStatelessRulesAndCustomActions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RulesSource_StatelessRulesAndCustomActions of this RulesSourceStatelessRulesAndCustomActions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stateless_rules(self):
        """Gets the stateless_rules of this RulesSourceStatelessRulesAndCustomActions.


        :return: The stateless_rules of this RulesSourceStatelessRulesAndCustomActions.
        :rtype: List
        """
        return self._stateless_rules

    @stateless_rules.setter
    def stateless_rules(self, stateless_rules):
        """Sets the stateless_rules of this RulesSourceStatelessRulesAndCustomActions.


        :param stateless_rules: The stateless_rules of this RulesSourceStatelessRulesAndCustomActions.
        :type stateless_rules: List
        """
        if stateless_rules is None:
            raise ValueError("Invalid value for `stateless_rules`, must not be `None`")

        self._stateless_rules = stateless_rules

    @property
    def custom_actions(self):
        """Gets the custom_actions of this RulesSourceStatelessRulesAndCustomActions.


        :return: The custom_actions of this RulesSourceStatelessRulesAndCustomActions.
        :rtype: List
        """
        return self._custom_actions

    @custom_actions.setter
    def custom_actions(self, custom_actions):
        """Sets the custom_actions of this RulesSourceStatelessRulesAndCustomActions.


        :param custom_actions: The custom_actions of this RulesSourceStatelessRulesAndCustomActions.
        :type custom_actions: List
        """

        self._custom_actions = custom_actions
