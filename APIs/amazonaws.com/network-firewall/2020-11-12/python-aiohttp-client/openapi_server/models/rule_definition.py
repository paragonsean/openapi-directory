# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_definition_match_attributes import RuleDefinitionMatchAttributes
from openapi_server import util


class RuleDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_attributes: RuleDefinitionMatchAttributes=None, actions: List=None):
        """RuleDefinition - a model defined in OpenAPI

        :param match_attributes: The match_attributes of this RuleDefinition.
        :param actions: The actions of this RuleDefinition.
        """
        self.openapi_types = {
            'match_attributes': RuleDefinitionMatchAttributes,
            'actions': List
        }

        self.attribute_map = {
            'match_attributes': 'MatchAttributes',
            'actions': 'Actions'
        }

        self._match_attributes = match_attributes
        self._actions = actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleDefinition of this RuleDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_attributes(self):
        """Gets the match_attributes of this RuleDefinition.


        :return: The match_attributes of this RuleDefinition.
        :rtype: RuleDefinitionMatchAttributes
        """
        return self._match_attributes

    @match_attributes.setter
    def match_attributes(self, match_attributes):
        """Sets the match_attributes of this RuleDefinition.


        :param match_attributes: The match_attributes of this RuleDefinition.
        :type match_attributes: RuleDefinitionMatchAttributes
        """
        if match_attributes is None:
            raise ValueError("Invalid value for `match_attributes`, must not be `None`")

        self._match_attributes = match_attributes

    @property
    def actions(self):
        """Gets the actions of this RuleDefinition.


        :return: The actions of this RuleDefinition.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this RuleDefinition.


        :param actions: The actions of this RuleDefinition.
        :type actions: List
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions
