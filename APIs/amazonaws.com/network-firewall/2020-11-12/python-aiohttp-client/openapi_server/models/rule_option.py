# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuleOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keyword: str=None, settings: List=None):
        """RuleOption - a model defined in OpenAPI

        :param keyword: The keyword of this RuleOption.
        :param settings: The settings of this RuleOption.
        """
        self.openapi_types = {
            'keyword': str,
            'settings': List
        }

        self.attribute_map = {
            'keyword': 'Keyword',
            'settings': 'Settings'
        }

        self._keyword = keyword
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleOption of this RuleOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keyword(self):
        """Gets the keyword of this RuleOption.


        :return: The keyword of this RuleOption.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this RuleOption.


        :param keyword: The keyword of this RuleOption.
        :type keyword: str
        """
        if keyword is None:
            raise ValueError("Invalid value for `keyword`, must not be `None`")

        self._keyword = keyword

    @property
    def settings(self):
        """Gets the settings of this RuleOption.


        :return: The settings of this RuleOption.
        :rtype: List
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this RuleOption.


        :param settings: The settings of this RuleOption.
        :type settings: List
        """

        self._settings = settings
