# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rule_group_request_encryption_configuration import CreateRuleGroupRequestEncryptionConfiguration
from openapi_server.models.create_rule_group_request_rule_group import CreateRuleGroupRequestRuleGroup
from openapi_server.models.create_rule_group_request_source_metadata import CreateRuleGroupRequestSourceMetadata
from openapi_server.models.rule_group_type import RuleGroupType
from openapi_server import util


class CreateRuleGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_group_name: str=None, rule_group: CreateRuleGroupRequestRuleGroup=None, rules: str=None, type: RuleGroupType=None, description: str=None, capacity: int=None, tags: List=None, dry_run: bool=None, encryption_configuration: CreateRuleGroupRequestEncryptionConfiguration=None, source_metadata: CreateRuleGroupRequestSourceMetadata=None):
        """CreateRuleGroupRequest - a model defined in OpenAPI

        :param rule_group_name: The rule_group_name of this CreateRuleGroupRequest.
        :param rule_group: The rule_group of this CreateRuleGroupRequest.
        :param rules: The rules of this CreateRuleGroupRequest.
        :param type: The type of this CreateRuleGroupRequest.
        :param description: The description of this CreateRuleGroupRequest.
        :param capacity: The capacity of this CreateRuleGroupRequest.
        :param tags: The tags of this CreateRuleGroupRequest.
        :param dry_run: The dry_run of this CreateRuleGroupRequest.
        :param encryption_configuration: The encryption_configuration of this CreateRuleGroupRequest.
        :param source_metadata: The source_metadata of this CreateRuleGroupRequest.
        """
        self.openapi_types = {
            'rule_group_name': str,
            'rule_group': CreateRuleGroupRequestRuleGroup,
            'rules': str,
            'type': RuleGroupType,
            'description': str,
            'capacity': int,
            'tags': List,
            'dry_run': bool,
            'encryption_configuration': CreateRuleGroupRequestEncryptionConfiguration,
            'source_metadata': CreateRuleGroupRequestSourceMetadata
        }

        self.attribute_map = {
            'rule_group_name': 'RuleGroupName',
            'rule_group': 'RuleGroup',
            'rules': 'Rules',
            'type': 'Type',
            'description': 'Description',
            'capacity': 'Capacity',
            'tags': 'Tags',
            'dry_run': 'DryRun',
            'encryption_configuration': 'EncryptionConfiguration',
            'source_metadata': 'SourceMetadata'
        }

        self._rule_group_name = rule_group_name
        self._rule_group = rule_group
        self._rules = rules
        self._type = type
        self._description = description
        self._capacity = capacity
        self._tags = tags
        self._dry_run = dry_run
        self._encryption_configuration = encryption_configuration
        self._source_metadata = source_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRuleGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRuleGroupRequest of this CreateRuleGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_group_name(self):
        """Gets the rule_group_name of this CreateRuleGroupRequest.


        :return: The rule_group_name of this CreateRuleGroupRequest.
        :rtype: str
        """
        return self._rule_group_name

    @rule_group_name.setter
    def rule_group_name(self, rule_group_name):
        """Sets the rule_group_name of this CreateRuleGroupRequest.


        :param rule_group_name: The rule_group_name of this CreateRuleGroupRequest.
        :type rule_group_name: str
        """
        if rule_group_name is None:
            raise ValueError("Invalid value for `rule_group_name`, must not be `None`")

        self._rule_group_name = rule_group_name

    @property
    def rule_group(self):
        """Gets the rule_group of this CreateRuleGroupRequest.


        :return: The rule_group of this CreateRuleGroupRequest.
        :rtype: CreateRuleGroupRequestRuleGroup
        """
        return self._rule_group

    @rule_group.setter
    def rule_group(self, rule_group):
        """Sets the rule_group of this CreateRuleGroupRequest.


        :param rule_group: The rule_group of this CreateRuleGroupRequest.
        :type rule_group: CreateRuleGroupRequestRuleGroup
        """

        self._rule_group = rule_group

    @property
    def rules(self):
        """Gets the rules of this CreateRuleGroupRequest.


        :return: The rules of this CreateRuleGroupRequest.
        :rtype: str
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this CreateRuleGroupRequest.


        :param rules: The rules of this CreateRuleGroupRequest.
        :type rules: str
        """

        self._rules = rules

    @property
    def type(self):
        """Gets the type of this CreateRuleGroupRequest.


        :return: The type of this CreateRuleGroupRequest.
        :rtype: RuleGroupType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateRuleGroupRequest.


        :param type: The type of this CreateRuleGroupRequest.
        :type type: RuleGroupType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def description(self):
        """Gets the description of this CreateRuleGroupRequest.


        :return: The description of this CreateRuleGroupRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateRuleGroupRequest.


        :param description: The description of this CreateRuleGroupRequest.
        :type description: str
        """

        self._description = description

    @property
    def capacity(self):
        """Gets the capacity of this CreateRuleGroupRequest.


        :return: The capacity of this CreateRuleGroupRequest.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this CreateRuleGroupRequest.


        :param capacity: The capacity of this CreateRuleGroupRequest.
        :type capacity: int
        """
        if capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")

        self._capacity = capacity

    @property
    def tags(self):
        """Gets the tags of this CreateRuleGroupRequest.


        :return: The tags of this CreateRuleGroupRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRuleGroupRequest.


        :param tags: The tags of this CreateRuleGroupRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def dry_run(self):
        """Gets the dry_run of this CreateRuleGroupRequest.


        :return: The dry_run of this CreateRuleGroupRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this CreateRuleGroupRequest.


        :param dry_run: The dry_run of this CreateRuleGroupRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this CreateRuleGroupRequest.


        :return: The encryption_configuration of this CreateRuleGroupRequest.
        :rtype: CreateRuleGroupRequestEncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this CreateRuleGroupRequest.


        :param encryption_configuration: The encryption_configuration of this CreateRuleGroupRequest.
        :type encryption_configuration: CreateRuleGroupRequestEncryptionConfiguration
        """

        self._encryption_configuration = encryption_configuration

    @property
    def source_metadata(self):
        """Gets the source_metadata of this CreateRuleGroupRequest.


        :return: The source_metadata of this CreateRuleGroupRequest.
        :rtype: CreateRuleGroupRequestSourceMetadata
        """
        return self._source_metadata

    @source_metadata.setter
    def source_metadata(self, source_metadata):
        """Sets the source_metadata of this CreateRuleGroupRequest.


        :param source_metadata: The source_metadata of this CreateRuleGroupRequest.
        :type source_metadata: CreateRuleGroupRequestSourceMetadata
        """

        self._source_metadata = source_metadata
