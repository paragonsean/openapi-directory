# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, country: str=None, default_currency: str=None, stripe_id: str=None):
        """Account - a model defined in OpenAPI

        :param account_name: The account_name of this Account.
        :param country: The country of this Account.
        :param default_currency: The default_currency of this Account.
        :param stripe_id: The stripe_id of this Account.
        """
        self.openapi_types = {
            'account_name': str,
            'country': str,
            'default_currency': str,
            'stripe_id': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'country': 'country',
            'default_currency': 'defaultCurrency',
            'stripe_id': 'stripeId'
        }

        self._account_name = account_name
        self._country = country
        self._default_currency = default_currency
        self._stripe_id = stripe_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this Account.

        The name of the Stripe account

        :return: The account_name of this Account.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Account.

        The name of the Stripe account

        :param account_name: The account_name of this Account.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def country(self):
        """Gets the country of this Account.

        The country for this Stripe account

        :return: The country of this Account.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Account.

        The country for this Stripe account

        :param country: The country of this Account.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def default_currency(self):
        """Gets the default_currency of this Account.

        The default currency for this Stripe account

        :return: The default_currency of this Account.
        :rtype: str
        """
        return self._default_currency

    @default_currency.setter
    def default_currency(self, default_currency):
        """Sets the default_currency of this Account.

        The default currency for this Stripe account

        :param default_currency: The default_currency of this Account.
        :type default_currency: str
        """
        if default_currency is None:
            raise ValueError("Invalid value for `default_currency`, must not be `None`")

        self._default_currency = default_currency

    @property
    def stripe_id(self):
        """Gets the stripe_id of this Account.

        The id of the Stripe account

        :return: The stripe_id of this Account.
        :rtype: str
        """
        return self._stripe_id

    @stripe_id.setter
    def stripe_id(self, stripe_id):
        """Sets the stripe_id of this Account.

        The id of the Stripe account

        :param stripe_id: The stripe_id of this Account.
        :type stripe_id: str
        """
        if stripe_id is None:
            raise ValueError("Invalid value for `stripe_id`, must not be `None`")

        self._stripe_id = stripe_id
