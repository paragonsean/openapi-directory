# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_total import AppTotal
from openapi_server.models.data_total import DataTotal
from openapi_server import util


class Total(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apps: AppTotal=None, end: int=None, start: int=None, totals: DataTotal=None):
        """Total - a model defined in OpenAPI

        :param apps: The apps of this Total.
        :param end: The end of this Total.
        :param start: The start of this Total.
        :param totals: The totals of this Total.
        """
        self.openapi_types = {
            'apps': AppTotal,
            'end': int,
            'start': int,
            'totals': DataTotal
        }

        self.attribute_map = {
            'apps': 'apps',
            'end': 'end',
            'start': 'start',
            'totals': 'totals'
        }

        self._apps = apps
        self._end = end
        self._start = start
        self._totals = totals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Total':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Total of this Total.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apps(self):
        """Gets the apps of this Total.


        :return: The apps of this Total.
        :rtype: AppTotal
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this Total.


        :param apps: The apps of this Total.
        :type apps: AppTotal
        """
        if apps is None:
            raise ValueError("Invalid value for `apps`, must not be `None`")

        self._apps = apps

    @property
    def end(self):
        """Gets the end of this Total.

        The end date for this total (in millis)

        :return: The end of this Total.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Total.

        The end date for this total (in millis)

        :param end: The end of this Total.
        :type end: int
        """

        self._end = end

    @property
    def start(self):
        """Gets the start of this Total.

        The start date for this total (in millis)

        :return: The start of this Total.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Total.

        The start date for this total (in millis)

        :param start: The start of this Total.
        :type start: int
        """

        self._start = start

    @property
    def totals(self):
        """Gets the totals of this Total.


        :return: The totals of this Total.
        :rtype: DataTotal
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this Total.


        :param totals: The totals of this Total.
        :type totals: DataTotal
        """
        if totals is None:
            raise ValueError("Invalid value for `totals`, must not be `None`")

        self._totals = totals
