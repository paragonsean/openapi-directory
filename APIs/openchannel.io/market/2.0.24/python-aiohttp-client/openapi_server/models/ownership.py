# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model import Model
from openapi_server import util


class Ownership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, custom_data: object=None, _date: int=None, developer_id: str=None, expires: int=None, model: Model=None, ownership_id: str=None, ownership_status: str=None, ownership_type: str=None, uninstall_date: int=None, user_id: str=None):
        """Ownership - a model defined in OpenAPI

        :param app_id: The app_id of this Ownership.
        :param custom_data: The custom_data of this Ownership.
        :param _date: The _date of this Ownership.
        :param developer_id: The developer_id of this Ownership.
        :param expires: The expires of this Ownership.
        :param model: The model of this Ownership.
        :param ownership_id: The ownership_id of this Ownership.
        :param ownership_status: The ownership_status of this Ownership.
        :param ownership_type: The ownership_type of this Ownership.
        :param uninstall_date: The uninstall_date of this Ownership.
        :param user_id: The user_id of this Ownership.
        """
        self.openapi_types = {
            'app_id': str,
            'custom_data': object,
            '_date': int,
            'developer_id': str,
            'expires': int,
            'model': Model,
            'ownership_id': str,
            'ownership_status': str,
            'ownership_type': str,
            'uninstall_date': int,
            'user_id': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'custom_data': 'customData',
            '_date': 'date',
            'developer_id': 'developerId',
            'expires': 'expires',
            'model': 'model',
            'ownership_id': 'ownershipId',
            'ownership_status': 'ownershipStatus',
            'ownership_type': 'ownershipType',
            'uninstall_date': 'uninstallDate',
            'user_id': 'userId'
        }

        self._app_id = app_id
        self._custom_data = custom_data
        self.__date = _date
        self._developer_id = developer_id
        self._expires = expires
        self._model = model
        self._ownership_id = ownership_id
        self._ownership_status = ownership_status
        self._ownership_type = ownership_type
        self._uninstall_date = uninstall_date
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ownership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ownership of this Ownership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this Ownership.

        The id of the app that is owned

        :return: The app_id of this Ownership.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Ownership.

        The id of the app that is owned

        :param app_id: The app_id of this Ownership.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def custom_data(self):
        """Gets the custom_data of this Ownership.

        A custom JSON object that you can create and attach to this record

        :return: The custom_data of this Ownership.
        :rtype: object
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this Ownership.

        A custom JSON object that you can create and attach to this record

        :param custom_data: The custom_data of this Ownership.
        :type custom_data: object
        """

        self._custom_data = custom_data

    @property
    def _date(self):
        """Gets the _date of this Ownership.

        The date (in millis) of when this app was owned

        :return: The _date of this Ownership.
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Ownership.

        The date (in millis) of when this app was owned

        :param _date: The _date of this Ownership.
        :type _date: int
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def developer_id(self):
        """Gets the developer_id of this Ownership.

        The id of the developer for this app

        :return: The developer_id of this Ownership.
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this Ownership.

        The id of the developer for this app

        :param developer_id: The developer_id of this Ownership.
        :type developer_id: str
        """
        if developer_id is None:
            raise ValueError("Invalid value for `developer_id`, must not be `None`")

        self._developer_id = developer_id

    @property
    def expires(self):
        """Gets the expires of this Ownership.

        The date (in millis) of when this app ownership expires

        :return: The expires of this Ownership.
        :rtype: int
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Ownership.

        The date (in millis) of when this app ownership expires

        :param expires: The expires of this Ownership.
        :type expires: int
        """

        self._expires = expires

    @property
    def model(self):
        """Gets the model of this Ownership.


        :return: The model of this Ownership.
        :rtype: Model
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Ownership.


        :param model: The model of this Ownership.
        :type model: Model
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def ownership_id(self):
        """Gets the ownership_id of this Ownership.

        The id of this ownership

        :return: The ownership_id of this Ownership.
        :rtype: str
        """
        return self._ownership_id

    @ownership_id.setter
    def ownership_id(self, ownership_id):
        """Sets the ownership_id of this Ownership.

        The id of this ownership

        :param ownership_id: The ownership_id of this Ownership.
        :type ownership_id: str
        """
        if ownership_id is None:
            raise ValueError("Invalid value for `ownership_id`, must not be `None`")

        self._ownership_id = ownership_id

    @property
    def ownership_status(self):
        """Gets the ownership_status of this Ownership.

        The current ownership status for this app

        :return: The ownership_status of this Ownership.
        :rtype: str
        """
        return self._ownership_status

    @ownership_status.setter
    def ownership_status(self, ownership_status):
        """Sets the ownership_status of this Ownership.

        The current ownership status for this app

        :param ownership_status: The ownership_status of this Ownership.
        :type ownership_status: str
        """
        allowed_values = ["pending", "active", "uninstalled", "cancelled"]  # noqa: E501
        if ownership_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership_status` ({0}), must be one of {1}"
                .format(ownership_status, allowed_values)
            )

        self._ownership_status = ownership_status

    @property
    def ownership_type(self):
        """Gets the ownership_type of this Ownership.

        The current ownership type for this app

        :return: The ownership_type of this Ownership.
        :rtype: str
        """
        return self._ownership_type

    @ownership_type.setter
    def ownership_type(self, ownership_type):
        """Sets the ownership_type of this Ownership.

        The current ownership type for this app

        :param ownership_type: The ownership_type of this Ownership.
        :type ownership_type: str
        """
        allowed_values = ["full", "subscription", "trial"]  # noqa: E501
        if ownership_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership_type` ({0}), must be one of {1}"
                .format(ownership_type, allowed_values)
            )

        self._ownership_type = ownership_type

    @property
    def uninstall_date(self):
        """Gets the uninstall_date of this Ownership.

        The date (in millis) of when this app was uninstalled

        :return: The uninstall_date of this Ownership.
        :rtype: int
        """
        return self._uninstall_date

    @uninstall_date.setter
    def uninstall_date(self, uninstall_date):
        """Sets the uninstall_date of this Ownership.

        The date (in millis) of when this app was uninstalled

        :param uninstall_date: The uninstall_date of this Ownership.
        :type uninstall_date: int
        """

        self._uninstall_date = uninstall_date

    @property
    def user_id(self):
        """Gets the user_id of this Ownership.

        The id of the user that owns this app

        :return: The user_id of this Ownership.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Ownership.

        The id of the user that owns this app

        :param user_id: The user_id of this Ownership.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
