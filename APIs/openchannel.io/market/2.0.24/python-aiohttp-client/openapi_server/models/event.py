# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app import App
from openapi_server.models.developer import Developer
from openapi_server.models.ownership import Ownership
from openapi_server.models.review import Review
from openapi_server.models.transaction import Transaction
from openapi_server.models.user import User
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: App=None, created_date: int=None, description: str=None, developer: Developer=None, event_id: str=None, event_type: str=None, marketplace_id: str=None, ownership: Ownership=None, review: Review=None, transaction: Transaction=None, user: User=None):
        """Event - a model defined in OpenAPI

        :param app: The app of this Event.
        :param created_date: The created_date of this Event.
        :param description: The description of this Event.
        :param developer: The developer of this Event.
        :param event_id: The event_id of this Event.
        :param event_type: The event_type of this Event.
        :param marketplace_id: The marketplace_id of this Event.
        :param ownership: The ownership of this Event.
        :param review: The review of this Event.
        :param transaction: The transaction of this Event.
        :param user: The user of this Event.
        """
        self.openapi_types = {
            'app': App,
            'created_date': int,
            'description': str,
            'developer': Developer,
            'event_id': str,
            'event_type': str,
            'marketplace_id': str,
            'ownership': Ownership,
            'review': Review,
            'transaction': Transaction,
            'user': User
        }

        self.attribute_map = {
            'app': 'app',
            'created_date': 'createdDate',
            'description': 'description',
            'developer': 'developer',
            'event_id': 'eventId',
            'event_type': 'eventType',
            'marketplace_id': 'marketplaceId',
            'ownership': 'ownership',
            'review': 'review',
            'transaction': 'transaction',
            'user': 'user'
        }

        self._app = app
        self._created_date = created_date
        self._description = description
        self._developer = developer
        self._event_id = event_id
        self._event_type = event_type
        self._marketplace_id = marketplace_id
        self._ownership = ownership
        self._review = review
        self._transaction = transaction
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this Event.


        :return: The app of this Event.
        :rtype: App
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this Event.


        :param app: The app of this Event.
        :type app: App
        """

        self._app = app

    @property
    def created_date(self):
        """Gets the created_date of this Event.

        The date (in millis) of when this event occurred

        :return: The created_date of this Event.
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Event.

        The date (in millis) of when this event occurred

        :param created_date: The created_date of this Event.
        :type created_date: int
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def description(self):
        """Gets the description of this Event.

        A description of the event

        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.

        A description of the event

        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def developer(self):
        """Gets the developer of this Event.


        :return: The developer of this Event.
        :rtype: Developer
        """
        return self._developer

    @developer.setter
    def developer(self, developer):
        """Sets the developer of this Event.


        :param developer: The developer of this Event.
        :type developer: Developer
        """

        self._developer = developer

    @property
    def event_id(self):
        """Gets the event_id of this Event.

        The id of the event

        :return: The event_id of this Event.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Event.

        The id of the event

        :param event_id: The event_id of this Event.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def event_type(self):
        """Gets the event_type of this Event.

        The current event type

        :return: The event_type of this Event.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Event.

        The current event type

        :param event_type: The event_type of this Event.
        :type event_type: str
        """
        allowed_values = ["app.submitted", "app.approved", "app.suspended", "app.unsuspended", "app.rejected", "app.inReview", "app.installed", "app.uninstalled", "review.created", "review.updated", "review.approved", "review.spam", "review.removed", "user.created", "user.updated", "user.removed", "user.invalidPaymentDetails", "user.paymentDetailsRequired", "developer.created", "developer.updated", "developer.removed", "developer.paymentDetailsRequired", "permission.added", "permission.removed", "payment.complete", "payment.refunded", "payment.required", "ownership.expired"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this Event.

        The id of the marketplace that owns this event

        :return: The marketplace_id of this Event.
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this Event.

        The id of the marketplace that owns this event

        :param marketplace_id: The marketplace_id of this Event.
        :type marketplace_id: str
        """
        if marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")

        self._marketplace_id = marketplace_id

    @property
    def ownership(self):
        """Gets the ownership of this Event.


        :return: The ownership of this Event.
        :rtype: Ownership
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this Event.


        :param ownership: The ownership of this Event.
        :type ownership: Ownership
        """

        self._ownership = ownership

    @property
    def review(self):
        """Gets the review of this Event.


        :return: The review of this Event.
        :rtype: Review
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this Event.


        :param review: The review of this Event.
        :type review: Review
        """

        self._review = review

    @property
    def transaction(self):
        """Gets the transaction of this Event.


        :return: The transaction of this Event.
        :rtype: Transaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this Event.


        :param transaction: The transaction of this Event.
        :type transaction: Transaction
        """

        self._transaction = transaction

    @property
    def user(self):
        """Gets the user of this Event.


        :return: The user of this Event.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Event.


        :param user: The user of this Event.
        :type user: User
        """

        self._user = user
