# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ownership import Ownership
from openapi_server import util


class OwnershipPages(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, list: List[Ownership]=None, page_number: int=None, pages: int=None):
        """OwnershipPages - a model defined in OpenAPI

        :param count: The count of this OwnershipPages.
        :param list: The list of this OwnershipPages.
        :param page_number: The page_number of this OwnershipPages.
        :param pages: The pages of this OwnershipPages.
        """
        self.openapi_types = {
            'count': int,
            'list': List[Ownership],
            'page_number': int,
            'pages': int
        }

        self.attribute_map = {
            'count': 'count',
            'list': 'list',
            'page_number': 'pageNumber',
            'pages': 'pages'
        }

        self._count = count
        self._list = list
        self._page_number = page_number
        self._pages = pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OwnershipPages':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OwnershipPages of this OwnershipPages.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this OwnershipPages.

        The total number of results

        :return: The count of this OwnershipPages.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this OwnershipPages.

        The total number of results

        :param count: The count of this OwnershipPages.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def list(self):
        """Gets the list of this OwnershipPages.

        An array of ownership records for the current page

        :return: The list of this OwnershipPages.
        :rtype: List[Ownership]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this OwnershipPages.

        An array of ownership records for the current page

        :param list: The list of this OwnershipPages.
        :type list: List[Ownership]
        """
        if list is None:
            raise ValueError("Invalid value for `list`, must not be `None`")

        self._list = list

    @property
    def page_number(self):
        """Gets the page_number of this OwnershipPages.

        The current page number for this result set

        :return: The page_number of this OwnershipPages.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this OwnershipPages.

        The current page number for this result set

        :param page_number: The page_number of this OwnershipPages.
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def pages(self):
        """Gets the pages of this OwnershipPages.

        The total number of pages available for this result set

        :return: The pages of this OwnershipPages.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this OwnershipPages.

        The total number of pages available for this result set

        :param pages: The pages of this OwnershipPages.
        :type pages: int
        """

        self._pages = pages
