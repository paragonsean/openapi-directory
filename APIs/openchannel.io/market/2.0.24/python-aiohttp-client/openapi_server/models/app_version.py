# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model import Model
from openapi_server.models.parent import Parent
from openapi_server.models.restrictions import Restrictions
from openapi_server.models.status import Status
from openapi_server import util


class AppVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: List[str]=None, allow: Restrictions=None, app_id: str=None, attributes: object=None, created: int=None, custom_data: object=None, developer_id: str=None, is_latest_version: bool=None, is_live: bool=None, last_updated: int=None, model: List[Model]=None, name: str=None, parent: Parent=None, rating: int=None, restrict: Restrictions=None, review_count: int=None, safe_name: List[str]=None, status: Status=None, type: str=None, version: int=None):
        """AppVersion - a model defined in OpenAPI

        :param access: The access of this AppVersion.
        :param allow: The allow of this AppVersion.
        :param app_id: The app_id of this AppVersion.
        :param attributes: The attributes of this AppVersion.
        :param created: The created of this AppVersion.
        :param custom_data: The custom_data of this AppVersion.
        :param developer_id: The developer_id of this AppVersion.
        :param is_latest_version: The is_latest_version of this AppVersion.
        :param is_live: The is_live of this AppVersion.
        :param last_updated: The last_updated of this AppVersion.
        :param model: The model of this AppVersion.
        :param name: The name of this AppVersion.
        :param parent: The parent of this AppVersion.
        :param rating: The rating of this AppVersion.
        :param restrict: The restrict of this AppVersion.
        :param review_count: The review_count of this AppVersion.
        :param safe_name: The safe_name of this AppVersion.
        :param status: The status of this AppVersion.
        :param type: The type of this AppVersion.
        :param version: The version of this AppVersion.
        """
        self.openapi_types = {
            'access': List[str],
            'allow': Restrictions,
            'app_id': str,
            'attributes': object,
            'created': int,
            'custom_data': object,
            'developer_id': str,
            'is_latest_version': bool,
            'is_live': bool,
            'last_updated': int,
            'model': List[Model],
            'name': str,
            'parent': Parent,
            'rating': int,
            'restrict': Restrictions,
            'review_count': int,
            'safe_name': List[str],
            'status': Status,
            'type': str,
            'version': int
        }

        self.attribute_map = {
            'access': 'access',
            'allow': 'allow',
            'app_id': 'appId',
            'attributes': 'attributes',
            'created': 'created',
            'custom_data': 'customData',
            'developer_id': 'developerId',
            'is_latest_version': 'isLatestVersion',
            'is_live': 'isLive',
            'last_updated': 'lastUpdated',
            'model': 'model',
            'name': 'name',
            'parent': 'parent',
            'rating': 'rating',
            'restrict': 'restrict',
            'review_count': 'reviewCount',
            'safe_name': 'safeName',
            'status': 'status',
            'type': 'type',
            'version': 'version'
        }

        self._access = access
        self._allow = allow
        self._app_id = app_id
        self._attributes = attributes
        self._created = created
        self._custom_data = custom_data
        self._developer_id = developer_id
        self._is_latest_version = is_latest_version
        self._is_live = is_live
        self._last_updated = last_updated
        self._model = model
        self._name = name
        self._parent = parent
        self._rating = rating
        self._restrict = restrict
        self._review_count = review_count
        self._safe_name = safe_name
        self._status = status
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppVersion of this AppVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this AppVersion.

        A custom defined list of access requirements

        :return: The access of this AppVersion.
        :rtype: List[str]
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this AppVersion.

        A custom defined list of access requirements

        :param access: The access of this AppVersion.
        :type access: List[str]
        """

        self._access = access

    @property
    def allow(self):
        """Gets the allow of this AppVersion.


        :return: The allow of this AppVersion.
        :rtype: Restrictions
        """
        return self._allow

    @allow.setter
    def allow(self, allow):
        """Sets the allow of this AppVersion.


        :param allow: The allow of this AppVersion.
        :type allow: Restrictions
        """
        if allow is None:
            raise ValueError("Invalid value for `allow`, must not be `None`")

        self._allow = allow

    @property
    def app_id(self):
        """Gets the app_id of this AppVersion.

        The id of this app

        :return: The app_id of this AppVersion.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppVersion.

        The id of this app

        :param app_id: The app_id of this AppVersion.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def attributes(self):
        """Gets the attributes of this AppVersion.

        A custom defined list of app attributes

        :return: The attributes of this AppVersion.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AppVersion.

        A custom defined list of app attributes

        :param attributes: The attributes of this AppVersion.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def created(self):
        """Gets the created of this AppVersion.

        The date (in millis) that this app was created

        :return: The created of this AppVersion.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AppVersion.

        The date (in millis) that this app was created

        :param created: The created of this AppVersion.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def custom_data(self):
        """Gets the custom_data of this AppVersion.

        A custom JSON object that you can create and attach to this record

        :return: The custom_data of this AppVersion.
        :rtype: object
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this AppVersion.

        A custom JSON object that you can create and attach to this record

        :param custom_data: The custom_data of this AppVersion.
        :type custom_data: object
        """
        if custom_data is None:
            raise ValueError("Invalid value for `custom_data`, must not be `None`")

        self._custom_data = custom_data

    @property
    def developer_id(self):
        """Gets the developer_id of this AppVersion.

        The id of the developer that owns this app

        :return: The developer_id of this AppVersion.
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this AppVersion.

        The id of the developer that owns this app

        :param developer_id: The developer_id of this AppVersion.
        :type developer_id: str
        """
        if developer_id is None:
            raise ValueError("Invalid value for `developer_id`, must not be `None`")

        self._developer_id = developer_id

    @property
    def is_latest_version(self):
        """Gets the is_latest_version of this AppVersion.

        True if this is the latest version of this app

        :return: The is_latest_version of this AppVersion.
        :rtype: bool
        """
        return self._is_latest_version

    @is_latest_version.setter
    def is_latest_version(self, is_latest_version):
        """Sets the is_latest_version of this AppVersion.

        True if this is the latest version of this app

        :param is_latest_version: The is_latest_version of this AppVersion.
        :type is_latest_version: bool
        """
        if is_latest_version is None:
            raise ValueError("Invalid value for `is_latest_version`, must not be `None`")

        self._is_latest_version = is_latest_version

    @property
    def is_live(self):
        """Gets the is_live of this AppVersion.

        True if this is the live version of the app

        :return: The is_live of this AppVersion.
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live):
        """Sets the is_live of this AppVersion.

        True if this is the live version of the app

        :param is_live: The is_live of this AppVersion.
        :type is_live: bool
        """
        if is_live is None:
            raise ValueError("Invalid value for `is_live`, must not be `None`")

        self._is_live = is_live

    @property
    def last_updated(self):
        """Gets the last_updated of this AppVersion.

        The date (in millis) that this app was last modified

        :return: The last_updated of this AppVersion.
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AppVersion.

        The date (in millis) that this app was last modified

        :param last_updated: The last_updated of this AppVersion.
        :type last_updated: int
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def model(self):
        """Gets the model of this AppVersion.

        The models that describes the cost and pricing for this app

        :return: The model of this AppVersion.
        :rtype: List[Model]
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this AppVersion.

        The models that describes the cost and pricing for this app

        :param model: The model of this AppVersion.
        :type model: List[Model]
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def name(self):
        """Gets the name of this AppVersion.

        The name of this app

        :return: The name of this AppVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppVersion.

        The name of this app

        :param name: The name of this AppVersion.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this AppVersion.


        :return: The parent of this AppVersion.
        :rtype: Parent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AppVersion.


        :param parent: The parent of this AppVersion.
        :type parent: Parent
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def rating(self):
        """Gets the rating of this AppVersion.

        The average review rating for this app. Reviews are rated from 100 (one star) to 500 (five star)

        :return: The rating of this AppVersion.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this AppVersion.

        The average review rating for this app. Reviews are rated from 100 (one star) to 500 (five star)

        :param rating: The rating of this AppVersion.
        :type rating: int
        """
        if rating is not None and rating > 500:
            raise ValueError("Invalid value for `rating`, must be a value less than or equal to `500`")
        if rating is not None and rating < 0:
            raise ValueError("Invalid value for `rating`, must be a value greater than or equal to `0`")

        self._rating = rating

    @property
    def restrict(self):
        """Gets the restrict of this AppVersion.


        :return: The restrict of this AppVersion.
        :rtype: Restrictions
        """
        return self._restrict

    @restrict.setter
    def restrict(self, restrict):
        """Sets the restrict of this AppVersion.


        :param restrict: The restrict of this AppVersion.
        :type restrict: Restrictions
        """
        if restrict is None:
            raise ValueError("Invalid value for `restrict`, must not be `None`")

        self._restrict = restrict

    @property
    def review_count(self):
        """Gets the review_count of this AppVersion.

        The number of approved reviews for this app.

        :return: The review_count of this AppVersion.
        :rtype: int
        """
        return self._review_count

    @review_count.setter
    def review_count(self, review_count):
        """Sets the review_count of this AppVersion.

        The number of approved reviews for this app.

        :param review_count: The review_count of this AppVersion.
        :type review_count: int
        """

        self._review_count = review_count

    @property
    def safe_name(self):
        """Gets the safe_name of this AppVersion.

        URL safe aliases that can be used to identify this app even after name changes. The current alias is always at position 0.

        :return: The safe_name of this AppVersion.
        :rtype: List[str]
        """
        return self._safe_name

    @safe_name.setter
    def safe_name(self, safe_name):
        """Sets the safe_name of this AppVersion.

        URL safe aliases that can be used to identify this app even after name changes. The current alias is always at position 0.

        :param safe_name: The safe_name of this AppVersion.
        :type safe_name: List[str]
        """
        if safe_name is None:
            raise ValueError("Invalid value for `safe_name`, must not be `None`")

        self._safe_name = safe_name

    @property
    def status(self):
        """Gets the status of this AppVersion.


        :return: The status of this AppVersion.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AppVersion.


        :param status: The status of this AppVersion.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this AppVersion.

        The type for this app

        :return: The type of this AppVersion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AppVersion.

        The type for this app

        :param type: The type of this AppVersion.
        :type type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this AppVersion.

        The version number for this app

        :return: The version of this AppVersion.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AppVersion.

        The version number for this app

        :param version: The version of this AppVersion.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
