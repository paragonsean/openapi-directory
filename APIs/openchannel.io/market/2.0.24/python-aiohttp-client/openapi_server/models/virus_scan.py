# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.found_virus import FoundVirus
from openapi_server import util


class VirusScan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, finished: int=None, found_viruses: List[FoundVirus]=None, started: int=None, status: str=None):
        """VirusScan - a model defined in OpenAPI

        :param finished: The finished of this VirusScan.
        :param found_viruses: The found_viruses of this VirusScan.
        :param started: The started of this VirusScan.
        :param status: The status of this VirusScan.
        """
        self.openapi_types = {
            'finished': int,
            'found_viruses': List[FoundVirus],
            'started': int,
            'status': str
        }

        self.attribute_map = {
            'finished': 'finished',
            'found_viruses': 'foundViruses',
            'started': 'started',
            'status': 'status'
        }

        self._finished = finished
        self._found_viruses = found_viruses
        self._started = started
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirusScan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirusScan of this VirusScan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def finished(self):
        """Gets the finished of this VirusScan.

        The date (in milliseconds) when this file finished it's scan

        :return: The finished of this VirusScan.
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this VirusScan.

        The date (in milliseconds) when this file finished it's scan

        :param finished: The finished of this VirusScan.
        :type finished: int
        """

        self._finished = finished

    @property
    def found_viruses(self):
        """Gets the found_viruses of this VirusScan.

        The list of viruses found in this file

        :return: The found_viruses of this VirusScan.
        :rtype: List[FoundVirus]
        """
        return self._found_viruses

    @found_viruses.setter
    def found_viruses(self, found_viruses):
        """Sets the found_viruses of this VirusScan.

        The list of viruses found in this file

        :param found_viruses: The found_viruses of this VirusScan.
        :type found_viruses: List[FoundVirus]
        """

        self._found_viruses = found_viruses

    @property
    def started(self):
        """Gets the started of this VirusScan.

        The date (in milliseconds) when this file started it's scan

        :return: The started of this VirusScan.
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this VirusScan.

        The date (in milliseconds) when this file started it's scan

        :param started: The started of this VirusScan.
        :type started: int
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this VirusScan.

        The status of this scan. Can be NOT_SCANNED, CLEAN or DIRTY

        :return: The status of this VirusScan.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VirusScan.

        The status of this scan. Can be NOT_SCANNED, CLEAN or DIRTY

        :param status: The status of this VirusScan.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
