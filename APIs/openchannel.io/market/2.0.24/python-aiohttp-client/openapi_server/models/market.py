# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attributes import Attributes
from openapi_server.models.category_groups import CategoryGroups
from openapi_server import util


class Market(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[Attributes]=None, category_groups: List[CategoryGroups]=None, marketplace_id: str=None, preview_app_url: str=None, view_app_url: str=None):
        """Market - a model defined in OpenAPI

        :param attributes: The attributes of this Market.
        :param category_groups: The category_groups of this Market.
        :param marketplace_id: The marketplace_id of this Market.
        :param preview_app_url: The preview_app_url of this Market.
        :param view_app_url: The view_app_url of this Market.
        """
        self.openapi_types = {
            'attributes': List[Attributes],
            'category_groups': List[CategoryGroups],
            'marketplace_id': str,
            'preview_app_url': str,
            'view_app_url': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'category_groups': 'categoryGroups',
            'marketplace_id': 'marketplaceId',
            'preview_app_url': 'previewAppUrl',
            'view_app_url': 'viewAppUrl'
        }

        self._attributes = attributes
        self._category_groups = category_groups
        self._marketplace_id = marketplace_id
        self._preview_app_url = preview_app_url
        self._view_app_url = view_app_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Market':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Market of this Market.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Market.

        The different app attributes supported by this marketplace

        :return: The attributes of this Market.
        :rtype: List[Attributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Market.

        The different app attributes supported by this marketplace

        :param attributes: The attributes of this Market.
        :type attributes: List[Attributes]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def category_groups(self):
        """Gets the category_groups of this Market.

        The category groups supported by this marketplace

        :return: The category_groups of this Market.
        :rtype: List[CategoryGroups]
        """
        return self._category_groups

    @category_groups.setter
    def category_groups(self, category_groups):
        """Sets the category_groups of this Market.

        The category groups supported by this marketplace

        :param category_groups: The category_groups of this Market.
        :type category_groups: List[CategoryGroups]
        """

        self._category_groups = category_groups

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this Market.

        The id of this marketplace

        :return: The marketplace_id of this Market.
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this Market.

        The id of this marketplace

        :param marketplace_id: The marketplace_id of this Market.
        :type marketplace_id: str
        """
        if marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")

        self._marketplace_id = marketplace_id

    @property
    def preview_app_url(self):
        """Gets the preview_app_url of this Market.

        The URL template for previewing apps on this marketplace

        :return: The preview_app_url of this Market.
        :rtype: str
        """
        return self._preview_app_url

    @preview_app_url.setter
    def preview_app_url(self, preview_app_url):
        """Sets the preview_app_url of this Market.

        The URL template for previewing apps on this marketplace

        :param preview_app_url: The preview_app_url of this Market.
        :type preview_app_url: str
        """
        if preview_app_url is None:
            raise ValueError("Invalid value for `preview_app_url`, must not be `None`")

        self._preview_app_url = preview_app_url

    @property
    def view_app_url(self):
        """Gets the view_app_url of this Market.

        The URL template for viewing apps on this marketplace

        :return: The view_app_url of this Market.
        :rtype: str
        """
        return self._view_app_url

    @view_app_url.setter
    def view_app_url(self, view_app_url):
        """Sets the view_app_url of this Market.

        The URL template for viewing apps on this marketplace

        :param view_app_url: The view_app_url of this Market.
        :type view_app_url: str
        """
        if view_app_url is None:
            raise ValueError("Invalid value for `view_app_url`, must not be `None`")

        self._view_app_url = view_app_url
