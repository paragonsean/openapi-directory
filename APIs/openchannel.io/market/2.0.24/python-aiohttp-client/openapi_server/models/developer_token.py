# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeveloperToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, developer_id: str=None, expires: int=None, target_url: str=None):
        """DeveloperToken - a model defined in OpenAPI

        :param developer_id: The developer_id of this DeveloperToken.
        :param expires: The expires of this DeveloperToken.
        :param target_url: The target_url of this DeveloperToken.
        """
        self.openapi_types = {
            'developer_id': str,
            'expires': int,
            'target_url': str
        }

        self.attribute_map = {
            'developer_id': 'developerId',
            'expires': 'expires',
            'target_url': 'targetUrl'
        }

        self._developer_id = developer_id
        self._expires = expires
        self._target_url = target_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeveloperToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeveloperToken of this DeveloperToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def developer_id(self):
        """Gets the developer_id of this DeveloperToken.

        The id of the developer connecting their Stripe account

        :return: The developer_id of this DeveloperToken.
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this DeveloperToken.

        The id of the developer connecting their Stripe account

        :param developer_id: The developer_id of this DeveloperToken.
        :type developer_id: str
        """
        if developer_id is None:
            raise ValueError("Invalid value for `developer_id`, must not be `None`")

        self._developer_id = developer_id

    @property
    def expires(self):
        """Gets the expires of this DeveloperToken.

        The time (in milliseconds) when this URL expires

        :return: The expires of this DeveloperToken.
        :rtype: int
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this DeveloperToken.

        The time (in milliseconds) when this URL expires

        :param expires: The expires of this DeveloperToken.
        :type expires: int
        """
        if expires is None:
            raise ValueError("Invalid value for `expires`, must not be `None`")

        self._expires = expires

    @property
    def target_url(self):
        """Gets the target_url of this DeveloperToken.

        The URL that this developer can use to connect their Stripe account

        :return: The target_url of this DeveloperToken.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this DeveloperToken.

        The URL that this developer can use to connect their Stripe account

        :param target_url: The target_url of this DeveloperToken.
        :type target_url: str
        """
        if target_url is None:
            raise ValueError("Invalid value for `target_url`, must not be `None`")

        self._target_url = target_url
