# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server.models.user import User
from openapi_server.models.user_account import UserAccount
from openapi_server import util


class Review(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, custom_data: str=None, description: str=None, headline: str=None, rating: int=None, report_date: int=None, review_id: str=None, status: Status=None, type: str=None, user: User=None, user_account: UserAccount=None, user_account_id: str=None, user_id: str=None):
        """Review - a model defined in OpenAPI

        :param app_id: The app_id of this Review.
        :param custom_data: The custom_data of this Review.
        :param description: The description of this Review.
        :param headline: The headline of this Review.
        :param rating: The rating of this Review.
        :param report_date: The report_date of this Review.
        :param review_id: The review_id of this Review.
        :param status: The status of this Review.
        :param type: The type of this Review.
        :param user: The user of this Review.
        :param user_account: The user_account of this Review.
        :param user_account_id: The user_account_id of this Review.
        :param user_id: The user_id of this Review.
        """
        self.openapi_types = {
            'app_id': str,
            'custom_data': str,
            'description': str,
            'headline': str,
            'rating': int,
            'report_date': int,
            'review_id': str,
            'status': Status,
            'type': str,
            'user': User,
            'user_account': UserAccount,
            'user_account_id': str,
            'user_id': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'custom_data': 'customData',
            'description': 'description',
            'headline': 'headline',
            'rating': 'rating',
            'report_date': 'reportDate',
            'review_id': 'reviewId',
            'status': 'status',
            'type': 'type',
            'user': 'user',
            'user_account': 'userAccount',
            'user_account_id': 'userAccountId',
            'user_id': 'userId'
        }

        self._app_id = app_id
        self._custom_data = custom_data
        self._description = description
        self._headline = headline
        self._rating = rating
        self._report_date = report_date
        self._review_id = review_id
        self._status = status
        self._type = type
        self._user = user
        self._user_account = user_account
        self._user_account_id = user_account_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Review':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Review of this Review.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this Review.

        The Id of the App that owns this review

        :return: The app_id of this Review.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Review.

        The Id of the App that owns this review

        :param app_id: The app_id of this Review.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def custom_data(self):
        """Gets the custom_data of this Review.

        A custom JSON object that you can create and attach to this record

        :return: The custom_data of this Review.
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this Review.

        A custom JSON object that you can create and attach to this record

        :param custom_data: The custom_data of this Review.
        :type custom_data: str
        """
        if custom_data is None:
            raise ValueError("Invalid value for `custom_data`, must not be `None`")

        self._custom_data = custom_data

    @property
    def description(self):
        """Gets the description of this Review.

        The review's description. Limited to 2000 characters.

        :return: The description of this Review.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Review.

        The review's description. Limited to 2000 characters.

        :param description: The description of this Review.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def headline(self):
        """Gets the headline of this Review.

        The review's headline. Limited to 50 characters.

        :return: The headline of this Review.
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this Review.

        The review's headline. Limited to 50 characters.

        :param headline: The headline of this Review.
        :type headline: str
        """
        if headline is None:
            raise ValueError("Invalid value for `headline`, must not be `None`")

        self._headline = headline

    @property
    def rating(self):
        """Gets the rating of this Review.

        The rating given within this review. The rating is represented as an integer between 100 and 500 (1 - 5 stars)

        :return: The rating of this Review.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Review.

        The rating given within this review. The rating is represented as an integer between 100 and 500 (1 - 5 stars)

        :param rating: The rating of this Review.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating

    @property
    def report_date(self):
        """Gets the report_date of this Review.

        The date (in millis) this Review was posted

        :return: The report_date of this Review.
        :rtype: int
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date):
        """Sets the report_date of this Review.

        The date (in millis) this Review was posted

        :param report_date: The report_date of this Review.
        :type report_date: int
        """
        if report_date is None:
            raise ValueError("Invalid value for `report_date`, must not be `None`")

        self._report_date = report_date

    @property
    def review_id(self):
        """Gets the review_id of this Review.

        The id for this review.

        :return: The review_id of this Review.
        :rtype: str
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id):
        """Sets the review_id of this Review.

        The id for this review.

        :param review_id: The review_id of this Review.
        :type review_id: str
        """
        if review_id is None:
            raise ValueError("Invalid value for `review_id`, must not be `None`")

        self._review_id = review_id

    @property
    def status(self):
        """Gets the status of this Review.


        :return: The status of this Review.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Review.


        :param status: The status of this Review.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this Review.

        The type for this review

        :return: The type of this Review.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Review.

        The type for this review

        :param type: The type of this Review.
        :type type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this Review.


        :return: The user of this Review.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Review.


        :param user: The user of this Review.
        :type user: User
        """

        self._user = user

    @property
    def user_account(self):
        """Gets the user_account of this Review.


        :return: The user_account of this Review.
        :rtype: UserAccount
        """
        return self._user_account

    @user_account.setter
    def user_account(self, user_account):
        """Sets the user_account of this Review.


        :param user_account: The user_account of this Review.
        :type user_account: UserAccount
        """

        self._user_account = user_account

    @property
    def user_account_id(self):
        """Gets the user_account_id of this Review.

        The id of the user account that posted this review

        :return: The user_account_id of this Review.
        :rtype: str
        """
        return self._user_account_id

    @user_account_id.setter
    def user_account_id(self, user_account_id):
        """Sets the user_account_id of this Review.

        The id of the user account that posted this review

        :param user_account_id: The user_account_id of this Review.
        :type user_account_id: str
        """

        self._user_account_id = user_account_id

    @property
    def user_id(self):
        """Gets the user_id of this Review.

        The id of the User that posted this review

        :return: The user_id of this Review.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Review.

        The id of the User that posted this review

        :param user_id: The user_id of this Review.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
