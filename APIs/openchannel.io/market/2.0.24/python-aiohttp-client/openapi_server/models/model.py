# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_period: str=None, billing_period_unit: int=None, commission: int=None, currency: str=None, custom_data: object=None, fee_payer: str=None, license: str=None, model_id: str=None, price: int=None, subtype: str=None, trial: int=None, type: str=None):
        """Model - a model defined in OpenAPI

        :param billing_period: The billing_period of this Model.
        :param billing_period_unit: The billing_period_unit of this Model.
        :param commission: The commission of this Model.
        :param currency: The currency of this Model.
        :param custom_data: The custom_data of this Model.
        :param fee_payer: The fee_payer of this Model.
        :param license: The license of this Model.
        :param model_id: The model_id of this Model.
        :param price: The price of this Model.
        :param subtype: The subtype of this Model.
        :param trial: The trial of this Model.
        :param type: The type of this Model.
        """
        self.openapi_types = {
            'billing_period': str,
            'billing_period_unit': int,
            'commission': int,
            'currency': str,
            'custom_data': object,
            'fee_payer': str,
            'license': str,
            'model_id': str,
            'price': int,
            'subtype': str,
            'trial': int,
            'type': str
        }

        self.attribute_map = {
            'billing_period': 'billingPeriod',
            'billing_period_unit': 'billingPeriodUnit',
            'commission': 'commission',
            'currency': 'currency',
            'custom_data': 'customData',
            'fee_payer': 'feePayer',
            'license': 'license',
            'model_id': 'modelId',
            'price': 'price',
            'subtype': 'subtype',
            'trial': 'trial',
            'type': 'type'
        }

        self._billing_period = billing_period
        self._billing_period_unit = billing_period_unit
        self._commission = commission
        self._currency = currency
        self._custom_data = custom_data
        self._fee_payer = fee_payer
        self._license = license
        self._model_id = model_id
        self._price = price
        self._subtype = subtype
        self._trial = trial
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model of this Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_period(self):
        """Gets the billing_period of this Model.

        The billingPeriod along with the billingPeriodUnit make up the time between billing cycles

        :return: The billing_period of this Model.
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this Model.

        The billingPeriod along with the billingPeriodUnit make up the time between billing cycles

        :param billing_period: The billing_period of this Model.
        :type billing_period: str
        """
        allowed_values = ["daily", "weekly", "monthly", "annually"]  # noqa: E501
        if billing_period not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_period` ({0}), must be one of {1}"
                .format(billing_period, allowed_values)
            )

        self._billing_period = billing_period

    @property
    def billing_period_unit(self):
        """Gets the billing_period_unit of this Model.

        The billingPeriod along with the billingPeriodUnit make up the time between billing cycles

        :return: The billing_period_unit of this Model.
        :rtype: int
        """
        return self._billing_period_unit

    @billing_period_unit.setter
    def billing_period_unit(self, billing_period_unit):
        """Sets the billing_period_unit of this Model.

        The billingPeriod along with the billingPeriodUnit make up the time between billing cycles

        :param billing_period_unit: The billing_period_unit of this Model.
        :type billing_period_unit: int
        """

        self._billing_period_unit = billing_period_unit

    @property
    def commission(self):
        """Gets the commission of this Model.

        The marketplace commission applied to this app's model multiplied by 100 to include two digits for fractions of a percent

        :return: The commission of this Model.
        :rtype: int
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this Model.

        The marketplace commission applied to this app's model multiplied by 100 to include two digits for fractions of a percent

        :param commission: The commission of this Model.
        :type commission: int
        """
        if commission is None:
            raise ValueError("Invalid value for `commission`, must not be `None`")

        self._commission = commission

    @property
    def currency(self):
        """Gets the currency of this Model.

        The ISO 4217 currency code for this price

        :return: The currency of this Model.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Model.

        The ISO 4217 currency code for this price

        :param currency: The currency of this Model.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def custom_data(self):
        """Gets the custom_data of this Model.

        A custom JSON object that you can create and attach to this record

        :return: The custom_data of this Model.
        :rtype: object
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this Model.

        A custom JSON object that you can create and attach to this record

        :param custom_data: The custom_data of this Model.
        :type custom_data: object
        """

        self._custom_data = custom_data

    @property
    def fee_payer(self):
        """Gets the fee_payer of this Model.

        The payee that will be paying for any payment processing fees

        :return: The fee_payer of this Model.
        :rtype: str
        """
        return self._fee_payer

    @fee_payer.setter
    def fee_payer(self, fee_payer):
        """Sets the fee_payer of this Model.

        The payee that will be paying for any payment processing fees

        :param fee_payer: The fee_payer of this Model.
        :type fee_payer: str
        """
        allowed_values = ["developer", "marketplace"]  # noqa: E501
        if fee_payer not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_payer` ({0}), must be one of {1}"
                .format(fee_payer, allowed_values)
            )

        self._fee_payer = fee_payer

    @property
    def license(self):
        """Gets the license of this Model.

        The license model type. Single allows a purchase to a single user or organization

        :return: The license of this Model.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Model.

        The license model type. Single allows a purchase to a single user or organization

        :param license: The license of this Model.
        :type license: str
        """
        allowed_values = ["single"]  # noqa: E501
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def model_id(self):
        """Gets the model_id of this Model.

        The id that uniquely identifies this model

        :return: The model_id of this Model.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Model.

        The id that uniquely identifies this model

        :param model_id: The model_id of this Model.
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def price(self):
        """Gets the price of this Model.

        The price of this app in cents

        :return: The price of this Model.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Model.

        The price of this app in cents

        :param price: The price of this Model.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def subtype(self):
        """Gets the subtype of this Model.

        The pricing model subtype

        :return: The subtype of this Model.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this Model.

        The pricing model subtype

        :param subtype: The subtype of this Model.
        :type subtype: str
        """
        allowed_values = ["usage", "seat"]  # noqa: E501
        if subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `subtype` ({0}), must be one of {1}"
                .format(subtype, allowed_values)
            )

        self._subtype = subtype

    @property
    def trial(self):
        """Gets the trial of this Model.

        The maximum number of free trial days available

        :return: The trial of this Model.
        :rtype: int
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this Model.

        The maximum number of free trial days available

        :param trial: The trial of this Model.
        :type trial: int
        """
        if trial is None:
            raise ValueError("Invalid value for `trial`, must not be `None`")

        self._trial = trial

    @property
    def type(self):
        """Gets the type of this Model.

        The pricing model type. Free has no cost, single has a one time purchase cost and recurring requires a monthly subscription

        :return: The type of this Model.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Model.

        The pricing model type. Free has no cost, single has a one time purchase cost and recurring requires a monthly subscription

        :param type: The type of this Model.
        :type type: str
        """
        allowed_values = ["free", "single", "recurring"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
