# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Developer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: int=None, custom_data: object=None, developer_id: str=None, email: str=None, name: str=None, type: str=None):
        """Developer - a model defined in OpenAPI

        :param created: The created of this Developer.
        :param custom_data: The custom_data of this Developer.
        :param developer_id: The developer_id of this Developer.
        :param email: The email of this Developer.
        :param name: The name of this Developer.
        :param type: The type of this Developer.
        """
        self.openapi_types = {
            'created': int,
            'custom_data': object,
            'developer_id': str,
            'email': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'created': 'created',
            'custom_data': 'customData',
            'developer_id': 'developerId',
            'email': 'email',
            'name': 'name',
            'type': 'type'
        }

        self._created = created
        self._custom_data = custom_data
        self._developer_id = developer_id
        self._email = email
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Developer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Developer of this Developer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Developer.

        The time (in millis) of when this developer was created

        :return: The created of this Developer.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Developer.

        The time (in millis) of when this developer was created

        :param created: The created of this Developer.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def custom_data(self):
        """Gets the custom_data of this Developer.

        A custom JSON object that you can create and attach to this record

        :return: The custom_data of this Developer.
        :rtype: object
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this Developer.

        A custom JSON object that you can create and attach to this record

        :param custom_data: The custom_data of this Developer.
        :type custom_data: object
        """

        self._custom_data = custom_data

    @property
    def developer_id(self):
        """Gets the developer_id of this Developer.

        The id of this developer

        :return: The developer_id of this Developer.
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this Developer.

        The id of this developer

        :param developer_id: The developer_id of this Developer.
        :type developer_id: str
        """
        if developer_id is None:
            raise ValueError("Invalid value for `developer_id`, must not be `None`")

        self._developer_id = developer_id

    @property
    def email(self):
        """Gets the email of this Developer.

        The developer's email

        :return: The email of this Developer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Developer.

        The developer's email

        :param email: The email of this Developer.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this Developer.

        The developer's name

        :return: The name of this Developer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Developer.

        The developer's name

        :param name: The name of this Developer.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Developer.

        The type for this developer

        :return: The type of this Developer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Developer.

        The type for this developer

        :param type: The type of this Developer.
        :type type: str
        """

        self._type = type
