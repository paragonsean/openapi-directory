# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Access(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: List[str]=None, app_id: str=None, _date: int=None, ip: str=None, is_valid: bool=None, user_id: str=None):
        """Access - a model defined in OpenAPI

        :param access: The access of this Access.
        :param app_id: The app_id of this Access.
        :param _date: The _date of this Access.
        :param ip: The ip of this Access.
        :param is_valid: The is_valid of this Access.
        :param user_id: The user_id of this Access.
        """
        self.openapi_types = {
            'access': List[str],
            'app_id': str,
            '_date': int,
            'ip': str,
            'is_valid': bool,
            'user_id': str
        }

        self.attribute_map = {
            'access': 'access',
            'app_id': 'appId',
            '_date': 'date',
            'ip': 'ip',
            'is_valid': 'isValid',
            'user_id': 'userId'
        }

        self._access = access
        self._app_id = app_id
        self.__date = _date
        self._ip = ip
        self._is_valid = is_valid
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Access':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Access of this Access.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this Access.

        The approved access restrictions for this app

        :return: The access of this Access.
        :rtype: List[str]
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Access.

        The approved access restrictions for this app

        :param access: The access of this Access.
        :type access: List[str]
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")

        self._access = access

    @property
    def app_id(self):
        """Gets the app_id of this Access.

        The id of the app that owns this access key

        :return: The app_id of this Access.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Access.

        The id of the app that owns this access key

        :param app_id: The app_id of this Access.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def _date(self):
        """Gets the _date of this Access.

        The time (in milliseconds) of when the user agreed to the access request

        :return: The _date of this Access.
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Access.

        The time (in milliseconds) of when the user agreed to the access request

        :param _date: The _date of this Access.
        :type _date: int
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def ip(self):
        """Gets the ip of this Access.

        The ip address of the user agreeing to the access request

        :return: The ip of this Access.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Access.

        The ip address of the user agreeing to the access request

        :param ip: The ip of this Access.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def is_valid(self):
        """Gets the is_valid of this Access.

        True if this access is up to date with the current version of the app

        :return: The is_valid of this Access.
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this Access.

        True if this access is up to date with the current version of the app

        :param is_valid: The is_valid of this Access.
        :type is_valid: bool
        """
        if is_valid is None:
            raise ValueError("Invalid value for `is_valid`, must not be `None`")

        self._is_valid = is_valid

    @property
    def user_id(self):
        """Gets the user_id of this Access.

        The id for this user

        :return: The user_id of this Access.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Access.

        The id for this user

        :param user_id: The user_id of this Access.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
