# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, app_id: str=None, custom_data: object=None, _date: int=None, developer_amount: int=None, developer_id: str=None, fee_amount: int=None, marketplace_amount: int=None, ownership_id: str=None, transaction_id: str=None, type: str=None, user_id: str=None):
        """Transaction - a model defined in OpenAPI

        :param amount: The amount of this Transaction.
        :param app_id: The app_id of this Transaction.
        :param custom_data: The custom_data of this Transaction.
        :param _date: The _date of this Transaction.
        :param developer_amount: The developer_amount of this Transaction.
        :param developer_id: The developer_id of this Transaction.
        :param fee_amount: The fee_amount of this Transaction.
        :param marketplace_amount: The marketplace_amount of this Transaction.
        :param ownership_id: The ownership_id of this Transaction.
        :param transaction_id: The transaction_id of this Transaction.
        :param type: The type of this Transaction.
        :param user_id: The user_id of this Transaction.
        """
        self.openapi_types = {
            'amount': int,
            'app_id': str,
            'custom_data': object,
            '_date': int,
            'developer_amount': int,
            'developer_id': str,
            'fee_amount': int,
            'marketplace_amount': int,
            'ownership_id': str,
            'transaction_id': str,
            'type': str,
            'user_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'app_id': 'appId',
            'custom_data': 'customData',
            '_date': 'date',
            'developer_amount': 'developerAmount',
            'developer_id': 'developerId',
            'fee_amount': 'feeAmount',
            'marketplace_amount': 'marketplaceAmount',
            'ownership_id': 'ownershipId',
            'transaction_id': 'transactionId',
            'type': 'type',
            'user_id': 'userId'
        }

        self._amount = amount
        self._app_id = app_id
        self._custom_data = custom_data
        self.__date = _date
        self._developer_amount = developer_amount
        self._developer_id = developer_id
        self._fee_amount = fee_amount
        self._marketplace_amount = marketplace_amount
        self._ownership_id = ownership_id
        self._transaction_id = transaction_id
        self._type = type
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Transaction.

        The total amount paid in cents

        :return: The amount of this Transaction.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        The total amount paid in cents

        :param amount: The amount of this Transaction.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def app_id(self):
        """Gets the app_id of this Transaction.

        The id of the app involved with this transaction

        :return: The app_id of this Transaction.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Transaction.

        The id of the app involved with this transaction

        :param app_id: The app_id of this Transaction.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def custom_data(self):
        """Gets the custom_data of this Transaction.

        A custom JSON object that you can create and attach to this record

        :return: The custom_data of this Transaction.
        :rtype: object
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this Transaction.

        A custom JSON object that you can create and attach to this record

        :param custom_data: The custom_data of this Transaction.
        :type custom_data: object
        """

        self._custom_data = custom_data

    @property
    def _date(self):
        """Gets the _date of this Transaction.

        The date (in millis) of when this transaction occurred

        :return: The _date of this Transaction.
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Transaction.

        The date (in millis) of when this transaction occurred

        :param _date: The _date of this Transaction.
        :type _date: int
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def developer_amount(self):
        """Gets the developer_amount of this Transaction.

        The total amount paid to the developer in cents

        :return: The developer_amount of this Transaction.
        :rtype: int
        """
        return self._developer_amount

    @developer_amount.setter
    def developer_amount(self, developer_amount):
        """Sets the developer_amount of this Transaction.

        The total amount paid to the developer in cents

        :param developer_amount: The developer_amount of this Transaction.
        :type developer_amount: int
        """

        self._developer_amount = developer_amount

    @property
    def developer_id(self):
        """Gets the developer_id of this Transaction.

        The id of the developer involved with this transaction

        :return: The developer_id of this Transaction.
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this Transaction.

        The id of the developer involved with this transaction

        :param developer_id: The developer_id of this Transaction.
        :type developer_id: str
        """
        if developer_id is None:
            raise ValueError("Invalid value for `developer_id`, must not be `None`")

        self._developer_id = developer_id

    @property
    def fee_amount(self):
        """Gets the fee_amount of this Transaction.

        The total amount paid to payment processing fees in cents

        :return: The fee_amount of this Transaction.
        :rtype: int
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this Transaction.

        The total amount paid to payment processing fees in cents

        :param fee_amount: The fee_amount of this Transaction.
        :type fee_amount: int
        """

        self._fee_amount = fee_amount

    @property
    def marketplace_amount(self):
        """Gets the marketplace_amount of this Transaction.

        The total amount paid to the marketplace owner in cents

        :return: The marketplace_amount of this Transaction.
        :rtype: int
        """
        return self._marketplace_amount

    @marketplace_amount.setter
    def marketplace_amount(self, marketplace_amount):
        """Sets the marketplace_amount of this Transaction.

        The total amount paid to the marketplace owner in cents

        :param marketplace_amount: The marketplace_amount of this Transaction.
        :type marketplace_amount: int
        """

        self._marketplace_amount = marketplace_amount

    @property
    def ownership_id(self):
        """Gets the ownership_id of this Transaction.

        The id for the ownership associated with this transaction

        :return: The ownership_id of this Transaction.
        :rtype: str
        """
        return self._ownership_id

    @ownership_id.setter
    def ownership_id(self, ownership_id):
        """Sets the ownership_id of this Transaction.

        The id for the ownership associated with this transaction

        :param ownership_id: The ownership_id of this Transaction.
        :type ownership_id: str
        """
        if ownership_id is None:
            raise ValueError("Invalid value for `ownership_id`, must not be `None`")

        self._ownership_id = ownership_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Transaction.

        The id for this transaction

        :return: The transaction_id of this Transaction.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Transaction.

        The id for this transaction

        :param transaction_id: The transaction_id of this Transaction.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this Transaction.

        The type for this transaction

        :return: The type of this Transaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.

        The type for this transaction

        :param type: The type of this Transaction.
        :type type: str
        """
        allowed_values = ["payment", "refund"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this Transaction.

        The id of the user making the transaction

        :return: The user_id of this Transaction.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Transaction.

        The id of the user making the transaction

        :param user_id: The user_id of this Transaction.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
