# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_data: object=None, email: str=None, name: str=None, user_account_id: str=None, user_id: str=None):
        """UserAccount - a model defined in OpenAPI

        :param custom_data: The custom_data of this UserAccount.
        :param email: The email of this UserAccount.
        :param name: The name of this UserAccount.
        :param user_account_id: The user_account_id of this UserAccount.
        :param user_id: The user_id of this UserAccount.
        """
        self.openapi_types = {
            'custom_data': object,
            'email': str,
            'name': str,
            'user_account_id': str,
            'user_id': str
        }

        self.attribute_map = {
            'custom_data': 'customData',
            'email': 'email',
            'name': 'name',
            'user_account_id': 'userAccountId',
            'user_id': 'userId'
        }

        self._custom_data = custom_data
        self._email = email
        self._name = name
        self._user_account_id = user_account_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAccount of this UserAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_data(self):
        """Gets the custom_data of this UserAccount.

        A custom JSON object that you can create and attach to this record

        :return: The custom_data of this UserAccount.
        :rtype: object
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this UserAccount.

        A custom JSON object that you can create and attach to this record

        :param custom_data: The custom_data of this UserAccount.
        :type custom_data: object
        """

        self._custom_data = custom_data

    @property
    def email(self):
        """Gets the email of this UserAccount.

        The contact email address

        :return: The email of this UserAccount.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserAccount.

        The contact email address

        :param email: The email of this UserAccount.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this UserAccount.

        The name for the account

        :return: The name of this UserAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserAccount.

        The name for the account

        :param name: The name of this UserAccount.
        :type name: str
        """

        self._name = name

    @property
    def user_account_id(self):
        """Gets the user_account_id of this UserAccount.

        The id of this user account

        :return: The user_account_id of this UserAccount.
        :rtype: str
        """
        return self._user_account_id

    @user_account_id.setter
    def user_account_id(self, user_account_id):
        """Sets the user_account_id of this UserAccount.

        The id of this user account

        :param user_account_id: The user_account_id of this UserAccount.
        :type user_account_id: str
        """
        if user_account_id is None:
            raise ValueError("Invalid value for `user_account_id`, must not be `None`")

        self._user_account_id = user_account_id

    @property
    def user_id(self):
        """Gets the user_id of this UserAccount.

        The id of this user that this account belongs to

        :return: The user_id of this UserAccount.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserAccount.

        The id of this user that this account belongs to

        :param user_id: The user_id of this UserAccount.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
