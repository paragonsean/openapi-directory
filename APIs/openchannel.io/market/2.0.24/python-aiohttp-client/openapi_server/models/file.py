# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hash import Hash
from openapi_server.models.virus_scan import VirusScan
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, file_id: str=None, file_url: str=None, hash: Hash=None, mime_check: str=None, name: str=None, size: int=None, upload_date: int=None, virus_scan: VirusScan=None):
        """File - a model defined in OpenAPI

        :param content_type: The content_type of this File.
        :param file_id: The file_id of this File.
        :param file_url: The file_url of this File.
        :param hash: The hash of this File.
        :param mime_check: The mime_check of this File.
        :param name: The name of this File.
        :param size: The size of this File.
        :param upload_date: The upload_date of this File.
        :param virus_scan: The virus_scan of this File.
        """
        self.openapi_types = {
            'content_type': str,
            'file_id': str,
            'file_url': str,
            'hash': Hash,
            'mime_check': str,
            'name': str,
            'size': int,
            'upload_date': int,
            'virus_scan': VirusScan
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'file_id': 'fileId',
            'file_url': 'fileUrl',
            'hash': 'hash',
            'mime_check': 'mimeCheck',
            'name': 'name',
            'size': 'size',
            'upload_date': 'uploadDate',
            'virus_scan': 'virusScan'
        }

        self._content_type = content_type
        self._file_id = file_id
        self._file_url = file_url
        self._hash = hash
        self._mime_check = mime_check
        self._name = name
        self._size = size
        self._upload_date = upload_date
        self._virus_scan = virus_scan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The File of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this File.

        The internet media type of the file

        :return: The content_type of this File.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this File.

        The internet media type of the file

        :param content_type: The content_type of this File.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def file_id(self):
        """Gets the file_id of this File.

        The id of the uploaded file

        :return: The file_id of this File.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this File.

        The id of the uploaded file

        :param file_id: The file_id of this File.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_url(self):
        """Gets the file_url of this File.

        The path where the file can be located.

        :return: The file_url of this File.
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this File.

        The path where the file can be located.

        :param file_url: The file_url of this File.
        :type file_url: str
        """

        self._file_url = file_url

    @property
    def hash(self):
        """Gets the hash of this File.


        :return: The hash of this File.
        :rtype: Hash
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this File.


        :param hash: The hash of this File.
        :type hash: Hash
        """

        self._hash = hash

    @property
    def mime_check(self):
        """Gets the mime_check of this File.

        The mime type validation check to see if the extension of this file matches it's content. Can be PASSED or FAILED

        :return: The mime_check of this File.
        :rtype: str
        """
        return self._mime_check

    @mime_check.setter
    def mime_check(self, mime_check):
        """Sets the mime_check of this File.

        The mime type validation check to see if the extension of this file matches it's content. Can be PASSED or FAILED

        :param mime_check: The mime_check of this File.
        :type mime_check: str
        """
        allowed_values = ["PASSED", "FAILED"]  # noqa: E501
        if mime_check not in allowed_values:
            raise ValueError(
                "Invalid value for `mime_check` ({0}), must be one of {1}"
                .format(mime_check, allowed_values)
            )

        self._mime_check = mime_check

    @property
    def name(self):
        """Gets the name of this File.

        The name of the uploaded file

        :return: The name of this File.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        The name of the uploaded file

        :param name: The name of this File.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def size(self):
        """Gets the size of this File.

        The number of bytes in the uploaded file

        :return: The size of this File.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.

        The number of bytes in the uploaded file

        :param size: The size of this File.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def upload_date(self):
        """Gets the upload_date of this File.

        The time in milliseconds when the file was uploaded

        :return: The upload_date of this File.
        :rtype: int
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this File.

        The time in milliseconds when the file was uploaded

        :param upload_date: The upload_date of this File.
        :type upload_date: int
        """
        if upload_date is None:
            raise ValueError("Invalid value for `upload_date`, must not be `None`")

        self._upload_date = upload_date

    @property
    def virus_scan(self):
        """Gets the virus_scan of this File.


        :return: The virus_scan of this File.
        :rtype: VirusScan
        """
        return self._virus_scan

    @virus_scan.setter
    def virus_scan(self, virus_scan):
        """Sets the virus_scan of this File.


        :param virus_scan: The virus_scan of this File.
        :type virus_scan: VirusScan
        """

        self._virus_scan = virus_scan
