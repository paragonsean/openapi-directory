# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Revenue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, developer: int=None, total: int=None):
        """Revenue - a model defined in OpenAPI

        :param developer: The developer of this Revenue.
        :param total: The total of this Revenue.
        """
        self.openapi_types = {
            'developer': int,
            'total': int
        }

        self.attribute_map = {
            'developer': 'developer',
            'total': 'total'
        }

        self._developer = developer
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Revenue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Revenue of this Revenue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def developer(self):
        """Gets the developer of this Revenue.

        The total revenue generated for the developer by this app in cents

        :return: The developer of this Revenue.
        :rtype: int
        """
        return self._developer

    @developer.setter
    def developer(self, developer):
        """Sets the developer of this Revenue.

        The total revenue generated for the developer by this app in cents

        :param developer: The developer of this Revenue.
        :type developer: int
        """
        if developer is None:
            raise ValueError("Invalid value for `developer`, must not be `None`")

        self._developer = developer

    @property
    def total(self):
        """Gets the total of this Revenue.

        The total revenue generated by this app in cents

        :return: The total of this Revenue.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Revenue.

        The total revenue generated by this app in cents

        :param total: The total of this Revenue.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
