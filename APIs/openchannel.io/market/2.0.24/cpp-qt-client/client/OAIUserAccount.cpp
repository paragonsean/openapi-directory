/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAccount::OAIUserAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAccount::OAIUserAccount() {
    this->initializeModel();
}

OAIUserAccount::~OAIUserAccount() {}

void OAIUserAccount::initializeModel() {

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_user_account_id_isSet = false;
    m_user_account_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUserAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAccount::fromJsonObject(QJsonObject json) {

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_user_account_id_isValid = ::OpenAPI::fromJsonValue(m_user_account_id, json[QString("userAccountId")]);
    m_user_account_id_isSet = !json[QString("userAccountId")].isNull() && m_user_account_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIUserAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_data_isSet) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_user_account_id_isSet) {
        obj.insert(QString("userAccountId"), ::OpenAPI::toJsonValue(m_user_account_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIObject OAIUserAccount::getCustomData() const {
    return m_custom_data;
}
void OAIUserAccount::setCustomData(const OAIObject &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIUserAccount::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIUserAccount::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

QString OAIUserAccount::getEmail() const {
    return m_email;
}
void OAIUserAccount::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserAccount::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserAccount::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserAccount::getName() const {
    return m_name;
}
void OAIUserAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserAccount::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserAccount::getUserAccountId() const {
    return m_user_account_id;
}
void OAIUserAccount::setUserAccountId(const QString &user_account_id) {
    m_user_account_id = user_account_id;
    m_user_account_id_isSet = true;
}

bool OAIUserAccount::is_user_account_id_Set() const{
    return m_user_account_id_isSet;
}

bool OAIUserAccount::is_user_account_id_Valid() const{
    return m_user_account_id_isValid;
}

QString OAIUserAccount::getUserId() const {
    return m_user_id;
}
void OAIUserAccount::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserAccount::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserAccount::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUserAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_account_id_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
