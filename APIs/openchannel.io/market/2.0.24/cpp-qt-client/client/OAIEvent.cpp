/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_developer_isSet = false;
    m_developer_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;

    m_ownership_isSet = false;
    m_ownership_isValid = false;

    m_review_isSet = false;
    m_review_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_developer_isValid = ::OpenAPI::fromJsonValue(m_developer, json[QString("developer")]);
    m_developer_isSet = !json[QString("developer")].isNull() && m_developer_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;

    m_ownership_isValid = ::OpenAPI::fromJsonValue(m_ownership, json[QString("ownership")]);
    m_ownership_isSet = !json[QString("ownership")].isNull() && m_ownership_isValid;

    m_review_isValid = ::OpenAPI::fromJsonValue(m_review, json[QString("review")]);
    m_review_isSet = !json[QString("review")].isNull() && m_review_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_developer.isSet()) {
        obj.insert(QString("developer"), ::OpenAPI::toJsonValue(m_developer));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    if (m_ownership.isSet()) {
        obj.insert(QString("ownership"), ::OpenAPI::toJsonValue(m_ownership));
    }
    if (m_review.isSet()) {
        obj.insert(QString("review"), ::OpenAPI::toJsonValue(m_review));
    }
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIApp OAIEvent::getApp() const {
    return m_app;
}
void OAIEvent::setApp(const OAIApp &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIEvent::is_app_Set() const{
    return m_app_isSet;
}

bool OAIEvent::is_app_Valid() const{
    return m_app_isValid;
}

qint64 OAIEvent::getCreatedDate() const {
    return m_created_date;
}
void OAIEvent::setCreatedDate(const qint64 &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIEvent::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIEvent::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIEvent::getDescription() const {
    return m_description;
}
void OAIEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEvent::is_description_Valid() const{
    return m_description_isValid;
}

OAIDeveloper OAIEvent::getDeveloper() const {
    return m_developer;
}
void OAIEvent::setDeveloper(const OAIDeveloper &developer) {
    m_developer = developer;
    m_developer_isSet = true;
}

bool OAIEvent::is_developer_Set() const{
    return m_developer_isSet;
}

bool OAIEvent::is_developer_Valid() const{
    return m_developer_isValid;
}

QString OAIEvent::getEventId() const {
    return m_event_id;
}
void OAIEvent::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIEvent::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIEvent::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIEvent::getEventType() const {
    return m_event_type;
}
void OAIEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEvent::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAIEvent::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAIEvent::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAIEvent::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

OAIOwnership OAIEvent::getOwnership() const {
    return m_ownership;
}
void OAIEvent::setOwnership(const OAIOwnership &ownership) {
    m_ownership = ownership;
    m_ownership_isSet = true;
}

bool OAIEvent::is_ownership_Set() const{
    return m_ownership_isSet;
}

bool OAIEvent::is_ownership_Valid() const{
    return m_ownership_isValid;
}

OAIReview OAIEvent::getReview() const {
    return m_review;
}
void OAIEvent::setReview(const OAIReview &review) {
    m_review = review;
    m_review_isSet = true;
}

bool OAIEvent::is_review_Set() const{
    return m_review_isSet;
}

bool OAIEvent::is_review_Valid() const{
    return m_review_isValid;
}

OAITransaction OAIEvent::getTransaction() const {
    return m_transaction;
}
void OAIEvent::setTransaction(const OAITransaction &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIEvent::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIEvent::is_transaction_Valid() const{
    return m_transaction_isValid;
}

OAIUser OAIEvent::getUser() const {
    return m_user;
}
void OAIEvent::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEvent::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEvent::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_date_isValid && m_event_id_isValid && m_event_type_isValid && m_marketplace_id_isValid && true;
}

} // namespace OpenAPI
