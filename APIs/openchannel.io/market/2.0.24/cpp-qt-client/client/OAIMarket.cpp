/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarket::OAIMarket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarket::OAIMarket() {
    this->initializeModel();
}

OAIMarket::~OAIMarket() {}

void OAIMarket::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_category_groups_isSet = false;
    m_category_groups_isValid = false;

    m_marketplace_id_isSet = false;
    m_marketplace_id_isValid = false;

    m_preview_app_url_isSet = false;
    m_preview_app_url_isValid = false;

    m_view_app_url_isSet = false;
    m_view_app_url_isValid = false;
}

void OAIMarket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarket::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_category_groups_isValid = ::OpenAPI::fromJsonValue(m_category_groups, json[QString("categoryGroups")]);
    m_category_groups_isSet = !json[QString("categoryGroups")].isNull() && m_category_groups_isValid;

    m_marketplace_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_id, json[QString("marketplaceId")]);
    m_marketplace_id_isSet = !json[QString("marketplaceId")].isNull() && m_marketplace_id_isValid;

    m_preview_app_url_isValid = ::OpenAPI::fromJsonValue(m_preview_app_url, json[QString("previewAppUrl")]);
    m_preview_app_url_isSet = !json[QString("previewAppUrl")].isNull() && m_preview_app_url_isValid;

    m_view_app_url_isValid = ::OpenAPI::fromJsonValue(m_view_app_url, json[QString("viewAppUrl")]);
    m_view_app_url_isSet = !json[QString("viewAppUrl")].isNull() && m_view_app_url_isValid;
}

QString OAIMarket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarket::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_category_groups.size() > 0) {
        obj.insert(QString("categoryGroups"), ::OpenAPI::toJsonValue(m_category_groups));
    }
    if (m_marketplace_id_isSet) {
        obj.insert(QString("marketplaceId"), ::OpenAPI::toJsonValue(m_marketplace_id));
    }
    if (m_preview_app_url_isSet) {
        obj.insert(QString("previewAppUrl"), ::OpenAPI::toJsonValue(m_preview_app_url));
    }
    if (m_view_app_url_isSet) {
        obj.insert(QString("viewAppUrl"), ::OpenAPI::toJsonValue(m_view_app_url));
    }
    return obj;
}

QList<OAIAttributes> OAIMarket::getAttributes() const {
    return m_attributes;
}
void OAIMarket::setAttributes(const QList<OAIAttributes> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIMarket::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIMarket::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<OAICategoryGroups> OAIMarket::getCategoryGroups() const {
    return m_category_groups;
}
void OAIMarket::setCategoryGroups(const QList<OAICategoryGroups> &category_groups) {
    m_category_groups = category_groups;
    m_category_groups_isSet = true;
}

bool OAIMarket::is_category_groups_Set() const{
    return m_category_groups_isSet;
}

bool OAIMarket::is_category_groups_Valid() const{
    return m_category_groups_isValid;
}

QString OAIMarket::getMarketplaceId() const {
    return m_marketplace_id;
}
void OAIMarket::setMarketplaceId(const QString &marketplace_id) {
    m_marketplace_id = marketplace_id;
    m_marketplace_id_isSet = true;
}

bool OAIMarket::is_marketplace_id_Set() const{
    return m_marketplace_id_isSet;
}

bool OAIMarket::is_marketplace_id_Valid() const{
    return m_marketplace_id_isValid;
}

QString OAIMarket::getPreviewAppUrl() const {
    return m_preview_app_url;
}
void OAIMarket::setPreviewAppUrl(const QString &preview_app_url) {
    m_preview_app_url = preview_app_url;
    m_preview_app_url_isSet = true;
}

bool OAIMarket::is_preview_app_url_Set() const{
    return m_preview_app_url_isSet;
}

bool OAIMarket::is_preview_app_url_Valid() const{
    return m_preview_app_url_isValid;
}

QString OAIMarket::getViewAppUrl() const {
    return m_view_app_url;
}
void OAIMarket::setViewAppUrl(const QString &view_app_url) {
    m_view_app_url = view_app_url;
    m_view_app_url_isSet = true;
}

bool OAIMarket::is_view_app_url_Set() const{
    return m_view_app_url_isSet;
}

bool OAIMarket::is_view_app_url_Valid() const{
    return m_view_app_url_isValid;
}

bool OAIMarket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_app_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_app_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarket::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attributes_isValid && m_marketplace_id_isValid && m_preview_app_url_isValid && m_view_app_url_isValid && true;
}

} // namespace OpenAPI
