/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionsFindPaymentsAndRefundsApi_H
#define OAI_OAITransactionsFindPaymentsAndRefundsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITransaction.h"
#include "OAITransactionPages.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionsFindPaymentsAndRefundsApi : public QObject {
    Q_OBJECT

public:
    OAITransactionsFindPaymentsAndRefundsApi(const int timeOut = 0);
    ~OAITransactionsFindPaymentsAndRefundsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void transactionsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  transaction_id QString [required]
    */
    virtual void transactionsTransactionIdDelete(const QString &transaction_id);

    /**
    * @param[in]  transaction_id QString [required]
    */
    virtual void transactionsTransactionIdGet(const QString &transaction_id);

    /**
    * @param[in]  transaction_id QString [required]
    * @param[in]  custom_data QString [optional]
    */
    virtual void transactionsTransactionIdPost(const QString &transaction_id, const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void transactionsGetCallback(OAIHttpRequestWorker *worker);
    void transactionsTransactionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void transactionsTransactionIdGetCallback(OAIHttpRequestWorker *worker);
    void transactionsTransactionIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void transactionsGetSignal(OAITransactionPages summary);
    void transactionsTransactionIdDeleteSignal();
    void transactionsTransactionIdGetSignal();
    void transactionsTransactionIdPostSignal(OAITransaction summary);


    void transactionsGetSignalFull(OAIHttpRequestWorker *worker, OAITransactionPages summary);
    void transactionsTransactionIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void transactionsTransactionIdGetSignalFull(OAIHttpRequestWorker *worker);
    void transactionsTransactionIdPostSignalFull(OAIHttpRequestWorker *worker, OAITransaction summary);

    Q_DECL_DEPRECATED_X("Use transactionsGetSignalError() instead")
    void transactionsGetSignalE(OAITransactionPages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsGetSignalError(OAITransactionPages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdDeleteSignalError() instead")
    void transactionsTransactionIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdGetSignalError() instead")
    void transactionsTransactionIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdPostSignalError() instead")
    void transactionsTransactionIdPostSignalE(OAITransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdPostSignalError(OAITransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use transactionsGetSignalErrorFull() instead")
    void transactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdDeleteSignalErrorFull() instead")
    void transactionsTransactionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdGetSignalErrorFull() instead")
    void transactionsTransactionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdPostSignalErrorFull() instead")
    void transactionsTransactionIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
