/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirusScan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirusScan::OAIVirusScan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirusScan::OAIVirusScan() {
    this->initializeModel();
}

OAIVirusScan::~OAIVirusScan() {}

void OAIVirusScan::initializeModel() {

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_found_viruses_isSet = false;
    m_found_viruses_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIVirusScan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirusScan::fromJsonObject(QJsonObject json) {

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_found_viruses_isValid = ::OpenAPI::fromJsonValue(m_found_viruses, json[QString("foundViruses")]);
    m_found_viruses_isSet = !json[QString("foundViruses")].isNull() && m_found_viruses_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIVirusScan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirusScan::asJsonObject() const {
    QJsonObject obj;
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_found_viruses.size() > 0) {
        obj.insert(QString("foundViruses"), ::OpenAPI::toJsonValue(m_found_viruses));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAIVirusScan::getFinished() const {
    return m_finished;
}
void OAIVirusScan::setFinished(const qint64 &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIVirusScan::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIVirusScan::is_finished_Valid() const{
    return m_finished_isValid;
}

QList<OAIFoundVirus> OAIVirusScan::getFoundViruses() const {
    return m_found_viruses;
}
void OAIVirusScan::setFoundViruses(const QList<OAIFoundVirus> &found_viruses) {
    m_found_viruses = found_viruses;
    m_found_viruses_isSet = true;
}

bool OAIVirusScan::is_found_viruses_Set() const{
    return m_found_viruses_isSet;
}

bool OAIVirusScan::is_found_viruses_Valid() const{
    return m_found_viruses_isValid;
}

qint64 OAIVirusScan::getStarted() const {
    return m_started;
}
void OAIVirusScan::setStarted(const qint64 &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIVirusScan::is_started_Set() const{
    return m_started_isSet;
}

bool OAIVirusScan::is_started_Valid() const{
    return m_started_isValid;
}

QString OAIVirusScan::getStatus() const {
    return m_status;
}
void OAIVirusScan::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVirusScan::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVirusScan::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIVirusScan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_found_viruses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirusScan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
