/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesUploadFilesApi_H
#define OAI_OAIFilesUploadFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFile.h"
#include "OAIFileDownload.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesUploadFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesUploadFilesApi(const int timeOut = 0);
    ~OAIFilesUploadFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file_id_or_url QString [required]
    */
    virtual void filesByIdOrUrlGet(const QString &file_id_or_url);

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  valid_seconds qint32 [optional]
    */
    virtual void filesDownloadGet(const QString &file_id, const ::OpenAPI::OptionalParam<qint32> &valid_seconds = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void filesGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  is_private bool [optional]
    * @param[in]  hash QString [optional]
    */
    virtual void filesPost(const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<bool> &is_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &hash = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  is_private bool [optional]
    */
    virtual void filesUrlPost(const QString &url, const ::OpenAPI::OptionalParam<bool> &is_private = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void filesByIdOrUrlGetCallback(OAIHttpRequestWorker *worker);
    void filesDownloadGetCallback(OAIHttpRequestWorker *worker);
    void filesGetCallback(OAIHttpRequestWorker *worker);
    void filesPostCallback(OAIHttpRequestWorker *worker);
    void filesUrlPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void filesByIdOrUrlGetSignal(OAIFile summary);
    void filesDownloadGetSignal(OAIFileDownload summary);
    void filesGetSignal(OAIFile summary);
    void filesPostSignal(OAIFile summary);
    void filesUrlPostSignal(OAIFile summary);


    void filesByIdOrUrlGetSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void filesDownloadGetSignalFull(OAIHttpRequestWorker *worker, OAIFileDownload summary);
    void filesGetSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void filesPostSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void filesUrlPostSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);

    Q_DECL_DEPRECATED_X("Use filesByIdOrUrlGetSignalError() instead")
    void filesByIdOrUrlGetSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesByIdOrUrlGetSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesDownloadGetSignalError() instead")
    void filesDownloadGetSignalE(OAIFileDownload summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesDownloadGetSignalError(OAIFileDownload summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetSignalError() instead")
    void filesGetSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesPostSignalError() instead")
    void filesPostSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesPostSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesUrlPostSignalError() instead")
    void filesUrlPostSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesUrlPostSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use filesByIdOrUrlGetSignalErrorFull() instead")
    void filesByIdOrUrlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesByIdOrUrlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesDownloadGetSignalErrorFull() instead")
    void filesDownloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesDownloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetSignalErrorFull() instead")
    void filesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesPostSignalErrorFull() instead")
    void filesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesUrlPostSignalErrorFull() instead")
    void filesUrlPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesUrlPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
