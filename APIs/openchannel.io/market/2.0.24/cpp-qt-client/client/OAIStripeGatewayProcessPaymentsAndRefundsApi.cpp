/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStripeGatewayProcessPaymentsAndRefundsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIStripeGatewayProcessPaymentsAndRefundsApi::OAIStripeGatewayProcessPaymentsAndRefundsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIStripeGatewayProcessPaymentsAndRefundsApi::~OAIStripeGatewayProcessPaymentsAndRefundsApi() {
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://market.openchannel.io/v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("stripeGatewayDeveloperDeveloperIdAccountsGet", defaultConf);
    _serverIndices.insert("stripeGatewayDeveloperDeveloperIdAccountsGet", 0);
    _serverConfigs.insert("stripeGatewayDeveloperDeveloperIdAccountsPost", defaultConf);
    _serverIndices.insert("stripeGatewayDeveloperDeveloperIdAccountsPost", 0);
    _serverConfigs.insert("stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete", defaultConf);
    _serverIndices.insert("stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete", 0);
    _serverConfigs.insert("stripeGatewayUserUserIdCardsCardIdDelete", defaultConf);
    _serverIndices.insert("stripeGatewayUserUserIdCardsCardIdDelete", 0);
    _serverConfigs.insert("stripeGatewayUserUserIdCardsCardIdPost", defaultConf);
    _serverIndices.insert("stripeGatewayUserUserIdCardsCardIdPost", 0);
    _serverConfigs.insert("stripeGatewayUserUserIdCardsGet", defaultConf);
    _serverIndices.insert("stripeGatewayUserUserIdCardsGet", 0);
    _serverConfigs.insert("stripeGatewayUserUserIdCardsPost", defaultConf);
    _serverIndices.insert("stripeGatewayUserUserIdCardsPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIStripeGatewayProcessPaymentsAndRefundsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIStripeGatewayProcessPaymentsAndRefundsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIStripeGatewayProcessPaymentsAndRefundsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIStripeGatewayProcessPaymentsAndRefundsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIStripeGatewayProcessPaymentsAndRefundsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIStripeGatewayProcessPaymentsAndRefundsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIStripeGatewayProcessPaymentsAndRefundsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIStripeGatewayProcessPaymentsAndRefundsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIStripeGatewayProcessPaymentsAndRefundsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayDeveloperDeveloperIdAccountsGet(const QString &developer_id) {
    QString fullPath = QString(_serverConfigs["stripeGatewayDeveloperDeveloperIdAccountsGet"][_serverIndices.value("stripeGatewayDeveloperDeveloperIdAccountsGet")].URL()+"/stripe-gateway/developer/{developerId}/accounts");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString developer_idPathParam("{");
        developer_idPathParam.append("developerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "developerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"developerId"+pathSuffix : pathPrefix;
        fullPath.replace(developer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(developer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayDeveloperDeveloperIdAccountsGetCallback);
    connect(this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayDeveloperDeveloperIdAccountsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccounts output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsGetSignal(output);
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsGetSignalE(output, error_type, error_str);
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsGetSignalError(output, error_type, error_str);
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayDeveloperDeveloperIdAccountsPost(const QString &developer_id, const QString &redirect_url) {
    QString fullPath = QString(_serverConfigs["stripeGatewayDeveloperDeveloperIdAccountsPost"][_serverIndices.value("stripeGatewayDeveloperDeveloperIdAccountsPost")].URL()+"/stripe-gateway/developer/{developerId}/accounts");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString developer_idPathParam("{");
        developer_idPathParam.append("developerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "developerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"developerId"+pathSuffix : pathPrefix;
        fullPath.replace(developer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(developer_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "redirectUrl", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("redirectUrl")).append(querySuffix).append(QUrl::toPercentEncoding(redirect_url));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayDeveloperDeveloperIdAccountsPostCallback);
    connect(this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayDeveloperDeveloperIdAccountsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeveloperToken output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsPostSignal(output);
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsPostSignalE(output, error_type, error_str);
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsPostSignalError(output, error_type, error_str);
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete(const QString &developer_id, const QString &stripe_id) {
    QString fullPath = QString(_serverConfigs["stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete"][_serverIndices.value("stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete")].URL()+"/stripe-gateway/developer/{developerId}/accounts/{stripeId}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString developer_idPathParam("{");
        developer_idPathParam.append("developerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "developerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"developerId"+pathSuffix : pathPrefix;
        fullPath.replace(developer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(developer_id)));
    }
    
    {
        QString stripe_idPathParam("{");
        stripe_idPathParam.append("stripeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "stripeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"stripeId"+pathSuffix : pathPrefix;
        fullPath.replace(stripe_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(stripe_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteCallback);
    connect(this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccounts output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignal(output);
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalE(output, error_type, error_str);
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalError(output, error_type, error_str);
        Q_EMIT stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsCardIdDelete(const QString &user_id, const QString &card_id) {
    QString fullPath = QString(_serverConfigs["stripeGatewayUserUserIdCardsCardIdDelete"][_serverIndices.value("stripeGatewayUserUserIdCardsCardIdDelete")].URL()+"/stripe-gateway/user/{userId}/cards/{cardId}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userId"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    
    {
        QString card_idPathParam("{");
        card_idPathParam.append("cardId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cardId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cardId"+pathSuffix : pathPrefix;
        fullPath.replace(card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(card_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsCardIdDeleteCallback);
    connect(this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsCardIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICards output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stripeGatewayUserUserIdCardsCardIdDeleteSignal(output);
        Q_EMIT stripeGatewayUserUserIdCardsCardIdDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stripeGatewayUserUserIdCardsCardIdDeleteSignalE(output, error_type, error_str);
        Q_EMIT stripeGatewayUserUserIdCardsCardIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stripeGatewayUserUserIdCardsCardIdDeleteSignalError(output, error_type, error_str);
        Q_EMIT stripeGatewayUserUserIdCardsCardIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsCardIdPost(const QString &user_id, const QString &card_id, const ::OpenAPI::OptionalParam<bool> &is_default, const ::OpenAPI::OptionalParam<QString> &address_city, const ::OpenAPI::OptionalParam<QString> &address_country, const ::OpenAPI::OptionalParam<QString> &address_line1, const ::OpenAPI::OptionalParam<QString> &address_line2, const ::OpenAPI::OptionalParam<QString> &address_state, const ::OpenAPI::OptionalParam<QString> &address_zip) {
    QString fullPath = QString(_serverConfigs["stripeGatewayUserUserIdCardsCardIdPost"][_serverIndices.value("stripeGatewayUserUserIdCardsCardIdPost")].URL()+"/stripe-gateway/user/{userId}/cards/{cardId}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userId"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    
    {
        QString card_idPathParam("{");
        card_idPathParam.append("cardId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cardId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cardId"+pathSuffix : pathPrefix;
        fullPath.replace(card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(card_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (is_default.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "isDefault", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("isDefault")).append(querySuffix).append(QUrl::toPercentEncoding(is_default.stringValue()));
    }
    if (address_city.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "address_city", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("address_city")).append(querySuffix).append(QUrl::toPercentEncoding(address_city.stringValue()));
    }
    if (address_country.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "address_country", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("address_country")).append(querySuffix).append(QUrl::toPercentEncoding(address_country.stringValue()));
    }
    if (address_line1.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "address_line1", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("address_line1")).append(querySuffix).append(QUrl::toPercentEncoding(address_line1.stringValue()));
    }
    if (address_line2.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "address_line2", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("address_line2")).append(querySuffix).append(QUrl::toPercentEncoding(address_line2.stringValue()));
    }
    if (address_state.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "address_state", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("address_state")).append(querySuffix).append(QUrl::toPercentEncoding(address_state.stringValue()));
    }
    if (address_zip.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "address_zip", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("address_zip")).append(querySuffix).append(QUrl::toPercentEncoding(address_zip.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsCardIdPostCallback);
    connect(this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsCardIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICards output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stripeGatewayUserUserIdCardsCardIdPostSignal(output);
        Q_EMIT stripeGatewayUserUserIdCardsCardIdPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stripeGatewayUserUserIdCardsCardIdPostSignalE(output, error_type, error_str);
        Q_EMIT stripeGatewayUserUserIdCardsCardIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stripeGatewayUserUserIdCardsCardIdPostSignalError(output, error_type, error_str);
        Q_EMIT stripeGatewayUserUserIdCardsCardIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsGet(const QString &user_id) {
    QString fullPath = QString(_serverConfigs["stripeGatewayUserUserIdCardsGet"][_serverIndices.value("stripeGatewayUserUserIdCardsGet")].URL()+"/stripe-gateway/user/{userId}/cards");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userId"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsGetCallback);
    connect(this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICards output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stripeGatewayUserUserIdCardsGetSignal(output);
        Q_EMIT stripeGatewayUserUserIdCardsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stripeGatewayUserUserIdCardsGetSignalE(output, error_type, error_str);
        Q_EMIT stripeGatewayUserUserIdCardsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stripeGatewayUserUserIdCardsGetSignalError(output, error_type, error_str);
        Q_EMIT stripeGatewayUserUserIdCardsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsPost(const QString &user_id, const QString &token, const ::OpenAPI::OptionalParam<bool> &is_default) {
    QString fullPath = QString(_serverConfigs["stripeGatewayUserUserIdCardsPost"][_serverIndices.value("stripeGatewayUserUserIdCardsPost")].URL()+"/stripe-gateway/user/{userId}/cards");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("userId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userId"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "token", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("token")).append(querySuffix).append(QUrl::toPercentEncoding(token));
    }
    if (is_default.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "isDefault", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("isDefault")).append(querySuffix).append(QUrl::toPercentEncoding(is_default.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsPostCallback);
    connect(this, &OAIStripeGatewayProcessPaymentsAndRefundsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::stripeGatewayUserUserIdCardsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICards output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stripeGatewayUserUserIdCardsPostSignal(output);
        Q_EMIT stripeGatewayUserUserIdCardsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stripeGatewayUserUserIdCardsPostSignalE(output, error_type, error_str);
        Q_EMIT stripeGatewayUserUserIdCardsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stripeGatewayUserUserIdCardsPostSignalError(output, error_type, error_str);
        Q_EMIT stripeGatewayUserUserIdCardsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStripeGatewayProcessPaymentsAndRefundsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
