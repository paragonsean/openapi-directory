/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStripeGatewayProcessPaymentsAndRefundsApi_H
#define OAI_OAIStripeGatewayProcessPaymentsAndRefundsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccounts.h"
#include "OAICards.h"
#include "OAIDeveloperToken.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStripeGatewayProcessPaymentsAndRefundsApi : public QObject {
    Q_OBJECT

public:
    OAIStripeGatewayProcessPaymentsAndRefundsApi(const int timeOut = 0);
    ~OAIStripeGatewayProcessPaymentsAndRefundsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  developer_id QString [required]
    */
    virtual void stripeGatewayDeveloperDeveloperIdAccountsGet(const QString &developer_id);

    /**
    * @param[in]  developer_id QString [required]
    * @param[in]  redirect_url QString [required]
    */
    virtual void stripeGatewayDeveloperDeveloperIdAccountsPost(const QString &developer_id, const QString &redirect_url);

    /**
    * @param[in]  developer_id QString [required]
    * @param[in]  stripe_id QString [required]
    */
    virtual void stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete(const QString &developer_id, const QString &stripe_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  card_id QString [required]
    */
    virtual void stripeGatewayUserUserIdCardsCardIdDelete(const QString &user_id, const QString &card_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  card_id QString [required]
    * @param[in]  is_default bool [optional]
    * @param[in]  address_city QString [optional]
    * @param[in]  address_country QString [optional]
    * @param[in]  address_line1 QString [optional]
    * @param[in]  address_line2 QString [optional]
    * @param[in]  address_state QString [optional]
    * @param[in]  address_zip QString [optional]
    */
    virtual void stripeGatewayUserUserIdCardsCardIdPost(const QString &user_id, const QString &card_id, const ::OpenAPI::OptionalParam<bool> &is_default = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &address_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_line1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_line2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_zip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void stripeGatewayUserUserIdCardsGet(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  token QString [required]
    * @param[in]  is_default bool [optional]
    */
    virtual void stripeGatewayUserUserIdCardsPost(const QString &user_id, const QString &token, const ::OpenAPI::OptionalParam<bool> &is_default = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void stripeGatewayDeveloperDeveloperIdAccountsGetCallback(OAIHttpRequestWorker *worker);
    void stripeGatewayDeveloperDeveloperIdAccountsPostCallback(OAIHttpRequestWorker *worker);
    void stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteCallback(OAIHttpRequestWorker *worker);
    void stripeGatewayUserUserIdCardsCardIdDeleteCallback(OAIHttpRequestWorker *worker);
    void stripeGatewayUserUserIdCardsCardIdPostCallback(OAIHttpRequestWorker *worker);
    void stripeGatewayUserUserIdCardsGetCallback(OAIHttpRequestWorker *worker);
    void stripeGatewayUserUserIdCardsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void stripeGatewayDeveloperDeveloperIdAccountsGetSignal(OAIAccounts summary);
    void stripeGatewayDeveloperDeveloperIdAccountsPostSignal(OAIDeveloperToken summary);
    void stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignal(OAIAccounts summary);
    void stripeGatewayUserUserIdCardsCardIdDeleteSignal(OAICards summary);
    void stripeGatewayUserUserIdCardsCardIdPostSignal(OAICards summary);
    void stripeGatewayUserUserIdCardsGetSignal(OAICards summary);
    void stripeGatewayUserUserIdCardsPostSignal(OAICards summary);


    void stripeGatewayDeveloperDeveloperIdAccountsGetSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void stripeGatewayDeveloperDeveloperIdAccountsPostSignalFull(OAIHttpRequestWorker *worker, OAIDeveloperToken summary);
    void stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void stripeGatewayUserUserIdCardsCardIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAICards summary);
    void stripeGatewayUserUserIdCardsCardIdPostSignalFull(OAIHttpRequestWorker *worker, OAICards summary);
    void stripeGatewayUserUserIdCardsGetSignalFull(OAIHttpRequestWorker *worker, OAICards summary);
    void stripeGatewayUserUserIdCardsPostSignalFull(OAIHttpRequestWorker *worker, OAICards summary);

    Q_DECL_DEPRECATED_X("Use stripeGatewayDeveloperDeveloperIdAccountsGetSignalError() instead")
    void stripeGatewayDeveloperDeveloperIdAccountsGetSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayDeveloperDeveloperIdAccountsGetSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayDeveloperDeveloperIdAccountsPostSignalError() instead")
    void stripeGatewayDeveloperDeveloperIdAccountsPostSignalE(OAIDeveloperToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayDeveloperDeveloperIdAccountsPostSignalError(OAIDeveloperToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalError() instead")
    void stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayUserUserIdCardsCardIdDeleteSignalError() instead")
    void stripeGatewayUserUserIdCardsCardIdDeleteSignalE(OAICards summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayUserUserIdCardsCardIdDeleteSignalError(OAICards summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayUserUserIdCardsCardIdPostSignalError() instead")
    void stripeGatewayUserUserIdCardsCardIdPostSignalE(OAICards summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayUserUserIdCardsCardIdPostSignalError(OAICards summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayUserUserIdCardsGetSignalError() instead")
    void stripeGatewayUserUserIdCardsGetSignalE(OAICards summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayUserUserIdCardsGetSignalError(OAICards summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayUserUserIdCardsPostSignalError() instead")
    void stripeGatewayUserUserIdCardsPostSignalE(OAICards summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayUserUserIdCardsPostSignalError(OAICards summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use stripeGatewayDeveloperDeveloperIdAccountsGetSignalErrorFull() instead")
    void stripeGatewayDeveloperDeveloperIdAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayDeveloperDeveloperIdAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayDeveloperDeveloperIdAccountsPostSignalErrorFull() instead")
    void stripeGatewayDeveloperDeveloperIdAccountsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayDeveloperDeveloperIdAccountsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalErrorFull() instead")
    void stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayUserUserIdCardsCardIdDeleteSignalErrorFull() instead")
    void stripeGatewayUserUserIdCardsCardIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayUserUserIdCardsCardIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayUserUserIdCardsCardIdPostSignalErrorFull() instead")
    void stripeGatewayUserUserIdCardsCardIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayUserUserIdCardsCardIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayUserUserIdCardsGetSignalErrorFull() instead")
    void stripeGatewayUserUserIdCardsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayUserUserIdCardsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stripeGatewayUserUserIdCardsPostSignalErrorFull() instead")
    void stripeGatewayUserUserIdCardsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stripeGatewayUserUserIdCardsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
