/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPages::OAIUserPages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPages::OAIUserPages() {
    this->initializeModel();
}

OAIUserPages::~OAIUserPages() {}

void OAIUserPages::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;
}

void OAIUserPages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPages::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;
}

QString OAIUserPages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPages::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_list.size() > 0) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    return obj;
}

qint32 OAIUserPages::getCount() const {
    return m_count;
}
void OAIUserPages::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIUserPages::is_count_Set() const{
    return m_count_isSet;
}

bool OAIUserPages::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIUser> OAIUserPages::getList() const {
    return m_list;
}
void OAIUserPages::setList(const QList<OAIUser> &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIUserPages::is_list_Set() const{
    return m_list_isSet;
}

bool OAIUserPages::is_list_Valid() const{
    return m_list_isValid;
}

qint32 OAIUserPages::getPageNumber() const {
    return m_page_number;
}
void OAIUserPages::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIUserPages::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIUserPages::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIUserPages::getPages() const {
    return m_pages;
}
void OAIUserPages::setPages(const qint32 &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIUserPages::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIUserPages::is_pages_Valid() const{
    return m_pages_isValid;
}

bool OAIUserPages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPages::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_list_isValid && true;
}

} // namespace OpenAPI
