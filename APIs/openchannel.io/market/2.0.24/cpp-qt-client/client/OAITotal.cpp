/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITotal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITotal::OAITotal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITotal::OAITotal() {
    this->initializeModel();
}

OAITotal::~OAITotal() {}

void OAITotal::initializeModel() {

    m_apps_isSet = false;
    m_apps_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;
}

void OAITotal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITotal::fromJsonObject(QJsonObject json) {

    m_apps_isValid = ::OpenAPI::fromJsonValue(m_apps, json[QString("apps")]);
    m_apps_isSet = !json[QString("apps")].isNull() && m_apps_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;
}

QString OAITotal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITotal::asJsonObject() const {
    QJsonObject obj;
    if (m_apps.isSet()) {
        obj.insert(QString("apps"), ::OpenAPI::toJsonValue(m_apps));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_totals.isSet()) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    return obj;
}

OAIAppTotal OAITotal::getApps() const {
    return m_apps;
}
void OAITotal::setApps(const OAIAppTotal &apps) {
    m_apps = apps;
    m_apps_isSet = true;
}

bool OAITotal::is_apps_Set() const{
    return m_apps_isSet;
}

bool OAITotal::is_apps_Valid() const{
    return m_apps_isValid;
}

qint64 OAITotal::getEnd() const {
    return m_end;
}
void OAITotal::setEnd(const qint64 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAITotal::is_end_Set() const{
    return m_end_isSet;
}

bool OAITotal::is_end_Valid() const{
    return m_end_isValid;
}

qint64 OAITotal::getStart() const {
    return m_start;
}
void OAITotal::setStart(const qint64 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAITotal::is_start_Set() const{
    return m_start_isSet;
}

bool OAITotal::is_start_Valid() const{
    return m_start_isValid;
}

OAIDataTotal OAITotal::getTotals() const {
    return m_totals;
}
void OAITotal::setTotals(const OAIDataTotal &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAITotal::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAITotal::is_totals_Valid() const{
    return m_totals_isValid;
}

bool OAITotal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITotal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_apps_isValid && m_totals_isValid && true;
}

} // namespace OpenAPI
