/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStatsFindMarketplaceStatisticsApi_H
#define OAI_OAIStatsFindMarketplaceStatisticsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAITotal.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStatsFindMarketplaceStatisticsApi : public QObject {
    Q_OBJECT

public:
    OAIStatsFindMarketplaceStatisticsApi(const int timeOut = 0);
    ~OAIStatsFindMarketplaceStatisticsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  field QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  value qint32 [optional]
    * @param[in]  date qint64 [optional]
    */
    virtual void statsIncrementFieldPost(const QString &field, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &value = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &date = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  period QString [required]
    * @param[in]  fields QString [required]
    * @param[in]  start qint64 [optional]
    * @param[in]  end qint64 [optional]
    * @param[in]  query QString [optional]
    */
    virtual void statsSeriesPeriodFieldsGet(const QString &period, const QString &fields, const ::OpenAPI::OptionalParam<qint64> &start = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &end = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fields QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  start qint64 [optional]
    * @param[in]  end qint64 [optional]
    */
    virtual void statsTotalGet(const QString &fields, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &start = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &end = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void statsIncrementFieldPostCallback(OAIHttpRequestWorker *worker);
    void statsSeriesPeriodFieldsGetCallback(OAIHttpRequestWorker *worker);
    void statsTotalGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void statsIncrementFieldPostSignal();
    void statsSeriesPeriodFieldsGetSignal(QList<QList<OAIObject>> summary);
    void statsTotalGetSignal(OAITotal summary);


    void statsIncrementFieldPostSignalFull(OAIHttpRequestWorker *worker);
    void statsSeriesPeriodFieldsGetSignalFull(OAIHttpRequestWorker *worker, QList<QList<OAIObject>> summary);
    void statsTotalGetSignalFull(OAIHttpRequestWorker *worker, OAITotal summary);

    Q_DECL_DEPRECATED_X("Use statsIncrementFieldPostSignalError() instead")
    void statsIncrementFieldPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statsIncrementFieldPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statsSeriesPeriodFieldsGetSignalError() instead")
    void statsSeriesPeriodFieldsGetSignalE(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void statsSeriesPeriodFieldsGetSignalError(QList<QList<OAIObject>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statsTotalGetSignalError() instead")
    void statsTotalGetSignalE(OAITotal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void statsTotalGetSignalError(OAITotal summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use statsIncrementFieldPostSignalErrorFull() instead")
    void statsIncrementFieldPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statsIncrementFieldPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statsSeriesPeriodFieldsGetSignalErrorFull() instead")
    void statsSeriesPeriodFieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statsSeriesPeriodFieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statsTotalGetSignalErrorFull() instead")
    void statsTotalGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statsTotalGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
