/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_developer_amount_isSet = false;
    m_developer_amount_isValid = false;

    m_developer_id_isSet = false;
    m_developer_id_isValid = false;

    m_fee_amount_isSet = false;
    m_fee_amount_isValid = false;

    m_marketplace_amount_isSet = false;
    m_marketplace_amount_isValid = false;

    m_ownership_id_isSet = false;
    m_ownership_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_developer_amount_isValid = ::OpenAPI::fromJsonValue(m_developer_amount, json[QString("developerAmount")]);
    m_developer_amount_isSet = !json[QString("developerAmount")].isNull() && m_developer_amount_isValid;

    m_developer_id_isValid = ::OpenAPI::fromJsonValue(m_developer_id, json[QString("developerId")]);
    m_developer_id_isSet = !json[QString("developerId")].isNull() && m_developer_id_isValid;

    m_fee_amount_isValid = ::OpenAPI::fromJsonValue(m_fee_amount, json[QString("feeAmount")]);
    m_fee_amount_isSet = !json[QString("feeAmount")].isNull() && m_fee_amount_isValid;

    m_marketplace_amount_isValid = ::OpenAPI::fromJsonValue(m_marketplace_amount, json[QString("marketplaceAmount")]);
    m_marketplace_amount_isSet = !json[QString("marketplaceAmount")].isNull() && m_marketplace_amount_isValid;

    m_ownership_id_isValid = ::OpenAPI::fromJsonValue(m_ownership_id, json[QString("ownershipId")]);
    m_ownership_id_isSet = !json[QString("ownershipId")].isNull() && m_ownership_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_custom_data_isSet) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_developer_amount_isSet) {
        obj.insert(QString("developerAmount"), ::OpenAPI::toJsonValue(m_developer_amount));
    }
    if (m_developer_id_isSet) {
        obj.insert(QString("developerId"), ::OpenAPI::toJsonValue(m_developer_id));
    }
    if (m_fee_amount_isSet) {
        obj.insert(QString("feeAmount"), ::OpenAPI::toJsonValue(m_fee_amount));
    }
    if (m_marketplace_amount_isSet) {
        obj.insert(QString("marketplaceAmount"), ::OpenAPI::toJsonValue(m_marketplace_amount));
    }
    if (m_ownership_id_isSet) {
        obj.insert(QString("ownershipId"), ::OpenAPI::toJsonValue(m_ownership_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAITransaction::getAmount() const {
    return m_amount;
}
void OAITransaction::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransaction::getAppId() const {
    return m_app_id;
}
void OAITransaction::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAITransaction::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAITransaction::is_app_id_Valid() const{
    return m_app_id_isValid;
}

OAIObject OAITransaction::getCustomData() const {
    return m_custom_data;
}
void OAITransaction::setCustomData(const OAIObject &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAITransaction::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAITransaction::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

qint64 OAITransaction::getDate() const {
    return m_date;
}
void OAITransaction::setDate(const qint64 &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITransaction::is_date_Set() const{
    return m_date_isSet;
}

bool OAITransaction::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAITransaction::getDeveloperAmount() const {
    return m_developer_amount;
}
void OAITransaction::setDeveloperAmount(const qint32 &developer_amount) {
    m_developer_amount = developer_amount;
    m_developer_amount_isSet = true;
}

bool OAITransaction::is_developer_amount_Set() const{
    return m_developer_amount_isSet;
}

bool OAITransaction::is_developer_amount_Valid() const{
    return m_developer_amount_isValid;
}

QString OAITransaction::getDeveloperId() const {
    return m_developer_id;
}
void OAITransaction::setDeveloperId(const QString &developer_id) {
    m_developer_id = developer_id;
    m_developer_id_isSet = true;
}

bool OAITransaction::is_developer_id_Set() const{
    return m_developer_id_isSet;
}

bool OAITransaction::is_developer_id_Valid() const{
    return m_developer_id_isValid;
}

qint32 OAITransaction::getFeeAmount() const {
    return m_fee_amount;
}
void OAITransaction::setFeeAmount(const qint32 &fee_amount) {
    m_fee_amount = fee_amount;
    m_fee_amount_isSet = true;
}

bool OAITransaction::is_fee_amount_Set() const{
    return m_fee_amount_isSet;
}

bool OAITransaction::is_fee_amount_Valid() const{
    return m_fee_amount_isValid;
}

qint32 OAITransaction::getMarketplaceAmount() const {
    return m_marketplace_amount;
}
void OAITransaction::setMarketplaceAmount(const qint32 &marketplace_amount) {
    m_marketplace_amount = marketplace_amount;
    m_marketplace_amount_isSet = true;
}

bool OAITransaction::is_marketplace_amount_Set() const{
    return m_marketplace_amount_isSet;
}

bool OAITransaction::is_marketplace_amount_Valid() const{
    return m_marketplace_amount_isValid;
}

QString OAITransaction::getOwnershipId() const {
    return m_ownership_id;
}
void OAITransaction::setOwnershipId(const QString &ownership_id) {
    m_ownership_id = ownership_id;
    m_ownership_id_isSet = true;
}

bool OAITransaction::is_ownership_id_Set() const{
    return m_ownership_id_isSet;
}

bool OAITransaction::is_ownership_id_Valid() const{
    return m_ownership_id_isValid;
}

QString OAITransaction::getTransactionId() const {
    return m_transaction_id;
}
void OAITransaction::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAITransaction::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAITransaction::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAITransaction::getType() const {
    return m_type;
}
void OAITransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransaction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITransaction::getUserId() const {
    return m_user_id;
}
void OAITransaction::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITransaction::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITransaction::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_app_id_isValid && m_date_isValid && m_developer_id_isValid && m_ownership_id_isValid && m_transaction_id_isValid && m_type_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
