/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOwnershipFindOwnershipApi_H
#define OAI_OAIOwnershipFindOwnershipApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOwnership.h"
#include "OAIOwnershipPages.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOwnershipFindOwnershipApi : public QObject {
    Q_OBJECT

public:
    OAIOwnershipFindOwnershipApi(const int timeOut = 0);
    ~OAIOwnershipFindOwnershipApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void ownershipGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  model_id QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  custom_data QString [optional]
    */
    virtual void ownershipInstallPost(const QString &app_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &model_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ownership_id QString [required]
    */
    virtual void ownershipOwnershipIdGet(const QString &ownership_id);

    /**
    * @param[in]  ownership_id QString [required]
    * @param[in]  custom_data QString [optional]
    * @param[in]  expires qint64 [optional]
    */
    virtual void ownershipOwnershipIdPatch(const QString &ownership_id, const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &expires = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  ownership_id QString [required]
    * @param[in]  custom_data QString [optional]
    * @param[in]  expires qint64 [optional]
    */
    virtual void ownershipOwnershipIdPost(const QString &ownership_id, const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &expires = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  ownership_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  cancel_ownership bool [optional]
    * @param[in]  custom_data QString [optional]
    */
    virtual void ownershipUninstallOwnershipIdPost(const QString &ownership_id, const QString &user_id, const ::OpenAPI::OptionalParam<bool> &cancel_ownership = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ownershipGetCallback(OAIHttpRequestWorker *worker);
    void ownershipInstallPostCallback(OAIHttpRequestWorker *worker);
    void ownershipOwnershipIdGetCallback(OAIHttpRequestWorker *worker);
    void ownershipOwnershipIdPatchCallback(OAIHttpRequestWorker *worker);
    void ownershipOwnershipIdPostCallback(OAIHttpRequestWorker *worker);
    void ownershipUninstallOwnershipIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ownershipGetSignal(OAIOwnershipPages summary);
    void ownershipInstallPostSignal(OAIOwnership summary);
    void ownershipOwnershipIdGetSignal(OAIOwnership summary);
    void ownershipOwnershipIdPatchSignal(OAIOwnership summary);
    void ownershipOwnershipIdPostSignal(OAIOwnership summary);
    void ownershipUninstallOwnershipIdPostSignal(OAIOwnership summary);


    void ownershipGetSignalFull(OAIHttpRequestWorker *worker, OAIOwnershipPages summary);
    void ownershipInstallPostSignalFull(OAIHttpRequestWorker *worker, OAIOwnership summary);
    void ownershipOwnershipIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOwnership summary);
    void ownershipOwnershipIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIOwnership summary);
    void ownershipOwnershipIdPostSignalFull(OAIHttpRequestWorker *worker, OAIOwnership summary);
    void ownershipUninstallOwnershipIdPostSignalFull(OAIHttpRequestWorker *worker, OAIOwnership summary);

    Q_DECL_DEPRECATED_X("Use ownershipGetSignalError() instead")
    void ownershipGetSignalE(OAIOwnershipPages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipGetSignalError(OAIOwnershipPages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipInstallPostSignalError() instead")
    void ownershipInstallPostSignalE(OAIOwnership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipInstallPostSignalError(OAIOwnership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipOwnershipIdGetSignalError() instead")
    void ownershipOwnershipIdGetSignalE(OAIOwnership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipOwnershipIdGetSignalError(OAIOwnership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipOwnershipIdPatchSignalError() instead")
    void ownershipOwnershipIdPatchSignalE(OAIOwnership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipOwnershipIdPatchSignalError(OAIOwnership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipOwnershipIdPostSignalError() instead")
    void ownershipOwnershipIdPostSignalE(OAIOwnership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipOwnershipIdPostSignalError(OAIOwnership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipUninstallOwnershipIdPostSignalError() instead")
    void ownershipUninstallOwnershipIdPostSignalE(OAIOwnership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipUninstallOwnershipIdPostSignalError(OAIOwnership summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ownershipGetSignalErrorFull() instead")
    void ownershipGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipInstallPostSignalErrorFull() instead")
    void ownershipInstallPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipInstallPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipOwnershipIdGetSignalErrorFull() instead")
    void ownershipOwnershipIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipOwnershipIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipOwnershipIdPatchSignalErrorFull() instead")
    void ownershipOwnershipIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipOwnershipIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipOwnershipIdPostSignalErrorFull() instead")
    void ownershipOwnershipIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipOwnershipIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ownershipUninstallOwnershipIdPostSignalErrorFull() instead")
    void ownershipUninstallOwnershipIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ownershipUninstallOwnershipIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
