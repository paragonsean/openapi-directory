/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeveloperAccountsFindAndModifyDeveloperAccountsApi_H
#define OAI_OAIDeveloperAccountsFindAndModifyDeveloperAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeveloperAccount.h"
#include "OAIDeveloperAccountPages.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeveloperAccountsFindAndModifyDeveloperAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIDeveloperAccountsFindAndModifyDeveloperAccountsApi(const int timeOut = 0);
    ~OAIDeveloperAccountsFindAndModifyDeveloperAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  developer_account_id QString [required]
    */
    virtual void developerAccountsDeveloperAccountIdDelete(const QString &developer_account_id);

    /**
    * @param[in]  developer_account_id QString [required]
    */
    virtual void developerAccountsDeveloperAccountIdGet(const QString &developer_account_id);

    /**
    * @param[in]  developer_account_id QString [required]
    * @param[in]  developer_id QString [required]
    * @param[in]  email QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  custom_data QString [optional]
    */
    virtual void developerAccountsDeveloperAccountIdPatch(const QString &developer_account_id, const QString &developer_id, const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  developer_account_id QString [required]
    * @param[in]  developer_id QString [required]
    * @param[in]  email QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  custom_data QString [optional]
    */
    virtual void developerAccountsDeveloperAccountIdPost(const QString &developer_account_id, const QString &developer_id, const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void developerAccountsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void developerAccountsDeveloperAccountIdDeleteCallback(OAIHttpRequestWorker *worker);
    void developerAccountsDeveloperAccountIdGetCallback(OAIHttpRequestWorker *worker);
    void developerAccountsDeveloperAccountIdPatchCallback(OAIHttpRequestWorker *worker);
    void developerAccountsDeveloperAccountIdPostCallback(OAIHttpRequestWorker *worker);
    void developerAccountsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void developerAccountsDeveloperAccountIdDeleteSignal();
    void developerAccountsDeveloperAccountIdGetSignal(OAIDeveloperAccount summary);
    void developerAccountsDeveloperAccountIdPatchSignal(OAIDeveloperAccount summary);
    void developerAccountsDeveloperAccountIdPostSignal(OAIDeveloperAccount summary);
    void developerAccountsGetSignal(OAIDeveloperAccountPages summary);


    void developerAccountsDeveloperAccountIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void developerAccountsDeveloperAccountIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDeveloperAccount summary);
    void developerAccountsDeveloperAccountIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIDeveloperAccount summary);
    void developerAccountsDeveloperAccountIdPostSignalFull(OAIHttpRequestWorker *worker, OAIDeveloperAccount summary);
    void developerAccountsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeveloperAccountPages summary);

    Q_DECL_DEPRECATED_X("Use developerAccountsDeveloperAccountIdDeleteSignalError() instead")
    void developerAccountsDeveloperAccountIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsDeveloperAccountIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use developerAccountsDeveloperAccountIdGetSignalError() instead")
    void developerAccountsDeveloperAccountIdGetSignalE(OAIDeveloperAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsDeveloperAccountIdGetSignalError(OAIDeveloperAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use developerAccountsDeveloperAccountIdPatchSignalError() instead")
    void developerAccountsDeveloperAccountIdPatchSignalE(OAIDeveloperAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsDeveloperAccountIdPatchSignalError(OAIDeveloperAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use developerAccountsDeveloperAccountIdPostSignalError() instead")
    void developerAccountsDeveloperAccountIdPostSignalE(OAIDeveloperAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsDeveloperAccountIdPostSignalError(OAIDeveloperAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use developerAccountsGetSignalError() instead")
    void developerAccountsGetSignalE(OAIDeveloperAccountPages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsGetSignalError(OAIDeveloperAccountPages summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use developerAccountsDeveloperAccountIdDeleteSignalErrorFull() instead")
    void developerAccountsDeveloperAccountIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsDeveloperAccountIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use developerAccountsDeveloperAccountIdGetSignalErrorFull() instead")
    void developerAccountsDeveloperAccountIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsDeveloperAccountIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use developerAccountsDeveloperAccountIdPatchSignalErrorFull() instead")
    void developerAccountsDeveloperAccountIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsDeveloperAccountIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use developerAccountsDeveloperAccountIdPostSignalErrorFull() instead")
    void developerAccountsDeveloperAccountIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsDeveloperAccountIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use developerAccountsGetSignalErrorFull() instead")
    void developerAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void developerAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
