/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReview::OAIReview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReview::OAIReview() {
    this->initializeModel();
}

OAIReview::~OAIReview() {}

void OAIReview::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_report_date_isSet = false;
    m_report_date_isValid = false;

    m_review_id_isSet = false;
    m_review_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_account_isSet = false;
    m_user_account_isValid = false;

    m_user_account_id_isSet = false;
    m_user_account_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIReview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReview::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_report_date_isValid = ::OpenAPI::fromJsonValue(m_report_date, json[QString("reportDate")]);
    m_report_date_isSet = !json[QString("reportDate")].isNull() && m_report_date_isValid;

    m_review_id_isValid = ::OpenAPI::fromJsonValue(m_review_id, json[QString("reviewId")]);
    m_review_id_isSet = !json[QString("reviewId")].isNull() && m_review_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_account_isValid = ::OpenAPI::fromJsonValue(m_user_account, json[QString("userAccount")]);
    m_user_account_isSet = !json[QString("userAccount")].isNull() && m_user_account_isValid;

    m_user_account_id_isValid = ::OpenAPI::fromJsonValue(m_user_account_id, json[QString("userAccountId")]);
    m_user_account_id_isSet = !json[QString("userAccountId")].isNull() && m_user_account_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIReview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReview::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_custom_data_isSet) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_headline_isSet) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_report_date_isSet) {
        obj.insert(QString("reportDate"), ::OpenAPI::toJsonValue(m_report_date));
    }
    if (m_review_id_isSet) {
        obj.insert(QString("reviewId"), ::OpenAPI::toJsonValue(m_review_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_account.isSet()) {
        obj.insert(QString("userAccount"), ::OpenAPI::toJsonValue(m_user_account));
    }
    if (m_user_account_id_isSet) {
        obj.insert(QString("userAccountId"), ::OpenAPI::toJsonValue(m_user_account_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIReview::getAppId() const {
    return m_app_id;
}
void OAIReview::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIReview::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIReview::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIReview::getCustomData() const {
    return m_custom_data;
}
void OAIReview::setCustomData(const QString &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIReview::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIReview::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

QString OAIReview::getDescription() const {
    return m_description;
}
void OAIReview::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReview::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReview::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIReview::getHeadline() const {
    return m_headline;
}
void OAIReview::setHeadline(const QString &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAIReview::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAIReview::is_headline_Valid() const{
    return m_headline_isValid;
}

qint32 OAIReview::getRating() const {
    return m_rating;
}
void OAIReview::setRating(const qint32 &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIReview::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIReview::is_rating_Valid() const{
    return m_rating_isValid;
}

qint64 OAIReview::getReportDate() const {
    return m_report_date;
}
void OAIReview::setReportDate(const qint64 &report_date) {
    m_report_date = report_date;
    m_report_date_isSet = true;
}

bool OAIReview::is_report_date_Set() const{
    return m_report_date_isSet;
}

bool OAIReview::is_report_date_Valid() const{
    return m_report_date_isValid;
}

QString OAIReview::getReviewId() const {
    return m_review_id;
}
void OAIReview::setReviewId(const QString &review_id) {
    m_review_id = review_id;
    m_review_id_isSet = true;
}

bool OAIReview::is_review_id_Set() const{
    return m_review_id_isSet;
}

bool OAIReview::is_review_id_Valid() const{
    return m_review_id_isValid;
}

OAIStatus OAIReview::getStatus() const {
    return m_status;
}
void OAIReview::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReview::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReview::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIReview::getType() const {
    return m_type;
}
void OAIReview::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReview::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReview::is_type_Valid() const{
    return m_type_isValid;
}

OAIUser OAIReview::getUser() const {
    return m_user;
}
void OAIReview::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIReview::is_user_Set() const{
    return m_user_isSet;
}

bool OAIReview::is_user_Valid() const{
    return m_user_isValid;
}

OAIUserAccount OAIReview::getUserAccount() const {
    return m_user_account;
}
void OAIReview::setUserAccount(const OAIUserAccount &user_account) {
    m_user_account = user_account;
    m_user_account_isSet = true;
}

bool OAIReview::is_user_account_Set() const{
    return m_user_account_isSet;
}

bool OAIReview::is_user_account_Valid() const{
    return m_user_account_isValid;
}

QString OAIReview::getUserAccountId() const {
    return m_user_account_id;
}
void OAIReview::setUserAccountId(const QString &user_account_id) {
    m_user_account_id = user_account_id;
    m_user_account_id_isSet = true;
}

bool OAIReview::is_user_account_id_Set() const{
    return m_user_account_id_isSet;
}

bool OAIReview::is_user_account_id_Valid() const{
    return m_user_account_id_isValid;
}

QString OAIReview::getUserId() const {
    return m_user_id;
}
void OAIReview::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIReview::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIReview::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIReview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReview::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_custom_data_isValid && m_description_isValid && m_headline_isValid && m_rating_isValid && m_report_date_isValid && m_review_id_isValid && m_status_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
