/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReviewsFindAndModifyReviewsApi_H
#define OAI_OAIReviewsFindAndModifyReviewsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIReview.h"
#include "OAIReviewPages.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReviewsFindAndModifyReviewsApi : public QObject {
    Q_OBJECT

public:
    OAIReviewsFindAndModifyReviewsApi(const int timeOut = 0);
    ~OAIReviewsFindAndModifyReviewsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void reviewsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  headline QString [required]
    * @param[in]  rating qint32 [required]
    * @param[in]  description QString [required]
    * @param[in]  user_account_id QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  must_own_app bool [optional]
    * @param[in]  auto_approve bool [optional]
    * @param[in]  custom_data QString [optional]
    */
    virtual void reviewsPost(const QString &app_id, const QString &user_id, const QString &headline, const qint32 &rating, const QString &description, const ::OpenAPI::OptionalParam<QString> &user_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &must_own_app = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &auto_approve = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  user_account_id QString [optional]
    */
    virtual void reviewsReviewIdDelete(const QString &review_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &user_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  review_id QString [required]
    */
    virtual void reviewsReviewIdGet(const QString &review_id);

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  user_account_id QString [optional]
    * @param[in]  headline QString [optional]
    * @param[in]  rating qint32 [optional]
    * @param[in]  description QString [optional]
    * @param[in]  custom_data QString [optional]
    */
    virtual void reviewsReviewIdPatch(const QString &review_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &user_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &headline = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &rating = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  user_account_id QString [required]
    * @param[in]  headline QString [required]
    * @param[in]  rating qint32 [required]
    * @param[in]  description QString [required]
    * @param[in]  custom_data QString [optional]
    */
    virtual void reviewsReviewIdPost(const QString &review_id, const QString &user_id, const QString &user_account_id, const QString &headline, const qint32 &rating, const QString &description, const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reviewsGetCallback(OAIHttpRequestWorker *worker);
    void reviewsPostCallback(OAIHttpRequestWorker *worker);
    void reviewsReviewIdDeleteCallback(OAIHttpRequestWorker *worker);
    void reviewsReviewIdGetCallback(OAIHttpRequestWorker *worker);
    void reviewsReviewIdPatchCallback(OAIHttpRequestWorker *worker);
    void reviewsReviewIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reviewsGetSignal(OAIReviewPages summary);
    void reviewsPostSignal(OAIReview summary);
    void reviewsReviewIdDeleteSignal();
    void reviewsReviewIdGetSignal(OAIReview summary);
    void reviewsReviewIdPatchSignal(OAIReview summary);
    void reviewsReviewIdPostSignal(OAIReview summary);


    void reviewsGetSignalFull(OAIHttpRequestWorker *worker, OAIReviewPages summary);
    void reviewsPostSignalFull(OAIHttpRequestWorker *worker, OAIReview summary);
    void reviewsReviewIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void reviewsReviewIdGetSignalFull(OAIHttpRequestWorker *worker, OAIReview summary);
    void reviewsReviewIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIReview summary);
    void reviewsReviewIdPostSignalFull(OAIHttpRequestWorker *worker, OAIReview summary);

    Q_DECL_DEPRECATED_X("Use reviewsGetSignalError() instead")
    void reviewsGetSignalE(OAIReviewPages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsGetSignalError(OAIReviewPages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsPostSignalError() instead")
    void reviewsPostSignalE(OAIReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsPostSignalError(OAIReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsReviewIdDeleteSignalError() instead")
    void reviewsReviewIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsReviewIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsReviewIdGetSignalError() instead")
    void reviewsReviewIdGetSignalE(OAIReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsReviewIdGetSignalError(OAIReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsReviewIdPatchSignalError() instead")
    void reviewsReviewIdPatchSignalE(OAIReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsReviewIdPatchSignalError(OAIReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsReviewIdPostSignalError() instead")
    void reviewsReviewIdPostSignalE(OAIReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsReviewIdPostSignalError(OAIReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reviewsGetSignalErrorFull() instead")
    void reviewsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsPostSignalErrorFull() instead")
    void reviewsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsReviewIdDeleteSignalErrorFull() instead")
    void reviewsReviewIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsReviewIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsReviewIdGetSignalErrorFull() instead")
    void reviewsReviewIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsReviewIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsReviewIdPatchSignalErrorFull() instead")
    void reviewsReviewIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsReviewIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsReviewIdPostSignalErrorFull() instead")
    void reviewsReviewIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsReviewIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
