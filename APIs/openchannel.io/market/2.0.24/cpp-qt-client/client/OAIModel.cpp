/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_billing_period_isSet = false;
    m_billing_period_isValid = false;

    m_billing_period_unit_isSet = false;
    m_billing_period_unit_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_fee_payer_isSet = false;
    m_fee_payer_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_trial_isSet = false;
    m_trial_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_billing_period_isValid = ::OpenAPI::fromJsonValue(m_billing_period, json[QString("billingPeriod")]);
    m_billing_period_isSet = !json[QString("billingPeriod")].isNull() && m_billing_period_isValid;

    m_billing_period_unit_isValid = ::OpenAPI::fromJsonValue(m_billing_period_unit, json[QString("billingPeriodUnit")]);
    m_billing_period_unit_isSet = !json[QString("billingPeriodUnit")].isNull() && m_billing_period_unit_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_fee_payer_isValid = ::OpenAPI::fromJsonValue(m_fee_payer, json[QString("feePayer")]);
    m_fee_payer_isSet = !json[QString("feePayer")].isNull() && m_fee_payer_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_trial_isValid = ::OpenAPI::fromJsonValue(m_trial, json[QString("trial")]);
    m_trial_isSet = !json[QString("trial")].isNull() && m_trial_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_period_isSet) {
        obj.insert(QString("billingPeriod"), ::OpenAPI::toJsonValue(m_billing_period));
    }
    if (m_billing_period_unit_isSet) {
        obj.insert(QString("billingPeriodUnit"), ::OpenAPI::toJsonValue(m_billing_period_unit));
    }
    if (m_commission_isSet) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_custom_data_isSet) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_fee_payer_isSet) {
        obj.insert(QString("feePayer"), ::OpenAPI::toJsonValue(m_fee_payer));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_trial_isSet) {
        obj.insert(QString("trial"), ::OpenAPI::toJsonValue(m_trial));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIModel::getBillingPeriod() const {
    return m_billing_period;
}
void OAIModel::setBillingPeriod(const QString &billing_period) {
    m_billing_period = billing_period;
    m_billing_period_isSet = true;
}

bool OAIModel::is_billing_period_Set() const{
    return m_billing_period_isSet;
}

bool OAIModel::is_billing_period_Valid() const{
    return m_billing_period_isValid;
}

qint32 OAIModel::getBillingPeriodUnit() const {
    return m_billing_period_unit;
}
void OAIModel::setBillingPeriodUnit(const qint32 &billing_period_unit) {
    m_billing_period_unit = billing_period_unit;
    m_billing_period_unit_isSet = true;
}

bool OAIModel::is_billing_period_unit_Set() const{
    return m_billing_period_unit_isSet;
}

bool OAIModel::is_billing_period_unit_Valid() const{
    return m_billing_period_unit_isValid;
}

qint32 OAIModel::getCommission() const {
    return m_commission;
}
void OAIModel::setCommission(const qint32 &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAIModel::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAIModel::is_commission_Valid() const{
    return m_commission_isValid;
}

QString OAIModel::getCurrency() const {
    return m_currency;
}
void OAIModel::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIModel::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIModel::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIObject OAIModel::getCustomData() const {
    return m_custom_data;
}
void OAIModel::setCustomData(const OAIObject &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIModel::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIModel::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

QString OAIModel::getFeePayer() const {
    return m_fee_payer;
}
void OAIModel::setFeePayer(const QString &fee_payer) {
    m_fee_payer = fee_payer;
    m_fee_payer_isSet = true;
}

bool OAIModel::is_fee_payer_Set() const{
    return m_fee_payer_isSet;
}

bool OAIModel::is_fee_payer_Valid() const{
    return m_fee_payer_isValid;
}

QString OAIModel::getLicense() const {
    return m_license;
}
void OAIModel::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIModel::is_license_Set() const{
    return m_license_isSet;
}

bool OAIModel::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIModel::getModelId() const {
    return m_model_id;
}
void OAIModel::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIModel::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIModel::is_model_id_Valid() const{
    return m_model_id_isValid;
}

qint32 OAIModel::getPrice() const {
    return m_price;
}
void OAIModel::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIModel::is_price_Set() const{
    return m_price_isSet;
}

bool OAIModel::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIModel::getSubtype() const {
    return m_subtype;
}
void OAIModel::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIModel::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIModel::is_subtype_Valid() const{
    return m_subtype_isValid;
}

qint32 OAIModel::getTrial() const {
    return m_trial;
}
void OAIModel::setTrial(const qint32 &trial) {
    m_trial = trial;
    m_trial_isSet = true;
}

bool OAIModel::is_trial_Set() const{
    return m_trial_isSet;
}

bool OAIModel::is_trial_Valid() const{
    return m_trial_isValid;
}

QString OAIModel::getType() const {
    return m_type;
}
void OAIModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_payer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_commission_isValid && m_currency_isValid && m_fee_payer_isValid && m_license_isValid && m_price_isValid && m_trial_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
