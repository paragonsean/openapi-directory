/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppsFindAndModifyAppsApi_H
#define OAI_OAIAppsFindAndModifyAppsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApp.h"
#include "OAIAppPages.h"
#include "OAIAppVersion.h"
#include "OAISearchPages.h"
#include "OAIVersionPages.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppsFindAndModifyAppsApi : public QObject {
    Q_OBJECT

public:
    OAIAppsFindAndModifyAppsApi(const int timeOut = 0);
    ~OAIAppsFindAndModifyAppsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  developer_id QString [required]
    */
    virtual void appsAppIdDelete(const QString &app_id, const QString &developer_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  track_views bool [optional]
    */
    virtual void appsAppIdGet(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &track_views = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  developer_id QString [required]
    * @param[in]  version QString [required]
    */
    virtual void appsAppIdLivePost(const QString &app_id, const QString &developer_id, const QString &version);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  developer_id QString [required]
    * @param[in]  version qint32 [required]
    * @param[in]  auto_approve bool [optional]
    */
    virtual void appsAppIdPublishPost(const QString &app_id, const QString &developer_id, const qint32 &version, const ::OpenAPI::OptionalParam<bool> &auto_approve = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  developer_id QString [required]
    */
    virtual void appsAppIdVersionsVersionDelete(const QString &app_id, const QString &version, const QString &developer_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version qint32 [required]
    * @param[in]  developer_id QString [optional]
    */
    virtual void appsAppIdVersionsVersionGet(const QString &app_id, const qint32 &version, const ::OpenAPI::OptionalParam<QString> &developer_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  developer_id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  custom_data QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  restrict QString [optional]
    * @param[in]  allow QString [optional]
    * @param[in]  access QString [optional]
    * @param[in]  approval_required QString [optional]
    */
    virtual void appsAppIdVersionsVersionPatch(const QString &app_id, const QString &version, const QString &developer_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &restrict = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allow = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &approval_required = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  developer_id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  custom_data QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  restrict QString [optional]
    * @param[in]  allow QString [optional]
    * @param[in]  access QString [optional]
    * @param[in]  approval_required QString [optional]
    */
    virtual void appsAppIdVersionsVersionPost(const QString &app_id, const QString &version, const QString &developer_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &restrict = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allow = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &approval_required = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version qint32 [required]
    * @param[in]  developer_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  modified_by QString [optional]
    * @param[in]  reason QString [optional]
    */
    virtual void appsAppIdVersionsVersionStatusPost(const QString &app_id, const qint32 &version, const ::OpenAPI::OptionalParam<QString> &developer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reason = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  safe_name QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  track_views bool [optional]
    */
    virtual void appsBySafeNameSafeNameGet(const QString &safe_name, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &track_views = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  is_owner bool [optional]
    */
    virtual void appsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_owner = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  developer_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  custom_data QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  restrict QString [optional]
    * @param[in]  allow QString [optional]
    * @param[in]  access QString [optional]
    */
    virtual void appsPost(const QString &developer_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &restrict = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allow = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  text QString [required]
    * @param[in]  fields QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  is_owned bool [optional]
    */
    virtual void appsTextSearchGet(const QString &text, const QString &fields, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_owned = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  developer_id QString [optional]
    */
    virtual void appsVersionsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &developer_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appsAppIdDeleteCallback(OAIHttpRequestWorker *worker);
    void appsAppIdGetCallback(OAIHttpRequestWorker *worker);
    void appsAppIdLivePostCallback(OAIHttpRequestWorker *worker);
    void appsAppIdPublishPostCallback(OAIHttpRequestWorker *worker);
    void appsAppIdVersionsVersionDeleteCallback(OAIHttpRequestWorker *worker);
    void appsAppIdVersionsVersionGetCallback(OAIHttpRequestWorker *worker);
    void appsAppIdVersionsVersionPatchCallback(OAIHttpRequestWorker *worker);
    void appsAppIdVersionsVersionPostCallback(OAIHttpRequestWorker *worker);
    void appsAppIdVersionsVersionStatusPostCallback(OAIHttpRequestWorker *worker);
    void appsBySafeNameSafeNameGetCallback(OAIHttpRequestWorker *worker);
    void appsGetCallback(OAIHttpRequestWorker *worker);
    void appsPostCallback(OAIHttpRequestWorker *worker);
    void appsTextSearchGetCallback(OAIHttpRequestWorker *worker);
    void appsVersionsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appsAppIdDeleteSignal();
    void appsAppIdGetSignal(OAIApp summary);
    void appsAppIdLivePostSignal();
    void appsAppIdPublishPostSignal();
    void appsAppIdVersionsVersionDeleteSignal();
    void appsAppIdVersionsVersionGetSignal(OAIAppVersion summary);
    void appsAppIdVersionsVersionPatchSignal(OAIAppVersion summary);
    void appsAppIdVersionsVersionPostSignal(OAIAppVersion summary);
    void appsAppIdVersionsVersionStatusPostSignal();
    void appsBySafeNameSafeNameGetSignal(OAIApp summary);
    void appsGetSignal(OAIAppPages summary);
    void appsPostSignal(OAIAppVersion summary);
    void appsTextSearchGetSignal(OAISearchPages summary);
    void appsVersionsGetSignal(OAIVersionPages summary);


    void appsAppIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appsAppIdGetSignalFull(OAIHttpRequestWorker *worker, OAIApp summary);
    void appsAppIdLivePostSignalFull(OAIHttpRequestWorker *worker);
    void appsAppIdPublishPostSignalFull(OAIHttpRequestWorker *worker);
    void appsAppIdVersionsVersionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appsAppIdVersionsVersionGetSignalFull(OAIHttpRequestWorker *worker, OAIAppVersion summary);
    void appsAppIdVersionsVersionPatchSignalFull(OAIHttpRequestWorker *worker, OAIAppVersion summary);
    void appsAppIdVersionsVersionPostSignalFull(OAIHttpRequestWorker *worker, OAIAppVersion summary);
    void appsAppIdVersionsVersionStatusPostSignalFull(OAIHttpRequestWorker *worker);
    void appsBySafeNameSafeNameGetSignalFull(OAIHttpRequestWorker *worker, OAIApp summary);
    void appsGetSignalFull(OAIHttpRequestWorker *worker, OAIAppPages summary);
    void appsPostSignalFull(OAIHttpRequestWorker *worker, OAIAppVersion summary);
    void appsTextSearchGetSignalFull(OAIHttpRequestWorker *worker, OAISearchPages summary);
    void appsVersionsGetSignalFull(OAIHttpRequestWorker *worker, OAIVersionPages summary);

    Q_DECL_DEPRECATED_X("Use appsAppIdDeleteSignalError() instead")
    void appsAppIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdGetSignalError() instead")
    void appsAppIdGetSignalE(OAIApp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdGetSignalError(OAIApp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdLivePostSignalError() instead")
    void appsAppIdLivePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdLivePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdPublishPostSignalError() instead")
    void appsAppIdPublishPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdPublishPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionDeleteSignalError() instead")
    void appsAppIdVersionsVersionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionGetSignalError() instead")
    void appsAppIdVersionsVersionGetSignalE(OAIAppVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionGetSignalError(OAIAppVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionPatchSignalError() instead")
    void appsAppIdVersionsVersionPatchSignalE(OAIAppVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionPatchSignalError(OAIAppVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionPostSignalError() instead")
    void appsAppIdVersionsVersionPostSignalE(OAIAppVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionPostSignalError(OAIAppVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionStatusPostSignalError() instead")
    void appsAppIdVersionsVersionStatusPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionStatusPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBySafeNameSafeNameGetSignalError() instead")
    void appsBySafeNameSafeNameGetSignalE(OAIApp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBySafeNameSafeNameGetSignalError(OAIApp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSignalError() instead")
    void appsGetSignalE(OAIAppPages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSignalError(OAIAppPages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPostSignalError() instead")
    void appsPostSignalE(OAIAppVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPostSignalError(OAIAppVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsTextSearchGetSignalError() instead")
    void appsTextSearchGetSignalE(OAISearchPages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsTextSearchGetSignalError(OAISearchPages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsVersionsGetSignalError() instead")
    void appsVersionsGetSignalE(OAIVersionPages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsVersionsGetSignalError(OAIVersionPages summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appsAppIdDeleteSignalErrorFull() instead")
    void appsAppIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdGetSignalErrorFull() instead")
    void appsAppIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdLivePostSignalErrorFull() instead")
    void appsAppIdLivePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdLivePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdPublishPostSignalErrorFull() instead")
    void appsAppIdPublishPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdPublishPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionDeleteSignalErrorFull() instead")
    void appsAppIdVersionsVersionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionGetSignalErrorFull() instead")
    void appsAppIdVersionsVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionPatchSignalErrorFull() instead")
    void appsAppIdVersionsVersionPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionPostSignalErrorFull() instead")
    void appsAppIdVersionsVersionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdVersionsVersionStatusPostSignalErrorFull() instead")
    void appsAppIdVersionsVersionStatusPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdVersionsVersionStatusPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsBySafeNameSafeNameGetSignalErrorFull() instead")
    void appsBySafeNameSafeNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsBySafeNameSafeNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSignalErrorFull() instead")
    void appsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPostSignalErrorFull() instead")
    void appsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsTextSearchGetSignalErrorFull() instead")
    void appsTextSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsTextSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsVersionsGetSignalErrorFull() instead")
    void appsVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
