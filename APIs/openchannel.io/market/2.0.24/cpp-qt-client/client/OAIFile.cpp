/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile::OAIFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile::OAIFile() {
    this->initializeModel();
}

OAIFile::~OAIFile() {}

void OAIFile::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_file_url_isSet = false;
    m_file_url_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_mime_check_isSet = false;
    m_mime_check_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_upload_date_isSet = false;
    m_upload_date_isValid = false;

    m_virus_scan_isSet = false;
    m_virus_scan_isValid = false;
}

void OAIFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("fileId")]);
    m_file_id_isSet = !json[QString("fileId")].isNull() && m_file_id_isValid;

    m_file_url_isValid = ::OpenAPI::fromJsonValue(m_file_url, json[QString("fileUrl")]);
    m_file_url_isSet = !json[QString("fileUrl")].isNull() && m_file_url_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_mime_check_isValid = ::OpenAPI::fromJsonValue(m_mime_check, json[QString("mimeCheck")]);
    m_mime_check_isSet = !json[QString("mimeCheck")].isNull() && m_mime_check_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_upload_date_isValid = ::OpenAPI::fromJsonValue(m_upload_date, json[QString("uploadDate")]);
    m_upload_date_isSet = !json[QString("uploadDate")].isNull() && m_upload_date_isValid;

    m_virus_scan_isValid = ::OpenAPI::fromJsonValue(m_virus_scan, json[QString("virusScan")]);
    m_virus_scan_isSet = !json[QString("virusScan")].isNull() && m_virus_scan_isValid;
}

QString OAIFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("fileId"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_file_url_isSet) {
        obj.insert(QString("fileUrl"), ::OpenAPI::toJsonValue(m_file_url));
    }
    if (m_hash.isSet()) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_mime_check_isSet) {
        obj.insert(QString("mimeCheck"), ::OpenAPI::toJsonValue(m_mime_check));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_upload_date_isSet) {
        obj.insert(QString("uploadDate"), ::OpenAPI::toJsonValue(m_upload_date));
    }
    if (m_virus_scan.isSet()) {
        obj.insert(QString("virusScan"), ::OpenAPI::toJsonValue(m_virus_scan));
    }
    return obj;
}

QString OAIFile::getContentType() const {
    return m_content_type;
}
void OAIFile::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIFile::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIFile::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIFile::getFileId() const {
    return m_file_id;
}
void OAIFile::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIFile::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIFile::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIFile::getFileUrl() const {
    return m_file_url;
}
void OAIFile::setFileUrl(const QString &file_url) {
    m_file_url = file_url;
    m_file_url_isSet = true;
}

bool OAIFile::is_file_url_Set() const{
    return m_file_url_isSet;
}

bool OAIFile::is_file_url_Valid() const{
    return m_file_url_isValid;
}

OAIHash OAIFile::getHash() const {
    return m_hash;
}
void OAIFile::setHash(const OAIHash &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIFile::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIFile::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIFile::getMimeCheck() const {
    return m_mime_check;
}
void OAIFile::setMimeCheck(const QString &mime_check) {
    m_mime_check = mime_check;
    m_mime_check_isSet = true;
}

bool OAIFile::is_mime_check_Set() const{
    return m_mime_check_isSet;
}

bool OAIFile::is_mime_check_Valid() const{
    return m_mime_check_isValid;
}

QString OAIFile::getName() const {
    return m_name;
}
void OAIFile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFile::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIFile::getSize() const {
    return m_size;
}
void OAIFile::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFile::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFile::is_size_Valid() const{
    return m_size_isValid;
}

qint64 OAIFile::getUploadDate() const {
    return m_upload_date;
}
void OAIFile::setUploadDate(const qint64 &upload_date) {
    m_upload_date = upload_date;
    m_upload_date_isSet = true;
}

bool OAIFile::is_upload_date_Set() const{
    return m_upload_date_isSet;
}

bool OAIFile::is_upload_date_Valid() const{
    return m_upload_date_isValid;
}

OAIVirusScan OAIFile::getVirusScan() const {
    return m_virus_scan;
}
void OAIFile::setVirusScan(const OAIVirusScan &virus_scan) {
    m_virus_scan = virus_scan;
    m_virus_scan_isSet = true;
}

bool OAIFile::is_virus_scan_Set() const{
    return m_virus_scan_isSet;
}

bool OAIFile::is_virus_scan_Valid() const{
    return m_virus_scan_isValid;
}

bool OAIFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virus_scan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_id_isValid && m_name_isValid && m_size_isValid && m_upload_date_isValid && true;
}

} // namespace OpenAPI
