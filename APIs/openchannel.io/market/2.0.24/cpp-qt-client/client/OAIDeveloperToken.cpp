/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeveloperToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeveloperToken::OAIDeveloperToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeveloperToken::OAIDeveloperToken() {
    this->initializeModel();
}

OAIDeveloperToken::~OAIDeveloperToken() {}

void OAIDeveloperToken::initializeModel() {

    m_developer_id_isSet = false;
    m_developer_id_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;
}

void OAIDeveloperToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeveloperToken::fromJsonObject(QJsonObject json) {

    m_developer_id_isValid = ::OpenAPI::fromJsonValue(m_developer_id, json[QString("developerId")]);
    m_developer_id_isSet = !json[QString("developerId")].isNull() && m_developer_id_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("targetUrl")]);
    m_target_url_isSet = !json[QString("targetUrl")].isNull() && m_target_url_isValid;
}

QString OAIDeveloperToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeveloperToken::asJsonObject() const {
    QJsonObject obj;
    if (m_developer_id_isSet) {
        obj.insert(QString("developerId"), ::OpenAPI::toJsonValue(m_developer_id));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("targetUrl"), ::OpenAPI::toJsonValue(m_target_url));
    }
    return obj;
}

QString OAIDeveloperToken::getDeveloperId() const {
    return m_developer_id;
}
void OAIDeveloperToken::setDeveloperId(const QString &developer_id) {
    m_developer_id = developer_id;
    m_developer_id_isSet = true;
}

bool OAIDeveloperToken::is_developer_id_Set() const{
    return m_developer_id_isSet;
}

bool OAIDeveloperToken::is_developer_id_Valid() const{
    return m_developer_id_isValid;
}

qint64 OAIDeveloperToken::getExpires() const {
    return m_expires;
}
void OAIDeveloperToken::setExpires(const qint64 &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIDeveloperToken::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIDeveloperToken::is_expires_Valid() const{
    return m_expires_isValid;
}

QString OAIDeveloperToken::getTargetUrl() const {
    return m_target_url;
}
void OAIDeveloperToken::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAIDeveloperToken::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAIDeveloperToken::is_target_url_Valid() const{
    return m_target_url_isValid;
}

bool OAIDeveloperToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_developer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeveloperToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_developer_id_isValid && m_expires_isValid && m_target_url_isValid && true;
}

} // namespace OpenAPI
