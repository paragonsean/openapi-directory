/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp::OAIApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp::OAIApp() {
    this->initializeModel();
}

OAIApp::~OAIApp() {}

void OAIApp::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_allow_isSet = false;
    m_allow_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_developer_id_isSet = false;
    m_developer_id_isValid = false;

    m_is_live_isSet = false;
    m_is_live_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ownership_isSet = false;
    m_ownership_isValid = false;

    m_randomize_isSet = false;
    m_randomize_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_restrict_isSet = false;
    m_restrict_isValid = false;

    m_review_count_isSet = false;
    m_review_count_isValid = false;

    m_safe_name_isSet = false;
    m_safe_name_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submitted_date_isSet = false;
    m_submitted_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_allow_isValid = ::OpenAPI::fromJsonValue(m_allow, json[QString("allow")]);
    m_allow_isSet = !json[QString("allow")].isNull() && m_allow_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_developer_id_isValid = ::OpenAPI::fromJsonValue(m_developer_id, json[QString("developerId")]);
    m_developer_id_isSet = !json[QString("developerId")].isNull() && m_developer_id_isValid;

    m_is_live_isValid = ::OpenAPI::fromJsonValue(m_is_live, json[QString("isLive")]);
    m_is_live_isSet = !json[QString("isLive")].isNull() && m_is_live_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ownership_isValid = ::OpenAPI::fromJsonValue(m_ownership, json[QString("ownership")]);
    m_ownership_isSet = !json[QString("ownership")].isNull() && m_ownership_isValid;

    m_randomize_isValid = ::OpenAPI::fromJsonValue(m_randomize, json[QString("randomize")]);
    m_randomize_isSet = !json[QString("randomize")].isNull() && m_randomize_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_restrict_isValid = ::OpenAPI::fromJsonValue(m_restrict, json[QString("restrict")]);
    m_restrict_isSet = !json[QString("restrict")].isNull() && m_restrict_isValid;

    m_review_count_isValid = ::OpenAPI::fromJsonValue(m_review_count, json[QString("reviewCount")]);
    m_review_count_isSet = !json[QString("reviewCount")].isNull() && m_review_count_isValid;

    m_safe_name_isValid = ::OpenAPI::fromJsonValue(m_safe_name, json[QString("safeName")]);
    m_safe_name_isSet = !json[QString("safeName")].isNull() && m_safe_name_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submitted_date_isValid = ::OpenAPI::fromJsonValue(m_submitted_date, json[QString("submittedDate")]);
    m_submitted_date_isSet = !json[QString("submittedDate")].isNull() && m_submitted_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp::asJsonObject() const {
    QJsonObject obj;
    if (m_access.size() > 0) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_allow.isSet()) {
        obj.insert(QString("allow"), ::OpenAPI::toJsonValue(m_allow));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_data_isSet) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_developer_id_isSet) {
        obj.insert(QString("developerId"), ::OpenAPI::toJsonValue(m_developer_id));
    }
    if (m_is_live_isSet) {
        obj.insert(QString("isLive"), ::OpenAPI::toJsonValue(m_is_live));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_model.size() > 0) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ownership.isSet()) {
        obj.insert(QString("ownership"), ::OpenAPI::toJsonValue(m_ownership));
    }
    if (m_randomize_isSet) {
        obj.insert(QString("randomize"), ::OpenAPI::toJsonValue(m_randomize));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_restrict.isSet()) {
        obj.insert(QString("restrict"), ::OpenAPI::toJsonValue(m_restrict));
    }
    if (m_review_count_isSet) {
        obj.insert(QString("reviewCount"), ::OpenAPI::toJsonValue(m_review_count));
    }
    if (m_safe_name.size() > 0) {
        obj.insert(QString("safeName"), ::OpenAPI::toJsonValue(m_safe_name));
    }
    if (m_statistics_isSet) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submitted_date_isSet) {
        obj.insert(QString("submittedDate"), ::OpenAPI::toJsonValue(m_submitted_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAIApp::getAccess() const {
    return m_access;
}
void OAIApp::setAccess(const QList<QString> &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIApp::is_access_Set() const{
    return m_access_isSet;
}

bool OAIApp::is_access_Valid() const{
    return m_access_isValid;
}

OAIRestrictions OAIApp::getAllow() const {
    return m_allow;
}
void OAIApp::setAllow(const OAIRestrictions &allow) {
    m_allow = allow;
    m_allow_isSet = true;
}

bool OAIApp::is_allow_Set() const{
    return m_allow_isSet;
}

bool OAIApp::is_allow_Valid() const{
    return m_allow_isValid;
}

QString OAIApp::getAppId() const {
    return m_app_id;
}
void OAIApp::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIApp::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIApp::is_app_id_Valid() const{
    return m_app_id_isValid;
}

OAIObject OAIApp::getAttributes() const {
    return m_attributes;
}
void OAIApp::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIApp::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIApp::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint64 OAIApp::getCreated() const {
    return m_created;
}
void OAIApp::setCreated(const qint64 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIApp::is_created_Set() const{
    return m_created_isSet;
}

bool OAIApp::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIApp::getCustomData() const {
    return m_custom_data;
}
void OAIApp::setCustomData(const OAIObject &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIApp::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIApp::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

QString OAIApp::getDeveloperId() const {
    return m_developer_id;
}
void OAIApp::setDeveloperId(const QString &developer_id) {
    m_developer_id = developer_id;
    m_developer_id_isSet = true;
}

bool OAIApp::is_developer_id_Set() const{
    return m_developer_id_isSet;
}

bool OAIApp::is_developer_id_Valid() const{
    return m_developer_id_isValid;
}

bool OAIApp::isIsLive() const {
    return m_is_live;
}
void OAIApp::setIsLive(const bool &is_live) {
    m_is_live = is_live;
    m_is_live_isSet = true;
}

bool OAIApp::is_is_live_Set() const{
    return m_is_live_isSet;
}

bool OAIApp::is_is_live_Valid() const{
    return m_is_live_isValid;
}

qint64 OAIApp::getLastUpdated() const {
    return m_last_updated;
}
void OAIApp::setLastUpdated(const qint64 &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIApp::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIApp::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QList<OAIModel> OAIApp::getModel() const {
    return m_model;
}
void OAIApp::setModel(const QList<OAIModel> &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIApp::is_model_Set() const{
    return m_model_isSet;
}

bool OAIApp::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIApp::getName() const {
    return m_name;
}
void OAIApp::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApp::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApp::is_name_Valid() const{
    return m_name_isValid;
}

OAIOwnership OAIApp::getOwnership() const {
    return m_ownership;
}
void OAIApp::setOwnership(const OAIOwnership &ownership) {
    m_ownership = ownership;
    m_ownership_isSet = true;
}

bool OAIApp::is_ownership_Set() const{
    return m_ownership_isSet;
}

bool OAIApp::is_ownership_Valid() const{
    return m_ownership_isValid;
}

qint32 OAIApp::getRandomize() const {
    return m_randomize;
}
void OAIApp::setRandomize(const qint32 &randomize) {
    m_randomize = randomize;
    m_randomize_isSet = true;
}

bool OAIApp::is_randomize_Set() const{
    return m_randomize_isSet;
}

bool OAIApp::is_randomize_Valid() const{
    return m_randomize_isValid;
}

qint32 OAIApp::getRating() const {
    return m_rating;
}
void OAIApp::setRating(const qint32 &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIApp::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIApp::is_rating_Valid() const{
    return m_rating_isValid;
}

OAIRestrictions OAIApp::getRestrict() const {
    return m_restrict;
}
void OAIApp::setRestrict(const OAIRestrictions &restrict) {
    m_restrict = restrict;
    m_restrict_isSet = true;
}

bool OAIApp::is_restrict_Set() const{
    return m_restrict_isSet;
}

bool OAIApp::is_restrict_Valid() const{
    return m_restrict_isValid;
}

qint32 OAIApp::getReviewCount() const {
    return m_review_count;
}
void OAIApp::setReviewCount(const qint32 &review_count) {
    m_review_count = review_count;
    m_review_count_isSet = true;
}

bool OAIApp::is_review_count_Set() const{
    return m_review_count_isSet;
}

bool OAIApp::is_review_count_Valid() const{
    return m_review_count_isValid;
}

QList<QString> OAIApp::getSafeName() const {
    return m_safe_name;
}
void OAIApp::setSafeName(const QList<QString> &safe_name) {
    m_safe_name = safe_name;
    m_safe_name_isSet = true;
}

bool OAIApp::is_safe_name_Set() const{
    return m_safe_name_isSet;
}

bool OAIApp::is_safe_name_Valid() const{
    return m_safe_name_isValid;
}

OAIObject OAIApp::getStatistics() const {
    return m_statistics;
}
void OAIApp::setStatistics(const OAIObject &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIApp::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIApp::is_statistics_Valid() const{
    return m_statistics_isValid;
}

OAIStatus OAIApp::getStatus() const {
    return m_status;
}
void OAIApp::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApp::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApp::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAIApp::getSubmittedDate() const {
    return m_submitted_date;
}
void OAIApp::setSubmittedDate(const qint64 &submitted_date) {
    m_submitted_date = submitted_date;
    m_submitted_date_isSet = true;
}

bool OAIApp::is_submitted_date_Set() const{
    return m_submitted_date_isSet;
}

bool OAIApp::is_submitted_date_Valid() const{
    return m_submitted_date_isValid;
}

QString OAIApp::getType() const {
    return m_type;
}
void OAIApp::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApp::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApp::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIApp::getVersion() const {
    return m_version;
}
void OAIApp::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIApp::is_version_Set() const{
    return m_version_isSet;
}

bool OAIApp::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_randomize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrict.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_isValid && m_app_id_isValid && m_attributes_isValid && m_created_isValid && m_custom_data_isValid && m_developer_id_isValid && m_is_live_isValid && m_last_updated_isValid && m_model_isValid && m_name_isValid && m_randomize_isValid && m_rating_isValid && m_restrict_isValid && m_safe_name_isValid && m_status_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
