/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOwnership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOwnership::OAIOwnership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOwnership::OAIOwnership() {
    this->initializeModel();
}

OAIOwnership::~OAIOwnership() {}

void OAIOwnership::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_developer_id_isSet = false;
    m_developer_id_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_ownership_id_isSet = false;
    m_ownership_id_isValid = false;

    m_ownership_status_isSet = false;
    m_ownership_status_isValid = false;

    m_ownership_type_isSet = false;
    m_ownership_type_isValid = false;

    m_uninstall_date_isSet = false;
    m_uninstall_date_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIOwnership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOwnership::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_developer_id_isValid = ::OpenAPI::fromJsonValue(m_developer_id, json[QString("developerId")]);
    m_developer_id_isSet = !json[QString("developerId")].isNull() && m_developer_id_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_ownership_id_isValid = ::OpenAPI::fromJsonValue(m_ownership_id, json[QString("ownershipId")]);
    m_ownership_id_isSet = !json[QString("ownershipId")].isNull() && m_ownership_id_isValid;

    m_ownership_status_isValid = ::OpenAPI::fromJsonValue(m_ownership_status, json[QString("ownershipStatus")]);
    m_ownership_status_isSet = !json[QString("ownershipStatus")].isNull() && m_ownership_status_isValid;

    m_ownership_type_isValid = ::OpenAPI::fromJsonValue(m_ownership_type, json[QString("ownershipType")]);
    m_ownership_type_isSet = !json[QString("ownershipType")].isNull() && m_ownership_type_isValid;

    m_uninstall_date_isValid = ::OpenAPI::fromJsonValue(m_uninstall_date, json[QString("uninstallDate")]);
    m_uninstall_date_isSet = !json[QString("uninstallDate")].isNull() && m_uninstall_date_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIOwnership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOwnership::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_custom_data_isSet) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_developer_id_isSet) {
        obj.insert(QString("developerId"), ::OpenAPI::toJsonValue(m_developer_id));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_ownership_id_isSet) {
        obj.insert(QString("ownershipId"), ::OpenAPI::toJsonValue(m_ownership_id));
    }
    if (m_ownership_status_isSet) {
        obj.insert(QString("ownershipStatus"), ::OpenAPI::toJsonValue(m_ownership_status));
    }
    if (m_ownership_type_isSet) {
        obj.insert(QString("ownershipType"), ::OpenAPI::toJsonValue(m_ownership_type));
    }
    if (m_uninstall_date_isSet) {
        obj.insert(QString("uninstallDate"), ::OpenAPI::toJsonValue(m_uninstall_date));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIOwnership::getAppId() const {
    return m_app_id;
}
void OAIOwnership::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIOwnership::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIOwnership::is_app_id_Valid() const{
    return m_app_id_isValid;
}

OAIObject OAIOwnership::getCustomData() const {
    return m_custom_data;
}
void OAIOwnership::setCustomData(const OAIObject &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIOwnership::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIOwnership::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

qint64 OAIOwnership::getDate() const {
    return m_date;
}
void OAIOwnership::setDate(const qint64 &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIOwnership::is_date_Set() const{
    return m_date_isSet;
}

bool OAIOwnership::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIOwnership::getDeveloperId() const {
    return m_developer_id;
}
void OAIOwnership::setDeveloperId(const QString &developer_id) {
    m_developer_id = developer_id;
    m_developer_id_isSet = true;
}

bool OAIOwnership::is_developer_id_Set() const{
    return m_developer_id_isSet;
}

bool OAIOwnership::is_developer_id_Valid() const{
    return m_developer_id_isValid;
}

qint64 OAIOwnership::getExpires() const {
    return m_expires;
}
void OAIOwnership::setExpires(const qint64 &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIOwnership::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIOwnership::is_expires_Valid() const{
    return m_expires_isValid;
}

OAIModel OAIOwnership::getModel() const {
    return m_model;
}
void OAIOwnership::setModel(const OAIModel &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIOwnership::is_model_Set() const{
    return m_model_isSet;
}

bool OAIOwnership::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIOwnership::getOwnershipId() const {
    return m_ownership_id;
}
void OAIOwnership::setOwnershipId(const QString &ownership_id) {
    m_ownership_id = ownership_id;
    m_ownership_id_isSet = true;
}

bool OAIOwnership::is_ownership_id_Set() const{
    return m_ownership_id_isSet;
}

bool OAIOwnership::is_ownership_id_Valid() const{
    return m_ownership_id_isValid;
}

QString OAIOwnership::getOwnershipStatus() const {
    return m_ownership_status;
}
void OAIOwnership::setOwnershipStatus(const QString &ownership_status) {
    m_ownership_status = ownership_status;
    m_ownership_status_isSet = true;
}

bool OAIOwnership::is_ownership_status_Set() const{
    return m_ownership_status_isSet;
}

bool OAIOwnership::is_ownership_status_Valid() const{
    return m_ownership_status_isValid;
}

QString OAIOwnership::getOwnershipType() const {
    return m_ownership_type;
}
void OAIOwnership::setOwnershipType(const QString &ownership_type) {
    m_ownership_type = ownership_type;
    m_ownership_type_isSet = true;
}

bool OAIOwnership::is_ownership_type_Set() const{
    return m_ownership_type_isSet;
}

bool OAIOwnership::is_ownership_type_Valid() const{
    return m_ownership_type_isValid;
}

qint64 OAIOwnership::getUninstallDate() const {
    return m_uninstall_date;
}
void OAIOwnership::setUninstallDate(const qint64 &uninstall_date) {
    m_uninstall_date = uninstall_date;
    m_uninstall_date_isSet = true;
}

bool OAIOwnership::is_uninstall_date_Set() const{
    return m_uninstall_date_isSet;
}

bool OAIOwnership::is_uninstall_date_Valid() const{
    return m_uninstall_date_isValid;
}

QString OAIOwnership::getUserId() const {
    return m_user_id;
}
void OAIOwnership::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIOwnership::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIOwnership::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIOwnership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uninstall_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOwnership::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_date_isValid && m_developer_id_isValid && m_model_isValid && m_ownership_id_isValid && m_ownership_status_isValid && m_ownership_type_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
