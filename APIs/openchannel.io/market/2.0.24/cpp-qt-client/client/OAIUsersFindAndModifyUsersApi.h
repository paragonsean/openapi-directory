/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersFindAndModifyUsersApi_H
#define OAI_OAIUsersFindAndModifyUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUser.h"
#include "OAIUserPages.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersFindAndModifyUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersFindAndModifyUsersApi(const int timeOut = 0);
    ~OAIUsersFindAndModifyUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void usersGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdDelete(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdGet(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  custom_data QString [optional]
    */
    virtual void usersUserIdPatch(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  custom_data QString [optional]
    */
    virtual void usersUserIdPost(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_data = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersUserIdDeleteCallback(OAIHttpRequestWorker *worker);
    void usersUserIdGetCallback(OAIHttpRequestWorker *worker);
    void usersUserIdPatchCallback(OAIHttpRequestWorker *worker);
    void usersUserIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersGetSignal(OAIUserPages summary);
    void usersUserIdDeleteSignal();
    void usersUserIdGetSignal(OAIUser summary);
    void usersUserIdPatchSignal(OAIUser summary);
    void usersUserIdPostSignal(OAIUser summary);


    void usersGetSignalFull(OAIHttpRequestWorker *worker, OAIUserPages summary);
    void usersUserIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersUserIdGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUserIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUserIdPostSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);

    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(OAIUserPages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(OAIUserPages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdDeleteSignalError() instead")
    void usersUserIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdGetSignalError() instead")
    void usersUserIdGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPatchSignalError() instead")
    void usersUserIdPatchSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPatchSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPostSignalError() instead")
    void usersUserIdPostSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPostSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdDeleteSignalErrorFull() instead")
    void usersUserIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdGetSignalErrorFull() instead")
    void usersUserIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPatchSignalErrorFull() instead")
    void usersUserIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPostSignalErrorFull() instead")
    void usersUserIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
