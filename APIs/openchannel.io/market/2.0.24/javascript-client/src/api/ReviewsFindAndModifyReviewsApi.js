/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Review from '../model/Review';
import ReviewPages from '../model/ReviewPages';

/**
* ReviewsFindAndModifyReviews service.
* @module api/ReviewsFindAndModifyReviewsApi
* @version 2.0.24
*/
export default class ReviewsFindAndModifyReviewsApi {

    /**
    * Constructs a new ReviewsFindAndModifyReviewsApi. 
    * @alias module:api/ReviewsFindAndModifyReviewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reviewsGet operation.
     * @callback module:api/ReviewsFindAndModifyReviewsApi~reviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewPages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find reviews for a particular App and marketplace. Results are automatically paginated when limit is set
     * - Results are paginated and the default is value is 100 if no limit is provided 
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query document. Example: {'rating': 500} matches all the reviews that have a rating of 500. 
     * @param {String} [sort] A sort document. Example: {'rating':1} sorts the results by rating in ascending order
     * @param {Number} [pageNumber] The result set page number to be returned
     * @param {Number} [limit] The maximum number of results to return per page
     * @param {module:api/ReviewsFindAndModifyReviewsApi~reviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewPages}
     */
    reviewsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'pageNumber': opts['pageNumber'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ReviewPages;
      return this.apiClient.callApi(
        '/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsPost operation.
     * @callback module:api/ReviewsFindAndModifyReviewsApi~reviewsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a review from a User and returns the new post
     * - Only authenticated users are able to post reviews - Returns the newly created review 
     * @param {String} appId The id of the App that will own this review
     * @param {String} userId The id of the User that is posting this review
     * @param {String} headline The review's headline. Limited to 50 characters.
     * @param {Number} rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars)
     * @param {String} description The review's description. Limited to 2000 characters.
     * @param {Object} opts Optional parameters
     * @param {String} [userAccountId] The id of the User account that is posting this review
     * @param {String} [type] The type for this review
     * @param {Boolean} [mustOwnApp] True if a review can be created only by a user that has owned the app. The default is True.
     * @param {Boolean} [autoApprove] True if the review should be automatically approved. The default is False.
     * @param {String} [customData] A custom JSON object that you can create and attach to this record
     * @param {module:api/ReviewsFindAndModifyReviewsApi~reviewsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    reviewsPost(appId, userId, headline, rating, description, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling reviewsPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling reviewsPost");
      }
      // verify the required parameter 'headline' is set
      if (headline === undefined || headline === null) {
        throw new Error("Missing the required parameter 'headline' when calling reviewsPost");
      }
      // verify the required parameter 'rating' is set
      if (rating === undefined || rating === null) {
        throw new Error("Missing the required parameter 'rating' when calling reviewsPost");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling reviewsPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'appId': appId,
        'userId': userId,
        'userAccountId': opts['userAccountId'],
        'headline': headline,
        'rating': rating,
        'description': description,
        'type': opts['type'],
        'mustOwnApp': opts['mustOwnApp'],
        'autoApprove': opts['autoApprove'],
        'customData': opts['customData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Review;
      return this.apiClient.callApi(
        '/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsReviewIdDelete operation.
     * @callback module:api/ReviewsFindAndModifyReviewsApi~reviewsReviewIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a review
     * - Only the review author is able to remove their review 
     * @param {String} reviewId The id of the Review to be updated
     * @param {String} userId The id of the User that is removing this review
     * @param {Object} opts Optional parameters
     * @param {String} [userAccountId] The id of the User account that is emoving this review
     * @param {module:api/ReviewsFindAndModifyReviewsApi~reviewsReviewIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reviewsReviewIdDelete(reviewId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsReviewIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling reviewsReviewIdDelete");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
        'userId': userId,
        'userAccountId': opts['userAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reviews/{reviewId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsReviewIdGet operation.
     * @callback module:api/ReviewsFindAndModifyReviewsApi~reviewsReviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a Review within a particular App and marketplace
     * @param {String} reviewId The id of the review to be located
     * @param {module:api/ReviewsFindAndModifyReviewsApi~reviewsReviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    reviewsReviewIdGet(reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsReviewIdGet");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Review;
      return this.apiClient.callApi(
        '/reviews/{reviewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsReviewIdPatch operation.
     * @callback module:api/ReviewsFindAndModifyReviewsApi~reviewsReviewIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a review fields
     * - Only the review author is able to update their review - Returns the newly updated review 
     * @param {String} reviewId The id of the Review to be updated
     * @param {String} userId The id of the User that is updating this review
     * @param {Object} opts Optional parameters
     * @param {String} [userAccountId] The id of the User account that is posting this review
     * @param {String} [headline] The review's headline. Limited to 50 characters.
     * @param {Number} [rating] The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars)
     * @param {String} [description] The review's description. Limited to 2000 characters.
     * @param {String} [customData] A custom JSON object that you can create and attach to this record
     * @param {module:api/ReviewsFindAndModifyReviewsApi~reviewsReviewIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    reviewsReviewIdPatch(reviewId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsReviewIdPatch");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling reviewsReviewIdPatch");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
        'userId': userId,
        'userAccountId': opts['userAccountId'],
        'headline': opts['headline'],
        'rating': opts['rating'],
        'description': opts['description'],
        'customData': opts['customData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Review;
      return this.apiClient.callApi(
        '/reviews/{reviewId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsReviewIdPost operation.
     * @callback module:api/ReviewsFindAndModifyReviewsApi~reviewsReviewIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a review from a User and returns the new post
     * - Only the review author is able to update their review - Returns the newly updated review 
     * @param {String} reviewId The id of the Review to be updated
     * @param {String} userId The id of the User that is updating this review
     * @param {String} userAccountId The id of the User account that is posting this review
     * @param {String} headline The review's headline. Limited to 50 characters.
     * @param {Number} rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars)
     * @param {String} description The review's description. Limited to 2000 characters.
     * @param {Object} opts Optional parameters
     * @param {String} [customData] A custom JSON object that you can create and attach to this record
     * @param {module:api/ReviewsFindAndModifyReviewsApi~reviewsReviewIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    reviewsReviewIdPost(reviewId, userId, userAccountId, headline, rating, description, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsReviewIdPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling reviewsReviewIdPost");
      }
      // verify the required parameter 'userAccountId' is set
      if (userAccountId === undefined || userAccountId === null) {
        throw new Error("Missing the required parameter 'userAccountId' when calling reviewsReviewIdPost");
      }
      // verify the required parameter 'headline' is set
      if (headline === undefined || headline === null) {
        throw new Error("Missing the required parameter 'headline' when calling reviewsReviewIdPost");
      }
      // verify the required parameter 'rating' is set
      if (rating === undefined || rating === null) {
        throw new Error("Missing the required parameter 'rating' when calling reviewsReviewIdPost");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling reviewsReviewIdPost");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
        'userId': userId,
        'userAccountId': userAccountId,
        'headline': headline,
        'rating': rating,
        'description': description,
        'customData': opts['customData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Review;
      return this.apiClient.callApi(
        '/reviews/{reviewId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
