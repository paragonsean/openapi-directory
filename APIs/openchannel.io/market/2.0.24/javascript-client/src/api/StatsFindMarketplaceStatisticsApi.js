/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Total from '../model/Total';

/**
* StatsFindMarketplaceStatistics service.
* @module api/StatsFindMarketplaceStatisticsApi
* @version 2.0.24
*/
export default class StatsFindMarketplaceStatisticsApi {

    /**
    * Constructs a new StatsFindMarketplaceStatisticsApi. 
    * @alias module:api/StatsFindMarketplaceStatisticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the statsIncrementFieldPost operation.
     * @callback module:api/StatsFindMarketplaceStatisticsApi~statsIncrementFieldPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Increments a statistics field
     * increment a statistics field
     * @param {String} field The field to be incremented
     * @param {String} appId The id of the app associated with this statistic value
     * @param {Object} opts Optional parameters
     * @param {String} [userId] The id of the user that is performing the action
     * @param {Number} [value] The increment amount. Default is 1 if no value is provided.
     * @param {Number} [date] The date (in millis) for when this increment occurred. The default is the current date if no value is provided.
     * @param {module:api/StatsFindMarketplaceStatisticsApi~statsIncrementFieldPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    statsIncrementFieldPost(field, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling statsIncrementFieldPost");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling statsIncrementFieldPost");
      }

      let pathParams = {
        'field': field
      };
      let queryParams = {
        'appId': appId,
        'userId': opts['userId'],
        'value': opts['value'],
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stats/increment/{field}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statsSeriesPeriodFieldsGet operation.
     * @callback module:api/StatsFindMarketplaceStatisticsApi~statsSeriesPeriodFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<[Object]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a timeseries for a particular field
     * Return a timeseries nested array containing date and value. Example: [[1406520000000,2],[1406606400000,34],[1406692800000,245],...]
     * @param {module:model/String} period The period for the series (day or month)
     * @param {String} fields The field to be graphed. This also be a comma separated list of fields and the result will be a single timeseries containing the sum of all fields.
     * @param {Object} opts Optional parameters
     * @param {Number} [start] The start date for this series (in millis)
     * @param {Number} [end] The end date for this series (in millis)
     * @param {String} [query] A query document. Example: {'developerId': '112'} matches all the apps that have the developer with id 112
     * @param {module:api/StatsFindMarketplaceStatisticsApi~statsSeriesPeriodFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[Object]>}
     */
    statsSeriesPeriodFieldsGet(period, fields, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling statsSeriesPeriodFieldsGet");
      }
      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling statsSeriesPeriodFieldsGet");
      }

      let pathParams = {
        'period': period,
        'fields': fields
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [[Object]];
      return this.apiClient.callApi(
        '/stats/series/{period}/{fields}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statsTotalGet operation.
     * @callback module:api/StatsFindMarketplaceStatisticsApi~statsTotalGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Total} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the total number of events for a particular field.
     * @param {String} fields A comma seperated list of all the fields to be returned in the total (available by default: dislikes, likes, reviews, totalSales, developerSales, marketplaceSales, downloads, ownerships, views)
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query document. Example: {'developerId': '112'} matches all the apps that have the developer with id 112
     * @param {Number} [start] The start date for this total (in millis)
     * @param {Number} [end] The end date for this total (in millis)
     * @param {module:api/StatsFindMarketplaceStatisticsApi~statsTotalGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Total}
     */
    statsTotalGet(fields, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling statsTotalGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fields': fields,
        'query': opts['query'],
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Total;
      return this.apiClient.callApi(
        '/stats/total', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
