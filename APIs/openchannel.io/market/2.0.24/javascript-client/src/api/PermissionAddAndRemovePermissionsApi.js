/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Access from '../model/Access';

/**
* PermissionAddAndRemovePermissions service.
* @module api/PermissionAddAndRemovePermissionsApi
* @version 2.0.24
*/
export default class PermissionAddAndRemovePermissionsApi {

    /**
    * Constructs a new PermissionAddAndRemovePermissionsApi. 
    * @alias module:api/PermissionAddAndRemovePermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the permissionAppsAppIdDelete operation.
     * @callback module:api/PermissionAddAndRemovePermissionsApi~permissionAppsAppIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes permission that allows the app to access this user's data
     * @param {String} appId The id of the app
     * @param {String} userId The id of the user
     * @param {module:api/PermissionAddAndRemovePermissionsApi~permissionAppsAppIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    permissionAppsAppIdDelete(appId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling permissionAppsAppIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling permissionAppsAppIdDelete");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/permission/apps/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionAppsAppIdGet operation.
     * @callback module:api/PermissionAddAndRemovePermissionsApi~permissionAppsAppIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Access} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns permission that allows the app to access this user's data
     * @param {String} appId The id of the app
     * @param {String} userId The id of the user
     * @param {module:api/PermissionAddAndRemovePermissionsApi~permissionAppsAppIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Access}
     */
    permissionAppsAppIdGet(appId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling permissionAppsAppIdGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling permissionAppsAppIdGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Access;
      return this.apiClient.callApi(
        '/permission/apps/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionAppsAppIdPost operation.
     * @callback module:api/PermissionAddAndRemovePermissionsApi~permissionAppsAppIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Access} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds permission to allow the app to access this user's data
     * @param {String} appId The id of the app
     * @param {String} userId The id of the user
     * @param {Object} opts Optional parameters
     * @param {Number} [date] The time (in milliseconds) of when the user agreed to the access request
     * @param {String} [ip] The ip address of the user agreeing to the access request
     * @param {module:api/PermissionAddAndRemovePermissionsApi~permissionAppsAppIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Access}
     */
    permissionAppsAppIdPost(appId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling permissionAppsAppIdPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling permissionAppsAppIdPost");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'userId': userId,
        'date': opts['date'],
        'ip': opts['ip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Access;
      return this.apiClient.callApi(
        '/permission/apps/{appId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
