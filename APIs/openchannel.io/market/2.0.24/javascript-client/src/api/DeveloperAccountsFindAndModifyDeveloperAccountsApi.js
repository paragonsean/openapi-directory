/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeveloperAccount from '../model/DeveloperAccount';
import DeveloperAccountPages from '../model/DeveloperAccountPages';

/**
* DeveloperAccountsFindAndModifyDeveloperAccounts service.
* @module api/DeveloperAccountsFindAndModifyDeveloperAccountsApi
* @version 2.0.24
*/
export default class DeveloperAccountsFindAndModifyDeveloperAccountsApi {

    /**
    * Constructs a new DeveloperAccountsFindAndModifyDeveloperAccountsApi. 
    * @alias module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the developerAccountsDeveloperAccountIdDelete operation.
     * @callback module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsDeveloperAccountIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the developer account
     * @param {String} developerAccountId The id of the developer account to be updated
     * @param {module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsDeveloperAccountIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    developerAccountsDeveloperAccountIdDelete(developerAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'developerAccountId' is set
      if (developerAccountId === undefined || developerAccountId === null) {
        throw new Error("Missing the required parameter 'developerAccountId' when calling developerAccountsDeveloperAccountIdDelete");
      }

      let pathParams = {
        'developerAccountId': developerAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/developerAccounts/{developerAccountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the developerAccountsDeveloperAccountIdGet operation.
     * @callback module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsDeveloperAccountIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeveloperAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single developer account
     * @param {String} developerAccountId The id of the developer account to be located
     * @param {module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsDeveloperAccountIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeveloperAccount}
     */
    developerAccountsDeveloperAccountIdGet(developerAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'developerAccountId' is set
      if (developerAccountId === undefined || developerAccountId === null) {
        throw new Error("Missing the required parameter 'developerAccountId' when calling developerAccountsDeveloperAccountIdGet");
      }

      let pathParams = {
        'developerAccountId': developerAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DeveloperAccount;
      return this.apiClient.callApi(
        '/developerAccounts/{developerAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the developerAccountsDeveloperAccountIdPatch operation.
     * @callback module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsDeveloperAccountIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeveloperAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the developer account fields
     * @param {String} developerAccountId The id of the developer account to be updated
     * @param {String} developerId The id of the developer that this account belongs to
     * @param {Object} opts Optional parameters
     * @param {String} [email] The contact email address
     * @param {String} [name] The name for the account
     * @param {String} [customData] A custom JSON object that you can create and attach to this record
     * @param {module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsDeveloperAccountIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeveloperAccount}
     */
    developerAccountsDeveloperAccountIdPatch(developerAccountId, developerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'developerAccountId' is set
      if (developerAccountId === undefined || developerAccountId === null) {
        throw new Error("Missing the required parameter 'developerAccountId' when calling developerAccountsDeveloperAccountIdPatch");
      }
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling developerAccountsDeveloperAccountIdPatch");
      }

      let pathParams = {
        'developerAccountId': developerAccountId
      };
      let queryParams = {
        'developerId': developerId,
        'email': opts['email'],
        'name': opts['name'],
        'customData': opts['customData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DeveloperAccount;
      return this.apiClient.callApi(
        '/developerAccounts/{developerAccountId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the developerAccountsDeveloperAccountIdPost operation.
     * @callback module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsDeveloperAccountIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeveloperAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the developer account or adds the developer account if it doesn't exist
     * @param {String} developerAccountId The id of the developer account to be updated
     * @param {String} developerId The id of the developer that this account belongs to
     * @param {Object} opts Optional parameters
     * @param {String} [email] The contact email address
     * @param {String} [name] The name for the account
     * @param {String} [customData] A custom JSON object that you can create and attach to this record
     * @param {module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsDeveloperAccountIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeveloperAccount}
     */
    developerAccountsDeveloperAccountIdPost(developerAccountId, developerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'developerAccountId' is set
      if (developerAccountId === undefined || developerAccountId === null) {
        throw new Error("Missing the required parameter 'developerAccountId' when calling developerAccountsDeveloperAccountIdPost");
      }
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling developerAccountsDeveloperAccountIdPost");
      }

      let pathParams = {
        'developerAccountId': developerAccountId
      };
      let queryParams = {
        'developerId': developerId,
        'email': opts['email'],
        'name': opts['name'],
        'customData': opts['customData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DeveloperAccount;
      return this.apiClient.callApi(
        '/developerAccounts/{developerAccountId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the developerAccountsGet operation.
     * @callback module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeveloperAccountPages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of developerAccounts
     * - Results are paginated and the default is value is 1000 if no limit is provided 
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query document. Example: {'name':'NASA'} matches all the developerAccounts that have the name 'NASA'
     * @param {String} [sort] A sort document. Example: {'name':1} sorts the results by name in ascending order
     * @param {Number} [pageNumber] The result set page number to be returned
     * @param {Number} [limit] The maximum number of results to return per page
     * @param {module:api/DeveloperAccountsFindAndModifyDeveloperAccountsApi~developerAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeveloperAccountPages}
     */
    developerAccountsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'pageNumber': opts['pageNumber'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DeveloperAccountPages;
      return this.apiClient.callApi(
        '/developerAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
