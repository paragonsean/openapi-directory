/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import App from '../model/App';
import AppPages from '../model/AppPages';
import AppVersion from '../model/AppVersion';
import SearchPages from '../model/SearchPages';
import VersionPages from '../model/VersionPages';

/**
* AppsFindAndModifyApps service.
* @module api/AppsFindAndModifyAppsApi
* @version 2.0.24
*/
export default class AppsFindAndModifyAppsApi {

    /**
    * Constructs a new AppsFindAndModifyAppsApi. 
    * @alias module:api/AppsFindAndModifyAppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsAppIdDelete operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsAppIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes app and all versions
     * - This method is called on behalf of a developer. 
     * @param {String} appId The id of the App to be removed
     * @param {String} developerId The unique id of the developer that is removing this app
     * @param {module:api/AppsFindAndModifyAppsApi~appsAppIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAppIdDelete(appId, developerId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdDelete");
      }
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling appsAppIdDelete");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'developerId': developerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdGet operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsAppIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single APPROVED or SUSPENDED app
     * - A 'view' event is recorded when trackViews is set to true 
     * @param {String} appId The id of the App to be located
     * @param {Object} opts Optional parameters
     * @param {String} [userId] The unique id of the user that is requesting this resource
     * @param {Boolean} [trackViews] Whether this call should be tracked as a 'view' for this app. Default is false.
     * @param {module:api/AppsFindAndModifyAppsApi~appsAppIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    appsAppIdGet(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'userId': opts['userId'],
        'trackViews': opts['trackViews']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = App;
      return this.apiClient.callApi(
        '/apps/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdLivePost operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsAppIdLivePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the live app to another, previously approved version
     * - This method is called on behalf of a developer. 
     * @param {String} appId The id of the App to be changed
     * @param {String} developerId The unique id of the developer that is changing this AppVersion
     * @param {String} version The new version of the live App
     * @param {module:api/AppsFindAndModifyAppsApi~appsAppIdLivePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAppIdLivePost(appId, developerId, version, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdLivePost");
      }
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling appsAppIdLivePost");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling appsAppIdLivePost");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'developerId': developerId,
        'version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{appId}/live', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdPublishPost operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsAppIdPublishPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publishes the current working version of the app to the marketplace
     * - This method is called on behalf of a developer.  - Only effects the current working version of the app. 
     * @param {String} appId The id of the app to be published
     * @param {String} developerId The unique id of the developer that is modifying this app
     * @param {Number} version The version of the app to be published
     * @param {Object} opts Optional parameters
     * @param {Boolean} [autoApprove] If true, this AppVersion is automatically approved and becomes immediately available to end users
     * @param {module:api/AppsFindAndModifyAppsApi~appsAppIdPublishPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAppIdPublishPost(appId, developerId, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdPublishPost");
      }
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling appsAppIdPublishPost");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling appsAppIdPublishPost");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'developerId': developerId,
        'version': version,
        'autoApprove': opts['autoApprove']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{appId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdVersionsVersionDelete operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes AppVersion
     * - This method is called on behalf of a developer. 
     * @param {String} appId The id of the App to be removed
     * @param {String} version The version of the App to be removed
     * @param {String} developerId The unique id of the developer that is removing this app
     * @param {module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAppIdVersionsVersionDelete(appId, version, developerId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionDelete");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling appsAppIdVersionsVersionDelete");
      }
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling appsAppIdVersionsVersionDelete");
      }

      let pathParams = {
        'appId': appId,
        'version': version
      };
      let queryParams = {
        'developerId': developerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdVersionsVersionGet operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single AppVersion
     * - Only returns AppVersions owned by this developer 
     * @param {String} appId The id of the App to be located
     * @param {Number} version The version number of the app
     * @param {Object} opts Optional parameters
     * @param {String} [developerId] The unique id of the developer that is requesting this resource
     * @param {module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppVersion}
     */
    appsAppIdVersionsVersionGet(appId, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling appsAppIdVersionsVersionGet");
      }

      let pathParams = {
        'appId': appId,
        'version': version
      };
      let queryParams = {
        'developerId': opts['developerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AppVersion;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdVersionsVersionPatch operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the app fields or creates a new version
     * - This method is called on behalf of a developer. - Price and is required if the model is 'single' or 'recurring' - Returns the newly updated app - This endpoint updates only the fields provided in the request (relative update). In contrast, the POST version of this method replaces the entire object to match the request (absolute update).  
     * @param {String} appId The id of the App to be updated
     * @param {String} version The version of the App to be updated
     * @param {String} developerId The unique id of the developer that is updating this app
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the app
     * @param {String} [type] The type for this app
     * @param {String} [model] A JSON object representing the pricing model type for this app
     * @param {String} [customData] A custom JSON object that you can create and attach to this record
     * @param {String} [attributes] A custom set of app attributes defined by the administrator and attached to this app
     * @param {String} [restrict] JSON object to restrict users from purchasing or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'purchase':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or purchasing this app
     * @param {String} [allow] JSON object to allow users to purchase or view this app. Example: {'purchase':{'country':['Canada','Mexico']}} allows only users from canada and mexico to purchase this app
     * @param {String} [access] JSON array of data access requirements
     * @param {String} [approvalRequired] False if updates should skip the approval process and be available immediately. Default is True
     * @param {module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppVersion}
     */
    appsAppIdVersionsVersionPatch(appId, version, developerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionPatch");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling appsAppIdVersionsVersionPatch");
      }
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling appsAppIdVersionsVersionPatch");
      }

      let pathParams = {
        'appId': appId,
        'version': version
      };
      let queryParams = {
        'developerId': developerId,
        'name': opts['name'],
        'type': opts['type'],
        'model': opts['model'],
        'customData': opts['customData'],
        'attributes': opts['attributes'],
        'restrict': opts['restrict'],
        'allow': opts['allow'],
        'access': opts['access'],
        'approvalRequired': opts['approvalRequired']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AppVersion;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{version}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdVersionsVersionPost operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the app or creates a new version
     * - This method is called on behalf of a developer. - Price and is required if the model is 'single' or 'recurring' - Returns the newly updated app - This endpoint replaces the entire object to match the request (absolute update). In contrast, the PATCH version of this endpoint updates only the fields provided in the request (relative update). 
     * @param {String} appId The id of the App to be updated
     * @param {String} version The version of the App to be updated
     * @param {String} developerId The unique id of the developer that is updating this app
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the app
     * @param {String} [type] The type for this app
     * @param {String} [model] A JSON object representing the pricing model type for this app
     * @param {String} [customData] A custom JSON object that you can create and attach to this record
     * @param {String} [attributes] A custom set of app attributes defined by the administrator and attached to this app
     * @param {String} [restrict] JSON object to restrict users from purchasing or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'purchase':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or purchasing this app
     * @param {String} [allow] JSON object to allow users to purchase or view this app. Example: {'purchase':{'country':['Canada','Mexico']}} allows only users from canada and mexico to purchase this app
     * @param {String} [access] JSON array of data access requirements
     * @param {String} [approvalRequired] False if updates should skip the approval process and be available immediately. Default is True
     * @param {module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppVersion}
     */
    appsAppIdVersionsVersionPost(appId, version, developerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionPost");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling appsAppIdVersionsVersionPost");
      }
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling appsAppIdVersionsVersionPost");
      }

      let pathParams = {
        'appId': appId,
        'version': version
      };
      let queryParams = {
        'developerId': developerId,
        'name': opts['name'],
        'type': opts['type'],
        'model': opts['model'],
        'customData': opts['customData'],
        'attributes': opts['attributes'],
        'restrict': opts['restrict'],
        'allow': opts['allow'],
        'access': opts['access'],
        'approvalRequired': opts['approvalRequired']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AppVersion;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{version}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdVersionsVersionStatusPost operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionStatusPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows a developer or administrator to change the status of apps
     * Only certain status changes are allowed. For instance, a developer is only able to suspend and unsuspend their app (which must already be approved). See here for a state change diagram of allowed status changes for administrators: https://support.openchannel.io/documentation/api/#415-apps-status-change 
     * @param {String} appId The id of the App to be updated
     * @param {Number} version The version of the App to be updated
     * @param {Object} opts Optional parameters
     * @param {String} [developerId] The unique id of the developer that is modifying this app
     * @param {module:model/String} [status] The new status for this app. Can be either 'inReview', 'approved', 'suspended' or 'rejected'
     * @param {module:model/String} [modifiedBy = 'administrator')] The role initiating this status change. Can be either 'developer' or 'administrator' (default)
     * @param {String} [reason] The reason for this status change
     * @param {module:api/AppsFindAndModifyAppsApi~appsAppIdVersionsVersionStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAppIdVersionsVersionStatusPost(appId, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionStatusPost");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling appsAppIdVersionsVersionStatusPost");
      }

      let pathParams = {
        'appId': appId,
        'version': version
      };
      let queryParams = {
        'developerId': opts['developerId'],
        'status': opts['status'],
        'modifiedBy': opts['modifiedBy'],
        'reason': opts['reason']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{version}/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsBySafeNameSafeNameGet operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsBySafeNameSafeNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single APPROVED or SUSPENDED app
     * - A 'view' event is recorded when trackViews is set to true 
     * @param {String} safeName The safeName of the App to be located
     * @param {Object} opts Optional parameters
     * @param {String} [userId] The unique id of the user that is requesting this resource
     * @param {Boolean} [trackViews] Whether this call should be tracked as a 'view' for this app. Default is false.
     * @param {module:api/AppsFindAndModifyAppsApi~appsBySafeNameSafeNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    appsBySafeNameSafeNameGet(safeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'safeName' is set
      if (safeName === undefined || safeName === null) {
        throw new Error("Missing the required parameter 'safeName' when calling appsBySafeNameSafeNameGet");
      }

      let pathParams = {
        'safeName': safeName
      };
      let queryParams = {
        'userId': opts['userId'],
        'trackViews': opts['trackViews']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = App;
      return this.apiClient.callApi(
        '/apps/bySafeName/{safeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGet operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of APPROVED or SUSPENDED apps
     * - Results are paginated and the default is value is 1000 if no limit is provided - If no query is specified, returns all APPROVED or SUSPENDED apps within the marketplace 
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query document. Example: {'name':'MyApp'} matches all the apps that have the name 'MyApp'
     * @param {String} [sort] A sort document. Example: {'name':1} sorts the results by name in ascending order
     * @param {Number} [pageNumber] The result set page number to be returned
     * @param {Number} [limit] The maximum number of results to return per page
     * @param {String} [userId] The unique id of the user requesting this resource
     * @param {Boolean} [isOwner] Whether this result should only contain apps that are owned by this user
     * @param {module:api/AppsFindAndModifyAppsApi~appsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPages}
     */
    appsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'pageNumber': opts['pageNumber'],
        'limit': opts['limit'],
        'userId': opts['userId'],
        'isOwner': opts['isOwner']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AppPages;
      return this.apiClient.callApi(
        '/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPost operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new app for this developer
     * - This method is called on behalf of a developer. - Price is required if the model is 'single' or 'recurring' - Returns the newly created app 
     * @param {String} developerId The unique id of the developer that is adding this app
     * @param {String} name The name of the app
     * @param {Object} opts Optional parameters
     * @param {String} [type] The type for this app
     * @param {String} [model] A JSON object representing the pricing model type for this app
     * @param {String} [customData] A custom JSON object that you can create and attach to this record
     * @param {String} [attributes] A custom set of app attributes defined by the administrator and attached to this app
     * @param {String} [restrict] JSON object to restrict users from owning or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'own':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or owning this app
     * @param {String} [allow] JSON object to restrict users from owning or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'own':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or owning this app
     * @param {String} [access] JSON array of data access requirements
     * @param {module:api/AppsFindAndModifyAppsApi~appsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppVersion}
     */
    appsPost(developerId, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling appsPost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appsPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'developerId': developerId,
        'name': name,
        'type': opts['type'],
        'model': opts['model'],
        'customData': opts['customData'],
        'attributes': opts['attributes'],
        'restrict': opts['restrict'],
        'allow': opts['allow'],
        'access': opts['access']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AppVersion;
      return this.apiClient.callApi(
        '/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsTextSearchGet operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsTextSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches through the text of fields to find APPROVED or SUSPENDED apps
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} text The text to search for.
     * @param {String} fields A JSON array containing all the fields to be searched through. Example: ['name', 'customData.description']
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query document. Example: {'name':'MyApp'} matches all the documents that have the name 'MyApp'
     * @param {Number} [pageNumber] The result set page number to be returned
     * @param {Number} [limit] The maximum number of results to return per page
     * @param {String} [userId] The unique id of the user requesting this resource
     * @param {Boolean} [isOwned] Whether this result should only contain apps that are owned by this user
     * @param {module:api/AppsFindAndModifyAppsApi~appsTextSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPages}
     */
    appsTextSearchGet(text, fields, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling appsTextSearchGet");
      }
      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling appsTextSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'text': text,
        'fields': fields,
        'pageNumber': opts['pageNumber'],
        'limit': opts['limit'],
        'userId': opts['userId'],
        'isOwned': opts['isOwned']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SearchPages;
      return this.apiClient.callApi(
        '/apps/textSearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsVersionsGet operation.
     * @callback module:api/AppsFindAndModifyAppsApi~appsVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionPages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of AppVersions
     * - Results are paginated when limit is set, otherwise all results are returned - If no query is specified, returns all AppVersions within the marketplace - Only returns AppVersions owned by this developer 
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query document. Example: {'name':'MyApp'} matches all the apps that have the name 'MyApp'
     * @param {String} [sort] A sort document. Example: {'name':1} sorts the results by name in ascending order
     * @param {Number} [pageNumber] The result set page number to be returned
     * @param {Number} [limit] The maximum number of results to return per page
     * @param {String} [developerId] The unique id of the developer requesting this resource
     * @param {module:api/AppsFindAndModifyAppsApi~appsVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionPages}
     */
    appsVersionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'pageNumber': opts['pageNumber'],
        'limit': opts['limit'],
        'developerId': opts['developerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = VersionPages;
      return this.apiClient.callApi(
        '/apps/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
