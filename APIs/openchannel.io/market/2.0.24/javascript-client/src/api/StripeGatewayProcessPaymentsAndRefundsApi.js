/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Accounts from '../model/Accounts';
import Cards from '../model/Cards';
import DeveloperToken from '../model/DeveloperToken';

/**
* StripeGatewayProcessPaymentsAndRefunds service.
* @module api/StripeGatewayProcessPaymentsAndRefundsApi
* @version 2.0.24
*/
export default class StripeGatewayProcessPaymentsAndRefundsApi {

    /**
    * Constructs a new StripeGatewayProcessPaymentsAndRefundsApi. 
    * @alias module:api/StripeGatewayProcessPaymentsAndRefundsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the stripeGatewayDeveloperDeveloperIdAccountsGet operation.
     * @callback module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayDeveloperDeveloperIdAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a developers connected Stripe accounts
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} developerId The id of the developer connecting their Stripe account
     * @param {module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayDeveloperDeveloperIdAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    stripeGatewayDeveloperDeveloperIdAccountsGet(developerId, callback) {
      let postBody = null;
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling stripeGatewayDeveloperDeveloperIdAccountsGet");
      }

      let pathParams = {
        'developerId': developerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/stripe-gateway/developer/{developerId}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stripeGatewayDeveloperDeveloperIdAccountsPost operation.
     * @callback module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayDeveloperDeveloperIdAccountsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeveloperToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a temporary URL to allow a developer to connect their Stripe account
     * - Results are returned for the market provided within the basic authentication credentials  - The URL generated by this method is only valid for 48 hours. 
     * @param {String} developerId The id of the developer connecting their Stripe account
     * @param {String} redirectUrl The URL to redirect this developer after they have connected their Stripe account
     * @param {module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayDeveloperDeveloperIdAccountsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeveloperToken}
     */
    stripeGatewayDeveloperDeveloperIdAccountsPost(developerId, redirectUrl, callback) {
      let postBody = null;
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling stripeGatewayDeveloperDeveloperIdAccountsPost");
      }
      // verify the required parameter 'redirectUrl' is set
      if (redirectUrl === undefined || redirectUrl === null) {
        throw new Error("Missing the required parameter 'redirectUrl' when calling stripeGatewayDeveloperDeveloperIdAccountsPost");
      }

      let pathParams = {
        'developerId': developerId
      };
      let queryParams = {
        'redirectUrl': redirectUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DeveloperToken;
      return this.apiClient.callApi(
        '/stripe-gateway/developer/{developerId}/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete operation.
     * @callback module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disconnects a developer's Stripe account
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} developerId The id of the developer disconnecting their Stripe account
     * @param {String} stripeId The id of the stripe account to disconnect
     * @param {module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete(developerId, stripeId, callback) {
      let postBody = null;
      // verify the required parameter 'developerId' is set
      if (developerId === undefined || developerId === null) {
        throw new Error("Missing the required parameter 'developerId' when calling stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete");
      }
      // verify the required parameter 'stripeId' is set
      if (stripeId === undefined || stripeId === null) {
        throw new Error("Missing the required parameter 'stripeId' when calling stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete");
      }

      let pathParams = {
        'developerId': developerId,
        'stripeId': stripeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/stripe-gateway/developer/{developerId}/accounts/{stripeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stripeGatewayUserUserIdCardsCardIdDelete operation.
     * @callback module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayUserUserIdCardsCardIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cards} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a credit card for a user
     * @param {String} userId The id of the user removing their credit card
     * @param {String} cardId The id of the credit card to remove
     * @param {module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayUserUserIdCardsCardIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cards}
     */
    stripeGatewayUserUserIdCardsCardIdDelete(userId, cardId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling stripeGatewayUserUserIdCardsCardIdDelete");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling stripeGatewayUserUserIdCardsCardIdDelete");
      }

      let pathParams = {
        'userId': userId,
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Cards;
      return this.apiClient.callApi(
        '/stripe-gateway/user/{userId}/cards/{cardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stripeGatewayUserUserIdCardsCardIdPost operation.
     * @callback module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayUserUserIdCardsCardIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cards} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a credit card for this user
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} userId The id of the user adding their credit card
     * @param {String} cardId The id of the card to be updated
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isDefault] Set to true if this should be set to be the default credit card
     * @param {String} [addressCity] The card holder's city
     * @param {String} [addressCountry] The card holder's country
     * @param {String} [addressLine1] The card holder's street address
     * @param {String} [addressLine2] The card holder's street address
     * @param {String} [addressState] The card holder's city state/province
     * @param {String} [addressZip] The card holder's zip/postal code
     * @param {module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayUserUserIdCardsCardIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cards}
     */
    stripeGatewayUserUserIdCardsCardIdPost(userId, cardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling stripeGatewayUserUserIdCardsCardIdPost");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling stripeGatewayUserUserIdCardsCardIdPost");
      }

      let pathParams = {
        'userId': userId,
        'cardId': cardId
      };
      let queryParams = {
        'isDefault': opts['isDefault'],
        'address_city': opts['addressCity'],
        'address_country': opts['addressCountry'],
        'address_line1': opts['addressLine1'],
        'address_line2': opts['addressLine2'],
        'address_state': opts['addressState'],
        'address_zip': opts['addressZip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Cards;
      return this.apiClient.callApi(
        '/stripe-gateway/user/{userId}/cards/{cardId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stripeGatewayUserUserIdCardsGet operation.
     * @callback module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayUserUserIdCardsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cards} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns credit cards for this user
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} userId The id of the user requesting their credit cards
     * @param {module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayUserUserIdCardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cards}
     */
    stripeGatewayUserUserIdCardsGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling stripeGatewayUserUserIdCardsGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Cards;
      return this.apiClient.callApi(
        '/stripe-gateway/user/{userId}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stripeGatewayUserUserIdCardsPost operation.
     * @callback module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayUserUserIdCardsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cards} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds credit card for this user
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} userId The id of the user adding their credit card
     * @param {String} token The Stripe token returned by the Stripe.js Stripe.card.createToken call
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isDefault] Set to true if this should be set to be the default credit card
     * @param {module:api/StripeGatewayProcessPaymentsAndRefundsApi~stripeGatewayUserUserIdCardsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cards}
     */
    stripeGatewayUserUserIdCardsPost(userId, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling stripeGatewayUserUserIdCardsPost");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling stripeGatewayUserUserIdCardsPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'token': token,
        'isDefault': opts['isDefault']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Cards;
      return this.apiClient.callApi(
        '/stripe-gateway/user/{userId}/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
