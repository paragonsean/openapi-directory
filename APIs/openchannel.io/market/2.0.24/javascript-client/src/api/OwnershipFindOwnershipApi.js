/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Ownership from '../model/Ownership';
import OwnershipPages from '../model/OwnershipPages';

/**
* OwnershipFindOwnership service.
* @module api/OwnershipFindOwnershipApi
* @version 2.0.24
*/
export default class OwnershipFindOwnershipApi {

    /**
    * Constructs a new OwnershipFindOwnershipApi. 
    * @alias module:api/OwnershipFindOwnershipApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ownershipGet operation.
     * @callback module:api/OwnershipFindOwnershipApi~ownershipGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OwnershipPages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of app licenses
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query document. Example: {'userId':'12'} matches all the ownership records that have the userId '12'.
     * @param {String} [sort] A sort document. Example: {'date':1} sorts the results by date in ascending order
     * @param {Number} [pageNumber] The result set page number to be returned
     * @param {Number} [limit] The maximum number of results to return per page
     * @param {module:api/OwnershipFindOwnershipApi~ownershipGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OwnershipPages}
     */
    ownershipGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'pageNumber': opts['pageNumber'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = OwnershipPages;
      return this.apiClient.callApi(
        '/ownership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ownershipInstallPost operation.
     * @callback module:api/OwnershipFindOwnershipApi~ownershipInstallPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ownership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aquires an app license for a user (installs app)
     *  - This method is called on behalf of a user - This method requires either a modelId from the app or a custom model - User data and statistics are recorded when this method is called 
     * @param {String} appId The id of the App being owned
     * @param {String} userId The id of the User requesting to own the App
     * @param {Object} opts Optional parameters
     * @param {String} [modelId] The id of the model associated with this ownership request
     * @param {String} [model] A custom model that will override the app's default model for this install
     * @param {String} [customData] A custom JSON object to attach to this ownership record
     * @param {module:api/OwnershipFindOwnershipApi~ownershipInstallPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ownership}
     */
    ownershipInstallPost(appId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling ownershipInstallPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling ownershipInstallPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'appId': appId,
        'userId': userId,
        'modelId': opts['modelId'],
        'model': opts['model'],
        'customData': opts['customData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Ownership;
      return this.apiClient.callApi(
        '/ownership/install', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ownershipOwnershipIdGet operation.
     * @callback module:api/OwnershipFindOwnershipApi~ownershipOwnershipIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ownership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an ownership record
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} ownershipId The id belonging to the ownership record
     * @param {module:api/OwnershipFindOwnershipApi~ownershipOwnershipIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ownership}
     */
    ownershipOwnershipIdGet(ownershipId, callback) {
      let postBody = null;
      // verify the required parameter 'ownershipId' is set
      if (ownershipId === undefined || ownershipId === null) {
        throw new Error("Missing the required parameter 'ownershipId' when calling ownershipOwnershipIdGet");
      }

      let pathParams = {
        'ownershipId': ownershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Ownership;
      return this.apiClient.callApi(
        '/ownership/{ownershipId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ownershipOwnershipIdPatch operation.
     * @callback module:api/OwnershipFindOwnershipApi~ownershipOwnershipIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ownership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates ownership fields
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} ownershipId The id of the ownership to be updated
     * @param {Object} opts Optional parameters
     * @param {String} [customData] Custom JSON object that will be attached to this ownership record
     * @param {Number} [expires] The date (in millis) of when this app ownership expires
     * @param {module:api/OwnershipFindOwnershipApi~ownershipOwnershipIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ownership}
     */
    ownershipOwnershipIdPatch(ownershipId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownershipId' is set
      if (ownershipId === undefined || ownershipId === null) {
        throw new Error("Missing the required parameter 'ownershipId' when calling ownershipOwnershipIdPatch");
      }

      let pathParams = {
        'ownershipId': ownershipId
      };
      let queryParams = {
        'customData': opts['customData'],
        'expires': opts['expires']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Ownership;
      return this.apiClient.callApi(
        '/ownership/{ownershipId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ownershipOwnershipIdPost operation.
     * @callback module:api/OwnershipFindOwnershipApi~ownershipOwnershipIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ownership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an ownership record
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} ownershipId The id of the ownership to be updated
     * @param {Object} opts Optional parameters
     * @param {String} [customData] Custom JSON object that will be attached to this ownership record
     * @param {Number} [expires] The date (in millis) of when this app ownership expires
     * @param {module:api/OwnershipFindOwnershipApi~ownershipOwnershipIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ownership}
     */
    ownershipOwnershipIdPost(ownershipId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownershipId' is set
      if (ownershipId === undefined || ownershipId === null) {
        throw new Error("Missing the required parameter 'ownershipId' when calling ownershipOwnershipIdPost");
      }

      let pathParams = {
        'ownershipId': ownershipId
      };
      let queryParams = {
        'customData': opts['customData'],
        'expires': opts['expires']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Ownership;
      return this.apiClient.callApi(
        '/ownership/{ownershipId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ownershipUninstallOwnershipIdPost operation.
     * @callback module:api/OwnershipFindOwnershipApi~ownershipUninstallOwnershipIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ownership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uninstalls a license for a particular user and app (uninstalls app)
     *  - This method is called on behalf of a user - User data and statistics are recorded when this method is called 
     * @param {String} ownershipId The id of the ownership to be unintalled
     * @param {String} userId The id of the User requesting to uninstall the App
     * @param {Object} opts Optional parameters
     * @param {Boolean} [cancelOwnership] True if this app will require payment to be re-installed. Default is false
     * @param {String} [customData] A custom JSON object to attach to this ownership record
     * @param {module:api/OwnershipFindOwnershipApi~ownershipUninstallOwnershipIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ownership}
     */
    ownershipUninstallOwnershipIdPost(ownershipId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownershipId' is set
      if (ownershipId === undefined || ownershipId === null) {
        throw new Error("Missing the required parameter 'ownershipId' when calling ownershipUninstallOwnershipIdPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling ownershipUninstallOwnershipIdPost");
      }

      let pathParams = {
        'ownershipId': ownershipId
      };
      let queryParams = {
        'userId': userId,
        'cancelOwnership': opts['cancelOwnership'],
        'customData': opts['customData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Ownership;
      return this.apiClient.callApi(
        '/ownership/uninstall/{ownershipId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
