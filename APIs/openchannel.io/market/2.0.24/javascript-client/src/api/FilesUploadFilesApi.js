/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileDownload from '../model/FileDownload';

/**
* FilesUploadFiles service.
* @module api/FilesUploadFilesApi
* @version 2.0.24
*/
export default class FilesUploadFilesApi {

    /**
    * Constructs a new FilesUploadFilesApi. 
    * @alias module:api/FilesUploadFilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filesByIdOrUrlGet operation.
     * @callback module:api/FilesUploadFilesApi~filesByIdOrUrlGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details for a file.
     * @param {String} fileIdOrUrl The fileId or fileUrl of the file to be returned
     * @param {module:api/FilesUploadFilesApi~filesByIdOrUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    filesByIdOrUrlGet(fileIdOrUrl, callback) {
      let postBody = null;
      // verify the required parameter 'fileIdOrUrl' is set
      if (fileIdOrUrl === undefined || fileIdOrUrl === null) {
        throw new Error("Missing the required parameter 'fileIdOrUrl' when calling filesByIdOrUrlGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fileIdOrUrl': fileIdOrUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/byIdOrUrl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesDownloadGet operation.
     * @callback module:api/FilesUploadFilesApi~filesDownloadGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDownload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A signed URL for downloading a private file can be returned by providing the fileId.
     * @param {String} fileId The URL of the file to be uploaded
     * @param {Object} opts Optional parameters
     * @param {Number} [validSeconds] The number of seconds that this signed URL should be valid for. The default is 60.
     * @param {module:api/FilesUploadFilesApi~filesDownloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDownload}
     */
    filesDownloadGet(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling filesDownloadGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fileId': fileId,
        'validSeconds': opts['validSeconds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = FileDownload;
      return this.apiClient.callApi(
        '/files/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGet operation.
     * @callback module:api/FilesUploadFilesApi~filesGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of files
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query document. Example: {'name':'file.txt'} matches all the files that have the name 'file.txt'
     * @param {String} [sort] A sort document. Example: {'name':1} sorts the results by name in ascending order
     * @param {Number} [pageNumber] The result set page number to be returned
     * @param {Number} [limit] The maximum number of results to return per page
     * @param {module:api/FilesUploadFilesApi~filesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    filesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'pageNumber': opts['pageNumber'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesPost operation.
     * @callback module:api/FilesUploadFilesApi~filesPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a file.
     * - WARNING: File URLs or fileIds must be stored somewhere within the customData field for an app, review, developer or user. Unused files will be removed after a few days.  - This method is called on behalf of a developer. 
     * @param {File} file The file to be uploaded
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isPrivate] If true, this file will be protected as a private file and require the generation of a signed URL in order to download using the Download File API. The default is false.
     * @param {String} [hash] A comma separated list of hashes to return in order to verify file integrity.
     * @param {module:api/FilesUploadFilesApi~filesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    filesPost(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling filesPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'isPrivate': opts['isPrivate'],
        'hash': opts['hash']
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesUrlPost operation.
     * @callback module:api/FilesUploadFilesApi~filesUrlPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a file from a URL
     * - WARNING: File URLs or fileIds must be stored somewhere within the customData field for an app, review, developer or user. Unused files will be removed after a few days. - This method is called on behalf of a developer. 
     * @param {String} url The URL of the file to be uploaded
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isPrivate] If true, this file will be protected as a private file and require the generation of a signed URL in order to download using the Download File API. The default is false.
     * @param {module:api/FilesUploadFilesApi~filesUrlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    filesUrlPost(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling filesUrlPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'isPrivate': opts['isPrivate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
