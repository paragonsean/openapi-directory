/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Transaction from '../model/Transaction';
import TransactionPages from '../model/TransactionPages';

/**
* TransactionsFindPaymentsAndRefunds service.
* @module api/TransactionsFindPaymentsAndRefundsApi
* @version 2.0.24
*/
export default class TransactionsFindPaymentsAndRefundsApi {

    /**
    * Constructs a new TransactionsFindPaymentsAndRefundsApi. 
    * @alias module:api/TransactionsFindPaymentsAndRefundsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the transactionsGet operation.
     * @callback module:api/TransactionsFindPaymentsAndRefundsApi~transactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionPages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of transactions
     * - Results are paginated and the default is value is 100 if no limit is provided 
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query document. Example: {'userId':'1'} matches all the transactions that have the userId '1'.
     * @param {String} [sort] A sort document. Example: {'date':1} sorts the results by total in ascending order
     * @param {Number} [pageNumber] The result set page number to be returned
     * @param {Number} [limit] The maximum number of results to return per page
     * @param {module:api/TransactionsFindPaymentsAndRefundsApi~transactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionPages}
     */
    transactionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'pageNumber': opts['pageNumber'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TransactionPages;
      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTransactionIdDelete operation.
     * @callback module:api/TransactionsFindPaymentsAndRefundsApi~transactionsTransactionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deleted a transaction
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} transactionId The id of the transaction to be deleted
     * @param {module:api/TransactionsFindPaymentsAndRefundsApi~transactionsTransactionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTransactionIdDelete(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionsTransactionIdDelete");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{transactionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTransactionIdGet operation.
     * @callback module:api/TransactionsFindPaymentsAndRefundsApi~transactionsTransactionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a transaction
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} transactionId The id of the transaction to return
     * @param {module:api/TransactionsFindPaymentsAndRefundsApi~transactionsTransactionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTransactionIdGet(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionsTransactionIdGet");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTransactionIdPost operation.
     * @callback module:api/TransactionsFindPaymentsAndRefundsApi~transactionsTransactionIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a transaction
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param {String} transactionId The id of the transaction to be updated
     * @param {Object} opts Optional parameters
     * @param {String} [customData] A custom JSON object that you can create and attach to this record
     * @param {module:api/TransactionsFindPaymentsAndRefundsApi~transactionsTransactionIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    transactionsTransactionIdPost(transactionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionsTransactionIdPost");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
        'customData': opts['customData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/transactions/{transactionId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
