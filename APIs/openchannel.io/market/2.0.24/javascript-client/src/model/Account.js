/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Account model module.
 * @module model/Account
 * @version 2.0.24
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * The connected Stripe account for a developer
     * @alias module:model/Account
     * @param accountName {String} The name of the Stripe account
     * @param country {String} The country for this Stripe account
     * @param defaultCurrency {String} The default currency for this Stripe account
     * @param stripeId {String} The id of the Stripe account
     */
    constructor(accountName, country, defaultCurrency, stripeId) { 
        
        Account.initialize(this, accountName, country, defaultCurrency, stripeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountName, country, defaultCurrency, stripeId) { 
        obj['accountName'] = accountName;
        obj['country'] = country;
        obj['defaultCurrency'] = defaultCurrency;
        obj['stripeId'] = stripeId;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('defaultCurrency')) {
                obj['defaultCurrency'] = ApiClient.convertToType(data['defaultCurrency'], 'String');
            }
            if (data.hasOwnProperty('stripeId')) {
                obj['stripeId'] = ApiClient.convertToType(data['stripeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Account.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['defaultCurrency'] && !(typeof data['defaultCurrency'] === 'string' || data['defaultCurrency'] instanceof String)) {
            throw new Error("Expected the field `defaultCurrency` to be a primitive type in the JSON string but got " + data['defaultCurrency']);
        }
        // ensure the json data is a string
        if (data['stripeId'] && !(typeof data['stripeId'] === 'string' || data['stripeId'] instanceof String)) {
            throw new Error("Expected the field `stripeId` to be a primitive type in the JSON string but got " + data['stripeId']);
        }

        return true;
    }


}

Account.RequiredProperties = ["accountName", "country", "defaultCurrency", "stripeId"];

/**
 * The name of the Stripe account
 * @member {String} accountName
 */
Account.prototype['accountName'] = undefined;

/**
 * The country for this Stripe account
 * @member {String} country
 */
Account.prototype['country'] = undefined;

/**
 * The default currency for this Stripe account
 * @member {String} defaultCurrency
 */
Account.prototype['defaultCurrency'] = undefined;

/**
 * The id of the Stripe account
 * @member {String} stripeId
 */
Account.prototype['stripeId'] = undefined;






export default Account;

