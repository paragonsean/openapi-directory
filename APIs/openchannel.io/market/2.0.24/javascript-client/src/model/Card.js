/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Card model module.
 * @module model/Card
 * @version 2.0.24
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * 
     * @alias module:model/Card
     * @param brand {String} The brand of the credit card. Example: Visa
     * @param cardId {String} The id for this credit card
     * @param expMonth {Number} The two digit expiration month
     * @param expYear {Number} The four digit expiration year
     * @param isDefault {Boolean} True if this is the default credit card
     * @param last4 {String} The last 4 digits of the credit card number
     * @param name {String} The card holder's full name
     */
    constructor(brand, cardId, expMonth, expYear, isDefault, last4, name) { 
        
        Card.initialize(this, brand, cardId, expMonth, expYear, isDefault, last4, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brand, cardId, expMonth, expYear, isDefault, last4, name) { 
        obj['brand'] = brand;
        obj['cardId'] = cardId;
        obj['exp_month'] = expMonth;
        obj['exp_year'] = expYear;
        obj['isDefault'] = isDefault;
        obj['last4'] = last4;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('address_city')) {
                obj['address_city'] = ApiClient.convertToType(data['address_city'], 'String');
            }
            if (data.hasOwnProperty('address_country')) {
                obj['address_country'] = ApiClient.convertToType(data['address_country'], 'String');
            }
            if (data.hasOwnProperty('address_line1')) {
                obj['address_line1'] = ApiClient.convertToType(data['address_line1'], 'String');
            }
            if (data.hasOwnProperty('address_line2')) {
                obj['address_line2'] = ApiClient.convertToType(data['address_line2'], 'String');
            }
            if (data.hasOwnProperty('address_state')) {
                obj['address_state'] = ApiClient.convertToType(data['address_state'], 'String');
            }
            if (data.hasOwnProperty('address_zip')) {
                obj['address_zip'] = ApiClient.convertToType(data['address_zip'], 'String');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('cardId')) {
                obj['cardId'] = ApiClient.convertToType(data['cardId'], 'String');
            }
            if (data.hasOwnProperty('exp_month')) {
                obj['exp_month'] = ApiClient.convertToType(data['exp_month'], 'Number');
            }
            if (data.hasOwnProperty('exp_year')) {
                obj['exp_year'] = ApiClient.convertToType(data['exp_year'], 'Number');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('last4')) {
                obj['last4'] = ApiClient.convertToType(data['last4'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Card.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address_city'] && !(typeof data['address_city'] === 'string' || data['address_city'] instanceof String)) {
            throw new Error("Expected the field `address_city` to be a primitive type in the JSON string but got " + data['address_city']);
        }
        // ensure the json data is a string
        if (data['address_country'] && !(typeof data['address_country'] === 'string' || data['address_country'] instanceof String)) {
            throw new Error("Expected the field `address_country` to be a primitive type in the JSON string but got " + data['address_country']);
        }
        // ensure the json data is a string
        if (data['address_line1'] && !(typeof data['address_line1'] === 'string' || data['address_line1'] instanceof String)) {
            throw new Error("Expected the field `address_line1` to be a primitive type in the JSON string but got " + data['address_line1']);
        }
        // ensure the json data is a string
        if (data['address_line2'] && !(typeof data['address_line2'] === 'string' || data['address_line2'] instanceof String)) {
            throw new Error("Expected the field `address_line2` to be a primitive type in the JSON string but got " + data['address_line2']);
        }
        // ensure the json data is a string
        if (data['address_state'] && !(typeof data['address_state'] === 'string' || data['address_state'] instanceof String)) {
            throw new Error("Expected the field `address_state` to be a primitive type in the JSON string but got " + data['address_state']);
        }
        // ensure the json data is a string
        if (data['address_zip'] && !(typeof data['address_zip'] === 'string' || data['address_zip'] instanceof String)) {
            throw new Error("Expected the field `address_zip` to be a primitive type in the JSON string but got " + data['address_zip']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['cardId'] && !(typeof data['cardId'] === 'string' || data['cardId'] instanceof String)) {
            throw new Error("Expected the field `cardId` to be a primitive type in the JSON string but got " + data['cardId']);
        }
        // ensure the json data is a string
        if (data['last4'] && !(typeof data['last4'] === 'string' || data['last4'] instanceof String)) {
            throw new Error("Expected the field `last4` to be a primitive type in the JSON string but got " + data['last4']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Card.RequiredProperties = ["brand", "cardId", "exp_month", "exp_year", "isDefault", "last4", "name"];

/**
 * The card holder's city
 * @member {String} address_city
 */
Card.prototype['address_city'] = undefined;

/**
 * The card holder's country
 * @member {String} address_country
 */
Card.prototype['address_country'] = undefined;

/**
 * The card holder's street address
 * @member {String} address_line1
 */
Card.prototype['address_line1'] = undefined;

/**
 * The card holder's street address
 * @member {String} address_line2
 */
Card.prototype['address_line2'] = undefined;

/**
 * The card holder's city state/province
 * @member {String} address_state
 */
Card.prototype['address_state'] = undefined;

/**
 * The card holder's zip/postal code
 * @member {String} address_zip
 */
Card.prototype['address_zip'] = undefined;

/**
 * The brand of the credit card. Example: Visa
 * @member {String} brand
 */
Card.prototype['brand'] = undefined;

/**
 * The id for this credit card
 * @member {String} cardId
 */
Card.prototype['cardId'] = undefined;

/**
 * The two digit expiration month
 * @member {Number} exp_month
 */
Card.prototype['exp_month'] = undefined;

/**
 * The four digit expiration year
 * @member {Number} exp_year
 */
Card.prototype['exp_year'] = undefined;

/**
 * True if this is the default credit card
 * @member {Boolean} isDefault
 */
Card.prototype['isDefault'] = undefined;

/**
 * The last 4 digits of the credit card number
 * @member {String} last4
 */
Card.prototype['last4'] = undefined;

/**
 * The card holder's full name
 * @member {String} name
 */
Card.prototype['name'] = undefined;






export default Card;

