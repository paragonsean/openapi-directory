/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Profanity from './Profanity';

/**
 * The Status model module.
 * @module model/Status
 * @version 2.0.24
 */
class Status {
    /**
     * Constructs a new <code>Status</code>.
     * The current status of this review
     * @alias module:model/Status
     * @param profanity {Array.<module:model/Profanity>} A list of profanity found in this review
     * @param reason {module:model/Status.ReasonEnum} Text describing the reason for the current status
     * @param value {module:model/Status.ValueEnum} The current status value
     */
    constructor(profanity, reason, value) { 
        
        Status.initialize(this, profanity, reason, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, profanity, reason, value) { 
        obj['profanity'] = profanity;
        obj['reason'] = reason;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Status</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Status} obj Optional instance to populate.
     * @return {module:model/Status} The populated <code>Status</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Status();

            if (data.hasOwnProperty('profanity')) {
                obj['profanity'] = ApiClient.convertToType(data['profanity'], [Profanity]);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Status</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Status</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Status.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['profanity']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['profanity'])) {
                throw new Error("Expected the field `profanity` to be an array in the JSON data but got " + data['profanity']);
            }
            // validate the optional field `profanity` (array)
            for (const item of data['profanity']) {
                Profanity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Status.RequiredProperties = ["profanity", "reason", "value"];

/**
 * A list of profanity found in this review
 * @member {Array.<module:model/Profanity>} profanity
 */
Status.prototype['profanity'] = undefined;

/**
 * Text describing the reason for the current status
 * @member {module:model/Status.ReasonEnum} reason
 */
Status.prototype['reason'] = undefined;

/**
 * The current status value
 * @member {module:model/Status.ValueEnum} value
 */
Status.prototype['value'] = undefined;





/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
Status['ReasonEnum'] = {

    /**
     * value: "profanity"
     * @const
     */
    "profanity": "profanity",

    /**
     * value: "spam"
     * @const
     */
    "spam": "spam"
};


/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
Status['ValueEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "spam"
     * @const
     */
    "spam": "spam",

    /**
     * value: "flagged"
     * @const
     */
    "flagged": "flagged",

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved"
};



export default Status;

