/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 2.0.24
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * A transaction for an app initiated by a user
     * @alias module:model/Transaction
     * @param amount {Number} The total amount paid in cents
     * @param appId {String} The id of the app involved with this transaction
     * @param date {Number} The date (in millis) of when this transaction occurred
     * @param developerId {String} The id of the developer involved with this transaction
     * @param ownershipId {String} The id for the ownership associated with this transaction
     * @param transactionId {String} The id for this transaction
     * @param type {module:model/Transaction.TypeEnum} The type for this transaction
     * @param userId {String} The id of the user making the transaction
     */
    constructor(amount, appId, date, developerId, ownershipId, transactionId, type, userId) { 
        
        Transaction.initialize(this, amount, appId, date, developerId, ownershipId, transactionId, type, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, appId, date, developerId, ownershipId, transactionId, type, userId) { 
        obj['amount'] = amount;
        obj['appId'] = appId;
        obj['date'] = date;
        obj['developerId'] = developerId;
        obj['ownershipId'] = ownershipId;
        obj['transactionId'] = transactionId;
        obj['type'] = type;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], Object);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Number');
            }
            if (data.hasOwnProperty('developerAmount')) {
                obj['developerAmount'] = ApiClient.convertToType(data['developerAmount'], 'Number');
            }
            if (data.hasOwnProperty('developerId')) {
                obj['developerId'] = ApiClient.convertToType(data['developerId'], 'String');
            }
            if (data.hasOwnProperty('feeAmount')) {
                obj['feeAmount'] = ApiClient.convertToType(data['feeAmount'], 'Number');
            }
            if (data.hasOwnProperty('marketplaceAmount')) {
                obj['marketplaceAmount'] = ApiClient.convertToType(data['marketplaceAmount'], 'Number');
            }
            if (data.hasOwnProperty('ownershipId')) {
                obj['ownershipId'] = ApiClient.convertToType(data['ownershipId'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['developerId'] && !(typeof data['developerId'] === 'string' || data['developerId'] instanceof String)) {
            throw new Error("Expected the field `developerId` to be a primitive type in the JSON string but got " + data['developerId']);
        }
        // ensure the json data is a string
        if (data['ownershipId'] && !(typeof data['ownershipId'] === 'string' || data['ownershipId'] instanceof String)) {
            throw new Error("Expected the field `ownershipId` to be a primitive type in the JSON string but got " + data['ownershipId']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}

Transaction.RequiredProperties = ["amount", "appId", "date", "developerId", "ownershipId", "transactionId", "type", "userId"];

/**
 * The total amount paid in cents
 * @member {Number} amount
 */
Transaction.prototype['amount'] = undefined;

/**
 * The id of the app involved with this transaction
 * @member {String} appId
 */
Transaction.prototype['appId'] = undefined;

/**
 * A custom JSON object that you can create and attach to this record
 * @member {Object} customData
 */
Transaction.prototype['customData'] = undefined;

/**
 * The date (in millis) of when this transaction occurred
 * @member {Number} date
 */
Transaction.prototype['date'] = undefined;

/**
 * The total amount paid to the developer in cents
 * @member {Number} developerAmount
 */
Transaction.prototype['developerAmount'] = undefined;

/**
 * The id of the developer involved with this transaction
 * @member {String} developerId
 */
Transaction.prototype['developerId'] = undefined;

/**
 * The total amount paid to payment processing fees in cents
 * @member {Number} feeAmount
 */
Transaction.prototype['feeAmount'] = undefined;

/**
 * The total amount paid to the marketplace owner in cents
 * @member {Number} marketplaceAmount
 */
Transaction.prototype['marketplaceAmount'] = undefined;

/**
 * The id for the ownership associated with this transaction
 * @member {String} ownershipId
 */
Transaction.prototype['ownershipId'] = undefined;

/**
 * The id for this transaction
 * @member {String} transactionId
 */
Transaction.prototype['transactionId'] = undefined;

/**
 * The type for this transaction
 * @member {module:model/Transaction.TypeEnum} type
 */
Transaction.prototype['type'] = undefined;

/**
 * The id of the user making the transaction
 * @member {String} userId
 */
Transaction.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['TypeEnum'] = {

    /**
     * value: "payment"
     * @const
     */
    "payment": "payment",

    /**
     * value: "refund"
     * @const
     */
    "refund": "refund"
};



export default Transaction;

