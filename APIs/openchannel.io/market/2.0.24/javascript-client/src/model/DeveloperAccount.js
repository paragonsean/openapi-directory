/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeveloperAccount model module.
 * @module model/DeveloperAccount
 * @version 2.0.24
 */
class DeveloperAccount {
    /**
     * Constructs a new <code>DeveloperAccount</code>.
     * A Developer Account
     * @alias module:model/DeveloperAccount
     * @param developerAccountId {String} The id of this developer account
     * @param developerId {String} The id of the developer that this account belongs to
     */
    constructor(developerAccountId, developerId) { 
        
        DeveloperAccount.initialize(this, developerAccountId, developerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, developerAccountId, developerId) { 
        obj['developerAccountId'] = developerAccountId;
        obj['developerId'] = developerId;
    }

    /**
     * Constructs a <code>DeveloperAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeveloperAccount} obj Optional instance to populate.
     * @return {module:model/DeveloperAccount} The populated <code>DeveloperAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeveloperAccount();

            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], Object);
            }
            if (data.hasOwnProperty('developerAccountId')) {
                obj['developerAccountId'] = ApiClient.convertToType(data['developerAccountId'], 'String');
            }
            if (data.hasOwnProperty('developerId')) {
                obj['developerId'] = ApiClient.convertToType(data['developerId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeveloperAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeveloperAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeveloperAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['developerAccountId'] && !(typeof data['developerAccountId'] === 'string' || data['developerAccountId'] instanceof String)) {
            throw new Error("Expected the field `developerAccountId` to be a primitive type in the JSON string but got " + data['developerAccountId']);
        }
        // ensure the json data is a string
        if (data['developerId'] && !(typeof data['developerId'] === 'string' || data['developerId'] instanceof String)) {
            throw new Error("Expected the field `developerId` to be a primitive type in the JSON string but got " + data['developerId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

DeveloperAccount.RequiredProperties = ["developerAccountId", "developerId"];

/**
 * A custom JSON object that you can create and attach to this record
 * @member {Object} customData
 */
DeveloperAccount.prototype['customData'] = undefined;

/**
 * The id of this developer account
 * @member {String} developerAccountId
 */
DeveloperAccount.prototype['developerAccountId'] = undefined;

/**
 * The id of the developer that this account belongs to
 * @member {String} developerId
 */
DeveloperAccount.prototype['developerId'] = undefined;

/**
 * The contact email address
 * @member {String} email
 */
DeveloperAccount.prototype['email'] = undefined;

/**
 * The name for the account
 * @member {String} name
 */
DeveloperAccount.prototype['name'] = undefined;






export default DeveloperAccount;

