/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Developer model module.
 * @module model/Developer
 * @version 2.0.24
 */
class Developer {
    /**
     * Constructs a new <code>Developer</code>.
     * A Developer
     * @alias module:model/Developer
     * @param created {Number} The time (in millis) of when this developer was created
     * @param developerId {String} The id of this developer
     */
    constructor(created, developerId) { 
        
        Developer.initialize(this, created, developerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, created, developerId) { 
        obj['created'] = created;
        obj['developerId'] = developerId;
    }

    /**
     * Constructs a <code>Developer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Developer} obj Optional instance to populate.
     * @return {module:model/Developer} The populated <code>Developer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Developer();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], Object);
            }
            if (data.hasOwnProperty('developerId')) {
                obj['developerId'] = ApiClient.convertToType(data['developerId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Developer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Developer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Developer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['developerId'] && !(typeof data['developerId'] === 'string' || data['developerId'] instanceof String)) {
            throw new Error("Expected the field `developerId` to be a primitive type in the JSON string but got " + data['developerId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Developer.RequiredProperties = ["created", "developerId"];

/**
 * The time (in millis) of when this developer was created
 * @member {Number} created
 */
Developer.prototype['created'] = undefined;

/**
 * A custom JSON object that you can create and attach to this record
 * @member {Object} customData
 */
Developer.prototype['customData'] = undefined;

/**
 * The id of this developer
 * @member {String} developerId
 */
Developer.prototype['developerId'] = undefined;

/**
 * The developer's email
 * @member {String} email
 */
Developer.prototype['email'] = undefined;

/**
 * The developer's name
 * @member {String} name
 */
Developer.prototype['name'] = undefined;

/**
 * The type for this developer
 * @member {String} type
 */
Developer.prototype['type'] = undefined;






export default Developer;

