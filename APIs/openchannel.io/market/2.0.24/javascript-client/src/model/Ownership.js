/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Model from './Model';

/**
 * The Ownership model module.
 * @module model/Ownership
 * @version 2.0.24
 */
class Ownership {
    /**
     * Constructs a new <code>Ownership</code>.
     * 
     * @alias module:model/Ownership
     * @param appId {String} The id of the app that is owned
     * @param date {Number} The date (in millis) of when this app was owned
     * @param developerId {String} The id of the developer for this app
     * @param model {module:model/Model} 
     * @param ownershipId {String} The id of this ownership
     * @param ownershipStatus {module:model/Ownership.OwnershipStatusEnum} The current ownership status for this app
     * @param ownershipType {module:model/Ownership.OwnershipTypeEnum} The current ownership type for this app
     * @param userId {String} The id of the user that owns this app
     */
    constructor(appId, date, developerId, model, ownershipId, ownershipStatus, ownershipType, userId) { 
        
        Ownership.initialize(this, appId, date, developerId, model, ownershipId, ownershipStatus, ownershipType, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appId, date, developerId, model, ownershipId, ownershipStatus, ownershipType, userId) { 
        obj['appId'] = appId;
        obj['date'] = date;
        obj['developerId'] = developerId;
        obj['model'] = model;
        obj['ownershipId'] = ownershipId;
        obj['ownershipStatus'] = ownershipStatus;
        obj['ownershipType'] = ownershipType;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>Ownership</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Ownership} obj Optional instance to populate.
     * @return {module:model/Ownership} The populated <code>Ownership</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Ownership();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], Object);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Number');
            }
            if (data.hasOwnProperty('developerId')) {
                obj['developerId'] = ApiClient.convertToType(data['developerId'], 'String');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = Model.constructFromObject(data['model']);
            }
            if (data.hasOwnProperty('ownershipId')) {
                obj['ownershipId'] = ApiClient.convertToType(data['ownershipId'], 'String');
            }
            if (data.hasOwnProperty('ownershipStatus')) {
                obj['ownershipStatus'] = ApiClient.convertToType(data['ownershipStatus'], 'String');
            }
            if (data.hasOwnProperty('ownershipType')) {
                obj['ownershipType'] = ApiClient.convertToType(data['ownershipType'], 'String');
            }
            if (data.hasOwnProperty('uninstallDate')) {
                obj['uninstallDate'] = ApiClient.convertToType(data['uninstallDate'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Ownership</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Ownership</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Ownership.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['developerId'] && !(typeof data['developerId'] === 'string' || data['developerId'] instanceof String)) {
            throw new Error("Expected the field `developerId` to be a primitive type in the JSON string but got " + data['developerId']);
        }
        // validate the optional field `model`
        if (data['model']) { // data not null
          Model.validateJSON(data['model']);
        }
        // ensure the json data is a string
        if (data['ownershipId'] && !(typeof data['ownershipId'] === 'string' || data['ownershipId'] instanceof String)) {
            throw new Error("Expected the field `ownershipId` to be a primitive type in the JSON string but got " + data['ownershipId']);
        }
        // ensure the json data is a string
        if (data['ownershipStatus'] && !(typeof data['ownershipStatus'] === 'string' || data['ownershipStatus'] instanceof String)) {
            throw new Error("Expected the field `ownershipStatus` to be a primitive type in the JSON string but got " + data['ownershipStatus']);
        }
        // ensure the json data is a string
        if (data['ownershipType'] && !(typeof data['ownershipType'] === 'string' || data['ownershipType'] instanceof String)) {
            throw new Error("Expected the field `ownershipType` to be a primitive type in the JSON string but got " + data['ownershipType']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}

Ownership.RequiredProperties = ["appId", "date", "developerId", "model", "ownershipId", "ownershipStatus", "ownershipType", "userId"];

/**
 * The id of the app that is owned
 * @member {String} appId
 */
Ownership.prototype['appId'] = undefined;

/**
 * A custom JSON object that you can create and attach to this record
 * @member {Object} customData
 */
Ownership.prototype['customData'] = undefined;

/**
 * The date (in millis) of when this app was owned
 * @member {Number} date
 */
Ownership.prototype['date'] = undefined;

/**
 * The id of the developer for this app
 * @member {String} developerId
 */
Ownership.prototype['developerId'] = undefined;

/**
 * The date (in millis) of when this app ownership expires
 * @member {Number} expires
 */
Ownership.prototype['expires'] = undefined;

/**
 * @member {module:model/Model} model
 */
Ownership.prototype['model'] = undefined;

/**
 * The id of this ownership
 * @member {String} ownershipId
 */
Ownership.prototype['ownershipId'] = undefined;

/**
 * The current ownership status for this app
 * @member {module:model/Ownership.OwnershipStatusEnum} ownershipStatus
 */
Ownership.prototype['ownershipStatus'] = undefined;

/**
 * The current ownership type for this app
 * @member {module:model/Ownership.OwnershipTypeEnum} ownershipType
 */
Ownership.prototype['ownershipType'] = undefined;

/**
 * The date (in millis) of when this app was uninstalled
 * @member {Number} uninstallDate
 */
Ownership.prototype['uninstallDate'] = undefined;

/**
 * The id of the user that owns this app
 * @member {String} userId
 */
Ownership.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>ownershipStatus</code> property.
 * @enum {String}
 * @readonly
 */
Ownership['OwnershipStatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "uninstalled"
     * @const
     */
    "uninstalled": "uninstalled",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled"
};


/**
 * Allowed values for the <code>ownershipType</code> property.
 * @enum {String}
 * @readonly
 */
Ownership['OwnershipTypeEnum'] = {

    /**
     * value: "full"
     * @const
     */
    "full": "full",

    /**
     * value: "subscription"
     * @const
     */
    "subscription": "subscription",

    /**
     * value: "trial"
     * @const
     */
    "trial": "trial"
};



export default Ownership;

