/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';
import User from './User';
import UserAccount from './UserAccount';

/**
 * The Review model module.
 * @module model/Review
 * @version 2.0.24
 */
class Review {
    /**
     * Constructs a new <code>Review</code>.
     * A Review
     * @alias module:model/Review
     * @param appId {String} The Id of the App that owns this review
     * @param customData {String} A custom JSON object that you can create and attach to this record
     * @param description {String} The review's description. Limited to 2000 characters.
     * @param headline {String} The review's headline. Limited to 50 characters.
     * @param rating {Number} The rating given within this review. The rating is represented as an integer between 100 and 500 (1 - 5 stars)
     * @param reportDate {Number} The date (in millis) this Review was posted
     * @param reviewId {String} The id for this review.
     * @param status {module:model/Status} 
     * @param userId {String} The id of the User that posted this review
     */
    constructor(appId, customData, description, headline, rating, reportDate, reviewId, status, userId) { 
        
        Review.initialize(this, appId, customData, description, headline, rating, reportDate, reviewId, status, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appId, customData, description, headline, rating, reportDate, reviewId, status, userId) { 
        obj['appId'] = appId;
        obj['customData'] = customData;
        obj['description'] = description;
        obj['headline'] = headline;
        obj['rating'] = rating;
        obj['reportDate'] = reportDate;
        obj['reviewId'] = reviewId;
        obj['status'] = status;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>Review</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Review} obj Optional instance to populate.
     * @return {module:model/Review} The populated <code>Review</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Review();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('headline')) {
                obj['headline'] = ApiClient.convertToType(data['headline'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('reportDate')) {
                obj['reportDate'] = ApiClient.convertToType(data['reportDate'], 'Number');
            }
            if (data.hasOwnProperty('reviewId')) {
                obj['reviewId'] = ApiClient.convertToType(data['reviewId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('userAccount')) {
                obj['userAccount'] = UserAccount.constructFromObject(data['userAccount']);
            }
            if (data.hasOwnProperty('userAccountId')) {
                obj['userAccountId'] = ApiClient.convertToType(data['userAccountId'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Review</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Review</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Review.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['customData'] && !(typeof data['customData'] === 'string' || data['customData'] instanceof String)) {
            throw new Error("Expected the field `customData` to be a primitive type in the JSON string but got " + data['customData']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['headline'] && !(typeof data['headline'] === 'string' || data['headline'] instanceof String)) {
            throw new Error("Expected the field `headline` to be a primitive type in the JSON string but got " + data['headline']);
        }
        // ensure the json data is a string
        if (data['reviewId'] && !(typeof data['reviewId'] === 'string' || data['reviewId'] instanceof String)) {
            throw new Error("Expected the field `reviewId` to be a primitive type in the JSON string but got " + data['reviewId']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }
        // validate the optional field `userAccount`
        if (data['userAccount']) { // data not null
          UserAccount.validateJSON(data['userAccount']);
        }
        // ensure the json data is a string
        if (data['userAccountId'] && !(typeof data['userAccountId'] === 'string' || data['userAccountId'] instanceof String)) {
            throw new Error("Expected the field `userAccountId` to be a primitive type in the JSON string but got " + data['userAccountId']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}

Review.RequiredProperties = ["appId", "customData", "description", "headline", "rating", "reportDate", "reviewId", "status", "userId"];

/**
 * The Id of the App that owns this review
 * @member {String} appId
 */
Review.prototype['appId'] = undefined;

/**
 * A custom JSON object that you can create and attach to this record
 * @member {String} customData
 */
Review.prototype['customData'] = undefined;

/**
 * The review's description. Limited to 2000 characters.
 * @member {String} description
 */
Review.prototype['description'] = undefined;

/**
 * The review's headline. Limited to 50 characters.
 * @member {String} headline
 */
Review.prototype['headline'] = undefined;

/**
 * The rating given within this review. The rating is represented as an integer between 100 and 500 (1 - 5 stars)
 * @member {Number} rating
 */
Review.prototype['rating'] = undefined;

/**
 * The date (in millis) this Review was posted
 * @member {Number} reportDate
 */
Review.prototype['reportDate'] = undefined;

/**
 * The id for this review.
 * @member {String} reviewId
 */
Review.prototype['reviewId'] = undefined;

/**
 * @member {module:model/Status} status
 */
Review.prototype['status'] = undefined;

/**
 * The type for this review
 * @member {String} type
 */
Review.prototype['type'] = undefined;

/**
 * @member {module:model/User} user
 */
Review.prototype['user'] = undefined;

/**
 * @member {module:model/UserAccount} userAccount
 */
Review.prototype['userAccount'] = undefined;

/**
 * The id of the user account that posted this review
 * @member {String} userAccountId
 */
Review.prototype['userAccountId'] = undefined;

/**
 * The id of the User that posted this review
 * @member {String} userId
 */
Review.prototype['userId'] = undefined;






export default Review;

