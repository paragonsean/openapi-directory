/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeveloperToken model module.
 * @module model/DeveloperToken
 * @version 2.0.24
 */
class DeveloperToken {
    /**
     * Constructs a new <code>DeveloperToken</code>.
     * 
     * @alias module:model/DeveloperToken
     * @param developerId {String} The id of the developer connecting their Stripe account
     * @param expires {Number} The time (in milliseconds) when this URL expires
     * @param targetUrl {String} The URL that this developer can use to connect their Stripe account
     */
    constructor(developerId, expires, targetUrl) { 
        
        DeveloperToken.initialize(this, developerId, expires, targetUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, developerId, expires, targetUrl) { 
        obj['developerId'] = developerId;
        obj['expires'] = expires;
        obj['targetUrl'] = targetUrl;
    }

    /**
     * Constructs a <code>DeveloperToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeveloperToken} obj Optional instance to populate.
     * @return {module:model/DeveloperToken} The populated <code>DeveloperToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeveloperToken();

            if (data.hasOwnProperty('developerId')) {
                obj['developerId'] = ApiClient.convertToType(data['developerId'], 'String');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'Number');
            }
            if (data.hasOwnProperty('targetUrl')) {
                obj['targetUrl'] = ApiClient.convertToType(data['targetUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeveloperToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeveloperToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeveloperToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['developerId'] && !(typeof data['developerId'] === 'string' || data['developerId'] instanceof String)) {
            throw new Error("Expected the field `developerId` to be a primitive type in the JSON string but got " + data['developerId']);
        }
        // ensure the json data is a string
        if (data['targetUrl'] && !(typeof data['targetUrl'] === 'string' || data['targetUrl'] instanceof String)) {
            throw new Error("Expected the field `targetUrl` to be a primitive type in the JSON string but got " + data['targetUrl']);
        }

        return true;
    }


}

DeveloperToken.RequiredProperties = ["developerId", "expires", "targetUrl"];

/**
 * The id of the developer connecting their Stripe account
 * @member {String} developerId
 */
DeveloperToken.prototype['developerId'] = undefined;

/**
 * The time (in milliseconds) when this URL expires
 * @member {Number} expires
 */
DeveloperToken.prototype['expires'] = undefined;

/**
 * The URL that this developer can use to connect their Stripe account
 * @member {String} targetUrl
 */
DeveloperToken.prototype['targetUrl'] = undefined;






export default DeveloperToken;

