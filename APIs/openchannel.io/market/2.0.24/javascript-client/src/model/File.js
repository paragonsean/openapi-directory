/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Hash from './Hash';
import VirusScan from './VirusScan';

/**
 * The File model module.
 * @module model/File
 * @version 2.0.24
 */
class File {
    /**
     * Constructs a new <code>File</code>.
     * The file ids of the uploaded file
     * @alias module:model/File
     * @param fileId {String} The id of the uploaded file
     * @param name {String} The name of the uploaded file
     * @param size {Number} The number of bytes in the uploaded file
     * @param uploadDate {Number} The time in milliseconds when the file was uploaded
     */
    constructor(fileId, name, size, uploadDate) { 
        
        File.initialize(this, fileId, name, size, uploadDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileId, name, size, uploadDate) { 
        obj['fileId'] = fileId;
        obj['name'] = name;
        obj['size'] = size;
        obj['uploadDate'] = uploadDate;
    }

    /**
     * Constructs a <code>File</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/File} obj Optional instance to populate.
     * @return {module:model/File} The populated <code>File</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new File();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('fileId')) {
                obj['fileId'] = ApiClient.convertToType(data['fileId'], 'String');
            }
            if (data.hasOwnProperty('fileUrl')) {
                obj['fileUrl'] = ApiClient.convertToType(data['fileUrl'], 'String');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = Hash.constructFromObject(data['hash']);
            }
            if (data.hasOwnProperty('mimeCheck')) {
                obj['mimeCheck'] = ApiClient.convertToType(data['mimeCheck'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('uploadDate')) {
                obj['uploadDate'] = ApiClient.convertToType(data['uploadDate'], 'Number');
            }
            if (data.hasOwnProperty('virusScan')) {
                obj['virusScan'] = VirusScan.constructFromObject(data['virusScan']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>File</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>File</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of File.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['fileId'] && !(typeof data['fileId'] === 'string' || data['fileId'] instanceof String)) {
            throw new Error("Expected the field `fileId` to be a primitive type in the JSON string but got " + data['fileId']);
        }
        // ensure the json data is a string
        if (data['fileUrl'] && !(typeof data['fileUrl'] === 'string' || data['fileUrl'] instanceof String)) {
            throw new Error("Expected the field `fileUrl` to be a primitive type in the JSON string but got " + data['fileUrl']);
        }
        // validate the optional field `hash`
        if (data['hash']) { // data not null
          Hash.validateJSON(data['hash']);
        }
        // ensure the json data is a string
        if (data['mimeCheck'] && !(typeof data['mimeCheck'] === 'string' || data['mimeCheck'] instanceof String)) {
            throw new Error("Expected the field `mimeCheck` to be a primitive type in the JSON string but got " + data['mimeCheck']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `virusScan`
        if (data['virusScan']) { // data not null
          VirusScan.validateJSON(data['virusScan']);
        }

        return true;
    }


}

File.RequiredProperties = ["fileId", "name", "size", "uploadDate"];

/**
 * The internet media type of the file
 * @member {String} contentType
 */
File.prototype['contentType'] = undefined;

/**
 * The id of the uploaded file
 * @member {String} fileId
 */
File.prototype['fileId'] = undefined;

/**
 * The path where the file can be located.
 * @member {String} fileUrl
 */
File.prototype['fileUrl'] = undefined;

/**
 * @member {module:model/Hash} hash
 */
File.prototype['hash'] = undefined;

/**
 * The mime type validation check to see if the extension of this file matches it's content. Can be PASSED or FAILED
 * @member {module:model/File.MimeCheckEnum} mimeCheck
 */
File.prototype['mimeCheck'] = undefined;

/**
 * The name of the uploaded file
 * @member {String} name
 */
File.prototype['name'] = undefined;

/**
 * The number of bytes in the uploaded file
 * @member {Number} size
 */
File.prototype['size'] = undefined;

/**
 * The time in milliseconds when the file was uploaded
 * @member {Number} uploadDate
 */
File.prototype['uploadDate'] = undefined;

/**
 * @member {module:model/VirusScan} virusScan
 */
File.prototype['virusScan'] = undefined;





/**
 * Allowed values for the <code>mimeCheck</code> property.
 * @enum {String}
 * @readonly
 */
File['MimeCheckEnum'] = {

    /**
     * value: "PASSED"
     * @const
     */
    "PASSED": "PASSED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default File;

