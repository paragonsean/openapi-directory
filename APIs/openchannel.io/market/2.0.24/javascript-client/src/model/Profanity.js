/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Profanity model module.
 * @module model/Profanity
 * @version 2.0.24
 */
class Profanity {
    /**
     * Constructs a new <code>Profanity</code>.
     * Profanity found in this review
     * @alias module:model/Profanity
     * @param end {Number} The ending location of the profanity
     * @param start {Number} The starting location of the profanity
     * @param word {String} The profane word
     */
    constructor(end, start, word) { 
        
        Profanity.initialize(this, end, start, word);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, end, start, word) { 
        obj['end'] = end;
        obj['start'] = start;
        obj['word'] = word;
    }

    /**
     * Constructs a <code>Profanity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Profanity} obj Optional instance to populate.
     * @return {module:model/Profanity} The populated <code>Profanity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Profanity();

            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('word')) {
                obj['word'] = ApiClient.convertToType(data['word'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Profanity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Profanity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Profanity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['word'] && !(typeof data['word'] === 'string' || data['word'] instanceof String)) {
            throw new Error("Expected the field `word` to be a primitive type in the JSON string but got " + data['word']);
        }

        return true;
    }


}

Profanity.RequiredProperties = ["end", "start", "word"];

/**
 * The ending location of the profanity
 * @member {Number} end
 */
Profanity.prototype['end'] = undefined;

/**
 * The starting location of the profanity
 * @member {Number} start
 */
Profanity.prototype['start'] = undefined;

/**
 * The profane word
 * @member {String} word
 */
Profanity.prototype['word'] = undefined;






export default Profanity;

