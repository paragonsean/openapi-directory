/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FoundVirus from './FoundVirus';

/**
 * The VirusScan model module.
 * @module model/VirusScan
 * @version 2.0.24
 */
class VirusScan {
    /**
     * Constructs a new <code>VirusScan</code>.
     * The virus scan results for this file
     * @alias module:model/VirusScan
     * @param status {String} The status of this scan. Can be NOT_SCANNED, CLEAN or DIRTY
     */
    constructor(status) { 
        
        VirusScan.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>VirusScan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirusScan} obj Optional instance to populate.
     * @return {module:model/VirusScan} The populated <code>VirusScan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirusScan();

            if (data.hasOwnProperty('finished')) {
                obj['finished'] = ApiClient.convertToType(data['finished'], 'Number');
            }
            if (data.hasOwnProperty('foundViruses')) {
                obj['foundViruses'] = ApiClient.convertToType(data['foundViruses'], [FoundVirus]);
            }
            if (data.hasOwnProperty('started')) {
                obj['started'] = ApiClient.convertToType(data['started'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirusScan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirusScan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirusScan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['foundViruses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['foundViruses'])) {
                throw new Error("Expected the field `foundViruses` to be an array in the JSON data but got " + data['foundViruses']);
            }
            // validate the optional field `foundViruses` (array)
            for (const item of data['foundViruses']) {
                FoundVirus.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

VirusScan.RequiredProperties = ["status"];

/**
 * The date (in milliseconds) when this file finished it's scan
 * @member {Number} finished
 */
VirusScan.prototype['finished'] = undefined;

/**
 * The list of viruses found in this file
 * @member {Array.<module:model/FoundVirus>} foundViruses
 */
VirusScan.prototype['foundViruses'] = undefined;

/**
 * The date (in milliseconds) when this file started it's scan
 * @member {Number} started
 */
VirusScan.prototype['started'] = undefined;

/**
 * The status of this scan. Can be NOT_SCANNED, CLEAN or DIRTY
 * @member {String} status
 */
VirusScan.prototype['status'] = undefined;






export default VirusScan;

