/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import App from './App';
import Developer from './Developer';
import Ownership from './Ownership';
import Review from './Review';
import Transaction from './Transaction';
import User from './User';

/**
 * The Event model module.
 * @module model/Event
 * @version 2.0.24
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * 
     * @alias module:model/Event
     * @param createdDate {Number} The date (in millis) of when this event occurred
     * @param eventId {String} The id of the event
     * @param eventType {module:model/Event.EventTypeEnum} The current event type
     * @param marketplaceId {String} The id of the marketplace that owns this event
     */
    constructor(createdDate, eventId, eventType, marketplaceId) { 
        
        Event.initialize(this, createdDate, eventId, eventType, marketplaceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdDate, eventId, eventType, marketplaceId) { 
        obj['createdDate'] = createdDate;
        obj['eventId'] = eventId;
        obj['eventType'] = eventType;
        obj['marketplaceId'] = marketplaceId;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('app')) {
                obj['app'] = App.constructFromObject(data['app']);
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('developer')) {
                obj['developer'] = Developer.constructFromObject(data['developer']);
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('ownership')) {
                obj['ownership'] = Ownership.constructFromObject(data['ownership']);
            }
            if (data.hasOwnProperty('review')) {
                obj['review'] = Review.constructFromObject(data['review']);
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = Transaction.constructFromObject(data['transaction']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Event.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `app`
        if (data['app']) { // data not null
          App.validateJSON(data['app']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `developer`
        if (data['developer']) { // data not null
          Developer.validateJSON(data['developer']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['marketplaceId'] && !(typeof data['marketplaceId'] === 'string' || data['marketplaceId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceId` to be a primitive type in the JSON string but got " + data['marketplaceId']);
        }
        // validate the optional field `ownership`
        if (data['ownership']) { // data not null
          Ownership.validateJSON(data['ownership']);
        }
        // validate the optional field `review`
        if (data['review']) { // data not null
          Review.validateJSON(data['review']);
        }
        // validate the optional field `transaction`
        if (data['transaction']) { // data not null
          Transaction.validateJSON(data['transaction']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Event.RequiredProperties = ["createdDate", "eventId", "eventType", "marketplaceId"];

/**
 * @member {module:model/App} app
 */
Event.prototype['app'] = undefined;

/**
 * The date (in millis) of when this event occurred
 * @member {Number} createdDate
 */
Event.prototype['createdDate'] = undefined;

/**
 * A description of the event
 * @member {String} description
 */
Event.prototype['description'] = undefined;

/**
 * @member {module:model/Developer} developer
 */
Event.prototype['developer'] = undefined;

/**
 * The id of the event
 * @member {String} eventId
 */
Event.prototype['eventId'] = undefined;

/**
 * The current event type
 * @member {module:model/Event.EventTypeEnum} eventType
 */
Event.prototype['eventType'] = undefined;

/**
 * The id of the marketplace that owns this event
 * @member {String} marketplaceId
 */
Event.prototype['marketplaceId'] = undefined;

/**
 * @member {module:model/Ownership} ownership
 */
Event.prototype['ownership'] = undefined;

/**
 * @member {module:model/Review} review
 */
Event.prototype['review'] = undefined;

/**
 * @member {module:model/Transaction} transaction
 */
Event.prototype['transaction'] = undefined;

/**
 * @member {module:model/User} user
 */
Event.prototype['user'] = undefined;





/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
Event['EventTypeEnum'] = {

    /**
     * value: "app.submitted"
     * @const
     */
    "app.submitted": "app.submitted",

    /**
     * value: "app.approved"
     * @const
     */
    "app.approved": "app.approved",

    /**
     * value: "app.suspended"
     * @const
     */
    "app.suspended": "app.suspended",

    /**
     * value: "app.unsuspended"
     * @const
     */
    "app.unsuspended": "app.unsuspended",

    /**
     * value: "app.rejected"
     * @const
     */
    "app.rejected": "app.rejected",

    /**
     * value: "app.inReview"
     * @const
     */
    "app.inReview": "app.inReview",

    /**
     * value: "app.installed"
     * @const
     */
    "app.installed": "app.installed",

    /**
     * value: "app.uninstalled"
     * @const
     */
    "app.uninstalled": "app.uninstalled",

    /**
     * value: "review.created"
     * @const
     */
    "review.created": "review.created",

    /**
     * value: "review.updated"
     * @const
     */
    "review.updated": "review.updated",

    /**
     * value: "review.approved"
     * @const
     */
    "review.approved": "review.approved",

    /**
     * value: "review.spam"
     * @const
     */
    "review.spam": "review.spam",

    /**
     * value: "review.removed"
     * @const
     */
    "review.removed": "review.removed",

    /**
     * value: "user.created"
     * @const
     */
    "user.created": "user.created",

    /**
     * value: "user.updated"
     * @const
     */
    "user.updated": "user.updated",

    /**
     * value: "user.removed"
     * @const
     */
    "user.removed": "user.removed",

    /**
     * value: "user.invalidPaymentDetails"
     * @const
     */
    "user.invalidPaymentDetails": "user.invalidPaymentDetails",

    /**
     * value: "user.paymentDetailsRequired"
     * @const
     */
    "user.paymentDetailsRequired": "user.paymentDetailsRequired",

    /**
     * value: "developer.created"
     * @const
     */
    "developer.created": "developer.created",

    /**
     * value: "developer.updated"
     * @const
     */
    "developer.updated": "developer.updated",

    /**
     * value: "developer.removed"
     * @const
     */
    "developer.removed": "developer.removed",

    /**
     * value: "developer.paymentDetailsRequired"
     * @const
     */
    "developer.paymentDetailsRequired": "developer.paymentDetailsRequired",

    /**
     * value: "permission.added"
     * @const
     */
    "permission.added": "permission.added",

    /**
     * value: "permission.removed"
     * @const
     */
    "permission.removed": "permission.removed",

    /**
     * value: "payment.complete"
     * @const
     */
    "payment.complete": "payment.complete",

    /**
     * value: "payment.refunded"
     * @const
     */
    "payment.refunded": "payment.refunded",

    /**
     * value: "payment.required"
     * @const
     */
    "payment.required": "payment.required",

    /**
     * value: "ownership.expired"
     * @const
     */
    "ownership.expired": "ownership.expired"
};



export default Event;

