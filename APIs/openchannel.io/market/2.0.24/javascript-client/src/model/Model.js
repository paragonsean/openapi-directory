/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Model model module.
 * @module model/Model
 * @version 2.0.24
 */
class Model {
    /**
     * Constructs a new <code>Model</code>.
     * The model that describes the cost and pricing for apps
     * @alias module:model/Model
     * @param commission {Number} The marketplace commission applied to this app's model multiplied by 100 to include two digits for fractions of a percent
     * @param currency {String} The ISO 4217 currency code for this price
     * @param feePayer {module:model/Model.FeePayerEnum} The payee that will be paying for any payment processing fees
     * @param license {module:model/Model.LicenseEnum} The license model type. Single allows a purchase to a single user or organization
     * @param price {Number} The price of this app in cents
     * @param trial {Number} The maximum number of free trial days available
     * @param type {module:model/Model.TypeEnum} The pricing model type. Free has no cost, single has a one time purchase cost and recurring requires a monthly subscription
     */
    constructor(commission, currency, feePayer, license, price, trial, type) { 
        
        Model.initialize(this, commission, currency, feePayer, license, price, trial, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, commission, currency, feePayer, license, price, trial, type) { 
        obj['commission'] = commission;
        obj['currency'] = currency;
        obj['feePayer'] = feePayer;
        obj['license'] = license;
        obj['price'] = price;
        obj['trial'] = trial;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Model</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Model} obj Optional instance to populate.
     * @return {module:model/Model} The populated <code>Model</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Model();

            if (data.hasOwnProperty('billingPeriod')) {
                obj['billingPeriod'] = ApiClient.convertToType(data['billingPeriod'], 'String');
            }
            if (data.hasOwnProperty('billingPeriodUnit')) {
                obj['billingPeriodUnit'] = ApiClient.convertToType(data['billingPeriodUnit'], 'Number');
            }
            if (data.hasOwnProperty('commission')) {
                obj['commission'] = ApiClient.convertToType(data['commission'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], Object);
            }
            if (data.hasOwnProperty('feePayer')) {
                obj['feePayer'] = ApiClient.convertToType(data['feePayer'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
            if (data.hasOwnProperty('trial')) {
                obj['trial'] = ApiClient.convertToType(data['trial'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Model</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Model</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Model.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['billingPeriod'] && !(typeof data['billingPeriod'] === 'string' || data['billingPeriod'] instanceof String)) {
            throw new Error("Expected the field `billingPeriod` to be a primitive type in the JSON string but got " + data['billingPeriod']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['feePayer'] && !(typeof data['feePayer'] === 'string' || data['feePayer'] instanceof String)) {
            throw new Error("Expected the field `feePayer` to be a primitive type in the JSON string but got " + data['feePayer']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Model.RequiredProperties = ["commission", "currency", "feePayer", "license", "price", "trial", "type"];

/**
 * The billingPeriod along with the billingPeriodUnit make up the time between billing cycles
 * @member {module:model/Model.BillingPeriodEnum} billingPeriod
 */
Model.prototype['billingPeriod'] = undefined;

/**
 * The billingPeriod along with the billingPeriodUnit make up the time between billing cycles
 * @member {Number} billingPeriodUnit
 */
Model.prototype['billingPeriodUnit'] = undefined;

/**
 * The marketplace commission applied to this app's model multiplied by 100 to include two digits for fractions of a percent
 * @member {Number} commission
 */
Model.prototype['commission'] = undefined;

/**
 * The ISO 4217 currency code for this price
 * @member {String} currency
 */
Model.prototype['currency'] = undefined;

/**
 * A custom JSON object that you can create and attach to this record
 * @member {Object} customData
 */
Model.prototype['customData'] = undefined;

/**
 * The payee that will be paying for any payment processing fees
 * @member {module:model/Model.FeePayerEnum} feePayer
 */
Model.prototype['feePayer'] = undefined;

/**
 * The license model type. Single allows a purchase to a single user or organization
 * @member {module:model/Model.LicenseEnum} license
 */
Model.prototype['license'] = undefined;

/**
 * The id that uniquely identifies this model
 * @member {String} modelId
 */
Model.prototype['modelId'] = undefined;

/**
 * The price of this app in cents
 * @member {Number} price
 */
Model.prototype['price'] = undefined;

/**
 * The pricing model subtype
 * @member {module:model/Model.SubtypeEnum} subtype
 */
Model.prototype['subtype'] = undefined;

/**
 * The maximum number of free trial days available
 * @member {Number} trial
 */
Model.prototype['trial'] = undefined;

/**
 * The pricing model type. Free has no cost, single has a one time purchase cost and recurring requires a monthly subscription
 * @member {module:model/Model.TypeEnum} type
 */
Model.prototype['type'] = undefined;





/**
 * Allowed values for the <code>billingPeriod</code> property.
 * @enum {String}
 * @readonly
 */
Model['BillingPeriodEnum'] = {

    /**
     * value: "daily"
     * @const
     */
    "daily": "daily",

    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly",

    /**
     * value: "monthly"
     * @const
     */
    "monthly": "monthly",

    /**
     * value: "annually"
     * @const
     */
    "annually": "annually"
};


/**
 * Allowed values for the <code>feePayer</code> property.
 * @enum {String}
 * @readonly
 */
Model['FeePayerEnum'] = {

    /**
     * value: "developer"
     * @const
     */
    "developer": "developer",

    /**
     * value: "marketplace"
     * @const
     */
    "marketplace": "marketplace"
};


/**
 * Allowed values for the <code>license</code> property.
 * @enum {String}
 * @readonly
 */
Model['LicenseEnum'] = {

    /**
     * value: "single"
     * @const
     */
    "single": "single"
};


/**
 * Allowed values for the <code>subtype</code> property.
 * @enum {String}
 * @readonly
 */
Model['SubtypeEnum'] = {

    /**
     * value: "usage"
     * @const
     */
    "usage": "usage",

    /**
     * value: "seat"
     * @const
     */
    "seat": "seat"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Model['TypeEnum'] = {

    /**
     * value: "free"
     * @const
     */
    "free": "free",

    /**
     * value: "single"
     * @const
     */
    "single": "single",

    /**
     * value: "recurring"
     * @const
     */
    "recurring": "recurring"
};



export default Model;

