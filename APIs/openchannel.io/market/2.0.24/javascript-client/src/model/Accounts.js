/**
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';

/**
 * The Accounts model module.
 * @module model/Accounts
 * @version 2.0.24
 */
class Accounts {
    /**
     * Constructs a new <code>Accounts</code>.
     * A developer&#39;s connected Stripe accounts
     * @alias module:model/Accounts
     * @param accounts {Array.<module:model/Account>} An array of connected Stripe accounts
     * @param developerId {String} The id of the developer
     */
    constructor(accounts, developerId) { 
        
        Accounts.initialize(this, accounts, developerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accounts, developerId) { 
        obj['accounts'] = accounts;
        obj['developerId'] = developerId;
    }

    /**
     * Constructs a <code>Accounts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Accounts} obj Optional instance to populate.
     * @return {module:model/Accounts} The populated <code>Accounts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Accounts();

            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], [Account]);
            }
            if (data.hasOwnProperty('developerId')) {
                obj['developerId'] = ApiClient.convertToType(data['developerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Accounts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Accounts</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Accounts.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['accounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accounts'])) {
                throw new Error("Expected the field `accounts` to be an array in the JSON data but got " + data['accounts']);
            }
            // validate the optional field `accounts` (array)
            for (const item of data['accounts']) {
                Account.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['developerId'] && !(typeof data['developerId'] === 'string' || data['developerId'] instanceof String)) {
            throw new Error("Expected the field `developerId` to be a primitive type in the JSON string but got " + data['developerId']);
        }

        return true;
    }


}

Accounts.RequiredProperties = ["accounts", "developerId"];

/**
 * An array of connected Stripe accounts
 * @member {Array.<module:model/Account>} accounts
 */
Accounts.prototype['accounts'] = undefined;

/**
 * The id of the developer
 * @member {String} developerId
 */
Accounts.prototype['developerId'] = undefined;






export default Accounts;

