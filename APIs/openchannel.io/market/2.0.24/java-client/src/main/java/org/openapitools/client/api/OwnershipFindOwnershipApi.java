/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Ownership;
import org.openapitools.client.model.OwnershipPages;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OwnershipFindOwnershipApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OwnershipFindOwnershipApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OwnershipFindOwnershipApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ownershipGet
     * @param query A query document. Example: {&#39;userId&#39;:&#39;12&#39;} matches all the ownership records that have the userId &#39;12&#39;. (optional)
     * @param sort A sort document. Example: {&#39;date&#39;:1} sorts the results by date in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipGetCall(String query, String sort, Integer pageNumber, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ownership";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ownershipGetValidateBeforeCall(String query, String sort, Integer pageNumber, Integer limit, final ApiCallback _callback) throws ApiException {
        return ownershipGetCall(query, sort, pageNumber, limit, _callback);

    }

    /**
     * Returns a paginated list of app licenses
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param query A query document. Example: {&#39;userId&#39;:&#39;12&#39;} matches all the ownership records that have the userId &#39;12&#39;. (optional)
     * @param sort A sort document. Example: {&#39;date&#39;:1} sorts the results by date in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @return OwnershipPages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public OwnershipPages ownershipGet(String query, String sort, Integer pageNumber, Integer limit) throws ApiException {
        ApiResponse<OwnershipPages> localVarResp = ownershipGetWithHttpInfo(query, sort, pageNumber, limit);
        return localVarResp.getData();
    }

    /**
     * Returns a paginated list of app licenses
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param query A query document. Example: {&#39;userId&#39;:&#39;12&#39;} matches all the ownership records that have the userId &#39;12&#39;. (optional)
     * @param sort A sort document. Example: {&#39;date&#39;:1} sorts the results by date in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @return ApiResponse&lt;OwnershipPages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OwnershipPages> ownershipGetWithHttpInfo(String query, String sort, Integer pageNumber, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = ownershipGetValidateBeforeCall(query, sort, pageNumber, limit, null);
        Type localVarReturnType = new TypeToken<OwnershipPages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a paginated list of app licenses (asynchronously)
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param query A query document. Example: {&#39;userId&#39;:&#39;12&#39;} matches all the ownership records that have the userId &#39;12&#39;. (optional)
     * @param sort A sort document. Example: {&#39;date&#39;:1} sorts the results by date in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipGetAsync(String query, String sort, Integer pageNumber, Integer limit, final ApiCallback<OwnershipPages> _callback) throws ApiException {

        okhttp3.Call localVarCall = ownershipGetValidateBeforeCall(query, sort, pageNumber, limit, _callback);
        Type localVarReturnType = new TypeToken<OwnershipPages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ownershipInstallPost
     * @param appId The id of the App being owned (required)
     * @param userId The id of the User requesting to own the App (required)
     * @param modelId The id of the model associated with this ownership request (optional)
     * @param model A custom model that will override the app&#39;s default model for this install (optional)
     * @param customData A custom JSON object to attach to this ownership record (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required - The App requires a user with pre-set payment details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - The User already owns this app (or is already participating in a trial) </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Payment Failed - The User&#39;s payment details are invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipInstallPostCall(String appId, String userId, String modelId, String model, String customData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ownership/install";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appId", appId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (modelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modelId", modelId));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ownershipInstallPostValidateBeforeCall(String appId, String userId, String modelId, String model, String customData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling ownershipInstallPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling ownershipInstallPost(Async)");
        }

        return ownershipInstallPostCall(appId, userId, modelId, model, customData, _callback);

    }

    /**
     * Aquires an app license for a user (installs app)
     *  - This method is called on behalf of a user - This method requires either a modelId from the app or a custom model - User data and statistics are recorded when this method is called 
     * @param appId The id of the App being owned (required)
     * @param userId The id of the User requesting to own the App (required)
     * @param modelId The id of the model associated with this ownership request (optional)
     * @param model A custom model that will override the app&#39;s default model for this install (optional)
     * @param customData A custom JSON object to attach to this ownership record (optional)
     * @return Ownership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required - The App requires a user with pre-set payment details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - The User already owns this app (or is already participating in a trial) </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Payment Failed - The User&#39;s payment details are invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Ownership ownershipInstallPost(String appId, String userId, String modelId, String model, String customData) throws ApiException {
        ApiResponse<Ownership> localVarResp = ownershipInstallPostWithHttpInfo(appId, userId, modelId, model, customData);
        return localVarResp.getData();
    }

    /**
     * Aquires an app license for a user (installs app)
     *  - This method is called on behalf of a user - This method requires either a modelId from the app or a custom model - User data and statistics are recorded when this method is called 
     * @param appId The id of the App being owned (required)
     * @param userId The id of the User requesting to own the App (required)
     * @param modelId The id of the model associated with this ownership request (optional)
     * @param model A custom model that will override the app&#39;s default model for this install (optional)
     * @param customData A custom JSON object to attach to this ownership record (optional)
     * @return ApiResponse&lt;Ownership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required - The App requires a user with pre-set payment details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - The User already owns this app (or is already participating in a trial) </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Payment Failed - The User&#39;s payment details are invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ownership> ownershipInstallPostWithHttpInfo(String appId, String userId, String modelId, String model, String customData) throws ApiException {
        okhttp3.Call localVarCall = ownershipInstallPostValidateBeforeCall(appId, userId, modelId, model, customData, null);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aquires an app license for a user (installs app) (asynchronously)
     *  - This method is called on behalf of a user - This method requires either a modelId from the app or a custom model - User data and statistics are recorded when this method is called 
     * @param appId The id of the App being owned (required)
     * @param userId The id of the User requesting to own the App (required)
     * @param modelId The id of the model associated with this ownership request (optional)
     * @param model A custom model that will override the app&#39;s default model for this install (optional)
     * @param customData A custom JSON object to attach to this ownership record (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required - The App requires a user with pre-set payment details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - The User already owns this app (or is already participating in a trial) </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Payment Failed - The User&#39;s payment details are invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipInstallPostAsync(String appId, String userId, String modelId, String model, String customData, final ApiCallback<Ownership> _callback) throws ApiException {

        okhttp3.Call localVarCall = ownershipInstallPostValidateBeforeCall(appId, userId, modelId, model, customData, _callback);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ownershipOwnershipIdGet
     * @param ownershipId The id belonging to the ownership record (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipOwnershipIdGetCall(String ownershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ownership/{ownershipId}"
            .replace("{" + "ownershipId" + "}", localVarApiClient.escapeString(ownershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ownershipOwnershipIdGetValidateBeforeCall(String ownershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownershipId' is set
        if (ownershipId == null) {
            throw new ApiException("Missing the required parameter 'ownershipId' when calling ownershipOwnershipIdGet(Async)");
        }

        return ownershipOwnershipIdGetCall(ownershipId, _callback);

    }

    /**
     * Returns an ownership record
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param ownershipId The id belonging to the ownership record (required)
     * @return Ownership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Ownership ownershipOwnershipIdGet(String ownershipId) throws ApiException {
        ApiResponse<Ownership> localVarResp = ownershipOwnershipIdGetWithHttpInfo(ownershipId);
        return localVarResp.getData();
    }

    /**
     * Returns an ownership record
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param ownershipId The id belonging to the ownership record (required)
     * @return ApiResponse&lt;Ownership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ownership> ownershipOwnershipIdGetWithHttpInfo(String ownershipId) throws ApiException {
        okhttp3.Call localVarCall = ownershipOwnershipIdGetValidateBeforeCall(ownershipId, null);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an ownership record (asynchronously)
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param ownershipId The id belonging to the ownership record (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipOwnershipIdGetAsync(String ownershipId, final ApiCallback<Ownership> _callback) throws ApiException {

        okhttp3.Call localVarCall = ownershipOwnershipIdGetValidateBeforeCall(ownershipId, _callback);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ownershipOwnershipIdPatch
     * @param ownershipId The id of the ownership to be updated (required)
     * @param customData Custom JSON object that will be attached to this ownership record (optional)
     * @param expires The date (in millis) of when this app ownership expires (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The ownership was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipOwnershipIdPatchCall(String ownershipId, String customData, Long expires, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ownership/{ownershipId}"
            .replace("{" + "ownershipId" + "}", localVarApiClient.escapeString(ownershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        if (expires != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expires", expires));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ownershipOwnershipIdPatchValidateBeforeCall(String ownershipId, String customData, Long expires, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownershipId' is set
        if (ownershipId == null) {
            throw new ApiException("Missing the required parameter 'ownershipId' when calling ownershipOwnershipIdPatch(Async)");
        }

        return ownershipOwnershipIdPatchCall(ownershipId, customData, expires, _callback);

    }

    /**
     * Updates ownership fields
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param ownershipId The id of the ownership to be updated (required)
     * @param customData Custom JSON object that will be attached to this ownership record (optional)
     * @param expires The date (in millis) of when this app ownership expires (optional)
     * @return Ownership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The ownership was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Ownership ownershipOwnershipIdPatch(String ownershipId, String customData, Long expires) throws ApiException {
        ApiResponse<Ownership> localVarResp = ownershipOwnershipIdPatchWithHttpInfo(ownershipId, customData, expires);
        return localVarResp.getData();
    }

    /**
     * Updates ownership fields
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param ownershipId The id of the ownership to be updated (required)
     * @param customData Custom JSON object that will be attached to this ownership record (optional)
     * @param expires The date (in millis) of when this app ownership expires (optional)
     * @return ApiResponse&lt;Ownership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The ownership was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ownership> ownershipOwnershipIdPatchWithHttpInfo(String ownershipId, String customData, Long expires) throws ApiException {
        okhttp3.Call localVarCall = ownershipOwnershipIdPatchValidateBeforeCall(ownershipId, customData, expires, null);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates ownership fields (asynchronously)
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param ownershipId The id of the ownership to be updated (required)
     * @param customData Custom JSON object that will be attached to this ownership record (optional)
     * @param expires The date (in millis) of when this app ownership expires (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The ownership was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipOwnershipIdPatchAsync(String ownershipId, String customData, Long expires, final ApiCallback<Ownership> _callback) throws ApiException {

        okhttp3.Call localVarCall = ownershipOwnershipIdPatchValidateBeforeCall(ownershipId, customData, expires, _callback);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ownershipOwnershipIdPost
     * @param ownershipId The id of the ownership to be updated (required)
     * @param customData Custom JSON object that will be attached to this ownership record (optional)
     * @param expires The date (in millis) of when this app ownership expires (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipOwnershipIdPostCall(String ownershipId, String customData, Long expires, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ownership/{ownershipId}"
            .replace("{" + "ownershipId" + "}", localVarApiClient.escapeString(ownershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        if (expires != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expires", expires));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ownershipOwnershipIdPostValidateBeforeCall(String ownershipId, String customData, Long expires, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownershipId' is set
        if (ownershipId == null) {
            throw new ApiException("Missing the required parameter 'ownershipId' when calling ownershipOwnershipIdPost(Async)");
        }

        return ownershipOwnershipIdPostCall(ownershipId, customData, expires, _callback);

    }

    /**
     * Updates an ownership record
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param ownershipId The id of the ownership to be updated (required)
     * @param customData Custom JSON object that will be attached to this ownership record (optional)
     * @param expires The date (in millis) of when this app ownership expires (optional)
     * @return Ownership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Ownership ownershipOwnershipIdPost(String ownershipId, String customData, Long expires) throws ApiException {
        ApiResponse<Ownership> localVarResp = ownershipOwnershipIdPostWithHttpInfo(ownershipId, customData, expires);
        return localVarResp.getData();
    }

    /**
     * Updates an ownership record
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param ownershipId The id of the ownership to be updated (required)
     * @param customData Custom JSON object that will be attached to this ownership record (optional)
     * @param expires The date (in millis) of when this app ownership expires (optional)
     * @return ApiResponse&lt;Ownership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ownership> ownershipOwnershipIdPostWithHttpInfo(String ownershipId, String customData, Long expires) throws ApiException {
        okhttp3.Call localVarCall = ownershipOwnershipIdPostValidateBeforeCall(ownershipId, customData, expires, null);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an ownership record (asynchronously)
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param ownershipId The id of the ownership to be updated (required)
     * @param customData Custom JSON object that will be attached to this ownership record (optional)
     * @param expires The date (in millis) of when this app ownership expires (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipOwnershipIdPostAsync(String ownershipId, String customData, Long expires, final ApiCallback<Ownership> _callback) throws ApiException {

        okhttp3.Call localVarCall = ownershipOwnershipIdPostValidateBeforeCall(ownershipId, customData, expires, _callback);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ownershipUninstallOwnershipIdPost
     * @param ownershipId The id of the ownership to be unintalled (required)
     * @param userId The id of the User requesting to uninstall the App (required)
     * @param cancelOwnership True if this app will require payment to be re-installed. Default is false (optional)
     * @param customData A custom JSON object to attach to this ownership record (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> App is not owned by this user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipUninstallOwnershipIdPostCall(String ownershipId, String userId, Boolean cancelOwnership, String customData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ownership/uninstall/{ownershipId}"
            .replace("{" + "ownershipId" + "}", localVarApiClient.escapeString(ownershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (cancelOwnership != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cancelOwnership", cancelOwnership));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ownershipUninstallOwnershipIdPostValidateBeforeCall(String ownershipId, String userId, Boolean cancelOwnership, String customData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownershipId' is set
        if (ownershipId == null) {
            throw new ApiException("Missing the required parameter 'ownershipId' when calling ownershipUninstallOwnershipIdPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling ownershipUninstallOwnershipIdPost(Async)");
        }

        return ownershipUninstallOwnershipIdPostCall(ownershipId, userId, cancelOwnership, customData, _callback);

    }

    /**
     * Uninstalls a license for a particular user and app (uninstalls app)
     *  - This method is called on behalf of a user - User data and statistics are recorded when this method is called 
     * @param ownershipId The id of the ownership to be unintalled (required)
     * @param userId The id of the User requesting to uninstall the App (required)
     * @param cancelOwnership True if this app will require payment to be re-installed. Default is false (optional)
     * @param customData A custom JSON object to attach to this ownership record (optional)
     * @return Ownership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> App is not owned by this user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Ownership ownershipUninstallOwnershipIdPost(String ownershipId, String userId, Boolean cancelOwnership, String customData) throws ApiException {
        ApiResponse<Ownership> localVarResp = ownershipUninstallOwnershipIdPostWithHttpInfo(ownershipId, userId, cancelOwnership, customData);
        return localVarResp.getData();
    }

    /**
     * Uninstalls a license for a particular user and app (uninstalls app)
     *  - This method is called on behalf of a user - User data and statistics are recorded when this method is called 
     * @param ownershipId The id of the ownership to be unintalled (required)
     * @param userId The id of the User requesting to uninstall the App (required)
     * @param cancelOwnership True if this app will require payment to be re-installed. Default is false (optional)
     * @param customData A custom JSON object to attach to this ownership record (optional)
     * @return ApiResponse&lt;Ownership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> App is not owned by this user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ownership> ownershipUninstallOwnershipIdPostWithHttpInfo(String ownershipId, String userId, Boolean cancelOwnership, String customData) throws ApiException {
        okhttp3.Call localVarCall = ownershipUninstallOwnershipIdPostValidateBeforeCall(ownershipId, userId, cancelOwnership, customData, null);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Uninstalls a license for a particular user and app (uninstalls app) (asynchronously)
     *  - This method is called on behalf of a user - User data and statistics are recorded when this method is called 
     * @param ownershipId The id of the ownership to be unintalled (required)
     * @param userId The id of the User requesting to uninstall the App (required)
     * @param cancelOwnership True if this app will require payment to be re-installed. Default is false (optional)
     * @param customData A custom JSON object to attach to this ownership record (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> App is not owned by this user </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ownershipUninstallOwnershipIdPostAsync(String ownershipId, String userId, Boolean cancelOwnership, String customData, final ApiCallback<Ownership> _callback) throws ApiException {

        okhttp3.Call localVarCall = ownershipUninstallOwnershipIdPostValidateBeforeCall(ownershipId, userId, cancelOwnership, customData, _callback);
        Type localVarReturnType = new TypeToken<Ownership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
