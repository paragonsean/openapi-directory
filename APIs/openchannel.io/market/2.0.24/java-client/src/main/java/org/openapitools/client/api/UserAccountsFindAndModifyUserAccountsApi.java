/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UserAccount;
import org.openapitools.client.model.UserAccountPages;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserAccountsFindAndModifyUserAccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserAccountsFindAndModifyUserAccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserAccountsFindAndModifyUserAccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userAccountsGet
     * @param query A query document. Example: {&#39;name&#39;:&#39;NASA&#39;} matches all the userAccounts that have the name &#39;NASA&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsGetCall(String query, String sort, Integer pageNumber, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAccountsGetValidateBeforeCall(String query, String sort, Integer pageNumber, Integer limit, final ApiCallback _callback) throws ApiException {
        return userAccountsGetCall(query, sort, pageNumber, limit, _callback);

    }

    /**
     * Returns a paginated list of userAccounts
     * - Results are paginated and the default is value is 1000 if no limit is provided 
     * @param query A query document. Example: {&#39;name&#39;:&#39;NASA&#39;} matches all the userAccounts that have the name &#39;NASA&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @return UserAccountPages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserAccountPages userAccountsGet(String query, String sort, Integer pageNumber, Integer limit) throws ApiException {
        ApiResponse<UserAccountPages> localVarResp = userAccountsGetWithHttpInfo(query, sort, pageNumber, limit);
        return localVarResp.getData();
    }

    /**
     * Returns a paginated list of userAccounts
     * - Results are paginated and the default is value is 1000 if no limit is provided 
     * @param query A query document. Example: {&#39;name&#39;:&#39;NASA&#39;} matches all the userAccounts that have the name &#39;NASA&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @return ApiResponse&lt;UserAccountPages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAccountPages> userAccountsGetWithHttpInfo(String query, String sort, Integer pageNumber, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userAccountsGetValidateBeforeCall(query, sort, pageNumber, limit, null);
        Type localVarReturnType = new TypeToken<UserAccountPages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a paginated list of userAccounts (asynchronously)
     * - Results are paginated and the default is value is 1000 if no limit is provided 
     * @param query A query document. Example: {&#39;name&#39;:&#39;NASA&#39;} matches all the userAccounts that have the name &#39;NASA&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsGetAsync(String query, String sort, Integer pageNumber, Integer limit, final ApiCallback<UserAccountPages> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAccountsGetValidateBeforeCall(query, sort, pageNumber, limit, _callback);
        Type localVarReturnType = new TypeToken<UserAccountPages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAccountsUserAccountIdDelete
     * @param userAccountId The id of the user account to be removed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsUserAccountIdDeleteCall(String userAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userAccounts/{userAccountId}"
            .replace("{" + "userAccountId" + "}", localVarApiClient.escapeString(userAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAccountsUserAccountIdDeleteValidateBeforeCall(String userAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAccountId' is set
        if (userAccountId == null) {
            throw new ApiException("Missing the required parameter 'userAccountId' when calling userAccountsUserAccountIdDelete(Async)");
        }

        return userAccountsUserAccountIdDeleteCall(userAccountId, _callback);

    }

    /**
     * Removes the user account
     * 
     * @param userAccountId The id of the user account to be removed (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void userAccountsUserAccountIdDelete(String userAccountId) throws ApiException {
        userAccountsUserAccountIdDeleteWithHttpInfo(userAccountId);
    }

    /**
     * Removes the user account
     * 
     * @param userAccountId The id of the user account to be removed (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userAccountsUserAccountIdDeleteWithHttpInfo(String userAccountId) throws ApiException {
        okhttp3.Call localVarCall = userAccountsUserAccountIdDeleteValidateBeforeCall(userAccountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the user account (asynchronously)
     * 
     * @param userAccountId The id of the user account to be removed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsUserAccountIdDeleteAsync(String userAccountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAccountsUserAccountIdDeleteValidateBeforeCall(userAccountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAccountsUserAccountIdGet
     * @param userAccountId The id of the user account to be located (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Developer account is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsUserAccountIdGetCall(String userAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userAccounts/{userAccountId}"
            .replace("{" + "userAccountId" + "}", localVarApiClient.escapeString(userAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAccountsUserAccountIdGetValidateBeforeCall(String userAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAccountId' is set
        if (userAccountId == null) {
            throw new ApiException("Missing the required parameter 'userAccountId' when calling userAccountsUserAccountIdGet(Async)");
        }

        return userAccountsUserAccountIdGetCall(userAccountId, _callback);

    }

    /**
     * Returns a single user account
     * 
     * @param userAccountId The id of the user account to be located (required)
     * @return UserAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Developer account is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserAccount userAccountsUserAccountIdGet(String userAccountId) throws ApiException {
        ApiResponse<UserAccount> localVarResp = userAccountsUserAccountIdGetWithHttpInfo(userAccountId);
        return localVarResp.getData();
    }

    /**
     * Returns a single user account
     * 
     * @param userAccountId The id of the user account to be located (required)
     * @return ApiResponse&lt;UserAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Developer account is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAccount> userAccountsUserAccountIdGetWithHttpInfo(String userAccountId) throws ApiException {
        okhttp3.Call localVarCall = userAccountsUserAccountIdGetValidateBeforeCall(userAccountId, null);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single user account (asynchronously)
     * 
     * @param userAccountId The id of the user account to be located (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Developer account is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsUserAccountIdGetAsync(String userAccountId, final ApiCallback<UserAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAccountsUserAccountIdGetValidateBeforeCall(userAccountId, _callback);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAccountsUserAccountIdPatch
     * @param userAccountId The id of the user account to be updated (required)
     * @param userId The Id of the user that this account belongs to (required)
     * @param email The contact email address (optional)
     * @param name The user account name (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User account is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsUserAccountIdPatchCall(String userAccountId, String userId, String email, String name, String customData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userAccounts/{userAccountId}"
            .replace("{" + "userAccountId" + "}", localVarApiClient.escapeString(userAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAccountsUserAccountIdPatchValidateBeforeCall(String userAccountId, String userId, String email, String name, String customData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAccountId' is set
        if (userAccountId == null) {
            throw new ApiException("Missing the required parameter 'userAccountId' when calling userAccountsUserAccountIdPatch(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userAccountsUserAccountIdPatch(Async)");
        }

        return userAccountsUserAccountIdPatchCall(userAccountId, userId, email, name, customData, _callback);

    }

    /**
     * Updates the user account fields
     * 
     * @param userAccountId The id of the user account to be updated (required)
     * @param userId The Id of the user that this account belongs to (required)
     * @param email The contact email address (optional)
     * @param name The user account name (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return UserAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User account is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserAccount userAccountsUserAccountIdPatch(String userAccountId, String userId, String email, String name, String customData) throws ApiException {
        ApiResponse<UserAccount> localVarResp = userAccountsUserAccountIdPatchWithHttpInfo(userAccountId, userId, email, name, customData);
        return localVarResp.getData();
    }

    /**
     * Updates the user account fields
     * 
     * @param userAccountId The id of the user account to be updated (required)
     * @param userId The Id of the user that this account belongs to (required)
     * @param email The contact email address (optional)
     * @param name The user account name (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return ApiResponse&lt;UserAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User account is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAccount> userAccountsUserAccountIdPatchWithHttpInfo(String userAccountId, String userId, String email, String name, String customData) throws ApiException {
        okhttp3.Call localVarCall = userAccountsUserAccountIdPatchValidateBeforeCall(userAccountId, userId, email, name, customData, null);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the user account fields (asynchronously)
     * 
     * @param userAccountId The id of the user account to be updated (required)
     * @param userId The Id of the user that this account belongs to (required)
     * @param email The contact email address (optional)
     * @param name The user account name (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User account is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsUserAccountIdPatchAsync(String userAccountId, String userId, String email, String name, String customData, final ApiCallback<UserAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAccountsUserAccountIdPatchValidateBeforeCall(userAccountId, userId, email, name, customData, _callback);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAccountsUserAccountIdPost
     * @param userAccountId The id of the user account to be updated (required)
     * @param userId The Id of the user that this account belongs to (required)
     * @param email The contact email address (optional)
     * @param name The user account name (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsUserAccountIdPostCall(String userAccountId, String userId, String email, String name, String customData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userAccounts/{userAccountId}"
            .replace("{" + "userAccountId" + "}", localVarApiClient.escapeString(userAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAccountsUserAccountIdPostValidateBeforeCall(String userAccountId, String userId, String email, String name, String customData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAccountId' is set
        if (userAccountId == null) {
            throw new ApiException("Missing the required parameter 'userAccountId' when calling userAccountsUserAccountIdPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userAccountsUserAccountIdPost(Async)");
        }

        return userAccountsUserAccountIdPostCall(userAccountId, userId, email, name, customData, _callback);

    }

    /**
     * Updates the user account or adds the user account if it doesn&#39;t exist
     * 
     * @param userAccountId The id of the user account to be updated (required)
     * @param userId The Id of the user that this account belongs to (required)
     * @param email The contact email address (optional)
     * @param name The user account name (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return UserAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserAccount userAccountsUserAccountIdPost(String userAccountId, String userId, String email, String name, String customData) throws ApiException {
        ApiResponse<UserAccount> localVarResp = userAccountsUserAccountIdPostWithHttpInfo(userAccountId, userId, email, name, customData);
        return localVarResp.getData();
    }

    /**
     * Updates the user account or adds the user account if it doesn&#39;t exist
     * 
     * @param userAccountId The id of the user account to be updated (required)
     * @param userId The Id of the user that this account belongs to (required)
     * @param email The contact email address (optional)
     * @param name The user account name (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return ApiResponse&lt;UserAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAccount> userAccountsUserAccountIdPostWithHttpInfo(String userAccountId, String userId, String email, String name, String customData) throws ApiException {
        okhttp3.Call localVarCall = userAccountsUserAccountIdPostValidateBeforeCall(userAccountId, userId, email, name, customData, null);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the user account or adds the user account if it doesn&#39;t exist (asynchronously)
     * 
     * @param userAccountId The id of the user account to be updated (required)
     * @param userId The Id of the user that this account belongs to (required)
     * @param email The contact email address (optional)
     * @param name The user account name (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAccountsUserAccountIdPostAsync(String userAccountId, String userId, String email, String name, String customData, final ApiCallback<UserAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAccountsUserAccountIdPostValidateBeforeCall(userAccountId, userId, email, name, customData, _callback);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
