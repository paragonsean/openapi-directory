/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.App;
import org.openapitools.client.model.AppPages;
import org.openapitools.client.model.AppVersion;
import org.openapitools.client.model.SearchPages;
import org.openapitools.client.model.VersionPages;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppsFindAndModifyAppsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppsFindAndModifyAppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppsFindAndModifyAppsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appsAppIdDelete
     * @param appId The id of the App to be removed (required)
     * @param developerId The unique id of the developer that is removing this app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdDeleteCall(String appId, String developerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppIdDeleteValidateBeforeCall(String appId, String developerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdDelete(Async)");
        }

        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling appsAppIdDelete(Async)");
        }

        return appsAppIdDeleteCall(appId, developerId, _callback);

    }

    /**
     * Removes app and all versions
     * - This method is called on behalf of a developer. 
     * @param appId The id of the App to be removed (required)
     * @param developerId The unique id of the developer that is removing this app (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public void appsAppIdDelete(String appId, String developerId) throws ApiException {
        appsAppIdDeleteWithHttpInfo(appId, developerId);
    }

    /**
     * Removes app and all versions
     * - This method is called on behalf of a developer. 
     * @param appId The id of the App to be removed (required)
     * @param developerId The unique id of the developer that is removing this app (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsAppIdDeleteWithHttpInfo(String appId, String developerId) throws ApiException {
        okhttp3.Call localVarCall = appsAppIdDeleteValidateBeforeCall(appId, developerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes app and all versions (asynchronously)
     * - This method is called on behalf of a developer. 
     * @param appId The id of the App to be removed (required)
     * @param developerId The unique id of the developer that is removing this app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdDeleteAsync(String appId, String developerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppIdDeleteValidateBeforeCall(appId, developerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAppIdGet
     * @param appId The id of the App to be located (required)
     * @param userId The unique id of the user that is requesting this resource (optional)
     * @param trackViews Whether this call should be tracked as a &#39;view&#39; for this app. Default is false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdGetCall(String appId, String userId, Boolean trackViews, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (trackViews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackViews", trackViews));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppIdGetValidateBeforeCall(String appId, String userId, Boolean trackViews, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdGet(Async)");
        }

        return appsAppIdGetCall(appId, userId, trackViews, _callback);

    }

    /**
     * Returns a single APPROVED or SUSPENDED app
     * - A &#39;view&#39; event is recorded when trackViews is set to true 
     * @param appId The id of the App to be located (required)
     * @param userId The unique id of the user that is requesting this resource (optional)
     * @param trackViews Whether this call should be tracked as a &#39;view&#39; for this app. Default is false. (optional)
     * @return App
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public App appsAppIdGet(String appId, String userId, Boolean trackViews) throws ApiException {
        ApiResponse<App> localVarResp = appsAppIdGetWithHttpInfo(appId, userId, trackViews);
        return localVarResp.getData();
    }

    /**
     * Returns a single APPROVED or SUSPENDED app
     * - A &#39;view&#39; event is recorded when trackViews is set to true 
     * @param appId The id of the App to be located (required)
     * @param userId The unique id of the user that is requesting this resource (optional)
     * @param trackViews Whether this call should be tracked as a &#39;view&#39; for this app. Default is false. (optional)
     * @return ApiResponse&lt;App&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<App> appsAppIdGetWithHttpInfo(String appId, String userId, Boolean trackViews) throws ApiException {
        okhttp3.Call localVarCall = appsAppIdGetValidateBeforeCall(appId, userId, trackViews, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single APPROVED or SUSPENDED app (asynchronously)
     * - A &#39;view&#39; event is recorded when trackViews is set to true 
     * @param appId The id of the App to be located (required)
     * @param userId The unique id of the user that is requesting this resource (optional)
     * @param trackViews Whether this call should be tracked as a &#39;view&#39; for this app. Default is false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdGetAsync(String appId, String userId, Boolean trackViews, final ApiCallback<App> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppIdGetValidateBeforeCall(appId, userId, trackViews, _callback);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAppIdLivePost
     * @param appId The id of the App to be changed (required)
     * @param developerId The unique id of the developer that is changing this AppVersion (required)
     * @param version The new version of the live App (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdLivePostCall(String appId, String developerId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/live"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppIdLivePostValidateBeforeCall(String appId, String developerId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdLivePost(Async)");
        }

        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling appsAppIdLivePost(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling appsAppIdLivePost(Async)");
        }

        return appsAppIdLivePostCall(appId, developerId, version, _callback);

    }

    /**
     * Change the live app to another, previously approved version
     * - This method is called on behalf of a developer. 
     * @param appId The id of the App to be changed (required)
     * @param developerId The unique id of the developer that is changing this AppVersion (required)
     * @param version The new version of the live App (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public void appsAppIdLivePost(String appId, String developerId, String version) throws ApiException {
        appsAppIdLivePostWithHttpInfo(appId, developerId, version);
    }

    /**
     * Change the live app to another, previously approved version
     * - This method is called on behalf of a developer. 
     * @param appId The id of the App to be changed (required)
     * @param developerId The unique id of the developer that is changing this AppVersion (required)
     * @param version The new version of the live App (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsAppIdLivePostWithHttpInfo(String appId, String developerId, String version) throws ApiException {
        okhttp3.Call localVarCall = appsAppIdLivePostValidateBeforeCall(appId, developerId, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change the live app to another, previously approved version (asynchronously)
     * - This method is called on behalf of a developer. 
     * @param appId The id of the App to be changed (required)
     * @param developerId The unique id of the developer that is changing this AppVersion (required)
     * @param version The new version of the live App (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdLivePostAsync(String appId, String developerId, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppIdLivePostValidateBeforeCall(appId, developerId, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAppIdPublishPost
     * @param appId The id of the app to be published (required)
     * @param developerId The unique id of the developer that is modifying this app (required)
     * @param version The version of the app to be published (required)
     * @param autoApprove If true, this AppVersion is automatically approved and becomes immediately available to end users (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted - Publishing succeeded but there are restrictions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - An app with that name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdPublishPostCall(String appId, String developerId, Integer version, Boolean autoApprove, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/publish"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (autoApprove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoApprove", autoApprove));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppIdPublishPostValidateBeforeCall(String appId, String developerId, Integer version, Boolean autoApprove, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdPublishPost(Async)");
        }

        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling appsAppIdPublishPost(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling appsAppIdPublishPost(Async)");
        }

        return appsAppIdPublishPostCall(appId, developerId, version, autoApprove, _callback);

    }

    /**
     * Publishes the current working version of the app to the marketplace
     * - This method is called on behalf of a developer.  - Only effects the current working version of the app. 
     * @param appId The id of the app to be published (required)
     * @param developerId The unique id of the developer that is modifying this app (required)
     * @param version The version of the app to be published (required)
     * @param autoApprove If true, this AppVersion is automatically approved and becomes immediately available to end users (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted - Publishing succeeded but there are restrictions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - An app with that name already exists </td><td>  -  </td></tr>
     </table>
     */
    public void appsAppIdPublishPost(String appId, String developerId, Integer version, Boolean autoApprove) throws ApiException {
        appsAppIdPublishPostWithHttpInfo(appId, developerId, version, autoApprove);
    }

    /**
     * Publishes the current working version of the app to the marketplace
     * - This method is called on behalf of a developer.  - Only effects the current working version of the app. 
     * @param appId The id of the app to be published (required)
     * @param developerId The unique id of the developer that is modifying this app (required)
     * @param version The version of the app to be published (required)
     * @param autoApprove If true, this AppVersion is automatically approved and becomes immediately available to end users (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted - Publishing succeeded but there are restrictions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - An app with that name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsAppIdPublishPostWithHttpInfo(String appId, String developerId, Integer version, Boolean autoApprove) throws ApiException {
        okhttp3.Call localVarCall = appsAppIdPublishPostValidateBeforeCall(appId, developerId, version, autoApprove, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publishes the current working version of the app to the marketplace (asynchronously)
     * - This method is called on behalf of a developer.  - Only effects the current working version of the app. 
     * @param appId The id of the app to be published (required)
     * @param developerId The unique id of the developer that is modifying this app (required)
     * @param version The version of the app to be published (required)
     * @param autoApprove If true, this AppVersion is automatically approved and becomes immediately available to end users (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted - Publishing succeeded but there are restrictions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App was not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - An app with that name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdPublishPostAsync(String appId, String developerId, Integer version, Boolean autoApprove, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppIdPublishPostValidateBeforeCall(appId, developerId, version, autoApprove, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAppIdVersionsVersionDelete
     * @param appId The id of the App to be removed (required)
     * @param version The version of the App to be removed (required)
     * @param developerId The unique id of the developer that is removing this app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionDeleteCall(String appId, String version, String developerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{version}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppIdVersionsVersionDeleteValidateBeforeCall(String appId, String version, String developerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionDelete(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling appsAppIdVersionsVersionDelete(Async)");
        }

        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling appsAppIdVersionsVersionDelete(Async)");
        }

        return appsAppIdVersionsVersionDeleteCall(appId, version, developerId, _callback);

    }

    /**
     * Removes AppVersion
     * - This method is called on behalf of a developer. 
     * @param appId The id of the App to be removed (required)
     * @param version The version of the App to be removed (required)
     * @param developerId The unique id of the developer that is removing this app (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public void appsAppIdVersionsVersionDelete(String appId, String version, String developerId) throws ApiException {
        appsAppIdVersionsVersionDeleteWithHttpInfo(appId, version, developerId);
    }

    /**
     * Removes AppVersion
     * - This method is called on behalf of a developer. 
     * @param appId The id of the App to be removed (required)
     * @param version The version of the App to be removed (required)
     * @param developerId The unique id of the developer that is removing this app (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsAppIdVersionsVersionDeleteWithHttpInfo(String appId, String version, String developerId) throws ApiException {
        okhttp3.Call localVarCall = appsAppIdVersionsVersionDeleteValidateBeforeCall(appId, version, developerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes AppVersion (asynchronously)
     * - This method is called on behalf of a developer. 
     * @param appId The id of the App to be removed (required)
     * @param version The version of the App to be removed (required)
     * @param developerId The unique id of the developer that is removing this app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionDeleteAsync(String appId, String version, String developerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppIdVersionsVersionDeleteValidateBeforeCall(appId, version, developerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAppIdVersionsVersionGet
     * @param appId The id of the App to be located (required)
     * @param version The version number of the app (required)
     * @param developerId The unique id of the developer that is requesting this resource (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App or version number was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionGetCall(String appId, Integer version, String developerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{version}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppIdVersionsVersionGetValidateBeforeCall(String appId, Integer version, String developerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionGet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling appsAppIdVersionsVersionGet(Async)");
        }

        return appsAppIdVersionsVersionGetCall(appId, version, developerId, _callback);

    }

    /**
     * Returns a single AppVersion
     * - Only returns AppVersions owned by this developer 
     * @param appId The id of the App to be located (required)
     * @param version The version number of the app (required)
     * @param developerId The unique id of the developer that is requesting this resource (optional)
     * @return AppVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App or version number was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppVersion appsAppIdVersionsVersionGet(String appId, Integer version, String developerId) throws ApiException {
        ApiResponse<AppVersion> localVarResp = appsAppIdVersionsVersionGetWithHttpInfo(appId, version, developerId);
        return localVarResp.getData();
    }

    /**
     * Returns a single AppVersion
     * - Only returns AppVersions owned by this developer 
     * @param appId The id of the App to be located (required)
     * @param version The version number of the app (required)
     * @param developerId The unique id of the developer that is requesting this resource (optional)
     * @return ApiResponse&lt;AppVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App or version number was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppVersion> appsAppIdVersionsVersionGetWithHttpInfo(String appId, Integer version, String developerId) throws ApiException {
        okhttp3.Call localVarCall = appsAppIdVersionsVersionGetValidateBeforeCall(appId, version, developerId, null);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single AppVersion (asynchronously)
     * - Only returns AppVersions owned by this developer 
     * @param appId The id of the App to be located (required)
     * @param version The version number of the app (required)
     * @param developerId The unique id of the developer that is requesting this resource (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App or version number was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionGetAsync(String appId, Integer version, String developerId, final ApiCallback<AppVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppIdVersionsVersionGetValidateBeforeCall(appId, version, developerId, _callback);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAppIdVersionsVersionPatch
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is updating this app (required)
     * @param name The name of the app (optional)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from purchasing or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or purchasing this app (optional)
     * @param allow JSON object to allow users to purchase or view this app. Example: {&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} allows only users from canada and mexico to purchase this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param approvalRequired False if updates should skip the approval process and be available immediately. Default is True (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionPatchCall(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{version}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (restrict != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restrict", restrict));
        }

        if (allow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow", allow));
        }

        if (access != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access", access));
        }

        if (approvalRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalRequired", approvalRequired));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppIdVersionsVersionPatchValidateBeforeCall(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionPatch(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling appsAppIdVersionsVersionPatch(Async)");
        }

        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling appsAppIdVersionsVersionPatch(Async)");
        }

        return appsAppIdVersionsVersionPatchCall(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired, _callback);

    }

    /**
     * Updates the app fields or creates a new version
     * - This method is called on behalf of a developer. - Price and is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly updated app - This endpoint updates only the fields provided in the request (relative update). In contrast, the POST version of this method replaces the entire object to match the request (absolute update).  
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is updating this app (required)
     * @param name The name of the app (optional)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from purchasing or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or purchasing this app (optional)
     * @param allow JSON object to allow users to purchase or view this app. Example: {&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} allows only users from canada and mexico to purchase this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param approvalRequired False if updates should skip the approval process and be available immediately. Default is True (optional)
     * @return AppVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppVersion appsAppIdVersionsVersionPatch(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired) throws ApiException {
        ApiResponse<AppVersion> localVarResp = appsAppIdVersionsVersionPatchWithHttpInfo(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired);
        return localVarResp.getData();
    }

    /**
     * Updates the app fields or creates a new version
     * - This method is called on behalf of a developer. - Price and is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly updated app - This endpoint updates only the fields provided in the request (relative update). In contrast, the POST version of this method replaces the entire object to match the request (absolute update).  
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is updating this app (required)
     * @param name The name of the app (optional)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from purchasing or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or purchasing this app (optional)
     * @param allow JSON object to allow users to purchase or view this app. Example: {&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} allows only users from canada and mexico to purchase this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param approvalRequired False if updates should skip the approval process and be available immediately. Default is True (optional)
     * @return ApiResponse&lt;AppVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppVersion> appsAppIdVersionsVersionPatchWithHttpInfo(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired) throws ApiException {
        okhttp3.Call localVarCall = appsAppIdVersionsVersionPatchValidateBeforeCall(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired, null);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the app fields or creates a new version (asynchronously)
     * - This method is called on behalf of a developer. - Price and is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly updated app - This endpoint updates only the fields provided in the request (relative update). In contrast, the POST version of this method replaces the entire object to match the request (absolute update).  
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is updating this app (required)
     * @param name The name of the app (optional)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from purchasing or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or purchasing this app (optional)
     * @param allow JSON object to allow users to purchase or view this app. Example: {&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} allows only users from canada and mexico to purchase this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param approvalRequired False if updates should skip the approval process and be available immediately. Default is True (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionPatchAsync(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired, final ApiCallback<AppVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppIdVersionsVersionPatchValidateBeforeCall(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired, _callback);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAppIdVersionsVersionPost
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is updating this app (required)
     * @param name The name of the app (optional)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from purchasing or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or purchasing this app (optional)
     * @param allow JSON object to allow users to purchase or view this app. Example: {&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} allows only users from canada and mexico to purchase this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param approvalRequired False if updates should skip the approval process and be available immediately. Default is True (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionPostCall(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{version}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (restrict != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restrict", restrict));
        }

        if (allow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow", allow));
        }

        if (access != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access", access));
        }

        if (approvalRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalRequired", approvalRequired));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppIdVersionsVersionPostValidateBeforeCall(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionPost(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling appsAppIdVersionsVersionPost(Async)");
        }

        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling appsAppIdVersionsVersionPost(Async)");
        }

        return appsAppIdVersionsVersionPostCall(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired, _callback);

    }

    /**
     * Updates the app or creates a new version
     * - This method is called on behalf of a developer. - Price and is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly updated app - This endpoint replaces the entire object to match the request (absolute update). In contrast, the PATCH version of this endpoint updates only the fields provided in the request (relative update). 
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is updating this app (required)
     * @param name The name of the app (optional)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from purchasing or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or purchasing this app (optional)
     * @param allow JSON object to allow users to purchase or view this app. Example: {&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} allows only users from canada and mexico to purchase this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param approvalRequired False if updates should skip the approval process and be available immediately. Default is True (optional)
     * @return AppVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppVersion appsAppIdVersionsVersionPost(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired) throws ApiException {
        ApiResponse<AppVersion> localVarResp = appsAppIdVersionsVersionPostWithHttpInfo(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired);
        return localVarResp.getData();
    }

    /**
     * Updates the app or creates a new version
     * - This method is called on behalf of a developer. - Price and is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly updated app - This endpoint replaces the entire object to match the request (absolute update). In contrast, the PATCH version of this endpoint updates only the fields provided in the request (relative update). 
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is updating this app (required)
     * @param name The name of the app (optional)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from purchasing or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or purchasing this app (optional)
     * @param allow JSON object to allow users to purchase or view this app. Example: {&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} allows only users from canada and mexico to purchase this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param approvalRequired False if updates should skip the approval process and be available immediately. Default is True (optional)
     * @return ApiResponse&lt;AppVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppVersion> appsAppIdVersionsVersionPostWithHttpInfo(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired) throws ApiException {
        okhttp3.Call localVarCall = appsAppIdVersionsVersionPostValidateBeforeCall(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired, null);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the app or creates a new version (asynchronously)
     * - This method is called on behalf of a developer. - Price and is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly updated app - This endpoint replaces the entire object to match the request (absolute update). In contrast, the PATCH version of this endpoint updates only the fields provided in the request (relative update). 
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is updating this app (required)
     * @param name The name of the app (optional)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from purchasing or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or purchasing this app (optional)
     * @param allow JSON object to allow users to purchase or view this app. Example: {&#39;purchase&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} allows only users from canada and mexico to purchase this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param approvalRequired False if updates should skip the approval process and be available immediately. Default is True (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionPostAsync(String appId, String version, String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, String approvalRequired, final ApiCallback<AppVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppIdVersionsVersionPostValidateBeforeCall(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired, _callback);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAppIdVersionsVersionStatusPost
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is modifying this app (optional)
     * @param status The new status for this app. Can be either &#39;inReview&#39;, &#39;approved&#39;, &#39;suspended&#39; or &#39;rejected&#39; (optional)
     * @param modifiedBy The role initiating this status change. Can be either &#39;developer&#39; or &#39;administrator&#39; (default) (optional, default to administrator)
     * @param reason The reason for this status change (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - The app&#39;s new status is not valid because of the app&#39;s current status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionStatusPostCall(String appId, Integer version, String developerId, String status, String modifiedBy, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{version}/status"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (modifiedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedBy", modifiedBy));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAppIdVersionsVersionStatusPostValidateBeforeCall(String appId, Integer version, String developerId, String status, String modifiedBy, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdVersionsVersionStatusPost(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling appsAppIdVersionsVersionStatusPost(Async)");
        }

        return appsAppIdVersionsVersionStatusPostCall(appId, version, developerId, status, modifiedBy, reason, _callback);

    }

    /**
     * Allows a developer or administrator to change the status of apps
     * Only certain status changes are allowed. For instance, a developer is only able to suspend and unsuspend their app (which must already be approved). See here for a state change diagram of allowed status changes for administrators: https://support.openchannel.io/documentation/api/#415-apps-status-change 
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is modifying this app (optional)
     * @param status The new status for this app. Can be either &#39;inReview&#39;, &#39;approved&#39;, &#39;suspended&#39; or &#39;rejected&#39; (optional)
     * @param modifiedBy The role initiating this status change. Can be either &#39;developer&#39; or &#39;administrator&#39; (default) (optional, default to administrator)
     * @param reason The reason for this status change (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - The app&#39;s new status is not valid because of the app&#39;s current status </td><td>  -  </td></tr>
     </table>
     */
    public void appsAppIdVersionsVersionStatusPost(String appId, Integer version, String developerId, String status, String modifiedBy, String reason) throws ApiException {
        appsAppIdVersionsVersionStatusPostWithHttpInfo(appId, version, developerId, status, modifiedBy, reason);
    }

    /**
     * Allows a developer or administrator to change the status of apps
     * Only certain status changes are allowed. For instance, a developer is only able to suspend and unsuspend their app (which must already be approved). See here for a state change diagram of allowed status changes for administrators: https://support.openchannel.io/documentation/api/#415-apps-status-change 
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is modifying this app (optional)
     * @param status The new status for this app. Can be either &#39;inReview&#39;, &#39;approved&#39;, &#39;suspended&#39; or &#39;rejected&#39; (optional)
     * @param modifiedBy The role initiating this status change. Can be either &#39;developer&#39; or &#39;administrator&#39; (default) (optional, default to administrator)
     * @param reason The reason for this status change (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - The app&#39;s new status is not valid because of the app&#39;s current status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsAppIdVersionsVersionStatusPostWithHttpInfo(String appId, Integer version, String developerId, String status, String modifiedBy, String reason) throws ApiException {
        okhttp3.Call localVarCall = appsAppIdVersionsVersionStatusPostValidateBeforeCall(appId, version, developerId, status, modifiedBy, reason, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Allows a developer or administrator to change the status of apps (asynchronously)
     * Only certain status changes are allowed. For instance, a developer is only able to suspend and unsuspend their app (which must already be approved). See here for a state change diagram of allowed status changes for administrators: https://support.openchannel.io/documentation/api/#415-apps-status-change 
     * @param appId The id of the App to be updated (required)
     * @param version The version of the App to be updated (required)
     * @param developerId The unique id of the developer that is modifying this app (optional)
     * @param status The new status for this app. Can be either &#39;inReview&#39;, &#39;approved&#39;, &#39;suspended&#39; or &#39;rejected&#39; (optional)
     * @param modifiedBy The role initiating this status change. Can be either &#39;developer&#39; or &#39;administrator&#39; (default) (optional, default to administrator)
     * @param reason The reason for this status change (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - App is not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - The app&#39;s new status is not valid because of the app&#39;s current status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAppIdVersionsVersionStatusPostAsync(String appId, Integer version, String developerId, String status, String modifiedBy, String reason, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAppIdVersionsVersionStatusPostValidateBeforeCall(appId, version, developerId, status, modifiedBy, reason, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsBySafeNameSafeNameGet
     * @param safeName The safeName of the App to be located (required)
     * @param userId The unique id of the user that is requesting this resource (optional)
     * @param trackViews Whether this call should be tracked as a &#39;view&#39; for this app. Default is false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBySafeNameSafeNameGetCall(String safeName, String userId, Boolean trackViews, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/bySafeName/{safeName}"
            .replace("{" + "safeName" + "}", localVarApiClient.escapeString(safeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (trackViews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackViews", trackViews));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsBySafeNameSafeNameGetValidateBeforeCall(String safeName, String userId, Boolean trackViews, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'safeName' is set
        if (safeName == null) {
            throw new ApiException("Missing the required parameter 'safeName' when calling appsBySafeNameSafeNameGet(Async)");
        }

        return appsBySafeNameSafeNameGetCall(safeName, userId, trackViews, _callback);

    }

    /**
     * Returns a single APPROVED or SUSPENDED app
     * - A &#39;view&#39; event is recorded when trackViews is set to true 
     * @param safeName The safeName of the App to be located (required)
     * @param userId The unique id of the user that is requesting this resource (optional)
     * @param trackViews Whether this call should be tracked as a &#39;view&#39; for this app. Default is false. (optional)
     * @return App
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public App appsBySafeNameSafeNameGet(String safeName, String userId, Boolean trackViews) throws ApiException {
        ApiResponse<App> localVarResp = appsBySafeNameSafeNameGetWithHttpInfo(safeName, userId, trackViews);
        return localVarResp.getData();
    }

    /**
     * Returns a single APPROVED or SUSPENDED app
     * - A &#39;view&#39; event is recorded when trackViews is set to true 
     * @param safeName The safeName of the App to be located (required)
     * @param userId The unique id of the user that is requesting this resource (optional)
     * @param trackViews Whether this call should be tracked as a &#39;view&#39; for this app. Default is false. (optional)
     * @return ApiResponse&lt;App&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<App> appsBySafeNameSafeNameGetWithHttpInfo(String safeName, String userId, Boolean trackViews) throws ApiException {
        okhttp3.Call localVarCall = appsBySafeNameSafeNameGetValidateBeforeCall(safeName, userId, trackViews, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single APPROVED or SUSPENDED app (asynchronously)
     * - A &#39;view&#39; event is recorded when trackViews is set to true 
     * @param safeName The safeName of the App to be located (required)
     * @param userId The unique id of the user that is requesting this resource (optional)
     * @param trackViews Whether this call should be tracked as a &#39;view&#39; for this app. Default is false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The App is either restricted or was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsBySafeNameSafeNameGetAsync(String safeName, String userId, Boolean trackViews, final ApiCallback<App> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsBySafeNameSafeNameGetValidateBeforeCall(safeName, userId, trackViews, _callback);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGet
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the apps that have the name &#39;MyApp&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param userId The unique id of the user requesting this resource (optional)
     * @param isOwner Whether this result should only contain apps that are owned by this user (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetCall(String query, String sort, Integer pageNumber, Integer limit, String userId, Boolean isOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (isOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isOwner", isOwner));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetValidateBeforeCall(String query, String sort, Integer pageNumber, Integer limit, String userId, Boolean isOwner, final ApiCallback _callback) throws ApiException {
        return appsGetCall(query, sort, pageNumber, limit, userId, isOwner, _callback);

    }

    /**
     * Returns a paginated list of APPROVED or SUSPENDED apps
     * - Results are paginated and the default is value is 1000 if no limit is provided - If no query is specified, returns all APPROVED or SUSPENDED apps within the marketplace 
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the apps that have the name &#39;MyApp&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param userId The unique id of the user requesting this resource (optional)
     * @param isOwner Whether this result should only contain apps that are owned by this user (optional)
     * @return AppPages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppPages appsGet(String query, String sort, Integer pageNumber, Integer limit, String userId, Boolean isOwner) throws ApiException {
        ApiResponse<AppPages> localVarResp = appsGetWithHttpInfo(query, sort, pageNumber, limit, userId, isOwner);
        return localVarResp.getData();
    }

    /**
     * Returns a paginated list of APPROVED or SUSPENDED apps
     * - Results are paginated and the default is value is 1000 if no limit is provided - If no query is specified, returns all APPROVED or SUSPENDED apps within the marketplace 
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the apps that have the name &#39;MyApp&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param userId The unique id of the user requesting this resource (optional)
     * @param isOwner Whether this result should only contain apps that are owned by this user (optional)
     * @return ApiResponse&lt;AppPages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPages> appsGetWithHttpInfo(String query, String sort, Integer pageNumber, Integer limit, String userId, Boolean isOwner) throws ApiException {
        okhttp3.Call localVarCall = appsGetValidateBeforeCall(query, sort, pageNumber, limit, userId, isOwner, null);
        Type localVarReturnType = new TypeToken<AppPages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a paginated list of APPROVED or SUSPENDED apps (asynchronously)
     * - Results are paginated and the default is value is 1000 if no limit is provided - If no query is specified, returns all APPROVED or SUSPENDED apps within the marketplace 
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the apps that have the name &#39;MyApp&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param userId The unique id of the user requesting this resource (optional)
     * @param isOwner Whether this result should only contain apps that are owned by this user (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetAsync(String query, String sort, Integer pageNumber, Integer limit, String userId, Boolean isOwner, final ApiCallback<AppPages> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetValidateBeforeCall(query, sort, pageNumber, limit, userId, isOwner, _callback);
        Type localVarReturnType = new TypeToken<AppPages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPost
     * @param developerId The unique id of the developer that is adding this app (required)
     * @param name The name of the app (required)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from owning or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;own&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or owning this app (optional)
     * @param allow JSON object to restrict users from owning or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;own&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or owning this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPostCall(String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (restrict != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restrict", restrict));
        }

        if (allow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allow", allow));
        }

        if (access != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access", access));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPostValidateBeforeCall(String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling appsPost(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appsPost(Async)");
        }

        return appsPostCall(developerId, name, type, model, customData, attributes, restrict, allow, access, _callback);

    }

    /**
     * Adds a new app for this developer
     * - This method is called on behalf of a developer. - Price is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly created app 
     * @param developerId The unique id of the developer that is adding this app (required)
     * @param name The name of the app (required)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from owning or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;own&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or owning this app (optional)
     * @param allow JSON object to restrict users from owning or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;own&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or owning this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @return AppVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AppVersion appsPost(String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access) throws ApiException {
        ApiResponse<AppVersion> localVarResp = appsPostWithHttpInfo(developerId, name, type, model, customData, attributes, restrict, allow, access);
        return localVarResp.getData();
    }

    /**
     * Adds a new app for this developer
     * - This method is called on behalf of a developer. - Price is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly created app 
     * @param developerId The unique id of the developer that is adding this app (required)
     * @param name The name of the app (required)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from owning or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;own&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or owning this app (optional)
     * @param allow JSON object to restrict users from owning or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;own&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or owning this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @return ApiResponse&lt;AppVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppVersion> appsPostWithHttpInfo(String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access) throws ApiException {
        okhttp3.Call localVarCall = appsPostValidateBeforeCall(developerId, name, type, model, customData, attributes, restrict, allow, access, null);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new app for this developer (asynchronously)
     * - This method is called on behalf of a developer. - Price is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly created app 
     * @param developerId The unique id of the developer that is adding this app (required)
     * @param name The name of the app (required)
     * @param type The type for this app (optional)
     * @param model A JSON object representing the pricing model type for this app (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param attributes A custom set of app attributes defined by the administrator and attached to this app (optional)
     * @param restrict JSON object to restrict users from owning or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;own&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or owning this app (optional)
     * @param allow JSON object to restrict users from owning or viewing this app. Example: {&#39;view&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]},&#39;own&#39;:{&#39;country&#39;:[&#39;Canada&#39;,&#39;Mexico&#39;]}} restricts users from canada and mexico from viewing or owning this app (optional)
     * @param access JSON array of data access requirements (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - An app with this name already exists </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPostAsync(String developerId, String name, String type, String model, String customData, String attributes, String restrict, String allow, String access, final ApiCallback<AppVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPostValidateBeforeCall(developerId, name, type, model, customData, attributes, restrict, allow, access, _callback);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsTextSearchGet
     * @param text The text to search for. (required)
     * @param fields A JSON array containing all the fields to be searched through. Example: [&#39;name&#39;, &#39;customData.description&#39;] (required)
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the documents that have the name &#39;MyApp&#39; (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param userId The unique id of the user requesting this resource (optional)
     * @param isOwned Whether this result should only contain apps that are owned by this user (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsTextSearchGetCall(String text, String fields, String query, Integer pageNumber, Integer limit, String userId, Boolean isOwned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/textSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (isOwned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isOwned", isOwned));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsTextSearchGetValidateBeforeCall(String text, String fields, String query, Integer pageNumber, Integer limit, String userId, Boolean isOwned, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling appsTextSearchGet(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling appsTextSearchGet(Async)");
        }

        return appsTextSearchGetCall(text, fields, query, pageNumber, limit, userId, isOwned, _callback);

    }

    /**
     * Searches through the text of fields to find APPROVED or SUSPENDED apps
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param text The text to search for. (required)
     * @param fields A JSON array containing all the fields to be searched through. Example: [&#39;name&#39;, &#39;customData.description&#39;] (required)
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the documents that have the name &#39;MyApp&#39; (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param userId The unique id of the user requesting this resource (optional)
     * @param isOwned Whether this result should only contain apps that are owned by this user (optional)
     * @return SearchPages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchPages appsTextSearchGet(String text, String fields, String query, Integer pageNumber, Integer limit, String userId, Boolean isOwned) throws ApiException {
        ApiResponse<SearchPages> localVarResp = appsTextSearchGetWithHttpInfo(text, fields, query, pageNumber, limit, userId, isOwned);
        return localVarResp.getData();
    }

    /**
     * Searches through the text of fields to find APPROVED or SUSPENDED apps
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param text The text to search for. (required)
     * @param fields A JSON array containing all the fields to be searched through. Example: [&#39;name&#39;, &#39;customData.description&#39;] (required)
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the documents that have the name &#39;MyApp&#39; (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param userId The unique id of the user requesting this resource (optional)
     * @param isOwned Whether this result should only contain apps that are owned by this user (optional)
     * @return ApiResponse&lt;SearchPages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPages> appsTextSearchGetWithHttpInfo(String text, String fields, String query, Integer pageNumber, Integer limit, String userId, Boolean isOwned) throws ApiException {
        okhttp3.Call localVarCall = appsTextSearchGetValidateBeforeCall(text, fields, query, pageNumber, limit, userId, isOwned, null);
        Type localVarReturnType = new TypeToken<SearchPages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches through the text of fields to find APPROVED or SUSPENDED apps (asynchronously)
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param text The text to search for. (required)
     * @param fields A JSON array containing all the fields to be searched through. Example: [&#39;name&#39;, &#39;customData.description&#39;] (required)
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the documents that have the name &#39;MyApp&#39; (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param userId The unique id of the user requesting this resource (optional)
     * @param isOwned Whether this result should only contain apps that are owned by this user (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsTextSearchGetAsync(String text, String fields, String query, Integer pageNumber, Integer limit, String userId, Boolean isOwned, final ApiCallback<SearchPages> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsTextSearchGetValidateBeforeCall(text, fields, query, pageNumber, limit, userId, isOwned, _callback);
        Type localVarReturnType = new TypeToken<SearchPages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsVersionsGet
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the apps that have the name &#39;MyApp&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param developerId The unique id of the developer requesting this resource (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsVersionsGetCall(String query, String sort, Integer pageNumber, Integer limit, String developerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (developerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerId", developerId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsVersionsGetValidateBeforeCall(String query, String sort, Integer pageNumber, Integer limit, String developerId, final ApiCallback _callback) throws ApiException {
        return appsVersionsGetCall(query, sort, pageNumber, limit, developerId, _callback);

    }

    /**
     * Returns a paginated list of AppVersions
     * - Results are paginated when limit is set, otherwise all results are returned - If no query is specified, returns all AppVersions within the marketplace - Only returns AppVersions owned by this developer 
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the apps that have the name &#39;MyApp&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param developerId The unique id of the developer requesting this resource (optional)
     * @return VersionPages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VersionPages appsVersionsGet(String query, String sort, Integer pageNumber, Integer limit, String developerId) throws ApiException {
        ApiResponse<VersionPages> localVarResp = appsVersionsGetWithHttpInfo(query, sort, pageNumber, limit, developerId);
        return localVarResp.getData();
    }

    /**
     * Returns a paginated list of AppVersions
     * - Results are paginated when limit is set, otherwise all results are returned - If no query is specified, returns all AppVersions within the marketplace - Only returns AppVersions owned by this developer 
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the apps that have the name &#39;MyApp&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param developerId The unique id of the developer requesting this resource (optional)
     * @return ApiResponse&lt;VersionPages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionPages> appsVersionsGetWithHttpInfo(String query, String sort, Integer pageNumber, Integer limit, String developerId) throws ApiException {
        okhttp3.Call localVarCall = appsVersionsGetValidateBeforeCall(query, sort, pageNumber, limit, developerId, null);
        Type localVarReturnType = new TypeToken<VersionPages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a paginated list of AppVersions (asynchronously)
     * - Results are paginated when limit is set, otherwise all results are returned - If no query is specified, returns all AppVersions within the marketplace - Only returns AppVersions owned by this developer 
     * @param query A query document. Example: {&#39;name&#39;:&#39;MyApp&#39;} matches all the apps that have the name &#39;MyApp&#39; (optional)
     * @param sort A sort document. Example: {&#39;name&#39;:1} sorts the results by name in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param developerId The unique id of the developer requesting this resource (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsVersionsGetAsync(String query, String sort, Integer pageNumber, Integer limit, String developerId, final ApiCallback<VersionPages> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsVersionsGetValidateBeforeCall(query, sort, pageNumber, limit, developerId, _callback);
        Type localVarReturnType = new TypeToken<VersionPages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
