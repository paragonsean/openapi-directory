/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.App;
import org.openapitools.client.model.Developer;
import org.openapitools.client.model.Ownership;
import org.openapitools.client.model.Review;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:30.118816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private App app;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private Long createdDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVELOPER = "developer";
  @SerializedName(SERIALIZED_NAME_DEVELOPER)
  private Developer developer;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  /**
   * The current event type
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    APP_SUBMITTED("app.submitted"),
    
    APP_APPROVED("app.approved"),
    
    APP_SUSPENDED("app.suspended"),
    
    APP_UNSUSPENDED("app.unsuspended"),
    
    APP_REJECTED("app.rejected"),
    
    APP_IN_REVIEW("app.inReview"),
    
    APP_INSTALLED("app.installed"),
    
    APP_UNINSTALLED("app.uninstalled"),
    
    REVIEW_CREATED("review.created"),
    
    REVIEW_UPDATED("review.updated"),
    
    REVIEW_APPROVED("review.approved"),
    
    REVIEW_SPAM("review.spam"),
    
    REVIEW_REMOVED("review.removed"),
    
    USER_CREATED("user.created"),
    
    USER_UPDATED("user.updated"),
    
    USER_REMOVED("user.removed"),
    
    USER_INVALID_PAYMENT_DETAILS("user.invalidPaymentDetails"),
    
    USER_PAYMENT_DETAILS_REQUIRED("user.paymentDetailsRequired"),
    
    DEVELOPER_CREATED("developer.created"),
    
    DEVELOPER_UPDATED("developer.updated"),
    
    DEVELOPER_REMOVED("developer.removed"),
    
    DEVELOPER_PAYMENT_DETAILS_REQUIRED("developer.paymentDetailsRequired"),
    
    PERMISSION_ADDED("permission.added"),
    
    PERMISSION_REMOVED("permission.removed"),
    
    PAYMENT_COMPLETE("payment.complete"),
    
    PAYMENT_REFUNDED("payment.refunded"),
    
    PAYMENT_REQUIRED("payment.required"),
    
    OWNERSHIP_EXPIRED("ownership.expired");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  private String marketplaceId;

  public static final String SERIALIZED_NAME_OWNERSHIP = "ownership";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP)
  private Ownership ownership;

  public static final String SERIALIZED_NAME_REVIEW = "review";
  @SerializedName(SERIALIZED_NAME_REVIEW)
  private Review review;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private Transaction transaction;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public Event() {
  }

  public Event app(App app) {
    this.app = app;
    return this;
  }

  /**
   * Get app
   * @return app
   */
  @javax.annotation.Nullable
  public App getApp() {
    return app;
  }

  public void setApp(App app) {
    this.app = app;
  }


  public Event createdDate(Long createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date (in millis) of when this event occurred
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public Long getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }


  public Event description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the event
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Event developer(Developer developer) {
    this.developer = developer;
    return this;
  }

  /**
   * Get developer
   * @return developer
   */
  @javax.annotation.Nullable
  public Developer getDeveloper() {
    return developer;
  }

  public void setDeveloper(Developer developer) {
    this.developer = developer;
  }


  public Event eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * The id of the event
   * @return eventId
   */
  @javax.annotation.Nonnull
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public Event eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The current event type
   * @return eventType
   */
  @javax.annotation.Nonnull
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public Event marketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The id of the marketplace that owns this event
   * @return marketplaceId
   */
  @javax.annotation.Nonnull
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }


  public Event ownership(Ownership ownership) {
    this.ownership = ownership;
    return this;
  }

  /**
   * Get ownership
   * @return ownership
   */
  @javax.annotation.Nullable
  public Ownership getOwnership() {
    return ownership;
  }

  public void setOwnership(Ownership ownership) {
    this.ownership = ownership;
  }


  public Event review(Review review) {
    this.review = review;
    return this;
  }

  /**
   * Get review
   * @return review
   */
  @javax.annotation.Nullable
  public Review getReview() {
    return review;
  }

  public void setReview(Review review) {
    this.review = review;
  }


  public Event transaction(Transaction transaction) {
    this.transaction = transaction;
    return this;
  }

  /**
   * Get transaction
   * @return transaction
   */
  @javax.annotation.Nullable
  public Transaction getTransaction() {
    return transaction;
  }

  public void setTransaction(Transaction transaction) {
    this.transaction = transaction;
  }


  public Event user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.app, event.app) &&
        Objects.equals(this.createdDate, event.createdDate) &&
        Objects.equals(this.description, event.description) &&
        Objects.equals(this.developer, event.developer) &&
        Objects.equals(this.eventId, event.eventId) &&
        Objects.equals(this.eventType, event.eventType) &&
        Objects.equals(this.marketplaceId, event.marketplaceId) &&
        Objects.equals(this.ownership, event.ownership) &&
        Objects.equals(this.review, event.review) &&
        Objects.equals(this.transaction, event.transaction) &&
        Objects.equals(this.user, event.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, createdDate, description, developer, eventId, eventType, marketplaceId, ownership, review, transaction, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    developer: ").append(toIndentedString(developer)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("    ownership: ").append(toIndentedString(ownership)).append("\n");
    sb.append("    review: ").append(toIndentedString(review)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app");
    openapiFields.add("createdDate");
    openapiFields.add("description");
    openapiFields.add("developer");
    openapiFields.add("eventId");
    openapiFields.add("eventType");
    openapiFields.add("marketplaceId");
    openapiFields.add("ownership");
    openapiFields.add("review");
    openapiFields.add("transaction");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("eventId");
    openapiRequiredFields.add("eventType");
    openapiRequiredFields.add("marketplaceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `app`
      if (jsonObj.get("app") != null && !jsonObj.get("app").isJsonNull()) {
        App.validateJsonElement(jsonObj.get("app"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `developer`
      if (jsonObj.get("developer") != null && !jsonObj.get("developer").isJsonNull()) {
        Developer.validateJsonElement(jsonObj.get("developer"));
      }
      if (!jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if (!jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      // validate the required field `eventType`
      EventTypeEnum.validateJsonElement(jsonObj.get("eventType"));
      if (!jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
      // validate the optional field `ownership`
      if (jsonObj.get("ownership") != null && !jsonObj.get("ownership").isJsonNull()) {
        Ownership.validateJsonElement(jsonObj.get("ownership"));
      }
      // validate the optional field `review`
      if (jsonObj.get("review") != null && !jsonObj.get("review").isJsonNull()) {
        Review.validateJsonElement(jsonObj.get("review"));
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        Transaction.validateJsonElement(jsonObj.get("transaction"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

