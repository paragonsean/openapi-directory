/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Hash;
import org.openapitools.client.model.VirusScan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The file ids of the uploaded file
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:30.118816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelFile {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_FILE_ID = "fileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_FILE_URL = "fileUrl";
  @SerializedName(SERIALIZED_NAME_FILE_URL)
  private String fileUrl;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Hash hash;

  /**
   * The mime type validation check to see if the extension of this file matches it&#39;s content. Can be PASSED or FAILED
   */
  @JsonAdapter(MimeCheckEnum.Adapter.class)
  public enum MimeCheckEnum {
    PASSED("PASSED"),
    
    FAILED("FAILED");

    private String value;

    MimeCheckEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MimeCheckEnum fromValue(String value) {
      for (MimeCheckEnum b : MimeCheckEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MimeCheckEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MimeCheckEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MimeCheckEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MimeCheckEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MimeCheckEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIME_CHECK = "mimeCheck";
  @SerializedName(SERIALIZED_NAME_MIME_CHECK)
  private MimeCheckEnum mimeCheck;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_UPLOAD_DATE = "uploadDate";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE)
  private Long uploadDate;

  public static final String SERIALIZED_NAME_VIRUS_SCAN = "virusScan";
  @SerializedName(SERIALIZED_NAME_VIRUS_SCAN)
  private VirusScan virusScan;

  public ModelFile() {
  }

  public ModelFile contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The internet media type of the file
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public ModelFile fileId(String fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * The id of the uploaded file
   * @return fileId
   */
  @javax.annotation.Nonnull
  public String getFileId() {
    return fileId;
  }

  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ModelFile fileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
    return this;
  }

  /**
   * The path where the file can be located.
   * @return fileUrl
   */
  @javax.annotation.Nullable
  public String getFileUrl() {
    return fileUrl;
  }

  public void setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
  }


  public ModelFile hash(Hash hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Get hash
   * @return hash
   */
  @javax.annotation.Nullable
  public Hash getHash() {
    return hash;
  }

  public void setHash(Hash hash) {
    this.hash = hash;
  }


  public ModelFile mimeCheck(MimeCheckEnum mimeCheck) {
    this.mimeCheck = mimeCheck;
    return this;
  }

  /**
   * The mime type validation check to see if the extension of this file matches it&#39;s content. Can be PASSED or FAILED
   * @return mimeCheck
   */
  @javax.annotation.Nullable
  public MimeCheckEnum getMimeCheck() {
    return mimeCheck;
  }

  public void setMimeCheck(MimeCheckEnum mimeCheck) {
    this.mimeCheck = mimeCheck;
  }


  public ModelFile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the uploaded file
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModelFile size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The number of bytes in the uploaded file
   * @return size
   */
  @javax.annotation.Nonnull
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public ModelFile uploadDate(Long uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

  /**
   * The time in milliseconds when the file was uploaded
   * @return uploadDate
   */
  @javax.annotation.Nonnull
  public Long getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(Long uploadDate) {
    this.uploadDate = uploadDate;
  }


  public ModelFile virusScan(VirusScan virusScan) {
    this.virusScan = virusScan;
    return this;
  }

  /**
   * Get virusScan
   * @return virusScan
   */
  @javax.annotation.Nullable
  public VirusScan getVirusScan() {
    return virusScan;
  }

  public void setVirusScan(VirusScan virusScan) {
    this.virusScan = virusScan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelFile _file = (ModelFile) o;
    return Objects.equals(this.contentType, _file.contentType) &&
        Objects.equals(this.fileId, _file.fileId) &&
        Objects.equals(this.fileUrl, _file.fileUrl) &&
        Objects.equals(this.hash, _file.hash) &&
        Objects.equals(this.mimeCheck, _file.mimeCheck) &&
        Objects.equals(this.name, _file.name) &&
        Objects.equals(this.size, _file.size) &&
        Objects.equals(this.uploadDate, _file.uploadDate) &&
        Objects.equals(this.virusScan, _file.virusScan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, fileId, fileUrl, hash, mimeCheck, name, size, uploadDate, virusScan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelFile {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    fileUrl: ").append(toIndentedString(fileUrl)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    mimeCheck: ").append(toIndentedString(mimeCheck)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("    virusScan: ").append(toIndentedString(virusScan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentType");
    openapiFields.add("fileId");
    openapiFields.add("fileUrl");
    openapiFields.add("hash");
    openapiFields.add("mimeCheck");
    openapiFields.add("name");
    openapiFields.add("size");
    openapiFields.add("uploadDate");
    openapiFields.add("virusScan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fileId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("uploadDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelFile is not found in the empty JSON string", ModelFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelFile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if (!jsonObj.get("fileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileId").toString()));
      }
      if ((jsonObj.get("fileUrl") != null && !jsonObj.get("fileUrl").isJsonNull()) && !jsonObj.get("fileUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileUrl").toString()));
      }
      // validate the optional field `hash`
      if (jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) {
        Hash.validateJsonElement(jsonObj.get("hash"));
      }
      if ((jsonObj.get("mimeCheck") != null && !jsonObj.get("mimeCheck").isJsonNull()) && !jsonObj.get("mimeCheck").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeCheck` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeCheck").toString()));
      }
      // validate the optional field `mimeCheck`
      if (jsonObj.get("mimeCheck") != null && !jsonObj.get("mimeCheck").isJsonNull()) {
        MimeCheckEnum.validateJsonElement(jsonObj.get("mimeCheck"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `virusScan`
      if (jsonObj.get("virusScan") != null && !jsonObj.get("virusScan").isJsonNull()) {
        VirusScan.validateJsonElement(jsonObj.get("virusScan"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelFile.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelFile>() {
           @Override
           public void write(JsonWriter out, ModelFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelFile
   * @throws IOException if the JSON string is invalid with respect to ModelFile
   */
  public static ModelFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelFile.class);
  }

  /**
   * Convert an instance of ModelFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

