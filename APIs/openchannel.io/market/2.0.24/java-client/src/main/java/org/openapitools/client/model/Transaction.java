/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A transaction for an app initiated by a user
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:30.118816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transaction {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private Object customData;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Long date;

  public static final String SERIALIZED_NAME_DEVELOPER_AMOUNT = "developerAmount";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_AMOUNT)
  private Integer developerAmount;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developerId";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "feeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private Integer feeAmount;

  public static final String SERIALIZED_NAME_MARKETPLACE_AMOUNT = "marketplaceAmount";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_AMOUNT)
  private Integer marketplaceAmount;

  public static final String SERIALIZED_NAME_OWNERSHIP_ID = "ownershipId";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_ID)
  private String ownershipId;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  /**
   * The type for this transaction
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PAYMENT("payment"),
    
    REFUND("refund");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Transaction() {
  }

  public Transaction amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The total amount paid in cents
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public Transaction appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The id of the app involved with this transaction
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public Transaction customData(Object customData) {
    this.customData = customData;
    return this;
  }

  /**
   * A custom JSON object that you can create and attach to this record
   * @return customData
   */
  @javax.annotation.Nullable
  public Object getCustomData() {
    return customData;
  }

  public void setCustomData(Object customData) {
    this.customData = customData;
  }


  public Transaction date(Long date) {
    this.date = date;
    return this;
  }

  /**
   * The date (in millis) of when this transaction occurred
   * @return date
   */
  @javax.annotation.Nonnull
  public Long getDate() {
    return date;
  }

  public void setDate(Long date) {
    this.date = date;
  }


  public Transaction developerAmount(Integer developerAmount) {
    this.developerAmount = developerAmount;
    return this;
  }

  /**
   * The total amount paid to the developer in cents
   * @return developerAmount
   */
  @javax.annotation.Nullable
  public Integer getDeveloperAmount() {
    return developerAmount;
  }

  public void setDeveloperAmount(Integer developerAmount) {
    this.developerAmount = developerAmount;
  }


  public Transaction developerId(String developerId) {
    this.developerId = developerId;
    return this;
  }

  /**
   * The id of the developer involved with this transaction
   * @return developerId
   */
  @javax.annotation.Nonnull
  public String getDeveloperId() {
    return developerId;
  }

  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }


  public Transaction feeAmount(Integer feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

  /**
   * The total amount paid to payment processing fees in cents
   * @return feeAmount
   */
  @javax.annotation.Nullable
  public Integer getFeeAmount() {
    return feeAmount;
  }

  public void setFeeAmount(Integer feeAmount) {
    this.feeAmount = feeAmount;
  }


  public Transaction marketplaceAmount(Integer marketplaceAmount) {
    this.marketplaceAmount = marketplaceAmount;
    return this;
  }

  /**
   * The total amount paid to the marketplace owner in cents
   * @return marketplaceAmount
   */
  @javax.annotation.Nullable
  public Integer getMarketplaceAmount() {
    return marketplaceAmount;
  }

  public void setMarketplaceAmount(Integer marketplaceAmount) {
    this.marketplaceAmount = marketplaceAmount;
  }


  public Transaction ownershipId(String ownershipId) {
    this.ownershipId = ownershipId;
    return this;
  }

  /**
   * The id for the ownership associated with this transaction
   * @return ownershipId
   */
  @javax.annotation.Nonnull
  public String getOwnershipId() {
    return ownershipId;
  }

  public void setOwnershipId(String ownershipId) {
    this.ownershipId = ownershipId;
  }


  public Transaction transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The id for this transaction
   * @return transactionId
   */
  @javax.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public Transaction type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type for this transaction
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Transaction userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The id of the user making the transaction
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.amount, transaction.amount) &&
        Objects.equals(this.appId, transaction.appId) &&
        Objects.equals(this.customData, transaction.customData) &&
        Objects.equals(this.date, transaction.date) &&
        Objects.equals(this.developerAmount, transaction.developerAmount) &&
        Objects.equals(this.developerId, transaction.developerId) &&
        Objects.equals(this.feeAmount, transaction.feeAmount) &&
        Objects.equals(this.marketplaceAmount, transaction.marketplaceAmount) &&
        Objects.equals(this.ownershipId, transaction.ownershipId) &&
        Objects.equals(this.transactionId, transaction.transactionId) &&
        Objects.equals(this.type, transaction.type) &&
        Objects.equals(this.userId, transaction.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, appId, customData, date, developerAmount, developerId, feeAmount, marketplaceAmount, ownershipId, transactionId, type, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    developerAmount: ").append(toIndentedString(developerAmount)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    marketplaceAmount: ").append(toIndentedString(marketplaceAmount)).append("\n");
    sb.append("    ownershipId: ").append(toIndentedString(ownershipId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("appId");
    openapiFields.add("customData");
    openapiFields.add("date");
    openapiFields.add("developerAmount");
    openapiFields.add("developerId");
    openapiFields.add("feeAmount");
    openapiFields.add("marketplaceAmount");
    openapiFields.add("ownershipId");
    openapiFields.add("transactionId");
    openapiFields.add("type");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("appId");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("developerId");
    openapiRequiredFields.add("ownershipId");
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("userId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Transaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if (!jsonObj.get("developerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerId").toString()));
      }
      if (!jsonObj.get("ownershipId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipId").toString()));
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transaction
   * @throws IOException if the JSON string is invalid with respect to Transaction
   */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

  /**
   * Convert an instance of Transaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

