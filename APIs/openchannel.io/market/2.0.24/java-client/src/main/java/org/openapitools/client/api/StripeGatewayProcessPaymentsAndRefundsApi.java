/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.Cards;
import org.openapitools.client.model.DeveloperToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StripeGatewayProcessPaymentsAndRefundsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StripeGatewayProcessPaymentsAndRefundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StripeGatewayProcessPaymentsAndRefundsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for stripeGatewayDeveloperDeveloperIdAccountsGet
     * @param developerId The id of the developer connecting their Stripe account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayDeveloperDeveloperIdAccountsGetCall(String developerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stripe-gateway/developer/{developerId}/accounts"
            .replace("{" + "developerId" + "}", localVarApiClient.escapeString(developerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stripeGatewayDeveloperDeveloperIdAccountsGetValidateBeforeCall(String developerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling stripeGatewayDeveloperDeveloperIdAccountsGet(Async)");
        }

        return stripeGatewayDeveloperDeveloperIdAccountsGetCall(developerId, _callback);

    }

    /**
     * Returns a developers connected Stripe accounts
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param developerId The id of the developer connecting their Stripe account (required)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Accounts stripeGatewayDeveloperDeveloperIdAccountsGet(String developerId) throws ApiException {
        ApiResponse<Accounts> localVarResp = stripeGatewayDeveloperDeveloperIdAccountsGetWithHttpInfo(developerId);
        return localVarResp.getData();
    }

    /**
     * Returns a developers connected Stripe accounts
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param developerId The id of the developer connecting their Stripe account (required)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> stripeGatewayDeveloperDeveloperIdAccountsGetWithHttpInfo(String developerId) throws ApiException {
        okhttp3.Call localVarCall = stripeGatewayDeveloperDeveloperIdAccountsGetValidateBeforeCall(developerId, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a developers connected Stripe accounts (asynchronously)
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param developerId The id of the developer connecting their Stripe account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayDeveloperDeveloperIdAccountsGetAsync(String developerId, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = stripeGatewayDeveloperDeveloperIdAccountsGetValidateBeforeCall(developerId, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stripeGatewayDeveloperDeveloperIdAccountsPost
     * @param developerId The id of the developer connecting their Stripe account (required)
     * @param redirectUrl The URL to redirect this developer after they have connected their Stripe account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayDeveloperDeveloperIdAccountsPostCall(String developerId, String redirectUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stripe-gateway/developer/{developerId}/accounts"
            .replace("{" + "developerId" + "}", localVarApiClient.escapeString(developerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectUrl", redirectUrl));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stripeGatewayDeveloperDeveloperIdAccountsPostValidateBeforeCall(String developerId, String redirectUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling stripeGatewayDeveloperDeveloperIdAccountsPost(Async)");
        }

        // verify the required parameter 'redirectUrl' is set
        if (redirectUrl == null) {
            throw new ApiException("Missing the required parameter 'redirectUrl' when calling stripeGatewayDeveloperDeveloperIdAccountsPost(Async)");
        }

        return stripeGatewayDeveloperDeveloperIdAccountsPostCall(developerId, redirectUrl, _callback);

    }

    /**
     * Generate a temporary URL to allow a developer to connect their Stripe account
     * - Results are returned for the market provided within the basic authentication credentials  - The URL generated by this method is only valid for 48 hours. 
     * @param developerId The id of the developer connecting their Stripe account (required)
     * @param redirectUrl The URL to redirect this developer after they have connected their Stripe account (required)
     * @return DeveloperToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeveloperToken stripeGatewayDeveloperDeveloperIdAccountsPost(String developerId, String redirectUrl) throws ApiException {
        ApiResponse<DeveloperToken> localVarResp = stripeGatewayDeveloperDeveloperIdAccountsPostWithHttpInfo(developerId, redirectUrl);
        return localVarResp.getData();
    }

    /**
     * Generate a temporary URL to allow a developer to connect their Stripe account
     * - Results are returned for the market provided within the basic authentication credentials  - The URL generated by this method is only valid for 48 hours. 
     * @param developerId The id of the developer connecting their Stripe account (required)
     * @param redirectUrl The URL to redirect this developer after they have connected their Stripe account (required)
     * @return ApiResponse&lt;DeveloperToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeveloperToken> stripeGatewayDeveloperDeveloperIdAccountsPostWithHttpInfo(String developerId, String redirectUrl) throws ApiException {
        okhttp3.Call localVarCall = stripeGatewayDeveloperDeveloperIdAccountsPostValidateBeforeCall(developerId, redirectUrl, null);
        Type localVarReturnType = new TypeToken<DeveloperToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a temporary URL to allow a developer to connect their Stripe account (asynchronously)
     * - Results are returned for the market provided within the basic authentication credentials  - The URL generated by this method is only valid for 48 hours. 
     * @param developerId The id of the developer connecting their Stripe account (required)
     * @param redirectUrl The URL to redirect this developer after they have connected their Stripe account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayDeveloperDeveloperIdAccountsPostAsync(String developerId, String redirectUrl, final ApiCallback<DeveloperToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = stripeGatewayDeveloperDeveloperIdAccountsPostValidateBeforeCall(developerId, redirectUrl, _callback);
        Type localVarReturnType = new TypeToken<DeveloperToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete
     * @param developerId The id of the developer disconnecting their Stripe account (required)
     * @param stripeId The id of the stripe account to disconnect (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteCall(String developerId, String stripeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stripe-gateway/developer/{developerId}/accounts/{stripeId}"
            .replace("{" + "developerId" + "}", localVarApiClient.escapeString(developerId.toString()))
            .replace("{" + "stripeId" + "}", localVarApiClient.escapeString(stripeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteValidateBeforeCall(String developerId, String stripeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'developerId' is set
        if (developerId == null) {
            throw new ApiException("Missing the required parameter 'developerId' when calling stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete(Async)");
        }

        // verify the required parameter 'stripeId' is set
        if (stripeId == null) {
            throw new ApiException("Missing the required parameter 'stripeId' when calling stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete(Async)");
        }

        return stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteCall(developerId, stripeId, _callback);

    }

    /**
     * Disconnects a developer&#39;s Stripe account
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param developerId The id of the developer disconnecting their Stripe account (required)
     * @param stripeId The id of the stripe account to disconnect (required)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Accounts stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete(String developerId, String stripeId) throws ApiException {
        ApiResponse<Accounts> localVarResp = stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteWithHttpInfo(developerId, stripeId);
        return localVarResp.getData();
    }

    /**
     * Disconnects a developer&#39;s Stripe account
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param developerId The id of the developer disconnecting their Stripe account (required)
     * @param stripeId The id of the stripe account to disconnect (required)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteWithHttpInfo(String developerId, String stripeId) throws ApiException {
        okhttp3.Call localVarCall = stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteValidateBeforeCall(developerId, stripeId, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disconnects a developer&#39;s Stripe account (asynchronously)
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param developerId The id of the developer disconnecting their Stripe account (required)
     * @param stripeId The id of the stripe account to disconnect (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteAsync(String developerId, String stripeId, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteValidateBeforeCall(developerId, stripeId, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stripeGatewayUserUserIdCardsCardIdDelete
     * @param userId The id of the user removing their credit card (required)
     * @param cardId The id of the credit card to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayUserUserIdCardsCardIdDeleteCall(String userId, String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stripe-gateway/user/{userId}/cards/{cardId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stripeGatewayUserUserIdCardsCardIdDeleteValidateBeforeCall(String userId, String cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling stripeGatewayUserUserIdCardsCardIdDelete(Async)");
        }

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling stripeGatewayUserUserIdCardsCardIdDelete(Async)");
        }

        return stripeGatewayUserUserIdCardsCardIdDeleteCall(userId, cardId, _callback);

    }

    /**
     * Removes a credit card for a user
     * 
     * @param userId The id of the user removing their credit card (required)
     * @param cardId The id of the credit card to remove (required)
     * @return Cards
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Cards stripeGatewayUserUserIdCardsCardIdDelete(String userId, String cardId) throws ApiException {
        ApiResponse<Cards> localVarResp = stripeGatewayUserUserIdCardsCardIdDeleteWithHttpInfo(userId, cardId);
        return localVarResp.getData();
    }

    /**
     * Removes a credit card for a user
     * 
     * @param userId The id of the user removing their credit card (required)
     * @param cardId The id of the credit card to remove (required)
     * @return ApiResponse&lt;Cards&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cards> stripeGatewayUserUserIdCardsCardIdDeleteWithHttpInfo(String userId, String cardId) throws ApiException {
        okhttp3.Call localVarCall = stripeGatewayUserUserIdCardsCardIdDeleteValidateBeforeCall(userId, cardId, null);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes a credit card for a user (asynchronously)
     * 
     * @param userId The id of the user removing their credit card (required)
     * @param cardId The id of the credit card to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayUserUserIdCardsCardIdDeleteAsync(String userId, String cardId, final ApiCallback<Cards> _callback) throws ApiException {

        okhttp3.Call localVarCall = stripeGatewayUserUserIdCardsCardIdDeleteValidateBeforeCall(userId, cardId, _callback);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stripeGatewayUserUserIdCardsCardIdPost
     * @param userId The id of the user adding their credit card (required)
     * @param cardId The id of the card to be updated (required)
     * @param isDefault Set to true if this should be set to be the default credit card (optional)
     * @param addressCity The card holder&#39;s city (optional)
     * @param addressCountry The card holder&#39;s country (optional)
     * @param addressLine1 The card holder&#39;s street address (optional)
     * @param addressLine2 The card holder&#39;s street address (optional)
     * @param addressState The card holder&#39;s city state/province (optional)
     * @param addressZip The card holder&#39;s zip/postal code (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayUserUserIdCardsCardIdPostCall(String userId, String cardId, Boolean isDefault, String addressCity, String addressCountry, String addressLine1, String addressLine2, String addressState, String addressZip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stripe-gateway/user/{userId}/cards/{cardId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDefault", isDefault));
        }

        if (addressCity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address_city", addressCity));
        }

        if (addressCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address_country", addressCountry));
        }

        if (addressLine1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address_line1", addressLine1));
        }

        if (addressLine2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address_line2", addressLine2));
        }

        if (addressState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address_state", addressState));
        }

        if (addressZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address_zip", addressZip));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stripeGatewayUserUserIdCardsCardIdPostValidateBeforeCall(String userId, String cardId, Boolean isDefault, String addressCity, String addressCountry, String addressLine1, String addressLine2, String addressState, String addressZip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling stripeGatewayUserUserIdCardsCardIdPost(Async)");
        }

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling stripeGatewayUserUserIdCardsCardIdPost(Async)");
        }

        return stripeGatewayUserUserIdCardsCardIdPostCall(userId, cardId, isDefault, addressCity, addressCountry, addressLine1, addressLine2, addressState, addressZip, _callback);

    }

    /**
     * Updates a credit card for this user
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param userId The id of the user adding their credit card (required)
     * @param cardId The id of the card to be updated (required)
     * @param isDefault Set to true if this should be set to be the default credit card (optional)
     * @param addressCity The card holder&#39;s city (optional)
     * @param addressCountry The card holder&#39;s country (optional)
     * @param addressLine1 The card holder&#39;s street address (optional)
     * @param addressLine2 The card holder&#39;s street address (optional)
     * @param addressState The card holder&#39;s city state/province (optional)
     * @param addressZip The card holder&#39;s zip/postal code (optional)
     * @return Cards
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Cards stripeGatewayUserUserIdCardsCardIdPost(String userId, String cardId, Boolean isDefault, String addressCity, String addressCountry, String addressLine1, String addressLine2, String addressState, String addressZip) throws ApiException {
        ApiResponse<Cards> localVarResp = stripeGatewayUserUserIdCardsCardIdPostWithHttpInfo(userId, cardId, isDefault, addressCity, addressCountry, addressLine1, addressLine2, addressState, addressZip);
        return localVarResp.getData();
    }

    /**
     * Updates a credit card for this user
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param userId The id of the user adding their credit card (required)
     * @param cardId The id of the card to be updated (required)
     * @param isDefault Set to true if this should be set to be the default credit card (optional)
     * @param addressCity The card holder&#39;s city (optional)
     * @param addressCountry The card holder&#39;s country (optional)
     * @param addressLine1 The card holder&#39;s street address (optional)
     * @param addressLine2 The card holder&#39;s street address (optional)
     * @param addressState The card holder&#39;s city state/province (optional)
     * @param addressZip The card holder&#39;s zip/postal code (optional)
     * @return ApiResponse&lt;Cards&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cards> stripeGatewayUserUserIdCardsCardIdPostWithHttpInfo(String userId, String cardId, Boolean isDefault, String addressCity, String addressCountry, String addressLine1, String addressLine2, String addressState, String addressZip) throws ApiException {
        okhttp3.Call localVarCall = stripeGatewayUserUserIdCardsCardIdPostValidateBeforeCall(userId, cardId, isDefault, addressCity, addressCountry, addressLine1, addressLine2, addressState, addressZip, null);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a credit card for this user (asynchronously)
     *  - Results are returned for the market provided within the basic authentication credentials 
     * @param userId The id of the user adding their credit card (required)
     * @param cardId The id of the card to be updated (required)
     * @param isDefault Set to true if this should be set to be the default credit card (optional)
     * @param addressCity The card holder&#39;s city (optional)
     * @param addressCountry The card holder&#39;s country (optional)
     * @param addressLine1 The card holder&#39;s street address (optional)
     * @param addressLine2 The card holder&#39;s street address (optional)
     * @param addressState The card holder&#39;s city state/province (optional)
     * @param addressZip The card holder&#39;s zip/postal code (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayUserUserIdCardsCardIdPostAsync(String userId, String cardId, Boolean isDefault, String addressCity, String addressCountry, String addressLine1, String addressLine2, String addressState, String addressZip, final ApiCallback<Cards> _callback) throws ApiException {

        okhttp3.Call localVarCall = stripeGatewayUserUserIdCardsCardIdPostValidateBeforeCall(userId, cardId, isDefault, addressCity, addressCountry, addressLine1, addressLine2, addressState, addressZip, _callback);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stripeGatewayUserUserIdCardsGet
     * @param userId The id of the user requesting their credit cards (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayUserUserIdCardsGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stripe-gateway/user/{userId}/cards"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stripeGatewayUserUserIdCardsGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling stripeGatewayUserUserIdCardsGet(Async)");
        }

        return stripeGatewayUserUserIdCardsGetCall(userId, _callback);

    }

    /**
     * Returns credit cards for this user
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param userId The id of the user requesting their credit cards (required)
     * @return Cards
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Cards stripeGatewayUserUserIdCardsGet(String userId) throws ApiException {
        ApiResponse<Cards> localVarResp = stripeGatewayUserUserIdCardsGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Returns credit cards for this user
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param userId The id of the user requesting their credit cards (required)
     * @return ApiResponse&lt;Cards&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cards> stripeGatewayUserUserIdCardsGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = stripeGatewayUserUserIdCardsGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns credit cards for this user (asynchronously)
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param userId The id of the user requesting their credit cards (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayUserUserIdCardsGetAsync(String userId, final ApiCallback<Cards> _callback) throws ApiException {

        okhttp3.Call localVarCall = stripeGatewayUserUserIdCardsGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stripeGatewayUserUserIdCardsPost
     * @param userId The id of the user adding their credit card (required)
     * @param token The Stripe token returned by the Stripe.js Stripe.card.createToken call (required)
     * @param isDefault Set to true if this should be set to be the default credit card (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayUserUserIdCardsPostCall(String userId, String token, Boolean isDefault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stripe-gateway/user/{userId}/cards"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (isDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDefault", isDefault));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stripeGatewayUserUserIdCardsPostValidateBeforeCall(String userId, String token, Boolean isDefault, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling stripeGatewayUserUserIdCardsPost(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling stripeGatewayUserUserIdCardsPost(Async)");
        }

        return stripeGatewayUserUserIdCardsPostCall(userId, token, isDefault, _callback);

    }

    /**
     * Adds credit card for this user
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param userId The id of the user adding their credit card (required)
     * @param token The Stripe token returned by the Stripe.js Stripe.card.createToken call (required)
     * @param isDefault Set to true if this should be set to be the default credit card (optional)
     * @return Cards
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Cards stripeGatewayUserUserIdCardsPost(String userId, String token, Boolean isDefault) throws ApiException {
        ApiResponse<Cards> localVarResp = stripeGatewayUserUserIdCardsPostWithHttpInfo(userId, token, isDefault);
        return localVarResp.getData();
    }

    /**
     * Adds credit card for this user
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param userId The id of the user adding their credit card (required)
     * @param token The Stripe token returned by the Stripe.js Stripe.card.createToken call (required)
     * @param isDefault Set to true if this should be set to be the default credit card (optional)
     * @return ApiResponse&lt;Cards&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cards> stripeGatewayUserUserIdCardsPostWithHttpInfo(String userId, String token, Boolean isDefault) throws ApiException {
        okhttp3.Call localVarCall = stripeGatewayUserUserIdCardsPostValidateBeforeCall(userId, token, isDefault, null);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds credit card for this user (asynchronously)
     * - Results are returned for the market provided within the basic authentication credentials 
     * @param userId The id of the user adding their credit card (required)
     * @param token The Stripe token returned by the Stripe.js Stripe.card.createToken call (required)
     * @param isDefault Set to true if this should be set to be the default credit card (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Stripe&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stripeGatewayUserUserIdCardsPostAsync(String userId, String token, Boolean isDefault, final ApiCallback<Cards> _callback) throws ApiException {

        okhttp3.Call localVarCall = stripeGatewayUserUserIdCardsPostValidateBeforeCall(userId, token, isDefault, _callback);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
