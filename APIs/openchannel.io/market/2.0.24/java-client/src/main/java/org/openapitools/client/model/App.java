/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.Ownership;
import org.openapitools.client.model.Restrictions;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An app
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:30.118816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class App {
  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private List<String> access = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW = "allow";
  @SerializedName(SERIALIZED_NAME_ALLOW)
  private Restrictions allow;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Object attributes;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Long created;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private Object customData;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developerId";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_IS_LIVE = "isLive";
  @SerializedName(SERIALIZED_NAME_IS_LIVE)
  private Boolean isLive;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private Long lastUpdated;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private List<Model> model = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNERSHIP = "ownership";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP)
  private Ownership ownership;

  public static final String SERIALIZED_NAME_RANDOMIZE = "randomize";
  @SerializedName(SERIALIZED_NAME_RANDOMIZE)
  private Integer randomize;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Integer rating;

  public static final String SERIALIZED_NAME_RESTRICT = "restrict";
  @SerializedName(SERIALIZED_NAME_RESTRICT)
  private Restrictions restrict;

  public static final String SERIALIZED_NAME_REVIEW_COUNT = "reviewCount";
  @SerializedName(SERIALIZED_NAME_REVIEW_COUNT)
  private Integer reviewCount;

  public static final String SERIALIZED_NAME_SAFE_NAME = "safeName";
  @SerializedName(SERIALIZED_NAME_SAFE_NAME)
  private List<String> safeName = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private Object statistics;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE = "submittedDate";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE)
  private Long submittedDate;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public App() {
  }

  public App access(List<String> access) {
    this.access = access;
    return this;
  }

  public App addAccessItem(String accessItem) {
    if (this.access == null) {
      this.access = new ArrayList<>();
    }
    this.access.add(accessItem);
    return this;
  }

  /**
   * A custom defined list of access requirements
   * @return access
   */
  @javax.annotation.Nullable
  public List<String> getAccess() {
    return access;
  }

  public void setAccess(List<String> access) {
    this.access = access;
  }


  public App allow(Restrictions allow) {
    this.allow = allow;
    return this;
  }

  /**
   * Get allow
   * @return allow
   */
  @javax.annotation.Nonnull
  public Restrictions getAllow() {
    return allow;
  }

  public void setAllow(Restrictions allow) {
    this.allow = allow;
  }


  public App appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The id of this app
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public App attributes(Object attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * A custom defined list of app attributes
   * @return attributes
   */
  @javax.annotation.Nonnull
  public Object getAttributes() {
    return attributes;
  }

  public void setAttributes(Object attributes) {
    this.attributes = attributes;
  }


  public App created(Long created) {
    this.created = created;
    return this;
  }

  /**
   * The date (in millis) that this app was created
   * @return created
   */
  @javax.annotation.Nonnull
  public Long getCreated() {
    return created;
  }

  public void setCreated(Long created) {
    this.created = created;
  }


  public App customData(Object customData) {
    this.customData = customData;
    return this;
  }

  /**
   * A custom JSON object that you can create and attach to this record
   * @return customData
   */
  @javax.annotation.Nonnull
  public Object getCustomData() {
    return customData;
  }

  public void setCustomData(Object customData) {
    this.customData = customData;
  }


  public App developerId(String developerId) {
    this.developerId = developerId;
    return this;
  }

  /**
   * The id of the developer that owns this app
   * @return developerId
   */
  @javax.annotation.Nonnull
  public String getDeveloperId() {
    return developerId;
  }

  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }


  public App isLive(Boolean isLive) {
    this.isLive = isLive;
    return this;
  }

  /**
   * True if this is the live version of the app
   * @return isLive
   */
  @javax.annotation.Nonnull
  public Boolean getIsLive() {
    return isLive;
  }

  public void setIsLive(Boolean isLive) {
    this.isLive = isLive;
  }


  public App lastUpdated(Long lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The date (in millis) that this app was last modified
   * @return lastUpdated
   */
  @javax.annotation.Nonnull
  public Long getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(Long lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public App model(List<Model> model) {
    this.model = model;
    return this;
  }

  public App addModelItem(Model modelItem) {
    if (this.model == null) {
      this.model = new ArrayList<>();
    }
    this.model.add(modelItem);
    return this;
  }

  /**
   * The models that describes the cost and pricing for this app
   * @return model
   */
  @javax.annotation.Nonnull
  public List<Model> getModel() {
    return model;
  }

  public void setModel(List<Model> model) {
    this.model = model;
  }


  public App name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this app
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public App ownership(Ownership ownership) {
    this.ownership = ownership;
    return this;
  }

  /**
   * Get ownership
   * @return ownership
   */
  @javax.annotation.Nullable
  public Ownership getOwnership() {
    return ownership;
  }

  public void setOwnership(Ownership ownership) {
    this.ownership = ownership;
  }


  public App randomize(Integer randomize) {
    this.randomize = randomize;
    return this;
  }

  /**
   * A random number that changes hourly and is used for achieving a random sort order when displaying apps
   * @return randomize
   */
  @javax.annotation.Nonnull
  public Integer getRandomize() {
    return randomize;
  }

  public void setRandomize(Integer randomize) {
    this.randomize = randomize;
  }


  public App rating(Integer rating) {
    this.rating = rating;
    return this;
  }

  /**
   * The average review rating for this app. Reviews are rated from 100 (one star) to 500 (five star)
   * minimum: 0
   * maximum: 500
   * @return rating
   */
  @javax.annotation.Nonnull
  public Integer getRating() {
    return rating;
  }

  public void setRating(Integer rating) {
    this.rating = rating;
  }


  public App restrict(Restrictions restrict) {
    this.restrict = restrict;
    return this;
  }

  /**
   * Get restrict
   * @return restrict
   */
  @javax.annotation.Nonnull
  public Restrictions getRestrict() {
    return restrict;
  }

  public void setRestrict(Restrictions restrict) {
    this.restrict = restrict;
  }


  public App reviewCount(Integer reviewCount) {
    this.reviewCount = reviewCount;
    return this;
  }

  /**
   * The number of approved reviews for this app.
   * @return reviewCount
   */
  @javax.annotation.Nullable
  public Integer getReviewCount() {
    return reviewCount;
  }

  public void setReviewCount(Integer reviewCount) {
    this.reviewCount = reviewCount;
  }


  public App safeName(List<String> safeName) {
    this.safeName = safeName;
    return this;
  }

  public App addSafeNameItem(String safeNameItem) {
    if (this.safeName == null) {
      this.safeName = new ArrayList<>();
    }
    this.safeName.add(safeNameItem);
    return this;
  }

  /**
   * URL safe aliases that can be used to identify this app even after name changes. The current alias is always at position 0.
   * @return safeName
   */
  @javax.annotation.Nonnull
  public List<String> getSafeName() {
    return safeName;
  }

  public void setSafeName(List<String> safeName) {
    this.safeName = safeName;
  }


  public App statistics(Object statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * A field containing summary stats about the app and is specially designed to allow apps to be sorted by popularity
   * @return statistics
   */
  @javax.annotation.Nullable
  public Object getStatistics() {
    return statistics;
  }

  public void setStatistics(Object statistics) {
    this.statistics = statistics;
  }


  public App status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public App submittedDate(Long submittedDate) {
    this.submittedDate = submittedDate;
    return this;
  }

  /**
   * The date (in millis) that this app was submitted for approval
   * @return submittedDate
   */
  @javax.annotation.Nullable
  public Long getSubmittedDate() {
    return submittedDate;
  }

  public void setSubmittedDate(Long submittedDate) {
    this.submittedDate = submittedDate;
  }


  public App type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type for this app
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public App version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * The version number for this app
   * @return version
   */
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    App app = (App) o;
    return Objects.equals(this.access, app.access) &&
        Objects.equals(this.allow, app.allow) &&
        Objects.equals(this.appId, app.appId) &&
        Objects.equals(this.attributes, app.attributes) &&
        Objects.equals(this.created, app.created) &&
        Objects.equals(this.customData, app.customData) &&
        Objects.equals(this.developerId, app.developerId) &&
        Objects.equals(this.isLive, app.isLive) &&
        Objects.equals(this.lastUpdated, app.lastUpdated) &&
        Objects.equals(this.model, app.model) &&
        Objects.equals(this.name, app.name) &&
        Objects.equals(this.ownership, app.ownership) &&
        Objects.equals(this.randomize, app.randomize) &&
        Objects.equals(this.rating, app.rating) &&
        Objects.equals(this.restrict, app.restrict) &&
        Objects.equals(this.reviewCount, app.reviewCount) &&
        Objects.equals(this.safeName, app.safeName) &&
        Objects.equals(this.statistics, app.statistics) &&
        Objects.equals(this.status, app.status) &&
        Objects.equals(this.submittedDate, app.submittedDate) &&
        Objects.equals(this.type, app.type) &&
        Objects.equals(this.version, app.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, allow, appId, attributes, created, customData, developerId, isLive, lastUpdated, model, name, ownership, randomize, rating, restrict, reviewCount, safeName, statistics, status, submittedDate, type, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class App {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    allow: ").append(toIndentedString(allow)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    isLive: ").append(toIndentedString(isLive)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownership: ").append(toIndentedString(ownership)).append("\n");
    sb.append("    randomize: ").append(toIndentedString(randomize)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    restrict: ").append(toIndentedString(restrict)).append("\n");
    sb.append("    reviewCount: ").append(toIndentedString(reviewCount)).append("\n");
    sb.append("    safeName: ").append(toIndentedString(safeName)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submittedDate: ").append(toIndentedString(submittedDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("allow");
    openapiFields.add("appId");
    openapiFields.add("attributes");
    openapiFields.add("created");
    openapiFields.add("customData");
    openapiFields.add("developerId");
    openapiFields.add("isLive");
    openapiFields.add("lastUpdated");
    openapiFields.add("model");
    openapiFields.add("name");
    openapiFields.add("ownership");
    openapiFields.add("randomize");
    openapiFields.add("rating");
    openapiFields.add("restrict");
    openapiFields.add("reviewCount");
    openapiFields.add("safeName");
    openapiFields.add("statistics");
    openapiFields.add("status");
    openapiFields.add("submittedDate");
    openapiFields.add("type");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allow");
    openapiRequiredFields.add("appId");
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("customData");
    openapiRequiredFields.add("developerId");
    openapiRequiredFields.add("isLive");
    openapiRequiredFields.add("lastUpdated");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("randomize");
    openapiRequiredFields.add("rating");
    openapiRequiredFields.add("restrict");
    openapiRequiredFields.add("safeName");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to App
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!App.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in App is not found in the empty JSON string", App.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!App.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `App` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : App.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("access") != null && !jsonObj.get("access").isJsonNull() && !jsonObj.get("access").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be an array in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      // validate the required field `allow`
      Restrictions.validateJsonElement(jsonObj.get("allow"));
      if (!jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if (!jsonObj.get("developerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("model").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be an array in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }

      JsonArray jsonArraymodel = jsonObj.getAsJsonArray("model");
      // validate the required field `model` (array)
      for (int i = 0; i < jsonArraymodel.size(); i++) {
        Model.validateJsonElement(jsonArraymodel.get(i));
      };
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `ownership`
      if (jsonObj.get("ownership") != null && !jsonObj.get("ownership").isJsonNull()) {
        Ownership.validateJsonElement(jsonObj.get("ownership"));
      }
      // validate the required field `restrict`
      Restrictions.validateJsonElement(jsonObj.get("restrict"));
      // ensure the required json array is present
      if (jsonObj.get("safeName") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("safeName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `safeName` to be an array in the JSON string but got `%s`", jsonObj.get("safeName").toString()));
      }
      // validate the required field `status`
      Status.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!App.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'App' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<App> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(App.class));

       return (TypeAdapter<T>) new TypeAdapter<App>() {
           @Override
           public void write(JsonWriter out, App value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public App read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of App given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of App
   * @throws IOException if the JSON string is invalid with respect to App
   */
  public static App fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, App.class);
  }

  /**
   * Convert an instance of App to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

