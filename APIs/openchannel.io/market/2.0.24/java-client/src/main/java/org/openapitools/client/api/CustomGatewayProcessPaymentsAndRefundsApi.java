/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Transaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomGatewayProcessPaymentsAndRefundsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomGatewayProcessPaymentsAndRefundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomGatewayProcessPaymentsAndRefundsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for customGatewayPaymentOwnershipIdPost
     * @param ownershipId The id of the ownership record involved in this transaction (required)
     * @param amount The total amount paid in cents (required)
     * @param date The date (in milliseconds) of when this payment was made (optional)
     * @param feeAmount The fee (in cents) paid to a payment processors or third parties to process this payment. Default is 0. (optional)
     * @param marketplaceAmount The amount (in cents) paid to the marketplace owner as a commission for the purchase of this app. Defaults based on the commission amount configured for this marketplace. (optional)
     * @param developerAmount The amount (in cents) paid to the owner of the app. Defaults based on the commission amount configured for this marketplace. (optional)
     * @param customData A custom JSON object to attach to this transaction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customGatewayPaymentOwnershipIdPostCall(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom-gateway/payment/{ownershipId}"
            .replace("{" + "ownershipId" + "}", localVarApiClient.escapeString(ownershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (feeAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feeAmount", feeAmount));
        }

        if (marketplaceAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaceAmount", marketplaceAmount));
        }

        if (developerAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerAmount", developerAmount));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customGatewayPaymentOwnershipIdPostValidateBeforeCall(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownershipId' is set
        if (ownershipId == null) {
            throw new ApiException("Missing the required parameter 'ownershipId' when calling customGatewayPaymentOwnershipIdPost(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling customGatewayPaymentOwnershipIdPost(Async)");
        }

        return customGatewayPaymentOwnershipIdPostCall(ownershipId, amount, date, feeAmount, marketplaceAmount, developerAmount, customData, _callback);

    }

    /**
     * Adds a payment for an app on behalf of a user
     * - Results are returned for the market provided within the basic authentication credentials  - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint 
     * @param ownershipId The id of the ownership record involved in this transaction (required)
     * @param amount The total amount paid in cents (required)
     * @param date The date (in milliseconds) of when this payment was made (optional)
     * @param feeAmount The fee (in cents) paid to a payment processors or third parties to process this payment. Default is 0. (optional)
     * @param marketplaceAmount The amount (in cents) paid to the marketplace owner as a commission for the purchase of this app. Defaults based on the commission amount configured for this marketplace. (optional)
     * @param developerAmount The amount (in cents) paid to the owner of the app. Defaults based on the commission amount configured for this marketplace. (optional)
     * @param customData A custom JSON object to attach to this transaction (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Transaction customGatewayPaymentOwnershipIdPost(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData) throws ApiException {
        ApiResponse<Transaction> localVarResp = customGatewayPaymentOwnershipIdPostWithHttpInfo(ownershipId, amount, date, feeAmount, marketplaceAmount, developerAmount, customData);
        return localVarResp.getData();
    }

    /**
     * Adds a payment for an app on behalf of a user
     * - Results are returned for the market provided within the basic authentication credentials  - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint 
     * @param ownershipId The id of the ownership record involved in this transaction (required)
     * @param amount The total amount paid in cents (required)
     * @param date The date (in milliseconds) of when this payment was made (optional)
     * @param feeAmount The fee (in cents) paid to a payment processors or third parties to process this payment. Default is 0. (optional)
     * @param marketplaceAmount The amount (in cents) paid to the marketplace owner as a commission for the purchase of this app. Defaults based on the commission amount configured for this marketplace. (optional)
     * @param developerAmount The amount (in cents) paid to the owner of the app. Defaults based on the commission amount configured for this marketplace. (optional)
     * @param customData A custom JSON object to attach to this transaction (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> customGatewayPaymentOwnershipIdPostWithHttpInfo(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData) throws ApiException {
        okhttp3.Call localVarCall = customGatewayPaymentOwnershipIdPostValidateBeforeCall(ownershipId, amount, date, feeAmount, marketplaceAmount, developerAmount, customData, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a payment for an app on behalf of a user (asynchronously)
     * - Results are returned for the market provided within the basic authentication credentials  - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint 
     * @param ownershipId The id of the ownership record involved in this transaction (required)
     * @param amount The total amount paid in cents (required)
     * @param date The date (in milliseconds) of when this payment was made (optional)
     * @param feeAmount The fee (in cents) paid to a payment processors or third parties to process this payment. Default is 0. (optional)
     * @param marketplaceAmount The amount (in cents) paid to the marketplace owner as a commission for the purchase of this app. Defaults based on the commission amount configured for this marketplace. (optional)
     * @param developerAmount The amount (in cents) paid to the owner of the app. Defaults based on the commission amount configured for this marketplace. (optional)
     * @param customData A custom JSON object to attach to this transaction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customGatewayPaymentOwnershipIdPostAsync(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = customGatewayPaymentOwnershipIdPostValidateBeforeCall(ownershipId, amount, date, feeAmount, marketplaceAmount, developerAmount, customData, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customGatewayRefundOwnershipIdPost
     * @param ownershipId The id of the ownership record involved in this transaction (required)
     * @param amount The total amount refunded in cents (required)
     * @param date The date (in milliseconds) of when this refund was made (optional)
     * @param feeAmount The fee (in cents) recovered from a payment processor or third party to process this payment. The default value is 0 (optional)
     * @param marketplaceAmount The amount (in cents) recovered from the marketplace owner as a commission refund for the purchase of this app (optional)
     * @param developerAmount The amount (in cents) recovered from the owner of the app (optional)
     * @param customData A custom JSON object to attach to this transaction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customGatewayRefundOwnershipIdPostCall(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom-gateway/refund/{ownershipId}"
            .replace("{" + "ownershipId" + "}", localVarApiClient.escapeString(ownershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (feeAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feeAmount", feeAmount));
        }

        if (marketplaceAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaceAmount", marketplaceAmount));
        }

        if (developerAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developerAmount", developerAmount));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customGatewayRefundOwnershipIdPostValidateBeforeCall(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownershipId' is set
        if (ownershipId == null) {
            throw new ApiException("Missing the required parameter 'ownershipId' when calling customGatewayRefundOwnershipIdPost(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling customGatewayRefundOwnershipIdPost(Async)");
        }

        return customGatewayRefundOwnershipIdPostCall(ownershipId, amount, date, feeAmount, marketplaceAmount, developerAmount, customData, _callback);

    }

    /**
     * Fully or partially refund payment for an app on behalf of a user
     * - Results are returned for the market provided within the basic authentication credentials - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint 
     * @param ownershipId The id of the ownership record involved in this transaction (required)
     * @param amount The total amount refunded in cents (required)
     * @param date The date (in milliseconds) of when this refund was made (optional)
     * @param feeAmount The fee (in cents) recovered from a payment processor or third party to process this payment. The default value is 0 (optional)
     * @param marketplaceAmount The amount (in cents) recovered from the marketplace owner as a commission refund for the purchase of this app (optional)
     * @param developerAmount The amount (in cents) recovered from the owner of the app (optional)
     * @param customData A custom JSON object to attach to this transaction (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Transaction customGatewayRefundOwnershipIdPost(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData) throws ApiException {
        ApiResponse<Transaction> localVarResp = customGatewayRefundOwnershipIdPostWithHttpInfo(ownershipId, amount, date, feeAmount, marketplaceAmount, developerAmount, customData);
        return localVarResp.getData();
    }

    /**
     * Fully or partially refund payment for an app on behalf of a user
     * - Results are returned for the market provided within the basic authentication credentials - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint 
     * @param ownershipId The id of the ownership record involved in this transaction (required)
     * @param amount The total amount refunded in cents (required)
     * @param date The date (in milliseconds) of when this refund was made (optional)
     * @param feeAmount The fee (in cents) recovered from a payment processor or third party to process this payment. The default value is 0 (optional)
     * @param marketplaceAmount The amount (in cents) recovered from the marketplace owner as a commission refund for the purchase of this app (optional)
     * @param developerAmount The amount (in cents) recovered from the owner of the app (optional)
     * @param customData A custom JSON object to attach to this transaction (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> customGatewayRefundOwnershipIdPostWithHttpInfo(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData) throws ApiException {
        okhttp3.Call localVarCall = customGatewayRefundOwnershipIdPostValidateBeforeCall(ownershipId, amount, date, feeAmount, marketplaceAmount, developerAmount, customData, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fully or partially refund payment for an app on behalf of a user (asynchronously)
     * - Results are returned for the market provided within the basic authentication credentials - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint 
     * @param ownershipId The id of the ownership record involved in this transaction (required)
     * @param amount The total amount refunded in cents (required)
     * @param date The date (in milliseconds) of when this refund was made (optional)
     * @param feeAmount The fee (in cents) recovered from a payment processor or third party to process this payment. The default value is 0 (optional)
     * @param marketplaceAmount The amount (in cents) recovered from the marketplace owner as a commission refund for the purchase of this app (optional)
     * @param developerAmount The amount (in cents) recovered from the owner of the app (optional)
     * @param customData A custom JSON object to attach to this transaction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed - Payments must be enabled and &#39;Custom&#39; must be selected as the gateway in order to use this API endpoint </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customGatewayRefundOwnershipIdPostAsync(String ownershipId, Integer amount, Long date, Integer feeAmount, Integer marketplaceAmount, Integer developerAmount, String customData, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = customGatewayRefundOwnershipIdPostValidateBeforeCall(ownershipId, amount, date, feeAmount, marketplaceAmount, developerAmount, customData, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
