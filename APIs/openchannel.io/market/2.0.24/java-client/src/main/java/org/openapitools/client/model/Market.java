/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attributes;
import org.openapitools.client.model.CategoryGroups;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A marketplace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:30.118816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Market {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<Attributes> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_GROUPS = "categoryGroups";
  @SerializedName(SERIALIZED_NAME_CATEGORY_GROUPS)
  private List<CategoryGroups> categoryGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKETPLACE_ID = "marketplaceId";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_ID)
  private String marketplaceId;

  public static final String SERIALIZED_NAME_PREVIEW_APP_URL = "previewAppUrl";
  @SerializedName(SERIALIZED_NAME_PREVIEW_APP_URL)
  private String previewAppUrl;

  public static final String SERIALIZED_NAME_VIEW_APP_URL = "viewAppUrl";
  @SerializedName(SERIALIZED_NAME_VIEW_APP_URL)
  private String viewAppUrl;

  public Market() {
  }

  public Market attributes(List<Attributes> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Market addAttributesItem(Attributes attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * The different app attributes supported by this marketplace
   * @return attributes
   */
  @javax.annotation.Nonnull
  public List<Attributes> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<Attributes> attributes) {
    this.attributes = attributes;
  }


  public Market categoryGroups(List<CategoryGroups> categoryGroups) {
    this.categoryGroups = categoryGroups;
    return this;
  }

  public Market addCategoryGroupsItem(CategoryGroups categoryGroupsItem) {
    if (this.categoryGroups == null) {
      this.categoryGroups = new ArrayList<>();
    }
    this.categoryGroups.add(categoryGroupsItem);
    return this;
  }

  /**
   * The category groups supported by this marketplace
   * @return categoryGroups
   */
  @javax.annotation.Nullable
  public List<CategoryGroups> getCategoryGroups() {
    return categoryGroups;
  }

  public void setCategoryGroups(List<CategoryGroups> categoryGroups) {
    this.categoryGroups = categoryGroups;
  }


  public Market marketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
    return this;
  }

  /**
   * The id of this marketplace
   * @return marketplaceId
   */
  @javax.annotation.Nonnull
  public String getMarketplaceId() {
    return marketplaceId;
  }

  public void setMarketplaceId(String marketplaceId) {
    this.marketplaceId = marketplaceId;
  }


  public Market previewAppUrl(String previewAppUrl) {
    this.previewAppUrl = previewAppUrl;
    return this;
  }

  /**
   * The URL template for previewing apps on this marketplace
   * @return previewAppUrl
   */
  @javax.annotation.Nonnull
  public String getPreviewAppUrl() {
    return previewAppUrl;
  }

  public void setPreviewAppUrl(String previewAppUrl) {
    this.previewAppUrl = previewAppUrl;
  }


  public Market viewAppUrl(String viewAppUrl) {
    this.viewAppUrl = viewAppUrl;
    return this;
  }

  /**
   * The URL template for viewing apps on this marketplace
   * @return viewAppUrl
   */
  @javax.annotation.Nonnull
  public String getViewAppUrl() {
    return viewAppUrl;
  }

  public void setViewAppUrl(String viewAppUrl) {
    this.viewAppUrl = viewAppUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Market market = (Market) o;
    return Objects.equals(this.attributes, market.attributes) &&
        Objects.equals(this.categoryGroups, market.categoryGroups) &&
        Objects.equals(this.marketplaceId, market.marketplaceId) &&
        Objects.equals(this.previewAppUrl, market.previewAppUrl) &&
        Objects.equals(this.viewAppUrl, market.viewAppUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, categoryGroups, marketplaceId, previewAppUrl, viewAppUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Market {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    categoryGroups: ").append(toIndentedString(categoryGroups)).append("\n");
    sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
    sb.append("    previewAppUrl: ").append(toIndentedString(previewAppUrl)).append("\n");
    sb.append("    viewAppUrl: ").append(toIndentedString(viewAppUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("categoryGroups");
    openapiFields.add("marketplaceId");
    openapiFields.add("previewAppUrl");
    openapiFields.add("viewAppUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("marketplaceId");
    openapiRequiredFields.add("previewAppUrl");
    openapiRequiredFields.add("viewAppUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Market
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Market.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Market is not found in the empty JSON string", Market.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Market.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Market` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Market.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }

      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      // validate the required field `attributes` (array)
      for (int i = 0; i < jsonArrayattributes.size(); i++) {
        Attributes.validateJsonElement(jsonArrayattributes.get(i));
      };
      if (jsonObj.get("categoryGroups") != null && !jsonObj.get("categoryGroups").isJsonNull()) {
        JsonArray jsonArraycategoryGroups = jsonObj.getAsJsonArray("categoryGroups");
        if (jsonArraycategoryGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categoryGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categoryGroups` to be an array in the JSON string but got `%s`", jsonObj.get("categoryGroups").toString()));
          }

          // validate the optional field `categoryGroups` (array)
          for (int i = 0; i < jsonArraycategoryGroups.size(); i++) {
            CategoryGroups.validateJsonElement(jsonArraycategoryGroups.get(i));
          };
        }
      }
      if (!jsonObj.get("marketplaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceId").toString()));
      }
      if (!jsonObj.get("previewAppUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previewAppUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previewAppUrl").toString()));
      }
      if (!jsonObj.get("viewAppUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewAppUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewAppUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Market.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Market' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Market> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Market.class));

       return (TypeAdapter<T>) new TypeAdapter<Market>() {
           @Override
           public void write(JsonWriter out, Market value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Market read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Market given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Market
   * @throws IOException if the JSON string is invalid with respect to Market
   */
  public static Market fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Market.class);
  }

  /**
   * Convert an instance of Market to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

