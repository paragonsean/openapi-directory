/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Model;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:30.118816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ownership {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private Object customData;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Long date;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developerId";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private Long expires;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private Model model;

  public static final String SERIALIZED_NAME_OWNERSHIP_ID = "ownershipId";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_ID)
  private String ownershipId;

  /**
   * The current ownership status for this app
   */
  @JsonAdapter(OwnershipStatusEnum.Adapter.class)
  public enum OwnershipStatusEnum {
    PENDING("pending"),
    
    ACTIVE("active"),
    
    UNINSTALLED("uninstalled"),
    
    CANCELLED("cancelled");

    private String value;

    OwnershipStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnershipStatusEnum fromValue(String value) {
      for (OwnershipStatusEnum b : OwnershipStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnershipStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnershipStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnershipStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnershipStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnershipStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNERSHIP_STATUS = "ownershipStatus";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_STATUS)
  private OwnershipStatusEnum ownershipStatus;

  /**
   * The current ownership type for this app
   */
  @JsonAdapter(OwnershipTypeEnum.Adapter.class)
  public enum OwnershipTypeEnum {
    FULL("full"),
    
    SUBSCRIPTION("subscription"),
    
    TRIAL("trial");

    private String value;

    OwnershipTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnershipTypeEnum fromValue(String value) {
      for (OwnershipTypeEnum b : OwnershipTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnershipTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnershipTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnershipTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnershipTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnershipTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNERSHIP_TYPE = "ownershipType";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_TYPE)
  private OwnershipTypeEnum ownershipType;

  public static final String SERIALIZED_NAME_UNINSTALL_DATE = "uninstallDate";
  @SerializedName(SERIALIZED_NAME_UNINSTALL_DATE)
  private Long uninstallDate;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Ownership() {
  }

  public Ownership appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The id of the app that is owned
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public Ownership customData(Object customData) {
    this.customData = customData;
    return this;
  }

  /**
   * A custom JSON object that you can create and attach to this record
   * @return customData
   */
  @javax.annotation.Nullable
  public Object getCustomData() {
    return customData;
  }

  public void setCustomData(Object customData) {
    this.customData = customData;
  }


  public Ownership date(Long date) {
    this.date = date;
    return this;
  }

  /**
   * The date (in millis) of when this app was owned
   * @return date
   */
  @javax.annotation.Nonnull
  public Long getDate() {
    return date;
  }

  public void setDate(Long date) {
    this.date = date;
  }


  public Ownership developerId(String developerId) {
    this.developerId = developerId;
    return this;
  }

  /**
   * The id of the developer for this app
   * @return developerId
   */
  @javax.annotation.Nonnull
  public String getDeveloperId() {
    return developerId;
  }

  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }


  public Ownership expires(Long expires) {
    this.expires = expires;
    return this;
  }

  /**
   * The date (in millis) of when this app ownership expires
   * @return expires
   */
  @javax.annotation.Nullable
  public Long getExpires() {
    return expires;
  }

  public void setExpires(Long expires) {
    this.expires = expires;
  }


  public Ownership model(Model model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nonnull
  public Model getModel() {
    return model;
  }

  public void setModel(Model model) {
    this.model = model;
  }


  public Ownership ownershipId(String ownershipId) {
    this.ownershipId = ownershipId;
    return this;
  }

  /**
   * The id of this ownership
   * @return ownershipId
   */
  @javax.annotation.Nonnull
  public String getOwnershipId() {
    return ownershipId;
  }

  public void setOwnershipId(String ownershipId) {
    this.ownershipId = ownershipId;
  }


  public Ownership ownershipStatus(OwnershipStatusEnum ownershipStatus) {
    this.ownershipStatus = ownershipStatus;
    return this;
  }

  /**
   * The current ownership status for this app
   * @return ownershipStatus
   */
  @javax.annotation.Nonnull
  public OwnershipStatusEnum getOwnershipStatus() {
    return ownershipStatus;
  }

  public void setOwnershipStatus(OwnershipStatusEnum ownershipStatus) {
    this.ownershipStatus = ownershipStatus;
  }


  public Ownership ownershipType(OwnershipTypeEnum ownershipType) {
    this.ownershipType = ownershipType;
    return this;
  }

  /**
   * The current ownership type for this app
   * @return ownershipType
   */
  @javax.annotation.Nonnull
  public OwnershipTypeEnum getOwnershipType() {
    return ownershipType;
  }

  public void setOwnershipType(OwnershipTypeEnum ownershipType) {
    this.ownershipType = ownershipType;
  }


  public Ownership uninstallDate(Long uninstallDate) {
    this.uninstallDate = uninstallDate;
    return this;
  }

  /**
   * The date (in millis) of when this app was uninstalled
   * @return uninstallDate
   */
  @javax.annotation.Nullable
  public Long getUninstallDate() {
    return uninstallDate;
  }

  public void setUninstallDate(Long uninstallDate) {
    this.uninstallDate = uninstallDate;
  }


  public Ownership userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The id of the user that owns this app
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ownership ownership = (Ownership) o;
    return Objects.equals(this.appId, ownership.appId) &&
        Objects.equals(this.customData, ownership.customData) &&
        Objects.equals(this.date, ownership.date) &&
        Objects.equals(this.developerId, ownership.developerId) &&
        Objects.equals(this.expires, ownership.expires) &&
        Objects.equals(this.model, ownership.model) &&
        Objects.equals(this.ownershipId, ownership.ownershipId) &&
        Objects.equals(this.ownershipStatus, ownership.ownershipStatus) &&
        Objects.equals(this.ownershipType, ownership.ownershipType) &&
        Objects.equals(this.uninstallDate, ownership.uninstallDate) &&
        Objects.equals(this.userId, ownership.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, customData, date, developerId, expires, model, ownershipId, ownershipStatus, ownershipType, uninstallDate, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ownership {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    ownershipId: ").append(toIndentedString(ownershipId)).append("\n");
    sb.append("    ownershipStatus: ").append(toIndentedString(ownershipStatus)).append("\n");
    sb.append("    ownershipType: ").append(toIndentedString(ownershipType)).append("\n");
    sb.append("    uninstallDate: ").append(toIndentedString(uninstallDate)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("customData");
    openapiFields.add("date");
    openapiFields.add("developerId");
    openapiFields.add("expires");
    openapiFields.add("model");
    openapiFields.add("ownershipId");
    openapiFields.add("ownershipStatus");
    openapiFields.add("ownershipType");
    openapiFields.add("uninstallDate");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appId");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("developerId");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("ownershipId");
    openapiRequiredFields.add("ownershipStatus");
    openapiRequiredFields.add("ownershipType");
    openapiRequiredFields.add("userId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ownership
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ownership.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ownership is not found in the empty JSON string", Ownership.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ownership.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ownership` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Ownership.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if (!jsonObj.get("developerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerId").toString()));
      }
      // validate the required field `model`
      Model.validateJsonElement(jsonObj.get("model"));
      if (!jsonObj.get("ownershipId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipId").toString()));
      }
      if (!jsonObj.get("ownershipStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipStatus").toString()));
      }
      // validate the required field `ownershipStatus`
      OwnershipStatusEnum.validateJsonElement(jsonObj.get("ownershipStatus"));
      if (!jsonObj.get("ownershipType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipType").toString()));
      }
      // validate the required field `ownershipType`
      OwnershipTypeEnum.validateJsonElement(jsonObj.get("ownershipType"));
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ownership.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ownership' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ownership> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ownership.class));

       return (TypeAdapter<T>) new TypeAdapter<Ownership>() {
           @Override
           public void write(JsonWriter out, Ownership value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ownership read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ownership given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ownership
   * @throws IOException if the JSON string is invalid with respect to Ownership
   */
  public static Ownership fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ownership.class);
  }

  /**
   * Convert an instance of Ownership to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

