/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Review;
import org.openapitools.client.model.ReviewPages;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReviewsFindAndModifyReviewsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReviewsFindAndModifyReviewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReviewsFindAndModifyReviewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reviewsGet
     * @param query A query document. Example: {&#39;rating&#39;: 500} matches all the reviews that have a rating of 500.  (optional)
     * @param sort A sort document. Example: {&#39;rating&#39;:1} sorts the results by rating in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsGetCall(String query, String sort, Integer pageNumber, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsGetValidateBeforeCall(String query, String sort, Integer pageNumber, Integer limit, final ApiCallback _callback) throws ApiException {
        return reviewsGetCall(query, sort, pageNumber, limit, _callback);

    }

    /**
     * Find reviews for a particular App and marketplace. Results are automatically paginated when limit is set
     * - Results are paginated and the default is value is 100 if no limit is provided 
     * @param query A query document. Example: {&#39;rating&#39;: 500} matches all the reviews that have a rating of 500.  (optional)
     * @param sort A sort document. Example: {&#39;rating&#39;:1} sorts the results by rating in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @return ReviewPages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ReviewPages reviewsGet(String query, String sort, Integer pageNumber, Integer limit) throws ApiException {
        ApiResponse<ReviewPages> localVarResp = reviewsGetWithHttpInfo(query, sort, pageNumber, limit);
        return localVarResp.getData();
    }

    /**
     * Find reviews for a particular App and marketplace. Results are automatically paginated when limit is set
     * - Results are paginated and the default is value is 100 if no limit is provided 
     * @param query A query document. Example: {&#39;rating&#39;: 500} matches all the reviews that have a rating of 500.  (optional)
     * @param sort A sort document. Example: {&#39;rating&#39;:1} sorts the results by rating in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @return ApiResponse&lt;ReviewPages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReviewPages> reviewsGetWithHttpInfo(String query, String sort, Integer pageNumber, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = reviewsGetValidateBeforeCall(query, sort, pageNumber, limit, null);
        Type localVarReturnType = new TypeToken<ReviewPages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find reviews for a particular App and marketplace. Results are automatically paginated when limit is set (asynchronously)
     * - Results are paginated and the default is value is 100 if no limit is provided 
     * @param query A query document. Example: {&#39;rating&#39;: 500} matches all the reviews that have a rating of 500.  (optional)
     * @param sort A sort document. Example: {&#39;rating&#39;:1} sorts the results by rating in ascending order (optional)
     * @param pageNumber The result set page number to be returned (optional)
     * @param limit The maximum number of results to return per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsGetAsync(String query, String sort, Integer pageNumber, Integer limit, final ApiCallback<ReviewPages> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsGetValidateBeforeCall(query, sort, pageNumber, limit, _callback);
        Type localVarReturnType = new TypeToken<ReviewPages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsPost
     * @param appId The id of the App that will own this review (required)
     * @param userId The id of the User that is posting this review (required)
     * @param headline The review&#39;s headline. Limited to 50 characters. (required)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (required)
     * @param description The review&#39;s description. Limited to 2000 characters. (required)
     * @param userAccountId The id of the User account that is posting this review (optional)
     * @param type The type for this review (optional)
     * @param mustOwnApp True if a review can be created only by a user that has owned the app. The default is True. (optional)
     * @param autoApprove True if the review should be automatically approved. The default is False. (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Users must have owned the app before they can post a review; Anonymous users cannot post reviews </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - The User has already reviewed this app </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsPostCall(String appId, String userId, String headline, Integer rating, String description, String userAccountId, String type, Boolean mustOwnApp, Boolean autoApprove, String customData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appId", appId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userAccountId", userAccountId));
        }

        if (headline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headline", headline));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (mustOwnApp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mustOwnApp", mustOwnApp));
        }

        if (autoApprove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoApprove", autoApprove));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsPostValidateBeforeCall(String appId, String userId, String headline, Integer rating, String description, String userAccountId, String type, Boolean mustOwnApp, Boolean autoApprove, String customData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling reviewsPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling reviewsPost(Async)");
        }

        // verify the required parameter 'headline' is set
        if (headline == null) {
            throw new ApiException("Missing the required parameter 'headline' when calling reviewsPost(Async)");
        }

        // verify the required parameter 'rating' is set
        if (rating == null) {
            throw new ApiException("Missing the required parameter 'rating' when calling reviewsPost(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling reviewsPost(Async)");
        }

        return reviewsPostCall(appId, userId, headline, rating, description, userAccountId, type, mustOwnApp, autoApprove, customData, _callback);

    }

    /**
     * Post a review from a User and returns the new post
     * - Only authenticated users are able to post reviews - Returns the newly created review 
     * @param appId The id of the App that will own this review (required)
     * @param userId The id of the User that is posting this review (required)
     * @param headline The review&#39;s headline. Limited to 50 characters. (required)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (required)
     * @param description The review&#39;s description. Limited to 2000 characters. (required)
     * @param userAccountId The id of the User account that is posting this review (optional)
     * @param type The type for this review (optional)
     * @param mustOwnApp True if a review can be created only by a user that has owned the app. The default is True. (optional)
     * @param autoApprove True if the review should be automatically approved. The default is False. (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return Review
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Users must have owned the app before they can post a review; Anonymous users cannot post reviews </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - The User has already reviewed this app </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Review reviewsPost(String appId, String userId, String headline, Integer rating, String description, String userAccountId, String type, Boolean mustOwnApp, Boolean autoApprove, String customData) throws ApiException {
        ApiResponse<Review> localVarResp = reviewsPostWithHttpInfo(appId, userId, headline, rating, description, userAccountId, type, mustOwnApp, autoApprove, customData);
        return localVarResp.getData();
    }

    /**
     * Post a review from a User and returns the new post
     * - Only authenticated users are able to post reviews - Returns the newly created review 
     * @param appId The id of the App that will own this review (required)
     * @param userId The id of the User that is posting this review (required)
     * @param headline The review&#39;s headline. Limited to 50 characters. (required)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (required)
     * @param description The review&#39;s description. Limited to 2000 characters. (required)
     * @param userAccountId The id of the User account that is posting this review (optional)
     * @param type The type for this review (optional)
     * @param mustOwnApp True if a review can be created only by a user that has owned the app. The default is True. (optional)
     * @param autoApprove True if the review should be automatically approved. The default is False. (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return ApiResponse&lt;Review&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Users must have owned the app before they can post a review; Anonymous users cannot post reviews </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - The User has already reviewed this app </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Review> reviewsPostWithHttpInfo(String appId, String userId, String headline, Integer rating, String description, String userAccountId, String type, Boolean mustOwnApp, Boolean autoApprove, String customData) throws ApiException {
        okhttp3.Call localVarCall = reviewsPostValidateBeforeCall(appId, userId, headline, rating, description, userAccountId, type, mustOwnApp, autoApprove, customData, null);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post a review from a User and returns the new post (asynchronously)
     * - Only authenticated users are able to post reviews - Returns the newly created review 
     * @param appId The id of the App that will own this review (required)
     * @param userId The id of the User that is posting this review (required)
     * @param headline The review&#39;s headline. Limited to 50 characters. (required)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (required)
     * @param description The review&#39;s description. Limited to 2000 characters. (required)
     * @param userAccountId The id of the User account that is posting this review (optional)
     * @param type The type for this review (optional)
     * @param mustOwnApp True if a review can be created only by a user that has owned the app. The default is True. (optional)
     * @param autoApprove True if the review should be automatically approved. The default is False. (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Users must have owned the app before they can post a review; Anonymous users cannot post reviews </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already Exists - The User has already reviewed this app </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsPostAsync(String appId, String userId, String headline, Integer rating, String description, String userAccountId, String type, Boolean mustOwnApp, Boolean autoApprove, String customData, final ApiCallback<Review> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsPostValidateBeforeCall(appId, userId, headline, rating, description, userAccountId, type, mustOwnApp, autoApprove, customData, _callback);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsReviewIdDelete
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is removing this review (required)
     * @param userAccountId The id of the User account that is emoving this review (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsReviewIdDeleteCall(String reviewId, String userId, String userAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userAccountId", userAccountId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsReviewIdDeleteValidateBeforeCall(String reviewId, String userId, String userAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsReviewIdDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling reviewsReviewIdDelete(Async)");
        }

        return reviewsReviewIdDeleteCall(reviewId, userId, userAccountId, _callback);

    }

    /**
     * Remove a review
     * - Only the review author is able to remove their review 
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is removing this review (required)
     * @param userAccountId The id of the User account that is emoving this review (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
     </table>
     */
    public void reviewsReviewIdDelete(String reviewId, String userId, String userAccountId) throws ApiException {
        reviewsReviewIdDeleteWithHttpInfo(reviewId, userId, userAccountId);
    }

    /**
     * Remove a review
     * - Only the review author is able to remove their review 
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is removing this review (required)
     * @param userAccountId The id of the User account that is emoving this review (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reviewsReviewIdDeleteWithHttpInfo(String reviewId, String userId, String userAccountId) throws ApiException {
        okhttp3.Call localVarCall = reviewsReviewIdDeleteValidateBeforeCall(reviewId, userId, userAccountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a review (asynchronously)
     * - Only the review author is able to remove their review 
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is removing this review (required)
     * @param userAccountId The id of the User account that is emoving this review (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsReviewIdDeleteAsync(String reviewId, String userId, String userAccountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsReviewIdDeleteValidateBeforeCall(reviewId, userId, userAccountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsReviewIdGet
     * @param reviewId The id of the review to be located (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Review is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsReviewIdGetCall(String reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsReviewIdGetValidateBeforeCall(String reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsReviewIdGet(Async)");
        }

        return reviewsReviewIdGetCall(reviewId, _callback);

    }

    /**
     * Find a Review within a particular App and marketplace
     * 
     * @param reviewId The id of the review to be located (required)
     * @return Review
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Review is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Review reviewsReviewIdGet(String reviewId) throws ApiException {
        ApiResponse<Review> localVarResp = reviewsReviewIdGetWithHttpInfo(reviewId);
        return localVarResp.getData();
    }

    /**
     * Find a Review within a particular App and marketplace
     * 
     * @param reviewId The id of the review to be located (required)
     * @return ApiResponse&lt;Review&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Review is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Review> reviewsReviewIdGetWithHttpInfo(String reviewId) throws ApiException {
        okhttp3.Call localVarCall = reviewsReviewIdGetValidateBeforeCall(reviewId, null);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a Review within a particular App and marketplace (asynchronously)
     * 
     * @param reviewId The id of the review to be located (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Review is not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsReviewIdGetAsync(String reviewId, final ApiCallback<Review> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsReviewIdGetValidateBeforeCall(reviewId, _callback);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsReviewIdPatch
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is updating this review (required)
     * @param userAccountId The id of the User account that is posting this review (optional)
     * @param headline The review&#39;s headline. Limited to 50 characters. (optional)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (optional)
     * @param description The review&#39;s description. Limited to 2000 characters. (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Anonymous users cannot update reviews </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - This review was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsReviewIdPatchCall(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userAccountId", userAccountId));
        }

        if (headline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headline", headline));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsReviewIdPatchValidateBeforeCall(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsReviewIdPatch(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling reviewsReviewIdPatch(Async)");
        }

        return reviewsReviewIdPatchCall(reviewId, userId, userAccountId, headline, rating, description, customData, _callback);

    }

    /**
     * Update a review fields
     * - Only the review author is able to update their review - Returns the newly updated review 
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is updating this review (required)
     * @param userAccountId The id of the User account that is posting this review (optional)
     * @param headline The review&#39;s headline. Limited to 50 characters. (optional)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (optional)
     * @param description The review&#39;s description. Limited to 2000 characters. (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return Review
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Anonymous users cannot update reviews </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - This review was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Review reviewsReviewIdPatch(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData) throws ApiException {
        ApiResponse<Review> localVarResp = reviewsReviewIdPatchWithHttpInfo(reviewId, userId, userAccountId, headline, rating, description, customData);
        return localVarResp.getData();
    }

    /**
     * Update a review fields
     * - Only the review author is able to update their review - Returns the newly updated review 
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is updating this review (required)
     * @param userAccountId The id of the User account that is posting this review (optional)
     * @param headline The review&#39;s headline. Limited to 50 characters. (optional)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (optional)
     * @param description The review&#39;s description. Limited to 2000 characters. (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return ApiResponse&lt;Review&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Anonymous users cannot update reviews </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - This review was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Review> reviewsReviewIdPatchWithHttpInfo(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData) throws ApiException {
        okhttp3.Call localVarCall = reviewsReviewIdPatchValidateBeforeCall(reviewId, userId, userAccountId, headline, rating, description, customData, null);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a review fields (asynchronously)
     * - Only the review author is able to update their review - Returns the newly updated review 
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is updating this review (required)
     * @param userAccountId The id of the User account that is posting this review (optional)
     * @param headline The review&#39;s headline. Limited to 50 characters. (optional)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (optional)
     * @param description The review&#39;s description. Limited to 2000 characters. (optional)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Anonymous users cannot update reviews </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - This review was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsReviewIdPatchAsync(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData, final ApiCallback<Review> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsReviewIdPatchValidateBeforeCall(reviewId, userId, userAccountId, headline, rating, description, customData, _callback);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsReviewIdPost
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is updating this review (required)
     * @param userAccountId The id of the User account that is posting this review (required)
     * @param headline The review&#39;s headline. Limited to 50 characters. (required)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (required)
     * @param description The review&#39;s description. Limited to 2000 characters. (required)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Anonymous users cannot update reviews </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - This review was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsReviewIdPostCall(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userAccountId", userAccountId));
        }

        if (headline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headline", headline));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (customData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customData", customData));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsReviewIdPostValidateBeforeCall(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsReviewIdPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling reviewsReviewIdPost(Async)");
        }

        // verify the required parameter 'userAccountId' is set
        if (userAccountId == null) {
            throw new ApiException("Missing the required parameter 'userAccountId' when calling reviewsReviewIdPost(Async)");
        }

        // verify the required parameter 'headline' is set
        if (headline == null) {
            throw new ApiException("Missing the required parameter 'headline' when calling reviewsReviewIdPost(Async)");
        }

        // verify the required parameter 'rating' is set
        if (rating == null) {
            throw new ApiException("Missing the required parameter 'rating' when calling reviewsReviewIdPost(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling reviewsReviewIdPost(Async)");
        }

        return reviewsReviewIdPostCall(reviewId, userId, userAccountId, headline, rating, description, customData, _callback);

    }

    /**
     * Update a review from a User and returns the new post
     * - Only the review author is able to update their review - Returns the newly updated review 
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is updating this review (required)
     * @param userAccountId The id of the User account that is posting this review (required)
     * @param headline The review&#39;s headline. Limited to 50 characters. (required)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (required)
     * @param description The review&#39;s description. Limited to 2000 characters. (required)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return Review
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Anonymous users cannot update reviews </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - This review was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Review reviewsReviewIdPost(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData) throws ApiException {
        ApiResponse<Review> localVarResp = reviewsReviewIdPostWithHttpInfo(reviewId, userId, userAccountId, headline, rating, description, customData);
        return localVarResp.getData();
    }

    /**
     * Update a review from a User and returns the new post
     * - Only the review author is able to update their review - Returns the newly updated review 
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is updating this review (required)
     * @param userAccountId The id of the User account that is posting this review (required)
     * @param headline The review&#39;s headline. Limited to 50 characters. (required)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (required)
     * @param description The review&#39;s description. Limited to 2000 characters. (required)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @return ApiResponse&lt;Review&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Anonymous users cannot update reviews </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - This review was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Review> reviewsReviewIdPostWithHttpInfo(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData) throws ApiException {
        okhttp3.Call localVarCall = reviewsReviewIdPostValidateBeforeCall(reviewId, userId, userAccountId, headline, rating, description, customData, null);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a review from a User and returns the new post (asynchronously)
     * - Only the review author is able to update their review - Returns the newly updated review 
     * @param reviewId The id of the Review to be updated (required)
     * @param userId The id of the User that is updating this review (required)
     * @param userAccountId The id of the User account that is posting this review (required)
     * @param headline The review&#39;s headline. Limited to 50 characters. (required)
     * @param rating The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars) (required)
     * @param description The review&#39;s description. Limited to 2000 characters. (required)
     * @param customData A custom JSON object that you can create and attach to this record (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request - Required parameters are missing, malformed or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Anonymous users cannot update reviews </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - This review was not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsReviewIdPostAsync(String reviewId, String userId, String userAccountId, String headline, Integer rating, String description, String customData, final ApiCallback<Review> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsReviewIdPostValidateBeforeCall(reviewId, userId, userAccountId, headline, rating, description, customData, _callback);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
