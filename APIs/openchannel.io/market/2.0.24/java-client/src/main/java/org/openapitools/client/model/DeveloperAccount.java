/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Developer Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:30.118816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeveloperAccount {
  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private Object customData;

  public static final String SERIALIZED_NAME_DEVELOPER_ACCOUNT_ID = "developerAccountId";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ACCOUNT_ID)
  private String developerAccountId;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developerId";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public DeveloperAccount() {
  }

  public DeveloperAccount customData(Object customData) {
    this.customData = customData;
    return this;
  }

  /**
   * A custom JSON object that you can create and attach to this record
   * @return customData
   */
  @javax.annotation.Nullable
  public Object getCustomData() {
    return customData;
  }

  public void setCustomData(Object customData) {
    this.customData = customData;
  }


  public DeveloperAccount developerAccountId(String developerAccountId) {
    this.developerAccountId = developerAccountId;
    return this;
  }

  /**
   * The id of this developer account
   * @return developerAccountId
   */
  @javax.annotation.Nonnull
  public String getDeveloperAccountId() {
    return developerAccountId;
  }

  public void setDeveloperAccountId(String developerAccountId) {
    this.developerAccountId = developerAccountId;
  }


  public DeveloperAccount developerId(String developerId) {
    this.developerId = developerId;
    return this;
  }

  /**
   * The id of the developer that this account belongs to
   * @return developerId
   */
  @javax.annotation.Nonnull
  public String getDeveloperId() {
    return developerId;
  }

  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }


  public DeveloperAccount email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The contact email address
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public DeveloperAccount name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the account
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeveloperAccount developerAccount = (DeveloperAccount) o;
    return Objects.equals(this.customData, developerAccount.customData) &&
        Objects.equals(this.developerAccountId, developerAccount.developerAccountId) &&
        Objects.equals(this.developerId, developerAccount.developerId) &&
        Objects.equals(this.email, developerAccount.email) &&
        Objects.equals(this.name, developerAccount.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customData, developerAccountId, developerId, email, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeveloperAccount {\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    developerAccountId: ").append(toIndentedString(developerAccountId)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customData");
    openapiFields.add("developerAccountId");
    openapiFields.add("developerId");
    openapiFields.add("email");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("developerAccountId");
    openapiRequiredFields.add("developerId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeveloperAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeveloperAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeveloperAccount is not found in the empty JSON string", DeveloperAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeveloperAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeveloperAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeveloperAccount.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("developerAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerAccountId").toString()));
      }
      if (!jsonObj.get("developerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeveloperAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeveloperAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeveloperAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeveloperAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<DeveloperAccount>() {
           @Override
           public void write(JsonWriter out, DeveloperAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeveloperAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeveloperAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeveloperAccount
   * @throws IOException if the JSON string is invalid with respect to DeveloperAccount
   */
  public static DeveloperAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeveloperAccount.class);
  }

  /**
   * Convert an instance of DeveloperAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

