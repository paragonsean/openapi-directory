/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Review
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:30.118816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Review {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private String customData;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEADLINE = "headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private String headline;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Integer rating;

  public static final String SERIALIZED_NAME_REPORT_DATE = "reportDate";
  @SerializedName(SERIALIZED_NAME_REPORT_DATE)
  private Long reportDate;

  public static final String SERIALIZED_NAME_REVIEW_ID = "reviewId";
  @SerializedName(SERIALIZED_NAME_REVIEW_ID)
  private String reviewId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_USER_ACCOUNT = "userAccount";
  @SerializedName(SERIALIZED_NAME_USER_ACCOUNT)
  private UserAccount userAccount;

  public static final String SERIALIZED_NAME_USER_ACCOUNT_ID = "userAccountId";
  @SerializedName(SERIALIZED_NAME_USER_ACCOUNT_ID)
  private String userAccountId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Review() {
  }

  public Review appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The Id of the App that owns this review
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public Review customData(String customData) {
    this.customData = customData;
    return this;
  }

  /**
   * A custom JSON object that you can create and attach to this record
   * @return customData
   */
  @javax.annotation.Nonnull
  public String getCustomData() {
    return customData;
  }

  public void setCustomData(String customData) {
    this.customData = customData;
  }


  public Review description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The review&#39;s description. Limited to 2000 characters.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Review headline(String headline) {
    this.headline = headline;
    return this;
  }

  /**
   * The review&#39;s headline. Limited to 50 characters.
   * @return headline
   */
  @javax.annotation.Nonnull
  public String getHeadline() {
    return headline;
  }

  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public Review rating(Integer rating) {
    this.rating = rating;
    return this;
  }

  /**
   * The rating given within this review. The rating is represented as an integer between 100 and 500 (1 - 5 stars)
   * @return rating
   */
  @javax.annotation.Nonnull
  public Integer getRating() {
    return rating;
  }

  public void setRating(Integer rating) {
    this.rating = rating;
  }


  public Review reportDate(Long reportDate) {
    this.reportDate = reportDate;
    return this;
  }

  /**
   * The date (in millis) this Review was posted
   * @return reportDate
   */
  @javax.annotation.Nonnull
  public Long getReportDate() {
    return reportDate;
  }

  public void setReportDate(Long reportDate) {
    this.reportDate = reportDate;
  }


  public Review reviewId(String reviewId) {
    this.reviewId = reviewId;
    return this;
  }

  /**
   * The id for this review.
   * @return reviewId
   */
  @javax.annotation.Nonnull
  public String getReviewId() {
    return reviewId;
  }

  public void setReviewId(String reviewId) {
    this.reviewId = reviewId;
  }


  public Review status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public Review type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type for this review
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Review user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }


  public Review userAccount(UserAccount userAccount) {
    this.userAccount = userAccount;
    return this;
  }

  /**
   * Get userAccount
   * @return userAccount
   */
  @javax.annotation.Nullable
  public UserAccount getUserAccount() {
    return userAccount;
  }

  public void setUserAccount(UserAccount userAccount) {
    this.userAccount = userAccount;
  }


  public Review userAccountId(String userAccountId) {
    this.userAccountId = userAccountId;
    return this;
  }

  /**
   * The id of the user account that posted this review
   * @return userAccountId
   */
  @javax.annotation.Nullable
  public String getUserAccountId() {
    return userAccountId;
  }

  public void setUserAccountId(String userAccountId) {
    this.userAccountId = userAccountId;
  }


  public Review userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The id of the User that posted this review
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Review review = (Review) o;
    return Objects.equals(this.appId, review.appId) &&
        Objects.equals(this.customData, review.customData) &&
        Objects.equals(this.description, review.description) &&
        Objects.equals(this.headline, review.headline) &&
        Objects.equals(this.rating, review.rating) &&
        Objects.equals(this.reportDate, review.reportDate) &&
        Objects.equals(this.reviewId, review.reviewId) &&
        Objects.equals(this.status, review.status) &&
        Objects.equals(this.type, review.type) &&
        Objects.equals(this.user, review.user) &&
        Objects.equals(this.userAccount, review.userAccount) &&
        Objects.equals(this.userAccountId, review.userAccountId) &&
        Objects.equals(this.userId, review.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, customData, description, headline, rating, reportDate, reviewId, status, type, user, userAccount, userAccountId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Review {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    reportDate: ").append(toIndentedString(reportDate)).append("\n");
    sb.append("    reviewId: ").append(toIndentedString(reviewId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userAccount: ").append(toIndentedString(userAccount)).append("\n");
    sb.append("    userAccountId: ").append(toIndentedString(userAccountId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("customData");
    openapiFields.add("description");
    openapiFields.add("headline");
    openapiFields.add("rating");
    openapiFields.add("reportDate");
    openapiFields.add("reviewId");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("user");
    openapiFields.add("userAccount");
    openapiFields.add("userAccountId");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appId");
    openapiRequiredFields.add("customData");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("headline");
    openapiRequiredFields.add("rating");
    openapiRequiredFields.add("reportDate");
    openapiRequiredFields.add("reviewId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("userId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Review
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Review.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Review is not found in the empty JSON string", Review.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Review.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Review` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Review.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if (!jsonObj.get("customData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customData").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("headline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headline").toString()));
      }
      if (!jsonObj.get("reviewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewId").toString()));
      }
      // validate the required field `status`
      Status.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `userAccount`
      if (jsonObj.get("userAccount") != null && !jsonObj.get("userAccount").isJsonNull()) {
        UserAccount.validateJsonElement(jsonObj.get("userAccount"));
      }
      if ((jsonObj.get("userAccountId") != null && !jsonObj.get("userAccountId").isJsonNull()) && !jsonObj.get("userAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAccountId").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Review.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Review' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Review> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Review.class));

       return (TypeAdapter<T>) new TypeAdapter<Review>() {
           @Override
           public void write(JsonWriter out, Review value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Review read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Review given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Review
   * @throws IOException if the JSON string is invalid with respect to Review
   */
  public static Review fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Review.class);
  }

  /**
   * Convert an instance of Review to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

