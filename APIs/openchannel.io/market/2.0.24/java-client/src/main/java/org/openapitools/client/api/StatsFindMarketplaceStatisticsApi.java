/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Total;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatsFindMarketplaceStatisticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatsFindMarketplaceStatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatsFindMarketplaceStatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for statsIncrementFieldPost
     * @param field The field to be incremented (required)
     * @param appId The id of the app associated with this statistic value (required)
     * @param userId The id of the user that is performing the action (optional)
     * @param value The increment amount. Default is 1 if no value is provided. (optional)
     * @param date The date (in millis) for when this increment occurred. The default is the current date if no value is provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsIncrementFieldPostCall(String field, String appId, String userId, Integer value, Long date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/increment/{field}"
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appId", appId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statsIncrementFieldPostValidateBeforeCall(String field, String appId, String userId, Integer value, Long date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling statsIncrementFieldPost(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling statsIncrementFieldPost(Async)");
        }

        return statsIncrementFieldPostCall(field, appId, userId, value, date, _callback);

    }

    /**
     * Increments a statistics field
     * increment a statistics field
     * @param field The field to be incremented (required)
     * @param appId The id of the app associated with this statistic value (required)
     * @param userId The id of the user that is performing the action (optional)
     * @param value The increment amount. Default is 1 if no value is provided. (optional)
     * @param date The date (in millis) for when this increment occurred. The default is the current date if no value is provided. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void statsIncrementFieldPost(String field, String appId, String userId, Integer value, Long date) throws ApiException {
        statsIncrementFieldPostWithHttpInfo(field, appId, userId, value, date);
    }

    /**
     * Increments a statistics field
     * increment a statistics field
     * @param field The field to be incremented (required)
     * @param appId The id of the app associated with this statistic value (required)
     * @param userId The id of the user that is performing the action (optional)
     * @param value The increment amount. Default is 1 if no value is provided. (optional)
     * @param date The date (in millis) for when this increment occurred. The default is the current date if no value is provided. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> statsIncrementFieldPostWithHttpInfo(String field, String appId, String userId, Integer value, Long date) throws ApiException {
        okhttp3.Call localVarCall = statsIncrementFieldPostValidateBeforeCall(field, appId, userId, value, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Increments a statistics field (asynchronously)
     * increment a statistics field
     * @param field The field to be incremented (required)
     * @param appId The id of the app associated with this statistic value (required)
     * @param userId The id of the user that is performing the action (optional)
     * @param value The increment amount. Default is 1 if no value is provided. (optional)
     * @param date The date (in millis) for when this increment occurred. The default is the current date if no value is provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsIncrementFieldPostAsync(String field, String appId, String userId, Integer value, Long date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statsIncrementFieldPostValidateBeforeCall(field, appId, userId, value, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statsSeriesPeriodFieldsGet
     * @param period The period for the series (day or month) (required)
     * @param fields The field to be graphed. This also be a comma separated list of fields and the result will be a single timeseries containing the sum of all fields. (required)
     * @param start The start date for this series (in millis) (optional)
     * @param end The end date for this series (in millis) (optional)
     * @param query A query document. Example: {&#39;developerId&#39;: &#39;112&#39;} matches all the apps that have the developer with id 112 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsSeriesPeriodFieldsGetCall(String period, String fields, Long start, Long end, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/series/{period}/{fields}"
            .replace("{" + "period" + "}", localVarApiClient.escapeString(period.toString()))
            .replace("{" + "fields" + "}", localVarApiClient.escapeString(fields.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statsSeriesPeriodFieldsGetValidateBeforeCall(String period, String fields, Long start, Long end, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling statsSeriesPeriodFieldsGet(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling statsSeriesPeriodFieldsGet(Async)");
        }

        return statsSeriesPeriodFieldsGetCall(period, fields, start, end, query, _callback);

    }

    /**
     * Return a timeseries for a particular field
     * Return a timeseries nested array containing date and value. Example: [[1406520000000,2],[1406606400000,34],[1406692800000,245],...]
     * @param period The period for the series (day or month) (required)
     * @param fields The field to be graphed. This also be a comma separated list of fields and the result will be a single timeseries containing the sum of all fields. (required)
     * @param start The start date for this series (in millis) (optional)
     * @param end The end date for this series (in millis) (optional)
     * @param query A query document. Example: {&#39;developerId&#39;: &#39;112&#39;} matches all the apps that have the developer with id 112 (optional)
     * @return List&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<List<Object>> statsSeriesPeriodFieldsGet(String period, String fields, Long start, Long end, String query) throws ApiException {
        ApiResponse<List<List<Object>>> localVarResp = statsSeriesPeriodFieldsGetWithHttpInfo(period, fields, start, end, query);
        return localVarResp.getData();
    }

    /**
     * Return a timeseries for a particular field
     * Return a timeseries nested array containing date and value. Example: [[1406520000000,2],[1406606400000,34],[1406692800000,245],...]
     * @param period The period for the series (day or month) (required)
     * @param fields The field to be graphed. This also be a comma separated list of fields and the result will be a single timeseries containing the sum of all fields. (required)
     * @param start The start date for this series (in millis) (optional)
     * @param end The end date for this series (in millis) (optional)
     * @param query A query document. Example: {&#39;developerId&#39;: &#39;112&#39;} matches all the apps that have the developer with id 112 (optional)
     * @return ApiResponse&lt;List&lt;List&lt;Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<Object>>> statsSeriesPeriodFieldsGetWithHttpInfo(String period, String fields, Long start, Long end, String query) throws ApiException {
        okhttp3.Call localVarCall = statsSeriesPeriodFieldsGetValidateBeforeCall(period, fields, start, end, query, null);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a timeseries for a particular field (asynchronously)
     * Return a timeseries nested array containing date and value. Example: [[1406520000000,2],[1406606400000,34],[1406692800000,245],...]
     * @param period The period for the series (day or month) (required)
     * @param fields The field to be graphed. This also be a comma separated list of fields and the result will be a single timeseries containing the sum of all fields. (required)
     * @param start The start date for this series (in millis) (optional)
     * @param end The end date for this series (in millis) (optional)
     * @param query A query document. Example: {&#39;developerId&#39;: &#39;112&#39;} matches all the apps that have the developer with id 112 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsSeriesPeriodFieldsGetAsync(String period, String fields, Long start, Long end, String query, final ApiCallback<List<List<Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = statsSeriesPeriodFieldsGetValidateBeforeCall(period, fields, start, end, query, _callback);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statsTotalGet
     * @param fields A comma seperated list of all the fields to be returned in the total (available by default: dislikes, likes, reviews, totalSales, developerSales, marketplaceSales, downloads, ownerships, views) (required)
     * @param query A query document. Example: {&#39;developerId&#39;: &#39;112&#39;} matches all the apps that have the developer with id 112 (optional)
     * @param start The start date for this total (in millis) (optional)
     * @param end The end date for this total (in millis) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsTotalGetCall(String fields, String query, Long start, Long end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/total";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statsTotalGetValidateBeforeCall(String fields, String query, Long start, Long end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling statsTotalGet(Async)");
        }

        return statsTotalGetCall(fields, query, start, end, _callback);

    }

    /**
     * Returns the total number of events for a particular field.
     * 
     * @param fields A comma seperated list of all the fields to be returned in the total (available by default: dislikes, likes, reviews, totalSales, developerSales, marketplaceSales, downloads, ownerships, views) (required)
     * @param query A query document. Example: {&#39;developerId&#39;: &#39;112&#39;} matches all the apps that have the developer with id 112 (optional)
     * @param start The start date for this total (in millis) (optional)
     * @param end The end date for this total (in millis) (optional)
     * @return Total
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Total statsTotalGet(String fields, String query, Long start, Long end) throws ApiException {
        ApiResponse<Total> localVarResp = statsTotalGetWithHttpInfo(fields, query, start, end);
        return localVarResp.getData();
    }

    /**
     * Returns the total number of events for a particular field.
     * 
     * @param fields A comma seperated list of all the fields to be returned in the total (available by default: dislikes, likes, reviews, totalSales, developerSales, marketplaceSales, downloads, ownerships, views) (required)
     * @param query A query document. Example: {&#39;developerId&#39;: &#39;112&#39;} matches all the apps that have the developer with id 112 (optional)
     * @param start The start date for this total (in millis) (optional)
     * @param end The end date for this total (in millis) (optional)
     * @return ApiResponse&lt;Total&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Total> statsTotalGetWithHttpInfo(String fields, String query, Long start, Long end) throws ApiException {
        okhttp3.Call localVarCall = statsTotalGetValidateBeforeCall(fields, query, start, end, null);
        Type localVarReturnType = new TypeToken<Total>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the total number of events for a particular field. (asynchronously)
     * 
     * @param fields A comma seperated list of all the fields to be returned in the total (available by default: dislikes, likes, reviews, totalSales, developerSales, marketplaceSales, downloads, ownerships, views) (required)
     * @param query A query document. Example: {&#39;developerId&#39;: &#39;112&#39;} matches all the apps that have the developer with id 112 (optional)
     * @param start The start date for this total (in millis) (optional)
     * @param end The end date for this total (in millis) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statsTotalGetAsync(String fields, String query, Long start, Long end, final ApiCallback<Total> _callback) throws ApiException {

        okhttp3.Call localVarCall = statsTotalGetValidateBeforeCall(fields, query, start, end, _callback);
        Type localVarReturnType = new TypeToken<Total>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
