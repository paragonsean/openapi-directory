/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.Cards;
import org.openapitools.client.model.DeveloperToken;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StripeGatewayProcessPaymentsAndRefundsApi
 */
@Disabled
public class StripeGatewayProcessPaymentsAndRefundsApiTest {

    private final StripeGatewayProcessPaymentsAndRefundsApi api = new StripeGatewayProcessPaymentsAndRefundsApi();

    /**
     * Returns a developers connected Stripe accounts
     *
     * - Results are returned for the market provided within the basic authentication credentials 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stripeGatewayDeveloperDeveloperIdAccountsGetTest() throws ApiException {
        String developerId = null;
        Accounts response = api.stripeGatewayDeveloperDeveloperIdAccountsGet(developerId);
        // TODO: test validations
    }

    /**
     * Generate a temporary URL to allow a developer to connect their Stripe account
     *
     * - Results are returned for the market provided within the basic authentication credentials  - The URL generated by this method is only valid for 48 hours. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stripeGatewayDeveloperDeveloperIdAccountsPostTest() throws ApiException {
        String developerId = null;
        String redirectUrl = null;
        DeveloperToken response = api.stripeGatewayDeveloperDeveloperIdAccountsPost(developerId, redirectUrl);
        // TODO: test validations
    }

    /**
     * Disconnects a developer&#39;s Stripe account
     *
     *  - Results are returned for the market provided within the basic authentication credentials 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stripeGatewayDeveloperDeveloperIdAccountsStripeIdDeleteTest() throws ApiException {
        String developerId = null;
        String stripeId = null;
        Accounts response = api.stripeGatewayDeveloperDeveloperIdAccountsStripeIdDelete(developerId, stripeId);
        // TODO: test validations
    }

    /**
     * Removes a credit card for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stripeGatewayUserUserIdCardsCardIdDeleteTest() throws ApiException {
        String userId = null;
        String cardId = null;
        Cards response = api.stripeGatewayUserUserIdCardsCardIdDelete(userId, cardId);
        // TODO: test validations
    }

    /**
     * Updates a credit card for this user
     *
     *  - Results are returned for the market provided within the basic authentication credentials 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stripeGatewayUserUserIdCardsCardIdPostTest() throws ApiException {
        String userId = null;
        String cardId = null;
        Boolean isDefault = null;
        String addressCity = null;
        String addressCountry = null;
        String addressLine1 = null;
        String addressLine2 = null;
        String addressState = null;
        String addressZip = null;
        Cards response = api.stripeGatewayUserUserIdCardsCardIdPost(userId, cardId, isDefault, addressCity, addressCountry, addressLine1, addressLine2, addressState, addressZip);
        // TODO: test validations
    }

    /**
     * Returns credit cards for this user
     *
     * - Results are returned for the market provided within the basic authentication credentials 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stripeGatewayUserUserIdCardsGetTest() throws ApiException {
        String userId = null;
        Cards response = api.stripeGatewayUserUserIdCardsGet(userId);
        // TODO: test validations
    }

    /**
     * Adds credit card for this user
     *
     * - Results are returned for the market provided within the basic authentication credentials 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stripeGatewayUserUserIdCardsPostTest() throws ApiException {
        String userId = null;
        String token = null;
        Boolean isDefault = null;
        Cards response = api.stripeGatewayUserUserIdCardsPost(userId, token, isDefault);
        // TODO: test validations
    }

}
