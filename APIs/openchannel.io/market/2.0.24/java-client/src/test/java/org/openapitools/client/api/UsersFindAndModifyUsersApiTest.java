/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserPages;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersFindAndModifyUsersApi
 */
@Disabled
public class UsersFindAndModifyUsersApiTest {

    private final UsersFindAndModifyUsersApi api = new UsersFindAndModifyUsersApi();

    /**
     * Returns a paginated list of users
     *
     * - Results are paginated and the default is value is 100 if no limit is provided 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String query = null;
        String sort = null;
        Integer pageNumber = null;
        Integer limit = null;
        UserPages response = api.usersGet(query, sort, pageNumber, limit);
        // TODO: test validations
    }

    /**
     * Removes a single user
     *
     * - Results are returned for the market provided within the basic authentication credentials 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdDeleteTest() throws ApiException {
        String userId = null;
        api.usersUserIdDelete(userId);
        // TODO: test validations
    }

    /**
     * Return a single user
     *
     * - Results are returned for the market provided within the basic authentication credentials 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        String userId = null;
        User response = api.usersUserIdGet(userId);
        // TODO: test validations
    }

    /**
     * Updates user fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdPatchTest() throws ApiException {
        String userId = null;
        String type = null;
        String email = null;
        String username = null;
        String name = null;
        String customData = null;
        User response = api.usersUserIdPatch(userId, type, email, username, name, customData);
        // TODO: test validations
    }

    /**
     * Updates a single user or adds the user if they don&#39;t exist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdPostTest() throws ApiException {
        String userId = null;
        String type = null;
        String email = null;
        String username = null;
        String name = null;
        String customData = null;
        User response = api.usersUserIdPost(userId, type, email, username, name, customData);
        // TODO: test validations
    }

}
