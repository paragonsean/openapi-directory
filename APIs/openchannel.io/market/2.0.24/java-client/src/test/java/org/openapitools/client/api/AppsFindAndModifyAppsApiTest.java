/*
 * OpenChannel Market API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.App;
import org.openapitools.client.model.AppPages;
import org.openapitools.client.model.AppVersion;
import org.openapitools.client.model.SearchPages;
import org.openapitools.client.model.VersionPages;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppsFindAndModifyAppsApi
 */
@Disabled
public class AppsFindAndModifyAppsApiTest {

    private final AppsFindAndModifyAppsApi api = new AppsFindAndModifyAppsApi();

    /**
     * Removes app and all versions
     *
     * - This method is called on behalf of a developer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdDeleteTest() throws ApiException {
        String appId = null;
        String developerId = null;
        api.appsAppIdDelete(appId, developerId);
        // TODO: test validations
    }

    /**
     * Returns a single APPROVED or SUSPENDED app
     *
     * - A &#39;view&#39; event is recorded when trackViews is set to true 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdGetTest() throws ApiException {
        String appId = null;
        String userId = null;
        Boolean trackViews = null;
        App response = api.appsAppIdGet(appId, userId, trackViews);
        // TODO: test validations
    }

    /**
     * Change the live app to another, previously approved version
     *
     * - This method is called on behalf of a developer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdLivePostTest() throws ApiException {
        String appId = null;
        String developerId = null;
        String version = null;
        api.appsAppIdLivePost(appId, developerId, version);
        // TODO: test validations
    }

    /**
     * Publishes the current working version of the app to the marketplace
     *
     * - This method is called on behalf of a developer.  - Only effects the current working version of the app. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdPublishPostTest() throws ApiException {
        String appId = null;
        String developerId = null;
        Integer version = null;
        Boolean autoApprove = null;
        api.appsAppIdPublishPost(appId, developerId, version, autoApprove);
        // TODO: test validations
    }

    /**
     * Removes AppVersion
     *
     * - This method is called on behalf of a developer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdVersionsVersionDeleteTest() throws ApiException {
        String appId = null;
        String version = null;
        String developerId = null;
        api.appsAppIdVersionsVersionDelete(appId, version, developerId);
        // TODO: test validations
    }

    /**
     * Returns a single AppVersion
     *
     * - Only returns AppVersions owned by this developer 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdVersionsVersionGetTest() throws ApiException {
        String appId = null;
        Integer version = null;
        String developerId = null;
        AppVersion response = api.appsAppIdVersionsVersionGet(appId, version, developerId);
        // TODO: test validations
    }

    /**
     * Updates the app fields or creates a new version
     *
     * - This method is called on behalf of a developer. - Price and is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly updated app - This endpoint updates only the fields provided in the request (relative update). In contrast, the POST version of this method replaces the entire object to match the request (absolute update).  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdVersionsVersionPatchTest() throws ApiException {
        String appId = null;
        String version = null;
        String developerId = null;
        String name = null;
        String type = null;
        String model = null;
        String customData = null;
        String attributes = null;
        String restrict = null;
        String allow = null;
        String access = null;
        String approvalRequired = null;
        AppVersion response = api.appsAppIdVersionsVersionPatch(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired);
        // TODO: test validations
    }

    /**
     * Updates the app or creates a new version
     *
     * - This method is called on behalf of a developer. - Price and is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly updated app - This endpoint replaces the entire object to match the request (absolute update). In contrast, the PATCH version of this endpoint updates only the fields provided in the request (relative update). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdVersionsVersionPostTest() throws ApiException {
        String appId = null;
        String version = null;
        String developerId = null;
        String name = null;
        String type = null;
        String model = null;
        String customData = null;
        String attributes = null;
        String restrict = null;
        String allow = null;
        String access = null;
        String approvalRequired = null;
        AppVersion response = api.appsAppIdVersionsVersionPost(appId, version, developerId, name, type, model, customData, attributes, restrict, allow, access, approvalRequired);
        // TODO: test validations
    }

    /**
     * Allows a developer or administrator to change the status of apps
     *
     * Only certain status changes are allowed. For instance, a developer is only able to suspend and unsuspend their app (which must already be approved). See here for a state change diagram of allowed status changes for administrators: https://support.openchannel.io/documentation/api/#415-apps-status-change 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdVersionsVersionStatusPostTest() throws ApiException {
        String appId = null;
        Integer version = null;
        String developerId = null;
        String status = null;
        String modifiedBy = null;
        String reason = null;
        api.appsAppIdVersionsVersionStatusPost(appId, version, developerId, status, modifiedBy, reason);
        // TODO: test validations
    }

    /**
     * Returns a single APPROVED or SUSPENDED app
     *
     * - A &#39;view&#39; event is recorded when trackViews is set to true 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsBySafeNameSafeNameGetTest() throws ApiException {
        String safeName = null;
        String userId = null;
        Boolean trackViews = null;
        App response = api.appsBySafeNameSafeNameGet(safeName, userId, trackViews);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of APPROVED or SUSPENDED apps
     *
     * - Results are paginated and the default is value is 1000 if no limit is provided - If no query is specified, returns all APPROVED or SUSPENDED apps within the marketplace 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetTest() throws ApiException {
        String query = null;
        String sort = null;
        Integer pageNumber = null;
        Integer limit = null;
        String userId = null;
        Boolean isOwner = null;
        AppPages response = api.appsGet(query, sort, pageNumber, limit, userId, isOwner);
        // TODO: test validations
    }

    /**
     * Adds a new app for this developer
     *
     * - This method is called on behalf of a developer. - Price is required if the model is &#39;single&#39; or &#39;recurring&#39; - Returns the newly created app 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPostTest() throws ApiException {
        String developerId = null;
        String name = null;
        String type = null;
        String model = null;
        String customData = null;
        String attributes = null;
        String restrict = null;
        String allow = null;
        String access = null;
        AppVersion response = api.appsPost(developerId, name, type, model, customData, attributes, restrict, allow, access);
        // TODO: test validations
    }

    /**
     * Searches through the text of fields to find APPROVED or SUSPENDED apps
     *
     * - Results are returned for the market provided within the basic authentication credentials 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsTextSearchGetTest() throws ApiException {
        String text = null;
        String fields = null;
        String query = null;
        Integer pageNumber = null;
        Integer limit = null;
        String userId = null;
        Boolean isOwned = null;
        SearchPages response = api.appsTextSearchGet(text, fields, query, pageNumber, limit, userId, isOwned);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of AppVersions
     *
     * - Results are paginated when limit is set, otherwise all results are returned - If no query is specified, returns all AppVersions within the marketplace - Only returns AppVersions owned by this developer 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsVersionsGetTest() throws ApiException {
        String query = null;
        String sort = null;
        Integer pageNumber = null;
        Integer limit = null;
        String developerId = null;
        VersionPages response = api.appsVersionsGet(query, sort, pageNumber, limit, developerId);
        // TODO: test validations
    }

}
