/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOrderState.h"
#include "OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner.h"
#include "OAI_accounts__account__orders__CustomerOrderId__put_request.h"
#include "OAI_accounts__account__orders_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account QString [required]
    * @param[in]  customer_order_id QString [required]
    */
    virtual void accountsAccountOrdersCustomerOrderIdDelete(const QString &account, const QString &customer_order_id);

    /**
    * @param[in]  account QString [required]
    * @param[in]  customer_order_id QString [required]
    */
    virtual void accountsAccountOrdersCustomerOrderIdGet(const QString &account, const QString &customer_order_id);

    /**
    * @param[in]  account QString [required]
    * @param[in]  customer_order_id QString [required]
    * @param[in]  oai_accounts__account__orders__customer_order_id__put_request OAI_accounts__account__orders__CustomerOrderId__put_request [required]
    */
    virtual void accountsAccountOrdersCustomerOrderIdPut(const QString &account, const QString &customer_order_id, const OAI_accounts__account__orders__CustomerOrderId__put_request &oai_accounts__account__orders__customer_order_id__put_request);

    /**
    * @param[in]  account QString [required]
    */
    virtual void accountsAccountOrdersGet(const QString &account);

    /**
    * @param[in]  account QString [required]
    * @param[in]  oai_accounts__account__orders_post_request OAI_accounts__account__orders_post_request [required]
    */
    virtual void accountsAccountOrdersPost(const QString &account, const OAI_accounts__account__orders_post_request &oai_accounts__account__orders_post_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsAccountOrdersCustomerOrderIdDeleteCallback(OAIHttpRequestWorker *worker);
    void accountsAccountOrdersCustomerOrderIdGetCallback(OAIHttpRequestWorker *worker);
    void accountsAccountOrdersCustomerOrderIdPutCallback(OAIHttpRequestWorker *worker);
    void accountsAccountOrdersGetCallback(OAIHttpRequestWorker *worker);
    void accountsAccountOrdersPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsAccountOrdersCustomerOrderIdDeleteSignal(QList<OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner> summary);
    void accountsAccountOrdersCustomerOrderIdGetSignal(QList<OAIOrderState> summary);
    void accountsAccountOrdersCustomerOrderIdPutSignal(QList<OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner> summary);
    void accountsAccountOrdersGetSignal(QList<OAIOrderState> summary);
    void accountsAccountOrdersPostSignal(QList<OAIOrderState> summary);


    void accountsAccountOrdersCustomerOrderIdDeleteSignalFull(OAIHttpRequestWorker *worker, QList<OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner> summary);
    void accountsAccountOrdersCustomerOrderIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrderState> summary);
    void accountsAccountOrdersCustomerOrderIdPutSignalFull(OAIHttpRequestWorker *worker, QList<OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner> summary);
    void accountsAccountOrdersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrderState> summary);
    void accountsAccountOrdersPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrderState> summary);

    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersCustomerOrderIdDeleteSignalError() instead")
    void accountsAccountOrdersCustomerOrderIdDeleteSignalE(QList<OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersCustomerOrderIdDeleteSignalError(QList<OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersCustomerOrderIdGetSignalError() instead")
    void accountsAccountOrdersCustomerOrderIdGetSignalE(QList<OAIOrderState> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersCustomerOrderIdGetSignalError(QList<OAIOrderState> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersCustomerOrderIdPutSignalError() instead")
    void accountsAccountOrdersCustomerOrderIdPutSignalE(QList<OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersCustomerOrderIdPutSignalError(QList<OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersGetSignalError() instead")
    void accountsAccountOrdersGetSignalE(QList<OAIOrderState> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersGetSignalError(QList<OAIOrderState> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersPostSignalError() instead")
    void accountsAccountOrdersPostSignalE(QList<OAIOrderState> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersPostSignalError(QList<OAIOrderState> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersCustomerOrderIdDeleteSignalErrorFull() instead")
    void accountsAccountOrdersCustomerOrderIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersCustomerOrderIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersCustomerOrderIdGetSignalErrorFull() instead")
    void accountsAccountOrdersCustomerOrderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersCustomerOrderIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersCustomerOrderIdPutSignalErrorFull() instead")
    void accountsAccountOrdersCustomerOrderIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersCustomerOrderIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersGetSignalErrorFull() instead")
    void accountsAccountOrdersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountOrdersPostSignalErrorFull() instead")
    void accountsAccountOrdersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountOrdersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
