/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_oauth_live_session_token_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_oauth_live_session_token_post_request::OAI_oauth_live_session_token_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_oauth_live_session_token_post_request::OAI_oauth_live_session_token_post_request() {
    this->initializeModel();
}

OAI_oauth_live_session_token_post_request::~OAI_oauth_live_session_token_post_request() {}

void OAI_oauth_live_session_token_post_request::initializeModel() {

    m_diffie_hellman_challenge_isSet = false;
    m_diffie_hellman_challenge_isValid = false;

    m_oauth_consumer_key_isSet = false;
    m_oauth_consumer_key_isValid = false;

    m_oauth_nonce_isSet = false;
    m_oauth_nonce_isValid = false;

    m_oauth_signature_isSet = false;
    m_oauth_signature_isValid = false;

    m_oauth_signature_method_isSet = false;
    m_oauth_signature_method_isValid = false;

    m_oauth_timestamp_isSet = false;
    m_oauth_timestamp_isValid = false;

    m_oauth_token_isSet = false;
    m_oauth_token_isValid = false;
}

void OAI_oauth_live_session_token_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_oauth_live_session_token_post_request::fromJsonObject(QJsonObject json) {

    m_diffie_hellman_challenge_isValid = ::OpenAPI::fromJsonValue(m_diffie_hellman_challenge, json[QString("diffie_hellman_challenge")]);
    m_diffie_hellman_challenge_isSet = !json[QString("diffie_hellman_challenge")].isNull() && m_diffie_hellman_challenge_isValid;

    m_oauth_consumer_key_isValid = ::OpenAPI::fromJsonValue(m_oauth_consumer_key, json[QString("oauth_consumer_key")]);
    m_oauth_consumer_key_isSet = !json[QString("oauth_consumer_key")].isNull() && m_oauth_consumer_key_isValid;

    m_oauth_nonce_isValid = ::OpenAPI::fromJsonValue(m_oauth_nonce, json[QString("oauth_nonce")]);
    m_oauth_nonce_isSet = !json[QString("oauth_nonce")].isNull() && m_oauth_nonce_isValid;

    m_oauth_signature_isValid = ::OpenAPI::fromJsonValue(m_oauth_signature, json[QString("oauth_signature")]);
    m_oauth_signature_isSet = !json[QString("oauth_signature")].isNull() && m_oauth_signature_isValid;

    m_oauth_signature_method_isValid = ::OpenAPI::fromJsonValue(m_oauth_signature_method, json[QString("oauth_signature_method")]);
    m_oauth_signature_method_isSet = !json[QString("oauth_signature_method")].isNull() && m_oauth_signature_method_isValid;

    m_oauth_timestamp_isValid = ::OpenAPI::fromJsonValue(m_oauth_timestamp, json[QString("oauth_timestamp")]);
    m_oauth_timestamp_isSet = !json[QString("oauth_timestamp")].isNull() && m_oauth_timestamp_isValid;

    m_oauth_token_isValid = ::OpenAPI::fromJsonValue(m_oauth_token, json[QString("oauth_token")]);
    m_oauth_token_isSet = !json[QString("oauth_token")].isNull() && m_oauth_token_isValid;
}

QString OAI_oauth_live_session_token_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_oauth_live_session_token_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_diffie_hellman_challenge_isSet) {
        obj.insert(QString("diffie_hellman_challenge"), ::OpenAPI::toJsonValue(m_diffie_hellman_challenge));
    }
    if (m_oauth_consumer_key_isSet) {
        obj.insert(QString("oauth_consumer_key"), ::OpenAPI::toJsonValue(m_oauth_consumer_key));
    }
    if (m_oauth_nonce_isSet) {
        obj.insert(QString("oauth_nonce"), ::OpenAPI::toJsonValue(m_oauth_nonce));
    }
    if (m_oauth_signature_isSet) {
        obj.insert(QString("oauth_signature"), ::OpenAPI::toJsonValue(m_oauth_signature));
    }
    if (m_oauth_signature_method_isSet) {
        obj.insert(QString("oauth_signature_method"), ::OpenAPI::toJsonValue(m_oauth_signature_method));
    }
    if (m_oauth_timestamp_isSet) {
        obj.insert(QString("oauth_timestamp"), ::OpenAPI::toJsonValue(m_oauth_timestamp));
    }
    if (m_oauth_token_isSet) {
        obj.insert(QString("oauth_token"), ::OpenAPI::toJsonValue(m_oauth_token));
    }
    return obj;
}

QString OAI_oauth_live_session_token_post_request::getDiffieHellmanChallenge() const {
    return m_diffie_hellman_challenge;
}
void OAI_oauth_live_session_token_post_request::setDiffieHellmanChallenge(const QString &diffie_hellman_challenge) {
    m_diffie_hellman_challenge = diffie_hellman_challenge;
    m_diffie_hellman_challenge_isSet = true;
}

bool OAI_oauth_live_session_token_post_request::is_diffie_hellman_challenge_Set() const{
    return m_diffie_hellman_challenge_isSet;
}

bool OAI_oauth_live_session_token_post_request::is_diffie_hellman_challenge_Valid() const{
    return m_diffie_hellman_challenge_isValid;
}

QString OAI_oauth_live_session_token_post_request::getOauthConsumerKey() const {
    return m_oauth_consumer_key;
}
void OAI_oauth_live_session_token_post_request::setOauthConsumerKey(const QString &oauth_consumer_key) {
    m_oauth_consumer_key = oauth_consumer_key;
    m_oauth_consumer_key_isSet = true;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_consumer_key_Set() const{
    return m_oauth_consumer_key_isSet;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_consumer_key_Valid() const{
    return m_oauth_consumer_key_isValid;
}

QString OAI_oauth_live_session_token_post_request::getOauthNonce() const {
    return m_oauth_nonce;
}
void OAI_oauth_live_session_token_post_request::setOauthNonce(const QString &oauth_nonce) {
    m_oauth_nonce = oauth_nonce;
    m_oauth_nonce_isSet = true;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_nonce_Set() const{
    return m_oauth_nonce_isSet;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_nonce_Valid() const{
    return m_oauth_nonce_isValid;
}

QString OAI_oauth_live_session_token_post_request::getOauthSignature() const {
    return m_oauth_signature;
}
void OAI_oauth_live_session_token_post_request::setOauthSignature(const QString &oauth_signature) {
    m_oauth_signature = oauth_signature;
    m_oauth_signature_isSet = true;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_signature_Set() const{
    return m_oauth_signature_isSet;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_signature_Valid() const{
    return m_oauth_signature_isValid;
}

QString OAI_oauth_live_session_token_post_request::getOauthSignatureMethod() const {
    return m_oauth_signature_method;
}
void OAI_oauth_live_session_token_post_request::setOauthSignatureMethod(const QString &oauth_signature_method) {
    m_oauth_signature_method = oauth_signature_method;
    m_oauth_signature_method_isSet = true;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_signature_method_Set() const{
    return m_oauth_signature_method_isSet;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_signature_method_Valid() const{
    return m_oauth_signature_method_isValid;
}

QString OAI_oauth_live_session_token_post_request::getOauthTimestamp() const {
    return m_oauth_timestamp;
}
void OAI_oauth_live_session_token_post_request::setOauthTimestamp(const QString &oauth_timestamp) {
    m_oauth_timestamp = oauth_timestamp;
    m_oauth_timestamp_isSet = true;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_timestamp_Set() const{
    return m_oauth_timestamp_isSet;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_timestamp_Valid() const{
    return m_oauth_timestamp_isValid;
}

QString OAI_oauth_live_session_token_post_request::getOauthToken() const {
    return m_oauth_token;
}
void OAI_oauth_live_session_token_post_request::setOauthToken(const QString &oauth_token) {
    m_oauth_token = oauth_token;
    m_oauth_token_isSet = true;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_token_Set() const{
    return m_oauth_token_isSet;
}

bool OAI_oauth_live_session_token_post_request::is_oauth_token_Valid() const{
    return m_oauth_token_isValid;
}

bool OAI_oauth_live_session_token_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diffie_hellman_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_consumer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_signature_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_oauth_live_session_token_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
