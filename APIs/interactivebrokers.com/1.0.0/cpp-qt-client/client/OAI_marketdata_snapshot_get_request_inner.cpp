/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_marketdata_snapshot_get_request_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_marketdata_snapshot_get_request_inner::OAI_marketdata_snapshot_get_request_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_marketdata_snapshot_get_request_inner::OAI_marketdata_snapshot_get_request_inner() {
    this->initializeModel();
}

OAI_marketdata_snapshot_get_request_inner::~OAI_marketdata_snapshot_get_request_inner() {}

void OAI_marketdata_snapshot_get_request_inner::initializeModel() {

    m_conid_isSet = false;
    m_conid_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAI_marketdata_snapshot_get_request_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_marketdata_snapshot_get_request_inner::fromJsonObject(QJsonObject json) {

    m_conid_isValid = ::OpenAPI::fromJsonValue(m_conid, json[QString("conid")]);
    m_conid_isSet = !json[QString("conid")].isNull() && m_conid_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAI_marketdata_snapshot_get_request_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_marketdata_snapshot_get_request_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_conid_isSet) {
        obj.insert(QString("conid"), ::OpenAPI::toJsonValue(m_conid));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_exchange_isSet) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAI_marketdata_snapshot_get_request_inner::getConid() const {
    return m_conid;
}
void OAI_marketdata_snapshot_get_request_inner::setConid(const double &conid) {
    m_conid = conid;
    m_conid_isSet = true;
}

bool OAI_marketdata_snapshot_get_request_inner::is_conid_Set() const{
    return m_conid_isSet;
}

bool OAI_marketdata_snapshot_get_request_inner::is_conid_Valid() const{
    return m_conid_isValid;
}

QString OAI_marketdata_snapshot_get_request_inner::getCurrency() const {
    return m_currency;
}
void OAI_marketdata_snapshot_get_request_inner::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAI_marketdata_snapshot_get_request_inner::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAI_marketdata_snapshot_get_request_inner::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAI_marketdata_snapshot_get_request_inner::getExchange() const {
    return m_exchange;
}
void OAI_marketdata_snapshot_get_request_inner::setExchange(const QString &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAI_marketdata_snapshot_get_request_inner::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAI_marketdata_snapshot_get_request_inner::is_exchange_Valid() const{
    return m_exchange_isValid;
}

QString OAI_marketdata_snapshot_get_request_inner::getSymbol() const {
    return m_symbol;
}
void OAI_marketdata_snapshot_get_request_inner::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAI_marketdata_snapshot_get_request_inner::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAI_marketdata_snapshot_get_request_inner::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAI_marketdata_snapshot_get_request_inner::getType() const {
    return m_type;
}
void OAI_marketdata_snapshot_get_request_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAI_marketdata_snapshot_get_request_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAI_marketdata_snapshot_get_request_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAI_marketdata_snapshot_get_request_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_marketdata_snapshot_get_request_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
