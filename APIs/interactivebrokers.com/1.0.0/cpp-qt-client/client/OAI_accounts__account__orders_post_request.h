/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_accounts__account__orders_post_request.h
 *
 * 
 */

#ifndef OAI_accounts__account__orders_post_request_H
#define OAI_accounts__account__orders_post_request_H

#include <QJsonObject>

#include "OAIOrderType.h"
#include "OAITimeInForce.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_accounts__account__orders_post_request : public OAIObject {
public:
    OAI_accounts__account__orders_post_request();
    OAI_accounts__account__orders_post_request(QString json);
    ~OAI_accounts__account__orders_post_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAuxPrice() const;
    void setAuxPrice(const double &aux_price);
    bool is_aux_price_Set() const;
    bool is_aux_price_Valid() const;

    double getContractId() const;
    void setContractId(const double &contract_id);
    bool is_contract_id_Set() const;
    bool is_contract_id_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getCustomerOrderId() const;
    void setCustomerOrderId(const QString &customer_order_id);
    bool is_customer_order_id_Set() const;
    bool is_customer_order_id_Valid() const;

    bool isGermanHftAlgo() const;
    void setGermanHftAlgo(const bool &german_hft_algo);
    bool is_german_hft_algo_Set() const;
    bool is_german_hft_algo_Valid() const;

    QString getInstrumentType() const;
    void setInstrumentType(const QString &instrument_type);
    bool is_instrument_type_Set() const;
    bool is_instrument_type_Valid() const;

    QString getListingExchange() const;
    void setListingExchange(const QString &listing_exchange);
    bool is_listing_exchange_Set() const;
    bool is_listing_exchange_Valid() const;

    QString getMifid2Algo() const;
    void setMifid2Algo(const QString &mifid2_algo);
    bool is_mifid2_algo_Set() const;
    bool is_mifid2_algo_Valid() const;

    QString getMifid2DecisionMaker() const;
    void setMifid2DecisionMaker(const QString &mifid2_decision_maker);
    bool is_mifid2_decision_maker_Set() const;
    bool is_mifid2_decision_maker_Valid() const;

    QString getMifid2ExecutionAlgo() const;
    void setMifid2ExecutionAlgo(const QString &mifid2_execution_algo);
    bool is_mifid2_execution_algo_Set() const;
    bool is_mifid2_execution_algo_Valid() const;

    QString getMifid2ExecutionTrader() const;
    void setMifid2ExecutionTrader(const QString &mifid2_execution_trader);
    bool is_mifid2_execution_trader_Set() const;
    bool is_mifid2_execution_trader_Valid() const;

    OAIOrderType getOrderType() const;
    void setOrderType(const OAIOrderType &order_type);
    bool is_order_type_Set() const;
    bool is_order_type_Valid() const;

    double getOrderRestrictions() const;
    void setOrderRestrictions(const double &order_restrictions);
    bool is_order_restrictions_Set() const;
    bool is_order_restrictions_Valid() const;

    double getOutsideRth() const;
    void setOutsideRth(const double &outside_rth);
    bool is_outside_rth_Set() const;
    bool is_outside_rth_Valid() const;

    double getPrice() const;
    void setPrice(const double &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    double getQuantity() const;
    void setQuantity(const double &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    double getSide() const;
    void setSide(const double &side);
    bool is_side_Set() const;
    bool is_side_Valid() const;

    QString getTicker() const;
    void setTicker(const QString &ticker);
    bool is_ticker_Set() const;
    bool is_ticker_Valid() const;

    OAITimeInForce getTimeInForce() const;
    void setTimeInForce(const OAITimeInForce &time_in_force);
    bool is_time_in_force_Set() const;
    bool is_time_in_force_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_aux_price;
    bool m_aux_price_isSet;
    bool m_aux_price_isValid;

    double m_contract_id;
    bool m_contract_id_isSet;
    bool m_contract_id_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_customer_order_id;
    bool m_customer_order_id_isSet;
    bool m_customer_order_id_isValid;

    bool m_german_hft_algo;
    bool m_german_hft_algo_isSet;
    bool m_german_hft_algo_isValid;

    QString m_instrument_type;
    bool m_instrument_type_isSet;
    bool m_instrument_type_isValid;

    QString m_listing_exchange;
    bool m_listing_exchange_isSet;
    bool m_listing_exchange_isValid;

    QString m_mifid2_algo;
    bool m_mifid2_algo_isSet;
    bool m_mifid2_algo_isValid;

    QString m_mifid2_decision_maker;
    bool m_mifid2_decision_maker_isSet;
    bool m_mifid2_decision_maker_isValid;

    QString m_mifid2_execution_algo;
    bool m_mifid2_execution_algo_isSet;
    bool m_mifid2_execution_algo_isValid;

    QString m_mifid2_execution_trader;
    bool m_mifid2_execution_trader_isSet;
    bool m_mifid2_execution_trader_isValid;

    OAIOrderType m_order_type;
    bool m_order_type_isSet;
    bool m_order_type_isValid;

    double m_order_restrictions;
    bool m_order_restrictions_isSet;
    bool m_order_restrictions_isValid;

    double m_outside_rth;
    bool m_outside_rth_isSet;
    bool m_outside_rth_isValid;

    double m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    double m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    double m_side;
    bool m_side_isSet;
    bool m_side_isValid;

    QString m_ticker;
    bool m_ticker_isSet;
    bool m_ticker_isValid;

    OAITimeInForce m_time_in_force;
    bool m_time_in_force_isSet;
    bool m_time_in_force_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_accounts__account__orders_post_request)

#endif // OAI_accounts__account__orders_post_request_H
