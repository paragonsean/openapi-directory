/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_accounts__account__trades_get_200_response_inner.h
 *
 * 
 */

#ifndef OAI_accounts__account__trades_get_200_response_inner_H
#define OAI_accounts__account__trades_get_200_response_inner_H

#include <QJsonObject>

#include "OAIOrderType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_accounts__account__trades_get_200_response_inner : public OAIObject {
public:
    OAI_accounts__account__trades_get_200_response_inner();
    OAI_accounts__account__trades_get_200_response_inner(QString json);
    ~OAI_accounts__account__trades_get_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAvgPrice() const;
    void setAvgPrice(const double &avg_price);
    bool is_avg_price_Set() const;
    bool is_avg_price_Valid() const;

    double getCommission() const;
    void setCommission(const double &commission);
    bool is_commission_Set() const;
    bool is_commission_Valid() const;

    QString getCommissionCurrency() const;
    void setCommissionCurrency(const QString &commission_currency);
    bool is_commission_currency_Set() const;
    bool is_commission_currency_Valid() const;

    double getContractId() const;
    void setContractId(const double &contract_id);
    bool is_contract_id_Set() const;
    bool is_contract_id_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    double getCustomerOrderId() const;
    void setCustomerOrderId(const double &customer_order_id);
    bool is_customer_order_id_Set() const;
    bool is_customer_order_id_Valid() const;

    QString getExecId() const;
    void setExecId(const QString &exec_id);
    bool is_exec_id_Set() const;
    bool is_exec_id_Valid() const;

    QString getExecutionTime() const;
    void setExecutionTime(const QString &execution_time);
    bool is_execution_time_Set() const;
    bool is_execution_time_Valid() const;

    double getFilledQuantity() const;
    void setFilledQuantity(const double &filled_quantity);
    bool is_filled_quantity_Set() const;
    bool is_filled_quantity_Valid() const;

    QString getLastMarket() const;
    void setLastMarket(const QString &last_market);
    bool is_last_market_Set() const;
    bool is_last_market_Valid() const;

    QString getListingExchange() const;
    void setListingExchange(const QString &listing_exchange);
    bool is_listing_exchange_Set() const;
    bool is_listing_exchange_Valid() const;

    QString getOrderId() const;
    void setOrderId(const QString &order_id);
    bool is_order_id_Set() const;
    bool is_order_id_Valid() const;

    OAIOrderType getOrderType() const;
    void setOrderType(const OAIOrderType &order_type);
    bool is_order_type_Set() const;
    bool is_order_type_Valid() const;

    double getQuantity() const;
    void setQuantity(const double &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    double getRemainingQuantity() const;
    void setRemainingQuantity(const double &remaining_quantity);
    bool is_remaining_quantity_Set() const;
    bool is_remaining_quantity_Valid() const;

    QString getSide() const;
    void setSide(const QString &side);
    bool is_side_Set() const;
    bool is_side_Valid() const;

    QString getTicker() const;
    void setTicker(const QString &ticker);
    bool is_ticker_Set() const;
    bool is_ticker_Valid() const;

    double getTradePrice() const;
    void setTradePrice(const double &trade_price);
    bool is_trade_price_Set() const;
    bool is_trade_price_Valid() const;

    double getTradeSize() const;
    void setTradeSize(const double &trade_size);
    bool is_trade_size_Set() const;
    bool is_trade_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_avg_price;
    bool m_avg_price_isSet;
    bool m_avg_price_isValid;

    double m_commission;
    bool m_commission_isSet;
    bool m_commission_isValid;

    QString m_commission_currency;
    bool m_commission_currency_isSet;
    bool m_commission_currency_isValid;

    double m_contract_id;
    bool m_contract_id_isSet;
    bool m_contract_id_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    double m_customer_order_id;
    bool m_customer_order_id_isSet;
    bool m_customer_order_id_isValid;

    QString m_exec_id;
    bool m_exec_id_isSet;
    bool m_exec_id_isValid;

    QString m_execution_time;
    bool m_execution_time_isSet;
    bool m_execution_time_isValid;

    double m_filled_quantity;
    bool m_filled_quantity_isSet;
    bool m_filled_quantity_isValid;

    QString m_last_market;
    bool m_last_market_isSet;
    bool m_last_market_isValid;

    QString m_listing_exchange;
    bool m_listing_exchange_isSet;
    bool m_listing_exchange_isValid;

    QString m_order_id;
    bool m_order_id_isSet;
    bool m_order_id_isValid;

    OAIOrderType m_order_type;
    bool m_order_type_isSet;
    bool m_order_type_isValid;

    double m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    double m_remaining_quantity;
    bool m_remaining_quantity_isSet;
    bool m_remaining_quantity_isValid;

    QString m_side;
    bool m_side_isSet;
    bool m_side_isValid;

    QString m_ticker;
    bool m_ticker_isSet;
    bool m_ticker_isValid;

    double m_trade_price;
    bool m_trade_price_isSet;
    bool m_trade_price_isValid;

    double m_trade_size;
    bool m_trade_size_isSet;
    bool m_trade_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_accounts__account__trades_get_200_response_inner)

#endif // OAI_accounts__account__trades_get_200_response_inner_H
