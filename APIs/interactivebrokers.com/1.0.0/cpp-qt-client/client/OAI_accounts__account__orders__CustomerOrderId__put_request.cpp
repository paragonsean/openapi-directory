/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_accounts__account__orders__CustomerOrderId__put_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_accounts__account__orders__CustomerOrderId__put_request::OAI_accounts__account__orders__CustomerOrderId__put_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_accounts__account__orders__CustomerOrderId__put_request::OAI_accounts__account__orders__CustomerOrderId__put_request() {
    this->initializeModel();
}

OAI_accounts__account__orders__CustomerOrderId__put_request::~OAI_accounts__account__orders__CustomerOrderId__put_request() {}

void OAI_accounts__account__orders__CustomerOrderId__put_request::initializeModel() {

    m_aux_price_isSet = false;
    m_aux_price_isValid = false;

    m_customer_order_id_isSet = false;
    m_customer_order_id_isValid = false;

    m_german_hft_algo_isSet = false;
    m_german_hft_algo_isValid = false;

    m_mifid2_algo_isSet = false;
    m_mifid2_algo_isValid = false;

    m_mifid2_decision_maker_isSet = false;
    m_mifid2_decision_maker_isValid = false;

    m_mifid2_execution_algo_isSet = false;
    m_mifid2_execution_algo_isValid = false;

    m_mifid2_execution_trader_isSet = false;
    m_mifid2_execution_trader_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_orig_customer_order_id_isSet = false;
    m_orig_customer_order_id_isValid = false;

    m_outside_rth_isSet = false;
    m_outside_rth_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_side_isSet = false;
    m_side_isValid = false;

    m_time_in_force_isSet = false;
    m_time_in_force_isValid = false;
}

void OAI_accounts__account__orders__CustomerOrderId__put_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_accounts__account__orders__CustomerOrderId__put_request::fromJsonObject(QJsonObject json) {

    m_aux_price_isValid = ::OpenAPI::fromJsonValue(m_aux_price, json[QString("Aux Price")]);
    m_aux_price_isSet = !json[QString("Aux Price")].isNull() && m_aux_price_isValid;

    m_customer_order_id_isValid = ::OpenAPI::fromJsonValue(m_customer_order_id, json[QString("CustomerOrderId")]);
    m_customer_order_id_isSet = !json[QString("CustomerOrderId")].isNull() && m_customer_order_id_isValid;

    m_german_hft_algo_isValid = ::OpenAPI::fromJsonValue(m_german_hft_algo, json[QString("GermanHftAlgo")]);
    m_german_hft_algo_isSet = !json[QString("GermanHftAlgo")].isNull() && m_german_hft_algo_isValid;

    m_mifid2_algo_isValid = ::OpenAPI::fromJsonValue(m_mifid2_algo, json[QString("Mifid2Algo")]);
    m_mifid2_algo_isSet = !json[QString("Mifid2Algo")].isNull() && m_mifid2_algo_isValid;

    m_mifid2_decision_maker_isValid = ::OpenAPI::fromJsonValue(m_mifid2_decision_maker, json[QString("Mifid2DecisionMaker")]);
    m_mifid2_decision_maker_isSet = !json[QString("Mifid2DecisionMaker")].isNull() && m_mifid2_decision_maker_isValid;

    m_mifid2_execution_algo_isValid = ::OpenAPI::fromJsonValue(m_mifid2_execution_algo, json[QString("Mifid2ExecutionAlgo")]);
    m_mifid2_execution_algo_isSet = !json[QString("Mifid2ExecutionAlgo")].isNull() && m_mifid2_execution_algo_isValid;

    m_mifid2_execution_trader_isValid = ::OpenAPI::fromJsonValue(m_mifid2_execution_trader, json[QString("Mifid2ExecutionTrader")]);
    m_mifid2_execution_trader_isSet = !json[QString("Mifid2ExecutionTrader")].isNull() && m_mifid2_execution_trader_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("Order Type")]);
    m_order_type_isSet = !json[QString("Order Type")].isNull() && m_order_type_isValid;

    m_orig_customer_order_id_isValid = ::OpenAPI::fromJsonValue(m_orig_customer_order_id, json[QString("OrigCustomerOrderId")]);
    m_orig_customer_order_id_isSet = !json[QString("OrigCustomerOrderId")].isNull() && m_orig_customer_order_id_isValid;

    m_outside_rth_isValid = ::OpenAPI::fromJsonValue(m_outside_rth, json[QString("Outside RTH")]);
    m_outside_rth_isSet = !json[QString("Outside RTH")].isNull() && m_outside_rth_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("Price")]);
    m_price_isSet = !json[QString("Price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_side_isValid = ::OpenAPI::fromJsonValue(m_side, json[QString("Side")]);
    m_side_isSet = !json[QString("Side")].isNull() && m_side_isValid;

    m_time_in_force_isValid = ::OpenAPI::fromJsonValue(m_time_in_force, json[QString("Time in Force")]);
    m_time_in_force_isSet = !json[QString("Time in Force")].isNull() && m_time_in_force_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_accounts__account__orders__CustomerOrderId__put_request::asJsonObject() const {
    QJsonObject obj;
    if (m_aux_price_isSet) {
        obj.insert(QString("Aux Price"), ::OpenAPI::toJsonValue(m_aux_price));
    }
    if (m_customer_order_id_isSet) {
        obj.insert(QString("CustomerOrderId"), ::OpenAPI::toJsonValue(m_customer_order_id));
    }
    if (m_german_hft_algo_isSet) {
        obj.insert(QString("GermanHftAlgo"), ::OpenAPI::toJsonValue(m_german_hft_algo));
    }
    if (m_mifid2_algo_isSet) {
        obj.insert(QString("Mifid2Algo"), ::OpenAPI::toJsonValue(m_mifid2_algo));
    }
    if (m_mifid2_decision_maker_isSet) {
        obj.insert(QString("Mifid2DecisionMaker"), ::OpenAPI::toJsonValue(m_mifid2_decision_maker));
    }
    if (m_mifid2_execution_algo_isSet) {
        obj.insert(QString("Mifid2ExecutionAlgo"), ::OpenAPI::toJsonValue(m_mifid2_execution_algo));
    }
    if (m_mifid2_execution_trader_isSet) {
        obj.insert(QString("Mifid2ExecutionTrader"), ::OpenAPI::toJsonValue(m_mifid2_execution_trader));
    }
    if (m_order_type.isSet()) {
        obj.insert(QString("Order Type"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_orig_customer_order_id_isSet) {
        obj.insert(QString("OrigCustomerOrderId"), ::OpenAPI::toJsonValue(m_orig_customer_order_id));
    }
    if (m_outside_rth_isSet) {
        obj.insert(QString("Outside RTH"), ::OpenAPI::toJsonValue(m_outside_rth));
    }
    if (m_price_isSet) {
        obj.insert(QString("Price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_side_isSet) {
        obj.insert(QString("Side"), ::OpenAPI::toJsonValue(m_side));
    }
    if (m_time_in_force.isSet()) {
        obj.insert(QString("Time in Force"), ::OpenAPI::toJsonValue(m_time_in_force));
    }
    return obj;
}

double OAI_accounts__account__orders__CustomerOrderId__put_request::getAuxPrice() const {
    return m_aux_price;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setAuxPrice(const double &aux_price) {
    m_aux_price = aux_price;
    m_aux_price_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_aux_price_Set() const{
    return m_aux_price_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_aux_price_Valid() const{
    return m_aux_price_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_request::getCustomerOrderId() const {
    return m_customer_order_id;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setCustomerOrderId(const QString &customer_order_id) {
    m_customer_order_id = customer_order_id;
    m_customer_order_id_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_customer_order_id_Set() const{
    return m_customer_order_id_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_customer_order_id_Valid() const{
    return m_customer_order_id_isValid;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::isGermanHftAlgo() const {
    return m_german_hft_algo;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setGermanHftAlgo(const bool &german_hft_algo) {
    m_german_hft_algo = german_hft_algo;
    m_german_hft_algo_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_german_hft_algo_Set() const{
    return m_german_hft_algo_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_german_hft_algo_Valid() const{
    return m_german_hft_algo_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_request::getMifid2Algo() const {
    return m_mifid2_algo;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setMifid2Algo(const QString &mifid2_algo) {
    m_mifid2_algo = mifid2_algo;
    m_mifid2_algo_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_mifid2_algo_Set() const{
    return m_mifid2_algo_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_mifid2_algo_Valid() const{
    return m_mifid2_algo_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_request::getMifid2DecisionMaker() const {
    return m_mifid2_decision_maker;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setMifid2DecisionMaker(const QString &mifid2_decision_maker) {
    m_mifid2_decision_maker = mifid2_decision_maker;
    m_mifid2_decision_maker_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_mifid2_decision_maker_Set() const{
    return m_mifid2_decision_maker_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_mifid2_decision_maker_Valid() const{
    return m_mifid2_decision_maker_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_request::getMifid2ExecutionAlgo() const {
    return m_mifid2_execution_algo;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setMifid2ExecutionAlgo(const QString &mifid2_execution_algo) {
    m_mifid2_execution_algo = mifid2_execution_algo;
    m_mifid2_execution_algo_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_mifid2_execution_algo_Set() const{
    return m_mifid2_execution_algo_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_mifid2_execution_algo_Valid() const{
    return m_mifid2_execution_algo_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_request::getMifid2ExecutionTrader() const {
    return m_mifid2_execution_trader;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setMifid2ExecutionTrader(const QString &mifid2_execution_trader) {
    m_mifid2_execution_trader = mifid2_execution_trader;
    m_mifid2_execution_trader_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_mifid2_execution_trader_Set() const{
    return m_mifid2_execution_trader_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_mifid2_execution_trader_Valid() const{
    return m_mifid2_execution_trader_isValid;
}

OAIOrderType OAI_accounts__account__orders__CustomerOrderId__put_request::getOrderType() const {
    return m_order_type;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setOrderType(const OAIOrderType &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_order_type_Valid() const{
    return m_order_type_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_request::getOrigCustomerOrderId() const {
    return m_orig_customer_order_id;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setOrigCustomerOrderId(const QString &orig_customer_order_id) {
    m_orig_customer_order_id = orig_customer_order_id;
    m_orig_customer_order_id_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_orig_customer_order_id_Set() const{
    return m_orig_customer_order_id_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_orig_customer_order_id_Valid() const{
    return m_orig_customer_order_id_isValid;
}

double OAI_accounts__account__orders__CustomerOrderId__put_request::getOutsideRth() const {
    return m_outside_rth;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setOutsideRth(const double &outside_rth) {
    m_outside_rth = outside_rth;
    m_outside_rth_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_outside_rth_Set() const{
    return m_outside_rth_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_outside_rth_Valid() const{
    return m_outside_rth_isValid;
}

double OAI_accounts__account__orders__CustomerOrderId__put_request::getPrice() const {
    return m_price;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_price_Set() const{
    return m_price_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_price_Valid() const{
    return m_price_isValid;
}

double OAI_accounts__account__orders__CustomerOrderId__put_request::getQuantity() const {
    return m_quantity;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAI_accounts__account__orders__CustomerOrderId__put_request::getSide() const {
    return m_side;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setSide(const double &side) {
    m_side = side;
    m_side_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_side_Set() const{
    return m_side_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_side_Valid() const{
    return m_side_isValid;
}

OAITimeInForce OAI_accounts__account__orders__CustomerOrderId__put_request::getTimeInForce() const {
    return m_time_in_force;
}
void OAI_accounts__account__orders__CustomerOrderId__put_request::setTimeInForce(const OAITimeInForce &time_in_force) {
    m_time_in_force = time_in_force;
    m_time_in_force_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_time_in_force_Set() const{
    return m_time_in_force_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::is_time_in_force_Valid() const{
    return m_time_in_force_isValid;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aux_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_german_hft_algo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mifid2_algo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mifid2_decision_maker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mifid2_execution_algo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mifid2_execution_trader_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_customer_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_rth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_in_force.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
