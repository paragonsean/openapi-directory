/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_marketdata_snapshot_get_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_marketdata_snapshot_get_200_response_inner::OAI_marketdata_snapshot_get_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_marketdata_snapshot_get_200_response_inner::OAI_marketdata_snapshot_get_200_response_inner() {
    this->initializeModel();
}

OAI_marketdata_snapshot_get_200_response_inner::~OAI_marketdata_snapshot_get_200_response_inner() {}

void OAI_marketdata_snapshot_get_200_response_inner::initializeModel() {

    m_bid_isSet = false;
    m_bid_isValid = false;

    m_closing_isSet = false;
    m_closing_isValid = false;

    m_complete_isSet = false;
    m_complete_isValid = false;

    m_conid_isSet = false;
    m_conid_isValid = false;

    m_offer_isSet = false;
    m_offer_isValid = false;

    m_temporality_isSet = false;
    m_temporality_isValid = false;

    m_trade_isSet = false;
    m_trade_isValid = false;
}

void OAI_marketdata_snapshot_get_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_marketdata_snapshot_get_200_response_inner::fromJsonObject(QJsonObject json) {

    m_bid_isValid = ::OpenAPI::fromJsonValue(m_bid, json[QString("Bid")]);
    m_bid_isSet = !json[QString("Bid")].isNull() && m_bid_isValid;

    m_closing_isValid = ::OpenAPI::fromJsonValue(m_closing, json[QString("Closing")]);
    m_closing_isSet = !json[QString("Closing")].isNull() && m_closing_isValid;

    m_complete_isValid = ::OpenAPI::fromJsonValue(m_complete, json[QString("Complete")]);
    m_complete_isSet = !json[QString("Complete")].isNull() && m_complete_isValid;

    m_conid_isValid = ::OpenAPI::fromJsonValue(m_conid, json[QString("Conid")]);
    m_conid_isSet = !json[QString("Conid")].isNull() && m_conid_isValid;

    m_offer_isValid = ::OpenAPI::fromJsonValue(m_offer, json[QString("Offer")]);
    m_offer_isSet = !json[QString("Offer")].isNull() && m_offer_isValid;

    m_temporality_isValid = ::OpenAPI::fromJsonValue(m_temporality, json[QString("Temporality")]);
    m_temporality_isSet = !json[QString("Temporality")].isNull() && m_temporality_isValid;

    m_trade_isValid = ::OpenAPI::fromJsonValue(m_trade, json[QString("Trade")]);
    m_trade_isSet = !json[QString("Trade")].isNull() && m_trade_isValid;
}

QString OAI_marketdata_snapshot_get_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_marketdata_snapshot_get_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_bid.isSet()) {
        obj.insert(QString("Bid"), ::OpenAPI::toJsonValue(m_bid));
    }
    if (m_closing.isSet()) {
        obj.insert(QString("Closing"), ::OpenAPI::toJsonValue(m_closing));
    }
    if (m_complete_isSet) {
        obj.insert(QString("Complete"), ::OpenAPI::toJsonValue(m_complete));
    }
    if (m_conid_isSet) {
        obj.insert(QString("Conid"), ::OpenAPI::toJsonValue(m_conid));
    }
    if (m_offer.isSet()) {
        obj.insert(QString("Offer"), ::OpenAPI::toJsonValue(m_offer));
    }
    if (m_temporality_isSet) {
        obj.insert(QString("Temporality"), ::OpenAPI::toJsonValue(m_temporality));
    }
    if (m_trade.isSet()) {
        obj.insert(QString("Trade"), ::OpenAPI::toJsonValue(m_trade));
    }
    return obj;
}

OAI_marketdata_snapshot_get_200_response_inner_Bid OAI_marketdata_snapshot_get_200_response_inner::getBid() const {
    return m_bid;
}
void OAI_marketdata_snapshot_get_200_response_inner::setBid(const OAI_marketdata_snapshot_get_200_response_inner_Bid &bid) {
    m_bid = bid;
    m_bid_isSet = true;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_bid_Set() const{
    return m_bid_isSet;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_bid_Valid() const{
    return m_bid_isValid;
}

OAI_marketdata_snapshot_get_200_response_inner_Closing OAI_marketdata_snapshot_get_200_response_inner::getClosing() const {
    return m_closing;
}
void OAI_marketdata_snapshot_get_200_response_inner::setClosing(const OAI_marketdata_snapshot_get_200_response_inner_Closing &closing) {
    m_closing = closing;
    m_closing_isSet = true;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_closing_Set() const{
    return m_closing_isSet;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_closing_Valid() const{
    return m_closing_isValid;
}

bool OAI_marketdata_snapshot_get_200_response_inner::isComplete() const {
    return m_complete;
}
void OAI_marketdata_snapshot_get_200_response_inner::setComplete(const bool &complete) {
    m_complete = complete;
    m_complete_isSet = true;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_complete_Set() const{
    return m_complete_isSet;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_complete_Valid() const{
    return m_complete_isValid;
}

QString OAI_marketdata_snapshot_get_200_response_inner::getConid() const {
    return m_conid;
}
void OAI_marketdata_snapshot_get_200_response_inner::setConid(const QString &conid) {
    m_conid = conid;
    m_conid_isSet = true;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_conid_Set() const{
    return m_conid_isSet;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_conid_Valid() const{
    return m_conid_isValid;
}

OAI_marketdata_snapshot_get_200_response_inner_Bid OAI_marketdata_snapshot_get_200_response_inner::getOffer() const {
    return m_offer;
}
void OAI_marketdata_snapshot_get_200_response_inner::setOffer(const OAI_marketdata_snapshot_get_200_response_inner_Bid &offer) {
    m_offer = offer;
    m_offer_isSet = true;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_offer_Set() const{
    return m_offer_isSet;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_offer_Valid() const{
    return m_offer_isValid;
}

double OAI_marketdata_snapshot_get_200_response_inner::getTemporality() const {
    return m_temporality;
}
void OAI_marketdata_snapshot_get_200_response_inner::setTemporality(const double &temporality) {
    m_temporality = temporality;
    m_temporality_isSet = true;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_temporality_Set() const{
    return m_temporality_isSet;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_temporality_Valid() const{
    return m_temporality_isValid;
}

OAI_marketdata_snapshot_get_200_response_inner_Trade OAI_marketdata_snapshot_get_200_response_inner::getTrade() const {
    return m_trade;
}
void OAI_marketdata_snapshot_get_200_response_inner::setTrade(const OAI_marketdata_snapshot_get_200_response_inner_Trade &trade) {
    m_trade = trade;
    m_trade_isSet = true;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_trade_Set() const{
    return m_trade_isSet;
}

bool OAI_marketdata_snapshot_get_200_response_inner::is_trade_Valid() const{
    return m_trade_isValid;
}

bool OAI_marketdata_snapshot_get_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_closing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trade.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_marketdata_snapshot_get_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
