/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_accounts__account__trades_get_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_accounts__account__trades_get_200_response_inner::OAI_accounts__account__trades_get_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_accounts__account__trades_get_200_response_inner::OAI_accounts__account__trades_get_200_response_inner() {
    this->initializeModel();
}

OAI_accounts__account__trades_get_200_response_inner::~OAI_accounts__account__trades_get_200_response_inner() {}

void OAI_accounts__account__trades_get_200_response_inner::initializeModel() {

    m_avg_price_isSet = false;
    m_avg_price_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_commission_currency_isSet = false;
    m_commission_currency_isValid = false;

    m_contract_id_isSet = false;
    m_contract_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_order_id_isSet = false;
    m_customer_order_id_isValid = false;

    m_exec_id_isSet = false;
    m_exec_id_isValid = false;

    m_execution_time_isSet = false;
    m_execution_time_isValid = false;

    m_filled_quantity_isSet = false;
    m_filled_quantity_isValid = false;

    m_last_market_isSet = false;
    m_last_market_isValid = false;

    m_listing_exchange_isSet = false;
    m_listing_exchange_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_remaining_quantity_isSet = false;
    m_remaining_quantity_isValid = false;

    m_side_isSet = false;
    m_side_isValid = false;

    m_ticker_isSet = false;
    m_ticker_isValid = false;

    m_trade_price_isSet = false;
    m_trade_price_isValid = false;

    m_trade_size_isSet = false;
    m_trade_size_isValid = false;
}

void OAI_accounts__account__trades_get_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_accounts__account__trades_get_200_response_inner::fromJsonObject(QJsonObject json) {

    m_avg_price_isValid = ::OpenAPI::fromJsonValue(m_avg_price, json[QString("AvgPrice")]);
    m_avg_price_isSet = !json[QString("AvgPrice")].isNull() && m_avg_price_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("Commission")]);
    m_commission_isSet = !json[QString("Commission")].isNull() && m_commission_isValid;

    m_commission_currency_isValid = ::OpenAPI::fromJsonValue(m_commission_currency, json[QString("CommissionCurrency")]);
    m_commission_currency_isSet = !json[QString("CommissionCurrency")].isNull() && m_commission_currency_isValid;

    m_contract_id_isValid = ::OpenAPI::fromJsonValue(m_contract_id, json[QString("ContractId")]);
    m_contract_id_isSet = !json[QString("ContractId")].isNull() && m_contract_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_customer_order_id_isValid = ::OpenAPI::fromJsonValue(m_customer_order_id, json[QString("CustomerOrderId")]);
    m_customer_order_id_isSet = !json[QString("CustomerOrderId")].isNull() && m_customer_order_id_isValid;

    m_exec_id_isValid = ::OpenAPI::fromJsonValue(m_exec_id, json[QString("ExecId")]);
    m_exec_id_isSet = !json[QString("ExecId")].isNull() && m_exec_id_isValid;

    m_execution_time_isValid = ::OpenAPI::fromJsonValue(m_execution_time, json[QString("ExecutionTime")]);
    m_execution_time_isSet = !json[QString("ExecutionTime")].isNull() && m_execution_time_isValid;

    m_filled_quantity_isValid = ::OpenAPI::fromJsonValue(m_filled_quantity, json[QString("FilledQuantity")]);
    m_filled_quantity_isSet = !json[QString("FilledQuantity")].isNull() && m_filled_quantity_isValid;

    m_last_market_isValid = ::OpenAPI::fromJsonValue(m_last_market, json[QString("LastMarket")]);
    m_last_market_isSet = !json[QString("LastMarket")].isNull() && m_last_market_isValid;

    m_listing_exchange_isValid = ::OpenAPI::fromJsonValue(m_listing_exchange, json[QString("ListingExchange")]);
    m_listing_exchange_isSet = !json[QString("ListingExchange")].isNull() && m_listing_exchange_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("OrderId")]);
    m_order_id_isSet = !json[QString("OrderId")].isNull() && m_order_id_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("OrderType")]);
    m_order_type_isSet = !json[QString("OrderType")].isNull() && m_order_type_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_remaining_quantity_isValid = ::OpenAPI::fromJsonValue(m_remaining_quantity, json[QString("RemainingQuantity")]);
    m_remaining_quantity_isSet = !json[QString("RemainingQuantity")].isNull() && m_remaining_quantity_isValid;

    m_side_isValid = ::OpenAPI::fromJsonValue(m_side, json[QString("Side")]);
    m_side_isSet = !json[QString("Side")].isNull() && m_side_isValid;

    m_ticker_isValid = ::OpenAPI::fromJsonValue(m_ticker, json[QString("Ticker")]);
    m_ticker_isSet = !json[QString("Ticker")].isNull() && m_ticker_isValid;

    m_trade_price_isValid = ::OpenAPI::fromJsonValue(m_trade_price, json[QString("TradePrice")]);
    m_trade_price_isSet = !json[QString("TradePrice")].isNull() && m_trade_price_isValid;

    m_trade_size_isValid = ::OpenAPI::fromJsonValue(m_trade_size, json[QString("TradeSize")]);
    m_trade_size_isSet = !json[QString("TradeSize")].isNull() && m_trade_size_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_accounts__account__trades_get_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_price_isSet) {
        obj.insert(QString("AvgPrice"), ::OpenAPI::toJsonValue(m_avg_price));
    }
    if (m_commission_isSet) {
        obj.insert(QString("Commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_commission_currency_isSet) {
        obj.insert(QString("CommissionCurrency"), ::OpenAPI::toJsonValue(m_commission_currency));
    }
    if (m_contract_id_isSet) {
        obj.insert(QString("ContractId"), ::OpenAPI::toJsonValue(m_contract_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer_order_id_isSet) {
        obj.insert(QString("CustomerOrderId"), ::OpenAPI::toJsonValue(m_customer_order_id));
    }
    if (m_exec_id_isSet) {
        obj.insert(QString("ExecId"), ::OpenAPI::toJsonValue(m_exec_id));
    }
    if (m_execution_time_isSet) {
        obj.insert(QString("ExecutionTime"), ::OpenAPI::toJsonValue(m_execution_time));
    }
    if (m_filled_quantity_isSet) {
        obj.insert(QString("FilledQuantity"), ::OpenAPI::toJsonValue(m_filled_quantity));
    }
    if (m_last_market_isSet) {
        obj.insert(QString("LastMarket"), ::OpenAPI::toJsonValue(m_last_market));
    }
    if (m_listing_exchange_isSet) {
        obj.insert(QString("ListingExchange"), ::OpenAPI::toJsonValue(m_listing_exchange));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("OrderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_order_type.isSet()) {
        obj.insert(QString("OrderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_remaining_quantity_isSet) {
        obj.insert(QString("RemainingQuantity"), ::OpenAPI::toJsonValue(m_remaining_quantity));
    }
    if (m_side_isSet) {
        obj.insert(QString("Side"), ::OpenAPI::toJsonValue(m_side));
    }
    if (m_ticker_isSet) {
        obj.insert(QString("Ticker"), ::OpenAPI::toJsonValue(m_ticker));
    }
    if (m_trade_price_isSet) {
        obj.insert(QString("TradePrice"), ::OpenAPI::toJsonValue(m_trade_price));
    }
    if (m_trade_size_isSet) {
        obj.insert(QString("TradeSize"), ::OpenAPI::toJsonValue(m_trade_size));
    }
    return obj;
}

double OAI_accounts__account__trades_get_200_response_inner::getAvgPrice() const {
    return m_avg_price;
}
void OAI_accounts__account__trades_get_200_response_inner::setAvgPrice(const double &avg_price) {
    m_avg_price = avg_price;
    m_avg_price_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_avg_price_Set() const{
    return m_avg_price_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_avg_price_Valid() const{
    return m_avg_price_isValid;
}

double OAI_accounts__account__trades_get_200_response_inner::getCommission() const {
    return m_commission;
}
void OAI_accounts__account__trades_get_200_response_inner::setCommission(const double &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_commission_Valid() const{
    return m_commission_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::getCommissionCurrency() const {
    return m_commission_currency;
}
void OAI_accounts__account__trades_get_200_response_inner::setCommissionCurrency(const QString &commission_currency) {
    m_commission_currency = commission_currency;
    m_commission_currency_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_commission_currency_Set() const{
    return m_commission_currency_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_commission_currency_Valid() const{
    return m_commission_currency_isValid;
}

double OAI_accounts__account__trades_get_200_response_inner::getContractId() const {
    return m_contract_id;
}
void OAI_accounts__account__trades_get_200_response_inner::setContractId(const double &contract_id) {
    m_contract_id = contract_id;
    m_contract_id_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_contract_id_Set() const{
    return m_contract_id_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_contract_id_Valid() const{
    return m_contract_id_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::getCurrency() const {
    return m_currency;
}
void OAI_accounts__account__trades_get_200_response_inner::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAI_accounts__account__trades_get_200_response_inner::getCustomerOrderId() const {
    return m_customer_order_id;
}
void OAI_accounts__account__trades_get_200_response_inner::setCustomerOrderId(const double &customer_order_id) {
    m_customer_order_id = customer_order_id;
    m_customer_order_id_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_customer_order_id_Set() const{
    return m_customer_order_id_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_customer_order_id_Valid() const{
    return m_customer_order_id_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::getExecId() const {
    return m_exec_id;
}
void OAI_accounts__account__trades_get_200_response_inner::setExecId(const QString &exec_id) {
    m_exec_id = exec_id;
    m_exec_id_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_exec_id_Set() const{
    return m_exec_id_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_exec_id_Valid() const{
    return m_exec_id_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::getExecutionTime() const {
    return m_execution_time;
}
void OAI_accounts__account__trades_get_200_response_inner::setExecutionTime(const QString &execution_time) {
    m_execution_time = execution_time;
    m_execution_time_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_execution_time_Set() const{
    return m_execution_time_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_execution_time_Valid() const{
    return m_execution_time_isValid;
}

double OAI_accounts__account__trades_get_200_response_inner::getFilledQuantity() const {
    return m_filled_quantity;
}
void OAI_accounts__account__trades_get_200_response_inner::setFilledQuantity(const double &filled_quantity) {
    m_filled_quantity = filled_quantity;
    m_filled_quantity_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_filled_quantity_Set() const{
    return m_filled_quantity_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_filled_quantity_Valid() const{
    return m_filled_quantity_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::getLastMarket() const {
    return m_last_market;
}
void OAI_accounts__account__trades_get_200_response_inner::setLastMarket(const QString &last_market) {
    m_last_market = last_market;
    m_last_market_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_last_market_Set() const{
    return m_last_market_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_last_market_Valid() const{
    return m_last_market_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::getListingExchange() const {
    return m_listing_exchange;
}
void OAI_accounts__account__trades_get_200_response_inner::setListingExchange(const QString &listing_exchange) {
    m_listing_exchange = listing_exchange;
    m_listing_exchange_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_listing_exchange_Set() const{
    return m_listing_exchange_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_listing_exchange_Valid() const{
    return m_listing_exchange_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::getOrderId() const {
    return m_order_id;
}
void OAI_accounts__account__trades_get_200_response_inner::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_order_id_Valid() const{
    return m_order_id_isValid;
}

OAIOrderType OAI_accounts__account__trades_get_200_response_inner::getOrderType() const {
    return m_order_type;
}
void OAI_accounts__account__trades_get_200_response_inner::setOrderType(const OAIOrderType &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_order_type_Valid() const{
    return m_order_type_isValid;
}

double OAI_accounts__account__trades_get_200_response_inner::getQuantity() const {
    return m_quantity;
}
void OAI_accounts__account__trades_get_200_response_inner::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAI_accounts__account__trades_get_200_response_inner::getRemainingQuantity() const {
    return m_remaining_quantity;
}
void OAI_accounts__account__trades_get_200_response_inner::setRemainingQuantity(const double &remaining_quantity) {
    m_remaining_quantity = remaining_quantity;
    m_remaining_quantity_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_remaining_quantity_Set() const{
    return m_remaining_quantity_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_remaining_quantity_Valid() const{
    return m_remaining_quantity_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::getSide() const {
    return m_side;
}
void OAI_accounts__account__trades_get_200_response_inner::setSide(const QString &side) {
    m_side = side;
    m_side_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_side_Set() const{
    return m_side_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_side_Valid() const{
    return m_side_isValid;
}

QString OAI_accounts__account__trades_get_200_response_inner::getTicker() const {
    return m_ticker;
}
void OAI_accounts__account__trades_get_200_response_inner::setTicker(const QString &ticker) {
    m_ticker = ticker;
    m_ticker_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_ticker_Set() const{
    return m_ticker_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_ticker_Valid() const{
    return m_ticker_isValid;
}

double OAI_accounts__account__trades_get_200_response_inner::getTradePrice() const {
    return m_trade_price;
}
void OAI_accounts__account__trades_get_200_response_inner::setTradePrice(const double &trade_price) {
    m_trade_price = trade_price;
    m_trade_price_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_trade_price_Set() const{
    return m_trade_price_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_trade_price_Valid() const{
    return m_trade_price_isValid;
}

double OAI_accounts__account__trades_get_200_response_inner::getTradeSize() const {
    return m_trade_size;
}
void OAI_accounts__account__trades_get_200_response_inner::setTradeSize(const double &trade_size) {
    m_trade_size = trade_size;
    m_trade_size_isSet = true;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_trade_size_Set() const{
    return m_trade_size_isSet;
}

bool OAI_accounts__account__trades_get_200_response_inner::is_trade_size_Valid() const{
    return m_trade_size_isValid;
}

bool OAI_accounts__account__trades_get_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exec_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filled_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_market_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trade_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trade_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_accounts__account__trades_get_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
