/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner() {
    this->initializeModel();
}

OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::~OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner() {}

void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::initializeModel() {

    m_customer_order_id_isSet = false;
    m_customer_order_id_isValid = false;

    m_order_qty_isSet = false;
    m_order_qty_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_side_isSet = false;
    m_side_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_warning_isSet = false;
    m_warning_isValid = false;
}

void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::fromJsonObject(QJsonObject json) {

    m_customer_order_id_isValid = ::OpenAPI::fromJsonValue(m_customer_order_id, json[QString("CustomerOrderId")]);
    m_customer_order_id_isSet = !json[QString("CustomerOrderId")].isNull() && m_customer_order_id_isValid;

    m_order_qty_isValid = ::OpenAPI::fromJsonValue(m_order_qty, json[QString("OrderQty")]);
    m_order_qty_isSet = !json[QString("OrderQty")].isNull() && m_order_qty_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("OrderType")]);
    m_order_type_isSet = !json[QString("OrderType")].isNull() && m_order_type_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("Price")]);
    m_price_isSet = !json[QString("Price")].isNull() && m_price_isValid;

    m_side_isValid = ::OpenAPI::fromJsonValue(m_side, json[QString("Side")]);
    m_side_isSet = !json[QString("Side")].isNull() && m_side_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("Symbol")]);
    m_symbol_isSet = !json[QString("Symbol")].isNull() && m_symbol_isValid;

    m_warning_isValid = ::OpenAPI::fromJsonValue(m_warning, json[QString("Warning")]);
    m_warning_isSet = !json[QString("Warning")].isNull() && m_warning_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_order_id_isSet) {
        obj.insert(QString("CustomerOrderId"), ::OpenAPI::toJsonValue(m_customer_order_id));
    }
    if (m_order_qty_isSet) {
        obj.insert(QString("OrderQty"), ::OpenAPI::toJsonValue(m_order_qty));
    }
    if (m_order_type.isSet()) {
        obj.insert(QString("OrderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_price_isSet) {
        obj.insert(QString("Price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_side_isSet) {
        obj.insert(QString("Side"), ::OpenAPI::toJsonValue(m_side));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("Symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_warning_isSet) {
        obj.insert(QString("Warning"), ::OpenAPI::toJsonValue(m_warning));
    }
    return obj;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::getCustomerOrderId() const {
    return m_customer_order_id;
}
void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::setCustomerOrderId(const QString &customer_order_id) {
    m_customer_order_id = customer_order_id;
    m_customer_order_id_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_customer_order_id_Set() const{
    return m_customer_order_id_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_customer_order_id_Valid() const{
    return m_customer_order_id_isValid;
}

double OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::getOrderQty() const {
    return m_order_qty;
}
void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::setOrderQty(const double &order_qty) {
    m_order_qty = order_qty;
    m_order_qty_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_order_qty_Set() const{
    return m_order_qty_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_order_qty_Valid() const{
    return m_order_qty_isValid;
}

OAIOrderType OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::getOrderType() const {
    return m_order_type;
}
void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::setOrderType(const OAIOrderType &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_order_type_Valid() const{
    return m_order_type_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::getPrice() const {
    return m_price;
}
void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_price_Set() const{
    return m_price_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_price_Valid() const{
    return m_price_isValid;
}

double OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::getSide() const {
    return m_side;
}
void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::setSide(const double &side) {
    m_side = side;
    m_side_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_side_Set() const{
    return m_side_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_side_Valid() const{
    return m_side_isValid;
}

OAIOrderStatus OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::getStatus() const {
    return m_status;
}
void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::setStatus(const OAIOrderStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_status_Valid() const{
    return m_status_isValid;
}

double OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::getSymbol() const {
    return m_symbol;
}
void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::setSymbol(const double &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::getWarning() const {
    return m_warning;
}
void OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::setWarning(const QString &warning) {
    m_warning = warning;
    m_warning_isSet = true;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_warning_Set() const{
    return m_warning_isSet;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::is_warning_Valid() const{
    return m_warning_isValid;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_accounts__account__orders__CustomerOrderId__put_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
