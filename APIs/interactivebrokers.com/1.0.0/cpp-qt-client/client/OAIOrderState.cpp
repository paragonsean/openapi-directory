/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderState::OAIOrderState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderState::OAIOrderState() {
    this->initializeModel();
}

OAIOrderState::~OAIOrderState() {}

void OAIOrderState::initializeModel() {

    m_contract_id_isSet = false;
    m_contract_id_isValid = false;

    m_customer_order_id_isSet = false;
    m_customer_order_id_isValid = false;

    m_filled_quantity_isSet = false;
    m_filled_quantity_isValid = false;

    m_listing_exchange_isSet = false;
    m_listing_exchange_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_outside_rth_isSet = false;
    m_outside_rth_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_remaining_quantity_isSet = false;
    m_remaining_quantity_isValid = false;

    m_side_isSet = false;
    m_side_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_ticker_isSet = false;
    m_ticker_isValid = false;

    m_time_in_force_isSet = false;
    m_time_in_force_isValid = false;

    m_transaction_time_isSet = false;
    m_transaction_time_isValid = false;

    m_warning_isSet = false;
    m_warning_isValid = false;
}

void OAIOrderState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderState::fromJsonObject(QJsonObject json) {

    m_contract_id_isValid = ::OpenAPI::fromJsonValue(m_contract_id, json[QString("ContractId")]);
    m_contract_id_isSet = !json[QString("ContractId")].isNull() && m_contract_id_isValid;

    m_customer_order_id_isValid = ::OpenAPI::fromJsonValue(m_customer_order_id, json[QString("CustomerOrderId")]);
    m_customer_order_id_isSet = !json[QString("CustomerOrderId")].isNull() && m_customer_order_id_isValid;

    m_filled_quantity_isValid = ::OpenAPI::fromJsonValue(m_filled_quantity, json[QString("FilledQuantity")]);
    m_filled_quantity_isSet = !json[QString("FilledQuantity")].isNull() && m_filled_quantity_isValid;

    m_listing_exchange_isValid = ::OpenAPI::fromJsonValue(m_listing_exchange, json[QString("ListingExchange")]);
    m_listing_exchange_isSet = !json[QString("ListingExchange")].isNull() && m_listing_exchange_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("OrderType")]);
    m_order_type_isSet = !json[QString("OrderType")].isNull() && m_order_type_isValid;

    m_outside_rth_isValid = ::OpenAPI::fromJsonValue(m_outside_rth, json[QString("OutsideRTH")]);
    m_outside_rth_isSet = !json[QString("OutsideRTH")].isNull() && m_outside_rth_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("Price")]);
    m_price_isSet = !json[QString("Price")].isNull() && m_price_isValid;

    m_remaining_quantity_isValid = ::OpenAPI::fromJsonValue(m_remaining_quantity, json[QString("RemainingQuantity")]);
    m_remaining_quantity_isSet = !json[QString("RemainingQuantity")].isNull() && m_remaining_quantity_isValid;

    m_side_isValid = ::OpenAPI::fromJsonValue(m_side, json[QString("Side")]);
    m_side_isSet = !json[QString("Side")].isNull() && m_side_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_ticker_isValid = ::OpenAPI::fromJsonValue(m_ticker, json[QString("Ticker")]);
    m_ticker_isSet = !json[QString("Ticker")].isNull() && m_ticker_isValid;

    m_time_in_force_isValid = ::OpenAPI::fromJsonValue(m_time_in_force, json[QString("TimeInForce")]);
    m_time_in_force_isSet = !json[QString("TimeInForce")].isNull() && m_time_in_force_isValid;

    m_transaction_time_isValid = ::OpenAPI::fromJsonValue(m_transaction_time, json[QString("TransactionTime")]);
    m_transaction_time_isSet = !json[QString("TransactionTime")].isNull() && m_transaction_time_isValid;

    m_warning_isValid = ::OpenAPI::fromJsonValue(m_warning, json[QString("Warning")]);
    m_warning_isSet = !json[QString("Warning")].isNull() && m_warning_isValid;
}

QString OAIOrderState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderState::asJsonObject() const {
    QJsonObject obj;
    if (m_contract_id_isSet) {
        obj.insert(QString("ContractId"), ::OpenAPI::toJsonValue(m_contract_id));
    }
    if (m_customer_order_id_isSet) {
        obj.insert(QString("CustomerOrderId"), ::OpenAPI::toJsonValue(m_customer_order_id));
    }
    if (m_filled_quantity_isSet) {
        obj.insert(QString("FilledQuantity"), ::OpenAPI::toJsonValue(m_filled_quantity));
    }
    if (m_listing_exchange_isSet) {
        obj.insert(QString("ListingExchange"), ::OpenAPI::toJsonValue(m_listing_exchange));
    }
    if (m_order_type.isSet()) {
        obj.insert(QString("OrderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_outside_rth_isSet) {
        obj.insert(QString("OutsideRTH"), ::OpenAPI::toJsonValue(m_outside_rth));
    }
    if (m_price_isSet) {
        obj.insert(QString("Price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_remaining_quantity_isSet) {
        obj.insert(QString("RemainingQuantity"), ::OpenAPI::toJsonValue(m_remaining_quantity));
    }
    if (m_side_isSet) {
        obj.insert(QString("Side"), ::OpenAPI::toJsonValue(m_side));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_ticker_isSet) {
        obj.insert(QString("Ticker"), ::OpenAPI::toJsonValue(m_ticker));
    }
    if (m_time_in_force.isSet()) {
        obj.insert(QString("TimeInForce"), ::OpenAPI::toJsonValue(m_time_in_force));
    }
    if (m_transaction_time_isSet) {
        obj.insert(QString("TransactionTime"), ::OpenAPI::toJsonValue(m_transaction_time));
    }
    if (m_warning_isSet) {
        obj.insert(QString("Warning"), ::OpenAPI::toJsonValue(m_warning));
    }
    return obj;
}

double OAIOrderState::getContractId() const {
    return m_contract_id;
}
void OAIOrderState::setContractId(const double &contract_id) {
    m_contract_id = contract_id;
    m_contract_id_isSet = true;
}

bool OAIOrderState::is_contract_id_Set() const{
    return m_contract_id_isSet;
}

bool OAIOrderState::is_contract_id_Valid() const{
    return m_contract_id_isValid;
}

double OAIOrderState::getCustomerOrderId() const {
    return m_customer_order_id;
}
void OAIOrderState::setCustomerOrderId(const double &customer_order_id) {
    m_customer_order_id = customer_order_id;
    m_customer_order_id_isSet = true;
}

bool OAIOrderState::is_customer_order_id_Set() const{
    return m_customer_order_id_isSet;
}

bool OAIOrderState::is_customer_order_id_Valid() const{
    return m_customer_order_id_isValid;
}

double OAIOrderState::getFilledQuantity() const {
    return m_filled_quantity;
}
void OAIOrderState::setFilledQuantity(const double &filled_quantity) {
    m_filled_quantity = filled_quantity;
    m_filled_quantity_isSet = true;
}

bool OAIOrderState::is_filled_quantity_Set() const{
    return m_filled_quantity_isSet;
}

bool OAIOrderState::is_filled_quantity_Valid() const{
    return m_filled_quantity_isValid;
}

QString OAIOrderState::getListingExchange() const {
    return m_listing_exchange;
}
void OAIOrderState::setListingExchange(const QString &listing_exchange) {
    m_listing_exchange = listing_exchange;
    m_listing_exchange_isSet = true;
}

bool OAIOrderState::is_listing_exchange_Set() const{
    return m_listing_exchange_isSet;
}

bool OAIOrderState::is_listing_exchange_Valid() const{
    return m_listing_exchange_isValid;
}

OAIOrderType OAIOrderState::getOrderType() const {
    return m_order_type;
}
void OAIOrderState::setOrderType(const OAIOrderType &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAIOrderState::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAIOrderState::is_order_type_Valid() const{
    return m_order_type_isValid;
}

QString OAIOrderState::getOutsideRth() const {
    return m_outside_rth;
}
void OAIOrderState::setOutsideRth(const QString &outside_rth) {
    m_outside_rth = outside_rth;
    m_outside_rth_isSet = true;
}

bool OAIOrderState::is_outside_rth_Set() const{
    return m_outside_rth_isSet;
}

bool OAIOrderState::is_outside_rth_Valid() const{
    return m_outside_rth_isValid;
}

double OAIOrderState::getPrice() const {
    return m_price;
}
void OAIOrderState::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOrderState::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOrderState::is_price_Valid() const{
    return m_price_isValid;
}

double OAIOrderState::getRemainingQuantity() const {
    return m_remaining_quantity;
}
void OAIOrderState::setRemainingQuantity(const double &remaining_quantity) {
    m_remaining_quantity = remaining_quantity;
    m_remaining_quantity_isSet = true;
}

bool OAIOrderState::is_remaining_quantity_Set() const{
    return m_remaining_quantity_isSet;
}

bool OAIOrderState::is_remaining_quantity_Valid() const{
    return m_remaining_quantity_isValid;
}

QString OAIOrderState::getSide() const {
    return m_side;
}
void OAIOrderState::setSide(const QString &side) {
    m_side = side;
    m_side_isSet = true;
}

bool OAIOrderState::is_side_Set() const{
    return m_side_isSet;
}

bool OAIOrderState::is_side_Valid() const{
    return m_side_isValid;
}

OAIOrderStatus OAIOrderState::getStatus() const {
    return m_status;
}
void OAIOrderState::setStatus(const OAIOrderStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrderState::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrderState::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOrderState::getTicker() const {
    return m_ticker;
}
void OAIOrderState::setTicker(const QString &ticker) {
    m_ticker = ticker;
    m_ticker_isSet = true;
}

bool OAIOrderState::is_ticker_Set() const{
    return m_ticker_isSet;
}

bool OAIOrderState::is_ticker_Valid() const{
    return m_ticker_isValid;
}

OAITimeInForce OAIOrderState::getTimeInForce() const {
    return m_time_in_force;
}
void OAIOrderState::setTimeInForce(const OAITimeInForce &time_in_force) {
    m_time_in_force = time_in_force;
    m_time_in_force_isSet = true;
}

bool OAIOrderState::is_time_in_force_Set() const{
    return m_time_in_force_isSet;
}

bool OAIOrderState::is_time_in_force_Valid() const{
    return m_time_in_force_isValid;
}

QString OAIOrderState::getTransactionTime() const {
    return m_transaction_time;
}
void OAIOrderState::setTransactionTime(const QString &transaction_time) {
    m_transaction_time = transaction_time;
    m_transaction_time_isSet = true;
}

bool OAIOrderState::is_transaction_time_Set() const{
    return m_transaction_time_isSet;
}

bool OAIOrderState::is_transaction_time_Valid() const{
    return m_transaction_time_isValid;
}

QString OAIOrderState::getWarning() const {
    return m_warning;
}
void OAIOrderState::setWarning(const QString &warning) {
    m_warning = warning;
    m_warning_isSet = true;
}

bool OAIOrderState::is_warning_Set() const{
    return m_warning_isSet;
}

bool OAIOrderState::is_warning_Valid() const{
    return m_warning_isValid;
}

bool OAIOrderState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contract_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filled_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_rth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_in_force.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
