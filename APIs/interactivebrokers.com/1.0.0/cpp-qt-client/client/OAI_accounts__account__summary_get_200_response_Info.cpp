/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_accounts__account__summary_get_200_response_Info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_accounts__account__summary_get_200_response_Info::OAI_accounts__account__summary_get_200_response_Info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_accounts__account__summary_get_200_response_Info::OAI_accounts__account__summary_get_200_response_Info() {
    this->initializeModel();
}

OAI_accounts__account__summary_get_200_response_Info::~OAI_accounts__account__summary_get_200_response_Info() {}

void OAI_accounts__account__summary_get_200_response_Info::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_ready_isSet = false;
    m_account_ready_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_cushion_isSet = false;
    m_cushion_isValid = false;

    m_day_trades_remaining_isSet = false;
    m_day_trades_remaining_isValid = false;

    m_day_trades_remaining_t_isSet = false;
    m_day_trades_remaining_t_isValid = false;

    m_day_trades_remaining_t2_isSet = false;
    m_day_trades_remaining_t2_isValid = false;

    m_day_trades_remaining_t3_isSet = false;
    m_day_trades_remaining_t3_isValid = false;

    m_day_trades_remaining_t4_isSet = false;
    m_day_trades_remaining_t4_isValid = false;

    m_highest_severity_isSet = false;
    m_highest_severity_isValid = false;

    m_leverage_s_isSet = false;
    m_leverage_s_isValid = false;

    m_look_ahead_next_change_isSet = false;
    m_look_ahead_next_change_isValid = false;

    m_segment_title_c_isSet = false;
    m_segment_title_c_isValid = false;

    m_segment_title_s_isSet = false;
    m_segment_title_s_isValid = false;

    m_trading_type_s_isSet = false;
    m_trading_type_s_isValid = false;

    m_what_if_pm_enabled_isSet = false;
    m_what_if_pm_enabled_isValid = false;
}

void OAI_accounts__account__summary_get_200_response_Info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_accounts__account__summary_get_200_response_Info::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("AccountCode")]);
    m_account_code_isSet = !json[QString("AccountCode")].isNull() && m_account_code_isValid;

    m_account_ready_isValid = ::OpenAPI::fromJsonValue(m_account_ready, json[QString("AccountReady")]);
    m_account_ready_isSet = !json[QString("AccountReady")].isNull() && m_account_ready_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("AccountType")]);
    m_account_type_isSet = !json[QString("AccountType")].isNull() && m_account_type_isValid;

    m_cushion_isValid = ::OpenAPI::fromJsonValue(m_cushion, json[QString("Cushion")]);
    m_cushion_isSet = !json[QString("Cushion")].isNull() && m_cushion_isValid;

    m_day_trades_remaining_isValid = ::OpenAPI::fromJsonValue(m_day_trades_remaining, json[QString("DayTradesRemaining")]);
    m_day_trades_remaining_isSet = !json[QString("DayTradesRemaining")].isNull() && m_day_trades_remaining_isValid;

    m_day_trades_remaining_t_isValid = ::OpenAPI::fromJsonValue(m_day_trades_remaining_t, json[QString("DayTradesRemainingT")]);
    m_day_trades_remaining_t_isSet = !json[QString("DayTradesRemainingT")].isNull() && m_day_trades_remaining_t_isValid;

    m_day_trades_remaining_t2_isValid = ::OpenAPI::fromJsonValue(m_day_trades_remaining_t2, json[QString("DayTradesRemainingT+2")]);
    m_day_trades_remaining_t2_isSet = !json[QString("DayTradesRemainingT+2")].isNull() && m_day_trades_remaining_t2_isValid;

    m_day_trades_remaining_t3_isValid = ::OpenAPI::fromJsonValue(m_day_trades_remaining_t3, json[QString("DayTradesRemainingT+3")]);
    m_day_trades_remaining_t3_isSet = !json[QString("DayTradesRemainingT+3")].isNull() && m_day_trades_remaining_t3_isValid;

    m_day_trades_remaining_t4_isValid = ::OpenAPI::fromJsonValue(m_day_trades_remaining_t4, json[QString("DayTradesRemainingT+4")]);
    m_day_trades_remaining_t4_isSet = !json[QString("DayTradesRemainingT+4")].isNull() && m_day_trades_remaining_t4_isValid;

    m_highest_severity_isValid = ::OpenAPI::fromJsonValue(m_highest_severity, json[QString("HighestSeverity")]);
    m_highest_severity_isSet = !json[QString("HighestSeverity")].isNull() && m_highest_severity_isValid;

    m_leverage_s_isValid = ::OpenAPI::fromJsonValue(m_leverage_s, json[QString("Leverage-S")]);
    m_leverage_s_isSet = !json[QString("Leverage-S")].isNull() && m_leverage_s_isValid;

    m_look_ahead_next_change_isValid = ::OpenAPI::fromJsonValue(m_look_ahead_next_change, json[QString("LookAheadNextChange")]);
    m_look_ahead_next_change_isSet = !json[QString("LookAheadNextChange")].isNull() && m_look_ahead_next_change_isValid;

    m_segment_title_c_isValid = ::OpenAPI::fromJsonValue(m_segment_title_c, json[QString("SegmentTitle-C")]);
    m_segment_title_c_isSet = !json[QString("SegmentTitle-C")].isNull() && m_segment_title_c_isValid;

    m_segment_title_s_isValid = ::OpenAPI::fromJsonValue(m_segment_title_s, json[QString("SegmentTitle-S")]);
    m_segment_title_s_isSet = !json[QString("SegmentTitle-S")].isNull() && m_segment_title_s_isValid;

    m_trading_type_s_isValid = ::OpenAPI::fromJsonValue(m_trading_type_s, json[QString("TradingType-S")]);
    m_trading_type_s_isSet = !json[QString("TradingType-S")].isNull() && m_trading_type_s_isValid;

    m_what_if_pm_enabled_isValid = ::OpenAPI::fromJsonValue(m_what_if_pm_enabled, json[QString("WhatIfPMEnabled")]);
    m_what_if_pm_enabled_isSet = !json[QString("WhatIfPMEnabled")].isNull() && m_what_if_pm_enabled_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_accounts__account__summary_get_200_response_Info::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("AccountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_ready_isSet) {
        obj.insert(QString("AccountReady"), ::OpenAPI::toJsonValue(m_account_ready));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("AccountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_cushion_isSet) {
        obj.insert(QString("Cushion"), ::OpenAPI::toJsonValue(m_cushion));
    }
    if (m_day_trades_remaining_isSet) {
        obj.insert(QString("DayTradesRemaining"), ::OpenAPI::toJsonValue(m_day_trades_remaining));
    }
    if (m_day_trades_remaining_t_isSet) {
        obj.insert(QString("DayTradesRemainingT"), ::OpenAPI::toJsonValue(m_day_trades_remaining_t));
    }
    if (m_day_trades_remaining_t2_isSet) {
        obj.insert(QString("DayTradesRemainingT+2"), ::OpenAPI::toJsonValue(m_day_trades_remaining_t2));
    }
    if (m_day_trades_remaining_t3_isSet) {
        obj.insert(QString("DayTradesRemainingT+3"), ::OpenAPI::toJsonValue(m_day_trades_remaining_t3));
    }
    if (m_day_trades_remaining_t4_isSet) {
        obj.insert(QString("DayTradesRemainingT+4"), ::OpenAPI::toJsonValue(m_day_trades_remaining_t4));
    }
    if (m_highest_severity_isSet) {
        obj.insert(QString("HighestSeverity"), ::OpenAPI::toJsonValue(m_highest_severity));
    }
    if (m_leverage_s_isSet) {
        obj.insert(QString("Leverage-S"), ::OpenAPI::toJsonValue(m_leverage_s));
    }
    if (m_look_ahead_next_change_isSet) {
        obj.insert(QString("LookAheadNextChange"), ::OpenAPI::toJsonValue(m_look_ahead_next_change));
    }
    if (m_segment_title_c_isSet) {
        obj.insert(QString("SegmentTitle-C"), ::OpenAPI::toJsonValue(m_segment_title_c));
    }
    if (m_segment_title_s_isSet) {
        obj.insert(QString("SegmentTitle-S"), ::OpenAPI::toJsonValue(m_segment_title_s));
    }
    if (m_trading_type_s_isSet) {
        obj.insert(QString("TradingType-S"), ::OpenAPI::toJsonValue(m_trading_type_s));
    }
    if (m_what_if_pm_enabled_isSet) {
        obj.insert(QString("WhatIfPMEnabled"), ::OpenAPI::toJsonValue(m_what_if_pm_enabled));
    }
    return obj;
}

QString OAI_accounts__account__summary_get_200_response_Info::getAccountCode() const {
    return m_account_code;
}
void OAI_accounts__account__summary_get_200_response_Info::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getAccountReady() const {
    return m_account_ready;
}
void OAI_accounts__account__summary_get_200_response_Info::setAccountReady(const QString &account_ready) {
    m_account_ready = account_ready;
    m_account_ready_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_account_ready_Set() const{
    return m_account_ready_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_account_ready_Valid() const{
    return m_account_ready_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getAccountType() const {
    return m_account_type;
}
void OAI_accounts__account__summary_get_200_response_Info::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getCushion() const {
    return m_cushion;
}
void OAI_accounts__account__summary_get_200_response_Info::setCushion(const QString &cushion) {
    m_cushion = cushion;
    m_cushion_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_cushion_Set() const{
    return m_cushion_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_cushion_Valid() const{
    return m_cushion_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getDayTradesRemaining() const {
    return m_day_trades_remaining;
}
void OAI_accounts__account__summary_get_200_response_Info::setDayTradesRemaining(const QString &day_trades_remaining) {
    m_day_trades_remaining = day_trades_remaining;
    m_day_trades_remaining_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_Set() const{
    return m_day_trades_remaining_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_Valid() const{
    return m_day_trades_remaining_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getDayTradesRemainingT() const {
    return m_day_trades_remaining_t;
}
void OAI_accounts__account__summary_get_200_response_Info::setDayTradesRemainingT(const QString &day_trades_remaining_t) {
    m_day_trades_remaining_t = day_trades_remaining_t;
    m_day_trades_remaining_t_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_t_Set() const{
    return m_day_trades_remaining_t_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_t_Valid() const{
    return m_day_trades_remaining_t_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getDayTradesRemainingT2() const {
    return m_day_trades_remaining_t2;
}
void OAI_accounts__account__summary_get_200_response_Info::setDayTradesRemainingT2(const QString &day_trades_remaining_t2) {
    m_day_trades_remaining_t2 = day_trades_remaining_t2;
    m_day_trades_remaining_t2_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_t2_Set() const{
    return m_day_trades_remaining_t2_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_t2_Valid() const{
    return m_day_trades_remaining_t2_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getDayTradesRemainingT3() const {
    return m_day_trades_remaining_t3;
}
void OAI_accounts__account__summary_get_200_response_Info::setDayTradesRemainingT3(const QString &day_trades_remaining_t3) {
    m_day_trades_remaining_t3 = day_trades_remaining_t3;
    m_day_trades_remaining_t3_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_t3_Set() const{
    return m_day_trades_remaining_t3_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_t3_Valid() const{
    return m_day_trades_remaining_t3_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getDayTradesRemainingT4() const {
    return m_day_trades_remaining_t4;
}
void OAI_accounts__account__summary_get_200_response_Info::setDayTradesRemainingT4(const QString &day_trades_remaining_t4) {
    m_day_trades_remaining_t4 = day_trades_remaining_t4;
    m_day_trades_remaining_t4_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_t4_Set() const{
    return m_day_trades_remaining_t4_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_day_trades_remaining_t4_Valid() const{
    return m_day_trades_remaining_t4_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getHighestSeverity() const {
    return m_highest_severity;
}
void OAI_accounts__account__summary_get_200_response_Info::setHighestSeverity(const QString &highest_severity) {
    m_highest_severity = highest_severity;
    m_highest_severity_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_highest_severity_Set() const{
    return m_highest_severity_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_highest_severity_Valid() const{
    return m_highest_severity_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getLeverageS() const {
    return m_leverage_s;
}
void OAI_accounts__account__summary_get_200_response_Info::setLeverageS(const QString &leverage_s) {
    m_leverage_s = leverage_s;
    m_leverage_s_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_leverage_s_Set() const{
    return m_leverage_s_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_leverage_s_Valid() const{
    return m_leverage_s_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getLookAheadNextChange() const {
    return m_look_ahead_next_change;
}
void OAI_accounts__account__summary_get_200_response_Info::setLookAheadNextChange(const QString &look_ahead_next_change) {
    m_look_ahead_next_change = look_ahead_next_change;
    m_look_ahead_next_change_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_look_ahead_next_change_Set() const{
    return m_look_ahead_next_change_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_look_ahead_next_change_Valid() const{
    return m_look_ahead_next_change_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getSegmentTitleC() const {
    return m_segment_title_c;
}
void OAI_accounts__account__summary_get_200_response_Info::setSegmentTitleC(const QString &segment_title_c) {
    m_segment_title_c = segment_title_c;
    m_segment_title_c_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_segment_title_c_Set() const{
    return m_segment_title_c_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_segment_title_c_Valid() const{
    return m_segment_title_c_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getSegmentTitleS() const {
    return m_segment_title_s;
}
void OAI_accounts__account__summary_get_200_response_Info::setSegmentTitleS(const QString &segment_title_s) {
    m_segment_title_s = segment_title_s;
    m_segment_title_s_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_segment_title_s_Set() const{
    return m_segment_title_s_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_segment_title_s_Valid() const{
    return m_segment_title_s_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getTradingTypeS() const {
    return m_trading_type_s;
}
void OAI_accounts__account__summary_get_200_response_Info::setTradingTypeS(const QString &trading_type_s) {
    m_trading_type_s = trading_type_s;
    m_trading_type_s_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_trading_type_s_Set() const{
    return m_trading_type_s_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_trading_type_s_Valid() const{
    return m_trading_type_s_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Info::getWhatIfPmEnabled() const {
    return m_what_if_pm_enabled;
}
void OAI_accounts__account__summary_get_200_response_Info::setWhatIfPmEnabled(const QString &what_if_pm_enabled) {
    m_what_if_pm_enabled = what_if_pm_enabled;
    m_what_if_pm_enabled_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_what_if_pm_enabled_Set() const{
    return m_what_if_pm_enabled_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Info::is_what_if_pm_enabled_Valid() const{
    return m_what_if_pm_enabled_isValid;
}

bool OAI_accounts__account__summary_get_200_response_Info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_ready_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cushion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_trades_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_trades_remaining_t_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_trades_remaining_t2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_trades_remaining_t3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_trades_remaining_t4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highest_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leverage_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_look_ahead_next_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_title_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_title_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trading_type_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_what_if_pm_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_accounts__account__summary_get_200_response_Info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
