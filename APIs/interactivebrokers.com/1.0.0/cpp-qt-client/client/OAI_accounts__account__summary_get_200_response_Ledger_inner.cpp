/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_accounts__account__summary_get_200_response_Ledger_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_accounts__account__summary_get_200_response_Ledger_inner::OAI_accounts__account__summary_get_200_response_Ledger_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_accounts__account__summary_get_200_response_Ledger_inner::OAI_accounts__account__summary_get_200_response_Ledger_inner() {
    this->initializeModel();
}

OAI_accounts__account__summary_get_200_response_Ledger_inner::~OAI_accounts__account__summary_get_200_response_Ledger_inner() {}

void OAI_accounts__account__summary_get_200_response_Ledger_inner::initializeModel() {

    m_cash_balance_isSet = false;
    m_cash_balance_isValid = false;

    m_cash_balance_fx_segment_isSet = false;
    m_cash_balance_fx_segment_isValid = false;

    m_cash_cum_qty_isSet = false;
    m_cash_cum_qty_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_future_option_market_value_isSet = false;
    m_future_option_market_value_isValid = false;

    m_future_pnl_isSet = false;
    m_future_pnl_isValid = false;

    m_net_dividend_isSet = false;
    m_net_dividend_isValid = false;

    m_net_interest_isSet = false;
    m_net_interest_isValid = false;

    m_net_liquidation_isSet = false;
    m_net_liquidation_isValid = false;

    m_option_market_value_isSet = false;
    m_option_market_value_isValid = false;

    m_realized_pnl_isSet = false;
    m_realized_pnl_isValid = false;

    m_stock_market_value_isSet = false;
    m_stock_market_value_isValid = false;

    m_total_cash_balance_isSet = false;
    m_total_cash_balance_isValid = false;

    m_unrealized_pnl_isSet = false;
    m_unrealized_pnl_isValid = false;
}

void OAI_accounts__account__summary_get_200_response_Ledger_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_accounts__account__summary_get_200_response_Ledger_inner::fromJsonObject(QJsonObject json) {

    m_cash_balance_isValid = ::OpenAPI::fromJsonValue(m_cash_balance, json[QString("CashBalance")]);
    m_cash_balance_isSet = !json[QString("CashBalance")].isNull() && m_cash_balance_isValid;

    m_cash_balance_fx_segment_isValid = ::OpenAPI::fromJsonValue(m_cash_balance_fx_segment, json[QString("CashBalanceFXSegment")]);
    m_cash_balance_fx_segment_isSet = !json[QString("CashBalanceFXSegment")].isNull() && m_cash_balance_fx_segment_isValid;

    m_cash_cum_qty_isValid = ::OpenAPI::fromJsonValue(m_cash_cum_qty, json[QString("CashCumQty")]);
    m_cash_cum_qty_isSet = !json[QString("CashCumQty")].isNull() && m_cash_cum_qty_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("ExchangeRate")]);
    m_exchange_rate_isSet = !json[QString("ExchangeRate")].isNull() && m_exchange_rate_isValid;

    m_future_option_market_value_isValid = ::OpenAPI::fromJsonValue(m_future_option_market_value, json[QString("FutureOptionMarketValue")]);
    m_future_option_market_value_isSet = !json[QString("FutureOptionMarketValue")].isNull() && m_future_option_market_value_isValid;

    m_future_pnl_isValid = ::OpenAPI::fromJsonValue(m_future_pnl, json[QString("FuturePNL")]);
    m_future_pnl_isSet = !json[QString("FuturePNL")].isNull() && m_future_pnl_isValid;

    m_net_dividend_isValid = ::OpenAPI::fromJsonValue(m_net_dividend, json[QString("NetDividend")]);
    m_net_dividend_isSet = !json[QString("NetDividend")].isNull() && m_net_dividend_isValid;

    m_net_interest_isValid = ::OpenAPI::fromJsonValue(m_net_interest, json[QString("NetInterest")]);
    m_net_interest_isSet = !json[QString("NetInterest")].isNull() && m_net_interest_isValid;

    m_net_liquidation_isValid = ::OpenAPI::fromJsonValue(m_net_liquidation, json[QString("NetLiquidation")]);
    m_net_liquidation_isSet = !json[QString("NetLiquidation")].isNull() && m_net_liquidation_isValid;

    m_option_market_value_isValid = ::OpenAPI::fromJsonValue(m_option_market_value, json[QString("OptionMarketValue")]);
    m_option_market_value_isSet = !json[QString("OptionMarketValue")].isNull() && m_option_market_value_isValid;

    m_realized_pnl_isValid = ::OpenAPI::fromJsonValue(m_realized_pnl, json[QString("RealizedPNL")]);
    m_realized_pnl_isSet = !json[QString("RealizedPNL")].isNull() && m_realized_pnl_isValid;

    m_stock_market_value_isValid = ::OpenAPI::fromJsonValue(m_stock_market_value, json[QString("StockMarketValue")]);
    m_stock_market_value_isSet = !json[QString("StockMarketValue")].isNull() && m_stock_market_value_isValid;

    m_total_cash_balance_isValid = ::OpenAPI::fromJsonValue(m_total_cash_balance, json[QString("TotalCashBalance")]);
    m_total_cash_balance_isSet = !json[QString("TotalCashBalance")].isNull() && m_total_cash_balance_isValid;

    m_unrealized_pnl_isValid = ::OpenAPI::fromJsonValue(m_unrealized_pnl, json[QString("UnrealizedPNL")]);
    m_unrealized_pnl_isSet = !json[QString("UnrealizedPNL")].isNull() && m_unrealized_pnl_isValid;
}

QString OAI_accounts__account__summary_get_200_response_Ledger_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_accounts__account__summary_get_200_response_Ledger_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_balance_isSet) {
        obj.insert(QString("CashBalance"), ::OpenAPI::toJsonValue(m_cash_balance));
    }
    if (m_cash_balance_fx_segment_isSet) {
        obj.insert(QString("CashBalanceFXSegment"), ::OpenAPI::toJsonValue(m_cash_balance_fx_segment));
    }
    if (m_cash_cum_qty_isSet) {
        obj.insert(QString("CashCumQty"), ::OpenAPI::toJsonValue(m_cash_cum_qty));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("ExchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_future_option_market_value_isSet) {
        obj.insert(QString("FutureOptionMarketValue"), ::OpenAPI::toJsonValue(m_future_option_market_value));
    }
    if (m_future_pnl_isSet) {
        obj.insert(QString("FuturePNL"), ::OpenAPI::toJsonValue(m_future_pnl));
    }
    if (m_net_dividend_isSet) {
        obj.insert(QString("NetDividend"), ::OpenAPI::toJsonValue(m_net_dividend));
    }
    if (m_net_interest_isSet) {
        obj.insert(QString("NetInterest"), ::OpenAPI::toJsonValue(m_net_interest));
    }
    if (m_net_liquidation_isSet) {
        obj.insert(QString("NetLiquidation"), ::OpenAPI::toJsonValue(m_net_liquidation));
    }
    if (m_option_market_value_isSet) {
        obj.insert(QString("OptionMarketValue"), ::OpenAPI::toJsonValue(m_option_market_value));
    }
    if (m_realized_pnl_isSet) {
        obj.insert(QString("RealizedPNL"), ::OpenAPI::toJsonValue(m_realized_pnl));
    }
    if (m_stock_market_value_isSet) {
        obj.insert(QString("StockMarketValue"), ::OpenAPI::toJsonValue(m_stock_market_value));
    }
    if (m_total_cash_balance_isSet) {
        obj.insert(QString("TotalCashBalance"), ::OpenAPI::toJsonValue(m_total_cash_balance));
    }
    if (m_unrealized_pnl_isSet) {
        obj.insert(QString("UnrealizedPNL"), ::OpenAPI::toJsonValue(m_unrealized_pnl));
    }
    return obj;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getCashBalance() const {
    return m_cash_balance;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setCashBalance(const double &cash_balance) {
    m_cash_balance = cash_balance;
    m_cash_balance_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_cash_balance_Set() const{
    return m_cash_balance_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_cash_balance_Valid() const{
    return m_cash_balance_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getCashBalanceFxSegment() const {
    return m_cash_balance_fx_segment;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setCashBalanceFxSegment(const double &cash_balance_fx_segment) {
    m_cash_balance_fx_segment = cash_balance_fx_segment;
    m_cash_balance_fx_segment_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_cash_balance_fx_segment_Set() const{
    return m_cash_balance_fx_segment_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_cash_balance_fx_segment_Valid() const{
    return m_cash_balance_fx_segment_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getCashCumQty() const {
    return m_cash_cum_qty;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setCashCumQty(const double &cash_cum_qty) {
    m_cash_cum_qty = cash_cum_qty;
    m_cash_cum_qty_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_cash_cum_qty_Set() const{
    return m_cash_cum_qty_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_cash_cum_qty_Valid() const{
    return m_cash_cum_qty_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getExchangeRate() const {
    return m_exchange_rate;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getFutureOptionMarketValue() const {
    return m_future_option_market_value;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setFutureOptionMarketValue(const double &future_option_market_value) {
    m_future_option_market_value = future_option_market_value;
    m_future_option_market_value_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_future_option_market_value_Set() const{
    return m_future_option_market_value_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_future_option_market_value_Valid() const{
    return m_future_option_market_value_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getFuturePnl() const {
    return m_future_pnl;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setFuturePnl(const double &future_pnl) {
    m_future_pnl = future_pnl;
    m_future_pnl_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_future_pnl_Set() const{
    return m_future_pnl_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_future_pnl_Valid() const{
    return m_future_pnl_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getNetDividend() const {
    return m_net_dividend;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setNetDividend(const double &net_dividend) {
    m_net_dividend = net_dividend;
    m_net_dividend_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_net_dividend_Set() const{
    return m_net_dividend_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_net_dividend_Valid() const{
    return m_net_dividend_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getNetInterest() const {
    return m_net_interest;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setNetInterest(const double &net_interest) {
    m_net_interest = net_interest;
    m_net_interest_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_net_interest_Set() const{
    return m_net_interest_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_net_interest_Valid() const{
    return m_net_interest_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getNetLiquidation() const {
    return m_net_liquidation;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setNetLiquidation(const double &net_liquidation) {
    m_net_liquidation = net_liquidation;
    m_net_liquidation_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_net_liquidation_Set() const{
    return m_net_liquidation_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_net_liquidation_Valid() const{
    return m_net_liquidation_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getOptionMarketValue() const {
    return m_option_market_value;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setOptionMarketValue(const double &option_market_value) {
    m_option_market_value = option_market_value;
    m_option_market_value_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_option_market_value_Set() const{
    return m_option_market_value_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_option_market_value_Valid() const{
    return m_option_market_value_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getRealizedPnl() const {
    return m_realized_pnl;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setRealizedPnl(const double &realized_pnl) {
    m_realized_pnl = realized_pnl;
    m_realized_pnl_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_realized_pnl_Set() const{
    return m_realized_pnl_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_realized_pnl_Valid() const{
    return m_realized_pnl_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getStockMarketValue() const {
    return m_stock_market_value;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setStockMarketValue(const double &stock_market_value) {
    m_stock_market_value = stock_market_value;
    m_stock_market_value_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_stock_market_value_Set() const{
    return m_stock_market_value_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_stock_market_value_Valid() const{
    return m_stock_market_value_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getTotalCashBalance() const {
    return m_total_cash_balance;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setTotalCashBalance(const double &total_cash_balance) {
    m_total_cash_balance = total_cash_balance;
    m_total_cash_balance_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_total_cash_balance_Set() const{
    return m_total_cash_balance_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_total_cash_balance_Valid() const{
    return m_total_cash_balance_isValid;
}

double OAI_accounts__account__summary_get_200_response_Ledger_inner::getUnrealizedPnl() const {
    return m_unrealized_pnl;
}
void OAI_accounts__account__summary_get_200_response_Ledger_inner::setUnrealizedPnl(const double &unrealized_pnl) {
    m_unrealized_pnl = unrealized_pnl;
    m_unrealized_pnl_isSet = true;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_unrealized_pnl_Set() const{
    return m_unrealized_pnl_isSet;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::is_unrealized_pnl_Valid() const{
    return m_unrealized_pnl_isValid;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_balance_fx_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_cum_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_future_option_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_future_pnl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_dividend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_interest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_liquidation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realized_pnl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cash_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unrealized_pnl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_accounts__account__summary_get_200_response_Ledger_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
