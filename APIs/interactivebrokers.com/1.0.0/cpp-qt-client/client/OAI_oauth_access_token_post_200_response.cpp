/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_oauth_access_token_post_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_oauth_access_token_post_200_response::OAI_oauth_access_token_post_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_oauth_access_token_post_200_response::OAI_oauth_access_token_post_200_response() {
    this->initializeModel();
}

OAI_oauth_access_token_post_200_response::~OAI_oauth_access_token_post_200_response() {}

void OAI_oauth_access_token_post_200_response::initializeModel() {

    m_oauth_token_isSet = false;
    m_oauth_token_isValid = false;

    m_oauth_token_secret_isSet = false;
    m_oauth_token_secret_isValid = false;
}

void OAI_oauth_access_token_post_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_oauth_access_token_post_200_response::fromJsonObject(QJsonObject json) {

    m_oauth_token_isValid = ::OpenAPI::fromJsonValue(m_oauth_token, json[QString("oauth_token")]);
    m_oauth_token_isSet = !json[QString("oauth_token")].isNull() && m_oauth_token_isValid;

    m_oauth_token_secret_isValid = ::OpenAPI::fromJsonValue(m_oauth_token_secret, json[QString("oauth_token_secret")]);
    m_oauth_token_secret_isSet = !json[QString("oauth_token_secret")].isNull() && m_oauth_token_secret_isValid;
}

QString OAI_oauth_access_token_post_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_oauth_access_token_post_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_oauth_token_isSet) {
        obj.insert(QString("oauth_token"), ::OpenAPI::toJsonValue(m_oauth_token));
    }
    if (m_oauth_token_secret_isSet) {
        obj.insert(QString("oauth_token_secret"), ::OpenAPI::toJsonValue(m_oauth_token_secret));
    }
    return obj;
}

QString OAI_oauth_access_token_post_200_response::getOauthToken() const {
    return m_oauth_token;
}
void OAI_oauth_access_token_post_200_response::setOauthToken(const QString &oauth_token) {
    m_oauth_token = oauth_token;
    m_oauth_token_isSet = true;
}

bool OAI_oauth_access_token_post_200_response::is_oauth_token_Set() const{
    return m_oauth_token_isSet;
}

bool OAI_oauth_access_token_post_200_response::is_oauth_token_Valid() const{
    return m_oauth_token_isValid;
}

QString OAI_oauth_access_token_post_200_response::getOauthTokenSecret() const {
    return m_oauth_token_secret;
}
void OAI_oauth_access_token_post_200_response::setOauthTokenSecret(const QString &oauth_token_secret) {
    m_oauth_token_secret = oauth_token_secret;
    m_oauth_token_secret_isSet = true;
}

bool OAI_oauth_access_token_post_200_response::is_oauth_token_secret_Set() const{
    return m_oauth_token_secret_isSet;
}

bool OAI_oauth_access_token_post_200_response::is_oauth_token_secret_Valid() const{
    return m_oauth_token_secret_isValid;
}

bool OAI_oauth_access_token_post_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_oauth_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_token_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_oauth_access_token_post_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
