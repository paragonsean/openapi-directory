# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_type import OrderType
from openapi_server.models.time_in_force import TimeInForce
from openapi_server import util


class AccountsAccountOrderImpactPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aux_price: float=None, contract_id: float=None, currency: str=None, customer_order_id: str=None, instrument_type: str=None, listing_exchange: str=None, order_type: OrderType=None, price: float=None, quantity: float=None, side: float=None, ticker: str=None, time_in_force: TimeInForce=None):
        """AccountsAccountOrderImpactPostRequest - a model defined in OpenAPI

        :param aux_price: The aux_price of this AccountsAccountOrderImpactPostRequest.
        :param contract_id: The contract_id of this AccountsAccountOrderImpactPostRequest.
        :param currency: The currency of this AccountsAccountOrderImpactPostRequest.
        :param customer_order_id: The customer_order_id of this AccountsAccountOrderImpactPostRequest.
        :param instrument_type: The instrument_type of this AccountsAccountOrderImpactPostRequest.
        :param listing_exchange: The listing_exchange of this AccountsAccountOrderImpactPostRequest.
        :param order_type: The order_type of this AccountsAccountOrderImpactPostRequest.
        :param price: The price of this AccountsAccountOrderImpactPostRequest.
        :param quantity: The quantity of this AccountsAccountOrderImpactPostRequest.
        :param side: The side of this AccountsAccountOrderImpactPostRequest.
        :param ticker: The ticker of this AccountsAccountOrderImpactPostRequest.
        :param time_in_force: The time_in_force of this AccountsAccountOrderImpactPostRequest.
        """
        self.openapi_types = {
            'aux_price': float,
            'contract_id': float,
            'currency': str,
            'customer_order_id': str,
            'instrument_type': str,
            'listing_exchange': str,
            'order_type': OrderType,
            'price': float,
            'quantity': float,
            'side': float,
            'ticker': str,
            'time_in_force': TimeInForce
        }

        self.attribute_map = {
            'aux_price': 'Aux Price',
            'contract_id': 'ContractId',
            'currency': 'Currency',
            'customer_order_id': 'CustomerOrderId',
            'instrument_type': 'InstrumentType',
            'listing_exchange': 'ListingExchange',
            'order_type': 'Order Type',
            'price': 'Price',
            'quantity': 'Quantity',
            'side': 'Side',
            'ticker': 'Ticker',
            'time_in_force': 'Time in Force'
        }

        self._aux_price = aux_price
        self._contract_id = contract_id
        self._currency = currency
        self._customer_order_id = customer_order_id
        self._instrument_type = instrument_type
        self._listing_exchange = listing_exchange
        self._order_type = order_type
        self._price = price
        self._quantity = quantity
        self._side = side
        self._ticker = ticker
        self._time_in_force = time_in_force

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountsAccountOrderImpactPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _accounts__account__order_impact_post_request of this AccountsAccountOrderImpactPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aux_price(self):
        """Gets the aux_price of this AccountsAccountOrderImpactPostRequest.

        Required price to support Stop and Stop Limit orders

        :return: The aux_price of this AccountsAccountOrderImpactPostRequest.
        :rtype: float
        """
        return self._aux_price

    @aux_price.setter
    def aux_price(self, aux_price):
        """Sets the aux_price of this AccountsAccountOrderImpactPostRequest.

        Required price to support Stop and Stop Limit orders

        :param aux_price: The aux_price of this AccountsAccountOrderImpactPostRequest.
        :type aux_price: float
        """

        self._aux_price = aux_price

    @property
    def contract_id(self):
        """Gets the contract_id of this AccountsAccountOrderImpactPostRequest.

        The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)

        :return: The contract_id of this AccountsAccountOrderImpactPostRequest.
        :rtype: float
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this AccountsAccountOrderImpactPostRequest.

        The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)

        :param contract_id: The contract_id of this AccountsAccountOrderImpactPostRequest.
        :type contract_id: float
        """

        self._contract_id = contract_id

    @property
    def currency(self):
        """Gets the currency of this AccountsAccountOrderImpactPostRequest.

        The currency in which the FX pair trades (only for InstrumentType=CASH)

        :return: The currency of this AccountsAccountOrderImpactPostRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountsAccountOrderImpactPostRequest.

        The currency in which the FX pair trades (only for InstrumentType=CASH)

        :param currency: The currency of this AccountsAccountOrderImpactPostRequest.
        :type currency: str
        """

        self._currency = currency

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this AccountsAccountOrderImpactPostRequest.

        The order ID assigned by the customer.

        :return: The customer_order_id of this AccountsAccountOrderImpactPostRequest.
        :rtype: str
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this AccountsAccountOrderImpactPostRequest.

        The order ID assigned by the customer.

        :param customer_order_id: The customer_order_id of this AccountsAccountOrderImpactPostRequest.
        :type customer_order_id: str
        """

        self._customer_order_id = customer_order_id

    @property
    def instrument_type(self):
        """Gets the instrument_type of this AccountsAccountOrderImpactPostRequest.

        The instrument type of the contract

        :return: The instrument_type of this AccountsAccountOrderImpactPostRequest.
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this AccountsAccountOrderImpactPostRequest.

        The instrument type of the contract

        :param instrument_type: The instrument_type of this AccountsAccountOrderImpactPostRequest.
        :type instrument_type: str
        """

        self._instrument_type = instrument_type

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this AccountsAccountOrderImpactPostRequest.

        The exchange on which the trading product is listed (only for InstrumentType=STK)

        :return: The listing_exchange of this AccountsAccountOrderImpactPostRequest.
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this AccountsAccountOrderImpactPostRequest.

        The exchange on which the trading product is listed (only for InstrumentType=STK)

        :param listing_exchange: The listing_exchange of this AccountsAccountOrderImpactPostRequest.
        :type listing_exchange: str
        """

        self._listing_exchange = listing_exchange

    @property
    def order_type(self):
        """Gets the order_type of this AccountsAccountOrderImpactPostRequest.


        :return: The order_type of this AccountsAccountOrderImpactPostRequest.
        :rtype: OrderType
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this AccountsAccountOrderImpactPostRequest.


        :param order_type: The order_type of this AccountsAccountOrderImpactPostRequest.
        :type order_type: OrderType
        """

        self._order_type = order_type

    @property
    def price(self):
        """Gets the price of this AccountsAccountOrderImpactPostRequest.

        The order price

        :return: The price of this AccountsAccountOrderImpactPostRequest.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AccountsAccountOrderImpactPostRequest.

        The order price

        :param price: The price of this AccountsAccountOrderImpactPostRequest.
        :type price: float
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this AccountsAccountOrderImpactPostRequest.

        The number of units in the order; contracts or shares

        :return: The quantity of this AccountsAccountOrderImpactPostRequest.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AccountsAccountOrderImpactPostRequest.

        The number of units in the order; contracts or shares

        :param quantity: The quantity of this AccountsAccountOrderImpactPostRequest.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def side(self):
        """Gets the side of this AccountsAccountOrderImpactPostRequest.

        Buy = '1', Sell = '2'

        :return: The side of this AccountsAccountOrderImpactPostRequest.
        :rtype: float
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this AccountsAccountOrderImpactPostRequest.

        Buy = '1', Sell = '2'

        :param side: The side of this AccountsAccountOrderImpactPostRequest.
        :type side: float
        """
        allowed_values = [1, 2]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def ticker(self):
        """Gets the ticker of this AccountsAccountOrderImpactPostRequest.

        The symbol that identifies the trading product

        :return: The ticker of this AccountsAccountOrderImpactPostRequest.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this AccountsAccountOrderImpactPostRequest.

        The symbol that identifies the trading product

        :param ticker: The ticker of this AccountsAccountOrderImpactPostRequest.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def time_in_force(self):
        """Gets the time_in_force of this AccountsAccountOrderImpactPostRequest.


        :return: The time_in_force of this AccountsAccountOrderImpactPostRequest.
        :rtype: TimeInForce
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this AccountsAccountOrderImpactPostRequest.


        :param time_in_force: The time_in_force of this AccountsAccountOrderImpactPostRequest.
        :type time_in_force: TimeInForce
        """

        self._time_in_force = time_in_force
