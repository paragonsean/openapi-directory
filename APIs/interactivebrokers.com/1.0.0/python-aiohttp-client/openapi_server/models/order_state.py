# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_status import OrderStatus
from openapi_server.models.order_type import OrderType
from openapi_server.models.time_in_force import TimeInForce
from openapi_server import util


class OrderState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract_id: float=None, customer_order_id: float=None, filled_quantity: float=None, listing_exchange: str=None, order_type: OrderType=None, outside_rth: str=None, price: float=None, remaining_quantity: float=None, side: str=None, status: OrderStatus=None, ticker: str=None, time_in_force: TimeInForce=None, transaction_time: str=None, warning: str=None):
        """OrderState - a model defined in OpenAPI

        :param contract_id: The contract_id of this OrderState.
        :param customer_order_id: The customer_order_id of this OrderState.
        :param filled_quantity: The filled_quantity of this OrderState.
        :param listing_exchange: The listing_exchange of this OrderState.
        :param order_type: The order_type of this OrderState.
        :param outside_rth: The outside_rth of this OrderState.
        :param price: The price of this OrderState.
        :param remaining_quantity: The remaining_quantity of this OrderState.
        :param side: The side of this OrderState.
        :param status: The status of this OrderState.
        :param ticker: The ticker of this OrderState.
        :param time_in_force: The time_in_force of this OrderState.
        :param transaction_time: The transaction_time of this OrderState.
        :param warning: The warning of this OrderState.
        """
        self.openapi_types = {
            'contract_id': float,
            'customer_order_id': float,
            'filled_quantity': float,
            'listing_exchange': str,
            'order_type': OrderType,
            'outside_rth': str,
            'price': float,
            'remaining_quantity': float,
            'side': str,
            'status': OrderStatus,
            'ticker': str,
            'time_in_force': TimeInForce,
            'transaction_time': str,
            'warning': str
        }

        self.attribute_map = {
            'contract_id': 'ContractId',
            'customer_order_id': 'CustomerOrderId',
            'filled_quantity': 'FilledQuantity',
            'listing_exchange': 'ListingExchange',
            'order_type': 'OrderType',
            'outside_rth': 'OutsideRTH',
            'price': 'Price',
            'remaining_quantity': 'RemainingQuantity',
            'side': 'Side',
            'status': 'Status',
            'ticker': 'Ticker',
            'time_in_force': 'TimeInForce',
            'transaction_time': 'TransactionTime',
            'warning': 'Warning'
        }

        self._contract_id = contract_id
        self._customer_order_id = customer_order_id
        self._filled_quantity = filled_quantity
        self._listing_exchange = listing_exchange
        self._order_type = order_type
        self._outside_rth = outside_rth
        self._price = price
        self._remaining_quantity = remaining_quantity
        self._side = side
        self._status = status
        self._ticker = ticker
        self._time_in_force = time_in_force
        self._transaction_time = transaction_time
        self._warning = warning

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orderState of this OrderState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract_id(self):
        """Gets the contract_id of this OrderState.


        :return: The contract_id of this OrderState.
        :rtype: float
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this OrderState.


        :param contract_id: The contract_id of this OrderState.
        :type contract_id: float
        """

        self._contract_id = contract_id

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this OrderState.


        :return: The customer_order_id of this OrderState.
        :rtype: float
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this OrderState.


        :param customer_order_id: The customer_order_id of this OrderState.
        :type customer_order_id: float
        """

        self._customer_order_id = customer_order_id

    @property
    def filled_quantity(self):
        """Gets the filled_quantity of this OrderState.


        :return: The filled_quantity of this OrderState.
        :rtype: float
        """
        return self._filled_quantity

    @filled_quantity.setter
    def filled_quantity(self, filled_quantity):
        """Sets the filled_quantity of this OrderState.


        :param filled_quantity: The filled_quantity of this OrderState.
        :type filled_quantity: float
        """

        self._filled_quantity = filled_quantity

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this OrderState.


        :return: The listing_exchange of this OrderState.
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this OrderState.


        :param listing_exchange: The listing_exchange of this OrderState.
        :type listing_exchange: str
        """

        self._listing_exchange = listing_exchange

    @property
    def order_type(self):
        """Gets the order_type of this OrderState.


        :return: The order_type of this OrderState.
        :rtype: OrderType
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this OrderState.


        :param order_type: The order_type of this OrderState.
        :type order_type: OrderType
        """

        self._order_type = order_type

    @property
    def outside_rth(self):
        """Gets the outside_rth of this OrderState.


        :return: The outside_rth of this OrderState.
        :rtype: str
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this OrderState.


        :param outside_rth: The outside_rth of this OrderState.
        :type outside_rth: str
        """

        self._outside_rth = outside_rth

    @property
    def price(self):
        """Gets the price of this OrderState.


        :return: The price of this OrderState.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderState.


        :param price: The price of this OrderState.
        :type price: float
        """

        self._price = price

    @property
    def remaining_quantity(self):
        """Gets the remaining_quantity of this OrderState.


        :return: The remaining_quantity of this OrderState.
        :rtype: float
        """
        return self._remaining_quantity

    @remaining_quantity.setter
    def remaining_quantity(self, remaining_quantity):
        """Sets the remaining_quantity of this OrderState.


        :param remaining_quantity: The remaining_quantity of this OrderState.
        :type remaining_quantity: float
        """

        self._remaining_quantity = remaining_quantity

    @property
    def side(self):
        """Gets the side of this OrderState.


        :return: The side of this OrderState.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderState.


        :param side: The side of this OrderState.
        :type side: str
        """
        allowed_values = ["1", "2"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def status(self):
        """Gets the status of this OrderState.


        :return: The status of this OrderState.
        :rtype: OrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderState.


        :param status: The status of this OrderState.
        :type status: OrderStatus
        """

        self._status = status

    @property
    def ticker(self):
        """Gets the ticker of this OrderState.


        :return: The ticker of this OrderState.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this OrderState.


        :param ticker: The ticker of this OrderState.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def time_in_force(self):
        """Gets the time_in_force of this OrderState.


        :return: The time_in_force of this OrderState.
        :rtype: TimeInForce
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this OrderState.


        :param time_in_force: The time_in_force of this OrderState.
        :type time_in_force: TimeInForce
        """

        self._time_in_force = time_in_force

    @property
    def transaction_time(self):
        """Gets the transaction_time of this OrderState.


        :return: The transaction_time of this OrderState.
        :rtype: str
        """
        return self._transaction_time

    @transaction_time.setter
    def transaction_time(self, transaction_time):
        """Sets the transaction_time of this OrderState.


        :param transaction_time: The transaction_time of this OrderState.
        :type transaction_time: str
        """

        self._transaction_time = transaction_time

    @property
    def warning(self):
        """Gets the warning of this OrderState.


        :return: The warning of this OrderState.
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this OrderState.


        :param warning: The warning of this OrderState.
        :type warning: str
        """

        self._warning = warning
