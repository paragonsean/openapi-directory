# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountsAccountOrderImpactPost200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commission: float=None, commissions_currency: str=None, equity_with_loan: float=None, init_margin: float=None, init_margin_before: float=None, maint_margin: float=None, maint_margin_before: float=None, margin_currency: str=None, max_commissions: float=None, min_commissions: float=None):
        """AccountsAccountOrderImpactPost200Response - a model defined in OpenAPI

        :param commission: The commission of this AccountsAccountOrderImpactPost200Response.
        :param commissions_currency: The commissions_currency of this AccountsAccountOrderImpactPost200Response.
        :param equity_with_loan: The equity_with_loan of this AccountsAccountOrderImpactPost200Response.
        :param init_margin: The init_margin of this AccountsAccountOrderImpactPost200Response.
        :param init_margin_before: The init_margin_before of this AccountsAccountOrderImpactPost200Response.
        :param maint_margin: The maint_margin of this AccountsAccountOrderImpactPost200Response.
        :param maint_margin_before: The maint_margin_before of this AccountsAccountOrderImpactPost200Response.
        :param margin_currency: The margin_currency of this AccountsAccountOrderImpactPost200Response.
        :param max_commissions: The max_commissions of this AccountsAccountOrderImpactPost200Response.
        :param min_commissions: The min_commissions of this AccountsAccountOrderImpactPost200Response.
        """
        self.openapi_types = {
            'commission': float,
            'commissions_currency': str,
            'equity_with_loan': float,
            'init_margin': float,
            'init_margin_before': float,
            'maint_margin': float,
            'maint_margin_before': float,
            'margin_currency': str,
            'max_commissions': float,
            'min_commissions': float
        }

        self.attribute_map = {
            'commission': 'Commission',
            'commissions_currency': 'CommissionsCurrency',
            'equity_with_loan': 'EquityWithLoan',
            'init_margin': 'InitMargin',
            'init_margin_before': 'InitMarginBefore',
            'maint_margin': 'MaintMargin',
            'maint_margin_before': 'MaintMarginBefore',
            'margin_currency': 'MarginCurrency',
            'max_commissions': 'MaxCommissions',
            'min_commissions': 'MinCommissions'
        }

        self._commission = commission
        self._commissions_currency = commissions_currency
        self._equity_with_loan = equity_with_loan
        self._init_margin = init_margin
        self._init_margin_before = init_margin_before
        self._maint_margin = maint_margin
        self._maint_margin_before = maint_margin_before
        self._margin_currency = margin_currency
        self._max_commissions = max_commissions
        self._min_commissions = min_commissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountsAccountOrderImpactPost200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _accounts__account__order_impact_post_200_response of this AccountsAccountOrderImpactPost200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commission(self):
        """Gets the commission of this AccountsAccountOrderImpactPost200Response.


        :return: The commission of this AccountsAccountOrderImpactPost200Response.
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this AccountsAccountOrderImpactPost200Response.


        :param commission: The commission of this AccountsAccountOrderImpactPost200Response.
        :type commission: float
        """

        self._commission = commission

    @property
    def commissions_currency(self):
        """Gets the commissions_currency of this AccountsAccountOrderImpactPost200Response.


        :return: The commissions_currency of this AccountsAccountOrderImpactPost200Response.
        :rtype: str
        """
        return self._commissions_currency

    @commissions_currency.setter
    def commissions_currency(self, commissions_currency):
        """Sets the commissions_currency of this AccountsAccountOrderImpactPost200Response.


        :param commissions_currency: The commissions_currency of this AccountsAccountOrderImpactPost200Response.
        :type commissions_currency: str
        """

        self._commissions_currency = commissions_currency

    @property
    def equity_with_loan(self):
        """Gets the equity_with_loan of this AccountsAccountOrderImpactPost200Response.


        :return: The equity_with_loan of this AccountsAccountOrderImpactPost200Response.
        :rtype: float
        """
        return self._equity_with_loan

    @equity_with_loan.setter
    def equity_with_loan(self, equity_with_loan):
        """Sets the equity_with_loan of this AccountsAccountOrderImpactPost200Response.


        :param equity_with_loan: The equity_with_loan of this AccountsAccountOrderImpactPost200Response.
        :type equity_with_loan: float
        """

        self._equity_with_loan = equity_with_loan

    @property
    def init_margin(self):
        """Gets the init_margin of this AccountsAccountOrderImpactPost200Response.


        :return: The init_margin of this AccountsAccountOrderImpactPost200Response.
        :rtype: float
        """
        return self._init_margin

    @init_margin.setter
    def init_margin(self, init_margin):
        """Sets the init_margin of this AccountsAccountOrderImpactPost200Response.


        :param init_margin: The init_margin of this AccountsAccountOrderImpactPost200Response.
        :type init_margin: float
        """

        self._init_margin = init_margin

    @property
    def init_margin_before(self):
        """Gets the init_margin_before of this AccountsAccountOrderImpactPost200Response.


        :return: The init_margin_before of this AccountsAccountOrderImpactPost200Response.
        :rtype: float
        """
        return self._init_margin_before

    @init_margin_before.setter
    def init_margin_before(self, init_margin_before):
        """Sets the init_margin_before of this AccountsAccountOrderImpactPost200Response.


        :param init_margin_before: The init_margin_before of this AccountsAccountOrderImpactPost200Response.
        :type init_margin_before: float
        """

        self._init_margin_before = init_margin_before

    @property
    def maint_margin(self):
        """Gets the maint_margin of this AccountsAccountOrderImpactPost200Response.


        :return: The maint_margin of this AccountsAccountOrderImpactPost200Response.
        :rtype: float
        """
        return self._maint_margin

    @maint_margin.setter
    def maint_margin(self, maint_margin):
        """Sets the maint_margin of this AccountsAccountOrderImpactPost200Response.


        :param maint_margin: The maint_margin of this AccountsAccountOrderImpactPost200Response.
        :type maint_margin: float
        """

        self._maint_margin = maint_margin

    @property
    def maint_margin_before(self):
        """Gets the maint_margin_before of this AccountsAccountOrderImpactPost200Response.


        :return: The maint_margin_before of this AccountsAccountOrderImpactPost200Response.
        :rtype: float
        """
        return self._maint_margin_before

    @maint_margin_before.setter
    def maint_margin_before(self, maint_margin_before):
        """Sets the maint_margin_before of this AccountsAccountOrderImpactPost200Response.


        :param maint_margin_before: The maint_margin_before of this AccountsAccountOrderImpactPost200Response.
        :type maint_margin_before: float
        """

        self._maint_margin_before = maint_margin_before

    @property
    def margin_currency(self):
        """Gets the margin_currency of this AccountsAccountOrderImpactPost200Response.


        :return: The margin_currency of this AccountsAccountOrderImpactPost200Response.
        :rtype: str
        """
        return self._margin_currency

    @margin_currency.setter
    def margin_currency(self, margin_currency):
        """Sets the margin_currency of this AccountsAccountOrderImpactPost200Response.


        :param margin_currency: The margin_currency of this AccountsAccountOrderImpactPost200Response.
        :type margin_currency: str
        """

        self._margin_currency = margin_currency

    @property
    def max_commissions(self):
        """Gets the max_commissions of this AccountsAccountOrderImpactPost200Response.


        :return: The max_commissions of this AccountsAccountOrderImpactPost200Response.
        :rtype: float
        """
        return self._max_commissions

    @max_commissions.setter
    def max_commissions(self, max_commissions):
        """Sets the max_commissions of this AccountsAccountOrderImpactPost200Response.


        :param max_commissions: The max_commissions of this AccountsAccountOrderImpactPost200Response.
        :type max_commissions: float
        """

        self._max_commissions = max_commissions

    @property
    def min_commissions(self):
        """Gets the min_commissions of this AccountsAccountOrderImpactPost200Response.


        :return: The min_commissions of this AccountsAccountOrderImpactPost200Response.
        :rtype: float
        """
        return self._min_commissions

    @min_commissions.setter
    def min_commissions(self, min_commissions):
        """Sets the min_commissions of this AccountsAccountOrderImpactPost200Response.


        :param min_commissions: The min_commissions of this AccountsAccountOrderImpactPost200Response.
        :type min_commissions: float
        """

        self._min_commissions = min_commissions
