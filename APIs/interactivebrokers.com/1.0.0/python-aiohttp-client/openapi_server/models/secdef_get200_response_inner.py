# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecdefGet200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_name: str=None, contract_id: float=None, currency: str=None, exchange: str=None, security_type: str=None, ticker: str=None):
        """SecdefGet200ResponseInner - a model defined in OpenAPI

        :param company_name: The company_name of this SecdefGet200ResponseInner.
        :param contract_id: The contract_id of this SecdefGet200ResponseInner.
        :param currency: The currency of this SecdefGet200ResponseInner.
        :param exchange: The exchange of this SecdefGet200ResponseInner.
        :param security_type: The security_type of this SecdefGet200ResponseInner.
        :param ticker: The ticker of this SecdefGet200ResponseInner.
        """
        self.openapi_types = {
            'company_name': str,
            'contract_id': float,
            'currency': str,
            'exchange': str,
            'security_type': str,
            'ticker': str
        }

        self.attribute_map = {
            'company_name': 'CompanyName',
            'contract_id': 'ContractId',
            'currency': 'Currency',
            'exchange': 'Exchange',
            'security_type': 'SecurityType',
            'ticker': 'Ticker'
        }

        self._company_name = company_name
        self._contract_id = contract_id
        self._currency = currency
        self._exchange = exchange
        self._security_type = security_type
        self._ticker = ticker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecdefGet200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _secdef_get_200_response_inner of this SecdefGet200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_name(self):
        """Gets the company_name of this SecdefGet200ResponseInner.


        :return: The company_name of this SecdefGet200ResponseInner.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this SecdefGet200ResponseInner.


        :param company_name: The company_name of this SecdefGet200ResponseInner.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def contract_id(self):
        """Gets the contract_id of this SecdefGet200ResponseInner.


        :return: The contract_id of this SecdefGet200ResponseInner.
        :rtype: float
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this SecdefGet200ResponseInner.


        :param contract_id: The contract_id of this SecdefGet200ResponseInner.
        :type contract_id: float
        """

        self._contract_id = contract_id

    @property
    def currency(self):
        """Gets the currency of this SecdefGet200ResponseInner.


        :return: The currency of this SecdefGet200ResponseInner.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SecdefGet200ResponseInner.


        :param currency: The currency of this SecdefGet200ResponseInner.
        :type currency: str
        """

        self._currency = currency

    @property
    def exchange(self):
        """Gets the exchange of this SecdefGet200ResponseInner.


        :return: The exchange of this SecdefGet200ResponseInner.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this SecdefGet200ResponseInner.


        :param exchange: The exchange of this SecdefGet200ResponseInner.
        :type exchange: str
        """

        self._exchange = exchange

    @property
    def security_type(self):
        """Gets the security_type of this SecdefGet200ResponseInner.


        :return: The security_type of this SecdefGet200ResponseInner.
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this SecdefGet200ResponseInner.


        :param security_type: The security_type of this SecdefGet200ResponseInner.
        :type security_type: str
        """

        self._security_type = security_type

    @property
    def ticker(self):
        """Gets the ticker of this SecdefGet200ResponseInner.


        :return: The ticker of this SecdefGet200ResponseInner.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this SecdefGet200ResponseInner.


        :param ticker: The ticker of this SecdefGet200ResponseInner.
        :type ticker: str
        """

        self._ticker = ticker
