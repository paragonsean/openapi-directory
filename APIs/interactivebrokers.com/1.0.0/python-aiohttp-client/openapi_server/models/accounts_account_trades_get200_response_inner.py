# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_type import OrderType
from openapi_server import util


class AccountsAccountTradesGet200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_price: float=None, commission: float=None, commission_currency: str=None, contract_id: float=None, currency: str=None, customer_order_id: float=None, exec_id: str=None, execution_time: str=None, filled_quantity: float=None, last_market: str=None, listing_exchange: str=None, order_id: str=None, order_type: OrderType=None, quantity: float=None, remaining_quantity: float=None, side: str=None, ticker: str=None, trade_price: float=None, trade_size: float=None):
        """AccountsAccountTradesGet200ResponseInner - a model defined in OpenAPI

        :param avg_price: The avg_price of this AccountsAccountTradesGet200ResponseInner.
        :param commission: The commission of this AccountsAccountTradesGet200ResponseInner.
        :param commission_currency: The commission_currency of this AccountsAccountTradesGet200ResponseInner.
        :param contract_id: The contract_id of this AccountsAccountTradesGet200ResponseInner.
        :param currency: The currency of this AccountsAccountTradesGet200ResponseInner.
        :param customer_order_id: The customer_order_id of this AccountsAccountTradesGet200ResponseInner.
        :param exec_id: The exec_id of this AccountsAccountTradesGet200ResponseInner.
        :param execution_time: The execution_time of this AccountsAccountTradesGet200ResponseInner.
        :param filled_quantity: The filled_quantity of this AccountsAccountTradesGet200ResponseInner.
        :param last_market: The last_market of this AccountsAccountTradesGet200ResponseInner.
        :param listing_exchange: The listing_exchange of this AccountsAccountTradesGet200ResponseInner.
        :param order_id: The order_id of this AccountsAccountTradesGet200ResponseInner.
        :param order_type: The order_type of this AccountsAccountTradesGet200ResponseInner.
        :param quantity: The quantity of this AccountsAccountTradesGet200ResponseInner.
        :param remaining_quantity: The remaining_quantity of this AccountsAccountTradesGet200ResponseInner.
        :param side: The side of this AccountsAccountTradesGet200ResponseInner.
        :param ticker: The ticker of this AccountsAccountTradesGet200ResponseInner.
        :param trade_price: The trade_price of this AccountsAccountTradesGet200ResponseInner.
        :param trade_size: The trade_size of this AccountsAccountTradesGet200ResponseInner.
        """
        self.openapi_types = {
            'avg_price': float,
            'commission': float,
            'commission_currency': str,
            'contract_id': float,
            'currency': str,
            'customer_order_id': float,
            'exec_id': str,
            'execution_time': str,
            'filled_quantity': float,
            'last_market': str,
            'listing_exchange': str,
            'order_id': str,
            'order_type': OrderType,
            'quantity': float,
            'remaining_quantity': float,
            'side': str,
            'ticker': str,
            'trade_price': float,
            'trade_size': float
        }

        self.attribute_map = {
            'avg_price': 'AvgPrice',
            'commission': 'Commission',
            'commission_currency': 'CommissionCurrency',
            'contract_id': 'ContractId',
            'currency': 'Currency',
            'customer_order_id': 'CustomerOrderId',
            'exec_id': 'ExecId',
            'execution_time': 'ExecutionTime',
            'filled_quantity': 'FilledQuantity',
            'last_market': 'LastMarket',
            'listing_exchange': 'ListingExchange',
            'order_id': 'OrderId',
            'order_type': 'OrderType',
            'quantity': 'Quantity',
            'remaining_quantity': 'RemainingQuantity',
            'side': 'Side',
            'ticker': 'Ticker',
            'trade_price': 'TradePrice',
            'trade_size': 'TradeSize'
        }

        self._avg_price = avg_price
        self._commission = commission
        self._commission_currency = commission_currency
        self._contract_id = contract_id
        self._currency = currency
        self._customer_order_id = customer_order_id
        self._exec_id = exec_id
        self._execution_time = execution_time
        self._filled_quantity = filled_quantity
        self._last_market = last_market
        self._listing_exchange = listing_exchange
        self._order_id = order_id
        self._order_type = order_type
        self._quantity = quantity
        self._remaining_quantity = remaining_quantity
        self._side = side
        self._ticker = ticker
        self._trade_price = trade_price
        self._trade_size = trade_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountsAccountTradesGet200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _accounts__account__trades_get_200_response_inner of this AccountsAccountTradesGet200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_price(self):
        """Gets the avg_price of this AccountsAccountTradesGet200ResponseInner.


        :return: The avg_price of this AccountsAccountTradesGet200ResponseInner.
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this AccountsAccountTradesGet200ResponseInner.


        :param avg_price: The avg_price of this AccountsAccountTradesGet200ResponseInner.
        :type avg_price: float
        """

        self._avg_price = avg_price

    @property
    def commission(self):
        """Gets the commission of this AccountsAccountTradesGet200ResponseInner.


        :return: The commission of this AccountsAccountTradesGet200ResponseInner.
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this AccountsAccountTradesGet200ResponseInner.


        :param commission: The commission of this AccountsAccountTradesGet200ResponseInner.
        :type commission: float
        """

        self._commission = commission

    @property
    def commission_currency(self):
        """Gets the commission_currency of this AccountsAccountTradesGet200ResponseInner.


        :return: The commission_currency of this AccountsAccountTradesGet200ResponseInner.
        :rtype: str
        """
        return self._commission_currency

    @commission_currency.setter
    def commission_currency(self, commission_currency):
        """Sets the commission_currency of this AccountsAccountTradesGet200ResponseInner.


        :param commission_currency: The commission_currency of this AccountsAccountTradesGet200ResponseInner.
        :type commission_currency: str
        """

        self._commission_currency = commission_currency

    @property
    def contract_id(self):
        """Gets the contract_id of this AccountsAccountTradesGet200ResponseInner.


        :return: The contract_id of this AccountsAccountTradesGet200ResponseInner.
        :rtype: float
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this AccountsAccountTradesGet200ResponseInner.


        :param contract_id: The contract_id of this AccountsAccountTradesGet200ResponseInner.
        :type contract_id: float
        """

        self._contract_id = contract_id

    @property
    def currency(self):
        """Gets the currency of this AccountsAccountTradesGet200ResponseInner.


        :return: The currency of this AccountsAccountTradesGet200ResponseInner.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountsAccountTradesGet200ResponseInner.


        :param currency: The currency of this AccountsAccountTradesGet200ResponseInner.
        :type currency: str
        """

        self._currency = currency

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this AccountsAccountTradesGet200ResponseInner.


        :return: The customer_order_id of this AccountsAccountTradesGet200ResponseInner.
        :rtype: float
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this AccountsAccountTradesGet200ResponseInner.


        :param customer_order_id: The customer_order_id of this AccountsAccountTradesGet200ResponseInner.
        :type customer_order_id: float
        """

        self._customer_order_id = customer_order_id

    @property
    def exec_id(self):
        """Gets the exec_id of this AccountsAccountTradesGet200ResponseInner.


        :return: The exec_id of this AccountsAccountTradesGet200ResponseInner.
        :rtype: str
        """
        return self._exec_id

    @exec_id.setter
    def exec_id(self, exec_id):
        """Sets the exec_id of this AccountsAccountTradesGet200ResponseInner.


        :param exec_id: The exec_id of this AccountsAccountTradesGet200ResponseInner.
        :type exec_id: str
        """

        self._exec_id = exec_id

    @property
    def execution_time(self):
        """Gets the execution_time of this AccountsAccountTradesGet200ResponseInner.


        :return: The execution_time of this AccountsAccountTradesGet200ResponseInner.
        :rtype: str
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this AccountsAccountTradesGet200ResponseInner.


        :param execution_time: The execution_time of this AccountsAccountTradesGet200ResponseInner.
        :type execution_time: str
        """

        self._execution_time = execution_time

    @property
    def filled_quantity(self):
        """Gets the filled_quantity of this AccountsAccountTradesGet200ResponseInner.


        :return: The filled_quantity of this AccountsAccountTradesGet200ResponseInner.
        :rtype: float
        """
        return self._filled_quantity

    @filled_quantity.setter
    def filled_quantity(self, filled_quantity):
        """Sets the filled_quantity of this AccountsAccountTradesGet200ResponseInner.


        :param filled_quantity: The filled_quantity of this AccountsAccountTradesGet200ResponseInner.
        :type filled_quantity: float
        """

        self._filled_quantity = filled_quantity

    @property
    def last_market(self):
        """Gets the last_market of this AccountsAccountTradesGet200ResponseInner.


        :return: The last_market of this AccountsAccountTradesGet200ResponseInner.
        :rtype: str
        """
        return self._last_market

    @last_market.setter
    def last_market(self, last_market):
        """Sets the last_market of this AccountsAccountTradesGet200ResponseInner.


        :param last_market: The last_market of this AccountsAccountTradesGet200ResponseInner.
        :type last_market: str
        """

        self._last_market = last_market

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this AccountsAccountTradesGet200ResponseInner.


        :return: The listing_exchange of this AccountsAccountTradesGet200ResponseInner.
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this AccountsAccountTradesGet200ResponseInner.


        :param listing_exchange: The listing_exchange of this AccountsAccountTradesGet200ResponseInner.
        :type listing_exchange: str
        """

        self._listing_exchange = listing_exchange

    @property
    def order_id(self):
        """Gets the order_id of this AccountsAccountTradesGet200ResponseInner.


        :return: The order_id of this AccountsAccountTradesGet200ResponseInner.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this AccountsAccountTradesGet200ResponseInner.


        :param order_id: The order_id of this AccountsAccountTradesGet200ResponseInner.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def order_type(self):
        """Gets the order_type of this AccountsAccountTradesGet200ResponseInner.


        :return: The order_type of this AccountsAccountTradesGet200ResponseInner.
        :rtype: OrderType
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this AccountsAccountTradesGet200ResponseInner.


        :param order_type: The order_type of this AccountsAccountTradesGet200ResponseInner.
        :type order_type: OrderType
        """

        self._order_type = order_type

    @property
    def quantity(self):
        """Gets the quantity of this AccountsAccountTradesGet200ResponseInner.


        :return: The quantity of this AccountsAccountTradesGet200ResponseInner.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AccountsAccountTradesGet200ResponseInner.


        :param quantity: The quantity of this AccountsAccountTradesGet200ResponseInner.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def remaining_quantity(self):
        """Gets the remaining_quantity of this AccountsAccountTradesGet200ResponseInner.


        :return: The remaining_quantity of this AccountsAccountTradesGet200ResponseInner.
        :rtype: float
        """
        return self._remaining_quantity

    @remaining_quantity.setter
    def remaining_quantity(self, remaining_quantity):
        """Sets the remaining_quantity of this AccountsAccountTradesGet200ResponseInner.


        :param remaining_quantity: The remaining_quantity of this AccountsAccountTradesGet200ResponseInner.
        :type remaining_quantity: float
        """

        self._remaining_quantity = remaining_quantity

    @property
    def side(self):
        """Gets the side of this AccountsAccountTradesGet200ResponseInner.


        :return: The side of this AccountsAccountTradesGet200ResponseInner.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this AccountsAccountTradesGet200ResponseInner.


        :param side: The side of this AccountsAccountTradesGet200ResponseInner.
        :type side: str
        """
        allowed_values = ["1", "2"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def ticker(self):
        """Gets the ticker of this AccountsAccountTradesGet200ResponseInner.


        :return: The ticker of this AccountsAccountTradesGet200ResponseInner.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this AccountsAccountTradesGet200ResponseInner.


        :param ticker: The ticker of this AccountsAccountTradesGet200ResponseInner.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def trade_price(self):
        """Gets the trade_price of this AccountsAccountTradesGet200ResponseInner.


        :return: The trade_price of this AccountsAccountTradesGet200ResponseInner.
        :rtype: float
        """
        return self._trade_price

    @trade_price.setter
    def trade_price(self, trade_price):
        """Sets the trade_price of this AccountsAccountTradesGet200ResponseInner.


        :param trade_price: The trade_price of this AccountsAccountTradesGet200ResponseInner.
        :type trade_price: float
        """

        self._trade_price = trade_price

    @property
    def trade_size(self):
        """Gets the trade_size of this AccountsAccountTradesGet200ResponseInner.


        :return: The trade_size of this AccountsAccountTradesGet200ResponseInner.
        :rtype: float
        """
        return self._trade_size

    @trade_size.setter
    def trade_size(self, trade_size):
        """Sets the trade_size of this AccountsAccountTradesGet200ResponseInner.


        :param trade_size: The trade_size of this AccountsAccountTradesGet200ResponseInner.
        :type trade_size: float
        """

        self._trade_size = trade_size
