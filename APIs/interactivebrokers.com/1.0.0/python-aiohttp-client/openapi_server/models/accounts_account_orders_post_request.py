# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_type import OrderType
from openapi_server.models.time_in_force import TimeInForce
from openapi_server import util


class AccountsAccountOrdersPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aux_price: float=None, contract_id: float=None, currency: str=None, customer_order_id: str=None, german_hft_algo: bool=None, instrument_type: str=None, listing_exchange: str=None, mifid2_algo: str=None, mifid2_decision_maker: str=None, mifid2_execution_algo: str=None, mifid2_execution_trader: str=None, order_type: OrderType=None, order_restrictions: float=None, outside_rth: float=None, price: float=None, quantity: float=None, side: float=None, ticker: str=None, time_in_force: TimeInForce=None):
        """AccountsAccountOrdersPostRequest - a model defined in OpenAPI

        :param aux_price: The aux_price of this AccountsAccountOrdersPostRequest.
        :param contract_id: The contract_id of this AccountsAccountOrdersPostRequest.
        :param currency: The currency of this AccountsAccountOrdersPostRequest.
        :param customer_order_id: The customer_order_id of this AccountsAccountOrdersPostRequest.
        :param german_hft_algo: The german_hft_algo of this AccountsAccountOrdersPostRequest.
        :param instrument_type: The instrument_type of this AccountsAccountOrdersPostRequest.
        :param listing_exchange: The listing_exchange of this AccountsAccountOrdersPostRequest.
        :param mifid2_algo: The mifid2_algo of this AccountsAccountOrdersPostRequest.
        :param mifid2_decision_maker: The mifid2_decision_maker of this AccountsAccountOrdersPostRequest.
        :param mifid2_execution_algo: The mifid2_execution_algo of this AccountsAccountOrdersPostRequest.
        :param mifid2_execution_trader: The mifid2_execution_trader of this AccountsAccountOrdersPostRequest.
        :param order_type: The order_type of this AccountsAccountOrdersPostRequest.
        :param order_restrictions: The order_restrictions of this AccountsAccountOrdersPostRequest.
        :param outside_rth: The outside_rth of this AccountsAccountOrdersPostRequest.
        :param price: The price of this AccountsAccountOrdersPostRequest.
        :param quantity: The quantity of this AccountsAccountOrdersPostRequest.
        :param side: The side of this AccountsAccountOrdersPostRequest.
        :param ticker: The ticker of this AccountsAccountOrdersPostRequest.
        :param time_in_force: The time_in_force of this AccountsAccountOrdersPostRequest.
        """
        self.openapi_types = {
            'aux_price': float,
            'contract_id': float,
            'currency': str,
            'customer_order_id': str,
            'german_hft_algo': bool,
            'instrument_type': str,
            'listing_exchange': str,
            'mifid2_algo': str,
            'mifid2_decision_maker': str,
            'mifid2_execution_algo': str,
            'mifid2_execution_trader': str,
            'order_type': OrderType,
            'order_restrictions': float,
            'outside_rth': float,
            'price': float,
            'quantity': float,
            'side': float,
            'ticker': str,
            'time_in_force': TimeInForce
        }

        self.attribute_map = {
            'aux_price': 'Aux Price',
            'contract_id': 'ContractId',
            'currency': 'Currency',
            'customer_order_id': 'CustomerOrderId',
            'german_hft_algo': 'GermanHftAlgo',
            'instrument_type': 'InstrumentType',
            'listing_exchange': 'ListingExchange',
            'mifid2_algo': 'Mifid2Algo',
            'mifid2_decision_maker': 'Mifid2DecisionMaker',
            'mifid2_execution_algo': 'Mifid2ExecutionAlgo',
            'mifid2_execution_trader': 'Mifid2ExecutionTrader',
            'order_type': 'Order Type',
            'order_restrictions': 'OrderRestrictions',
            'outside_rth': 'Outside RTH',
            'price': 'Price',
            'quantity': 'Quantity',
            'side': 'Side',
            'ticker': 'Ticker',
            'time_in_force': 'Time in Force'
        }

        self._aux_price = aux_price
        self._contract_id = contract_id
        self._currency = currency
        self._customer_order_id = customer_order_id
        self._german_hft_algo = german_hft_algo
        self._instrument_type = instrument_type
        self._listing_exchange = listing_exchange
        self._mifid2_algo = mifid2_algo
        self._mifid2_decision_maker = mifid2_decision_maker
        self._mifid2_execution_algo = mifid2_execution_algo
        self._mifid2_execution_trader = mifid2_execution_trader
        self._order_type = order_type
        self._order_restrictions = order_restrictions
        self._outside_rth = outside_rth
        self._price = price
        self._quantity = quantity
        self._side = side
        self._ticker = ticker
        self._time_in_force = time_in_force

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountsAccountOrdersPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _accounts__account__orders_post_request of this AccountsAccountOrdersPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aux_price(self):
        """Gets the aux_price of this AccountsAccountOrdersPostRequest.

        Required Price to support Stop and Stop Limit orders

        :return: The aux_price of this AccountsAccountOrdersPostRequest.
        :rtype: float
        """
        return self._aux_price

    @aux_price.setter
    def aux_price(self, aux_price):
        """Sets the aux_price of this AccountsAccountOrdersPostRequest.

        Required Price to support Stop and Stop Limit orders

        :param aux_price: The aux_price of this AccountsAccountOrdersPostRequest.
        :type aux_price: float
        """

        self._aux_price = aux_price

    @property
    def contract_id(self):
        """Gets the contract_id of this AccountsAccountOrdersPostRequest.

        The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)

        :return: The contract_id of this AccountsAccountOrdersPostRequest.
        :rtype: float
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this AccountsAccountOrdersPostRequest.

        The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)

        :param contract_id: The contract_id of this AccountsAccountOrdersPostRequest.
        :type contract_id: float
        """

        self._contract_id = contract_id

    @property
    def currency(self):
        """Gets the currency of this AccountsAccountOrdersPostRequest.

        The currency in which the FX pair trades (only for InstrumentType=CASH)

        :return: The currency of this AccountsAccountOrdersPostRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountsAccountOrdersPostRequest.

        The currency in which the FX pair trades (only for InstrumentType=CASH)

        :param currency: The currency of this AccountsAccountOrdersPostRequest.
        :type currency: str
        """

        self._currency = currency

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this AccountsAccountOrdersPostRequest.

        The order ID assigned by the customer.

        :return: The customer_order_id of this AccountsAccountOrdersPostRequest.
        :rtype: str
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this AccountsAccountOrdersPostRequest.

        The order ID assigned by the customer.

        :param customer_order_id: The customer_order_id of this AccountsAccountOrdersPostRequest.
        :type customer_order_id: str
        """

        self._customer_order_id = customer_order_id

    @property
    def german_hft_algo(self):
        """Gets the german_hft_algo of this AccountsAccountOrdersPostRequest.

        By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected.

        :return: The german_hft_algo of this AccountsAccountOrdersPostRequest.
        :rtype: bool
        """
        return self._german_hft_algo

    @german_hft_algo.setter
    def german_hft_algo(self, german_hft_algo):
        """Sets the german_hft_algo of this AccountsAccountOrdersPostRequest.

        By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected.

        :param german_hft_algo: The german_hft_algo of this AccountsAccountOrdersPostRequest.
        :type german_hft_algo: bool
        """

        self._german_hft_algo = german_hft_algo

    @property
    def instrument_type(self):
        """Gets the instrument_type of this AccountsAccountOrdersPostRequest.

        The instrument type of the contract

        :return: The instrument_type of this AccountsAccountOrdersPostRequest.
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this AccountsAccountOrdersPostRequest.

        The instrument type of the contract

        :param instrument_type: The instrument_type of this AccountsAccountOrdersPostRequest.
        :type instrument_type: str
        """

        self._instrument_type = instrument_type

    @property
    def listing_exchange(self):
        """Gets the listing_exchange of this AccountsAccountOrdersPostRequest.

        The exchange on which the trading product is listed (only for InstrumentType=STK)

        :return: The listing_exchange of this AccountsAccountOrdersPostRequest.
        :rtype: str
        """
        return self._listing_exchange

    @listing_exchange.setter
    def listing_exchange(self, listing_exchange):
        """Sets the listing_exchange of this AccountsAccountOrdersPostRequest.

        The exchange on which the trading product is listed (only for InstrumentType=STK)

        :param listing_exchange: The listing_exchange of this AccountsAccountOrdersPostRequest.
        :type listing_exchange: str
        """

        self._listing_exchange = listing_exchange

    @property
    def mifid2_algo(self):
        """Gets the mifid2_algo of this AccountsAccountOrdersPostRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions

        :return: The mifid2_algo of this AccountsAccountOrdersPostRequest.
        :rtype: str
        """
        return self._mifid2_algo

    @mifid2_algo.setter
    def mifid2_algo(self, mifid2_algo):
        """Sets the mifid2_algo of this AccountsAccountOrdersPostRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions

        :param mifid2_algo: The mifid2_algo of this AccountsAccountOrdersPostRequest.
        :type mifid2_algo: str
        """

        self._mifid2_algo = mifid2_algo

    @property
    def mifid2_decision_maker(self):
        """Gets the mifid2_decision_maker of this AccountsAccountOrdersPostRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for decision makers.

        :return: The mifid2_decision_maker of this AccountsAccountOrdersPostRequest.
        :rtype: str
        """
        return self._mifid2_decision_maker

    @mifid2_decision_maker.setter
    def mifid2_decision_maker(self, mifid2_decision_maker):
        """Sets the mifid2_decision_maker of this AccountsAccountOrdersPostRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for decision makers.

        :param mifid2_decision_maker: The mifid2_decision_maker of this AccountsAccountOrdersPostRequest.
        :type mifid2_decision_maker: str
        """

        self._mifid2_decision_maker = mifid2_decision_maker

    @property
    def mifid2_execution_algo(self):
        """Gets the mifid2_execution_algo of this AccountsAccountOrdersPostRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order.

        :return: The mifid2_execution_algo of this AccountsAccountOrdersPostRequest.
        :rtype: str
        """
        return self._mifid2_execution_algo

    @mifid2_execution_algo.setter
    def mifid2_execution_algo(self, mifid2_execution_algo):
        """Sets the mifid2_execution_algo of this AccountsAccountOrdersPostRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order.

        :param mifid2_execution_algo: The mifid2_execution_algo of this AccountsAccountOrdersPostRequest.
        :type mifid2_execution_algo: str
        """

        self._mifid2_execution_algo = mifid2_execution_algo

    @property
    def mifid2_execution_trader(self):
        """Gets the mifid2_execution_trader of this AccountsAccountOrdersPostRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II person responsible for handling/routing of the order

        :return: The mifid2_execution_trader of this AccountsAccountOrdersPostRequest.
        :rtype: str
        """
        return self._mifid2_execution_trader

    @mifid2_execution_trader.setter
    def mifid2_execution_trader(self, mifid2_execution_trader):
        """Sets the mifid2_execution_trader of this AccountsAccountOrdersPostRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II person responsible for handling/routing of the order

        :param mifid2_execution_trader: The mifid2_execution_trader of this AccountsAccountOrdersPostRequest.
        :type mifid2_execution_trader: str
        """

        self._mifid2_execution_trader = mifid2_execution_trader

    @property
    def order_type(self):
        """Gets the order_type of this AccountsAccountOrdersPostRequest.


        :return: The order_type of this AccountsAccountOrdersPostRequest.
        :rtype: OrderType
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this AccountsAccountOrdersPostRequest.


        :param order_type: The order_type of this AccountsAccountOrdersPostRequest.
        :type order_type: OrderType
        """

        self._order_type = order_type

    @property
    def order_restrictions(self):
        """Gets the order_restrictions of this AccountsAccountOrdersPostRequest.

        MultiValueString representing the restrictions associated with an order. If more than one restriction is applicable to an order, this field can contain multiple instructions separated by space.  '1' Program Trade '2' Index Arbitrage  '3' Non-Index Arbitrage 

        :return: The order_restrictions of this AccountsAccountOrdersPostRequest.
        :rtype: float
        """
        return self._order_restrictions

    @order_restrictions.setter
    def order_restrictions(self, order_restrictions):
        """Sets the order_restrictions of this AccountsAccountOrdersPostRequest.

        MultiValueString representing the restrictions associated with an order. If more than one restriction is applicable to an order, this field can contain multiple instructions separated by space.  '1' Program Trade '2' Index Arbitrage  '3' Non-Index Arbitrage 

        :param order_restrictions: The order_restrictions of this AccountsAccountOrdersPostRequest.
        :type order_restrictions: float
        """

        self._order_restrictions = order_restrictions

    @property
    def outside_rth(self):
        """Gets the outside_rth of this AccountsAccountOrdersPostRequest.

        Indicates if order is active outside regular trading hours, where defined. 0 = no (default), 1 = yes

        :return: The outside_rth of this AccountsAccountOrdersPostRequest.
        :rtype: float
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this AccountsAccountOrdersPostRequest.

        Indicates if order is active outside regular trading hours, where defined. 0 = no (default), 1 = yes

        :param outside_rth: The outside_rth of this AccountsAccountOrdersPostRequest.
        :type outside_rth: float
        """

        self._outside_rth = outside_rth

    @property
    def price(self):
        """Gets the price of this AccountsAccountOrdersPostRequest.

        The order price

        :return: The price of this AccountsAccountOrdersPostRequest.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AccountsAccountOrdersPostRequest.

        The order price

        :param price: The price of this AccountsAccountOrdersPostRequest.
        :type price: float
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this AccountsAccountOrdersPostRequest.

        The number of units in the order; contracts or shares

        :return: The quantity of this AccountsAccountOrdersPostRequest.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AccountsAccountOrdersPostRequest.

        The number of units in the order; contracts or shares

        :param quantity: The quantity of this AccountsAccountOrdersPostRequest.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def side(self):
        """Gets the side of this AccountsAccountOrdersPostRequest.

        Buy = '1', Sell = '2'

        :return: The side of this AccountsAccountOrdersPostRequest.
        :rtype: float
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this AccountsAccountOrdersPostRequest.

        Buy = '1', Sell = '2'

        :param side: The side of this AccountsAccountOrdersPostRequest.
        :type side: float
        """
        allowed_values = [1, 2]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def ticker(self):
        """Gets the ticker of this AccountsAccountOrdersPostRequest.

        The symbol that identifies the trading product

        :return: The ticker of this AccountsAccountOrdersPostRequest.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this AccountsAccountOrdersPostRequest.

        The symbol that identifies the trading product

        :param ticker: The ticker of this AccountsAccountOrdersPostRequest.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def time_in_force(self):
        """Gets the time_in_force of this AccountsAccountOrdersPostRequest.


        :return: The time_in_force of this AccountsAccountOrdersPostRequest.
        :rtype: TimeInForce
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this AccountsAccountOrdersPostRequest.


        :param time_in_force: The time_in_force of this AccountsAccountOrdersPostRequest.
        :type time_in_force: TimeInForce
        """

        self._time_in_force = time_in_force
