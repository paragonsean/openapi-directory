# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OauthLiveSessionTokenPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, diffie_hellman_challenge: str=None, oauth_consumer_key: str=None, oauth_nonce: str=None, oauth_signature: str=None, oauth_signature_method: str=None, oauth_timestamp: str=None, oauth_token: str=None):
        """OauthLiveSessionTokenPostRequest - a model defined in OpenAPI

        :param diffie_hellman_challenge: The diffie_hellman_challenge of this OauthLiveSessionTokenPostRequest.
        :param oauth_consumer_key: The oauth_consumer_key of this OauthLiveSessionTokenPostRequest.
        :param oauth_nonce: The oauth_nonce of this OauthLiveSessionTokenPostRequest.
        :param oauth_signature: The oauth_signature of this OauthLiveSessionTokenPostRequest.
        :param oauth_signature_method: The oauth_signature_method of this OauthLiveSessionTokenPostRequest.
        :param oauth_timestamp: The oauth_timestamp of this OauthLiveSessionTokenPostRequest.
        :param oauth_token: The oauth_token of this OauthLiveSessionTokenPostRequest.
        """
        self.openapi_types = {
            'diffie_hellman_challenge': str,
            'oauth_consumer_key': str,
            'oauth_nonce': str,
            'oauth_signature': str,
            'oauth_signature_method': str,
            'oauth_timestamp': str,
            'oauth_token': str
        }

        self.attribute_map = {
            'diffie_hellman_challenge': 'diffie_hellman_challenge',
            'oauth_consumer_key': 'oauth_consumer_key',
            'oauth_nonce': 'oauth_nonce',
            'oauth_signature': 'oauth_signature',
            'oauth_signature_method': 'oauth_signature_method',
            'oauth_timestamp': 'oauth_timestamp',
            'oauth_token': 'oauth_token'
        }

        self._diffie_hellman_challenge = diffie_hellman_challenge
        self._oauth_consumer_key = oauth_consumer_key
        self._oauth_nonce = oauth_nonce
        self._oauth_signature = oauth_signature
        self._oauth_signature_method = oauth_signature_method
        self._oauth_timestamp = oauth_timestamp
        self._oauth_token = oauth_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OauthLiveSessionTokenPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _oauth_live_session_token_post_request of this OauthLiveSessionTokenPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def diffie_hellman_challenge(self):
        """Gets the diffie_hellman_challenge of this OauthLiveSessionTokenPostRequest.

        Challenge value calculated using the Diffie-Hellman prime and generated provided during the registration process. See the \"OAuth at Interactive Brokers\" document for more details.  

        :return: The diffie_hellman_challenge of this OauthLiveSessionTokenPostRequest.
        :rtype: str
        """
        return self._diffie_hellman_challenge

    @diffie_hellman_challenge.setter
    def diffie_hellman_challenge(self, diffie_hellman_challenge):
        """Sets the diffie_hellman_challenge of this OauthLiveSessionTokenPostRequest.

        Challenge value calculated using the Diffie-Hellman prime and generated provided during the registration process. See the \"OAuth at Interactive Brokers\" document for more details.  

        :param diffie_hellman_challenge: The diffie_hellman_challenge of this OauthLiveSessionTokenPostRequest.
        :type diffie_hellman_challenge: str
        """

        self._diffie_hellman_challenge = diffie_hellman_challenge

    @property
    def oauth_consumer_key(self):
        """Gets the oauth_consumer_key of this OauthLiveSessionTokenPostRequest.

        The 25-character hexadecimal string that was obtained from Interactive Brokers during the OAuth consumer registration process.

        :return: The oauth_consumer_key of this OauthLiveSessionTokenPostRequest.
        :rtype: str
        """
        return self._oauth_consumer_key

    @oauth_consumer_key.setter
    def oauth_consumer_key(self, oauth_consumer_key):
        """Sets the oauth_consumer_key of this OauthLiveSessionTokenPostRequest.

        The 25-character hexadecimal string that was obtained from Interactive Brokers during the OAuth consumer registration process.

        :param oauth_consumer_key: The oauth_consumer_key of this OauthLiveSessionTokenPostRequest.
        :type oauth_consumer_key: str
        """

        self._oauth_consumer_key = oauth_consumer_key

    @property
    def oauth_nonce(self):
        """Gets the oauth_nonce of this OauthLiveSessionTokenPostRequest.

        A random string uniquely generated for each request.

        :return: The oauth_nonce of this OauthLiveSessionTokenPostRequest.
        :rtype: str
        """
        return self._oauth_nonce

    @oauth_nonce.setter
    def oauth_nonce(self, oauth_nonce):
        """Sets the oauth_nonce of this OauthLiveSessionTokenPostRequest.

        A random string uniquely generated for each request.

        :param oauth_nonce: The oauth_nonce of this OauthLiveSessionTokenPostRequest.
        :type oauth_nonce: str
        """

        self._oauth_nonce = oauth_nonce

    @property
    def oauth_signature(self):
        """Gets the oauth_signature of this OauthLiveSessionTokenPostRequest.

        The signature for the request generated using the method specified in the oauth_signature_method parameter. See section 9 of the OAuth v1.0a specification for more details on signing requests.

        :return: The oauth_signature of this OauthLiveSessionTokenPostRequest.
        :rtype: str
        """
        return self._oauth_signature

    @oauth_signature.setter
    def oauth_signature(self, oauth_signature):
        """Sets the oauth_signature of this OauthLiveSessionTokenPostRequest.

        The signature for the request generated using the method specified in the oauth_signature_method parameter. See section 9 of the OAuth v1.0a specification for more details on signing requests.

        :param oauth_signature: The oauth_signature of this OauthLiveSessionTokenPostRequest.
        :type oauth_signature: str
        """

        self._oauth_signature = oauth_signature

    @property
    def oauth_signature_method(self):
        """Gets the oauth_signature_method of this OauthLiveSessionTokenPostRequest.

        The signature method used to sign the request. Currently only 'RSA-SHA256' is supported.

        :return: The oauth_signature_method of this OauthLiveSessionTokenPostRequest.
        :rtype: str
        """
        return self._oauth_signature_method

    @oauth_signature_method.setter
    def oauth_signature_method(self, oauth_signature_method):
        """Sets the oauth_signature_method of this OauthLiveSessionTokenPostRequest.

        The signature method used to sign the request. Currently only 'RSA-SHA256' is supported.

        :param oauth_signature_method: The oauth_signature_method of this OauthLiveSessionTokenPostRequest.
        :type oauth_signature_method: str
        """

        self._oauth_signature_method = oauth_signature_method

    @property
    def oauth_timestamp(self):
        """Gets the oauth_timestamp of this OauthLiveSessionTokenPostRequest.

        Timestamp expressed in seconds since 1/1/1970 00:00:00 GMT. Must be a positive integer and greater than or equal to any timestamp used in previous requests.

        :return: The oauth_timestamp of this OauthLiveSessionTokenPostRequest.
        :rtype: str
        """
        return self._oauth_timestamp

    @oauth_timestamp.setter
    def oauth_timestamp(self, oauth_timestamp):
        """Sets the oauth_timestamp of this OauthLiveSessionTokenPostRequest.

        Timestamp expressed in seconds since 1/1/1970 00:00:00 GMT. Must be a positive integer and greater than or equal to any timestamp used in previous requests.

        :param oauth_timestamp: The oauth_timestamp of this OauthLiveSessionTokenPostRequest.
        :type oauth_timestamp: str
        """

        self._oauth_timestamp = oauth_timestamp

    @property
    def oauth_token(self):
        """Gets the oauth_token of this OauthLiveSessionTokenPostRequest.

        The request token obtained from IB via /request_token.

        :return: The oauth_token of this OauthLiveSessionTokenPostRequest.
        :rtype: str
        """
        return self._oauth_token

    @oauth_token.setter
    def oauth_token(self, oauth_token):
        """Sets the oauth_token of this OauthLiveSessionTokenPostRequest.

        The request token obtained from IB via /request_token.

        :param oauth_token: The oauth_token of this OauthLiveSessionTokenPostRequest.
        :type oauth_token: str
        """

        self._oauth_token = oauth_token
