# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_status import OrderStatus
from openapi_server.models.order_type import OrderType
from openapi_server import util


class AccountsAccountOrdersCustomerOrderIdPut200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_order_id: str=None, order_qty: float=None, order_type: OrderType=None, price: str=None, side: float=None, status: OrderStatus=None, symbol: float=None, warning: str=None):
        """AccountsAccountOrdersCustomerOrderIdPut200ResponseInner - a model defined in OpenAPI

        :param customer_order_id: The customer_order_id of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :param order_qty: The order_qty of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :param order_type: The order_type of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :param price: The price of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :param side: The side of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :param status: The status of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :param symbol: The symbol of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :param warning: The warning of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        """
        self.openapi_types = {
            'customer_order_id': str,
            'order_qty': float,
            'order_type': OrderType,
            'price': str,
            'side': float,
            'status': OrderStatus,
            'symbol': float,
            'warning': str
        }

        self.attribute_map = {
            'customer_order_id': 'CustomerOrderId',
            'order_qty': 'OrderQty',
            'order_type': 'OrderType',
            'price': 'Price',
            'side': 'Side',
            'status': 'Status',
            'symbol': 'Symbol',
            'warning': 'Warning'
        }

        self._customer_order_id = customer_order_id
        self._order_qty = order_qty
        self._order_type = order_type
        self._price = price
        self._side = side
        self._status = status
        self._symbol = symbol
        self._warning = warning

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountsAccountOrdersCustomerOrderIdPut200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _accounts__account__orders__CustomerOrderId__put_200_response_inner of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :return: The customer_order_id of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :rtype: str
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :param customer_order_id: The customer_order_id of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :type customer_order_id: str
        """

        self._customer_order_id = customer_order_id

    @property
    def order_qty(self):
        """Gets the order_qty of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :return: The order_qty of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :rtype: float
        """
        return self._order_qty

    @order_qty.setter
    def order_qty(self, order_qty):
        """Sets the order_qty of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :param order_qty: The order_qty of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :type order_qty: float
        """

        self._order_qty = order_qty

    @property
    def order_type(self):
        """Gets the order_type of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :return: The order_type of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :rtype: OrderType
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :param order_type: The order_type of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :type order_type: OrderType
        """

        self._order_type = order_type

    @property
    def price(self):
        """Gets the price of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :return: The price of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :param price: The price of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :type price: str
        """

        self._price = price

    @property
    def side(self):
        """Gets the side of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :return: The side of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :rtype: float
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :param side: The side of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :type side: float
        """
        allowed_values = [1, 2]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def status(self):
        """Gets the status of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :return: The status of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :rtype: OrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :param status: The status of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :type status: OrderStatus
        """

        self._status = status

    @property
    def symbol(self):
        """Gets the symbol of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :return: The symbol of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :rtype: float
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :param symbol: The symbol of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :type symbol: float
        """

        self._symbol = symbol

    @property
    def warning(self):
        """Gets the warning of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :return: The warning of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.


        :param warning: The warning of this AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.
        :type warning: str
        """

        self._warning = warning
