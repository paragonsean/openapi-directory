# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_type import OrderType
from openapi_server.models.time_in_force import TimeInForce
from openapi_server import util


class AccountsAccountOrdersCustomerOrderIdPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aux_price: float=None, customer_order_id: str=None, german_hft_algo: bool=None, mifid2_algo: str=None, mifid2_decision_maker: str=None, mifid2_execution_algo: str=None, mifid2_execution_trader: str=None, order_type: OrderType=None, orig_customer_order_id: str=None, outside_rth: float=None, price: float=None, quantity: float=None, side: float=None, time_in_force: TimeInForce=None):
        """AccountsAccountOrdersCustomerOrderIdPutRequest - a model defined in OpenAPI

        :param aux_price: The aux_price of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param customer_order_id: The customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param german_hft_algo: The german_hft_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param mifid2_algo: The mifid2_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param mifid2_decision_maker: The mifid2_decision_maker of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param mifid2_execution_algo: The mifid2_execution_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param mifid2_execution_trader: The mifid2_execution_trader of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param order_type: The order_type of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param orig_customer_order_id: The orig_customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param outside_rth: The outside_rth of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param price: The price of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param quantity: The quantity of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param side: The side of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :param time_in_force: The time_in_force of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        """
        self.openapi_types = {
            'aux_price': float,
            'customer_order_id': str,
            'german_hft_algo': bool,
            'mifid2_algo': str,
            'mifid2_decision_maker': str,
            'mifid2_execution_algo': str,
            'mifid2_execution_trader': str,
            'order_type': OrderType,
            'orig_customer_order_id': str,
            'outside_rth': float,
            'price': float,
            'quantity': float,
            'side': float,
            'time_in_force': TimeInForce
        }

        self.attribute_map = {
            'aux_price': 'Aux Price',
            'customer_order_id': 'CustomerOrderId',
            'german_hft_algo': 'GermanHftAlgo',
            'mifid2_algo': 'Mifid2Algo',
            'mifid2_decision_maker': 'Mifid2DecisionMaker',
            'mifid2_execution_algo': 'Mifid2ExecutionAlgo',
            'mifid2_execution_trader': 'Mifid2ExecutionTrader',
            'order_type': 'Order Type',
            'orig_customer_order_id': 'OrigCustomerOrderId',
            'outside_rth': 'Outside RTH',
            'price': 'Price',
            'quantity': 'Quantity',
            'side': 'Side',
            'time_in_force': 'Time in Force'
        }

        self._aux_price = aux_price
        self._customer_order_id = customer_order_id
        self._german_hft_algo = german_hft_algo
        self._mifid2_algo = mifid2_algo
        self._mifid2_decision_maker = mifid2_decision_maker
        self._mifid2_execution_algo = mifid2_execution_algo
        self._mifid2_execution_trader = mifid2_execution_trader
        self._order_type = order_type
        self._orig_customer_order_id = orig_customer_order_id
        self._outside_rth = outside_rth
        self._price = price
        self._quantity = quantity
        self._side = side
        self._time_in_force = time_in_force

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountsAccountOrdersCustomerOrderIdPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _accounts__account__orders__CustomerOrderId__put_request of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aux_price(self):
        """Gets the aux_price of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        Required Price to support Stop and Stop Limit orders

        :return: The aux_price of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: float
        """
        return self._aux_price

    @aux_price.setter
    def aux_price(self, aux_price):
        """Sets the aux_price of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        Required Price to support Stop and Stop Limit orders

        :param aux_price: The aux_price of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type aux_price: float
        """

        self._aux_price = aux_price

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        The new order ID assigned by the customer for the modification.

        :return: The customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: str
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        The new order ID assigned by the customer for the modification.

        :param customer_order_id: The customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type customer_order_id: str
        """

        self._customer_order_id = customer_order_id

    @property
    def german_hft_algo(self):
        """Gets the german_hft_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected.

        :return: The german_hft_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: bool
        """
        return self._german_hft_algo

    @german_hft_algo.setter
    def german_hft_algo(self, german_hft_algo):
        """Sets the german_hft_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected.

        :param german_hft_algo: The german_hft_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type german_hft_algo: bool
        """

        self._german_hft_algo = german_hft_algo

    @property
    def mifid2_algo(self):
        """Gets the mifid2_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions

        :return: The mifid2_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: str
        """
        return self._mifid2_algo

    @mifid2_algo.setter
    def mifid2_algo(self, mifid2_algo):
        """Sets the mifid2_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions

        :param mifid2_algo: The mifid2_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type mifid2_algo: str
        """

        self._mifid2_algo = mifid2_algo

    @property
    def mifid2_decision_maker(self):
        """Gets the mifid2_decision_maker of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for decision makers.

        :return: The mifid2_decision_maker of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: str
        """
        return self._mifid2_decision_maker

    @mifid2_decision_maker.setter
    def mifid2_decision_maker(self, mifid2_decision_maker):
        """Sets the mifid2_decision_maker of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for decision makers.

        :param mifid2_decision_maker: The mifid2_decision_maker of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type mifid2_decision_maker: str
        """

        self._mifid2_decision_maker = mifid2_decision_maker

    @property
    def mifid2_execution_algo(self):
        """Gets the mifid2_execution_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order.

        :return: The mifid2_execution_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: str
        """
        return self._mifid2_execution_algo

    @mifid2_execution_algo.setter
    def mifid2_execution_algo(self, mifid2_execution_algo):
        """Sets the mifid2_execution_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order.

        :param mifid2_execution_algo: The mifid2_execution_algo of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type mifid2_execution_algo: str
        """

        self._mifid2_execution_algo = mifid2_execution_algo

    @property
    def mifid2_execution_trader(self):
        """Gets the mifid2_execution_trader of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II person responsible for handling/routing of the order

        :return: The mifid2_execution_trader of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: str
        """
        return self._mifid2_execution_trader

    @mifid2_execution_trader.setter
    def mifid2_execution_trader(self, mifid2_execution_trader):
        """Sets the mifid2_execution_trader of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        This field permits specification of the user's preregistered (via account management) MiFID II person responsible for handling/routing of the order

        :param mifid2_execution_trader: The mifid2_execution_trader of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type mifid2_execution_trader: str
        """

        self._mifid2_execution_trader = mifid2_execution_trader

    @property
    def order_type(self):
        """Gets the order_type of this AccountsAccountOrdersCustomerOrderIdPutRequest.


        :return: The order_type of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: OrderType
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this AccountsAccountOrdersCustomerOrderIdPutRequest.


        :param order_type: The order_type of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type order_type: OrderType
        """

        self._order_type = order_type

    @property
    def orig_customer_order_id(self):
        """Gets the orig_customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        The order ID assigned by the customer

        :return: The orig_customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: str
        """
        return self._orig_customer_order_id

    @orig_customer_order_id.setter
    def orig_customer_order_id(self, orig_customer_order_id):
        """Sets the orig_customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        The order ID assigned by the customer

        :param orig_customer_order_id: The orig_customer_order_id of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type orig_customer_order_id: str
        """

        self._orig_customer_order_id = orig_customer_order_id

    @property
    def outside_rth(self):
        """Gets the outside_rth of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        Indicates if order is active outside regular trading hours, where defined. 0 = no (default), 1 = yes

        :return: The outside_rth of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: float
        """
        return self._outside_rth

    @outside_rth.setter
    def outside_rth(self, outside_rth):
        """Sets the outside_rth of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        Indicates if order is active outside regular trading hours, where defined. 0 = no (default), 1 = yes

        :param outside_rth: The outside_rth of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type outside_rth: float
        """

        self._outside_rth = outside_rth

    @property
    def price(self):
        """Gets the price of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        The order price

        :return: The price of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        The order price

        :param price: The price of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type price: float
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        The number of units in the order; contracts or shares

        :return: The quantity of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        The number of units in the order; contracts or shares

        :param quantity: The quantity of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def side(self):
        """Gets the side of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        Buy = '1', Sell = '2'

        :return: The side of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: float
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this AccountsAccountOrdersCustomerOrderIdPutRequest.

        Buy = '1', Sell = '2'

        :param side: The side of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type side: float
        """
        allowed_values = [1, 2]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def time_in_force(self):
        """Gets the time_in_force of this AccountsAccountOrdersCustomerOrderIdPutRequest.


        :return: The time_in_force of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :rtype: TimeInForce
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this AccountsAccountOrdersCustomerOrderIdPutRequest.


        :param time_in_force: The time_in_force of this AccountsAccountOrdersCustomerOrderIdPutRequest.
        :type time_in_force: TimeInForce
        """

        self._time_in_force = time_in_force
