# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.marketdata_snapshot_get200_response_inner_bid import MarketdataSnapshotGet200ResponseInnerBid
from openapi_server.models.marketdata_snapshot_get200_response_inner_closing import MarketdataSnapshotGet200ResponseInnerClosing
from openapi_server.models.marketdata_snapshot_get200_response_inner_trade import MarketdataSnapshotGet200ResponseInnerTrade
from openapi_server import util


class MarketdataSnapshotGet200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bid: MarketdataSnapshotGet200ResponseInnerBid=None, closing: MarketdataSnapshotGet200ResponseInnerClosing=None, complete: bool=None, conid: str=None, offer: MarketdataSnapshotGet200ResponseInnerBid=None, temporality: float=None, trade: MarketdataSnapshotGet200ResponseInnerTrade=None):
        """MarketdataSnapshotGet200ResponseInner - a model defined in OpenAPI

        :param bid: The bid of this MarketdataSnapshotGet200ResponseInner.
        :param closing: The closing of this MarketdataSnapshotGet200ResponseInner.
        :param complete: The complete of this MarketdataSnapshotGet200ResponseInner.
        :param conid: The conid of this MarketdataSnapshotGet200ResponseInner.
        :param offer: The offer of this MarketdataSnapshotGet200ResponseInner.
        :param temporality: The temporality of this MarketdataSnapshotGet200ResponseInner.
        :param trade: The trade of this MarketdataSnapshotGet200ResponseInner.
        """
        self.openapi_types = {
            'bid': MarketdataSnapshotGet200ResponseInnerBid,
            'closing': MarketdataSnapshotGet200ResponseInnerClosing,
            'complete': bool,
            'conid': str,
            'offer': MarketdataSnapshotGet200ResponseInnerBid,
            'temporality': float,
            'trade': MarketdataSnapshotGet200ResponseInnerTrade
        }

        self.attribute_map = {
            'bid': 'Bid',
            'closing': 'Closing',
            'complete': 'Complete',
            'conid': 'Conid',
            'offer': 'Offer',
            'temporality': 'Temporality',
            'trade': 'Trade'
        }

        self._bid = bid
        self._closing = closing
        self._complete = complete
        self._conid = conid
        self._offer = offer
        self._temporality = temporality
        self._trade = trade

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketdataSnapshotGet200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _marketdata_snapshot_get_200_response_inner of this MarketdataSnapshotGet200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bid(self):
        """Gets the bid of this MarketdataSnapshotGet200ResponseInner.


        :return: The bid of this MarketdataSnapshotGet200ResponseInner.
        :rtype: MarketdataSnapshotGet200ResponseInnerBid
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this MarketdataSnapshotGet200ResponseInner.


        :param bid: The bid of this MarketdataSnapshotGet200ResponseInner.
        :type bid: MarketdataSnapshotGet200ResponseInnerBid
        """

        self._bid = bid

    @property
    def closing(self):
        """Gets the closing of this MarketdataSnapshotGet200ResponseInner.


        :return: The closing of this MarketdataSnapshotGet200ResponseInner.
        :rtype: MarketdataSnapshotGet200ResponseInnerClosing
        """
        return self._closing

    @closing.setter
    def closing(self, closing):
        """Sets the closing of this MarketdataSnapshotGet200ResponseInner.


        :param closing: The closing of this MarketdataSnapshotGet200ResponseInner.
        :type closing: MarketdataSnapshotGet200ResponseInnerClosing
        """

        self._closing = closing

    @property
    def complete(self):
        """Gets the complete of this MarketdataSnapshotGet200ResponseInner.


        :return: The complete of this MarketdataSnapshotGet200ResponseInner.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this MarketdataSnapshotGet200ResponseInner.


        :param complete: The complete of this MarketdataSnapshotGet200ResponseInner.
        :type complete: bool
        """

        self._complete = complete

    @property
    def conid(self):
        """Gets the conid of this MarketdataSnapshotGet200ResponseInner.


        :return: The conid of this MarketdataSnapshotGet200ResponseInner.
        :rtype: str
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this MarketdataSnapshotGet200ResponseInner.


        :param conid: The conid of this MarketdataSnapshotGet200ResponseInner.
        :type conid: str
        """

        self._conid = conid

    @property
    def offer(self):
        """Gets the offer of this MarketdataSnapshotGet200ResponseInner.


        :return: The offer of this MarketdataSnapshotGet200ResponseInner.
        :rtype: MarketdataSnapshotGet200ResponseInnerBid
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this MarketdataSnapshotGet200ResponseInner.


        :param offer: The offer of this MarketdataSnapshotGet200ResponseInner.
        :type offer: MarketdataSnapshotGet200ResponseInnerBid
        """

        self._offer = offer

    @property
    def temporality(self):
        """Gets the temporality of this MarketdataSnapshotGet200ResponseInner.

        0 = Real time data 1 = Delayed data 

        :return: The temporality of this MarketdataSnapshotGet200ResponseInner.
        :rtype: float
        """
        return self._temporality

    @temporality.setter
    def temporality(self, temporality):
        """Sets the temporality of this MarketdataSnapshotGet200ResponseInner.

        0 = Real time data 1 = Delayed data 

        :param temporality: The temporality of this MarketdataSnapshotGet200ResponseInner.
        :type temporality: float
        """
        allowed_values = [0, 1]  # noqa: E501
        if temporality not in allowed_values:
            raise ValueError(
                "Invalid value for `temporality` ({0}), must be one of {1}"
                .format(temporality, allowed_values)
            )

        self._temporality = temporality

    @property
    def trade(self):
        """Gets the trade of this MarketdataSnapshotGet200ResponseInner.


        :return: The trade of this MarketdataSnapshotGet200ResponseInner.
        :rtype: MarketdataSnapshotGet200ResponseInnerTrade
        """
        return self._trade

    @trade.setter
    def trade(self, trade):
        """Sets the trade of this MarketdataSnapshotGet200ResponseInner.


        :param trade: The trade of this MarketdataSnapshotGet200ResponseInner.
        :type trade: MarketdataSnapshotGet200ResponseInnerTrade
        """

        self._trade = trade
