# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.marketdata_exchange_components_get200_response_inner_mapping_inner import MarketdataExchangeComponentsGet200ResponseInnerMappingInner
from openapi_server import util


class MarketdataExchangeComponentsGet200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complete: bool=None, con_id: float=None, mapping: List[MarketdataExchangeComponentsGet200ResponseInnerMappingInner]=None):
        """MarketdataExchangeComponentsGet200ResponseInner - a model defined in OpenAPI

        :param complete: The complete of this MarketdataExchangeComponentsGet200ResponseInner.
        :param con_id: The con_id of this MarketdataExchangeComponentsGet200ResponseInner.
        :param mapping: The mapping of this MarketdataExchangeComponentsGet200ResponseInner.
        """
        self.openapi_types = {
            'complete': bool,
            'con_id': float,
            'mapping': List[MarketdataExchangeComponentsGet200ResponseInnerMappingInner]
        }

        self.attribute_map = {
            'complete': 'Complete',
            'con_id': 'ConId',
            'mapping': 'mapping'
        }

        self._complete = complete
        self._con_id = con_id
        self._mapping = mapping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketdataExchangeComponentsGet200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _marketdata_exchange_components_get_200_response_inner of this MarketdataExchangeComponentsGet200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complete(self):
        """Gets the complete of this MarketdataExchangeComponentsGet200ResponseInner.


        :return: The complete of this MarketdataExchangeComponentsGet200ResponseInner.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this MarketdataExchangeComponentsGet200ResponseInner.


        :param complete: The complete of this MarketdataExchangeComponentsGet200ResponseInner.
        :type complete: bool
        """

        self._complete = complete

    @property
    def con_id(self):
        """Gets the con_id of this MarketdataExchangeComponentsGet200ResponseInner.


        :return: The con_id of this MarketdataExchangeComponentsGet200ResponseInner.
        :rtype: float
        """
        return self._con_id

    @con_id.setter
    def con_id(self, con_id):
        """Sets the con_id of this MarketdataExchangeComponentsGet200ResponseInner.


        :param con_id: The con_id of this MarketdataExchangeComponentsGet200ResponseInner.
        :type con_id: float
        """

        self._con_id = con_id

    @property
    def mapping(self):
        """Gets the mapping of this MarketdataExchangeComponentsGet200ResponseInner.


        :return: The mapping of this MarketdataExchangeComponentsGet200ResponseInner.
        :rtype: List[MarketdataExchangeComponentsGet200ResponseInnerMappingInner]
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this MarketdataExchangeComponentsGet200ResponseInner.


        :param mapping: The mapping of this MarketdataExchangeComponentsGet200ResponseInner.
        :type mapping: List[MarketdataExchangeComponentsGet200ResponseInnerMappingInner]
        """

        self._mapping = mapping
