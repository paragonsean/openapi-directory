# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarketdataSnapshotGetRequestInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conid: float=None, currency: str=None, exchange: str=None, symbol: str=None, type: str=None):
        """MarketdataSnapshotGetRequestInner - a model defined in OpenAPI

        :param conid: The conid of this MarketdataSnapshotGetRequestInner.
        :param currency: The currency of this MarketdataSnapshotGetRequestInner.
        :param exchange: The exchange of this MarketdataSnapshotGetRequestInner.
        :param symbol: The symbol of this MarketdataSnapshotGetRequestInner.
        :param type: The type of this MarketdataSnapshotGetRequestInner.
        """
        self.openapi_types = {
            'conid': float,
            'currency': str,
            'exchange': str,
            'symbol': str,
            'type': str
        }

        self.attribute_map = {
            'conid': 'conid',
            'currency': 'currency',
            'exchange': 'exchange',
            'symbol': 'symbol',
            'type': 'type'
        }

        self._conid = conid
        self._currency = currency
        self._exchange = exchange
        self._symbol = symbol
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketdataSnapshotGetRequestInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _marketdata_snapshot_get_request_inner of this MarketdataSnapshotGetRequestInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conid(self):
        """Gets the conid of this MarketdataSnapshotGetRequestInner.

        The internal IB identifier for the trading product specified as an integer.

        :return: The conid of this MarketdataSnapshotGetRequestInner.
        :rtype: float
        """
        return self._conid

    @conid.setter
    def conid(self, conid):
        """Sets the conid of this MarketdataSnapshotGetRequestInner.

        The internal IB identifier for the trading product specified as an integer.

        :param conid: The conid of this MarketdataSnapshotGetRequestInner.
        :type conid: float
        """

        self._conid = conid

    @property
    def currency(self):
        """Gets the currency of this MarketdataSnapshotGetRequestInner.

        The currency in which the given pair trades.

        :return: The currency of this MarketdataSnapshotGetRequestInner.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this MarketdataSnapshotGetRequestInner.

        The currency in which the given pair trades.

        :param currency: The currency of this MarketdataSnapshotGetRequestInner.
        :type currency: str
        """

        self._currency = currency

    @property
    def exchange(self):
        """Gets the exchange of this MarketdataSnapshotGetRequestInner.

        The exchange on which the trading product is listed (required for type=STK).

        :return: The exchange of this MarketdataSnapshotGetRequestInner.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this MarketdataSnapshotGetRequestInner.

        The exchange on which the trading product is listed (required for type=STK).

        :param exchange: The exchange of this MarketdataSnapshotGetRequestInner.
        :type exchange: str
        """

        self._exchange = exchange

    @property
    def symbol(self):
        """Gets the symbol of this MarketdataSnapshotGetRequestInner.

        The symbol that identifies the trading product.

        :return: The symbol of this MarketdataSnapshotGetRequestInner.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this MarketdataSnapshotGetRequestInner.

        The symbol that identifies the trading product.

        :param symbol: The symbol of this MarketdataSnapshotGetRequestInner.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def type(self):
        """Gets the type of this MarketdataSnapshotGetRequestInner.

        The instrument type of the contract (CASH).

        :return: The type of this MarketdataSnapshotGetRequestInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MarketdataSnapshotGetRequestInner.

        The instrument type of the contract (CASH).

        :param type: The type of this MarketdataSnapshotGetRequestInner.
        :type type: str
        """

        self._type = type
