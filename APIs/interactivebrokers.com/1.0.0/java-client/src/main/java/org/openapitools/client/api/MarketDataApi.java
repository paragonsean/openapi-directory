/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MarketdataExchangeComponentsGet200ResponseInner;
import org.openapitools.client.model.MarketdataSnapshotGet200ResponseInner;
import org.openapitools.client.model.MarketdataSnapshotGetRequestInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarketDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for marketdataExchangeComponentsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exchange Components </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataExchangeComponentsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketdata/exchange_components";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketdataExchangeComponentsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return marketdataExchangeComponentsGetCall(_callback);

    }

    /**
     * Exchange Components
     * This endpoint provides a bit mapping for the bid/ask/last &#39;market&#39; values in the snapshot response. 
     * @return List&lt;MarketdataExchangeComponentsGet200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exchange Components </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public List<MarketdataExchangeComponentsGet200ResponseInner> marketdataExchangeComponentsGet() throws ApiException {
        ApiResponse<List<MarketdataExchangeComponentsGet200ResponseInner>> localVarResp = marketdataExchangeComponentsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Exchange Components
     * This endpoint provides a bit mapping for the bid/ask/last &#39;market&#39; values in the snapshot response. 
     * @return ApiResponse&lt;List&lt;MarketdataExchangeComponentsGet200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exchange Components </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MarketdataExchangeComponentsGet200ResponseInner>> marketdataExchangeComponentsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = marketdataExchangeComponentsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MarketdataExchangeComponentsGet200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exchange Components (asynchronously)
     * This endpoint provides a bit mapping for the bid/ask/last &#39;market&#39; values in the snapshot response. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exchange Components </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataExchangeComponentsGetAsync(final ApiCallback<List<MarketdataExchangeComponentsGet200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketdataExchangeComponentsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MarketdataExchangeComponentsGet200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketdataSnapshotGet
     * @param marketdataSnapshotGetRequestInner Contract. Allowed combinations are [type and symbol and currency], or [type, symbol, exchange, and currency], or [conid]. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Financial Instrument Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataSnapshotGetCall(List<MarketdataSnapshotGetRequestInner> marketdataSnapshotGetRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marketdataSnapshotGetRequestInner;

        // create path and map variables
        String localVarPath = "/marketdata/snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketdataSnapshotGetValidateBeforeCall(List<MarketdataSnapshotGetRequestInner> marketdataSnapshotGetRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketdataSnapshotGetRequestInner' is set
        if (marketdataSnapshotGetRequestInner == null) {
            throw new ApiException("Missing the required parameter 'marketdataSnapshotGetRequestInner' when calling marketdataSnapshotGet(Async)");
        }

        return marketdataSnapshotGetCall(marketdataSnapshotGetRequestInner, _callback);

    }

    /**
     * Market Data Snapshot
     * This endpoint allows the consumer to request a market data snapshot for one or more trading products.  Consumers need to provide unique identifiers (conids) for the products in the IB product database (retrievable using the /secdef endpoint). The &#39;market&#39; values are integers whose bits indicate the exchange(s) making up the quote.   The mapping of bit to exchange is obtained from the marketdata/exchange_component endpoint. For example, if a bid has a &#39;market&#39; value of 5 and the exchange_component result has the map  0 &#x3D;&gt; NYSE, 1 &#x3D;&gt; ISLAND, 2 &#x3D;&gt; ARCA then the exchanges contributing to the bid size are NYSE and ARCA.   Similarly, if market&#x3D;2, then only ISLAND is contributing. 
     * @param marketdataSnapshotGetRequestInner Contract. Allowed combinations are [type and symbol and currency], or [type, symbol, exchange, and currency], or [conid]. (required)
     * @return List&lt;MarketdataSnapshotGet200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Financial Instrument Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public List<MarketdataSnapshotGet200ResponseInner> marketdataSnapshotGet(List<MarketdataSnapshotGetRequestInner> marketdataSnapshotGetRequestInner) throws ApiException {
        ApiResponse<List<MarketdataSnapshotGet200ResponseInner>> localVarResp = marketdataSnapshotGetWithHttpInfo(marketdataSnapshotGetRequestInner);
        return localVarResp.getData();
    }

    /**
     * Market Data Snapshot
     * This endpoint allows the consumer to request a market data snapshot for one or more trading products.  Consumers need to provide unique identifiers (conids) for the products in the IB product database (retrievable using the /secdef endpoint). The &#39;market&#39; values are integers whose bits indicate the exchange(s) making up the quote.   The mapping of bit to exchange is obtained from the marketdata/exchange_component endpoint. For example, if a bid has a &#39;market&#39; value of 5 and the exchange_component result has the map  0 &#x3D;&gt; NYSE, 1 &#x3D;&gt; ISLAND, 2 &#x3D;&gt; ARCA then the exchanges contributing to the bid size are NYSE and ARCA.   Similarly, if market&#x3D;2, then only ISLAND is contributing. 
     * @param marketdataSnapshotGetRequestInner Contract. Allowed combinations are [type and symbol and currency], or [type, symbol, exchange, and currency], or [conid]. (required)
     * @return ApiResponse&lt;List&lt;MarketdataSnapshotGet200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Financial Instrument Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MarketdataSnapshotGet200ResponseInner>> marketdataSnapshotGetWithHttpInfo(List<MarketdataSnapshotGetRequestInner> marketdataSnapshotGetRequestInner) throws ApiException {
        okhttp3.Call localVarCall = marketdataSnapshotGetValidateBeforeCall(marketdataSnapshotGetRequestInner, null);
        Type localVarReturnType = new TypeToken<List<MarketdataSnapshotGet200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Market Data Snapshot (asynchronously)
     * This endpoint allows the consumer to request a market data snapshot for one or more trading products.  Consumers need to provide unique identifiers (conids) for the products in the IB product database (retrievable using the /secdef endpoint). The &#39;market&#39; values are integers whose bits indicate the exchange(s) making up the quote.   The mapping of bit to exchange is obtained from the marketdata/exchange_component endpoint. For example, if a bid has a &#39;market&#39; value of 5 and the exchange_component result has the map  0 &#x3D;&gt; NYSE, 1 &#x3D;&gt; ISLAND, 2 &#x3D;&gt; ARCA then the exchanges contributing to the bid size are NYSE and ARCA.   Similarly, if market&#x3D;2, then only ISLAND is contributing. 
     * @param marketdataSnapshotGetRequestInner Contract. Allowed combinations are [type and symbol and currency], or [type, symbol, exchange, and currency], or [conid]. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Financial Instrument Definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketdataSnapshotGetAsync(List<MarketdataSnapshotGetRequestInner> marketdataSnapshotGetRequestInner, final ApiCallback<List<MarketdataSnapshotGet200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketdataSnapshotGetValidateBeforeCall(marketdataSnapshotGetRequestInner, _callback);
        Type localVarReturnType = new TypeToken<List<MarketdataSnapshotGet200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
