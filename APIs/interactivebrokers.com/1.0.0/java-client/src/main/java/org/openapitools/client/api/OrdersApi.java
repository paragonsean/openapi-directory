/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsAccountOrdersCustomerOrderIdPut200ResponseInner;
import org.openapitools.client.model.AccountsAccountOrdersCustomerOrderIdPutRequest;
import org.openapitools.client.model.AccountsAccountOrdersPostRequest;
import org.openapitools.client.model.OrderState;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsAccountOrdersCustomerOrderIdDelete
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns result of cancellation attempt </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersCustomerOrderIdDeleteCall(String account, String customerOrderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account}/orders/{CustomerOrderId}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "CustomerOrderId" + "}", localVarApiClient.escapeString(customerOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAccountOrdersCustomerOrderIdDeleteValidateBeforeCall(String account, String customerOrderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling accountsAccountOrdersCustomerOrderIdDelete(Async)");
        }

        // verify the required parameter 'customerOrderId' is set
        if (customerOrderId == null) {
            throw new ApiException("Missing the required parameter 'customerOrderId' when calling accountsAccountOrdersCustomerOrderIdDelete(Async)");
        }

        return accountsAccountOrdersCustomerOrderIdDeleteCall(account, customerOrderId, _callback);

    }

    /**
     * Cancel Order
     * Cancels the order with the referenced Customer Order ID for the account passed in the URL.
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @return List&lt;AccountsAccountOrdersCustomerOrderIdPut200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns result of cancellation attempt </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner> accountsAccountOrdersCustomerOrderIdDelete(String account, String customerOrderId) throws ApiException {
        ApiResponse<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>> localVarResp = accountsAccountOrdersCustomerOrderIdDeleteWithHttpInfo(account, customerOrderId);
        return localVarResp.getData();
    }

    /**
     * Cancel Order
     * Cancels the order with the referenced Customer Order ID for the account passed in the URL.
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @return ApiResponse&lt;List&lt;AccountsAccountOrdersCustomerOrderIdPut200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns result of cancellation attempt </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>> accountsAccountOrdersCustomerOrderIdDeleteWithHttpInfo(String account, String customerOrderId) throws ApiException {
        okhttp3.Call localVarCall = accountsAccountOrdersCustomerOrderIdDeleteValidateBeforeCall(account, customerOrderId, null);
        Type localVarReturnType = new TypeToken<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Order (asynchronously)
     * Cancels the order with the referenced Customer Order ID for the account passed in the URL.
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns result of cancellation attempt </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersCustomerOrderIdDeleteAsync(String account, String customerOrderId, final ApiCallback<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAccountOrdersCustomerOrderIdDeleteValidateBeforeCall(account, customerOrderId, _callback);
        Type localVarReturnType = new TypeToken<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsAccountOrdersCustomerOrderIdGet
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns order status information </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersCustomerOrderIdGetCall(String account, String customerOrderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account}/orders/{CustomerOrderId}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "CustomerOrderId" + "}", localVarApiClient.escapeString(customerOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAccountOrdersCustomerOrderIdGetValidateBeforeCall(String account, String customerOrderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling accountsAccountOrdersCustomerOrderIdGet(Async)");
        }

        // verify the required parameter 'customerOrderId' is set
        if (customerOrderId == null) {
            throw new ApiException("Missing the required parameter 'customerOrderId' when calling accountsAccountOrdersCustomerOrderIdGet(Async)");
        }

        return accountsAccountOrdersCustomerOrderIdGetCall(account, customerOrderId, _callback);

    }

    /**
     * Return specific order info
     * Returns the order with the referenced Customer Order ID for the account passed in the URL.
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @return List&lt;OrderState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns order status information </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public List<OrderState> accountsAccountOrdersCustomerOrderIdGet(String account, String customerOrderId) throws ApiException {
        ApiResponse<List<OrderState>> localVarResp = accountsAccountOrdersCustomerOrderIdGetWithHttpInfo(account, customerOrderId);
        return localVarResp.getData();
    }

    /**
     * Return specific order info
     * Returns the order with the referenced Customer Order ID for the account passed in the URL.
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @return ApiResponse&lt;List&lt;OrderState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns order status information </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrderState>> accountsAccountOrdersCustomerOrderIdGetWithHttpInfo(String account, String customerOrderId) throws ApiException {
        okhttp3.Call localVarCall = accountsAccountOrdersCustomerOrderIdGetValidateBeforeCall(account, customerOrderId, null);
        Type localVarReturnType = new TypeToken<List<OrderState>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return specific order info (asynchronously)
     * Returns the order with the referenced Customer Order ID for the account passed in the URL.
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns order status information </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersCustomerOrderIdGetAsync(String account, String customerOrderId, final ApiCallback<List<OrderState>> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAccountOrdersCustomerOrderIdGetValidateBeforeCall(account, customerOrderId, _callback);
        Type localVarReturnType = new TypeToken<List<OrderState>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsAccountOrdersCustomerOrderIdPut
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @param accountsAccountOrdersCustomerOrderIdPutRequest Order Parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of order modification attempt </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersCustomerOrderIdPutCall(String account, String customerOrderId, AccountsAccountOrdersCustomerOrderIdPutRequest accountsAccountOrdersCustomerOrderIdPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsAccountOrdersCustomerOrderIdPutRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account}/orders/{CustomerOrderId}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "CustomerOrderId" + "}", localVarApiClient.escapeString(customerOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAccountOrdersCustomerOrderIdPutValidateBeforeCall(String account, String customerOrderId, AccountsAccountOrdersCustomerOrderIdPutRequest accountsAccountOrdersCustomerOrderIdPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling accountsAccountOrdersCustomerOrderIdPut(Async)");
        }

        // verify the required parameter 'customerOrderId' is set
        if (customerOrderId == null) {
            throw new ApiException("Missing the required parameter 'customerOrderId' when calling accountsAccountOrdersCustomerOrderIdPut(Async)");
        }

        // verify the required parameter 'accountsAccountOrdersCustomerOrderIdPutRequest' is set
        if (accountsAccountOrdersCustomerOrderIdPutRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsAccountOrdersCustomerOrderIdPutRequest' when calling accountsAccountOrdersCustomerOrderIdPut(Async)");
        }

        return accountsAccountOrdersCustomerOrderIdPutCall(account, customerOrderId, accountsAccountOrdersCustomerOrderIdPutRequest, _callback);

    }

    /**
     * Modify Order
     * Allows the caller to modify the order with the referenced Customer Order ID specified in the URL. A separate Customer Order ID must be provided in the request body for the modification.
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @param accountsAccountOrdersCustomerOrderIdPutRequest Order Parameters (required)
     * @return List&lt;AccountsAccountOrdersCustomerOrderIdPut200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of order modification attempt </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner> accountsAccountOrdersCustomerOrderIdPut(String account, String customerOrderId, AccountsAccountOrdersCustomerOrderIdPutRequest accountsAccountOrdersCustomerOrderIdPutRequest) throws ApiException {
        ApiResponse<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>> localVarResp = accountsAccountOrdersCustomerOrderIdPutWithHttpInfo(account, customerOrderId, accountsAccountOrdersCustomerOrderIdPutRequest);
        return localVarResp.getData();
    }

    /**
     * Modify Order
     * Allows the caller to modify the order with the referenced Customer Order ID specified in the URL. A separate Customer Order ID must be provided in the request body for the modification.
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @param accountsAccountOrdersCustomerOrderIdPutRequest Order Parameters (required)
     * @return ApiResponse&lt;List&lt;AccountsAccountOrdersCustomerOrderIdPut200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of order modification attempt </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>> accountsAccountOrdersCustomerOrderIdPutWithHttpInfo(String account, String customerOrderId, AccountsAccountOrdersCustomerOrderIdPutRequest accountsAccountOrdersCustomerOrderIdPutRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsAccountOrdersCustomerOrderIdPutValidateBeforeCall(account, customerOrderId, accountsAccountOrdersCustomerOrderIdPutRequest, null);
        Type localVarReturnType = new TypeToken<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify Order (asynchronously)
     * Allows the caller to modify the order with the referenced Customer Order ID specified in the URL. A separate Customer Order ID must be provided in the request body for the modification.
     * @param account Account Number (required)
     * @param customerOrderId Customer Order ID (required)
     * @param accountsAccountOrdersCustomerOrderIdPutRequest Order Parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of order modification attempt </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersCustomerOrderIdPutAsync(String account, String customerOrderId, AccountsAccountOrdersCustomerOrderIdPutRequest accountsAccountOrdersCustomerOrderIdPutRequest, final ApiCallback<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAccountOrdersCustomerOrderIdPutValidateBeforeCall(account, customerOrderId, accountsAccountOrdersCustomerOrderIdPutRequest, _callback);
        Type localVarReturnType = new TypeToken<List<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsAccountOrdersGet
     * @param account Account Number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of orders for the indicated account </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersGetCall(String account, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account}/orders"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAccountOrdersGetValidateBeforeCall(String account, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling accountsAccountOrdersGet(Async)");
        }

        return accountsAccountOrdersGetCall(account, _callback);

    }

    /**
     * Open Orders
     * Returns a list of orders for the account passed in the URL
     * @param account Account Number (required)
     * @return List&lt;OrderState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of orders for the indicated account </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public List<OrderState> accountsAccountOrdersGet(String account) throws ApiException {
        ApiResponse<List<OrderState>> localVarResp = accountsAccountOrdersGetWithHttpInfo(account);
        return localVarResp.getData();
    }

    /**
     * Open Orders
     * Returns a list of orders for the account passed in the URL
     * @param account Account Number (required)
     * @return ApiResponse&lt;List&lt;OrderState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of orders for the indicated account </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrderState>> accountsAccountOrdersGetWithHttpInfo(String account) throws ApiException {
        okhttp3.Call localVarCall = accountsAccountOrdersGetValidateBeforeCall(account, null);
        Type localVarReturnType = new TypeToken<List<OrderState>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Open Orders (asynchronously)
     * Returns a list of orders for the account passed in the URL
     * @param account Account Number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of orders for the indicated account </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersGetAsync(String account, final ApiCallback<List<OrderState>> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAccountOrdersGetValidateBeforeCall(account, _callback);
        Type localVarReturnType = new TypeToken<List<OrderState>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsAccountOrdersPost
     * @param account Account Number (required)
     * @param accountsAccountOrdersPostRequest Order Parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns order status information </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersPostCall(String account, AccountsAccountOrdersPostRequest accountsAccountOrdersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsAccountOrdersPostRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account}/orders"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAccountOrdersPostValidateBeforeCall(String account, AccountsAccountOrdersPostRequest accountsAccountOrdersPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling accountsAccountOrdersPost(Async)");
        }

        // verify the required parameter 'accountsAccountOrdersPostRequest' is set
        if (accountsAccountOrdersPostRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsAccountOrdersPostRequest' when calling accountsAccountOrdersPost(Async)");
        }

        return accountsAccountOrdersPostCall(account, accountsAccountOrdersPostRequest, _callback);

    }

    /**
     * Place Order
     * Places order
     * @param account Account Number (required)
     * @param accountsAccountOrdersPostRequest Order Parameters (required)
     * @return List&lt;OrderState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns order status information </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public List<OrderState> accountsAccountOrdersPost(String account, AccountsAccountOrdersPostRequest accountsAccountOrdersPostRequest) throws ApiException {
        ApiResponse<List<OrderState>> localVarResp = accountsAccountOrdersPostWithHttpInfo(account, accountsAccountOrdersPostRequest);
        return localVarResp.getData();
    }

    /**
     * Place Order
     * Places order
     * @param account Account Number (required)
     * @param accountsAccountOrdersPostRequest Order Parameters (required)
     * @return ApiResponse&lt;List&lt;OrderState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns order status information </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrderState>> accountsAccountOrdersPostWithHttpInfo(String account, AccountsAccountOrdersPostRequest accountsAccountOrdersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsAccountOrdersPostValidateBeforeCall(account, accountsAccountOrdersPostRequest, null);
        Type localVarReturnType = new TypeToken<List<OrderState>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Place Order (asynchronously)
     * Places order
     * @param account Account Number (required)
     * @param accountsAccountOrdersPostRequest Order Parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns order status information </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountOrdersPostAsync(String account, AccountsAccountOrdersPostRequest accountsAccountOrdersPostRequest, final ApiCallback<List<OrderState>> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAccountOrdersPostValidateBeforeCall(account, accountsAccountOrdersPostRequest, _callback);
        Type localVarReturnType = new TypeToken<List<OrderState>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
