/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MarketdataSnapshotGet200ResponseInnerTrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:32.094088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MarketdataSnapshotGet200ResponseInnerTrade {
  public static final String SERIALIZED_NAME_MARKET = "market";
  @SerializedName(SERIALIZED_NAME_MARKET)
  private BigDecimal market;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private BigDecimal size;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private BigDecimal time;

  public MarketdataSnapshotGet200ResponseInnerTrade() {
  }

  public MarketdataSnapshotGet200ResponseInnerTrade market(BigDecimal market) {
    this.market = market;
    return this;
  }

  /**
   * Get market
   * @return market
   */
  @javax.annotation.Nullable
  public BigDecimal getMarket() {
    return market;
  }

  public void setMarket(BigDecimal market) {
    this.market = market;
  }


  public MarketdataSnapshotGet200ResponseInnerTrade price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public MarketdataSnapshotGet200ResponseInnerTrade size(BigDecimal size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  public MarketdataSnapshotGet200ResponseInnerTrade time(BigDecimal time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public BigDecimal getTime() {
    return time;
  }

  public void setTime(BigDecimal time) {
    this.time = time;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketdataSnapshotGet200ResponseInnerTrade marketdataSnapshotGet200ResponseInnerTrade = (MarketdataSnapshotGet200ResponseInnerTrade) o;
    return Objects.equals(this.market, marketdataSnapshotGet200ResponseInnerTrade.market) &&
        Objects.equals(this.price, marketdataSnapshotGet200ResponseInnerTrade.price) &&
        Objects.equals(this.size, marketdataSnapshotGet200ResponseInnerTrade.size) &&
        Objects.equals(this.time, marketdataSnapshotGet200ResponseInnerTrade.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(market, price, size, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketdataSnapshotGet200ResponseInnerTrade {\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("market");
    openapiFields.add("price");
    openapiFields.add("size");
    openapiFields.add("time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketdataSnapshotGet200ResponseInnerTrade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketdataSnapshotGet200ResponseInnerTrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketdataSnapshotGet200ResponseInnerTrade is not found in the empty JSON string", MarketdataSnapshotGet200ResponseInnerTrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketdataSnapshotGet200ResponseInnerTrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketdataSnapshotGet200ResponseInnerTrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketdataSnapshotGet200ResponseInnerTrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketdataSnapshotGet200ResponseInnerTrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketdataSnapshotGet200ResponseInnerTrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketdataSnapshotGet200ResponseInnerTrade.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketdataSnapshotGet200ResponseInnerTrade>() {
           @Override
           public void write(JsonWriter out, MarketdataSnapshotGet200ResponseInnerTrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketdataSnapshotGet200ResponseInnerTrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketdataSnapshotGet200ResponseInnerTrade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketdataSnapshotGet200ResponseInnerTrade
   * @throws IOException if the JSON string is invalid with respect to MarketdataSnapshotGet200ResponseInnerTrade
   */
  public static MarketdataSnapshotGet200ResponseInnerTrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketdataSnapshotGet200ResponseInnerTrade.class);
  }

  /**
   * Convert an instance of MarketdataSnapshotGet200ResponseInnerTrade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

