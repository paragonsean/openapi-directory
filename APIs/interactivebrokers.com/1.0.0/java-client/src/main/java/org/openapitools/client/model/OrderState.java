/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.OrderStatus;
import org.openapitools.client.model.OrderType;
import org.openapitools.client.model.TimeInForce;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object containing all the properties defining an order
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:32.094088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderState {
  public static final String SERIALIZED_NAME_CONTRACT_ID = "ContractId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private BigDecimal contractId;

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_ID = "CustomerOrderId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_ID)
  private BigDecimal customerOrderId;

  public static final String SERIALIZED_NAME_FILLED_QUANTITY = "FilledQuantity";
  @SerializedName(SERIALIZED_NAME_FILLED_QUANTITY)
  private BigDecimal filledQuantity;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "ListingExchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  private String listingExchange;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "OrderType";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private OrderType orderType;

  public static final String SERIALIZED_NAME_OUTSIDE_R_T_H = "OutsideRTH";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_R_T_H)
  private String outsideRTH;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_REMAINING_QUANTITY = "RemainingQuantity";
  @SerializedName(SERIALIZED_NAME_REMAINING_QUANTITY)
  private BigDecimal remainingQuantity;

  /**
   * Gets or Sets side
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    _1("1"),
    
    _2("2");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "Side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private SideEnum side;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OrderStatus status;

  public static final String SERIALIZED_NAME_TICKER = "Ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  private String ticker;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "TimeInForce";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  private TimeInForce timeInForce;

  public static final String SERIALIZED_NAME_TRANSACTION_TIME = "TransactionTime";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TIME)
  private String transactionTime;

  public static final String SERIALIZED_NAME_WARNING = "Warning";
  @SerializedName(SERIALIZED_NAME_WARNING)
  private String warning;

  public OrderState() {
  }

  public OrderState contractId(BigDecimal contractId) {
    this.contractId = contractId;
    return this;
  }

  /**
   * Get contractId
   * @return contractId
   */
  @javax.annotation.Nullable
  public BigDecimal getContractId() {
    return contractId;
  }

  public void setContractId(BigDecimal contractId) {
    this.contractId = contractId;
  }


  public OrderState customerOrderId(BigDecimal customerOrderId) {
    this.customerOrderId = customerOrderId;
    return this;
  }

  /**
   * Get customerOrderId
   * @return customerOrderId
   */
  @javax.annotation.Nullable
  public BigDecimal getCustomerOrderId() {
    return customerOrderId;
  }

  public void setCustomerOrderId(BigDecimal customerOrderId) {
    this.customerOrderId = customerOrderId;
  }


  public OrderState filledQuantity(BigDecimal filledQuantity) {
    this.filledQuantity = filledQuantity;
    return this;
  }

  /**
   * Get filledQuantity
   * @return filledQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getFilledQuantity() {
    return filledQuantity;
  }

  public void setFilledQuantity(BigDecimal filledQuantity) {
    this.filledQuantity = filledQuantity;
  }


  public OrderState listingExchange(String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * Get listingExchange
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public OrderState orderType(OrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  /**
   * Get orderType
   * @return orderType
   */
  @javax.annotation.Nullable
  public OrderType getOrderType() {
    return orderType;
  }

  public void setOrderType(OrderType orderType) {
    this.orderType = orderType;
  }


  public OrderState outsideRTH(String outsideRTH) {
    this.outsideRTH = outsideRTH;
    return this;
  }

  /**
   * Get outsideRTH
   * @return outsideRTH
   */
  @javax.annotation.Nullable
  public String getOutsideRTH() {
    return outsideRTH;
  }

  public void setOutsideRTH(String outsideRTH) {
    this.outsideRTH = outsideRTH;
  }


  public OrderState price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public OrderState remainingQuantity(BigDecimal remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
    return this;
  }

  /**
   * Get remainingQuantity
   * @return remainingQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getRemainingQuantity() {
    return remainingQuantity;
  }

  public void setRemainingQuantity(BigDecimal remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
  }


  public OrderState side(SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * Get side
   * @return side
   */
  @javax.annotation.Nullable
  public SideEnum getSide() {
    return side;
  }

  public void setSide(SideEnum side) {
    this.side = side;
  }


  public OrderState status(OrderStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public OrderStatus getStatus() {
    return status;
  }

  public void setStatus(OrderStatus status) {
    this.status = status;
  }


  public OrderState ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * Get ticker
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  public OrderState timeInForce(TimeInForce timeInForce) {
    this.timeInForce = timeInForce;
    return this;
  }

  /**
   * Get timeInForce
   * @return timeInForce
   */
  @javax.annotation.Nullable
  public TimeInForce getTimeInForce() {
    return timeInForce;
  }

  public void setTimeInForce(TimeInForce timeInForce) {
    this.timeInForce = timeInForce;
  }


  public OrderState transactionTime(String transactionTime) {
    this.transactionTime = transactionTime;
    return this;
  }

  /**
   * Get transactionTime
   * @return transactionTime
   */
  @javax.annotation.Nullable
  public String getTransactionTime() {
    return transactionTime;
  }

  public void setTransactionTime(String transactionTime) {
    this.transactionTime = transactionTime;
  }


  public OrderState warning(String warning) {
    this.warning = warning;
    return this;
  }

  /**
   * Get warning
   * @return warning
   */
  @javax.annotation.Nullable
  public String getWarning() {
    return warning;
  }

  public void setWarning(String warning) {
    this.warning = warning;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderState orderState = (OrderState) o;
    return Objects.equals(this.contractId, orderState.contractId) &&
        Objects.equals(this.customerOrderId, orderState.customerOrderId) &&
        Objects.equals(this.filledQuantity, orderState.filledQuantity) &&
        Objects.equals(this.listingExchange, orderState.listingExchange) &&
        Objects.equals(this.orderType, orderState.orderType) &&
        Objects.equals(this.outsideRTH, orderState.outsideRTH) &&
        Objects.equals(this.price, orderState.price) &&
        Objects.equals(this.remainingQuantity, orderState.remainingQuantity) &&
        Objects.equals(this.side, orderState.side) &&
        Objects.equals(this.status, orderState.status) &&
        Objects.equals(this.ticker, orderState.ticker) &&
        Objects.equals(this.timeInForce, orderState.timeInForce) &&
        Objects.equals(this.transactionTime, orderState.transactionTime) &&
        Objects.equals(this.warning, orderState.warning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractId, customerOrderId, filledQuantity, listingExchange, orderType, outsideRTH, price, remainingQuantity, side, status, ticker, timeInForce, transactionTime, warning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderState {\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    customerOrderId: ").append(toIndentedString(customerOrderId)).append("\n");
    sb.append("    filledQuantity: ").append(toIndentedString(filledQuantity)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    outsideRTH: ").append(toIndentedString(outsideRTH)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    remainingQuantity: ").append(toIndentedString(remainingQuantity)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
    sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContractId");
    openapiFields.add("CustomerOrderId");
    openapiFields.add("FilledQuantity");
    openapiFields.add("ListingExchange");
    openapiFields.add("OrderType");
    openapiFields.add("OutsideRTH");
    openapiFields.add("Price");
    openapiFields.add("RemainingQuantity");
    openapiFields.add("Side");
    openapiFields.add("Status");
    openapiFields.add("Ticker");
    openapiFields.add("TimeInForce");
    openapiFields.add("TransactionTime");
    openapiFields.add("Warning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderState is not found in the empty JSON string", OrderState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ListingExchange") != null && !jsonObj.get("ListingExchange").isJsonNull()) && !jsonObj.get("ListingExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ListingExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ListingExchange").toString()));
      }
      // validate the optional field `OrderType`
      if (jsonObj.get("OrderType") != null && !jsonObj.get("OrderType").isJsonNull()) {
        OrderType.validateJsonElement(jsonObj.get("OrderType"));
      }
      if ((jsonObj.get("OutsideRTH") != null && !jsonObj.get("OutsideRTH").isJsonNull()) && !jsonObj.get("OutsideRTH").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutsideRTH` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OutsideRTH").toString()));
      }
      if ((jsonObj.get("Side") != null && !jsonObj.get("Side").isJsonNull()) && !jsonObj.get("Side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Side").toString()));
      }
      // validate the optional field `Side`
      if (jsonObj.get("Side") != null && !jsonObj.get("Side").isJsonNull()) {
        SideEnum.validateJsonElement(jsonObj.get("Side"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        OrderStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("Ticker") != null && !jsonObj.get("Ticker").isJsonNull()) && !jsonObj.get("Ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ticker").toString()));
      }
      // validate the optional field `TimeInForce`
      if (jsonObj.get("TimeInForce") != null && !jsonObj.get("TimeInForce").isJsonNull()) {
        TimeInForce.validateJsonElement(jsonObj.get("TimeInForce"));
      }
      if ((jsonObj.get("TransactionTime") != null && !jsonObj.get("TransactionTime").isJsonNull()) && !jsonObj.get("TransactionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionTime").toString()));
      }
      if ((jsonObj.get("Warning") != null && !jsonObj.get("Warning").isJsonNull()) && !jsonObj.get("Warning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Warning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Warning").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderState.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderState>() {
           @Override
           public void write(JsonWriter out, OrderState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderState
   * @throws IOException if the JSON string is invalid with respect to OrderState
   */
  public static OrderState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderState.class);
  }

  /**
   * Convert an instance of OrderState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

