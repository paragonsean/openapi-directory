/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.OrderType;
import org.openapitools.client.model.TimeInForce;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountsAccountOrdersPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:32.094088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountsAccountOrdersPostRequest {
  public static final String SERIALIZED_NAME_AUX_PRICE = "Aux Price";
  @SerializedName(SERIALIZED_NAME_AUX_PRICE)
  private BigDecimal auxPrice;

  public static final String SERIALIZED_NAME_CONTRACT_ID = "ContractId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private BigDecimal contractId;

  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_ID = "CustomerOrderId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_ID)
  private String customerOrderId;

  public static final String SERIALIZED_NAME_GERMAN_HFT_ALGO = "GermanHftAlgo";
  @SerializedName(SERIALIZED_NAME_GERMAN_HFT_ALGO)
  private Boolean germanHftAlgo;

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "InstrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private String instrumentType;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "ListingExchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  private String listingExchange;

  public static final String SERIALIZED_NAME_MIFID2_ALGO = "Mifid2Algo";
  @SerializedName(SERIALIZED_NAME_MIFID2_ALGO)
  private String mifid2Algo;

  public static final String SERIALIZED_NAME_MIFID2_DECISION_MAKER = "Mifid2DecisionMaker";
  @SerializedName(SERIALIZED_NAME_MIFID2_DECISION_MAKER)
  private String mifid2DecisionMaker;

  public static final String SERIALIZED_NAME_MIFID2_EXECUTION_ALGO = "Mifid2ExecutionAlgo";
  @SerializedName(SERIALIZED_NAME_MIFID2_EXECUTION_ALGO)
  private String mifid2ExecutionAlgo;

  public static final String SERIALIZED_NAME_MIFID2_EXECUTION_TRADER = "Mifid2ExecutionTrader";
  @SerializedName(SERIALIZED_NAME_MIFID2_EXECUTION_TRADER)
  private String mifid2ExecutionTrader;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "Order Type";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private OrderType orderType;

  public static final String SERIALIZED_NAME_ORDER_RESTRICTIONS = "OrderRestrictions";
  @SerializedName(SERIALIZED_NAME_ORDER_RESTRICTIONS)
  private BigDecimal orderRestrictions;

  public static final String SERIALIZED_NAME_OUTSIDE_R_T_H = "Outside RTH";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_R_T_H)
  private BigDecimal outsideRTH;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  /**
   * Buy &#x3D; &#39;1&#39;, Sell &#x3D; &#39;2&#39;
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_2(new BigDecimal("2"));

    private BigDecimal value;

    SideEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(BigDecimal value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(new BigDecimal(value));
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(new BigDecimal(value));
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "Side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private SideEnum side;

  public static final String SERIALIZED_NAME_TICKER = "Ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  private String ticker;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "Time in Force";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  private TimeInForce timeInForce;

  public AccountsAccountOrdersPostRequest() {
  }

  public AccountsAccountOrdersPostRequest auxPrice(BigDecimal auxPrice) {
    this.auxPrice = auxPrice;
    return this;
  }

  /**
   * Required Price to support Stop and Stop Limit orders
   * @return auxPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getAuxPrice() {
    return auxPrice;
  }

  public void setAuxPrice(BigDecimal auxPrice) {
    this.auxPrice = auxPrice;
  }


  public AccountsAccountOrdersPostRequest contractId(BigDecimal contractId) {
    this.contractId = contractId;
    return this;
  }

  /**
   * The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)
   * @return contractId
   */
  @javax.annotation.Nullable
  public BigDecimal getContractId() {
    return contractId;
  }

  public void setContractId(BigDecimal contractId) {
    this.contractId = contractId;
  }


  public AccountsAccountOrdersPostRequest currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency in which the FX pair trades (only for InstrumentType&#x3D;CASH)
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AccountsAccountOrdersPostRequest customerOrderId(String customerOrderId) {
    this.customerOrderId = customerOrderId;
    return this;
  }

  /**
   * The order ID assigned by the customer.
   * @return customerOrderId
   */
  @javax.annotation.Nullable
  public String getCustomerOrderId() {
    return customerOrderId;
  }

  public void setCustomerOrderId(String customerOrderId) {
    this.customerOrderId = customerOrderId;
  }


  public AccountsAccountOrdersPostRequest germanHftAlgo(Boolean germanHftAlgo) {
    this.germanHftAlgo = germanHftAlgo;
    return this;
  }

  /**
   * By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected.
   * @return germanHftAlgo
   */
  @javax.annotation.Nullable
  public Boolean getGermanHftAlgo() {
    return germanHftAlgo;
  }

  public void setGermanHftAlgo(Boolean germanHftAlgo) {
    this.germanHftAlgo = germanHftAlgo;
  }


  public AccountsAccountOrdersPostRequest instrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
    return this;
  }

  /**
   * The instrument type of the contract
   * @return instrumentType
   */
  @javax.annotation.Nullable
  public String getInstrumentType() {
    return instrumentType;
  }

  public void setInstrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
  }


  public AccountsAccountOrdersPostRequest listingExchange(String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * The exchange on which the trading product is listed (only for InstrumentType&#x3D;STK)
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public AccountsAccountOrdersPostRequest mifid2Algo(String mifid2Algo) {
    this.mifid2Algo = mifid2Algo;
    return this;
  }

  /**
   * This field permits specification of the user&#39;s preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions
   * @return mifid2Algo
   */
  @javax.annotation.Nullable
  public String getMifid2Algo() {
    return mifid2Algo;
  }

  public void setMifid2Algo(String mifid2Algo) {
    this.mifid2Algo = mifid2Algo;
  }


  public AccountsAccountOrdersPostRequest mifid2DecisionMaker(String mifid2DecisionMaker) {
    this.mifid2DecisionMaker = mifid2DecisionMaker;
    return this;
  }

  /**
   * This field permits specification of the user&#39;s preregistered (via account management) MiFID II short code for decision makers.
   * @return mifid2DecisionMaker
   */
  @javax.annotation.Nullable
  public String getMifid2DecisionMaker() {
    return mifid2DecisionMaker;
  }

  public void setMifid2DecisionMaker(String mifid2DecisionMaker) {
    this.mifid2DecisionMaker = mifid2DecisionMaker;
  }


  public AccountsAccountOrdersPostRequest mifid2ExecutionAlgo(String mifid2ExecutionAlgo) {
    this.mifid2ExecutionAlgo = mifid2ExecutionAlgo;
    return this;
  }

  /**
   * This field permits specification of the user&#39;s preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order.
   * @return mifid2ExecutionAlgo
   */
  @javax.annotation.Nullable
  public String getMifid2ExecutionAlgo() {
    return mifid2ExecutionAlgo;
  }

  public void setMifid2ExecutionAlgo(String mifid2ExecutionAlgo) {
    this.mifid2ExecutionAlgo = mifid2ExecutionAlgo;
  }


  public AccountsAccountOrdersPostRequest mifid2ExecutionTrader(String mifid2ExecutionTrader) {
    this.mifid2ExecutionTrader = mifid2ExecutionTrader;
    return this;
  }

  /**
   * This field permits specification of the user&#39;s preregistered (via account management) MiFID II person responsible for handling/routing of the order
   * @return mifid2ExecutionTrader
   */
  @javax.annotation.Nullable
  public String getMifid2ExecutionTrader() {
    return mifid2ExecutionTrader;
  }

  public void setMifid2ExecutionTrader(String mifid2ExecutionTrader) {
    this.mifid2ExecutionTrader = mifid2ExecutionTrader;
  }


  public AccountsAccountOrdersPostRequest orderType(OrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  /**
   * Get orderType
   * @return orderType
   */
  @javax.annotation.Nullable
  public OrderType getOrderType() {
    return orderType;
  }

  public void setOrderType(OrderType orderType) {
    this.orderType = orderType;
  }


  public AccountsAccountOrdersPostRequest orderRestrictions(BigDecimal orderRestrictions) {
    this.orderRestrictions = orderRestrictions;
    return this;
  }

  /**
   * MultiValueString representing the restrictions associated with an order. If more than one restriction is applicable to an order, this field can contain multiple instructions separated by space.  &#39;1&#39; Program Trade &#39;2&#39; Index Arbitrage  &#39;3&#39; Non-Index Arbitrage 
   * @return orderRestrictions
   */
  @javax.annotation.Nullable
  public BigDecimal getOrderRestrictions() {
    return orderRestrictions;
  }

  public void setOrderRestrictions(BigDecimal orderRestrictions) {
    this.orderRestrictions = orderRestrictions;
  }


  public AccountsAccountOrdersPostRequest outsideRTH(BigDecimal outsideRTH) {
    this.outsideRTH = outsideRTH;
    return this;
  }

  /**
   * Indicates if order is active outside regular trading hours, where defined. 0 &#x3D; no (default), 1 &#x3D; yes
   * @return outsideRTH
   */
  @javax.annotation.Nullable
  public BigDecimal getOutsideRTH() {
    return outsideRTH;
  }

  public void setOutsideRTH(BigDecimal outsideRTH) {
    this.outsideRTH = outsideRTH;
  }


  public AccountsAccountOrdersPostRequest price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * The order price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public AccountsAccountOrdersPostRequest quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The number of units in the order; contracts or shares
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public AccountsAccountOrdersPostRequest side(SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * Buy &#x3D; &#39;1&#39;, Sell &#x3D; &#39;2&#39;
   * @return side
   */
  @javax.annotation.Nullable
  public SideEnum getSide() {
    return side;
  }

  public void setSide(SideEnum side) {
    this.side = side;
  }


  public AccountsAccountOrdersPostRequest ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * The symbol that identifies the trading product
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  public AccountsAccountOrdersPostRequest timeInForce(TimeInForce timeInForce) {
    this.timeInForce = timeInForce;
    return this;
  }

  /**
   * Get timeInForce
   * @return timeInForce
   */
  @javax.annotation.Nullable
  public TimeInForce getTimeInForce() {
    return timeInForce;
  }

  public void setTimeInForce(TimeInForce timeInForce) {
    this.timeInForce = timeInForce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountsAccountOrdersPostRequest accountsAccountOrdersPostRequest = (AccountsAccountOrdersPostRequest) o;
    return Objects.equals(this.auxPrice, accountsAccountOrdersPostRequest.auxPrice) &&
        Objects.equals(this.contractId, accountsAccountOrdersPostRequest.contractId) &&
        Objects.equals(this.currency, accountsAccountOrdersPostRequest.currency) &&
        Objects.equals(this.customerOrderId, accountsAccountOrdersPostRequest.customerOrderId) &&
        Objects.equals(this.germanHftAlgo, accountsAccountOrdersPostRequest.germanHftAlgo) &&
        Objects.equals(this.instrumentType, accountsAccountOrdersPostRequest.instrumentType) &&
        Objects.equals(this.listingExchange, accountsAccountOrdersPostRequest.listingExchange) &&
        Objects.equals(this.mifid2Algo, accountsAccountOrdersPostRequest.mifid2Algo) &&
        Objects.equals(this.mifid2DecisionMaker, accountsAccountOrdersPostRequest.mifid2DecisionMaker) &&
        Objects.equals(this.mifid2ExecutionAlgo, accountsAccountOrdersPostRequest.mifid2ExecutionAlgo) &&
        Objects.equals(this.mifid2ExecutionTrader, accountsAccountOrdersPostRequest.mifid2ExecutionTrader) &&
        Objects.equals(this.orderType, accountsAccountOrdersPostRequest.orderType) &&
        Objects.equals(this.orderRestrictions, accountsAccountOrdersPostRequest.orderRestrictions) &&
        Objects.equals(this.outsideRTH, accountsAccountOrdersPostRequest.outsideRTH) &&
        Objects.equals(this.price, accountsAccountOrdersPostRequest.price) &&
        Objects.equals(this.quantity, accountsAccountOrdersPostRequest.quantity) &&
        Objects.equals(this.side, accountsAccountOrdersPostRequest.side) &&
        Objects.equals(this.ticker, accountsAccountOrdersPostRequest.ticker) &&
        Objects.equals(this.timeInForce, accountsAccountOrdersPostRequest.timeInForce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auxPrice, contractId, currency, customerOrderId, germanHftAlgo, instrumentType, listingExchange, mifid2Algo, mifid2DecisionMaker, mifid2ExecutionAlgo, mifid2ExecutionTrader, orderType, orderRestrictions, outsideRTH, price, quantity, side, ticker, timeInForce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountsAccountOrdersPostRequest {\n");
    sb.append("    auxPrice: ").append(toIndentedString(auxPrice)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customerOrderId: ").append(toIndentedString(customerOrderId)).append("\n");
    sb.append("    germanHftAlgo: ").append(toIndentedString(germanHftAlgo)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    mifid2Algo: ").append(toIndentedString(mifid2Algo)).append("\n");
    sb.append("    mifid2DecisionMaker: ").append(toIndentedString(mifid2DecisionMaker)).append("\n");
    sb.append("    mifid2ExecutionAlgo: ").append(toIndentedString(mifid2ExecutionAlgo)).append("\n");
    sb.append("    mifid2ExecutionTrader: ").append(toIndentedString(mifid2ExecutionTrader)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    orderRestrictions: ").append(toIndentedString(orderRestrictions)).append("\n");
    sb.append("    outsideRTH: ").append(toIndentedString(outsideRTH)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Aux Price");
    openapiFields.add("ContractId");
    openapiFields.add("Currency");
    openapiFields.add("CustomerOrderId");
    openapiFields.add("GermanHftAlgo");
    openapiFields.add("InstrumentType");
    openapiFields.add("ListingExchange");
    openapiFields.add("Mifid2Algo");
    openapiFields.add("Mifid2DecisionMaker");
    openapiFields.add("Mifid2ExecutionAlgo");
    openapiFields.add("Mifid2ExecutionTrader");
    openapiFields.add("Order Type");
    openapiFields.add("OrderRestrictions");
    openapiFields.add("Outside RTH");
    openapiFields.add("Price");
    openapiFields.add("Quantity");
    openapiFields.add("Side");
    openapiFields.add("Ticker");
    openapiFields.add("Time in Force");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountsAccountOrdersPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountsAccountOrdersPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountsAccountOrdersPostRequest is not found in the empty JSON string", AccountsAccountOrdersPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountsAccountOrdersPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountsAccountOrdersPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Currency") != null && !jsonObj.get("Currency").isJsonNull()) && !jsonObj.get("Currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Currency").toString()));
      }
      if ((jsonObj.get("CustomerOrderId") != null && !jsonObj.get("CustomerOrderId").isJsonNull()) && !jsonObj.get("CustomerOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerOrderId").toString()));
      }
      if ((jsonObj.get("InstrumentType") != null && !jsonObj.get("InstrumentType").isJsonNull()) && !jsonObj.get("InstrumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstrumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstrumentType").toString()));
      }
      if ((jsonObj.get("ListingExchange") != null && !jsonObj.get("ListingExchange").isJsonNull()) && !jsonObj.get("ListingExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ListingExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ListingExchange").toString()));
      }
      if ((jsonObj.get("Mifid2Algo") != null && !jsonObj.get("Mifid2Algo").isJsonNull()) && !jsonObj.get("Mifid2Algo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mifid2Algo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Mifid2Algo").toString()));
      }
      if ((jsonObj.get("Mifid2DecisionMaker") != null && !jsonObj.get("Mifid2DecisionMaker").isJsonNull()) && !jsonObj.get("Mifid2DecisionMaker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mifid2DecisionMaker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Mifid2DecisionMaker").toString()));
      }
      if ((jsonObj.get("Mifid2ExecutionAlgo") != null && !jsonObj.get("Mifid2ExecutionAlgo").isJsonNull()) && !jsonObj.get("Mifid2ExecutionAlgo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mifid2ExecutionAlgo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Mifid2ExecutionAlgo").toString()));
      }
      if ((jsonObj.get("Mifid2ExecutionTrader") != null && !jsonObj.get("Mifid2ExecutionTrader").isJsonNull()) && !jsonObj.get("Mifid2ExecutionTrader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mifid2ExecutionTrader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Mifid2ExecutionTrader").toString()));
      }
      // validate the optional field `Order Type`
      if (jsonObj.get("Order Type") != null && !jsonObj.get("Order Type").isJsonNull()) {
        OrderType.validateJsonElement(jsonObj.get("Order Type"));
      }
      // validate the optional field `Side`
      if (jsonObj.get("Side") != null && !jsonObj.get("Side").isJsonNull()) {
        SideEnum.validateJsonElement(jsonObj.get("Side"));
      }
      if ((jsonObj.get("Ticker") != null && !jsonObj.get("Ticker").isJsonNull()) && !jsonObj.get("Ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ticker").toString()));
      }
      // validate the optional field `Time in Force`
      if (jsonObj.get("Time in Force") != null && !jsonObj.get("Time in Force").isJsonNull()) {
        TimeInForce.validateJsonElement(jsonObj.get("Time in Force"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountsAccountOrdersPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountsAccountOrdersPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountsAccountOrdersPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountsAccountOrdersPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountsAccountOrdersPostRequest>() {
           @Override
           public void write(JsonWriter out, AccountsAccountOrdersPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountsAccountOrdersPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountsAccountOrdersPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountsAccountOrdersPostRequest
   * @throws IOException if the JSON string is invalid with respect to AccountsAccountOrdersPostRequest
   */
  public static AccountsAccountOrdersPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountsAccountOrdersPostRequest.class);
  }

  /**
   * Convert an instance of AccountsAccountOrdersPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

