/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.OrderStatus;
import org.openapitools.client.model.OrderType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountsAccountOrdersCustomerOrderIdPut200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:32.094088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountsAccountOrdersCustomerOrderIdPut200ResponseInner {
  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_ID = "CustomerOrderId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_ID)
  private String customerOrderId;

  public static final String SERIALIZED_NAME_ORDER_QTY = "OrderQty";
  @SerializedName(SERIALIZED_NAME_ORDER_QTY)
  private BigDecimal orderQty;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "OrderType";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private OrderType orderType;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  /**
   * Gets or Sets side
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_2(new BigDecimal("2"));

    private BigDecimal value;

    SideEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(BigDecimal value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(new BigDecimal(value));
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(new BigDecimal(value));
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "Side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private SideEnum side;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OrderStatus status;

  public static final String SERIALIZED_NAME_SYMBOL = "Symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private BigDecimal symbol;

  public static final String SERIALIZED_NAME_WARNING = "Warning";
  @SerializedName(SERIALIZED_NAME_WARNING)
  private String warning;

  public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner() {
  }

  public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner customerOrderId(String customerOrderId) {
    this.customerOrderId = customerOrderId;
    return this;
  }

  /**
   * Get customerOrderId
   * @return customerOrderId
   */
  @javax.annotation.Nullable
  public String getCustomerOrderId() {
    return customerOrderId;
  }

  public void setCustomerOrderId(String customerOrderId) {
    this.customerOrderId = customerOrderId;
  }


  public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner orderQty(BigDecimal orderQty) {
    this.orderQty = orderQty;
    return this;
  }

  /**
   * Get orderQty
   * @return orderQty
   */
  @javax.annotation.Nullable
  public BigDecimal getOrderQty() {
    return orderQty;
  }

  public void setOrderQty(BigDecimal orderQty) {
    this.orderQty = orderQty;
  }


  public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner orderType(OrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  /**
   * Get orderType
   * @return orderType
   */
  @javax.annotation.Nullable
  public OrderType getOrderType() {
    return orderType;
  }

  public void setOrderType(OrderType orderType) {
    this.orderType = orderType;
  }


  public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner price(String price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner side(SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * Get side
   * @return side
   */
  @javax.annotation.Nullable
  public SideEnum getSide() {
    return side;
  }

  public void setSide(SideEnum side) {
    this.side = side;
  }


  public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner status(OrderStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public OrderStatus getStatus() {
    return status;
  }

  public void setStatus(OrderStatus status) {
    this.status = status;
  }


  public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner symbol(BigDecimal symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public BigDecimal getSymbol() {
    return symbol;
  }

  public void setSymbol(BigDecimal symbol) {
    this.symbol = symbol;
  }


  public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner warning(String warning) {
    this.warning = warning;
    return this;
  }

  /**
   * Get warning
   * @return warning
   */
  @javax.annotation.Nullable
  public String getWarning() {
    return warning;
  }

  public void setWarning(String warning) {
    this.warning = warning;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountsAccountOrdersCustomerOrderIdPut200ResponseInner accountsAccountOrdersCustomerOrderIdPut200ResponseInner = (AccountsAccountOrdersCustomerOrderIdPut200ResponseInner) o;
    return Objects.equals(this.customerOrderId, accountsAccountOrdersCustomerOrderIdPut200ResponseInner.customerOrderId) &&
        Objects.equals(this.orderQty, accountsAccountOrdersCustomerOrderIdPut200ResponseInner.orderQty) &&
        Objects.equals(this.orderType, accountsAccountOrdersCustomerOrderIdPut200ResponseInner.orderType) &&
        Objects.equals(this.price, accountsAccountOrdersCustomerOrderIdPut200ResponseInner.price) &&
        Objects.equals(this.side, accountsAccountOrdersCustomerOrderIdPut200ResponseInner.side) &&
        Objects.equals(this.status, accountsAccountOrdersCustomerOrderIdPut200ResponseInner.status) &&
        Objects.equals(this.symbol, accountsAccountOrdersCustomerOrderIdPut200ResponseInner.symbol) &&
        Objects.equals(this.warning, accountsAccountOrdersCustomerOrderIdPut200ResponseInner.warning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerOrderId, orderQty, orderType, price, side, status, symbol, warning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountsAccountOrdersCustomerOrderIdPut200ResponseInner {\n");
    sb.append("    customerOrderId: ").append(toIndentedString(customerOrderId)).append("\n");
    sb.append("    orderQty: ").append(toIndentedString(orderQty)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CustomerOrderId");
    openapiFields.add("OrderQty");
    openapiFields.add("OrderType");
    openapiFields.add("Price");
    openapiFields.add("Side");
    openapiFields.add("Status");
    openapiFields.add("Symbol");
    openapiFields.add("Warning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountsAccountOrdersCustomerOrderIdPut200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountsAccountOrdersCustomerOrderIdPut200ResponseInner is not found in the empty JSON string", AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountsAccountOrdersCustomerOrderIdPut200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CustomerOrderId") != null && !jsonObj.get("CustomerOrderId").isJsonNull()) && !jsonObj.get("CustomerOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerOrderId").toString()));
      }
      // validate the optional field `OrderType`
      if (jsonObj.get("OrderType") != null && !jsonObj.get("OrderType").isJsonNull()) {
        OrderType.validateJsonElement(jsonObj.get("OrderType"));
      }
      if ((jsonObj.get("Price") != null && !jsonObj.get("Price").isJsonNull()) && !jsonObj.get("Price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Price").toString()));
      }
      // validate the optional field `Side`
      if (jsonObj.get("Side") != null && !jsonObj.get("Side").isJsonNull()) {
        SideEnum.validateJsonElement(jsonObj.get("Side"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        OrderStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("Warning") != null && !jsonObj.get("Warning").isJsonNull()) && !jsonObj.get("Warning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Warning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Warning").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountsAccountOrdersCustomerOrderIdPut200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>() {
           @Override
           public void write(JsonWriter out, AccountsAccountOrdersCustomerOrderIdPut200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountsAccountOrdersCustomerOrderIdPut200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountsAccountOrdersCustomerOrderIdPut200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountsAccountOrdersCustomerOrderIdPut200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to AccountsAccountOrdersCustomerOrderIdPut200ResponseInner
   */
  public static AccountsAccountOrdersCustomerOrderIdPut200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountsAccountOrdersCustomerOrderIdPut200ResponseInner.class);
  }

  /**
   * Convert an instance of AccountsAccountOrdersCustomerOrderIdPut200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

