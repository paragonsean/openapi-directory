/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OauthAccessTokenPost200Response;
import org.openapitools.client.model.OauthAccessTokenPostRequest;
import org.openapitools.client.model.OauthLiveSessionTokenPost200Response;
import org.openapitools.client.model.OauthLiveSessionTokenPostRequest;
import org.openapitools.client.model.OauthRequestTokenPost200Response;
import org.openapitools.client.model.OauthRequestTokenPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OAuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OAuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OAuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for oauthAccessTokenPost
     * @param oauthAccessTokenPostRequest OAuth Parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access token and token secret </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthAccessTokenPostCall(OauthAccessTokenPostRequest oauthAccessTokenPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauthAccessTokenPostRequest;

        // create path and map variables
        String localVarPath = "/oauth/access_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthAccessTokenPostValidateBeforeCall(OauthAccessTokenPostRequest oauthAccessTokenPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oauthAccessTokenPostRequest' is set
        if (oauthAccessTokenPostRequest == null) {
            throw new ApiException("Missing the required parameter 'oauthAccessTokenPostRequest' when calling oauthAccessTokenPost(Async)");
        }

        return oauthAccessTokenPostCall(oauthAccessTokenPostRequest, _callback);

    }

    /**
     * Obtain a access token
     * Obtain an access token using the request token and the verification code you received after the user provided authorization. See section 6.3 of the OAuth v1.0a specification for more details.  
     * @param oauthAccessTokenPostRequest OAuth Parameters (required)
     * @return OauthAccessTokenPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access token and token secret </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public OauthAccessTokenPost200Response oauthAccessTokenPost(OauthAccessTokenPostRequest oauthAccessTokenPostRequest) throws ApiException {
        ApiResponse<OauthAccessTokenPost200Response> localVarResp = oauthAccessTokenPostWithHttpInfo(oauthAccessTokenPostRequest);
        return localVarResp.getData();
    }

    /**
     * Obtain a access token
     * Obtain an access token using the request token and the verification code you received after the user provided authorization. See section 6.3 of the OAuth v1.0a specification for more details.  
     * @param oauthAccessTokenPostRequest OAuth Parameters (required)
     * @return ApiResponse&lt;OauthAccessTokenPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access token and token secret </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OauthAccessTokenPost200Response> oauthAccessTokenPostWithHttpInfo(OauthAccessTokenPostRequest oauthAccessTokenPostRequest) throws ApiException {
        okhttp3.Call localVarCall = oauthAccessTokenPostValidateBeforeCall(oauthAccessTokenPostRequest, null);
        Type localVarReturnType = new TypeToken<OauthAccessTokenPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain a access token (asynchronously)
     * Obtain an access token using the request token and the verification code you received after the user provided authorization. See section 6.3 of the OAuth v1.0a specification for more details.  
     * @param oauthAccessTokenPostRequest OAuth Parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access token and token secret </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthAccessTokenPostAsync(OauthAccessTokenPostRequest oauthAccessTokenPostRequest, final ApiCallback<OauthAccessTokenPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthAccessTokenPostValidateBeforeCall(oauthAccessTokenPostRequest, _callback);
        Type localVarReturnType = new TypeToken<OauthAccessTokenPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthLiveSessionTokenPost
     * @param oauthLiveSessionTokenPostRequest OAuth Parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DH response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthLiveSessionTokenPostCall(OauthLiveSessionTokenPostRequest oauthLiveSessionTokenPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauthLiveSessionTokenPostRequest;

        // create path and map variables
        String localVarPath = "/oauth/live_session_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthLiveSessionTokenPostValidateBeforeCall(OauthLiveSessionTokenPostRequest oauthLiveSessionTokenPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oauthLiveSessionTokenPostRequest' is set
        if (oauthLiveSessionTokenPostRequest == null) {
            throw new ApiException("Missing the required parameter 'oauthLiveSessionTokenPostRequest' when calling oauthLiveSessionTokenPost(Async)");
        }

        return oauthLiveSessionTokenPostCall(oauthLiveSessionTokenPostRequest, _callback);

    }

    /**
     * Obtain a live session token
     * In order to access protected IB resources, a live session token is required. This endpoint allows consumers to obtain a live session token to access these resources using an OAuth access token and the Diffie-Hellman prime and generator supplied during the registration process. Note this is an additional IB-specific step, and not part of the OAuth v1.0a specification. Please refer to the \&quot;OAuth at Interactive Brokers\&quot; document for more details.  https://www.interactivebrokers.com/webtradingapi/oauth.pdf 
     * @param oauthLiveSessionTokenPostRequest OAuth Parameters (required)
     * @return OauthLiveSessionTokenPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DH response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public OauthLiveSessionTokenPost200Response oauthLiveSessionTokenPost(OauthLiveSessionTokenPostRequest oauthLiveSessionTokenPostRequest) throws ApiException {
        ApiResponse<OauthLiveSessionTokenPost200Response> localVarResp = oauthLiveSessionTokenPostWithHttpInfo(oauthLiveSessionTokenPostRequest);
        return localVarResp.getData();
    }

    /**
     * Obtain a live session token
     * In order to access protected IB resources, a live session token is required. This endpoint allows consumers to obtain a live session token to access these resources using an OAuth access token and the Diffie-Hellman prime and generator supplied during the registration process. Note this is an additional IB-specific step, and not part of the OAuth v1.0a specification. Please refer to the \&quot;OAuth at Interactive Brokers\&quot; document for more details.  https://www.interactivebrokers.com/webtradingapi/oauth.pdf 
     * @param oauthLiveSessionTokenPostRequest OAuth Parameters (required)
     * @return ApiResponse&lt;OauthLiveSessionTokenPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DH response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OauthLiveSessionTokenPost200Response> oauthLiveSessionTokenPostWithHttpInfo(OauthLiveSessionTokenPostRequest oauthLiveSessionTokenPostRequest) throws ApiException {
        okhttp3.Call localVarCall = oauthLiveSessionTokenPostValidateBeforeCall(oauthLiveSessionTokenPostRequest, null);
        Type localVarReturnType = new TypeToken<OauthLiveSessionTokenPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain a live session token (asynchronously)
     * In order to access protected IB resources, a live session token is required. This endpoint allows consumers to obtain a live session token to access these resources using an OAuth access token and the Diffie-Hellman prime and generator supplied during the registration process. Note this is an additional IB-specific step, and not part of the OAuth v1.0a specification. Please refer to the \&quot;OAuth at Interactive Brokers\&quot; document for more details.  https://www.interactivebrokers.com/webtradingapi/oauth.pdf 
     * @param oauthLiveSessionTokenPostRequest OAuth Parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DH response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthLiveSessionTokenPostAsync(OauthLiveSessionTokenPostRequest oauthLiveSessionTokenPostRequest, final ApiCallback<OauthLiveSessionTokenPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthLiveSessionTokenPostValidateBeforeCall(oauthLiveSessionTokenPostRequest, _callback);
        Type localVarReturnType = new TypeToken<OauthLiveSessionTokenPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthRequestTokenPost
     * @param oauthRequestTokenPostRequest OAuth Parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth token </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthRequestTokenPostCall(OauthRequestTokenPostRequest oauthRequestTokenPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauthRequestTokenPostRequest;

        // create path and map variables
        String localVarPath = "/oauth/request_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthRequestTokenPostValidateBeforeCall(OauthRequestTokenPostRequest oauthRequestTokenPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oauthRequestTokenPostRequest' is set
        if (oauthRequestTokenPostRequest == null) {
            throw new ApiException("Missing the required parameter 'oauthRequestTokenPostRequest' when calling oauthRequestTokenPost(Async)");
        }

        return oauthRequestTokenPostCall(oauthRequestTokenPostRequest, _callback);

    }

    /**
     * Obtain a request token
     * Obtain a request token. See section 6.1 of the OAuth v1.0a specification for more information. http://oauth.net/core/1.0a/#auth_step1  Note we do not return an oauth_token_secret in the response as we are using RSA signatures rather than PLAINTEXT authentication.  
     * @param oauthRequestTokenPostRequest OAuth Parameters (required)
     * @return OauthRequestTokenPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth token </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public OauthRequestTokenPost200Response oauthRequestTokenPost(OauthRequestTokenPostRequest oauthRequestTokenPostRequest) throws ApiException {
        ApiResponse<OauthRequestTokenPost200Response> localVarResp = oauthRequestTokenPostWithHttpInfo(oauthRequestTokenPostRequest);
        return localVarResp.getData();
    }

    /**
     * Obtain a request token
     * Obtain a request token. See section 6.1 of the OAuth v1.0a specification for more information. http://oauth.net/core/1.0a/#auth_step1  Note we do not return an oauth_token_secret in the response as we are using RSA signatures rather than PLAINTEXT authentication.  
     * @param oauthRequestTokenPostRequest OAuth Parameters (required)
     * @return ApiResponse&lt;OauthRequestTokenPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth token </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OauthRequestTokenPost200Response> oauthRequestTokenPostWithHttpInfo(OauthRequestTokenPostRequest oauthRequestTokenPostRequest) throws ApiException {
        okhttp3.Call localVarCall = oauthRequestTokenPostValidateBeforeCall(oauthRequestTokenPostRequest, null);
        Type localVarReturnType = new TypeToken<OauthRequestTokenPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain a request token (asynchronously)
     * Obtain a request token. See section 6.1 of the OAuth v1.0a specification for more information. http://oauth.net/core/1.0a/#auth_step1  Note we do not return an oauth_token_secret in the response as we are using RSA signatures rather than PLAINTEXT authentication.  
     * @param oauthRequestTokenPostRequest OAuth Parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth token </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Unsuccessfull response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthRequestTokenPostAsync(OauthRequestTokenPostRequest oauthRequestTokenPostRequest, final ApiCallback<OauthRequestTokenPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthRequestTokenPostValidateBeforeCall(oauthRequestTokenPostRequest, _callback);
        Type localVarReturnType = new TypeToken<OauthRequestTokenPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
