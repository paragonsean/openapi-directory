/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MarketdataExchangeComponentsGet200ResponseInnerMappingInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MarketdataExchangeComponentsGet200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:32.094088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MarketdataExchangeComponentsGet200ResponseInner {
  public static final String SERIALIZED_NAME_COMPLETE = "Complete";
  @SerializedName(SERIALIZED_NAME_COMPLETE)
  private Boolean complete;

  public static final String SERIALIZED_NAME_CON_ID = "ConId";
  @SerializedName(SERIALIZED_NAME_CON_ID)
  private BigDecimal conId;

  public static final String SERIALIZED_NAME_MAPPING = "mapping";
  @SerializedName(SERIALIZED_NAME_MAPPING)
  private List<MarketdataExchangeComponentsGet200ResponseInnerMappingInner> mapping = new ArrayList<>();

  public MarketdataExchangeComponentsGet200ResponseInner() {
  }

  public MarketdataExchangeComponentsGet200ResponseInner complete(Boolean complete) {
    this.complete = complete;
    return this;
  }

  /**
   * Get complete
   * @return complete
   */
  @javax.annotation.Nullable
  public Boolean getComplete() {
    return complete;
  }

  public void setComplete(Boolean complete) {
    this.complete = complete;
  }


  public MarketdataExchangeComponentsGet200ResponseInner conId(BigDecimal conId) {
    this.conId = conId;
    return this;
  }

  /**
   * Get conId
   * @return conId
   */
  @javax.annotation.Nullable
  public BigDecimal getConId() {
    return conId;
  }

  public void setConId(BigDecimal conId) {
    this.conId = conId;
  }


  public MarketdataExchangeComponentsGet200ResponseInner mapping(List<MarketdataExchangeComponentsGet200ResponseInnerMappingInner> mapping) {
    this.mapping = mapping;
    return this;
  }

  public MarketdataExchangeComponentsGet200ResponseInner addMappingItem(MarketdataExchangeComponentsGet200ResponseInnerMappingInner mappingItem) {
    if (this.mapping == null) {
      this.mapping = new ArrayList<>();
    }
    this.mapping.add(mappingItem);
    return this;
  }

  /**
   * Get mapping
   * @return mapping
   */
  @javax.annotation.Nullable
  public List<MarketdataExchangeComponentsGet200ResponseInnerMappingInner> getMapping() {
    return mapping;
  }

  public void setMapping(List<MarketdataExchangeComponentsGet200ResponseInnerMappingInner> mapping) {
    this.mapping = mapping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketdataExchangeComponentsGet200ResponseInner marketdataExchangeComponentsGet200ResponseInner = (MarketdataExchangeComponentsGet200ResponseInner) o;
    return Objects.equals(this.complete, marketdataExchangeComponentsGet200ResponseInner.complete) &&
        Objects.equals(this.conId, marketdataExchangeComponentsGet200ResponseInner.conId) &&
        Objects.equals(this.mapping, marketdataExchangeComponentsGet200ResponseInner.mapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complete, conId, mapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketdataExchangeComponentsGet200ResponseInner {\n");
    sb.append("    complete: ").append(toIndentedString(complete)).append("\n");
    sb.append("    conId: ").append(toIndentedString(conId)).append("\n");
    sb.append("    mapping: ").append(toIndentedString(mapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Complete");
    openapiFields.add("ConId");
    openapiFields.add("mapping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketdataExchangeComponentsGet200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketdataExchangeComponentsGet200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketdataExchangeComponentsGet200ResponseInner is not found in the empty JSON string", MarketdataExchangeComponentsGet200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketdataExchangeComponentsGet200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketdataExchangeComponentsGet200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("mapping") != null && !jsonObj.get("mapping").isJsonNull()) {
        JsonArray jsonArraymapping = jsonObj.getAsJsonArray("mapping");
        if (jsonArraymapping != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mapping").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mapping` to be an array in the JSON string but got `%s`", jsonObj.get("mapping").toString()));
          }

          // validate the optional field `mapping` (array)
          for (int i = 0; i < jsonArraymapping.size(); i++) {
            MarketdataExchangeComponentsGet200ResponseInnerMappingInner.validateJsonElement(jsonArraymapping.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketdataExchangeComponentsGet200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketdataExchangeComponentsGet200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketdataExchangeComponentsGet200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketdataExchangeComponentsGet200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketdataExchangeComponentsGet200ResponseInner>() {
           @Override
           public void write(JsonWriter out, MarketdataExchangeComponentsGet200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketdataExchangeComponentsGet200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketdataExchangeComponentsGet200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketdataExchangeComponentsGet200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to MarketdataExchangeComponentsGet200ResponseInner
   */
  public static MarketdataExchangeComponentsGet200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketdataExchangeComponentsGet200ResponseInner.class);
  }

  /**
   * Convert an instance of MarketdataExchangeComponentsGet200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

