/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OauthAccessTokenPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:32.094088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OauthAccessTokenPostRequest {
  public static final String SERIALIZED_NAME_OAUTH_CONSUMER_KEY = "oauth_consumer_key";
  @SerializedName(SERIALIZED_NAME_OAUTH_CONSUMER_KEY)
  private String oauthConsumerKey;

  public static final String SERIALIZED_NAME_OAUTH_NONCE = "oauth_nonce";
  @SerializedName(SERIALIZED_NAME_OAUTH_NONCE)
  private String oauthNonce;

  public static final String SERIALIZED_NAME_OAUTH_SIGNATURE = "oauth_signature";
  @SerializedName(SERIALIZED_NAME_OAUTH_SIGNATURE)
  private String oauthSignature;

  public static final String SERIALIZED_NAME_OAUTH_SIGNATURE_METHOD = "oauth_signature_method";
  @SerializedName(SERIALIZED_NAME_OAUTH_SIGNATURE_METHOD)
  private String oauthSignatureMethod;

  public static final String SERIALIZED_NAME_OAUTH_TIMESTAMP = "oauth_timestamp";
  @SerializedName(SERIALIZED_NAME_OAUTH_TIMESTAMP)
  private String oauthTimestamp;

  public static final String SERIALIZED_NAME_OAUTH_TOKEN = "oauth_token";
  @SerializedName(SERIALIZED_NAME_OAUTH_TOKEN)
  private String oauthToken;

  public static final String SERIALIZED_NAME_OAUTH_VERIFIER = "oauth_verifier";
  @SerializedName(SERIALIZED_NAME_OAUTH_VERIFIER)
  private String oauthVerifier;

  public OauthAccessTokenPostRequest() {
  }

  public OauthAccessTokenPostRequest oauthConsumerKey(String oauthConsumerKey) {
    this.oauthConsumerKey = oauthConsumerKey;
    return this;
  }

  /**
   * The 25-character hexadecimal string that was obtained from Interactive Brokers during the OAuth consumer registration process.
   * @return oauthConsumerKey
   */
  @javax.annotation.Nullable
  public String getOauthConsumerKey() {
    return oauthConsumerKey;
  }

  public void setOauthConsumerKey(String oauthConsumerKey) {
    this.oauthConsumerKey = oauthConsumerKey;
  }


  public OauthAccessTokenPostRequest oauthNonce(String oauthNonce) {
    this.oauthNonce = oauthNonce;
    return this;
  }

  /**
   * A random string uniquely generated for each request.
   * @return oauthNonce
   */
  @javax.annotation.Nullable
  public String getOauthNonce() {
    return oauthNonce;
  }

  public void setOauthNonce(String oauthNonce) {
    this.oauthNonce = oauthNonce;
  }


  public OauthAccessTokenPostRequest oauthSignature(String oauthSignature) {
    this.oauthSignature = oauthSignature;
    return this;
  }

  /**
   * The signature for the request generated using the method specified in the oauth_signature_method parameter. See section 9 of the OAuth v1.0a specification for more details on signing requests.
   * @return oauthSignature
   */
  @javax.annotation.Nullable
  public String getOauthSignature() {
    return oauthSignature;
  }

  public void setOauthSignature(String oauthSignature) {
    this.oauthSignature = oauthSignature;
  }


  public OauthAccessTokenPostRequest oauthSignatureMethod(String oauthSignatureMethod) {
    this.oauthSignatureMethod = oauthSignatureMethod;
    return this;
  }

  /**
   * The signature method used to sign the request. Currently only &#39;RSA-SHA256&#39; is supported.
   * @return oauthSignatureMethod
   */
  @javax.annotation.Nullable
  public String getOauthSignatureMethod() {
    return oauthSignatureMethod;
  }

  public void setOauthSignatureMethod(String oauthSignatureMethod) {
    this.oauthSignatureMethod = oauthSignatureMethod;
  }


  public OauthAccessTokenPostRequest oauthTimestamp(String oauthTimestamp) {
    this.oauthTimestamp = oauthTimestamp;
    return this;
  }

  /**
   * Timestamp expressed in seconds since 1/1/1970 00:00:00 GMT. Must be a positive integer and greater than or equal to any timestamp used in previous requests.
   * @return oauthTimestamp
   */
  @javax.annotation.Nullable
  public String getOauthTimestamp() {
    return oauthTimestamp;
  }

  public void setOauthTimestamp(String oauthTimestamp) {
    this.oauthTimestamp = oauthTimestamp;
  }


  public OauthAccessTokenPostRequest oauthToken(String oauthToken) {
    this.oauthToken = oauthToken;
    return this;
  }

  /**
   * The request token obtained from IB via /request_token.
   * @return oauthToken
   */
  @javax.annotation.Nullable
  public String getOauthToken() {
    return oauthToken;
  }

  public void setOauthToken(String oauthToken) {
    this.oauthToken = oauthToken;
  }


  public OauthAccessTokenPostRequest oauthVerifier(String oauthVerifier) {
    this.oauthVerifier = oauthVerifier;
    return this;
  }

  /**
   * The verification code received from IB after the user has granted authorization.
   * @return oauthVerifier
   */
  @javax.annotation.Nullable
  public String getOauthVerifier() {
    return oauthVerifier;
  }

  public void setOauthVerifier(String oauthVerifier) {
    this.oauthVerifier = oauthVerifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OauthAccessTokenPostRequest oauthAccessTokenPostRequest = (OauthAccessTokenPostRequest) o;
    return Objects.equals(this.oauthConsumerKey, oauthAccessTokenPostRequest.oauthConsumerKey) &&
        Objects.equals(this.oauthNonce, oauthAccessTokenPostRequest.oauthNonce) &&
        Objects.equals(this.oauthSignature, oauthAccessTokenPostRequest.oauthSignature) &&
        Objects.equals(this.oauthSignatureMethod, oauthAccessTokenPostRequest.oauthSignatureMethod) &&
        Objects.equals(this.oauthTimestamp, oauthAccessTokenPostRequest.oauthTimestamp) &&
        Objects.equals(this.oauthToken, oauthAccessTokenPostRequest.oauthToken) &&
        Objects.equals(this.oauthVerifier, oauthAccessTokenPostRequest.oauthVerifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oauthConsumerKey, oauthNonce, oauthSignature, oauthSignatureMethod, oauthTimestamp, oauthToken, oauthVerifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OauthAccessTokenPostRequest {\n");
    sb.append("    oauthConsumerKey: ").append(toIndentedString(oauthConsumerKey)).append("\n");
    sb.append("    oauthNonce: ").append(toIndentedString(oauthNonce)).append("\n");
    sb.append("    oauthSignature: ").append(toIndentedString(oauthSignature)).append("\n");
    sb.append("    oauthSignatureMethod: ").append(toIndentedString(oauthSignatureMethod)).append("\n");
    sb.append("    oauthTimestamp: ").append(toIndentedString(oauthTimestamp)).append("\n");
    sb.append("    oauthToken: ").append(toIndentedString(oauthToken)).append("\n");
    sb.append("    oauthVerifier: ").append(toIndentedString(oauthVerifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oauth_consumer_key");
    openapiFields.add("oauth_nonce");
    openapiFields.add("oauth_signature");
    openapiFields.add("oauth_signature_method");
    openapiFields.add("oauth_timestamp");
    openapiFields.add("oauth_token");
    openapiFields.add("oauth_verifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OauthAccessTokenPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OauthAccessTokenPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OauthAccessTokenPostRequest is not found in the empty JSON string", OauthAccessTokenPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OauthAccessTokenPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OauthAccessTokenPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("oauth_consumer_key") != null && !jsonObj.get("oauth_consumer_key").isJsonNull()) && !jsonObj.get("oauth_consumer_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth_consumer_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth_consumer_key").toString()));
      }
      if ((jsonObj.get("oauth_nonce") != null && !jsonObj.get("oauth_nonce").isJsonNull()) && !jsonObj.get("oauth_nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth_nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth_nonce").toString()));
      }
      if ((jsonObj.get("oauth_signature") != null && !jsonObj.get("oauth_signature").isJsonNull()) && !jsonObj.get("oauth_signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth_signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth_signature").toString()));
      }
      if ((jsonObj.get("oauth_signature_method") != null && !jsonObj.get("oauth_signature_method").isJsonNull()) && !jsonObj.get("oauth_signature_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth_signature_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth_signature_method").toString()));
      }
      if ((jsonObj.get("oauth_timestamp") != null && !jsonObj.get("oauth_timestamp").isJsonNull()) && !jsonObj.get("oauth_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth_timestamp").toString()));
      }
      if ((jsonObj.get("oauth_token") != null && !jsonObj.get("oauth_token").isJsonNull()) && !jsonObj.get("oauth_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth_token").toString()));
      }
      if ((jsonObj.get("oauth_verifier") != null && !jsonObj.get("oauth_verifier").isJsonNull()) && !jsonObj.get("oauth_verifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth_verifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth_verifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OauthAccessTokenPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OauthAccessTokenPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OauthAccessTokenPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OauthAccessTokenPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OauthAccessTokenPostRequest>() {
           @Override
           public void write(JsonWriter out, OauthAccessTokenPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OauthAccessTokenPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OauthAccessTokenPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OauthAccessTokenPostRequest
   * @throws IOException if the JSON string is invalid with respect to OauthAccessTokenPostRequest
   */
  public static OauthAccessTokenPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OauthAccessTokenPostRequest.class);
  }

  /**
   * Convert an instance of OauthAccessTokenPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

