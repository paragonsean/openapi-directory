/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.OrderType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountsAccountTradesGet200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:32.094088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountsAccountTradesGet200ResponseInner {
  public static final String SERIALIZED_NAME_AVG_PRICE = "AvgPrice";
  @SerializedName(SERIALIZED_NAME_AVG_PRICE)
  private BigDecimal avgPrice;

  public static final String SERIALIZED_NAME_COMMISSION = "Commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  private BigDecimal commission;

  public static final String SERIALIZED_NAME_COMMISSION_CURRENCY = "CommissionCurrency";
  @SerializedName(SERIALIZED_NAME_COMMISSION_CURRENCY)
  private String commissionCurrency;

  public static final String SERIALIZED_NAME_CONTRACT_ID = "ContractId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private BigDecimal contractId;

  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_ID = "CustomerOrderId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_ID)
  private BigDecimal customerOrderId;

  public static final String SERIALIZED_NAME_EXEC_ID = "ExecId";
  @SerializedName(SERIALIZED_NAME_EXEC_ID)
  private String execId;

  public static final String SERIALIZED_NAME_EXECUTION_TIME = "ExecutionTime";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIME)
  private String executionTime;

  public static final String SERIALIZED_NAME_FILLED_QUANTITY = "FilledQuantity";
  @SerializedName(SERIALIZED_NAME_FILLED_QUANTITY)
  private BigDecimal filledQuantity;

  public static final String SERIALIZED_NAME_LAST_MARKET = "LastMarket";
  @SerializedName(SERIALIZED_NAME_LAST_MARKET)
  private String lastMarket;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "ListingExchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  private String listingExchange;

  public static final String SERIALIZED_NAME_ORDER_ID = "OrderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "OrderType";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private OrderType orderType;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_REMAINING_QUANTITY = "RemainingQuantity";
  @SerializedName(SERIALIZED_NAME_REMAINING_QUANTITY)
  private BigDecimal remainingQuantity;

  /**
   * Gets or Sets side
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    _1("1"),
    
    _2("2");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "Side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private SideEnum side;

  public static final String SERIALIZED_NAME_TICKER = "Ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  private String ticker;

  public static final String SERIALIZED_NAME_TRADE_PRICE = "TradePrice";
  @SerializedName(SERIALIZED_NAME_TRADE_PRICE)
  private BigDecimal tradePrice;

  public static final String SERIALIZED_NAME_TRADE_SIZE = "TradeSize";
  @SerializedName(SERIALIZED_NAME_TRADE_SIZE)
  private BigDecimal tradeSize;

  public AccountsAccountTradesGet200ResponseInner() {
  }

  public AccountsAccountTradesGet200ResponseInner avgPrice(BigDecimal avgPrice) {
    this.avgPrice = avgPrice;
    return this;
  }

  /**
   * Get avgPrice
   * @return avgPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getAvgPrice() {
    return avgPrice;
  }

  public void setAvgPrice(BigDecimal avgPrice) {
    this.avgPrice = avgPrice;
  }


  public AccountsAccountTradesGet200ResponseInner commission(BigDecimal commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Get commission
   * @return commission
   */
  @javax.annotation.Nullable
  public BigDecimal getCommission() {
    return commission;
  }

  public void setCommission(BigDecimal commission) {
    this.commission = commission;
  }


  public AccountsAccountTradesGet200ResponseInner commissionCurrency(String commissionCurrency) {
    this.commissionCurrency = commissionCurrency;
    return this;
  }

  /**
   * Get commissionCurrency
   * @return commissionCurrency
   */
  @javax.annotation.Nullable
  public String getCommissionCurrency() {
    return commissionCurrency;
  }

  public void setCommissionCurrency(String commissionCurrency) {
    this.commissionCurrency = commissionCurrency;
  }


  public AccountsAccountTradesGet200ResponseInner contractId(BigDecimal contractId) {
    this.contractId = contractId;
    return this;
  }

  /**
   * Get contractId
   * @return contractId
   */
  @javax.annotation.Nullable
  public BigDecimal getContractId() {
    return contractId;
  }

  public void setContractId(BigDecimal contractId) {
    this.contractId = contractId;
  }


  public AccountsAccountTradesGet200ResponseInner currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AccountsAccountTradesGet200ResponseInner customerOrderId(BigDecimal customerOrderId) {
    this.customerOrderId = customerOrderId;
    return this;
  }

  /**
   * Get customerOrderId
   * @return customerOrderId
   */
  @javax.annotation.Nullable
  public BigDecimal getCustomerOrderId() {
    return customerOrderId;
  }

  public void setCustomerOrderId(BigDecimal customerOrderId) {
    this.customerOrderId = customerOrderId;
  }


  public AccountsAccountTradesGet200ResponseInner execId(String execId) {
    this.execId = execId;
    return this;
  }

  /**
   * Get execId
   * @return execId
   */
  @javax.annotation.Nullable
  public String getExecId() {
    return execId;
  }

  public void setExecId(String execId) {
    this.execId = execId;
  }


  public AccountsAccountTradesGet200ResponseInner executionTime(String executionTime) {
    this.executionTime = executionTime;
    return this;
  }

  /**
   * Get executionTime
   * @return executionTime
   */
  @javax.annotation.Nullable
  public String getExecutionTime() {
    return executionTime;
  }

  public void setExecutionTime(String executionTime) {
    this.executionTime = executionTime;
  }


  public AccountsAccountTradesGet200ResponseInner filledQuantity(BigDecimal filledQuantity) {
    this.filledQuantity = filledQuantity;
    return this;
  }

  /**
   * Get filledQuantity
   * @return filledQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getFilledQuantity() {
    return filledQuantity;
  }

  public void setFilledQuantity(BigDecimal filledQuantity) {
    this.filledQuantity = filledQuantity;
  }


  public AccountsAccountTradesGet200ResponseInner lastMarket(String lastMarket) {
    this.lastMarket = lastMarket;
    return this;
  }

  /**
   * Get lastMarket
   * @return lastMarket
   */
  @javax.annotation.Nullable
  public String getLastMarket() {
    return lastMarket;
  }

  public void setLastMarket(String lastMarket) {
    this.lastMarket = lastMarket;
  }


  public AccountsAccountTradesGet200ResponseInner listingExchange(String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * Get listingExchange
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public AccountsAccountTradesGet200ResponseInner orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public AccountsAccountTradesGet200ResponseInner orderType(OrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  /**
   * Get orderType
   * @return orderType
   */
  @javax.annotation.Nullable
  public OrderType getOrderType() {
    return orderType;
  }

  public void setOrderType(OrderType orderType) {
    this.orderType = orderType;
  }


  public AccountsAccountTradesGet200ResponseInner quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public AccountsAccountTradesGet200ResponseInner remainingQuantity(BigDecimal remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
    return this;
  }

  /**
   * Get remainingQuantity
   * @return remainingQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getRemainingQuantity() {
    return remainingQuantity;
  }

  public void setRemainingQuantity(BigDecimal remainingQuantity) {
    this.remainingQuantity = remainingQuantity;
  }


  public AccountsAccountTradesGet200ResponseInner side(SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * Get side
   * @return side
   */
  @javax.annotation.Nullable
  public SideEnum getSide() {
    return side;
  }

  public void setSide(SideEnum side) {
    this.side = side;
  }


  public AccountsAccountTradesGet200ResponseInner ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * Get ticker
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  public AccountsAccountTradesGet200ResponseInner tradePrice(BigDecimal tradePrice) {
    this.tradePrice = tradePrice;
    return this;
  }

  /**
   * Get tradePrice
   * @return tradePrice
   */
  @javax.annotation.Nullable
  public BigDecimal getTradePrice() {
    return tradePrice;
  }

  public void setTradePrice(BigDecimal tradePrice) {
    this.tradePrice = tradePrice;
  }


  public AccountsAccountTradesGet200ResponseInner tradeSize(BigDecimal tradeSize) {
    this.tradeSize = tradeSize;
    return this;
  }

  /**
   * Get tradeSize
   * @return tradeSize
   */
  @javax.annotation.Nullable
  public BigDecimal getTradeSize() {
    return tradeSize;
  }

  public void setTradeSize(BigDecimal tradeSize) {
    this.tradeSize = tradeSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountsAccountTradesGet200ResponseInner accountsAccountTradesGet200ResponseInner = (AccountsAccountTradesGet200ResponseInner) o;
    return Objects.equals(this.avgPrice, accountsAccountTradesGet200ResponseInner.avgPrice) &&
        Objects.equals(this.commission, accountsAccountTradesGet200ResponseInner.commission) &&
        Objects.equals(this.commissionCurrency, accountsAccountTradesGet200ResponseInner.commissionCurrency) &&
        Objects.equals(this.contractId, accountsAccountTradesGet200ResponseInner.contractId) &&
        Objects.equals(this.currency, accountsAccountTradesGet200ResponseInner.currency) &&
        Objects.equals(this.customerOrderId, accountsAccountTradesGet200ResponseInner.customerOrderId) &&
        Objects.equals(this.execId, accountsAccountTradesGet200ResponseInner.execId) &&
        Objects.equals(this.executionTime, accountsAccountTradesGet200ResponseInner.executionTime) &&
        Objects.equals(this.filledQuantity, accountsAccountTradesGet200ResponseInner.filledQuantity) &&
        Objects.equals(this.lastMarket, accountsAccountTradesGet200ResponseInner.lastMarket) &&
        Objects.equals(this.listingExchange, accountsAccountTradesGet200ResponseInner.listingExchange) &&
        Objects.equals(this.orderId, accountsAccountTradesGet200ResponseInner.orderId) &&
        Objects.equals(this.orderType, accountsAccountTradesGet200ResponseInner.orderType) &&
        Objects.equals(this.quantity, accountsAccountTradesGet200ResponseInner.quantity) &&
        Objects.equals(this.remainingQuantity, accountsAccountTradesGet200ResponseInner.remainingQuantity) &&
        Objects.equals(this.side, accountsAccountTradesGet200ResponseInner.side) &&
        Objects.equals(this.ticker, accountsAccountTradesGet200ResponseInner.ticker) &&
        Objects.equals(this.tradePrice, accountsAccountTradesGet200ResponseInner.tradePrice) &&
        Objects.equals(this.tradeSize, accountsAccountTradesGet200ResponseInner.tradeSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgPrice, commission, commissionCurrency, contractId, currency, customerOrderId, execId, executionTime, filledQuantity, lastMarket, listingExchange, orderId, orderType, quantity, remainingQuantity, side, ticker, tradePrice, tradeSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountsAccountTradesGet200ResponseInner {\n");
    sb.append("    avgPrice: ").append(toIndentedString(avgPrice)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    commissionCurrency: ").append(toIndentedString(commissionCurrency)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customerOrderId: ").append(toIndentedString(customerOrderId)).append("\n");
    sb.append("    execId: ").append(toIndentedString(execId)).append("\n");
    sb.append("    executionTime: ").append(toIndentedString(executionTime)).append("\n");
    sb.append("    filledQuantity: ").append(toIndentedString(filledQuantity)).append("\n");
    sb.append("    lastMarket: ").append(toIndentedString(lastMarket)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    remainingQuantity: ").append(toIndentedString(remainingQuantity)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    tradePrice: ").append(toIndentedString(tradePrice)).append("\n");
    sb.append("    tradeSize: ").append(toIndentedString(tradeSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvgPrice");
    openapiFields.add("Commission");
    openapiFields.add("CommissionCurrency");
    openapiFields.add("ContractId");
    openapiFields.add("Currency");
    openapiFields.add("CustomerOrderId");
    openapiFields.add("ExecId");
    openapiFields.add("ExecutionTime");
    openapiFields.add("FilledQuantity");
    openapiFields.add("LastMarket");
    openapiFields.add("ListingExchange");
    openapiFields.add("OrderId");
    openapiFields.add("OrderType");
    openapiFields.add("Quantity");
    openapiFields.add("RemainingQuantity");
    openapiFields.add("Side");
    openapiFields.add("Ticker");
    openapiFields.add("TradePrice");
    openapiFields.add("TradeSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountsAccountTradesGet200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountsAccountTradesGet200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountsAccountTradesGet200ResponseInner is not found in the empty JSON string", AccountsAccountTradesGet200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountsAccountTradesGet200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountsAccountTradesGet200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CommissionCurrency") != null && !jsonObj.get("CommissionCurrency").isJsonNull()) && !jsonObj.get("CommissionCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CommissionCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CommissionCurrency").toString()));
      }
      if ((jsonObj.get("Currency") != null && !jsonObj.get("Currency").isJsonNull()) && !jsonObj.get("Currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Currency").toString()));
      }
      if ((jsonObj.get("ExecId") != null && !jsonObj.get("ExecId").isJsonNull()) && !jsonObj.get("ExecId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExecId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExecId").toString()));
      }
      if ((jsonObj.get("ExecutionTime") != null && !jsonObj.get("ExecutionTime").isJsonNull()) && !jsonObj.get("ExecutionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExecutionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExecutionTime").toString()));
      }
      if ((jsonObj.get("LastMarket") != null && !jsonObj.get("LastMarket").isJsonNull()) && !jsonObj.get("LastMarket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastMarket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastMarket").toString()));
      }
      if ((jsonObj.get("ListingExchange") != null && !jsonObj.get("ListingExchange").isJsonNull()) && !jsonObj.get("ListingExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ListingExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ListingExchange").toString()));
      }
      if ((jsonObj.get("OrderId") != null && !jsonObj.get("OrderId").isJsonNull()) && !jsonObj.get("OrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderId").toString()));
      }
      // validate the optional field `OrderType`
      if (jsonObj.get("OrderType") != null && !jsonObj.get("OrderType").isJsonNull()) {
        OrderType.validateJsonElement(jsonObj.get("OrderType"));
      }
      if ((jsonObj.get("Side") != null && !jsonObj.get("Side").isJsonNull()) && !jsonObj.get("Side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Side").toString()));
      }
      // validate the optional field `Side`
      if (jsonObj.get("Side") != null && !jsonObj.get("Side").isJsonNull()) {
        SideEnum.validateJsonElement(jsonObj.get("Side"));
      }
      if ((jsonObj.get("Ticker") != null && !jsonObj.get("Ticker").isJsonNull()) && !jsonObj.get("Ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ticker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountsAccountTradesGet200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountsAccountTradesGet200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountsAccountTradesGet200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountsAccountTradesGet200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountsAccountTradesGet200ResponseInner>() {
           @Override
           public void write(JsonWriter out, AccountsAccountTradesGet200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountsAccountTradesGet200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountsAccountTradesGet200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountsAccountTradesGet200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to AccountsAccountTradesGet200ResponseInner
   */
  public static AccountsAccountTradesGet200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountsAccountTradesGet200ResponseInner.class);
  }

  /**
   * Convert an instance of AccountsAccountTradesGet200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

