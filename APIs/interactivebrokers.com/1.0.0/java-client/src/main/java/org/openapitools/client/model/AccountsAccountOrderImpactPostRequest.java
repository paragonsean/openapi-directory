/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.OrderType;
import org.openapitools.client.model.TimeInForce;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountsAccountOrderImpactPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:32.094088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountsAccountOrderImpactPostRequest {
  public static final String SERIALIZED_NAME_AUX_PRICE = "Aux Price";
  @SerializedName(SERIALIZED_NAME_AUX_PRICE)
  private BigDecimal auxPrice;

  public static final String SERIALIZED_NAME_CONTRACT_ID = "ContractId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private BigDecimal contractId;

  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_ID = "CustomerOrderId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_ID)
  private String customerOrderId;

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "InstrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private String instrumentType;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "ListingExchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  private String listingExchange;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "Order Type";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private OrderType orderType;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  /**
   * Buy &#x3D; &#39;1&#39;, Sell &#x3D; &#39;2&#39;
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_2(new BigDecimal("2"));

    private BigDecimal value;

    SideEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(BigDecimal value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(new BigDecimal(value));
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(new BigDecimal(value));
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "Side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private SideEnum side;

  public static final String SERIALIZED_NAME_TICKER = "Ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  private String ticker;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "Time in Force";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  private TimeInForce timeInForce;

  public AccountsAccountOrderImpactPostRequest() {
  }

  public AccountsAccountOrderImpactPostRequest auxPrice(BigDecimal auxPrice) {
    this.auxPrice = auxPrice;
    return this;
  }

  /**
   * Required price to support Stop and Stop Limit orders
   * @return auxPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getAuxPrice() {
    return auxPrice;
  }

  public void setAuxPrice(BigDecimal auxPrice) {
    this.auxPrice = auxPrice;
  }


  public AccountsAccountOrderImpactPostRequest contractId(BigDecimal contractId) {
    this.contractId = contractId;
    return this;
  }

  /**
   * The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)
   * @return contractId
   */
  @javax.annotation.Nullable
  public BigDecimal getContractId() {
    return contractId;
  }

  public void setContractId(BigDecimal contractId) {
    this.contractId = contractId;
  }


  public AccountsAccountOrderImpactPostRequest currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency in which the FX pair trades (only for InstrumentType&#x3D;CASH)
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AccountsAccountOrderImpactPostRequest customerOrderId(String customerOrderId) {
    this.customerOrderId = customerOrderId;
    return this;
  }

  /**
   * The order ID assigned by the customer.
   * @return customerOrderId
   */
  @javax.annotation.Nullable
  public String getCustomerOrderId() {
    return customerOrderId;
  }

  public void setCustomerOrderId(String customerOrderId) {
    this.customerOrderId = customerOrderId;
  }


  public AccountsAccountOrderImpactPostRequest instrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
    return this;
  }

  /**
   * The instrument type of the contract
   * @return instrumentType
   */
  @javax.annotation.Nullable
  public String getInstrumentType() {
    return instrumentType;
  }

  public void setInstrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
  }


  public AccountsAccountOrderImpactPostRequest listingExchange(String listingExchange) {
    this.listingExchange = listingExchange;
    return this;
  }

  /**
   * The exchange on which the trading product is listed (only for InstrumentType&#x3D;STK)
   * @return listingExchange
   */
  @javax.annotation.Nullable
  public String getListingExchange() {
    return listingExchange;
  }

  public void setListingExchange(String listingExchange) {
    this.listingExchange = listingExchange;
  }


  public AccountsAccountOrderImpactPostRequest orderType(OrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  /**
   * Get orderType
   * @return orderType
   */
  @javax.annotation.Nullable
  public OrderType getOrderType() {
    return orderType;
  }

  public void setOrderType(OrderType orderType) {
    this.orderType = orderType;
  }


  public AccountsAccountOrderImpactPostRequest price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * The order price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public AccountsAccountOrderImpactPostRequest quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The number of units in the order; contracts or shares
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public AccountsAccountOrderImpactPostRequest side(SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * Buy &#x3D; &#39;1&#39;, Sell &#x3D; &#39;2&#39;
   * @return side
   */
  @javax.annotation.Nullable
  public SideEnum getSide() {
    return side;
  }

  public void setSide(SideEnum side) {
    this.side = side;
  }


  public AccountsAccountOrderImpactPostRequest ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * The symbol that identifies the trading product
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  public AccountsAccountOrderImpactPostRequest timeInForce(TimeInForce timeInForce) {
    this.timeInForce = timeInForce;
    return this;
  }

  /**
   * Get timeInForce
   * @return timeInForce
   */
  @javax.annotation.Nullable
  public TimeInForce getTimeInForce() {
    return timeInForce;
  }

  public void setTimeInForce(TimeInForce timeInForce) {
    this.timeInForce = timeInForce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountsAccountOrderImpactPostRequest accountsAccountOrderImpactPostRequest = (AccountsAccountOrderImpactPostRequest) o;
    return Objects.equals(this.auxPrice, accountsAccountOrderImpactPostRequest.auxPrice) &&
        Objects.equals(this.contractId, accountsAccountOrderImpactPostRequest.contractId) &&
        Objects.equals(this.currency, accountsAccountOrderImpactPostRequest.currency) &&
        Objects.equals(this.customerOrderId, accountsAccountOrderImpactPostRequest.customerOrderId) &&
        Objects.equals(this.instrumentType, accountsAccountOrderImpactPostRequest.instrumentType) &&
        Objects.equals(this.listingExchange, accountsAccountOrderImpactPostRequest.listingExchange) &&
        Objects.equals(this.orderType, accountsAccountOrderImpactPostRequest.orderType) &&
        Objects.equals(this.price, accountsAccountOrderImpactPostRequest.price) &&
        Objects.equals(this.quantity, accountsAccountOrderImpactPostRequest.quantity) &&
        Objects.equals(this.side, accountsAccountOrderImpactPostRequest.side) &&
        Objects.equals(this.ticker, accountsAccountOrderImpactPostRequest.ticker) &&
        Objects.equals(this.timeInForce, accountsAccountOrderImpactPostRequest.timeInForce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auxPrice, contractId, currency, customerOrderId, instrumentType, listingExchange, orderType, price, quantity, side, ticker, timeInForce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountsAccountOrderImpactPostRequest {\n");
    sb.append("    auxPrice: ").append(toIndentedString(auxPrice)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customerOrderId: ").append(toIndentedString(customerOrderId)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Aux Price");
    openapiFields.add("ContractId");
    openapiFields.add("Currency");
    openapiFields.add("CustomerOrderId");
    openapiFields.add("InstrumentType");
    openapiFields.add("ListingExchange");
    openapiFields.add("Order Type");
    openapiFields.add("Price");
    openapiFields.add("Quantity");
    openapiFields.add("Side");
    openapiFields.add("Ticker");
    openapiFields.add("Time in Force");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountsAccountOrderImpactPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountsAccountOrderImpactPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountsAccountOrderImpactPostRequest is not found in the empty JSON string", AccountsAccountOrderImpactPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountsAccountOrderImpactPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountsAccountOrderImpactPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Currency") != null && !jsonObj.get("Currency").isJsonNull()) && !jsonObj.get("Currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Currency").toString()));
      }
      if ((jsonObj.get("CustomerOrderId") != null && !jsonObj.get("CustomerOrderId").isJsonNull()) && !jsonObj.get("CustomerOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerOrderId").toString()));
      }
      if ((jsonObj.get("InstrumentType") != null && !jsonObj.get("InstrumentType").isJsonNull()) && !jsonObj.get("InstrumentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstrumentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstrumentType").toString()));
      }
      if ((jsonObj.get("ListingExchange") != null && !jsonObj.get("ListingExchange").isJsonNull()) && !jsonObj.get("ListingExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ListingExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ListingExchange").toString()));
      }
      // validate the optional field `Order Type`
      if (jsonObj.get("Order Type") != null && !jsonObj.get("Order Type").isJsonNull()) {
        OrderType.validateJsonElement(jsonObj.get("Order Type"));
      }
      // validate the optional field `Side`
      if (jsonObj.get("Side") != null && !jsonObj.get("Side").isJsonNull()) {
        SideEnum.validateJsonElement(jsonObj.get("Side"));
      }
      if ((jsonObj.get("Ticker") != null && !jsonObj.get("Ticker").isJsonNull()) && !jsonObj.get("Ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ticker").toString()));
      }
      // validate the optional field `Time in Force`
      if (jsonObj.get("Time in Force") != null && !jsonObj.get("Time in Force").isJsonNull()) {
        TimeInForce.validateJsonElement(jsonObj.get("Time in Force"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountsAccountOrderImpactPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountsAccountOrderImpactPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountsAccountOrderImpactPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountsAccountOrderImpactPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountsAccountOrderImpactPostRequest>() {
           @Override
           public void write(JsonWriter out, AccountsAccountOrderImpactPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountsAccountOrderImpactPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountsAccountOrderImpactPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountsAccountOrderImpactPostRequest
   * @throws IOException if the JSON string is invalid with respect to AccountsAccountOrderImpactPostRequest
   */
  public static AccountsAccountOrderImpactPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountsAccountOrderImpactPostRequest.class);
  }

  /**
   * Convert an instance of AccountsAccountOrderImpactPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

