/*
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.MarketdataSnapshotGet200ResponseInnerBid;
import org.openapitools.client.model.MarketdataSnapshotGet200ResponseInnerClosing;
import org.openapitools.client.model.MarketdataSnapshotGet200ResponseInnerTrade;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MarketdataSnapshotGet200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:32.094088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MarketdataSnapshotGet200ResponseInner {
  public static final String SERIALIZED_NAME_BID = "Bid";
  @SerializedName(SERIALIZED_NAME_BID)
  private MarketdataSnapshotGet200ResponseInnerBid bid;

  public static final String SERIALIZED_NAME_CLOSING = "Closing";
  @SerializedName(SERIALIZED_NAME_CLOSING)
  private MarketdataSnapshotGet200ResponseInnerClosing closing;

  public static final String SERIALIZED_NAME_COMPLETE = "Complete";
  @SerializedName(SERIALIZED_NAME_COMPLETE)
  private Boolean complete;

  public static final String SERIALIZED_NAME_CONID = "Conid";
  @SerializedName(SERIALIZED_NAME_CONID)
  private String conid;

  public static final String SERIALIZED_NAME_OFFER = "Offer";
  @SerializedName(SERIALIZED_NAME_OFFER)
  private MarketdataSnapshotGet200ResponseInnerBid offer;

  /**
   * 0 &#x3D; Real time data 1 &#x3D; Delayed data 
   */
  @JsonAdapter(TemporalityEnum.Adapter.class)
  public enum TemporalityEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    TemporalityEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemporalityEnum fromValue(BigDecimal value) {
      for (TemporalityEnum b : TemporalityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemporalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemporalityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemporalityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemporalityEnum.fromValue(new BigDecimal(value));
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TemporalityEnum.fromValue(new BigDecimal(value));
    }
  }

  public static final String SERIALIZED_NAME_TEMPORALITY = "Temporality";
  @SerializedName(SERIALIZED_NAME_TEMPORALITY)
  private TemporalityEnum temporality;

  public static final String SERIALIZED_NAME_TRADE = "Trade";
  @SerializedName(SERIALIZED_NAME_TRADE)
  private MarketdataSnapshotGet200ResponseInnerTrade trade;

  public MarketdataSnapshotGet200ResponseInner() {
  }

  public MarketdataSnapshotGet200ResponseInner bid(MarketdataSnapshotGet200ResponseInnerBid bid) {
    this.bid = bid;
    return this;
  }

  /**
   * Get bid
   * @return bid
   */
  @javax.annotation.Nullable
  public MarketdataSnapshotGet200ResponseInnerBid getBid() {
    return bid;
  }

  public void setBid(MarketdataSnapshotGet200ResponseInnerBid bid) {
    this.bid = bid;
  }


  public MarketdataSnapshotGet200ResponseInner closing(MarketdataSnapshotGet200ResponseInnerClosing closing) {
    this.closing = closing;
    return this;
  }

  /**
   * Get closing
   * @return closing
   */
  @javax.annotation.Nullable
  public MarketdataSnapshotGet200ResponseInnerClosing getClosing() {
    return closing;
  }

  public void setClosing(MarketdataSnapshotGet200ResponseInnerClosing closing) {
    this.closing = closing;
  }


  public MarketdataSnapshotGet200ResponseInner complete(Boolean complete) {
    this.complete = complete;
    return this;
  }

  /**
   * Get complete
   * @return complete
   */
  @javax.annotation.Nullable
  public Boolean getComplete() {
    return complete;
  }

  public void setComplete(Boolean complete) {
    this.complete = complete;
  }


  public MarketdataSnapshotGet200ResponseInner conid(String conid) {
    this.conid = conid;
    return this;
  }

  /**
   * Get conid
   * @return conid
   */
  @javax.annotation.Nullable
  public String getConid() {
    return conid;
  }

  public void setConid(String conid) {
    this.conid = conid;
  }


  public MarketdataSnapshotGet200ResponseInner offer(MarketdataSnapshotGet200ResponseInnerBid offer) {
    this.offer = offer;
    return this;
  }

  /**
   * Get offer
   * @return offer
   */
  @javax.annotation.Nullable
  public MarketdataSnapshotGet200ResponseInnerBid getOffer() {
    return offer;
  }

  public void setOffer(MarketdataSnapshotGet200ResponseInnerBid offer) {
    this.offer = offer;
  }


  public MarketdataSnapshotGet200ResponseInner temporality(TemporalityEnum temporality) {
    this.temporality = temporality;
    return this;
  }

  /**
   * 0 &#x3D; Real time data 1 &#x3D; Delayed data 
   * @return temporality
   */
  @javax.annotation.Nullable
  public TemporalityEnum getTemporality() {
    return temporality;
  }

  public void setTemporality(TemporalityEnum temporality) {
    this.temporality = temporality;
  }


  public MarketdataSnapshotGet200ResponseInner trade(MarketdataSnapshotGet200ResponseInnerTrade trade) {
    this.trade = trade;
    return this;
  }

  /**
   * Get trade
   * @return trade
   */
  @javax.annotation.Nullable
  public MarketdataSnapshotGet200ResponseInnerTrade getTrade() {
    return trade;
  }

  public void setTrade(MarketdataSnapshotGet200ResponseInnerTrade trade) {
    this.trade = trade;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketdataSnapshotGet200ResponseInner marketdataSnapshotGet200ResponseInner = (MarketdataSnapshotGet200ResponseInner) o;
    return Objects.equals(this.bid, marketdataSnapshotGet200ResponseInner.bid) &&
        Objects.equals(this.closing, marketdataSnapshotGet200ResponseInner.closing) &&
        Objects.equals(this.complete, marketdataSnapshotGet200ResponseInner.complete) &&
        Objects.equals(this.conid, marketdataSnapshotGet200ResponseInner.conid) &&
        Objects.equals(this.offer, marketdataSnapshotGet200ResponseInner.offer) &&
        Objects.equals(this.temporality, marketdataSnapshotGet200ResponseInner.temporality) &&
        Objects.equals(this.trade, marketdataSnapshotGet200ResponseInner.trade);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bid, closing, complete, conid, offer, temporality, trade);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketdataSnapshotGet200ResponseInner {\n");
    sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
    sb.append("    closing: ").append(toIndentedString(closing)).append("\n");
    sb.append("    complete: ").append(toIndentedString(complete)).append("\n");
    sb.append("    conid: ").append(toIndentedString(conid)).append("\n");
    sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
    sb.append("    temporality: ").append(toIndentedString(temporality)).append("\n");
    sb.append("    trade: ").append(toIndentedString(trade)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bid");
    openapiFields.add("Closing");
    openapiFields.add("Complete");
    openapiFields.add("Conid");
    openapiFields.add("Offer");
    openapiFields.add("Temporality");
    openapiFields.add("Trade");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketdataSnapshotGet200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketdataSnapshotGet200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketdataSnapshotGet200ResponseInner is not found in the empty JSON string", MarketdataSnapshotGet200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketdataSnapshotGet200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketdataSnapshotGet200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Bid`
      if (jsonObj.get("Bid") != null && !jsonObj.get("Bid").isJsonNull()) {
        MarketdataSnapshotGet200ResponseInnerBid.validateJsonElement(jsonObj.get("Bid"));
      }
      // validate the optional field `Closing`
      if (jsonObj.get("Closing") != null && !jsonObj.get("Closing").isJsonNull()) {
        MarketdataSnapshotGet200ResponseInnerClosing.validateJsonElement(jsonObj.get("Closing"));
      }
      if ((jsonObj.get("Conid") != null && !jsonObj.get("Conid").isJsonNull()) && !jsonObj.get("Conid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Conid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Conid").toString()));
      }
      // validate the optional field `Offer`
      if (jsonObj.get("Offer") != null && !jsonObj.get("Offer").isJsonNull()) {
        MarketdataSnapshotGet200ResponseInnerBid.validateJsonElement(jsonObj.get("Offer"));
      }
      // validate the optional field `Temporality`
      if (jsonObj.get("Temporality") != null && !jsonObj.get("Temporality").isJsonNull()) {
        TemporalityEnum.validateJsonElement(jsonObj.get("Temporality"));
      }
      // validate the optional field `Trade`
      if (jsonObj.get("Trade") != null && !jsonObj.get("Trade").isJsonNull()) {
        MarketdataSnapshotGet200ResponseInnerTrade.validateJsonElement(jsonObj.get("Trade"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketdataSnapshotGet200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketdataSnapshotGet200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketdataSnapshotGet200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketdataSnapshotGet200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketdataSnapshotGet200ResponseInner>() {
           @Override
           public void write(JsonWriter out, MarketdataSnapshotGet200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketdataSnapshotGet200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketdataSnapshotGet200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketdataSnapshotGet200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to MarketdataSnapshotGet200ResponseInner
   */
  public static MarketdataSnapshotGet200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketdataSnapshotGet200ResponseInner.class);
  }

  /**
   * Convert an instance of MarketdataSnapshotGet200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

