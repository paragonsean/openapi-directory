/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MarketdataExchangeComponentsGet200ResponseInner from '../model/MarketdataExchangeComponentsGet200ResponseInner';
import MarketdataSnapshotGet200ResponseInner from '../model/MarketdataSnapshotGet200ResponseInner';
import MarketdataSnapshotGetRequestInner from '../model/MarketdataSnapshotGetRequestInner';

/**
* MarketData service.
* @module api/MarketDataApi
* @version 1.0.0
*/
export default class MarketDataApi {

    /**
    * Constructs a new MarketDataApi. 
    * @alias module:api/MarketDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the marketdataExchangeComponentsGet operation.
     * @callback module:api/MarketDataApi~marketdataExchangeComponentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MarketdataExchangeComponentsGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchange Components
     * This endpoint provides a bit mapping for the bid/ask/last 'market' values in the snapshot response. 
     * @param {module:api/MarketDataApi~marketdataExchangeComponentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MarketdataExchangeComponentsGet200ResponseInner>}
     */
    marketdataExchangeComponentsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MarketdataExchangeComponentsGet200ResponseInner];
      return this.apiClient.callApi(
        '/marketdata/exchange_components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketdataSnapshotGet operation.
     * @callback module:api/MarketDataApi~marketdataSnapshotGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MarketdataSnapshotGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Market Data Snapshot
     * This endpoint allows the consumer to request a market data snapshot for one or more trading products.  Consumers need to provide unique identifiers (conids) for the products in the IB product database (retrievable using the /secdef endpoint). The 'market' values are integers whose bits indicate the exchange(s) making up the quote.   The mapping of bit to exchange is obtained from the marketdata/exchange_component endpoint. For example, if a bid has a 'market' value of 5 and the exchange_component result has the map  0 => NYSE, 1 => ISLAND, 2 => ARCA then the exchanges contributing to the bid size are NYSE and ARCA.   Similarly, if market=2, then only ISLAND is contributing. 
     * @param {Array.<module:model/MarketdataSnapshotGetRequestInner>} marketdataSnapshotGetRequestInner Contract. Allowed combinations are [type and symbol and currency], or [type, symbol, exchange, and currency], or [conid].
     * @param {module:api/MarketDataApi~marketdataSnapshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MarketdataSnapshotGet200ResponseInner>}
     */
    marketdataSnapshotGet(marketdataSnapshotGetRequestInner, callback) {
      let postBody = marketdataSnapshotGetRequestInner;
      // verify the required parameter 'marketdataSnapshotGetRequestInner' is set
      if (marketdataSnapshotGetRequestInner === undefined || marketdataSnapshotGetRequestInner === null) {
        throw new Error("Missing the required parameter 'marketdataSnapshotGetRequestInner' when calling marketdataSnapshotGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [MarketdataSnapshotGet200ResponseInner];
      return this.apiClient.callApi(
        '/marketdata/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
