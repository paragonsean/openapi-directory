/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsAccountOrdersCustomerOrderIdPut200ResponseInner from '../model/AccountsAccountOrdersCustomerOrderIdPut200ResponseInner';
import AccountsAccountOrdersCustomerOrderIdPutRequest from '../model/AccountsAccountOrdersCustomerOrderIdPutRequest';
import AccountsAccountOrdersPostRequest from '../model/AccountsAccountOrdersPostRequest';
import OrderState from '../model/OrderState';

/**
* Orders service.
* @module api/OrdersApi
* @version 1.0.0
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountsAccountOrdersCustomerOrderIdDelete operation.
     * @callback module:api/OrdersApi~accountsAccountOrdersCustomerOrderIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Order
     * Cancels the order with the referenced Customer Order ID for the account passed in the URL.
     * @param {String} account Account Number
     * @param {String} customerOrderId Customer Order ID
     * @param {module:api/OrdersApi~accountsAccountOrdersCustomerOrderIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>}
     */
    accountsAccountOrdersCustomerOrderIdDelete(account, customerOrderId, callback) {
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling accountsAccountOrdersCustomerOrderIdDelete");
      }
      // verify the required parameter 'customerOrderId' is set
      if (customerOrderId === undefined || customerOrderId === null) {
        throw new Error("Missing the required parameter 'customerOrderId' when calling accountsAccountOrdersCustomerOrderIdDelete");
      }

      let pathParams = {
        'account': account,
        'CustomerOrderId': customerOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccountsAccountOrdersCustomerOrderIdPut200ResponseInner];
      return this.apiClient.callApi(
        '/accounts/{account}/orders/{CustomerOrderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsAccountOrdersCustomerOrderIdGet operation.
     * @callback module:api/OrdersApi~accountsAccountOrdersCustomerOrderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderState>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return specific order info
     * Returns the order with the referenced Customer Order ID for the account passed in the URL.
     * @param {String} account Account Number
     * @param {String} customerOrderId Customer Order ID
     * @param {module:api/OrdersApi~accountsAccountOrdersCustomerOrderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderState>}
     */
    accountsAccountOrdersCustomerOrderIdGet(account, customerOrderId, callback) {
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling accountsAccountOrdersCustomerOrderIdGet");
      }
      // verify the required parameter 'customerOrderId' is set
      if (customerOrderId === undefined || customerOrderId === null) {
        throw new Error("Missing the required parameter 'customerOrderId' when calling accountsAccountOrdersCustomerOrderIdGet");
      }

      let pathParams = {
        'account': account,
        'CustomerOrderId': customerOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrderState];
      return this.apiClient.callApi(
        '/accounts/{account}/orders/{CustomerOrderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsAccountOrdersCustomerOrderIdPut operation.
     * @callback module:api/OrdersApi~accountsAccountOrdersCustomerOrderIdPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Order
     * Allows the caller to modify the order with the referenced Customer Order ID specified in the URL. A separate Customer Order ID must be provided in the request body for the modification.
     * @param {String} account Account Number
     * @param {String} customerOrderId Customer Order ID
     * @param {module:model/AccountsAccountOrdersCustomerOrderIdPutRequest} accountsAccountOrdersCustomerOrderIdPutRequest Order Parameters
     * @param {module:api/OrdersApi~accountsAccountOrdersCustomerOrderIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountsAccountOrdersCustomerOrderIdPut200ResponseInner>}
     */
    accountsAccountOrdersCustomerOrderIdPut(account, customerOrderId, accountsAccountOrdersCustomerOrderIdPutRequest, callback) {
      let postBody = accountsAccountOrdersCustomerOrderIdPutRequest;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling accountsAccountOrdersCustomerOrderIdPut");
      }
      // verify the required parameter 'customerOrderId' is set
      if (customerOrderId === undefined || customerOrderId === null) {
        throw new Error("Missing the required parameter 'customerOrderId' when calling accountsAccountOrdersCustomerOrderIdPut");
      }
      // verify the required parameter 'accountsAccountOrdersCustomerOrderIdPutRequest' is set
      if (accountsAccountOrdersCustomerOrderIdPutRequest === undefined || accountsAccountOrdersCustomerOrderIdPutRequest === null) {
        throw new Error("Missing the required parameter 'accountsAccountOrdersCustomerOrderIdPutRequest' when calling accountsAccountOrdersCustomerOrderIdPut");
      }

      let pathParams = {
        'account': account,
        'CustomerOrderId': customerOrderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AccountsAccountOrdersCustomerOrderIdPut200ResponseInner];
      return this.apiClient.callApi(
        '/accounts/{account}/orders/{CustomerOrderId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsAccountOrdersGet operation.
     * @callback module:api/OrdersApi~accountsAccountOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderState>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open Orders
     * Returns a list of orders for the account passed in the URL
     * @param {String} account Account Number
     * @param {module:api/OrdersApi~accountsAccountOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderState>}
     */
    accountsAccountOrdersGet(account, callback) {
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling accountsAccountOrdersGet");
      }

      let pathParams = {
        'account': account
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrderState];
      return this.apiClient.callApi(
        '/accounts/{account}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsAccountOrdersPost operation.
     * @callback module:api/OrdersApi~accountsAccountOrdersPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderState>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place Order
     * Places order
     * @param {String} account Account Number
     * @param {module:model/AccountsAccountOrdersPostRequest} accountsAccountOrdersPostRequest Order Parameters
     * @param {module:api/OrdersApi~accountsAccountOrdersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderState>}
     */
    accountsAccountOrdersPost(account, accountsAccountOrdersPostRequest, callback) {
      let postBody = accountsAccountOrdersPostRequest;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling accountsAccountOrdersPost");
      }
      // verify the required parameter 'accountsAccountOrdersPostRequest' is set
      if (accountsAccountOrdersPostRequest === undefined || accountsAccountOrdersPostRequest === null) {
        throw new Error("Missing the required parameter 'accountsAccountOrdersPostRequest' when calling accountsAccountOrdersPost");
      }

      let pathParams = {
        'account': account
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OrderState];
      return this.apiClient.callApi(
        '/accounts/{account}/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
