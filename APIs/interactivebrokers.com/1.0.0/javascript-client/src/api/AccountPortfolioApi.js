/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsAccountPositionsGet200ResponseInner from '../model/AccountsAccountPositionsGet200ResponseInner';
import AccountsAccountSummaryGet200Response from '../model/AccountsAccountSummaryGet200Response';
import AccountsGet200Response from '../model/AccountsGet200Response';

/**
* AccountPortfolio service.
* @module api/AccountPortfolioApi
* @version 1.0.0
*/
export default class AccountPortfolioApi {

    /**
    * Constructs a new AccountPortfolioApi. 
    * @alias module:api/AccountPortfolioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountsAccountPositionsGet operation.
     * @callback module:api/AccountPortfolioApi~accountsAccountPositionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountsAccountPositionsGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Positions
     * Returns a list of positions for the indicated account. 
     * @param {String} account Account Number
     * @param {module:api/AccountPortfolioApi~accountsAccountPositionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountsAccountPositionsGet200ResponseInner>}
     */
    accountsAccountPositionsGet(account, callback) {
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling accountsAccountPositionsGet");
      }

      let pathParams = {
        'account': account
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccountsAccountPositionsGet200ResponseInner];
      return this.apiClient.callApi(
        '/accounts/{account}/positions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsAccountSummaryGet operation.
     * @callback module:api/AccountPortfolioApi~accountsAccountSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountsAccountSummaryGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Values Summary
     * Returns a list of account and margin balances associated with the account passed in the URL
     * @param {String} account Account Number
     * @param {module:api/AccountPortfolioApi~accountsAccountSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountsAccountSummaryGet200Response}
     */
    accountsAccountSummaryGet(account, callback) {
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling accountsAccountSummaryGet");
      }

      let pathParams = {
        'account': account
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountsAccountSummaryGet200Response;
      return this.apiClient.callApi(
        '/accounts/{account}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsGet operation.
     * @callback module:api/AccountPortfolioApi~accountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Brokerage Accounts
     * Allows the caller to request a list of accounts associated with the session.
     * @param {String} account Account Number
     * @param {module:api/AccountPortfolioApi~accountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountsGet200Response}
     */
    accountsGet(account, callback) {
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling accountsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'account': account
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountsGet200Response;
      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
