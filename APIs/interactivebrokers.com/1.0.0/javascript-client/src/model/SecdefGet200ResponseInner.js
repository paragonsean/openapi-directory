/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SecdefGet200ResponseInner model module.
 * @module model/SecdefGet200ResponseInner
 * @version 1.0.0
 */
class SecdefGet200ResponseInner {
    /**
     * Constructs a new <code>SecdefGet200ResponseInner</code>.
     * @alias module:model/SecdefGet200ResponseInner
     */
    constructor() { 
        
        SecdefGet200ResponseInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SecdefGet200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecdefGet200ResponseInner} obj Optional instance to populate.
     * @return {module:model/SecdefGet200ResponseInner} The populated <code>SecdefGet200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecdefGet200ResponseInner();

            if (data.hasOwnProperty('CompanyName')) {
                obj['CompanyName'] = ApiClient.convertToType(data['CompanyName'], 'String');
            }
            if (data.hasOwnProperty('ContractId')) {
                obj['ContractId'] = ApiClient.convertToType(data['ContractId'], 'Number');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('Exchange')) {
                obj['Exchange'] = ApiClient.convertToType(data['Exchange'], 'String');
            }
            if (data.hasOwnProperty('SecurityType')) {
                obj['SecurityType'] = ApiClient.convertToType(data['SecurityType'], 'String');
            }
            if (data.hasOwnProperty('Ticker')) {
                obj['Ticker'] = ApiClient.convertToType(data['Ticker'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecdefGet200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecdefGet200ResponseInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CompanyName'] && !(typeof data['CompanyName'] === 'string' || data['CompanyName'] instanceof String)) {
            throw new Error("Expected the field `CompanyName` to be a primitive type in the JSON string but got " + data['CompanyName']);
        }
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }
        // ensure the json data is a string
        if (data['Exchange'] && !(typeof data['Exchange'] === 'string' || data['Exchange'] instanceof String)) {
            throw new Error("Expected the field `Exchange` to be a primitive type in the JSON string but got " + data['Exchange']);
        }
        // ensure the json data is a string
        if (data['SecurityType'] && !(typeof data['SecurityType'] === 'string' || data['SecurityType'] instanceof String)) {
            throw new Error("Expected the field `SecurityType` to be a primitive type in the JSON string but got " + data['SecurityType']);
        }
        // ensure the json data is a string
        if (data['Ticker'] && !(typeof data['Ticker'] === 'string' || data['Ticker'] instanceof String)) {
            throw new Error("Expected the field `Ticker` to be a primitive type in the JSON string but got " + data['Ticker']);
        }

        return true;
    }


}



/**
 * @member {String} CompanyName
 */
SecdefGet200ResponseInner.prototype['CompanyName'] = undefined;

/**
 * @member {Number} ContractId
 */
SecdefGet200ResponseInner.prototype['ContractId'] = undefined;

/**
 * @member {String} Currency
 */
SecdefGet200ResponseInner.prototype['Currency'] = undefined;

/**
 * @member {String} Exchange
 */
SecdefGet200ResponseInner.prototype['Exchange'] = undefined;

/**
 * @member {String} SecurityType
 */
SecdefGet200ResponseInner.prototype['SecurityType'] = undefined;

/**
 * @member {String} Ticker
 */
SecdefGet200ResponseInner.prototype['Ticker'] = undefined;






export default SecdefGet200ResponseInner;

