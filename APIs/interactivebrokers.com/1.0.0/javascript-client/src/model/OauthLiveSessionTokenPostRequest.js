/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OauthLiveSessionTokenPostRequest model module.
 * @module model/OauthLiveSessionTokenPostRequest
 * @version 1.0.0
 */
class OauthLiveSessionTokenPostRequest {
    /**
     * Constructs a new <code>OauthLiveSessionTokenPostRequest</code>.
     * @alias module:model/OauthLiveSessionTokenPostRequest
     */
    constructor() { 
        
        OauthLiveSessionTokenPostRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OauthLiveSessionTokenPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OauthLiveSessionTokenPostRequest} obj Optional instance to populate.
     * @return {module:model/OauthLiveSessionTokenPostRequest} The populated <code>OauthLiveSessionTokenPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OauthLiveSessionTokenPostRequest();

            if (data.hasOwnProperty('diffie_hellman_challenge')) {
                obj['diffie_hellman_challenge'] = ApiClient.convertToType(data['diffie_hellman_challenge'], 'String');
            }
            if (data.hasOwnProperty('oauth_consumer_key')) {
                obj['oauth_consumer_key'] = ApiClient.convertToType(data['oauth_consumer_key'], 'String');
            }
            if (data.hasOwnProperty('oauth_nonce')) {
                obj['oauth_nonce'] = ApiClient.convertToType(data['oauth_nonce'], 'String');
            }
            if (data.hasOwnProperty('oauth_signature')) {
                obj['oauth_signature'] = ApiClient.convertToType(data['oauth_signature'], 'String');
            }
            if (data.hasOwnProperty('oauth_signature_method')) {
                obj['oauth_signature_method'] = ApiClient.convertToType(data['oauth_signature_method'], 'String');
            }
            if (data.hasOwnProperty('oauth_timestamp')) {
                obj['oauth_timestamp'] = ApiClient.convertToType(data['oauth_timestamp'], 'String');
            }
            if (data.hasOwnProperty('oauth_token')) {
                obj['oauth_token'] = ApiClient.convertToType(data['oauth_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OauthLiveSessionTokenPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OauthLiveSessionTokenPostRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diffie_hellman_challenge'] && !(typeof data['diffie_hellman_challenge'] === 'string' || data['diffie_hellman_challenge'] instanceof String)) {
            throw new Error("Expected the field `diffie_hellman_challenge` to be a primitive type in the JSON string but got " + data['diffie_hellman_challenge']);
        }
        // ensure the json data is a string
        if (data['oauth_consumer_key'] && !(typeof data['oauth_consumer_key'] === 'string' || data['oauth_consumer_key'] instanceof String)) {
            throw new Error("Expected the field `oauth_consumer_key` to be a primitive type in the JSON string but got " + data['oauth_consumer_key']);
        }
        // ensure the json data is a string
        if (data['oauth_nonce'] && !(typeof data['oauth_nonce'] === 'string' || data['oauth_nonce'] instanceof String)) {
            throw new Error("Expected the field `oauth_nonce` to be a primitive type in the JSON string but got " + data['oauth_nonce']);
        }
        // ensure the json data is a string
        if (data['oauth_signature'] && !(typeof data['oauth_signature'] === 'string' || data['oauth_signature'] instanceof String)) {
            throw new Error("Expected the field `oauth_signature` to be a primitive type in the JSON string but got " + data['oauth_signature']);
        }
        // ensure the json data is a string
        if (data['oauth_signature_method'] && !(typeof data['oauth_signature_method'] === 'string' || data['oauth_signature_method'] instanceof String)) {
            throw new Error("Expected the field `oauth_signature_method` to be a primitive type in the JSON string but got " + data['oauth_signature_method']);
        }
        // ensure the json data is a string
        if (data['oauth_timestamp'] && !(typeof data['oauth_timestamp'] === 'string' || data['oauth_timestamp'] instanceof String)) {
            throw new Error("Expected the field `oauth_timestamp` to be a primitive type in the JSON string but got " + data['oauth_timestamp']);
        }
        // ensure the json data is a string
        if (data['oauth_token'] && !(typeof data['oauth_token'] === 'string' || data['oauth_token'] instanceof String)) {
            throw new Error("Expected the field `oauth_token` to be a primitive type in the JSON string but got " + data['oauth_token']);
        }

        return true;
    }


}



/**
 * Challenge value calculated using the Diffie-Hellman prime and generated provided during the registration process. See the \"OAuth at Interactive Brokers\" document for more details.  
 * @member {String} diffie_hellman_challenge
 */
OauthLiveSessionTokenPostRequest.prototype['diffie_hellman_challenge'] = undefined;

/**
 * The 25-character hexadecimal string that was obtained from Interactive Brokers during the OAuth consumer registration process.
 * @member {String} oauth_consumer_key
 */
OauthLiveSessionTokenPostRequest.prototype['oauth_consumer_key'] = undefined;

/**
 * A random string uniquely generated for each request.
 * @member {String} oauth_nonce
 */
OauthLiveSessionTokenPostRequest.prototype['oauth_nonce'] = undefined;

/**
 * The signature for the request generated using the method specified in the oauth_signature_method parameter. See section 9 of the OAuth v1.0a specification for more details on signing requests.
 * @member {String} oauth_signature
 */
OauthLiveSessionTokenPostRequest.prototype['oauth_signature'] = undefined;

/**
 * The signature method used to sign the request. Currently only 'RSA-SHA256' is supported.
 * @member {String} oauth_signature_method
 */
OauthLiveSessionTokenPostRequest.prototype['oauth_signature_method'] = undefined;

/**
 * Timestamp expressed in seconds since 1/1/1970 00:00:00 GMT. Must be a positive integer and greater than or equal to any timestamp used in previous requests.
 * @member {String} oauth_timestamp
 */
OauthLiveSessionTokenPostRequest.prototype['oauth_timestamp'] = undefined;

/**
 * The request token obtained from IB via /request_token.
 * @member {String} oauth_token
 */
OauthLiveSessionTokenPostRequest.prototype['oauth_token'] = undefined;






export default OauthLiveSessionTokenPostRequest;

