/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderType from './OrderType';
import TimeInForce from './TimeInForce';

/**
 * The AccountsAccountOrderImpactPostRequest model module.
 * @module model/AccountsAccountOrderImpactPostRequest
 * @version 1.0.0
 */
class AccountsAccountOrderImpactPostRequest {
    /**
     * Constructs a new <code>AccountsAccountOrderImpactPostRequest</code>.
     * @alias module:model/AccountsAccountOrderImpactPostRequest
     */
    constructor() { 
        
        AccountsAccountOrderImpactPostRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountsAccountOrderImpactPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountsAccountOrderImpactPostRequest} obj Optional instance to populate.
     * @return {module:model/AccountsAccountOrderImpactPostRequest} The populated <code>AccountsAccountOrderImpactPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountsAccountOrderImpactPostRequest();

            if (data.hasOwnProperty('Aux Price')) {
                obj['Aux Price'] = ApiClient.convertToType(data['Aux Price'], 'Number');
            }
            if (data.hasOwnProperty('ContractId')) {
                obj['ContractId'] = ApiClient.convertToType(data['ContractId'], 'Number');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('CustomerOrderId')) {
                obj['CustomerOrderId'] = ApiClient.convertToType(data['CustomerOrderId'], 'String');
            }
            if (data.hasOwnProperty('InstrumentType')) {
                obj['InstrumentType'] = ApiClient.convertToType(data['InstrumentType'], 'String');
            }
            if (data.hasOwnProperty('ListingExchange')) {
                obj['ListingExchange'] = ApiClient.convertToType(data['ListingExchange'], 'String');
            }
            if (data.hasOwnProperty('Order Type')) {
                obj['Order Type'] = OrderType.constructFromObject(data['Order Type']);
            }
            if (data.hasOwnProperty('Price')) {
                obj['Price'] = ApiClient.convertToType(data['Price'], 'Number');
            }
            if (data.hasOwnProperty('Quantity')) {
                obj['Quantity'] = ApiClient.convertToType(data['Quantity'], 'Number');
            }
            if (data.hasOwnProperty('Side')) {
                obj['Side'] = ApiClient.convertToType(data['Side'], 'Number');
            }
            if (data.hasOwnProperty('Ticker')) {
                obj['Ticker'] = ApiClient.convertToType(data['Ticker'], 'String');
            }
            if (data.hasOwnProperty('Time in Force')) {
                obj['Time in Force'] = TimeInForce.constructFromObject(data['Time in Force']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountsAccountOrderImpactPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountsAccountOrderImpactPostRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }
        // ensure the json data is a string
        if (data['CustomerOrderId'] && !(typeof data['CustomerOrderId'] === 'string' || data['CustomerOrderId'] instanceof String)) {
            throw new Error("Expected the field `CustomerOrderId` to be a primitive type in the JSON string but got " + data['CustomerOrderId']);
        }
        // ensure the json data is a string
        if (data['InstrumentType'] && !(typeof data['InstrumentType'] === 'string' || data['InstrumentType'] instanceof String)) {
            throw new Error("Expected the field `InstrumentType` to be a primitive type in the JSON string but got " + data['InstrumentType']);
        }
        // ensure the json data is a string
        if (data['ListingExchange'] && !(typeof data['ListingExchange'] === 'string' || data['ListingExchange'] instanceof String)) {
            throw new Error("Expected the field `ListingExchange` to be a primitive type in the JSON string but got " + data['ListingExchange']);
        }
        // ensure the json data is a string
        if (data['Ticker'] && !(typeof data['Ticker'] === 'string' || data['Ticker'] instanceof String)) {
            throw new Error("Expected the field `Ticker` to be a primitive type in the JSON string but got " + data['Ticker']);
        }

        return true;
    }


}



/**
 * Required price to support Stop and Stop Limit orders
 * @member {Number} Aux Price
 */
AccountsAccountOrderImpactPostRequest.prototype['Aux Price'] = undefined;

/**
 * The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)
 * @member {Number} ContractId
 */
AccountsAccountOrderImpactPostRequest.prototype['ContractId'] = undefined;

/**
 * The currency in which the FX pair trades (only for InstrumentType=CASH)
 * @member {String} Currency
 */
AccountsAccountOrderImpactPostRequest.prototype['Currency'] = undefined;

/**
 * The order ID assigned by the customer.
 * @member {String} CustomerOrderId
 */
AccountsAccountOrderImpactPostRequest.prototype['CustomerOrderId'] = undefined;

/**
 * The instrument type of the contract
 * @member {String} InstrumentType
 */
AccountsAccountOrderImpactPostRequest.prototype['InstrumentType'] = undefined;

/**
 * The exchange on which the trading product is listed (only for InstrumentType=STK)
 * @member {String} ListingExchange
 */
AccountsAccountOrderImpactPostRequest.prototype['ListingExchange'] = undefined;

/**
 * @member {module:model/OrderType} Order Type
 */
AccountsAccountOrderImpactPostRequest.prototype['Order Type'] = undefined;

/**
 * The order price
 * @member {Number} Price
 */
AccountsAccountOrderImpactPostRequest.prototype['Price'] = undefined;

/**
 * The number of units in the order; contracts or shares
 * @member {Number} Quantity
 */
AccountsAccountOrderImpactPostRequest.prototype['Quantity'] = undefined;

/**
 * Buy = '1', Sell = '2'
 * @member {module:model/AccountsAccountOrderImpactPostRequest.SideEnum} Side
 */
AccountsAccountOrderImpactPostRequest.prototype['Side'] = undefined;

/**
 * The symbol that identifies the trading product
 * @member {String} Ticker
 */
AccountsAccountOrderImpactPostRequest.prototype['Ticker'] = undefined;

/**
 * @member {module:model/TimeInForce} Time in Force
 */
AccountsAccountOrderImpactPostRequest.prototype['Time in Force'] = undefined;





/**
 * Allowed values for the <code>Side</code> property.
 * @enum {Number}
 * @readonly
 */
AccountsAccountOrderImpactPostRequest['SideEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2
};



export default AccountsAccountOrderImpactPostRequest;

