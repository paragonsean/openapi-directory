/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderStatus from './OrderStatus';
import OrderType from './OrderType';
import TimeInForce from './TimeInForce';

/**
 * The OrderState model module.
 * @module model/OrderState
 * @version 1.0.0
 */
class OrderState {
    /**
     * Constructs a new <code>OrderState</code>.
     * An object containing all the properties defining an order
     * @alias module:model/OrderState
     */
    constructor() { 
        
        OrderState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderState} obj Optional instance to populate.
     * @return {module:model/OrderState} The populated <code>OrderState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderState();

            if (data.hasOwnProperty('ContractId')) {
                obj['ContractId'] = ApiClient.convertToType(data['ContractId'], 'Number');
            }
            if (data.hasOwnProperty('CustomerOrderId')) {
                obj['CustomerOrderId'] = ApiClient.convertToType(data['CustomerOrderId'], 'Number');
            }
            if (data.hasOwnProperty('FilledQuantity')) {
                obj['FilledQuantity'] = ApiClient.convertToType(data['FilledQuantity'], 'Number');
            }
            if (data.hasOwnProperty('ListingExchange')) {
                obj['ListingExchange'] = ApiClient.convertToType(data['ListingExchange'], 'String');
            }
            if (data.hasOwnProperty('OrderType')) {
                obj['OrderType'] = OrderType.constructFromObject(data['OrderType']);
            }
            if (data.hasOwnProperty('OutsideRTH')) {
                obj['OutsideRTH'] = ApiClient.convertToType(data['OutsideRTH'], 'String');
            }
            if (data.hasOwnProperty('Price')) {
                obj['Price'] = ApiClient.convertToType(data['Price'], 'Number');
            }
            if (data.hasOwnProperty('RemainingQuantity')) {
                obj['RemainingQuantity'] = ApiClient.convertToType(data['RemainingQuantity'], 'Number');
            }
            if (data.hasOwnProperty('Side')) {
                obj['Side'] = ApiClient.convertToType(data['Side'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = OrderStatus.constructFromObject(data['Status']);
            }
            if (data.hasOwnProperty('Ticker')) {
                obj['Ticker'] = ApiClient.convertToType(data['Ticker'], 'String');
            }
            if (data.hasOwnProperty('TimeInForce')) {
                obj['TimeInForce'] = TimeInForce.constructFromObject(data['TimeInForce']);
            }
            if (data.hasOwnProperty('TransactionTime')) {
                obj['TransactionTime'] = ApiClient.convertToType(data['TransactionTime'], 'String');
            }
            if (data.hasOwnProperty('Warning')) {
                obj['Warning'] = ApiClient.convertToType(data['Warning'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ListingExchange'] && !(typeof data['ListingExchange'] === 'string' || data['ListingExchange'] instanceof String)) {
            throw new Error("Expected the field `ListingExchange` to be a primitive type in the JSON string but got " + data['ListingExchange']);
        }
        // ensure the json data is a string
        if (data['OutsideRTH'] && !(typeof data['OutsideRTH'] === 'string' || data['OutsideRTH'] instanceof String)) {
            throw new Error("Expected the field `OutsideRTH` to be a primitive type in the JSON string but got " + data['OutsideRTH']);
        }
        // ensure the json data is a string
        if (data['Side'] && !(typeof data['Side'] === 'string' || data['Side'] instanceof String)) {
            throw new Error("Expected the field `Side` to be a primitive type in the JSON string but got " + data['Side']);
        }
        // ensure the json data is a string
        if (data['Ticker'] && !(typeof data['Ticker'] === 'string' || data['Ticker'] instanceof String)) {
            throw new Error("Expected the field `Ticker` to be a primitive type in the JSON string but got " + data['Ticker']);
        }
        // ensure the json data is a string
        if (data['TransactionTime'] && !(typeof data['TransactionTime'] === 'string' || data['TransactionTime'] instanceof String)) {
            throw new Error("Expected the field `TransactionTime` to be a primitive type in the JSON string but got " + data['TransactionTime']);
        }
        // ensure the json data is a string
        if (data['Warning'] && !(typeof data['Warning'] === 'string' || data['Warning'] instanceof String)) {
            throw new Error("Expected the field `Warning` to be a primitive type in the JSON string but got " + data['Warning']);
        }

        return true;
    }


}



/**
 * @member {Number} ContractId
 */
OrderState.prototype['ContractId'] = undefined;

/**
 * @member {Number} CustomerOrderId
 */
OrderState.prototype['CustomerOrderId'] = undefined;

/**
 * @member {Number} FilledQuantity
 */
OrderState.prototype['FilledQuantity'] = undefined;

/**
 * @member {String} ListingExchange
 */
OrderState.prototype['ListingExchange'] = undefined;

/**
 * @member {module:model/OrderType} OrderType
 */
OrderState.prototype['OrderType'] = undefined;

/**
 * @member {String} OutsideRTH
 */
OrderState.prototype['OutsideRTH'] = undefined;

/**
 * @member {Number} Price
 */
OrderState.prototype['Price'] = undefined;

/**
 * @member {Number} RemainingQuantity
 */
OrderState.prototype['RemainingQuantity'] = undefined;

/**
 * @member {module:model/OrderState.SideEnum} Side
 */
OrderState.prototype['Side'] = undefined;

/**
 * @member {module:model/OrderStatus} Status
 */
OrderState.prototype['Status'] = undefined;

/**
 * @member {String} Ticker
 */
OrderState.prototype['Ticker'] = undefined;

/**
 * @member {module:model/TimeInForce} TimeInForce
 */
OrderState.prototype['TimeInForce'] = undefined;

/**
 * @member {String} TransactionTime
 */
OrderState.prototype['TransactionTime'] = undefined;

/**
 * @member {String} Warning
 */
OrderState.prototype['Warning'] = undefined;





/**
 * Allowed values for the <code>Side</code> property.
 * @enum {String}
 * @readonly
 */
OrderState['SideEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2"
};



export default OrderState;

