/**
 * IBKR 3rd Party Web API
 * Interactive Brokers Web API for 3rd Party Companies
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderType from './OrderType';
import TimeInForce from './TimeInForce';

/**
 * The AccountsAccountOrdersPostRequest model module.
 * @module model/AccountsAccountOrdersPostRequest
 * @version 1.0.0
 */
class AccountsAccountOrdersPostRequest {
    /**
     * Constructs a new <code>AccountsAccountOrdersPostRequest</code>.
     * @alias module:model/AccountsAccountOrdersPostRequest
     */
    constructor() { 
        
        AccountsAccountOrdersPostRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountsAccountOrdersPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountsAccountOrdersPostRequest} obj Optional instance to populate.
     * @return {module:model/AccountsAccountOrdersPostRequest} The populated <code>AccountsAccountOrdersPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountsAccountOrdersPostRequest();

            if (data.hasOwnProperty('Aux Price')) {
                obj['Aux Price'] = ApiClient.convertToType(data['Aux Price'], 'Number');
            }
            if (data.hasOwnProperty('ContractId')) {
                obj['ContractId'] = ApiClient.convertToType(data['ContractId'], 'Number');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('CustomerOrderId')) {
                obj['CustomerOrderId'] = ApiClient.convertToType(data['CustomerOrderId'], 'String');
            }
            if (data.hasOwnProperty('GermanHftAlgo')) {
                obj['GermanHftAlgo'] = ApiClient.convertToType(data['GermanHftAlgo'], 'Boolean');
            }
            if (data.hasOwnProperty('InstrumentType')) {
                obj['InstrumentType'] = ApiClient.convertToType(data['InstrumentType'], 'String');
            }
            if (data.hasOwnProperty('ListingExchange')) {
                obj['ListingExchange'] = ApiClient.convertToType(data['ListingExchange'], 'String');
            }
            if (data.hasOwnProperty('Mifid2Algo')) {
                obj['Mifid2Algo'] = ApiClient.convertToType(data['Mifid2Algo'], 'String');
            }
            if (data.hasOwnProperty('Mifid2DecisionMaker')) {
                obj['Mifid2DecisionMaker'] = ApiClient.convertToType(data['Mifid2DecisionMaker'], 'String');
            }
            if (data.hasOwnProperty('Mifid2ExecutionAlgo')) {
                obj['Mifid2ExecutionAlgo'] = ApiClient.convertToType(data['Mifid2ExecutionAlgo'], 'String');
            }
            if (data.hasOwnProperty('Mifid2ExecutionTrader')) {
                obj['Mifid2ExecutionTrader'] = ApiClient.convertToType(data['Mifid2ExecutionTrader'], 'String');
            }
            if (data.hasOwnProperty('Order Type')) {
                obj['Order Type'] = OrderType.constructFromObject(data['Order Type']);
            }
            if (data.hasOwnProperty('OrderRestrictions')) {
                obj['OrderRestrictions'] = ApiClient.convertToType(data['OrderRestrictions'], 'Number');
            }
            if (data.hasOwnProperty('Outside RTH')) {
                obj['Outside RTH'] = ApiClient.convertToType(data['Outside RTH'], 'Number');
            }
            if (data.hasOwnProperty('Price')) {
                obj['Price'] = ApiClient.convertToType(data['Price'], 'Number');
            }
            if (data.hasOwnProperty('Quantity')) {
                obj['Quantity'] = ApiClient.convertToType(data['Quantity'], 'Number');
            }
            if (data.hasOwnProperty('Side')) {
                obj['Side'] = ApiClient.convertToType(data['Side'], 'Number');
            }
            if (data.hasOwnProperty('Ticker')) {
                obj['Ticker'] = ApiClient.convertToType(data['Ticker'], 'String');
            }
            if (data.hasOwnProperty('Time in Force')) {
                obj['Time in Force'] = TimeInForce.constructFromObject(data['Time in Force']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountsAccountOrdersPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountsAccountOrdersPostRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }
        // ensure the json data is a string
        if (data['CustomerOrderId'] && !(typeof data['CustomerOrderId'] === 'string' || data['CustomerOrderId'] instanceof String)) {
            throw new Error("Expected the field `CustomerOrderId` to be a primitive type in the JSON string but got " + data['CustomerOrderId']);
        }
        // ensure the json data is a string
        if (data['InstrumentType'] && !(typeof data['InstrumentType'] === 'string' || data['InstrumentType'] instanceof String)) {
            throw new Error("Expected the field `InstrumentType` to be a primitive type in the JSON string but got " + data['InstrumentType']);
        }
        // ensure the json data is a string
        if (data['ListingExchange'] && !(typeof data['ListingExchange'] === 'string' || data['ListingExchange'] instanceof String)) {
            throw new Error("Expected the field `ListingExchange` to be a primitive type in the JSON string but got " + data['ListingExchange']);
        }
        // ensure the json data is a string
        if (data['Mifid2Algo'] && !(typeof data['Mifid2Algo'] === 'string' || data['Mifid2Algo'] instanceof String)) {
            throw new Error("Expected the field `Mifid2Algo` to be a primitive type in the JSON string but got " + data['Mifid2Algo']);
        }
        // ensure the json data is a string
        if (data['Mifid2DecisionMaker'] && !(typeof data['Mifid2DecisionMaker'] === 'string' || data['Mifid2DecisionMaker'] instanceof String)) {
            throw new Error("Expected the field `Mifid2DecisionMaker` to be a primitive type in the JSON string but got " + data['Mifid2DecisionMaker']);
        }
        // ensure the json data is a string
        if (data['Mifid2ExecutionAlgo'] && !(typeof data['Mifid2ExecutionAlgo'] === 'string' || data['Mifid2ExecutionAlgo'] instanceof String)) {
            throw new Error("Expected the field `Mifid2ExecutionAlgo` to be a primitive type in the JSON string but got " + data['Mifid2ExecutionAlgo']);
        }
        // ensure the json data is a string
        if (data['Mifid2ExecutionTrader'] && !(typeof data['Mifid2ExecutionTrader'] === 'string' || data['Mifid2ExecutionTrader'] instanceof String)) {
            throw new Error("Expected the field `Mifid2ExecutionTrader` to be a primitive type in the JSON string but got " + data['Mifid2ExecutionTrader']);
        }
        // ensure the json data is a string
        if (data['Ticker'] && !(typeof data['Ticker'] === 'string' || data['Ticker'] instanceof String)) {
            throw new Error("Expected the field `Ticker` to be a primitive type in the JSON string but got " + data['Ticker']);
        }

        return true;
    }


}



/**
 * Required Price to support Stop and Stop Limit orders
 * @member {Number} Aux Price
 */
AccountsAccountOrdersPostRequest.prototype['Aux Price'] = undefined;

/**
 * The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)
 * @member {Number} ContractId
 */
AccountsAccountOrdersPostRequest.prototype['ContractId'] = undefined;

/**
 * The currency in which the FX pair trades (only for InstrumentType=CASH)
 * @member {String} Currency
 */
AccountsAccountOrdersPostRequest.prototype['Currency'] = undefined;

/**
 * The order ID assigned by the customer.
 * @member {String} CustomerOrderId
 */
AccountsAccountOrdersPostRequest.prototype['CustomerOrderId'] = undefined;

/**
 * By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected.
 * @member {Boolean} GermanHftAlgo
 */
AccountsAccountOrdersPostRequest.prototype['GermanHftAlgo'] = undefined;

/**
 * The instrument type of the contract
 * @member {String} InstrumentType
 */
AccountsAccountOrdersPostRequest.prototype['InstrumentType'] = undefined;

/**
 * The exchange on which the trading product is listed (only for InstrumentType=STK)
 * @member {String} ListingExchange
 */
AccountsAccountOrdersPostRequest.prototype['ListingExchange'] = undefined;

/**
 * This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions
 * @member {String} Mifid2Algo
 */
AccountsAccountOrdersPostRequest.prototype['Mifid2Algo'] = undefined;

/**
 * This field permits specification of the user's preregistered (via account management) MiFID II short code for decision makers.
 * @member {String} Mifid2DecisionMaker
 */
AccountsAccountOrdersPostRequest.prototype['Mifid2DecisionMaker'] = undefined;

/**
 * This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order.
 * @member {String} Mifid2ExecutionAlgo
 */
AccountsAccountOrdersPostRequest.prototype['Mifid2ExecutionAlgo'] = undefined;

/**
 * This field permits specification of the user's preregistered (via account management) MiFID II person responsible for handling/routing of the order
 * @member {String} Mifid2ExecutionTrader
 */
AccountsAccountOrdersPostRequest.prototype['Mifid2ExecutionTrader'] = undefined;

/**
 * @member {module:model/OrderType} Order Type
 */
AccountsAccountOrdersPostRequest.prototype['Order Type'] = undefined;

/**
 * MultiValueString representing the restrictions associated with an order. If more than one restriction is applicable to an order, this field can contain multiple instructions separated by space.  '1' Program Trade '2' Index Arbitrage  '3' Non-Index Arbitrage 
 * @member {Number} OrderRestrictions
 */
AccountsAccountOrdersPostRequest.prototype['OrderRestrictions'] = undefined;

/**
 * Indicates if order is active outside regular trading hours, where defined. 0 = no (default), 1 = yes
 * @member {Number} Outside RTH
 */
AccountsAccountOrdersPostRequest.prototype['Outside RTH'] = undefined;

/**
 * The order price
 * @member {Number} Price
 */
AccountsAccountOrdersPostRequest.prototype['Price'] = undefined;

/**
 * The number of units in the order; contracts or shares
 * @member {Number} Quantity
 */
AccountsAccountOrdersPostRequest.prototype['Quantity'] = undefined;

/**
 * Buy = '1', Sell = '2'
 * @member {module:model/AccountsAccountOrdersPostRequest.SideEnum} Side
 */
AccountsAccountOrdersPostRequest.prototype['Side'] = undefined;

/**
 * The symbol that identifies the trading product
 * @member {String} Ticker
 */
AccountsAccountOrdersPostRequest.prototype['Ticker'] = undefined;

/**
 * @member {module:model/TimeInForce} Time in Force
 */
AccountsAccountOrdersPostRequest.prototype['Time in Force'] = undefined;





/**
 * Allowed values for the <code>Side</code> property.
 * @enum {Number}
 * @readonly
 */
AccountsAccountOrdersPostRequest['SideEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2
};



export default AccountsAccountOrdersPostRequest;

