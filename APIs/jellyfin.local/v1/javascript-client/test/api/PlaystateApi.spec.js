/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.PlaystateApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PlaystateApi', function() {
    describe('markPlayedItem', function() {
      it('should call markPlayedItem successfully', function(done) {
        //uncomment below and update the code to test markPlayedItem
        //instance.markPlayedItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markUnplayedItem', function() {
      it('should call markUnplayedItem successfully', function(done) {
        //uncomment below and update the code to test markUnplayedItem
        //instance.markUnplayedItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('onPlaybackProgress', function() {
      it('should call onPlaybackProgress successfully', function(done) {
        //uncomment below and update the code to test onPlaybackProgress
        //instance.onPlaybackProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('onPlaybackStart', function() {
      it('should call onPlaybackStart successfully', function(done) {
        //uncomment below and update the code to test onPlaybackStart
        //instance.onPlaybackStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('onPlaybackStopped', function() {
      it('should call onPlaybackStopped successfully', function(done) {
        //uncomment below and update the code to test onPlaybackStopped
        //instance.onPlaybackStopped(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pingPlaybackSession', function() {
      it('should call pingPlaybackSession successfully', function(done) {
        //uncomment below and update the code to test pingPlaybackSession
        //instance.pingPlaybackSession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportPlaybackProgress', function() {
      it('should call reportPlaybackProgress successfully', function(done) {
        //uncomment below and update the code to test reportPlaybackProgress
        //instance.reportPlaybackProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportPlaybackStart', function() {
      it('should call reportPlaybackStart successfully', function(done) {
        //uncomment below and update the code to test reportPlaybackStart
        //instance.reportPlaybackStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportPlaybackStopped', function() {
      it('should call reportPlaybackStopped successfully', function(done) {
        //uncomment below and update the code to test reportPlaybackStopped
        //instance.reportPlaybackStopped(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
