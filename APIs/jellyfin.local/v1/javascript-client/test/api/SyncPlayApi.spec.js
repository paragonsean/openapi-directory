/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.SyncPlayApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SyncPlayApi', function() {
    describe('syncPlayBuffering', function() {
      it('should call syncPlayBuffering successfully', function(done) {
        //uncomment below and update the code to test syncPlayBuffering
        //instance.syncPlayBuffering(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayCreateGroup', function() {
      it('should call syncPlayCreateGroup successfully', function(done) {
        //uncomment below and update the code to test syncPlayCreateGroup
        //instance.syncPlayCreateGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayGetGroups', function() {
      it('should call syncPlayGetGroups successfully', function(done) {
        //uncomment below and update the code to test syncPlayGetGroups
        //instance.syncPlayGetGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayJoinGroup', function() {
      it('should call syncPlayJoinGroup successfully', function(done) {
        //uncomment below and update the code to test syncPlayJoinGroup
        //instance.syncPlayJoinGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayLeaveGroup', function() {
      it('should call syncPlayLeaveGroup successfully', function(done) {
        //uncomment below and update the code to test syncPlayLeaveGroup
        //instance.syncPlayLeaveGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayMovePlaylistItem', function() {
      it('should call syncPlayMovePlaylistItem successfully', function(done) {
        //uncomment below and update the code to test syncPlayMovePlaylistItem
        //instance.syncPlayMovePlaylistItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayNextItem', function() {
      it('should call syncPlayNextItem successfully', function(done) {
        //uncomment below and update the code to test syncPlayNextItem
        //instance.syncPlayNextItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayPause', function() {
      it('should call syncPlayPause successfully', function(done) {
        //uncomment below and update the code to test syncPlayPause
        //instance.syncPlayPause(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayPing', function() {
      it('should call syncPlayPing successfully', function(done) {
        //uncomment below and update the code to test syncPlayPing
        //instance.syncPlayPing(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayPreviousItem', function() {
      it('should call syncPlayPreviousItem successfully', function(done) {
        //uncomment below and update the code to test syncPlayPreviousItem
        //instance.syncPlayPreviousItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayQueue', function() {
      it('should call syncPlayQueue successfully', function(done) {
        //uncomment below and update the code to test syncPlayQueue
        //instance.syncPlayQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayReady', function() {
      it('should call syncPlayReady successfully', function(done) {
        //uncomment below and update the code to test syncPlayReady
        //instance.syncPlayReady(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayRemoveFromPlaylist', function() {
      it('should call syncPlayRemoveFromPlaylist successfully', function(done) {
        //uncomment below and update the code to test syncPlayRemoveFromPlaylist
        //instance.syncPlayRemoveFromPlaylist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlaySeek', function() {
      it('should call syncPlaySeek successfully', function(done) {
        //uncomment below and update the code to test syncPlaySeek
        //instance.syncPlaySeek(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlaySetIgnoreWait', function() {
      it('should call syncPlaySetIgnoreWait successfully', function(done) {
        //uncomment below and update the code to test syncPlaySetIgnoreWait
        //instance.syncPlaySetIgnoreWait(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlaySetNewQueue', function() {
      it('should call syncPlaySetNewQueue successfully', function(done) {
        //uncomment below and update the code to test syncPlaySetNewQueue
        //instance.syncPlaySetNewQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlaySetPlaylistItem', function() {
      it('should call syncPlaySetPlaylistItem successfully', function(done) {
        //uncomment below and update the code to test syncPlaySetPlaylistItem
        //instance.syncPlaySetPlaylistItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlaySetRepeatMode', function() {
      it('should call syncPlaySetRepeatMode successfully', function(done) {
        //uncomment below and update the code to test syncPlaySetRepeatMode
        //instance.syncPlaySetRepeatMode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlaySetShuffleMode', function() {
      it('should call syncPlaySetShuffleMode successfully', function(done) {
        //uncomment below and update the code to test syncPlaySetShuffleMode
        //instance.syncPlaySetShuffleMode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayStop', function() {
      it('should call syncPlayStop successfully', function(done) {
        //uncomment below and update the code to test syncPlayStop
        //instance.syncPlayStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncPlayUnpause', function() {
      it('should call syncPlayUnpause successfully', function(done) {
        //uncomment below and update the code to test syncPlayUnpause
        //instance.syncPlayUnpause(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
