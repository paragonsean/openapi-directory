/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.SystemInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SystemInfo', function() {
    it('should create an instance of SystemInfo', function() {
      // uncomment below and update the code to test SystemInfo
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be.a(JellyfinApi.SystemInfo);
    });

    it('should have the property cachePath (base name: "CachePath")', function() {
      // uncomment below and update the code to test the property cachePath
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property canLaunchWebBrowser (base name: "CanLaunchWebBrowser")', function() {
      // uncomment below and update the code to test the property canLaunchWebBrowser
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property canSelfRestart (base name: "CanSelfRestart")', function() {
      // uncomment below and update the code to test the property canSelfRestart
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property completedInstallations (base name: "CompletedInstallations")', function() {
      // uncomment below and update the code to test the property completedInstallations
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property encoderLocation (base name: "EncoderLocation")', function() {
      // uncomment below and update the code to test the property encoderLocation
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property hasPendingRestart (base name: "HasPendingRestart")', function() {
      // uncomment below and update the code to test the property hasPendingRestart
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property hasUpdateAvailable (base name: "HasUpdateAvailable")', function() {
      // uncomment below and update the code to test the property hasUpdateAvailable
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property internalMetadataPath (base name: "InternalMetadataPath")', function() {
      // uncomment below and update the code to test the property internalMetadataPath
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property isShuttingDown (base name: "IsShuttingDown")', function() {
      // uncomment below and update the code to test the property isShuttingDown
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property itemsByNamePath (base name: "ItemsByNamePath")', function() {
      // uncomment below and update the code to test the property itemsByNamePath
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property localAddress (base name: "LocalAddress")', function() {
      // uncomment below and update the code to test the property localAddress
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property logPath (base name: "LogPath")', function() {
      // uncomment below and update the code to test the property logPath
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property operatingSystem (base name: "OperatingSystem")', function() {
      // uncomment below and update the code to test the property operatingSystem
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property operatingSystemDisplayName (base name: "OperatingSystemDisplayName")', function() {
      // uncomment below and update the code to test the property operatingSystemDisplayName
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property packageName (base name: "PackageName")', function() {
      // uncomment below and update the code to test the property packageName
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property productName (base name: "ProductName")', function() {
      // uncomment below and update the code to test the property productName
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property programDataPath (base name: "ProgramDataPath")', function() {
      // uncomment below and update the code to test the property programDataPath
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property serverName (base name: "ServerName")', function() {
      // uncomment below and update the code to test the property serverName
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property startupWizardCompleted (base name: "StartupWizardCompleted")', function() {
      // uncomment below and update the code to test the property startupWizardCompleted
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportsLibraryMonitor (base name: "SupportsLibraryMonitor")', function() {
      // uncomment below and update the code to test the property supportsLibraryMonitor
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property systemArchitecture (base name: "SystemArchitecture")', function() {
      // uncomment below and update the code to test the property systemArchitecture
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property transcodingTempPath (base name: "TranscodingTempPath")', function() {
      // uncomment below and update the code to test the property transcodingTempPath
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "Version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property webPath (base name: "WebPath")', function() {
      // uncomment below and update the code to test the property webPath
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

    it('should have the property webSocketPortNumber (base name: "WebSocketPortNumber")', function() {
      // uncomment below and update the code to test the property webSocketPortNumber
      //var instance = new JellyfinApi.SystemInfo();
      //expect(instance).to.be();
    });

  });

}));
