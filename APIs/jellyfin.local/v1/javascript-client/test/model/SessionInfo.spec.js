/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.SessionInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SessionInfo', function() {
    it('should create an instance of SessionInfo', function() {
      // uncomment below and update the code to test SessionInfo
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be.a(JellyfinApi.SessionInfo);
    });

    it('should have the property additionalUsers (base name: "AdditionalUsers")', function() {
      // uncomment below and update the code to test the property additionalUsers
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property applicationVersion (base name: "ApplicationVersion")', function() {
      // uncomment below and update the code to test the property applicationVersion
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property capabilities (base name: "Capabilities")', function() {
      // uncomment below and update the code to test the property capabilities
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property client (base name: "Client")', function() {
      // uncomment below and update the code to test the property client
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property deviceId (base name: "DeviceId")', function() {
      // uncomment below and update the code to test the property deviceId
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property deviceName (base name: "DeviceName")', function() {
      // uncomment below and update the code to test the property deviceName
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property deviceType (base name: "DeviceType")', function() {
      // uncomment below and update the code to test the property deviceType
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property fullNowPlayingItem (base name: "FullNowPlayingItem")', function() {
      // uncomment below and update the code to test the property fullNowPlayingItem
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property hasCustomDeviceName (base name: "HasCustomDeviceName")', function() {
      // uncomment below and update the code to test the property hasCustomDeviceName
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property isActive (base name: "IsActive")', function() {
      // uncomment below and update the code to test the property isActive
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property lastActivityDate (base name: "LastActivityDate")', function() {
      // uncomment below and update the code to test the property lastActivityDate
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property lastPlaybackCheckIn (base name: "LastPlaybackCheckIn")', function() {
      // uncomment below and update the code to test the property lastPlaybackCheckIn
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property nowPlayingItem (base name: "NowPlayingItem")', function() {
      // uncomment below and update the code to test the property nowPlayingItem
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property nowPlayingQueue (base name: "NowPlayingQueue")', function() {
      // uncomment below and update the code to test the property nowPlayingQueue
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property nowViewingItem (base name: "NowViewingItem")', function() {
      // uncomment below and update the code to test the property nowViewingItem
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property playState (base name: "PlayState")', function() {
      // uncomment below and update the code to test the property playState
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property playableMediaTypes (base name: "PlayableMediaTypes")', function() {
      // uncomment below and update the code to test the property playableMediaTypes
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property playlistItemId (base name: "PlaylistItemId")', function() {
      // uncomment below and update the code to test the property playlistItemId
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property remoteEndPoint (base name: "RemoteEndPoint")', function() {
      // uncomment below and update the code to test the property remoteEndPoint
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property serverId (base name: "ServerId")', function() {
      // uncomment below and update the code to test the property serverId
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportedCommands (base name: "SupportedCommands")', function() {
      // uncomment below and update the code to test the property supportedCommands
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportsMediaControl (base name: "SupportsMediaControl")', function() {
      // uncomment below and update the code to test the property supportsMediaControl
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportsRemoteControl (base name: "SupportsRemoteControl")', function() {
      // uncomment below and update the code to test the property supportsRemoteControl
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property transcodingInfo (base name: "TranscodingInfo")', function() {
      // uncomment below and update the code to test the property transcodingInfo
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "UserId")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property userName (base name: "UserName")', function() {
      // uncomment below and update the code to test the property userName
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

    it('should have the property userPrimaryImageTag (base name: "UserPrimaryImageTag")', function() {
      // uncomment below and update the code to test the property userPrimaryImageTag
      //var instance = new JellyfinApi.SessionInfo();
      //expect(instance).to.be();
    });

  });

}));
