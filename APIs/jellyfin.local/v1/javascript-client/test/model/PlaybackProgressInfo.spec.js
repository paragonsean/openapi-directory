/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.PlaybackProgressInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PlaybackProgressInfo', function() {
    it('should create an instance of PlaybackProgressInfo', function() {
      // uncomment below and update the code to test PlaybackProgressInfo
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be.a(JellyfinApi.PlaybackProgressInfo);
    });

    it('should have the property aspectRatio (base name: "AspectRatio")', function() {
      // uncomment below and update the code to test the property aspectRatio
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property audioStreamIndex (base name: "AudioStreamIndex")', function() {
      // uncomment below and update the code to test the property audioStreamIndex
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property brightness (base name: "Brightness")', function() {
      // uncomment below and update the code to test the property brightness
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property canSeek (base name: "CanSeek")', function() {
      // uncomment below and update the code to test the property canSeek
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property isMuted (base name: "IsMuted")', function() {
      // uncomment below and update the code to test the property isMuted
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property isPaused (base name: "IsPaused")', function() {
      // uncomment below and update the code to test the property isPaused
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property item (base name: "Item")', function() {
      // uncomment below and update the code to test the property item
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property itemId (base name: "ItemId")', function() {
      // uncomment below and update the code to test the property itemId
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property liveStreamId (base name: "LiveStreamId")', function() {
      // uncomment below and update the code to test the property liveStreamId
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property mediaSourceId (base name: "MediaSourceId")', function() {
      // uncomment below and update the code to test the property mediaSourceId
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property nowPlayingQueue (base name: "NowPlayingQueue")', function() {
      // uncomment below and update the code to test the property nowPlayingQueue
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property playMethod (base name: "PlayMethod")', function() {
      // uncomment below and update the code to test the property playMethod
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property playSessionId (base name: "PlaySessionId")', function() {
      // uncomment below and update the code to test the property playSessionId
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property playbackStartTimeTicks (base name: "PlaybackStartTimeTicks")', function() {
      // uncomment below and update the code to test the property playbackStartTimeTicks
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property playlistItemId (base name: "PlaylistItemId")', function() {
      // uncomment below and update the code to test the property playlistItemId
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property positionTicks (base name: "PositionTicks")', function() {
      // uncomment below and update the code to test the property positionTicks
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property repeatMode (base name: "RepeatMode")', function() {
      // uncomment below and update the code to test the property repeatMode
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property sessionId (base name: "SessionId")', function() {
      // uncomment below and update the code to test the property sessionId
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property subtitleStreamIndex (base name: "SubtitleStreamIndex")', function() {
      // uncomment below and update the code to test the property subtitleStreamIndex
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

    it('should have the property volumeLevel (base name: "VolumeLevel")', function() {
      // uncomment below and update the code to test the property volumeLevel
      //var instance = new JellyfinApi.PlaybackProgressInfo();
      //expect(instance).to.be();
    });

  });

}));
