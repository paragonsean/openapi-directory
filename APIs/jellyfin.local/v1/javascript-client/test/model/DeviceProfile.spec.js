/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.DeviceProfile();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeviceProfile', function() {
    it('should create an instance of DeviceProfile', function() {
      // uncomment below and update the code to test DeviceProfile
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be.a(JellyfinApi.DeviceProfile);
    });

    it('should have the property albumArtPn (base name: "AlbumArtPn")', function() {
      // uncomment below and update the code to test the property albumArtPn
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property codecProfiles (base name: "CodecProfiles")', function() {
      // uncomment below and update the code to test the property codecProfiles
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property containerProfiles (base name: "ContainerProfiles")', function() {
      // uncomment below and update the code to test the property containerProfiles
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property directPlayProfiles (base name: "DirectPlayProfiles")', function() {
      // uncomment below and update the code to test the property directPlayProfiles
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property enableAlbumArtInDidl (base name: "EnableAlbumArtInDidl")', function() {
      // uncomment below and update the code to test the property enableAlbumArtInDidl
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property enableMSMediaReceiverRegistrar (base name: "EnableMSMediaReceiverRegistrar")', function() {
      // uncomment below and update the code to test the property enableMSMediaReceiverRegistrar
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property enableSingleAlbumArtLimit (base name: "EnableSingleAlbumArtLimit")', function() {
      // uncomment below and update the code to test the property enableSingleAlbumArtLimit
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property enableSingleSubtitleLimit (base name: "EnableSingleSubtitleLimit")', function() {
      // uncomment below and update the code to test the property enableSingleSubtitleLimit
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property friendlyName (base name: "FriendlyName")', function() {
      // uncomment below and update the code to test the property friendlyName
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property identification (base name: "Identification")', function() {
      // uncomment below and update the code to test the property identification
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property ignoreTranscodeByteRangeRequests (base name: "IgnoreTranscodeByteRangeRequests")', function() {
      // uncomment below and update the code to test the property ignoreTranscodeByteRangeRequests
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property manufacturer (base name: "Manufacturer")', function() {
      // uncomment below and update the code to test the property manufacturer
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property manufacturerUrl (base name: "ManufacturerUrl")', function() {
      // uncomment below and update the code to test the property manufacturerUrl
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property maxAlbumArtHeight (base name: "MaxAlbumArtHeight")', function() {
      // uncomment below and update the code to test the property maxAlbumArtHeight
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property maxAlbumArtWidth (base name: "MaxAlbumArtWidth")', function() {
      // uncomment below and update the code to test the property maxAlbumArtWidth
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property maxIconHeight (base name: "MaxIconHeight")', function() {
      // uncomment below and update the code to test the property maxIconHeight
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property maxIconWidth (base name: "MaxIconWidth")', function() {
      // uncomment below and update the code to test the property maxIconWidth
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property maxStaticBitrate (base name: "MaxStaticBitrate")', function() {
      // uncomment below and update the code to test the property maxStaticBitrate
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property maxStaticMusicBitrate (base name: "MaxStaticMusicBitrate")', function() {
      // uncomment below and update the code to test the property maxStaticMusicBitrate
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property maxStreamingBitrate (base name: "MaxStreamingBitrate")', function() {
      // uncomment below and update the code to test the property maxStreamingBitrate
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property modelDescription (base name: "ModelDescription")', function() {
      // uncomment below and update the code to test the property modelDescription
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property modelName (base name: "ModelName")', function() {
      // uncomment below and update the code to test the property modelName
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property modelNumber (base name: "ModelNumber")', function() {
      // uncomment below and update the code to test the property modelNumber
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property modelUrl (base name: "ModelUrl")', function() {
      // uncomment below and update the code to test the property modelUrl
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property musicStreamingTranscodingBitrate (base name: "MusicStreamingTranscodingBitrate")', function() {
      // uncomment below and update the code to test the property musicStreamingTranscodingBitrate
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property protocolInfo (base name: "ProtocolInfo")', function() {
      // uncomment below and update the code to test the property protocolInfo
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property requiresPlainFolders (base name: "RequiresPlainFolders")', function() {
      // uncomment below and update the code to test the property requiresPlainFolders
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property requiresPlainVideoItems (base name: "RequiresPlainVideoItems")', function() {
      // uncomment below and update the code to test the property requiresPlainVideoItems
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property responseProfiles (base name: "ResponseProfiles")', function() {
      // uncomment below and update the code to test the property responseProfiles
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "SerialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property sonyAggregationFlags (base name: "SonyAggregationFlags")', function() {
      // uncomment below and update the code to test the property sonyAggregationFlags
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property subtitleProfiles (base name: "SubtitleProfiles")', function() {
      // uncomment below and update the code to test the property subtitleProfiles
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportedMediaTypes (base name: "SupportedMediaTypes")', function() {
      // uncomment below and update the code to test the property supportedMediaTypes
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property timelineOffsetSeconds (base name: "TimelineOffsetSeconds")', function() {
      // uncomment below and update the code to test the property timelineOffsetSeconds
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property transcodingProfiles (base name: "TranscodingProfiles")', function() {
      // uncomment below and update the code to test the property transcodingProfiles
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "UserId")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property xmlRootAttributes (base name: "XmlRootAttributes")', function() {
      // uncomment below and update the code to test the property xmlRootAttributes
      //var instance = new JellyfinApi.DeviceProfile();
      //expect(instance).to.be();
    });

  });

}));
