/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.SearchHint();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SearchHint', function() {
    it('should create an instance of SearchHint', function() {
      // uncomment below and update the code to test SearchHint
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be.a(JellyfinApi.SearchHint);
    });

    it('should have the property album (base name: "Album")', function() {
      // uncomment below and update the code to test the property album
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property albumArtist (base name: "AlbumArtist")', function() {
      // uncomment below and update the code to test the property albumArtist
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property albumId (base name: "AlbumId")', function() {
      // uncomment below and update the code to test the property albumId
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property artists (base name: "Artists")', function() {
      // uncomment below and update the code to test the property artists
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property backdropImageItemId (base name: "BackdropImageItemId")', function() {
      // uncomment below and update the code to test the property backdropImageItemId
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property backdropImageTag (base name: "BackdropImageTag")', function() {
      // uncomment below and update the code to test the property backdropImageTag
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property channelId (base name: "ChannelId")', function() {
      // uncomment below and update the code to test the property channelId
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property channelName (base name: "ChannelName")', function() {
      // uncomment below and update the code to test the property channelName
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "EndDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property episodeCount (base name: "EpisodeCount")', function() {
      // uncomment below and update the code to test the property episodeCount
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property indexNumber (base name: "IndexNumber")', function() {
      // uncomment below and update the code to test the property indexNumber
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property isFolder (base name: "IsFolder")', function() {
      // uncomment below and update the code to test the property isFolder
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property itemId (base name: "ItemId")', function() {
      // uncomment below and update the code to test the property itemId
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property matchedTerm (base name: "MatchedTerm")', function() {
      // uncomment below and update the code to test the property matchedTerm
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property mediaType (base name: "MediaType")', function() {
      // uncomment below and update the code to test the property mediaType
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property parentIndexNumber (base name: "ParentIndexNumber")', function() {
      // uncomment below and update the code to test the property parentIndexNumber
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property primaryImageAspectRatio (base name: "PrimaryImageAspectRatio")', function() {
      // uncomment below and update the code to test the property primaryImageAspectRatio
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property primaryImageTag (base name: "PrimaryImageTag")', function() {
      // uncomment below and update the code to test the property primaryImageTag
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property productionYear (base name: "ProductionYear")', function() {
      // uncomment below and update the code to test the property productionYear
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property runTimeTicks (base name: "RunTimeTicks")', function() {
      // uncomment below and update the code to test the property runTimeTicks
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property series (base name: "Series")', function() {
      // uncomment below and update the code to test the property series
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property songCount (base name: "SongCount")', function() {
      // uncomment below and update the code to test the property songCount
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "StartDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property thumbImageItemId (base name: "ThumbImageItemId")', function() {
      // uncomment below and update the code to test the property thumbImageItemId
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property thumbImageTag (base name: "ThumbImageTag")', function() {
      // uncomment below and update the code to test the property thumbImageTag
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new JellyfinApi.SearchHint();
      //expect(instance).to.be();
    });

  });

}));
