/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.LibraryOptions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LibraryOptions', function() {
    it('should create an instance of LibraryOptions', function() {
      // uncomment below and update the code to test LibraryOptions
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be.a(JellyfinApi.LibraryOptions);
    });

    it('should have the property automaticRefreshIntervalDays (base name: "AutomaticRefreshIntervalDays")', function() {
      // uncomment below and update the code to test the property automaticRefreshIntervalDays
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property disabledLocalMetadataReaders (base name: "DisabledLocalMetadataReaders")', function() {
      // uncomment below and update the code to test the property disabledLocalMetadataReaders
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property disabledSubtitleFetchers (base name: "DisabledSubtitleFetchers")', function() {
      // uncomment below and update the code to test the property disabledSubtitleFetchers
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property enableAutomaticSeriesGrouping (base name: "EnableAutomaticSeriesGrouping")', function() {
      // uncomment below and update the code to test the property enableAutomaticSeriesGrouping
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property enableChapterImageExtraction (base name: "EnableChapterImageExtraction")', function() {
      // uncomment below and update the code to test the property enableChapterImageExtraction
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property enableEmbeddedEpisodeInfos (base name: "EnableEmbeddedEpisodeInfos")', function() {
      // uncomment below and update the code to test the property enableEmbeddedEpisodeInfos
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property enableEmbeddedTitles (base name: "EnableEmbeddedTitles")', function() {
      // uncomment below and update the code to test the property enableEmbeddedTitles
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property enableInternetProviders (base name: "EnableInternetProviders")', function() {
      // uncomment below and update the code to test the property enableInternetProviders
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property enablePhotos (base name: "EnablePhotos")', function() {
      // uncomment below and update the code to test the property enablePhotos
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property enableRealtimeMonitor (base name: "EnableRealtimeMonitor")', function() {
      // uncomment below and update the code to test the property enableRealtimeMonitor
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property extractChapterImagesDuringLibraryScan (base name: "ExtractChapterImagesDuringLibraryScan")', function() {
      // uncomment below and update the code to test the property extractChapterImagesDuringLibraryScan
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property localMetadataReaderOrder (base name: "LocalMetadataReaderOrder")', function() {
      // uncomment below and update the code to test the property localMetadataReaderOrder
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property metadataCountryCode (base name: "MetadataCountryCode")', function() {
      // uncomment below and update the code to test the property metadataCountryCode
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property metadataSavers (base name: "MetadataSavers")', function() {
      // uncomment below and update the code to test the property metadataSavers
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property pathInfos (base name: "PathInfos")', function() {
      // uncomment below and update the code to test the property pathInfos
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property preferredMetadataLanguage (base name: "PreferredMetadataLanguage")', function() {
      // uncomment below and update the code to test the property preferredMetadataLanguage
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property requirePerfectSubtitleMatch (base name: "RequirePerfectSubtitleMatch")', function() {
      // uncomment below and update the code to test the property requirePerfectSubtitleMatch
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property saveLocalMetadata (base name: "SaveLocalMetadata")', function() {
      // uncomment below and update the code to test the property saveLocalMetadata
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property saveSubtitlesWithMedia (base name: "SaveSubtitlesWithMedia")', function() {
      // uncomment below and update the code to test the property saveSubtitlesWithMedia
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property seasonZeroDisplayName (base name: "SeasonZeroDisplayName")', function() {
      // uncomment below and update the code to test the property seasonZeroDisplayName
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property skipSubtitlesIfAudioTrackMatches (base name: "SkipSubtitlesIfAudioTrackMatches")', function() {
      // uncomment below and update the code to test the property skipSubtitlesIfAudioTrackMatches
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property skipSubtitlesIfEmbeddedSubtitlesPresent (base name: "SkipSubtitlesIfEmbeddedSubtitlesPresent")', function() {
      // uncomment below and update the code to test the property skipSubtitlesIfEmbeddedSubtitlesPresent
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property subtitleDownloadLanguages (base name: "SubtitleDownloadLanguages")', function() {
      // uncomment below and update the code to test the property subtitleDownloadLanguages
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property subtitleFetcherOrder (base name: "SubtitleFetcherOrder")', function() {
      // uncomment below and update the code to test the property subtitleFetcherOrder
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

    it('should have the property typeOptions (base name: "TypeOptions")', function() {
      // uncomment below and update the code to test the property typeOptions
      //var instance = new JellyfinApi.LibraryOptions();
      //expect(instance).to.be();
    });

  });

}));
