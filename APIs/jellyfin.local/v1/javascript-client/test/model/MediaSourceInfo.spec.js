/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.MediaSourceInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MediaSourceInfo', function() {
    it('should create an instance of MediaSourceInfo', function() {
      // uncomment below and update the code to test MediaSourceInfo
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be.a(JellyfinApi.MediaSourceInfo);
    });

    it('should have the property analyzeDurationMs (base name: "AnalyzeDurationMs")', function() {
      // uncomment below and update the code to test the property analyzeDurationMs
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property bitrate (base name: "Bitrate")', function() {
      // uncomment below and update the code to test the property bitrate
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property bufferMs (base name: "BufferMs")', function() {
      // uncomment below and update the code to test the property bufferMs
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property container (base name: "Container")', function() {
      // uncomment below and update the code to test the property container
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property defaultAudioStreamIndex (base name: "DefaultAudioStreamIndex")', function() {
      // uncomment below and update the code to test the property defaultAudioStreamIndex
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property defaultSubtitleStreamIndex (base name: "DefaultSubtitleStreamIndex")', function() {
      // uncomment below and update the code to test the property defaultSubtitleStreamIndex
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property eTag (base name: "ETag")', function() {
      // uncomment below and update the code to test the property eTag
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property encoderPath (base name: "EncoderPath")', function() {
      // uncomment below and update the code to test the property encoderPath
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property encoderProtocol (base name: "EncoderProtocol")', function() {
      // uncomment below and update the code to test the property encoderProtocol
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property formats (base name: "Formats")', function() {
      // uncomment below and update the code to test the property formats
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property genPtsInput (base name: "GenPtsInput")', function() {
      // uncomment below and update the code to test the property genPtsInput
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property ignoreDts (base name: "IgnoreDts")', function() {
      // uncomment below and update the code to test the property ignoreDts
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property ignoreIndex (base name: "IgnoreIndex")', function() {
      // uncomment below and update the code to test the property ignoreIndex
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property isInfiniteStream (base name: "IsInfiniteStream")', function() {
      // uncomment below and update the code to test the property isInfiniteStream
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property isRemote (base name: "IsRemote")', function() {
      // uncomment below and update the code to test the property isRemote
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property isoType (base name: "IsoType")', function() {
      // uncomment below and update the code to test the property isoType
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property liveStreamId (base name: "LiveStreamId")', function() {
      // uncomment below and update the code to test the property liveStreamId
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property mediaAttachments (base name: "MediaAttachments")', function() {
      // uncomment below and update the code to test the property mediaAttachments
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property mediaStreams (base name: "MediaStreams")', function() {
      // uncomment below and update the code to test the property mediaStreams
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property openToken (base name: "OpenToken")', function() {
      // uncomment below and update the code to test the property openToken
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "Path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "Protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property readAtNativeFramerate (base name: "ReadAtNativeFramerate")', function() {
      // uncomment below and update the code to test the property readAtNativeFramerate
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property requiredHttpHeaders (base name: "RequiredHttpHeaders")', function() {
      // uncomment below and update the code to test the property requiredHttpHeaders
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property requiresClosing (base name: "RequiresClosing")', function() {
      // uncomment below and update the code to test the property requiresClosing
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property requiresLooping (base name: "RequiresLooping")', function() {
      // uncomment below and update the code to test the property requiresLooping
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property requiresOpening (base name: "RequiresOpening")', function() {
      // uncomment below and update the code to test the property requiresOpening
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property runTimeTicks (base name: "RunTimeTicks")', function() {
      // uncomment below and update the code to test the property runTimeTicks
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "Size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportsDirectPlay (base name: "SupportsDirectPlay")', function() {
      // uncomment below and update the code to test the property supportsDirectPlay
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportsDirectStream (base name: "SupportsDirectStream")', function() {
      // uncomment below and update the code to test the property supportsDirectStream
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportsProbing (base name: "SupportsProbing")', function() {
      // uncomment below and update the code to test the property supportsProbing
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportsTranscoding (base name: "SupportsTranscoding")', function() {
      // uncomment below and update the code to test the property supportsTranscoding
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "Timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property transcodingContainer (base name: "TranscodingContainer")', function() {
      // uncomment below and update the code to test the property transcodingContainer
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property transcodingSubProtocol (base name: "TranscodingSubProtocol")', function() {
      // uncomment below and update the code to test the property transcodingSubProtocol
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property transcodingUrl (base name: "TranscodingUrl")', function() {
      // uncomment below and update the code to test the property transcodingUrl
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property video3DFormat (base name: "Video3DFormat")', function() {
      // uncomment below and update the code to test the property video3DFormat
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

    it('should have the property videoType (base name: "VideoType")', function() {
      // uncomment below and update the code to test the property videoType
      //var instance = new JellyfinApi.MediaSourceInfo();
      //expect(instance).to.be();
    });

  });

}));
