/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.UserPolicy();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserPolicy', function() {
    it('should create an instance of UserPolicy', function() {
      // uncomment below and update the code to test UserPolicy
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be.a(JellyfinApi.UserPolicy);
    });

    it('should have the property accessSchedules (base name: "AccessSchedules")', function() {
      // uncomment below and update the code to test the property accessSchedules
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property authenticationProviderId (base name: "AuthenticationProviderId")', function() {
      // uncomment below and update the code to test the property authenticationProviderId
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property blockUnratedItems (base name: "BlockUnratedItems")', function() {
      // uncomment below and update the code to test the property blockUnratedItems
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property blockedChannels (base name: "BlockedChannels")', function() {
      // uncomment below and update the code to test the property blockedChannels
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property blockedMediaFolders (base name: "BlockedMediaFolders")', function() {
      // uncomment below and update the code to test the property blockedMediaFolders
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property blockedTags (base name: "BlockedTags")', function() {
      // uncomment below and update the code to test the property blockedTags
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableAllChannels (base name: "EnableAllChannels")', function() {
      // uncomment below and update the code to test the property enableAllChannels
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableAllDevices (base name: "EnableAllDevices")', function() {
      // uncomment below and update the code to test the property enableAllDevices
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableAllFolders (base name: "EnableAllFolders")', function() {
      // uncomment below and update the code to test the property enableAllFolders
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableAudioPlaybackTranscoding (base name: "EnableAudioPlaybackTranscoding")', function() {
      // uncomment below and update the code to test the property enableAudioPlaybackTranscoding
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableContentDeletion (base name: "EnableContentDeletion")', function() {
      // uncomment below and update the code to test the property enableContentDeletion
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableContentDeletionFromFolders (base name: "EnableContentDeletionFromFolders")', function() {
      // uncomment below and update the code to test the property enableContentDeletionFromFolders
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableContentDownloading (base name: "EnableContentDownloading")', function() {
      // uncomment below and update the code to test the property enableContentDownloading
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableLiveTvAccess (base name: "EnableLiveTvAccess")', function() {
      // uncomment below and update the code to test the property enableLiveTvAccess
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableLiveTvManagement (base name: "EnableLiveTvManagement")', function() {
      // uncomment below and update the code to test the property enableLiveTvManagement
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableMediaConversion (base name: "EnableMediaConversion")', function() {
      // uncomment below and update the code to test the property enableMediaConversion
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableMediaPlayback (base name: "EnableMediaPlayback")', function() {
      // uncomment below and update the code to test the property enableMediaPlayback
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enablePlaybackRemuxing (base name: "EnablePlaybackRemuxing")', function() {
      // uncomment below and update the code to test the property enablePlaybackRemuxing
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enablePublicSharing (base name: "EnablePublicSharing")', function() {
      // uncomment below and update the code to test the property enablePublicSharing
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableRemoteAccess (base name: "EnableRemoteAccess")', function() {
      // uncomment below and update the code to test the property enableRemoteAccess
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableRemoteControlOfOtherUsers (base name: "EnableRemoteControlOfOtherUsers")', function() {
      // uncomment below and update the code to test the property enableRemoteControlOfOtherUsers
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableSharedDeviceControl (base name: "EnableSharedDeviceControl")', function() {
      // uncomment below and update the code to test the property enableSharedDeviceControl
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableSyncTranscoding (base name: "EnableSyncTranscoding")', function() {
      // uncomment below and update the code to test the property enableSyncTranscoding
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableUserPreferenceAccess (base name: "EnableUserPreferenceAccess")', function() {
      // uncomment below and update the code to test the property enableUserPreferenceAccess
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enableVideoPlaybackTranscoding (base name: "EnableVideoPlaybackTranscoding")', function() {
      // uncomment below and update the code to test the property enableVideoPlaybackTranscoding
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enabledChannels (base name: "EnabledChannels")', function() {
      // uncomment below and update the code to test the property enabledChannels
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enabledDevices (base name: "EnabledDevices")', function() {
      // uncomment below and update the code to test the property enabledDevices
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property enabledFolders (base name: "EnabledFolders")', function() {
      // uncomment below and update the code to test the property enabledFolders
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property forceRemoteSourceTranscoding (base name: "ForceRemoteSourceTranscoding")', function() {
      // uncomment below and update the code to test the property forceRemoteSourceTranscoding
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property invalidLoginAttemptCount (base name: "InvalidLoginAttemptCount")', function() {
      // uncomment below and update the code to test the property invalidLoginAttemptCount
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property isAdministrator (base name: "IsAdministrator")', function() {
      // uncomment below and update the code to test the property isAdministrator
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property isDisabled (base name: "IsDisabled")', function() {
      // uncomment below and update the code to test the property isDisabled
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property isHidden (base name: "IsHidden")', function() {
      // uncomment below and update the code to test the property isHidden
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property loginAttemptsBeforeLockout (base name: "LoginAttemptsBeforeLockout")', function() {
      // uncomment below and update the code to test the property loginAttemptsBeforeLockout
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property maxActiveSessions (base name: "MaxActiveSessions")', function() {
      // uncomment below and update the code to test the property maxActiveSessions
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property maxParentalRating (base name: "MaxParentalRating")', function() {
      // uncomment below and update the code to test the property maxParentalRating
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property passwordResetProviderId (base name: "PasswordResetProviderId")', function() {
      // uncomment below and update the code to test the property passwordResetProviderId
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property remoteClientBitrateLimit (base name: "RemoteClientBitrateLimit")', function() {
      // uncomment below and update the code to test the property remoteClientBitrateLimit
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

    it('should have the property syncPlayAccess (base name: "SyncPlayAccess")', function() {
      // uncomment below and update the code to test the property syncPlayAccess
      //var instance = new JellyfinApi.UserPolicy();
      //expect(instance).to.be();
    });

  });

}));
