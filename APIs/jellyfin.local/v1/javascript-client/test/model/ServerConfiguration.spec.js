/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JellyfinApi);
  }
}(this, function(expect, JellyfinApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JellyfinApi.ServerConfiguration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServerConfiguration', function() {
    it('should create an instance of ServerConfiguration', function() {
      // uncomment below and update the code to test ServerConfiguration
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be.a(JellyfinApi.ServerConfiguration);
    });

    it('should have the property activityLogRetentionDays (base name: "ActivityLogRetentionDays")', function() {
      // uncomment below and update the code to test the property activityLogRetentionDays
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property autoDiscovery (base name: "AutoDiscovery")', function() {
      // uncomment below and update the code to test the property autoDiscovery
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property autoDiscoveryTracing (base name: "AutoDiscoveryTracing")', function() {
      // uncomment below and update the code to test the property autoDiscoveryTracing
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property baseUrl (base name: "BaseUrl")', function() {
      // uncomment below and update the code to test the property baseUrl
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property cachePath (base name: "CachePath")', function() {
      // uncomment below and update the code to test the property cachePath
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property certificatePassword (base name: "CertificatePassword")', function() {
      // uncomment below and update the code to test the property certificatePassword
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property certificatePath (base name: "CertificatePath")', function() {
      // uncomment below and update the code to test the property certificatePath
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property codecsUsed (base name: "CodecsUsed")', function() {
      // uncomment below and update the code to test the property codecsUsed
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property contentTypes (base name: "ContentTypes")', function() {
      // uncomment below and update the code to test the property contentTypes
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property corsHosts (base name: "CorsHosts")', function() {
      // uncomment below and update the code to test the property corsHosts
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property disableLiveTvChannelUserDataName (base name: "DisableLiveTvChannelUserDataName")', function() {
      // uncomment below and update the code to test the property disableLiveTvChannelUserDataName
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property disablePluginImages (base name: "DisablePluginImages")', function() {
      // uncomment below and update the code to test the property disablePluginImages
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property displaySpecialsWithinSeasons (base name: "DisplaySpecialsWithinSeasons")', function() {
      // uncomment below and update the code to test the property displaySpecialsWithinSeasons
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableCaseSensitiveItemIds (base name: "EnableCaseSensitiveItemIds")', function() {
      // uncomment below and update the code to test the property enableCaseSensitiveItemIds
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableDashboardResponseCaching (base name: "EnableDashboardResponseCaching")', function() {
      // uncomment below and update the code to test the property enableDashboardResponseCaching
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableExternalContentInSuggestions (base name: "EnableExternalContentInSuggestions")', function() {
      // uncomment below and update the code to test the property enableExternalContentInSuggestions
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableFolderView (base name: "EnableFolderView")', function() {
      // uncomment below and update the code to test the property enableFolderView
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableGroupingIntoCollections (base name: "EnableGroupingIntoCollections")', function() {
      // uncomment below and update the code to test the property enableGroupingIntoCollections
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableHttps (base name: "EnableHttps")', function() {
      // uncomment below and update the code to test the property enableHttps
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableIPV4 (base name: "EnableIPV4")', function() {
      // uncomment below and update the code to test the property enableIPV4
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableIPV6 (base name: "EnableIPV6")', function() {
      // uncomment below and update the code to test the property enableIPV6
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableMetrics (base name: "EnableMetrics")', function() {
      // uncomment below and update the code to test the property enableMetrics
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableMultiSocketBinding (base name: "EnableMultiSocketBinding")', function() {
      // uncomment below and update the code to test the property enableMultiSocketBinding
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableNewOmdbSupport (base name: "EnableNewOmdbSupport")', function() {
      // uncomment below and update the code to test the property enableNewOmdbSupport
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableNormalizedItemByNameIds (base name: "EnableNormalizedItemByNameIds")', function() {
      // uncomment below and update the code to test the property enableNormalizedItemByNameIds
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableRemoteAccess (base name: "EnableRemoteAccess")', function() {
      // uncomment below and update the code to test the property enableRemoteAccess
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableSSDPTracing (base name: "EnableSSDPTracing")', function() {
      // uncomment below and update the code to test the property enableSSDPTracing
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableSimpleArtistDetection (base name: "EnableSimpleArtistDetection")', function() {
      // uncomment below and update the code to test the property enableSimpleArtistDetection
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableSlowResponseWarning (base name: "EnableSlowResponseWarning")', function() {
      // uncomment below and update the code to test the property enableSlowResponseWarning
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableUPnP (base name: "EnableUPnP")', function() {
      // uncomment below and update the code to test the property enableUPnP
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property gatewayMonitorPeriod (base name: "GatewayMonitorPeriod")', function() {
      // uncomment below and update the code to test the property gatewayMonitorPeriod
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property hDHomerunPortRange (base name: "HDHomerunPortRange")', function() {
      // uncomment below and update the code to test the property hDHomerunPortRange
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property httpServerPortNumber (base name: "HttpServerPortNumber")', function() {
      // uncomment below and update the code to test the property httpServerPortNumber
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property httpsPortNumber (base name: "HttpsPortNumber")', function() {
      // uncomment below and update the code to test the property httpsPortNumber
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property ignoreVirtualInterfaces (base name: "IgnoreVirtualInterfaces")', function() {
      // uncomment below and update the code to test the property ignoreVirtualInterfaces
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property imageExtractionTimeoutMs (base name: "ImageExtractionTimeoutMs")', function() {
      // uncomment below and update the code to test the property imageExtractionTimeoutMs
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property imageSavingConvention (base name: "ImageSavingConvention")', function() {
      // uncomment below and update the code to test the property imageSavingConvention
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property isPortAuthorized (base name: "IsPortAuthorized")', function() {
      // uncomment below and update the code to test the property isPortAuthorized
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property isRemoteIPFilterBlacklist (base name: "IsRemoteIPFilterBlacklist")', function() {
      // uncomment below and update the code to test the property isRemoteIPFilterBlacklist
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property isStartupWizardCompleted (base name: "IsStartupWizardCompleted")', function() {
      // uncomment below and update the code to test the property isStartupWizardCompleted
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property knownProxies (base name: "KnownProxies")', function() {
      // uncomment below and update the code to test the property knownProxies
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property libraryMetadataRefreshConcurrency (base name: "LibraryMetadataRefreshConcurrency")', function() {
      // uncomment below and update the code to test the property libraryMetadataRefreshConcurrency
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property libraryMonitorDelay (base name: "LibraryMonitorDelay")', function() {
      // uncomment below and update the code to test the property libraryMonitorDelay
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property libraryScanFanoutConcurrency (base name: "LibraryScanFanoutConcurrency")', function() {
      // uncomment below and update the code to test the property libraryScanFanoutConcurrency
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property localNetworkAddresses (base name: "LocalNetworkAddresses")', function() {
      // uncomment below and update the code to test the property localNetworkAddresses
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property localNetworkSubnets (base name: "LocalNetworkSubnets")', function() {
      // uncomment below and update the code to test the property localNetworkSubnets
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property logFileRetentionDays (base name: "LogFileRetentionDays")', function() {
      // uncomment below and update the code to test the property logFileRetentionDays
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property maxAudiobookResume (base name: "MaxAudiobookResume")', function() {
      // uncomment below and update the code to test the property maxAudiobookResume
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property maxResumePct (base name: "MaxResumePct")', function() {
      // uncomment below and update the code to test the property maxResumePct
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property metadataCountryCode (base name: "MetadataCountryCode")', function() {
      // uncomment below and update the code to test the property metadataCountryCode
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property metadataNetworkPath (base name: "MetadataNetworkPath")', function() {
      // uncomment below and update the code to test the property metadataNetworkPath
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property metadataOptions (base name: "MetadataOptions")', function() {
      // uncomment below and update the code to test the property metadataOptions
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property metadataPath (base name: "MetadataPath")', function() {
      // uncomment below and update the code to test the property metadataPath
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property minAudiobookResume (base name: "MinAudiobookResume")', function() {
      // uncomment below and update the code to test the property minAudiobookResume
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property minResumeDurationSeconds (base name: "MinResumeDurationSeconds")', function() {
      // uncomment below and update the code to test the property minResumeDurationSeconds
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property minResumePct (base name: "MinResumePct")', function() {
      // uncomment below and update the code to test the property minResumePct
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property pathSubstitutions (base name: "PathSubstitutions")', function() {
      // uncomment below and update the code to test the property pathSubstitutions
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property pluginRepositories (base name: "PluginRepositories")', function() {
      // uncomment below and update the code to test the property pluginRepositories
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property preferredMetadataLanguage (base name: "PreferredMetadataLanguage")', function() {
      // uncomment below and update the code to test the property preferredMetadataLanguage
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property previousVersion (base name: "PreviousVersion")', function() {
      // uncomment below and update the code to test the property previousVersion
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property previousVersionStr (base name: "PreviousVersionStr")', function() {
      // uncomment below and update the code to test the property previousVersionStr
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property publicHttpsPort (base name: "PublicHttpsPort")', function() {
      // uncomment below and update the code to test the property publicHttpsPort
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property publicPort (base name: "PublicPort")', function() {
      // uncomment below and update the code to test the property publicPort
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property publishedServerUriBySubnet (base name: "PublishedServerUriBySubnet")', function() {
      // uncomment below and update the code to test the property publishedServerUriBySubnet
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property quickConnectAvailable (base name: "QuickConnectAvailable")', function() {
      // uncomment below and update the code to test the property quickConnectAvailable
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property remoteClientBitrateLimit (base name: "RemoteClientBitrateLimit")', function() {
      // uncomment below and update the code to test the property remoteClientBitrateLimit
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property remoteIPFilter (base name: "RemoteIPFilter")', function() {
      // uncomment below and update the code to test the property remoteIPFilter
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property removeOldPlugins (base name: "RemoveOldPlugins")', function() {
      // uncomment below and update the code to test the property removeOldPlugins
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property requireHttps (base name: "RequireHttps")', function() {
      // uncomment below and update the code to test the property requireHttps
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property sSDPTracingFilter (base name: "SSDPTracingFilter")', function() {
      // uncomment below and update the code to test the property sSDPTracingFilter
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property saveMetadataHidden (base name: "SaveMetadataHidden")', function() {
      // uncomment below and update the code to test the property saveMetadataHidden
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property serverName (base name: "ServerName")', function() {
      // uncomment below and update the code to test the property serverName
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property skipDeserializationForBasicTypes (base name: "SkipDeserializationForBasicTypes")', function() {
      // uncomment below and update the code to test the property skipDeserializationForBasicTypes
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property slowResponseThresholdMs (base name: "SlowResponseThresholdMs")', function() {
      // uncomment below and update the code to test the property slowResponseThresholdMs
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property sortRemoveCharacters (base name: "SortRemoveCharacters")', function() {
      // uncomment below and update the code to test the property sortRemoveCharacters
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property sortRemoveWords (base name: "SortRemoveWords")', function() {
      // uncomment below and update the code to test the property sortRemoveWords
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property sortReplaceCharacters (base name: "SortReplaceCharacters")', function() {
      // uncomment below and update the code to test the property sortReplaceCharacters
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property trustAllIP6Interfaces (base name: "TrustAllIP6Interfaces")', function() {
      // uncomment below and update the code to test the property trustAllIP6Interfaces
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property uDPPortRange (base name: "UDPPortRange")', function() {
      // uncomment below and update the code to test the property uDPPortRange
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property uDPSendCount (base name: "UDPSendCount")', function() {
      // uncomment below and update the code to test the property uDPSendCount
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property uDPSendDelay (base name: "UDPSendDelay")', function() {
      // uncomment below and update the code to test the property uDPSendDelay
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property uICulture (base name: "UICulture")', function() {
      // uncomment below and update the code to test the property uICulture
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property uPnPCreateHttpPortMap (base name: "UPnPCreateHttpPortMap")', function() {
      // uncomment below and update the code to test the property uPnPCreateHttpPortMap
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property uninstalledPlugins (base name: "UninstalledPlugins")', function() {
      // uncomment below and update the code to test the property uninstalledPlugins
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property virtualInterfaceNames (base name: "VirtualInterfaceNames")', function() {
      // uncomment below and update the code to test the property virtualInterfaceNames
      //var instance = new JellyfinApi.ServerConfiguration();
      //expect(instance).to.be();
    });

  });

}));
