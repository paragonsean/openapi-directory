/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MediaEncoderPathDto from '../model/MediaEncoderPathDto';
import MetadataOptions from '../model/MetadataOptions';
import ServerConfiguration from '../model/ServerConfiguration';

/**
* Configuration service.
* @module api/ConfigurationApi
* @version v1
*/
export default class ConfigurationApi {

    /**
    * Constructs a new ConfigurationApi. 
    * @alias module:api/ConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getConfiguration operation.
     * @callback module:api/ConfigurationApi~getConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets application configuration.
     * @param {module:api/ConfigurationApi~getConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerConfiguration}
     */
    getConfiguration(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ServerConfiguration;
      return this.apiClient.callApi(
        '/System/Configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultMetadataOptions operation.
     * @callback module:api/ConfigurationApi~getDefaultMetadataOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetadataOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a default MetadataOptions object.
     * @param {module:api/ConfigurationApi~getDefaultMetadataOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetadataOptions}
     */
    getDefaultMetadataOptions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = MetadataOptions;
      return this.apiClient.callApi(
        '/System/Configuration/MetadataOptions/Default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNamedConfiguration operation.
     * @callback module:api/ConfigurationApi~getNamedConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named configuration.
     * @param {String} key Configuration key.
     * @param {module:api/ConfigurationApi~getNamedConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getNamedConfiguration(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNamedConfiguration");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/System/Configuration/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfiguration operation.
     * @callback module:api/ConfigurationApi~updateConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates application configuration.
     * @param {module:model/ServerConfiguration} serverConfiguration Configuration.
     * @param {module:api/ConfigurationApi~updateConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateConfiguration(serverConfiguration, callback) {
      let postBody = serverConfiguration;
      // verify the required parameter 'serverConfiguration' is set
      if (serverConfiguration === undefined || serverConfiguration === null) {
        throw new Error("Missing the required parameter 'serverConfiguration' when calling updateConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/System/Configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMediaEncoderPath operation.
     * @callback module:api/ConfigurationApi~updateMediaEncoderPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the path to the media encoder.
     * @param {module:model/MediaEncoderPathDto} mediaEncoderPathDto Media encoder path form body.
     * @param {module:api/ConfigurationApi~updateMediaEncoderPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMediaEncoderPath(mediaEncoderPathDto, callback) {
      let postBody = mediaEncoderPathDto;
      // verify the required parameter 'mediaEncoderPathDto' is set
      if (mediaEncoderPathDto === undefined || mediaEncoderPathDto === null) {
        throw new Error("Missing the required parameter 'mediaEncoderPathDto' when calling updateMediaEncoderPath");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/System/MediaEncoder/Path', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNamedConfiguration operation.
     * @callback module:api/ConfigurationApi~updateNamedConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates named configuration.
     * @param {String} key Configuration key.
     * @param {module:api/ConfigurationApi~updateNamedConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateNamedConfiguration(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateNamedConfiguration");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/System/Configuration/{key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
