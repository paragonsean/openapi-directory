/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlayMethod from '../model/PlayMethod';
import PlaybackProgressInfo from '../model/PlaybackProgressInfo';
import PlaybackStartInfo from '../model/PlaybackStartInfo';
import PlaybackStopInfo from '../model/PlaybackStopInfo';
import RepeatMode from '../model/RepeatMode';
import UserItemDataDto from '../model/UserItemDataDto';

/**
* Playstate service.
* @module api/PlaystateApi
* @version v1
*/
export default class PlaystateApi {

    /**
    * Constructs a new PlaystateApi. 
    * @alias module:api/PlaystateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the markPlayedItem operation.
     * @callback module:api/PlaystateApi~markPlayedItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItemDataDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks an item as played for user.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {Object} opts Optional parameters
     * @param {Date} [datePlayed] Optional. The date the item was played.
     * @param {module:api/PlaystateApi~markPlayedItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItemDataDto}
     */
    markPlayedItem(userId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling markPlayedItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling markPlayedItem");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
        'datePlayed': opts['datePlayed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = UserItemDataDto;
      return this.apiClient.callApi(
        '/Users/{userId}/PlayedItems/{itemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markUnplayedItem operation.
     * @callback module:api/PlaystateApi~markUnplayedItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItemDataDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks an item as unplayed for user.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {module:api/PlaystateApi~markUnplayedItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItemDataDto}
     */
    markUnplayedItem(userId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling markUnplayedItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling markUnplayedItem");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = UserItemDataDto;
      return this.apiClient.callApi(
        '/Users/{userId}/PlayedItems/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onPlaybackProgress operation.
     * @callback module:api/PlaystateApi~onPlaybackProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports a user's playback progress.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {Object} opts Optional parameters
     * @param {String} [mediaSourceId] The id of the MediaSource.
     * @param {Number} [positionTicks] Optional. The current position, in ticks. 1 tick = 10000 ms.
     * @param {Number} [audioStreamIndex] The audio stream index.
     * @param {Number} [subtitleStreamIndex] The subtitle stream index.
     * @param {Number} [volumeLevel] Scale of 0-100.
     * @param {module:model/PlayMethod} [playMethod] The play method.
     * @param {String} [liveStreamId] The live stream id.
     * @param {String} [playSessionId] The play session id.
     * @param {module:model/RepeatMode} [repeatMode] The repeat mode.
     * @param {Boolean} [isPaused = false)] Indicates if the player is paused.
     * @param {Boolean} [isMuted = false)] Indicates if the player is muted.
     * @param {module:api/PlaystateApi~onPlaybackProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    onPlaybackProgress(userId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling onPlaybackProgress");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling onPlaybackProgress");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
        'mediaSourceId': opts['mediaSourceId'],
        'positionTicks': opts['positionTicks'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'volumeLevel': opts['volumeLevel'],
        'playMethod': opts['playMethod'],
        'liveStreamId': opts['liveStreamId'],
        'playSessionId': opts['playSessionId'],
        'repeatMode': opts['repeatMode'],
        'isPaused': opts['isPaused'],
        'isMuted': opts['isMuted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/PlayingItems/{itemId}/Progress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onPlaybackStart operation.
     * @callback module:api/PlaystateApi~onPlaybackStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports that a user has begun playing an item.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {Object} opts Optional parameters
     * @param {String} [mediaSourceId] The id of the MediaSource.
     * @param {Number} [audioStreamIndex] The audio stream index.
     * @param {Number} [subtitleStreamIndex] The subtitle stream index.
     * @param {module:model/PlayMethod} [playMethod] The play method.
     * @param {String} [liveStreamId] The live stream id.
     * @param {String} [playSessionId] The play session id.
     * @param {Boolean} [canSeek = false)] Indicates if the client can seek.
     * @param {module:api/PlaystateApi~onPlaybackStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    onPlaybackStart(userId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling onPlaybackStart");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling onPlaybackStart");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
        'mediaSourceId': opts['mediaSourceId'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'playMethod': opts['playMethod'],
        'liveStreamId': opts['liveStreamId'],
        'playSessionId': opts['playSessionId'],
        'canSeek': opts['canSeek']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/PlayingItems/{itemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onPlaybackStopped operation.
     * @callback module:api/PlaystateApi~onPlaybackStoppedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports that a user has stopped playing an item.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {Object} opts Optional parameters
     * @param {String} [mediaSourceId] The id of the MediaSource.
     * @param {String} [nextMediaType] The next media type that will play.
     * @param {Number} [positionTicks] Optional. The position, in ticks, where playback stopped. 1 tick = 10000 ms.
     * @param {String} [liveStreamId] The live stream id.
     * @param {String} [playSessionId] The play session id.
     * @param {module:api/PlaystateApi~onPlaybackStoppedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    onPlaybackStopped(userId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling onPlaybackStopped");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling onPlaybackStopped");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
        'mediaSourceId': opts['mediaSourceId'],
        'nextMediaType': opts['nextMediaType'],
        'positionTicks': opts['positionTicks'],
        'liveStreamId': opts['liveStreamId'],
        'playSessionId': opts['playSessionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/PlayingItems/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pingPlaybackSession operation.
     * @callback module:api/PlaystateApi~pingPlaybackSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pings a playback session.
     * @param {Object} opts Optional parameters
     * @param {String} [playSessionId] Playback session id.
     * @param {module:api/PlaystateApi~pingPlaybackSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pingPlaybackSession(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'playSessionId': opts['playSessionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/Playing/Ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPlaybackProgress operation.
     * @callback module:api/PlaystateApi~reportPlaybackProgressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports playback progress within a session.
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaybackProgressInfo} [playbackProgressInfo] The playback progress info.
     * @param {module:api/PlaystateApi~reportPlaybackProgressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportPlaybackProgress(opts, callback) {
      opts = opts || {};
      let postBody = opts['playbackProgressInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/Playing/Progress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPlaybackStart operation.
     * @callback module:api/PlaystateApi~reportPlaybackStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports playback has started within a session.
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaybackStartInfo} [playbackStartInfo] The playback start info.
     * @param {module:api/PlaystateApi~reportPlaybackStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportPlaybackStart(opts, callback) {
      opts = opts || {};
      let postBody = opts['playbackStartInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/Playing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportPlaybackStopped operation.
     * @callback module:api/PlaystateApi~reportPlaybackStoppedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports playback has stopped within a session.
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaybackStopInfo} [playbackStopInfo] The playback stop info.
     * @param {module:api/PlaystateApi~reportPlaybackStoppedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportPlaybackStopped(opts, callback) {
      opts = opts || {};
      let postBody = opts['playbackStopInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/Playing/Stopped', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
