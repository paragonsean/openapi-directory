/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CollectionCreationResult from '../model/CollectionCreationResult';

/**
* Collection service.
* @module api/CollectionApi
* @version v1
*/
export default class CollectionApi {

    /**
    * Constructs a new CollectionApi. 
    * @alias module:api/CollectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addToCollection operation.
     * @callback module:api/CollectionApi~addToCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds items to a collection.
     * @param {String} collectionId The collection id.
     * @param {Array.<String>} ids Item ids, comma delimited.
     * @param {module:api/CollectionApi~addToCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addToCollection(collectionId, ids, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling addToCollection");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling addToCollection");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Collections/{collectionId}/Items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCollection operation.
     * @callback module:api/CollectionApi~createCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new collection.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the collection.
     * @param {Array.<String>} [ids] Item Ids to add to the collection.
     * @param {String} [parentId] Optional. Create the collection within a specific folder.
     * @param {Boolean} [isLocked = false)] Whether or not to lock the new collection.
     * @param {module:api/CollectionApi~createCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionCreationResult}
     */
    createCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'parentId': opts['parentId'],
        'isLocked': opts['isLocked']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = CollectionCreationResult;
      return this.apiClient.callApi(
        '/Collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFromCollection operation.
     * @callback module:api/CollectionApi~removeFromCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes items from a collection.
     * @param {String} collectionId The collection id.
     * @param {Array.<String>} ids Item ids, comma delimited.
     * @param {module:api/CollectionApi~removeFromCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeFromCollection(collectionId, ids, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling removeFromCollection");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling removeFromCollection");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Collections/{collectionId}/Items', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
