/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PluginInfo from '../model/PluginInfo';
import PluginSecurityInfo from '../model/PluginSecurityInfo';
import ProblemDetails from '../model/ProblemDetails';
import Version from '../model/Version';

/**
* Plugins service.
* @module api/PluginsApi
* @version v1
*/
export default class PluginsApi {

    /**
    * Constructs a new PluginsApi. 
    * @alias module:api/PluginsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the disablePlugin operation.
     * @callback module:api/PluginsApi~disablePluginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a plugin.
     * @param {String} pluginId Plugin id.
     * @param {module:model/Version} version Plugin version.
     * @param {module:api/PluginsApi~disablePluginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disablePlugin(pluginId, version, callback) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling disablePlugin");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling disablePlugin");
      }

      let pathParams = {
        'pluginId': pluginId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Plugins/{pluginId}/{version}/Disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enablePlugin operation.
     * @callback module:api/PluginsApi~enablePluginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables a disabled plugin.
     * @param {String} pluginId Plugin id.
     * @param {module:model/Version} version Plugin version.
     * @param {module:api/PluginsApi~enablePluginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enablePlugin(pluginId, version, callback) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling enablePlugin");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling enablePlugin");
      }

      let pathParams = {
        'pluginId': pluginId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Plugins/{pluginId}/{version}/Enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPluginConfiguration operation.
     * @callback module:api/PluginsApi~getPluginConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets plugin configuration.
     * @param {String} pluginId Plugin id.
     * @param {module:api/PluginsApi~getPluginConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getPluginConfiguration(pluginId, callback) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling getPluginConfiguration");
      }

      let pathParams = {
        'pluginId': pluginId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/Plugins/{pluginId}/Configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPluginImage operation.
     * @callback module:api/PluginsApi~getPluginImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a plugin's image.
     * @param {String} pluginId Plugin id.
     * @param {module:model/Version} version Plugin version.
     * @param {module:api/PluginsApi~getPluginImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPluginImage(pluginId, version, callback) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling getPluginImage");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getPluginImage");
      }

      let pathParams = {
        'pluginId': pluginId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Plugins/{pluginId}/{version}/Image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPluginManifest operation.
     * @callback module:api/PluginsApi~getPluginManifestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a plugin's manifest.
     * @param {String} pluginId Plugin id.
     * @param {module:api/PluginsApi~getPluginManifestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPluginManifest(pluginId, callback) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling getPluginManifest");
      }

      let pathParams = {
        'pluginId': pluginId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Plugins/{pluginId}/Manifest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlugins operation.
     * @callback module:api/PluginsApi~getPluginsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PluginInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of currently installed plugins.
     * @param {module:api/PluginsApi~getPluginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PluginInfo>}
     */
    getPlugins(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [PluginInfo];
      return this.apiClient.callApi(
        '/Plugins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uninstallPlugin operation.
     * @callback module:api/PluginsApi~uninstallPluginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uninstalls a plugin.
     * @param {String} pluginId Plugin id.
     * @param {module:api/PluginsApi~uninstallPluginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uninstallPlugin(pluginId, callback) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling uninstallPlugin");
      }

      let pathParams = {
        'pluginId': pluginId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Plugins/{pluginId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uninstallPluginByVersion operation.
     * @callback module:api/PluginsApi~uninstallPluginByVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uninstalls a plugin by version.
     * @param {String} pluginId Plugin id.
     * @param {module:model/Version} version Plugin version.
     * @param {module:api/PluginsApi~uninstallPluginByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uninstallPluginByVersion(pluginId, version, callback) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling uninstallPluginByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling uninstallPluginByVersion");
      }

      let pathParams = {
        'pluginId': pluginId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Plugins/{pluginId}/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePluginConfiguration operation.
     * @callback module:api/PluginsApi~updatePluginConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates plugin configuration.
     * Accepts plugin configuration as JSON body.
     * @param {String} pluginId Plugin id.
     * @param {module:api/PluginsApi~updatePluginConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePluginConfiguration(pluginId, callback) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling updatePluginConfiguration");
      }

      let pathParams = {
        'pluginId': pluginId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Plugins/{pluginId}/Configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePluginSecurityInfo operation.
     * @callback module:api/PluginsApi~updatePluginSecurityInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates plugin security info.
     * @param {module:model/PluginSecurityInfo} pluginSecurityInfo Plugin security info.
     * @param {module:api/PluginsApi~updatePluginSecurityInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePluginSecurityInfo(pluginSecurityInfo, callback) {
      let postBody = pluginSecurityInfo;
      // verify the required parameter 'pluginSecurityInfo' is set
      if (pluginSecurityInfo === undefined || pluginSecurityInfo === null) {
        throw new Error("Missing the required parameter 'pluginSecurityInfo' when calling updatePluginSecurityInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Plugins/SecurityInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
