/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';

/**
* DlnaServer service.
* @module api/DlnaServerApi
* @version v1
*/
export default class DlnaServerApi {

    /**
    * Constructs a new DlnaServerApi. 
    * @alias module:api/DlnaServerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getConnectionManager operation.
     * @callback module:api/DlnaServerApi~getConnectionManagerCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Dlna media receiver registrar xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getConnectionManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getConnectionManager(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getConnectionManager");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/ConnectionManager', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnectionManager2 operation.
     * @callback module:api/DlnaServerApi~getConnectionManager2Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Dlna media receiver registrar xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getConnectionManager2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getConnectionManager2(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getConnectionManager2");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/ConnectionManager/ConnectionManager', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnectionManager3 operation.
     * @callback module:api/DlnaServerApi~getConnectionManager3Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Dlna media receiver registrar xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getConnectionManager3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getConnectionManager3(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getConnectionManager3");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentDirectory operation.
     * @callback module:api/DlnaServerApi~getContentDirectoryCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Dlna content directory xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getContentDirectoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getContentDirectory(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getContentDirectory");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/ContentDirectory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentDirectory2 operation.
     * @callback module:api/DlnaServerApi~getContentDirectory2Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Dlna content directory xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getContentDirectory2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getContentDirectory2(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getContentDirectory2");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/ContentDirectory/ContentDirectory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentDirectory3 operation.
     * @callback module:api/DlnaServerApi~getContentDirectory3Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Dlna content directory xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getContentDirectory3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getContentDirectory3(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getContentDirectory3");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDescriptionXml operation.
     * @callback module:api/DlnaServerApi~getDescriptionXmlCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Description Xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getDescriptionXmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getDescriptionXml(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getDescriptionXml");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/description', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDescriptionXml2 operation.
     * @callback module:api/DlnaServerApi~getDescriptionXml2Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Description Xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getDescriptionXml2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getDescriptionXml2(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getDescriptionXml2");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/description.xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIcon operation.
     * @callback module:api/DlnaServerApi~getIconCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a server icon.
     * @param {String} fileName The icon filename.
     * @param {module:api/DlnaServerApi~getIconCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getIcon(fileName, callback) {
      let postBody = null;
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getIcon");
      }

      let pathParams = {
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/icons/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIconId operation.
     * @callback module:api/DlnaServerApi~getIconIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a server icon.
     * @param {String} serverId Server UUID.
     * @param {String} fileName The icon filename.
     * @param {module:api/DlnaServerApi~getIconIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getIconId(serverId, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getIconId");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getIconId");
      }

      let pathParams = {
        'serverId': serverId,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/icons/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaReceiverRegistrar operation.
     * @callback module:api/DlnaServerApi~getMediaReceiverRegistrarCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Dlna media receiver registrar xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getMediaReceiverRegistrarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getMediaReceiverRegistrar(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getMediaReceiverRegistrar");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/MediaReceiverRegistrar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaReceiverRegistrar2 operation.
     * @callback module:api/DlnaServerApi~getMediaReceiverRegistrar2Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Dlna media receiver registrar xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getMediaReceiverRegistrar2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getMediaReceiverRegistrar2(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getMediaReceiverRegistrar2");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaReceiverRegistrar3 operation.
     * @callback module:api/DlnaServerApi~getMediaReceiverRegistrar3Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Dlna media receiver registrar xml.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~getMediaReceiverRegistrar3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getMediaReceiverRegistrar3(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling getMediaReceiverRegistrar3");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processConnectionManagerControlRequest operation.
     * @callback module:api/DlnaServerApi~processConnectionManagerControlRequestCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process a connection manager control request.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~processConnectionManagerControlRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    processConnectionManagerControlRequest(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling processConnectionManagerControlRequest");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/ConnectionManager/Control', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processContentDirectoryControlRequest operation.
     * @callback module:api/DlnaServerApi~processContentDirectoryControlRequestCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process a content directory control request.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~processContentDirectoryControlRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    processContentDirectoryControlRequest(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling processContentDirectoryControlRequest");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/ContentDirectory/Control', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processMediaReceiverRegistrarControlRequest operation.
     * @callback module:api/DlnaServerApi~processMediaReceiverRegistrarControlRequestCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process a media receiver registrar control request.
     * @param {String} serverId Server UUID.
     * @param {module:api/DlnaServerApi~processMediaReceiverRegistrarControlRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    processMediaReceiverRegistrarControlRequest(serverId, callback) {
      let postBody = null;
      // verify the required parameter 'serverId' is set
      if (serverId === undefined || serverId === null) {
        throw new Error("Missing the required parameter 'serverId' when calling processMediaReceiverRegistrarControlRequest");
      }

      let pathParams = {
        'serverId': serverId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Dlna/{serverId}/MediaReceiverRegistrar/Control', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
