/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PackageInfo from '../model/PackageInfo';
import ProblemDetails from '../model/ProblemDetails';
import RepositoryInfo from '../model/RepositoryInfo';

/**
* Package service.
* @module api/PackageApi
* @version v1
*/
export default class PackageApi {

    /**
    * Constructs a new PackageApi. 
    * @alias module:api/PackageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelPackageInstallation operation.
     * @callback module:api/PackageApi~cancelPackageInstallationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a package installation.
     * @param {String} packageId Installation Id.
     * @param {module:api/PackageApi~cancelPackageInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelPackageInstallation(packageId, callback) {
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling cancelPackageInstallation");
      }

      let pathParams = {
        'packageId': packageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Packages/Installing/{packageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackageInfo operation.
     * @callback module:api/PackageApi~getPackageInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a package by name or assembly GUID.
     * @param {String} name The name of the package.
     * @param {Object} opts Optional parameters
     * @param {String} [assemblyGuid] The GUID of the associated assembly.
     * @param {module:api/PackageApi~getPackageInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageInfo}
     */
    getPackageInfo(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPackageInfo");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'assemblyGuid': opts['assemblyGuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = PackageInfo;
      return this.apiClient.callApi(
        '/Packages/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackages operation.
     * @callback module:api/PackageApi~getPackagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available packages.
     * @param {module:api/PackageApi~getPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackageInfo>}
     */
    getPackages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [PackageInfo];
      return this.apiClient.callApi(
        '/Packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositories operation.
     * @callback module:api/PackageApi~getRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepositoryInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all package repositories.
     * @param {module:api/PackageApi~getRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepositoryInfo>}
     */
    getRepositories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RepositoryInfo];
      return this.apiClient.callApi(
        '/Repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installPackage operation.
     * @callback module:api/PackageApi~installPackageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Installs a package.
     * @param {String} name Package name.
     * @param {Object} opts Optional parameters
     * @param {String} [assemblyGuid] GUID of the associated assembly.
     * @param {String} [version] Optional version. Defaults to latest version.
     * @param {String} [repositoryUrl] Optional. Specify the repository to install from.
     * @param {module:api/PackageApi~installPackageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    installPackage(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling installPackage");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'assemblyGuid': opts['assemblyGuid'],
        'version': opts['version'],
        'repositoryUrl': opts['repositoryUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Packages/Installed/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRepositories operation.
     * @callback module:api/PackageApi~setRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the enabled and existing package repositories.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/RepositoryInfo>} [repositoryInfo] The list of package repositories.
     * @param {module:api/PackageApi~setRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRepositories(opts, callback) {
      opts = opts || {};
      let postBody = opts['repositoryInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Repositories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
