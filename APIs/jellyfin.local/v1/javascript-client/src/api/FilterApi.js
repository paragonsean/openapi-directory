/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QueryFilters from '../model/QueryFilters';
import QueryFiltersLegacy from '../model/QueryFiltersLegacy';

/**
* Filter service.
* @module api/FilterApi
* @version v1
*/
export default class FilterApi {

    /**
    * Constructs a new FilterApi. 
    * @alias module:api/FilterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getQueryFilters operation.
     * @callback module:api/FilterApi~getQueryFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryFilters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets query filters.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. User id.
     * @param {String} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
     * @param {Array.<String>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
     * @param {Boolean} [isAiring] Optional. Is item airing.
     * @param {Boolean} [isMovie] Optional. Is item movie.
     * @param {Boolean} [isSports] Optional. Is item sports.
     * @param {Boolean} [isKids] Optional. Is item kids.
     * @param {Boolean} [isNews] Optional. Is item news.
     * @param {Boolean} [isSeries] Optional. Is item series.
     * @param {Boolean} [recursive] Optional. Search recursive.
     * @param {module:api/FilterApi~getQueryFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryFilters}
     */
    getQueryFilters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'parentId': opts['parentId'],
        'includeItemTypes': this.apiClient.buildCollectionParam(opts['includeItemTypes'], 'multi'),
        'isAiring': opts['isAiring'],
        'isMovie': opts['isMovie'],
        'isSports': opts['isSports'],
        'isKids': opts['isKids'],
        'isNews': opts['isNews'],
        'isSeries': opts['isSeries'],
        'recursive': opts['recursive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = QueryFilters;
      return this.apiClient.callApi(
        '/Items/Filters2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueryFiltersLegacy operation.
     * @callback module:api/FilterApi~getQueryFiltersLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryFiltersLegacy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets legacy query filters.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. User id.
     * @param {String} [parentId] Optional. Parent id.
     * @param {Array.<String>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
     * @param {Array.<String>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
     * @param {module:api/FilterApi~getQueryFiltersLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryFiltersLegacy}
     */
    getQueryFiltersLegacy(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'parentId': opts['parentId'],
        'includeItemTypes': this.apiClient.buildCollectionParam(opts['includeItemTypes'], 'multi'),
        'mediaTypes': this.apiClient.buildCollectionParam(opts['mediaTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = QueryFiltersLegacy;
      return this.apiClient.callApi(
        '/Items/Filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
