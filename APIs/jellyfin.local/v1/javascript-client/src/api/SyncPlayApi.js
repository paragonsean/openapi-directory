/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BufferRequestDto from '../model/BufferRequestDto';
import GroupInfoDto from '../model/GroupInfoDto';
import IgnoreWaitRequestDto from '../model/IgnoreWaitRequestDto';
import JoinGroupRequestDto from '../model/JoinGroupRequestDto';
import MovePlaylistItemRequestDto from '../model/MovePlaylistItemRequestDto';
import NewGroupRequestDto from '../model/NewGroupRequestDto';
import NextItemRequestDto from '../model/NextItemRequestDto';
import PingRequestDto from '../model/PingRequestDto';
import PlayRequestDto from '../model/PlayRequestDto';
import PreviousItemRequestDto from '../model/PreviousItemRequestDto';
import QueueRequestDto from '../model/QueueRequestDto';
import ReadyRequestDto from '../model/ReadyRequestDto';
import RemoveFromPlaylistRequestDto from '../model/RemoveFromPlaylistRequestDto';
import SeekRequestDto from '../model/SeekRequestDto';
import SetPlaylistItemRequestDto from '../model/SetPlaylistItemRequestDto';
import SetRepeatModeRequestDto from '../model/SetRepeatModeRequestDto';
import SetShuffleModeRequestDto from '../model/SetShuffleModeRequestDto';

/**
* SyncPlay service.
* @module api/SyncPlayApi
* @version v1
*/
export default class SyncPlayApi {

    /**
    * Constructs a new SyncPlayApi. 
    * @alias module:api/SyncPlayApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the syncPlayBuffering operation.
     * @callback module:api/SyncPlayApi~syncPlayBufferingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify SyncPlay group that member is buffering.
     * @param {module:model/BufferRequestDto} bufferRequestDto The player status.
     * @param {module:api/SyncPlayApi~syncPlayBufferingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayBuffering(bufferRequestDto, callback) {
      let postBody = bufferRequestDto;
      // verify the required parameter 'bufferRequestDto' is set
      if (bufferRequestDto === undefined || bufferRequestDto === null) {
        throw new Error("Missing the required parameter 'bufferRequestDto' when calling syncPlayBuffering");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Buffering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayCreateGroup operation.
     * @callback module:api/SyncPlayApi~syncPlayCreateGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new SyncPlay group.
     * @param {module:model/NewGroupRequestDto} newGroupRequestDto The settings of the new group.
     * @param {module:api/SyncPlayApi~syncPlayCreateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayCreateGroup(newGroupRequestDto, callback) {
      let postBody = newGroupRequestDto;
      // verify the required parameter 'newGroupRequestDto' is set
      if (newGroupRequestDto === undefined || newGroupRequestDto === null) {
        throw new Error("Missing the required parameter 'newGroupRequestDto' when calling syncPlayCreateGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/New', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayGetGroups operation.
     * @callback module:api/SyncPlayApi~syncPlayGetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupInfoDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all SyncPlay groups.
     * @param {module:api/SyncPlayApi~syncPlayGetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupInfoDto>}
     */
    syncPlayGetGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [GroupInfoDto];
      return this.apiClient.callApi(
        '/SyncPlay/List', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayJoinGroup operation.
     * @callback module:api/SyncPlayApi~syncPlayJoinGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join an existing SyncPlay group.
     * @param {module:model/JoinGroupRequestDto} joinGroupRequestDto The group to join.
     * @param {module:api/SyncPlayApi~syncPlayJoinGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayJoinGroup(joinGroupRequestDto, callback) {
      let postBody = joinGroupRequestDto;
      // verify the required parameter 'joinGroupRequestDto' is set
      if (joinGroupRequestDto === undefined || joinGroupRequestDto === null) {
        throw new Error("Missing the required parameter 'joinGroupRequestDto' when calling syncPlayJoinGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Join', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayLeaveGroup operation.
     * @callback module:api/SyncPlayApi~syncPlayLeaveGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leave the joined SyncPlay group.
     * @param {module:api/SyncPlayApi~syncPlayLeaveGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayLeaveGroup(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Leave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayMovePlaylistItem operation.
     * @callback module:api/SyncPlayApi~syncPlayMovePlaylistItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to move an item in the playlist in SyncPlay group.
     * @param {module:model/MovePlaylistItemRequestDto} movePlaylistItemRequestDto The new position for the item.
     * @param {module:api/SyncPlayApi~syncPlayMovePlaylistItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayMovePlaylistItem(movePlaylistItemRequestDto, callback) {
      let postBody = movePlaylistItemRequestDto;
      // verify the required parameter 'movePlaylistItemRequestDto' is set
      if (movePlaylistItemRequestDto === undefined || movePlaylistItemRequestDto === null) {
        throw new Error("Missing the required parameter 'movePlaylistItemRequestDto' when calling syncPlayMovePlaylistItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/MovePlaylistItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayNextItem operation.
     * @callback module:api/SyncPlayApi~syncPlayNextItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request next item in SyncPlay group.
     * @param {module:model/NextItemRequestDto} nextItemRequestDto The current item information.
     * @param {module:api/SyncPlayApi~syncPlayNextItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayNextItem(nextItemRequestDto, callback) {
      let postBody = nextItemRequestDto;
      // verify the required parameter 'nextItemRequestDto' is set
      if (nextItemRequestDto === undefined || nextItemRequestDto === null) {
        throw new Error("Missing the required parameter 'nextItemRequestDto' when calling syncPlayNextItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/NextItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayPause operation.
     * @callback module:api/SyncPlayApi~syncPlayPauseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request pause in SyncPlay group.
     * @param {module:api/SyncPlayApi~syncPlayPauseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayPause(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayPing operation.
     * @callback module:api/SyncPlayApi~syncPlayPingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update session ping.
     * @param {module:model/PingRequestDto} pingRequestDto The new ping.
     * @param {module:api/SyncPlayApi~syncPlayPingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayPing(pingRequestDto, callback) {
      let postBody = pingRequestDto;
      // verify the required parameter 'pingRequestDto' is set
      if (pingRequestDto === undefined || pingRequestDto === null) {
        throw new Error("Missing the required parameter 'pingRequestDto' when calling syncPlayPing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayPreviousItem operation.
     * @callback module:api/SyncPlayApi~syncPlayPreviousItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request previous item in SyncPlay group.
     * @param {module:model/PreviousItemRequestDto} previousItemRequestDto The current item information.
     * @param {module:api/SyncPlayApi~syncPlayPreviousItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayPreviousItem(previousItemRequestDto, callback) {
      let postBody = previousItemRequestDto;
      // verify the required parameter 'previousItemRequestDto' is set
      if (previousItemRequestDto === undefined || previousItemRequestDto === null) {
        throw new Error("Missing the required parameter 'previousItemRequestDto' when calling syncPlayPreviousItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/PreviousItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayQueue operation.
     * @callback module:api/SyncPlayApi~syncPlayQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to queue items to the playlist of a SyncPlay group.
     * @param {module:model/QueueRequestDto} queueRequestDto The items to add.
     * @param {module:api/SyncPlayApi~syncPlayQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayQueue(queueRequestDto, callback) {
      let postBody = queueRequestDto;
      // verify the required parameter 'queueRequestDto' is set
      if (queueRequestDto === undefined || queueRequestDto === null) {
        throw new Error("Missing the required parameter 'queueRequestDto' when calling syncPlayQueue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Queue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayReady operation.
     * @callback module:api/SyncPlayApi~syncPlayReadyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify SyncPlay group that member is ready for playback.
     * @param {module:model/ReadyRequestDto} readyRequestDto The player status.
     * @param {module:api/SyncPlayApi~syncPlayReadyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayReady(readyRequestDto, callback) {
      let postBody = readyRequestDto;
      // verify the required parameter 'readyRequestDto' is set
      if (readyRequestDto === undefined || readyRequestDto === null) {
        throw new Error("Missing the required parameter 'readyRequestDto' when calling syncPlayReady");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Ready', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayRemoveFromPlaylist operation.
     * @callback module:api/SyncPlayApi~syncPlayRemoveFromPlaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to remove items from the playlist in SyncPlay group.
     * @param {module:model/RemoveFromPlaylistRequestDto} removeFromPlaylistRequestDto The items to remove.
     * @param {module:api/SyncPlayApi~syncPlayRemoveFromPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayRemoveFromPlaylist(removeFromPlaylistRequestDto, callback) {
      let postBody = removeFromPlaylistRequestDto;
      // verify the required parameter 'removeFromPlaylistRequestDto' is set
      if (removeFromPlaylistRequestDto === undefined || removeFromPlaylistRequestDto === null) {
        throw new Error("Missing the required parameter 'removeFromPlaylistRequestDto' when calling syncPlayRemoveFromPlaylist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/RemoveFromPlaylist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlaySeek operation.
     * @callback module:api/SyncPlayApi~syncPlaySeekCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request seek in SyncPlay group.
     * @param {module:model/SeekRequestDto} seekRequestDto The new playback position.
     * @param {module:api/SyncPlayApi~syncPlaySeekCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlaySeek(seekRequestDto, callback) {
      let postBody = seekRequestDto;
      // verify the required parameter 'seekRequestDto' is set
      if (seekRequestDto === undefined || seekRequestDto === null) {
        throw new Error("Missing the required parameter 'seekRequestDto' when calling syncPlaySeek");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Seek', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlaySetIgnoreWait operation.
     * @callback module:api/SyncPlayApi~syncPlaySetIgnoreWaitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request SyncPlay group to ignore member during group-wait.
     * @param {module:model/IgnoreWaitRequestDto} ignoreWaitRequestDto The settings to set.
     * @param {module:api/SyncPlayApi~syncPlaySetIgnoreWaitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlaySetIgnoreWait(ignoreWaitRequestDto, callback) {
      let postBody = ignoreWaitRequestDto;
      // verify the required parameter 'ignoreWaitRequestDto' is set
      if (ignoreWaitRequestDto === undefined || ignoreWaitRequestDto === null) {
        throw new Error("Missing the required parameter 'ignoreWaitRequestDto' when calling syncPlaySetIgnoreWait");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/SetIgnoreWait', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlaySetNewQueue operation.
     * @callback module:api/SyncPlayApi~syncPlaySetNewQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to set new playlist in SyncPlay group.
     * @param {module:model/PlayRequestDto} playRequestDto The new playlist to play in the group.
     * @param {module:api/SyncPlayApi~syncPlaySetNewQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlaySetNewQueue(playRequestDto, callback) {
      let postBody = playRequestDto;
      // verify the required parameter 'playRequestDto' is set
      if (playRequestDto === undefined || playRequestDto === null) {
        throw new Error("Missing the required parameter 'playRequestDto' when calling syncPlaySetNewQueue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/SetNewQueue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlaySetPlaylistItem operation.
     * @callback module:api/SyncPlayApi~syncPlaySetPlaylistItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to change playlist item in SyncPlay group.
     * @param {module:model/SetPlaylistItemRequestDto} setPlaylistItemRequestDto The new item to play.
     * @param {module:api/SyncPlayApi~syncPlaySetPlaylistItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlaySetPlaylistItem(setPlaylistItemRequestDto, callback) {
      let postBody = setPlaylistItemRequestDto;
      // verify the required parameter 'setPlaylistItemRequestDto' is set
      if (setPlaylistItemRequestDto === undefined || setPlaylistItemRequestDto === null) {
        throw new Error("Missing the required parameter 'setPlaylistItemRequestDto' when calling syncPlaySetPlaylistItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/SetPlaylistItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlaySetRepeatMode operation.
     * @callback module:api/SyncPlayApi~syncPlaySetRepeatModeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to set repeat mode in SyncPlay group.
     * @param {module:model/SetRepeatModeRequestDto} setRepeatModeRequestDto The new repeat mode.
     * @param {module:api/SyncPlayApi~syncPlaySetRepeatModeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlaySetRepeatMode(setRepeatModeRequestDto, callback) {
      let postBody = setRepeatModeRequestDto;
      // verify the required parameter 'setRepeatModeRequestDto' is set
      if (setRepeatModeRequestDto === undefined || setRepeatModeRequestDto === null) {
        throw new Error("Missing the required parameter 'setRepeatModeRequestDto' when calling syncPlaySetRepeatMode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/SetRepeatMode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlaySetShuffleMode operation.
     * @callback module:api/SyncPlayApi~syncPlaySetShuffleModeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to set shuffle mode in SyncPlay group.
     * @param {module:model/SetShuffleModeRequestDto} setShuffleModeRequestDto The new shuffle mode.
     * @param {module:api/SyncPlayApi~syncPlaySetShuffleModeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlaySetShuffleMode(setShuffleModeRequestDto, callback) {
      let postBody = setShuffleModeRequestDto;
      // verify the required parameter 'setShuffleModeRequestDto' is set
      if (setShuffleModeRequestDto === undefined || setShuffleModeRequestDto === null) {
        throw new Error("Missing the required parameter 'setShuffleModeRequestDto' when calling syncPlaySetShuffleMode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/SetShuffleMode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayStop operation.
     * @callback module:api/SyncPlayApi~syncPlayStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request stop in SyncPlay group.
     * @param {module:api/SyncPlayApi~syncPlayStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayStop(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncPlayUnpause operation.
     * @callback module:api/SyncPlayApi~syncPlayUnpauseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request unpause in SyncPlay group.
     * @param {module:api/SyncPlayApi~syncPlayUnpauseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    syncPlayUnpause(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/SyncPlay/Unpause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
