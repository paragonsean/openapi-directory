/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthenticateUserByName from '../model/AuthenticateUserByName';
import AuthenticationResult from '../model/AuthenticationResult';
import CreateUserByName from '../model/CreateUserByName';
import ForgotPasswordDto from '../model/ForgotPasswordDto';
import ForgotPasswordResult from '../model/ForgotPasswordResult';
import PinRedeemResult from '../model/PinRedeemResult';
import ProblemDetails from '../model/ProblemDetails';
import QuickConnectDto from '../model/QuickConnectDto';
import UpdateUserEasyPassword from '../model/UpdateUserEasyPassword';
import UpdateUserPassword from '../model/UpdateUserPassword';
import UserConfiguration from '../model/UserConfiguration';
import UserDto from '../model/UserDto';
import UserPolicy from '../model/UserPolicy';

/**
* User service.
* @module api/UserApi
* @version v1
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authenticateUser operation.
     * @callback module:api/UserApi~authenticateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticates a user.
     * @param {String} userId The user id.
     * @param {String} pw The password as plain text.
     * @param {Object} opts Optional parameters
     * @param {String} [password] The password sha1-hash.
     * @param {module:api/UserApi~authenticateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationResult}
     */
    authenticateUser(userId, pw, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling authenticateUser");
      }
      // verify the required parameter 'pw' is set
      if (pw === undefined || pw === null) {
        throw new Error("Missing the required parameter 'pw' when calling authenticateUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'pw': pw,
        'password': opts['password']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = AuthenticationResult;
      return this.apiClient.callApi(
        '/Users/{userId}/Authenticate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateUserByName operation.
     * @callback module:api/UserApi~authenticateUserByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticates a user by name.
     * @param {module:model/AuthenticateUserByName} authenticateUserByName The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request.
     * @param {module:api/UserApi~authenticateUserByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationResult}
     */
    authenticateUserByName(authenticateUserByName, callback) {
      let postBody = authenticateUserByName;
      // verify the required parameter 'authenticateUserByName' is set
      if (authenticateUserByName === undefined || authenticateUserByName === null) {
        throw new Error("Missing the required parameter 'authenticateUserByName' when calling authenticateUserByName");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = AuthenticationResult;
      return this.apiClient.callApi(
        '/Users/AuthenticateByName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateWithQuickConnect operation.
     * @callback module:api/UserApi~authenticateWithQuickConnectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticates a user with quick connect.
     * @param {module:model/QuickConnectDto} quickConnectDto The Jellyfin.Api.Models.UserDtos.QuickConnectDto request.
     * @param {module:api/UserApi~authenticateWithQuickConnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationResult}
     */
    authenticateWithQuickConnect(quickConnectDto, callback) {
      let postBody = quickConnectDto;
      // verify the required parameter 'quickConnectDto' is set
      if (quickConnectDto === undefined || quickConnectDto === null) {
        throw new Error("Missing the required parameter 'quickConnectDto' when calling authenticateWithQuickConnect");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = AuthenticationResult;
      return this.apiClient.callApi(
        '/Users/AuthenticateWithQuickConnect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserByName operation.
     * @callback module:api/UserApi~createUserByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user.
     * @param {module:model/CreateUserByName} createUserByName The create user by name request body.
     * @param {module:api/UserApi~createUserByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDto}
     */
    createUserByName(createUserByName, callback) {
      let postBody = createUserByName;
      // verify the required parameter 'createUserByName' is set
      if (createUserByName === undefined || createUserByName === null) {
        throw new Error("Missing the required parameter 'createUserByName' when calling createUserByName");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = UserDto;
      return this.apiClient.callApi(
        '/Users/New', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UserApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user.
     * @param {String} userId The user id.
     * @param {module:api/UserApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forgotPassword operation.
     * @callback module:api/UserApi~forgotPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForgotPasswordResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates the forgot password process for a local user.
     * @param {module:model/ForgotPasswordDto} forgotPasswordDto The forgot password request containing the entered username.
     * @param {module:api/UserApi~forgotPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForgotPasswordResult}
     */
    forgotPassword(forgotPasswordDto, callback) {
      let postBody = forgotPasswordDto;
      // verify the required parameter 'forgotPasswordDto' is set
      if (forgotPasswordDto === undefined || forgotPasswordDto === null) {
        throw new Error("Missing the required parameter 'forgotPasswordDto' when calling forgotPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ForgotPasswordResult;
      return this.apiClient.callApi(
        '/Users/ForgotPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forgotPasswordPin operation.
     * @callback module:api/UserApi~forgotPasswordPinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinRedeemResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeems a forgot password pin.
     * @param {Object} opts Optional parameters
     * @param {String} [body] The pin.
     * @param {module:api/UserApi~forgotPasswordPinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinRedeemResult}
     */
    forgotPasswordPin(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = PinRedeemResult;
      return this.apiClient.callApi(
        '/Users/ForgotPassword/Pin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUser operation.
     * @callback module:api/UserApi~getCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the user based on auth token.
     * @param {module:api/UserApi~getCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDto}
     */
    getCurrentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = UserDto;
      return this.apiClient.callApi(
        '/Users/Me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicUsers operation.
     * @callback module:api/UserApi~getPublicUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of publicly visible users for display on a login screen.
     * @param {module:api/UserApi~getPublicUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserDto>}
     */
    getPublicUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [UserDto];
      return this.apiClient.callApi(
        '/Users/Public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/UserApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a user by Id.
     * @param {String} userId The user id.
     * @param {module:api/UserApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDto}
     */
    getUserById(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserById");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = UserDto;
      return this.apiClient.callApi(
        '/Users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/UserApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of users.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isHidden] Optional filter by IsHidden=true or false.
     * @param {Boolean} [isDisabled] Optional filter by IsDisabled=true or false.
     * @param {module:api/UserApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserDto>}
     */
    getUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isHidden': opts['isHidden'],
        'isDisabled': opts['isDisabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [UserDto];
      return this.apiClient.callApi(
        '/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UserApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a user.
     * @param {String} userId The user id.
     * @param {module:model/UserDto} userDto The updated user model.
     * @param {module:api/UserApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUser(userId, userDto, callback) {
      let postBody = userDto;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUser");
      }
      // verify the required parameter 'userDto' is set
      if (userDto === undefined || userDto === null) {
        throw new Error("Missing the required parameter 'userDto' when calling updateUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserConfiguration operation.
     * @callback module:api/UserApi~updateUserConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a user configuration.
     * @param {String} userId The user id.
     * @param {module:model/UserConfiguration} userConfiguration The new user configuration.
     * @param {module:api/UserApi~updateUserConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserConfiguration(userId, userConfiguration, callback) {
      let postBody = userConfiguration;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserConfiguration");
      }
      // verify the required parameter 'userConfiguration' is set
      if (userConfiguration === undefined || userConfiguration === null) {
        throw new Error("Missing the required parameter 'userConfiguration' when calling updateUserConfiguration");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/Configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserEasyPassword operation.
     * @callback module:api/UserApi~updateUserEasyPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a user's easy password.
     * @param {String} userId The user id.
     * @param {module:model/UpdateUserEasyPassword} updateUserEasyPassword The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request.
     * @param {module:api/UserApi~updateUserEasyPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserEasyPassword(userId, updateUserEasyPassword, callback) {
      let postBody = updateUserEasyPassword;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserEasyPassword");
      }
      // verify the required parameter 'updateUserEasyPassword' is set
      if (updateUserEasyPassword === undefined || updateUserEasyPassword === null) {
        throw new Error("Missing the required parameter 'updateUserEasyPassword' when calling updateUserEasyPassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/EasyPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserPassword operation.
     * @callback module:api/UserApi~updateUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a user's password.
     * @param {String} userId The user id.
     * @param {module:model/UpdateUserPassword} updateUserPassword The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request.
     * @param {module:api/UserApi~updateUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserPassword(userId, updateUserPassword, callback) {
      let postBody = updateUserPassword;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserPassword");
      }
      // verify the required parameter 'updateUserPassword' is set
      if (updateUserPassword === undefined || updateUserPassword === null) {
        throw new Error("Missing the required parameter 'updateUserPassword' when calling updateUserPassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/Password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserPolicy operation.
     * @callback module:api/UserApi~updateUserPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a user policy.
     * @param {String} userId The user id.
     * @param {module:model/UserPolicy} userPolicy The new user policy.
     * @param {module:api/UserApi~updateUserPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserPolicy(userId, userPolicy, callback) {
      let postBody = userPolicy;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserPolicy");
      }
      // verify the required parameter 'userPolicy' is set
      if (userPolicy === undefined || userPolicy === null) {
        throw new Error("Missing the required parameter 'userPolicy' when calling updateUserPolicy");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/Policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
