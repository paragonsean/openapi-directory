/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ImageType from '../model/ImageType';
import ItemFields from '../model/ItemFields';

/**
* InstantMix service.
* @module api/InstantMixApi
* @version v1
*/
export default class InstantMixApi {

    /**
    * Constructs a new InstantMixApi. 
    * @alias module:api/InstantMixApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getInstantMixFromAlbum operation.
     * @callback module:api/InstantMixApi~getInstantMixFromAlbumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an instant playlist based on a given song.
     * @param {String} id The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {module:api/InstantMixApi~getInstantMixFromAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getInstantMixFromAlbum(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstantMixFromAlbum");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableImages': opts['enableImages'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Albums/{id}/InstantMix', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstantMixFromArtists operation.
     * @callback module:api/InstantMixApi~getInstantMixFromArtistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an instant playlist based on a given song.
     * @param {String} id The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {module:api/InstantMixApi~getInstantMixFromArtistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getInstantMixFromArtists(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstantMixFromArtists");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableImages': opts['enableImages'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Artists/{id}/InstantMix', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstantMixFromItem operation.
     * @callback module:api/InstantMixApi~getInstantMixFromItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an instant playlist based on a given song.
     * @param {String} id The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {module:api/InstantMixApi~getInstantMixFromItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getInstantMixFromItem(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstantMixFromItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableImages': opts['enableImages'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Items/{id}/InstantMix', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstantMixFromMusicGenre operation.
     * @callback module:api/InstantMixApi~getInstantMixFromMusicGenreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an instant playlist based on a given song.
     * @param {String} name The genre name.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {module:api/InstantMixApi~getInstantMixFromMusicGenreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getInstantMixFromMusicGenre(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getInstantMixFromMusicGenre");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableImages': opts['enableImages'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/MusicGenres/{name}/InstantMix', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstantMixFromMusicGenres operation.
     * @callback module:api/InstantMixApi~getInstantMixFromMusicGenresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an instant playlist based on a given song.
     * @param {String} id The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {module:api/InstantMixApi~getInstantMixFromMusicGenresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getInstantMixFromMusicGenres(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstantMixFromMusicGenres");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableImages': opts['enableImages'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/MusicGenres/{id}/InstantMix', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstantMixFromPlaylist operation.
     * @callback module:api/InstantMixApi~getInstantMixFromPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an instant playlist based on a given song.
     * @param {String} id The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {module:api/InstantMixApi~getInstantMixFromPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getInstantMixFromPlaylist(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstantMixFromPlaylist");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableImages': opts['enableImages'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Playlists/{id}/InstantMix', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstantMixFromSong operation.
     * @callback module:api/InstantMixApi~getInstantMixFromSongCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an instant playlist based on a given song.
     * @param {String} id The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {module:api/InstantMixApi~getInstantMixFromSongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getInstantMixFromSong(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstantMixFromSong");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableImages': opts['enableImages'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Songs/{id}/InstantMix', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
