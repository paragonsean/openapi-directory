/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDto from '../model/BaseItemDto';
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ImageType from '../model/ImageType';
import ItemFields from '../model/ItemFields';
import UserItemDataDto from '../model/UserItemDataDto';

/**
* UserLibrary service.
* @module api/UserLibraryApi
* @version v1
*/
export default class UserLibraryApi {

    /**
    * Constructs a new UserLibraryApi. 
    * @alias module:api/UserLibraryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteUserItemRating operation.
     * @callback module:api/UserLibraryApi~deleteUserItemRatingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItemDataDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user's saved personal rating for an item.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {module:api/UserLibraryApi~deleteUserItemRatingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItemDataDto}
     */
    deleteUserItemRating(userId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserItemRating");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteUserItemRating");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = UserItemDataDto;
      return this.apiClient.callApi(
        '/Users/{userId}/Items/{itemId}/Rating', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntros operation.
     * @callback module:api/UserLibraryApi~getIntrosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets intros to play before the main media item plays.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {module:api/UserLibraryApi~getIntrosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getIntros(userId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getIntros");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getIntros");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Users/{userId}/Items/{itemId}/Intros', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItem operation.
     * @callback module:api/UserLibraryApi~getItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an item from a user's library.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {module:api/UserLibraryApi~getItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDto}
     */
    getItem(userId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getItem");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDto;
      return this.apiClient.callApi(
        '/Users/{userId}/Items/{itemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestMedia operation.
     * @callback module:api/UserLibraryApi~getLatestMediaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BaseItemDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets latest media.
     * @param {String} userId User id.
     * @param {Object} opts Optional parameters
     * @param {String} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Array.<String>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
     * @param {Boolean} [isPlayed] Filter by items that are played, or not.
     * @param {Boolean} [enableImages] Optional. include image information in output.
     * @param {Number} [imageTypeLimit] Optional. the max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {Boolean} [enableUserData] Optional. include user data.
     * @param {Number} [limit = 20)] Return item limit.
     * @param {Boolean} [groupItems = true)] Whether or not to group items into a parent container.
     * @param {module:api/UserLibraryApi~getLatestMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BaseItemDto>}
     */
    getLatestMedia(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getLatestMedia");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'parentId': opts['parentId'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'includeItemTypes': this.apiClient.buildCollectionParam(opts['includeItemTypes'], 'multi'),
        'isPlayed': opts['isPlayed'],
        'enableImages': opts['enableImages'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'enableUserData': opts['enableUserData'],
        'limit': opts['limit'],
        'groupItems': opts['groupItems']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [BaseItemDto];
      return this.apiClient.callApi(
        '/Users/{userId}/Items/Latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocalTrailers operation.
     * @callback module:api/UserLibraryApi~getLocalTrailersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BaseItemDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets local trailers for an item.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {module:api/UserLibraryApi~getLocalTrailersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BaseItemDto>}
     */
    getLocalTrailers(userId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getLocalTrailers");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getLocalTrailers");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [BaseItemDto];
      return this.apiClient.callApi(
        '/Users/{userId}/Items/{itemId}/LocalTrailers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRootFolder operation.
     * @callback module:api/UserLibraryApi~getRootFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the root folder from a user's library.
     * @param {String} userId User id.
     * @param {module:api/UserLibraryApi~getRootFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDto}
     */
    getRootFolder(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRootFolder");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDto;
      return this.apiClient.callApi(
        '/Users/{userId}/Items/Root', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecialFeatures operation.
     * @callback module:api/UserLibraryApi~getSpecialFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BaseItemDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets special features for an item.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {module:api/UserLibraryApi~getSpecialFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BaseItemDto>}
     */
    getSpecialFeatures(userId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getSpecialFeatures");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSpecialFeatures");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [BaseItemDto];
      return this.apiClient.callApi(
        '/Users/{userId}/Items/{itemId}/SpecialFeatures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markFavoriteItem operation.
     * @callback module:api/UserLibraryApi~markFavoriteItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItemDataDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks an item as a favorite.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {module:api/UserLibraryApi~markFavoriteItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItemDataDto}
     */
    markFavoriteItem(userId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling markFavoriteItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling markFavoriteItem");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = UserItemDataDto;
      return this.apiClient.callApi(
        '/Users/{userId}/FavoriteItems/{itemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unmarkFavoriteItem operation.
     * @callback module:api/UserLibraryApi~unmarkFavoriteItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItemDataDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmarks item as a favorite.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {module:api/UserLibraryApi~unmarkFavoriteItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItemDataDto}
     */
    unmarkFavoriteItem(userId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unmarkFavoriteItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling unmarkFavoriteItem");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = UserItemDataDto;
      return this.apiClient.callApi(
        '/Users/{userId}/FavoriteItems/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserItemRating operation.
     * @callback module:api/UserLibraryApi~updateUserItemRatingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserItemDataDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a user's rating for an item.
     * @param {String} userId User id.
     * @param {String} itemId Item id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [likes] Whether this M:Jellyfin.Api.Controllers.UserLibraryController.UpdateUserItemRating(System.Guid,System.Guid,System.Nullable{System.Boolean}) is likes.
     * @param {module:api/UserLibraryApi~updateUserItemRatingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserItemDataDto}
     */
    updateUserItemRating(userId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserItemRating");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateUserItemRating");
      }

      let pathParams = {
        'userId': userId,
        'itemId': itemId
      };
      let queryParams = {
        'likes': opts['likes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = UserItemDataDto;
      return this.apiClient.callApi(
        '/Users/{userId}/Items/{itemId}/Rating', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
