/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageByNameInfo from '../model/ImageByNameInfo';
import ProblemDetails from '../model/ProblemDetails';

/**
* ImageByName service.
* @module api/ImageByNameApi
* @version v1
*/
export default class ImageByNameApi {

    /**
    * Constructs a new ImageByNameApi. 
    * @alias module:api/ImageByNameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getGeneralImage operation.
     * @callback module:api/ImageByNameApi~getGeneralImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get General Image.
     * @param {String} name The name of the image.
     * @param {String} type Image Type (primary, backdrop, logo, etc).
     * @param {module:api/ImageByNameApi~getGeneralImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getGeneralImage(name, type, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getGeneralImage");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getGeneralImage");
      }

      let pathParams = {
        'name': name,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase', 'application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Images/General/{name}/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeneralImages operation.
     * @callback module:api/ImageByNameApi~getGeneralImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageByNameInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all general images.
     * @param {module:api/ImageByNameApi~getGeneralImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageByNameInfo>}
     */
    getGeneralImages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [ImageByNameInfo];
      return this.apiClient.callApi(
        '/Images/General', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaInfoImage operation.
     * @callback module:api/ImageByNameApi~getMediaInfoImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get media info image.
     * @param {String} theme The theme to get the image from.
     * @param {String} name The name of the image.
     * @param {module:api/ImageByNameApi~getMediaInfoImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getMediaInfoImage(theme, name, callback) {
      let postBody = null;
      // verify the required parameter 'theme' is set
      if (theme === undefined || theme === null) {
        throw new Error("Missing the required parameter 'theme' when calling getMediaInfoImage");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getMediaInfoImage");
      }

      let pathParams = {
        'theme': theme,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase', 'application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Images/MediaInfo/{theme}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaInfoImages operation.
     * @callback module:api/ImageByNameApi~getMediaInfoImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageByNameInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all media info images.
     * @param {module:api/ImageByNameApi~getMediaInfoImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageByNameInfo>}
     */
    getMediaInfoImages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [ImageByNameInfo];
      return this.apiClient.callApi(
        '/Images/MediaInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRatingImage operation.
     * @callback module:api/ImageByNameApi~getRatingImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rating image.
     * @param {String} theme The theme to get the image from.
     * @param {String} name The name of the image.
     * @param {module:api/ImageByNameApi~getRatingImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getRatingImage(theme, name, callback) {
      let postBody = null;
      // verify the required parameter 'theme' is set
      if (theme === undefined || theme === null) {
        throw new Error("Missing the required parameter 'theme' when calling getRatingImage");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getRatingImage");
      }

      let pathParams = {
        'theme': theme,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase', 'application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Images/Ratings/{theme}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRatingImages operation.
     * @callback module:api/ImageByNameApi~getRatingImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageByNameInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all general images.
     * @param {module:api/ImageByNameApi~getRatingImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageByNameInfo>}
     */
    getRatingImages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [ImageByNameInfo];
      return this.apiClient.callApi(
        '/Images/Ratings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
