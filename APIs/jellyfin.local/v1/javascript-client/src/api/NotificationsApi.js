/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NameIdPair from '../model/NameIdPair';
import NotificationLevel from '../model/NotificationLevel';
import NotificationResultDto from '../model/NotificationResultDto';
import NotificationTypeInfo from '../model/NotificationTypeInfo';
import NotificationsSummaryDto from '../model/NotificationsSummaryDto';

/**
* Notifications service.
* @module api/NotificationsApi
* @version v1
*/
export default class NotificationsApi {

    /**
    * Constructs a new NotificationsApi. 
    * @alias module:api/NotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAdminNotification operation.
     * @callback module:api/NotificationsApi~createAdminNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a notification to all admins.
     * @param {Object} opts Optional parameters
     * @param {String} [url] The URL of the notification.
     * @param {module:model/NotificationLevel} [level] The level of the notification.
     * @param {String} [name = '')] The name of the notification.
     * @param {String} [description = '')] The description of the notification.
     * @param {module:api/NotificationsApi~createAdminNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAdminNotification(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'url': opts['url'],
        'level': opts['level'],
        'name': opts['name'],
        'description': opts['description']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Notifications/Admin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationServices operation.
     * @callback module:api/NotificationsApi~getNotificationServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NameIdPair>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets notification services.
     * @param {module:api/NotificationsApi~getNotificationServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NameIdPair>}
     */
    getNotificationServices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [NameIdPair];
      return this.apiClient.callApi(
        '/Notifications/Services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationTypes operation.
     * @callback module:api/NotificationsApi~getNotificationTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationTypeInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets notification types.
     * @param {module:api/NotificationsApi~getNotificationTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationTypeInfo>}
     */
    getNotificationTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [NotificationTypeInfo];
      return this.apiClient.callApi(
        '/Notifications/Types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotifications operation.
     * @callback module:api/NotificationsApi~getNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a user's notifications.
     * @param {String} userId 
     * @param {module:api/NotificationsApi~getNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationResultDto}
     */
    getNotifications(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNotifications");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = NotificationResultDto;
      return this.apiClient.callApi(
        '/Notifications/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsSummary operation.
     * @callback module:api/NotificationsApi~getNotificationsSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationsSummaryDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a user's notification summary.
     * @param {String} userId 
     * @param {module:api/NotificationsApi~getNotificationsSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationsSummaryDto}
     */
    getNotificationsSummary(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNotificationsSummary");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = NotificationsSummaryDto;
      return this.apiClient.callApi(
        '/Notifications/{userId}/Summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRead operation.
     * @callback module:api/NotificationsApi~setReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets notifications as read.
     * @param {String} userId 
     * @param {module:api/NotificationsApi~setReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRead(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setRead");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Notifications/{userId}/Read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUnread operation.
     * @callback module:api/NotificationsApi~setUnreadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets notifications as unread.
     * @param {String} userId 
     * @param {module:api/NotificationsApi~setUnreadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setUnread(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUnread");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Notifications/{userId}/Unread', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
