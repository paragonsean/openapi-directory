/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* UniversalAudio service.
* @module api/UniversalAudioApi
* @version v1
*/
export default class UniversalAudioApi {

    /**
    * Constructs a new UniversalAudioApi. 
    * @alias module:api/UniversalAudioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getUniversalAudioStream operation.
     * @callback module:api/UniversalAudioApi~getUniversalAudioStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an audio stream.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [container] Optional. The audio container.
     * @param {String} [mediaSourceId] The media version id, if playing an alternate version.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [userId] Optional. The user id.
     * @param {String} [audioCodec] Optional. The audio codec to transcode to.
     * @param {Number} [maxAudioChannels] Optional. The maximum number of audio channels.
     * @param {Number} [transcodingAudioChannels] Optional. The number of how many audio channels to transcode to.
     * @param {Number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {String} [transcodingContainer] Optional. The container to transcode to.
     * @param {String} [transcodingProtocol] Optional. The transcoding protocol.
     * @param {Number} [maxAudioSampleRate] Optional. The maximum audio sample rate.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Boolean} [enableRemoteMedia] Optional. Whether to enable remote media.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Boolean} [enableRedirection = true)] Whether to enable redirection. Defaults to true.
     * @param {module:api/UniversalAudioApi~getUniversalAudioStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getUniversalAudioStream(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getUniversalAudioStream");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'container': this.apiClient.buildCollectionParam(opts['container'], 'multi'),
        'mediaSourceId': opts['mediaSourceId'],
        'deviceId': opts['deviceId'],
        'userId': opts['userId'],
        'audioCodec': opts['audioCodec'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'transcodingAudioChannels': opts['transcodingAudioChannels'],
        'maxStreamingBitrate': opts['maxStreamingBitrate'],
        'audioBitRate': opts['audioBitRate'],
        'startTimeTicks': opts['startTimeTicks'],
        'transcodingContainer': opts['transcodingContainer'],
        'transcodingProtocol': opts['transcodingProtocol'],
        'maxAudioSampleRate': opts['maxAudioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'enableRemoteMedia': opts['enableRemoteMedia'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'enableRedirection': opts['enableRedirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['audio/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Audio/{itemId}/universal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headUniversalAudioStream operation.
     * @callback module:api/UniversalAudioApi~headUniversalAudioStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an audio stream.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [container] Optional. The audio container.
     * @param {String} [mediaSourceId] The media version id, if playing an alternate version.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [userId] Optional. The user id.
     * @param {String} [audioCodec] Optional. The audio codec to transcode to.
     * @param {Number} [maxAudioChannels] Optional. The maximum number of audio channels.
     * @param {Number} [transcodingAudioChannels] Optional. The number of how many audio channels to transcode to.
     * @param {Number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {String} [transcodingContainer] Optional. The container to transcode to.
     * @param {String} [transcodingProtocol] Optional. The transcoding protocol.
     * @param {Number} [maxAudioSampleRate] Optional. The maximum audio sample rate.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Boolean} [enableRemoteMedia] Optional. Whether to enable remote media.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Boolean} [enableRedirection = true)] Whether to enable redirection. Defaults to true.
     * @param {module:api/UniversalAudioApi~headUniversalAudioStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headUniversalAudioStream(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling headUniversalAudioStream");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'container': this.apiClient.buildCollectionParam(opts['container'], 'multi'),
        'mediaSourceId': opts['mediaSourceId'],
        'deviceId': opts['deviceId'],
        'userId': opts['userId'],
        'audioCodec': opts['audioCodec'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'transcodingAudioChannels': opts['transcodingAudioChannels'],
        'maxStreamingBitrate': opts['maxStreamingBitrate'],
        'audioBitRate': opts['audioBitRate'],
        'startTimeTicks': opts['startTimeTicks'],
        'transcodingContainer': opts['transcodingContainer'],
        'transcodingProtocol': opts['transcodingProtocol'],
        'maxAudioSampleRate': opts['maxAudioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'enableRemoteMedia': opts['enableRemoteMedia'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'enableRedirection': opts['enableRedirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['audio/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Audio/{itemId}/universal', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
