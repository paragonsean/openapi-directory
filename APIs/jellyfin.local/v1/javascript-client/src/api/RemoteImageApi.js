/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageProviderInfo from '../model/ImageProviderInfo';
import ImageType from '../model/ImageType';
import ProblemDetails from '../model/ProblemDetails';
import RemoteImageResult from '../model/RemoteImageResult';

/**
* RemoteImage service.
* @module api/RemoteImageApi
* @version v1
*/
export default class RemoteImageApi {

    /**
    * Constructs a new RemoteImageApi. 
    * @alias module:api/RemoteImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the downloadRemoteImage operation.
     * @callback module:api/RemoteImageApi~downloadRemoteImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads a remote image for an item.
     * @param {String} itemId Item Id.
     * @param {module:model/ImageType} type The image type.
     * @param {Object} opts Optional parameters
     * @param {String} [imageUrl] The image url.
     * @param {module:api/RemoteImageApi~downloadRemoteImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadRemoteImage(itemId, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling downloadRemoteImage");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling downloadRemoteImage");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'type': type,
        'imageUrl': opts['imageUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}/RemoteImages/Download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteImage operation.
     * @callback module:api/RemoteImageApi~getRemoteImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a remote image.
     * @param {String} imageUrl The image url.
     * @param {module:api/RemoteImageApi~getRemoteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getRemoteImage(imageUrl, callback) {
      let postBody = null;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling getRemoteImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'imageUrl': imageUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase', 'application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Images/Remote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteImageProviders operation.
     * @callback module:api/RemoteImageApi~getRemoteImageProvidersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageProviderInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available remote image providers for an item.
     * @param {String} itemId Item Id.
     * @param {module:api/RemoteImageApi~getRemoteImageProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageProviderInfo>}
     */
    getRemoteImageProviders(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getRemoteImageProviders");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [ImageProviderInfo];
      return this.apiClient.callApi(
        '/Items/{itemId}/RemoteImages/Providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteImages operation.
     * @callback module:api/RemoteImageApi~getRemoteImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteImageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available remote images for an item.
     * @param {String} itemId Item Id.
     * @param {Object} opts Optional parameters
     * @param {module:model/ImageType} [type] The image type.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {String} [providerName] Optional. The image provider to use.
     * @param {Boolean} [includeAllLanguages = false)] Optional. Include all languages.
     * @param {module:api/RemoteImageApi~getRemoteImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteImageResult}
     */
    getRemoteImages(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getRemoteImages");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'type': opts['type'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'providerName': opts['providerName'],
        'includeAllLanguages': opts['includeAllLanguages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = RemoteImageResult;
      return this.apiClient.callApi(
        '/Items/{itemId}/RemoteImages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
