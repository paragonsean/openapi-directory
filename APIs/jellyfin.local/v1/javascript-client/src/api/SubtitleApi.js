/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FontFile from '../model/FontFile';
import ProblemDetails from '../model/ProblemDetails';
import RemoteSubtitleInfo from '../model/RemoteSubtitleInfo';
import UploadSubtitleDto from '../model/UploadSubtitleDto';

/**
* Subtitle service.
* @module api/SubtitleApi
* @version v1
*/
export default class SubtitleApi {

    /**
    * Constructs a new SubtitleApi. 
    * @alias module:api/SubtitleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSubtitle operation.
     * @callback module:api/SubtitleApi~deleteSubtitleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an external subtitle file.
     * @param {String} itemId The item id.
     * @param {Number} index The index of the subtitle file.
     * @param {module:api/SubtitleApi~deleteSubtitleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubtitle(itemId, index, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteSubtitle");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling deleteSubtitle");
      }

      let pathParams = {
        'itemId': itemId,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Videos/{itemId}/Subtitles/{index}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadRemoteSubtitles operation.
     * @callback module:api/SubtitleApi~downloadRemoteSubtitlesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads a remote subtitle.
     * @param {String} itemId The item id.
     * @param {String} subtitleId The subtitle id.
     * @param {module:api/SubtitleApi~downloadRemoteSubtitlesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadRemoteSubtitles(itemId, subtitleId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling downloadRemoteSubtitles");
      }
      // verify the required parameter 'subtitleId' is set
      if (subtitleId === undefined || subtitleId === null) {
        throw new Error("Missing the required parameter 'subtitleId' when calling downloadRemoteSubtitles");
      }

      let pathParams = {
        'itemId': itemId,
        'subtitleId': subtitleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFallbackFont operation.
     * @callback module:api/SubtitleApi~getFallbackFontCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a fallback font file.
     * @param {String} name The name of the fallback font file to get.
     * @param {module:api/SubtitleApi~getFallbackFontCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getFallbackFont(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getFallbackFont");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['font/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/FallbackFont/Fonts/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFallbackFontList operation.
     * @callback module:api/SubtitleApi~getFallbackFontListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FontFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of available fallback font files.
     * @param {module:api/SubtitleApi~getFallbackFontListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FontFile>}
     */
    getFallbackFontList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [FontFile];
      return this.apiClient.callApi(
        '/FallbackFont/Fonts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteSubtitles operation.
     * @callback module:api/SubtitleApi~getRemoteSubtitlesCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the remote subtitles.
     * @param {String} id The item id.
     * @param {module:api/SubtitleApi~getRemoteSubtitlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getRemoteSubtitles(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRemoteSubtitles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['text/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Providers/Subtitles/Subtitles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubtitle operation.
     * @callback module:api/SubtitleApi~getSubtitleCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets subtitles in a specified format.
     * @param {String} itemId The item id.
     * @param {String} mediaSourceId The media source id.
     * @param {Number} index The subtitle stream index.
     * @param {String} format The format of the returned subtitle.
     * @param {Object} opts Optional parameters
     * @param {Number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
     * @param {Boolean} [copyTimestamps = false)] Optional. Whether to copy the timestamps.
     * @param {Boolean} [addVttTimeMap = false)] Optional. Whether to add a VTT time map.
     * @param {Number} [startPositionTicks = 0)] Optional. The start position of the subtitle in ticks.
     * @param {module:api/SubtitleApi~getSubtitleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getSubtitle(itemId, mediaSourceId, index, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSubtitle");
      }
      // verify the required parameter 'mediaSourceId' is set
      if (mediaSourceId === undefined || mediaSourceId === null) {
        throw new Error("Missing the required parameter 'mediaSourceId' when calling getSubtitle");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling getSubtitle");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getSubtitle");
      }

      let pathParams = {
        'itemId': itemId,
        'mediaSourceId': mediaSourceId,
        'index': index,
        'format': format
      };
      let queryParams = {
        'endPositionTicks': opts['endPositionTicks'],
        'copyTimestamps': opts['copyTimestamps'],
        'addVttTimeMap': opts['addVttTimeMap'],
        'startPositionTicks': opts['startPositionTicks']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/Stream.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubtitlePlaylist operation.
     * @callback module:api/SubtitleApi~getSubtitlePlaylistCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an HLS subtitle playlist.
     * @param {String} itemId The item id.
     * @param {Number} index The subtitle stream index.
     * @param {String} mediaSourceId The media source id.
     * @param {Number} segmentLength The subtitle segment length.
     * @param {module:api/SubtitleApi~getSubtitlePlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getSubtitlePlaylist(itemId, index, mediaSourceId, segmentLength, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSubtitlePlaylist");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling getSubtitlePlaylist");
      }
      // verify the required parameter 'mediaSourceId' is set
      if (mediaSourceId === undefined || mediaSourceId === null) {
        throw new Error("Missing the required parameter 'mediaSourceId' when calling getSubtitlePlaylist");
      }
      // verify the required parameter 'segmentLength' is set
      if (segmentLength === undefined || segmentLength === null) {
        throw new Error("Missing the required parameter 'segmentLength' when calling getSubtitlePlaylist");
      }

      let pathParams = {
        'itemId': itemId,
        'index': index,
        'mediaSourceId': mediaSourceId
      };
      let queryParams = {
        'segmentLength': segmentLength
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/x-mpegURL'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubtitleWithTicks operation.
     * @callback module:api/SubtitleApi~getSubtitleWithTicksCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets subtitles in a specified format.
     * @param {String} itemId The item id.
     * @param {String} mediaSourceId The media source id.
     * @param {Number} index The subtitle stream index.
     * @param {Number} startPositionTicks Optional. The start position of the subtitle in ticks.
     * @param {String} format The format of the returned subtitle.
     * @param {Object} opts Optional parameters
     * @param {Number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
     * @param {Boolean} [copyTimestamps = false)] Optional. Whether to copy the timestamps.
     * @param {Boolean} [addVttTimeMap = false)] Optional. Whether to add a VTT time map.
     * @param {module:api/SubtitleApi~getSubtitleWithTicksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getSubtitleWithTicks(itemId, mediaSourceId, index, startPositionTicks, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSubtitleWithTicks");
      }
      // verify the required parameter 'mediaSourceId' is set
      if (mediaSourceId === undefined || mediaSourceId === null) {
        throw new Error("Missing the required parameter 'mediaSourceId' when calling getSubtitleWithTicks");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling getSubtitleWithTicks");
      }
      // verify the required parameter 'startPositionTicks' is set
      if (startPositionTicks === undefined || startPositionTicks === null) {
        throw new Error("Missing the required parameter 'startPositionTicks' when calling getSubtitleWithTicks");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getSubtitleWithTicks");
      }

      let pathParams = {
        'itemId': itemId,
        'mediaSourceId': mediaSourceId,
        'index': index,
        'startPositionTicks': startPositionTicks,
        'format': format
      };
      let queryParams = {
        'endPositionTicks': opts['endPositionTicks'],
        'copyTimestamps': opts['copyTimestamps'],
        'addVttTimeMap': opts['addVttTimeMap']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/{startPositionTicks}/Stream.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRemoteSubtitles operation.
     * @callback module:api/SubtitleApi~searchRemoteSubtitlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSubtitleInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search remote subtitles.
     * @param {String} itemId The item id.
     * @param {String} language The language of the subtitles.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isPerfectMatch] Optional. Only show subtitles which are a perfect match.
     * @param {module:api/SubtitleApi~searchRemoteSubtitlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSubtitleInfo>}
     */
    searchRemoteSubtitles(itemId, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling searchRemoteSubtitles");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling searchRemoteSubtitles");
      }

      let pathParams = {
        'itemId': itemId,
        'language': language
      };
      let queryParams = {
        'isPerfectMatch': opts['isPerfectMatch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSubtitleInfo];
      return this.apiClient.callApi(
        '/Items/{itemId}/RemoteSearch/Subtitles/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadSubtitle operation.
     * @callback module:api/SubtitleApi~uploadSubtitleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an external subtitle file.
     * @param {String} itemId The item the subtitle belongs to.
     * @param {module:model/UploadSubtitleDto} uploadSubtitleDto The request body.
     * @param {module:api/SubtitleApi~uploadSubtitleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadSubtitle(itemId, uploadSubtitleDto, callback) {
      let postBody = uploadSubtitleDto;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling uploadSubtitle");
      }
      // verify the required parameter 'uploadSubtitleDto' is set
      if (uploadSubtitleDto === undefined || uploadSubtitleDto === null) {
        throw new Error("Missing the required parameter 'uploadSubtitleDto' when calling uploadSubtitle");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Videos/{itemId}/Subtitles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
