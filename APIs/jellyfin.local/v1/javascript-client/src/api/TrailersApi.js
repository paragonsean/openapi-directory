/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ImageType from '../model/ImageType';
import ItemFields from '../model/ItemFields';
import ItemFilter from '../model/ItemFilter';
import LocationType from '../model/LocationType';
import SeriesStatus from '../model/SeriesStatus';
import VideoType from '../model/VideoType';

/**
* Trailers service.
* @module api/TrailersApi
* @version v1
*/
export default class TrailersApi {

    /**
    * Constructs a new TrailersApi. 
    * @alias module:api/TrailersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getTrailers operation.
     * @callback module:api/TrailersApi~getTrailersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds movies and trailers similar to a given trailer.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] The user id.
     * @param {String} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
     * @param {Boolean} [hasThemeSong] Optional filter by items with theme songs.
     * @param {Boolean} [hasThemeVideo] Optional filter by items with theme videos.
     * @param {Boolean} [hasSubtitles] Optional filter by items with subtitles.
     * @param {Boolean} [hasSpecialFeature] Optional filter by items with special features.
     * @param {Boolean} [hasTrailer] Optional filter by items with trailers.
     * @param {String} [adjacentTo] Optional. Return items that are siblings of a supplied item.
     * @param {Number} [parentIndexNumber] Optional filter by parent index number.
     * @param {Boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
     * @param {Boolean} [isHd] Optional filter by items that are HD or not.
     * @param {Boolean} [is4K] Optional filter by items that are 4K or not.
     * @param {Array.<module:model/LocationType>} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
     * @param {Array.<module:model/LocationType>} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
     * @param {Boolean} [isMissing] Optional filter by items that are missing episodes or not.
     * @param {Boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
     * @param {Number} [minCommunityRating] Optional filter by minimum community rating.
     * @param {Number} [minCriticRating] Optional filter by minimum critic rating.
     * @param {Date} [minPremiereDate] Optional. The minimum premiere date. Format = ISO.
     * @param {Date} [minDateLastSaved] Optional. The minimum last saved date. Format = ISO.
     * @param {Date} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format = ISO.
     * @param {Date} [maxPremiereDate] Optional. The maximum premiere date. Format = ISO.
     * @param {Boolean} [hasOverview] Optional filter by items that have an overview or not.
     * @param {Boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
     * @param {Boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
     * @param {Boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
     * @param {Array.<String>} [excludeItemIds] Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
     * @param {String} [searchTerm] Optional. Filter based on a search term.
     * @param {String} [sortOrder] Sort Order - Ascending,Descending.
     * @param {String} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
     * @param {Array.<String>} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
     * @param {Array.<module:model/ItemFilter>} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
     * @param {Boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
     * @param {Array.<String>} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
     * @param {Array.<module:model/ImageType>} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
     * @param {String} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
     * @param {Boolean} [isPlayed] Optional filter by items that are played, or not.
     * @param {Array.<String>} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
     * @param {Array.<String>} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
     * @param {Array.<String>} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
     * @param {Array.<Number>} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
     * @param {Boolean} [enableUserData] Optional, include user data.
     * @param {Number} [imageTypeLimit] Optional, the max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {String} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
     * @param {Array.<String>} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
     * @param {Array.<String>} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
     * @param {Array.<String>} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
     * @param {Array.<String>} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
     * @param {Array.<String>} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
     * @param {Array.<String>} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
     * @param {Array.<String>} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
     * @param {Array.<String>} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
     * @param {Array.<String>} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
     * @param {Array.<String>} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
     * @param {Array.<String>} [ids] Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
     * @param {Array.<module:model/VideoType>} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
     * @param {String} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
     * @param {Boolean} [isLocked] Optional filter by items that are locked.
     * @param {Boolean} [isPlaceHolder] Optional filter by items that are placeholders.
     * @param {Boolean} [hasOfficialRating] Optional filter by items that have official ratings.
     * @param {Boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
     * @param {Number} [minWidth] Optional. Filter by the minimum width of the item.
     * @param {Number} [minHeight] Optional. Filter by the minimum height of the item.
     * @param {Number} [maxWidth] Optional. Filter by the maximum width of the item.
     * @param {Number} [maxHeight] Optional. Filter by the maximum height of the item.
     * @param {Boolean} [is3D] Optional filter by items that are 3D, or not.
     * @param {Array.<module:model/SeriesStatus>} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimited.
     * @param {String} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
     * @param {String} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
     * @param {String} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
     * @param {Array.<String>} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
     * @param {Array.<String>} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
     * @param {Boolean} [enableTotalRecordCount = true)] Optional. Enable the total record count.
     * @param {Boolean} [enableImages = true)] Optional, include image information in output.
     * @param {module:api/TrailersApi~getTrailersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getTrailers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'maxOfficialRating': opts['maxOfficialRating'],
        'hasThemeSong': opts['hasThemeSong'],
        'hasThemeVideo': opts['hasThemeVideo'],
        'hasSubtitles': opts['hasSubtitles'],
        'hasSpecialFeature': opts['hasSpecialFeature'],
        'hasTrailer': opts['hasTrailer'],
        'adjacentTo': opts['adjacentTo'],
        'parentIndexNumber': opts['parentIndexNumber'],
        'hasParentalRating': opts['hasParentalRating'],
        'isHd': opts['isHd'],
        'is4K': opts['is4K'],
        'locationTypes': this.apiClient.buildCollectionParam(opts['locationTypes'], 'multi'),
        'excludeLocationTypes': this.apiClient.buildCollectionParam(opts['excludeLocationTypes'], 'multi'),
        'isMissing': opts['isMissing'],
        'isUnaired': opts['isUnaired'],
        'minCommunityRating': opts['minCommunityRating'],
        'minCriticRating': opts['minCriticRating'],
        'minPremiereDate': opts['minPremiereDate'],
        'minDateLastSaved': opts['minDateLastSaved'],
        'minDateLastSavedForUser': opts['minDateLastSavedForUser'],
        'maxPremiereDate': opts['maxPremiereDate'],
        'hasOverview': opts['hasOverview'],
        'hasImdbId': opts['hasImdbId'],
        'hasTmdbId': opts['hasTmdbId'],
        'hasTvdbId': opts['hasTvdbId'],
        'excludeItemIds': this.apiClient.buildCollectionParam(opts['excludeItemIds'], 'multi'),
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'recursive': opts['recursive'],
        'searchTerm': opts['searchTerm'],
        'sortOrder': opts['sortOrder'],
        'parentId': opts['parentId'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'excludeItemTypes': this.apiClient.buildCollectionParam(opts['excludeItemTypes'], 'multi'),
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'isFavorite': opts['isFavorite'],
        'mediaTypes': this.apiClient.buildCollectionParam(opts['mediaTypes'], 'multi'),
        'imageTypes': this.apiClient.buildCollectionParam(opts['imageTypes'], 'multi'),
        'sortBy': opts['sortBy'],
        'isPlayed': opts['isPlayed'],
        'genres': this.apiClient.buildCollectionParam(opts['genres'], 'multi'),
        'officialRatings': this.apiClient.buildCollectionParam(opts['officialRatings'], 'multi'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'years': this.apiClient.buildCollectionParam(opts['years'], 'multi'),
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'person': opts['person'],
        'personIds': this.apiClient.buildCollectionParam(opts['personIds'], 'multi'),
        'personTypes': this.apiClient.buildCollectionParam(opts['personTypes'], 'multi'),
        'studios': this.apiClient.buildCollectionParam(opts['studios'], 'multi'),
        'artists': this.apiClient.buildCollectionParam(opts['artists'], 'multi'),
        'excludeArtistIds': this.apiClient.buildCollectionParam(opts['excludeArtistIds'], 'multi'),
        'artistIds': this.apiClient.buildCollectionParam(opts['artistIds'], 'multi'),
        'albumArtistIds': this.apiClient.buildCollectionParam(opts['albumArtistIds'], 'multi'),
        'contributingArtistIds': this.apiClient.buildCollectionParam(opts['contributingArtistIds'], 'multi'),
        'albums': this.apiClient.buildCollectionParam(opts['albums'], 'multi'),
        'albumIds': this.apiClient.buildCollectionParam(opts['albumIds'], 'multi'),
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'videoTypes': this.apiClient.buildCollectionParam(opts['videoTypes'], 'multi'),
        'minOfficialRating': opts['minOfficialRating'],
        'isLocked': opts['isLocked'],
        'isPlaceHolder': opts['isPlaceHolder'],
        'hasOfficialRating': opts['hasOfficialRating'],
        'collapseBoxSetItems': opts['collapseBoxSetItems'],
        'minWidth': opts['minWidth'],
        'minHeight': opts['minHeight'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'is3D': opts['is3D'],
        'seriesStatus': this.apiClient.buildCollectionParam(opts['seriesStatus'], 'multi'),
        'nameStartsWithOrGreater': opts['nameStartsWithOrGreater'],
        'nameStartsWith': opts['nameStartsWith'],
        'nameLessThan': opts['nameLessThan'],
        'studioIds': this.apiClient.buildCollectionParam(opts['studioIds'], 'multi'),
        'genreIds': this.apiClient.buildCollectionParam(opts['genreIds'], 'multi'),
        'enableTotalRecordCount': opts['enableTotalRecordCount'],
        'enableImages': opts['enableImages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Trailers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
