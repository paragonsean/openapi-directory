/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ProblemDetails from '../model/ProblemDetails';
import SpecialViewOptionDto from '../model/SpecialViewOptionDto';

/**
* UserViews service.
* @module api/UserViewsApi
* @version v1
*/
export default class UserViewsApi {

    /**
    * Constructs a new UserViewsApi. 
    * @alias module:api/UserViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getGroupingOptions operation.
     * @callback module:api/UserViewsApi~getGroupingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SpecialViewOptionDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user view grouping options.
     * @param {String} userId User id.
     * @param {module:api/UserViewsApi~getGroupingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SpecialViewOptionDto>}
     */
    getGroupingOptions(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getGroupingOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [SpecialViewOptionDto];
      return this.apiClient.callApi(
        '/Users/{userId}/GroupingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserViews operation.
     * @callback module:api/UserViewsApi~getUserViewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user views.
     * @param {String} userId User id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeExternalContent] Whether or not to include external views such as channels or live tv.
     * @param {Array.<String>} [presetViews] Preset views.
     * @param {Boolean} [includeHidden = false)] Whether or not to include hidden content.
     * @param {module:api/UserViewsApi~getUserViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getUserViews(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserViews");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'includeExternalContent': opts['includeExternalContent'],
        'presetViews': this.apiClient.buildCollectionParam(opts['presetViews'], 'multi'),
        'includeHidden': opts['includeHidden']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Users/{userId}/Views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
