/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientCapabilitiesDto from '../model/ClientCapabilitiesDto';
import GeneralCommand from '../model/GeneralCommand';
import GeneralCommandType from '../model/GeneralCommandType';
import NameIdPair from '../model/NameIdPair';
import PlayCommand from '../model/PlayCommand';
import PlaystateCommand from '../model/PlaystateCommand';
import SessionInfo from '../model/SessionInfo';

/**
* Session service.
* @module api/SessionApi
* @version v1
*/
export default class SessionApi {

    /**
    * Constructs a new SessionApi. 
    * @alias module:api/SessionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUserToSession operation.
     * @callback module:api/SessionApi~addUserToSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an additional user to a session.
     * @param {String} sessionId The session id.
     * @param {String} userId The user id.
     * @param {module:api/SessionApi~addUserToSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addUserToSession(sessionId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling addUserToSession");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserToSession");
      }

      let pathParams = {
        'sessionId': sessionId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/{sessionId}/User/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayContent operation.
     * @callback module:api/SessionApi~displayContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Instructs a session to browse to an item or view.
     * @param {String} sessionId The session Id.
     * @param {String} itemType The type of item to browse to.
     * @param {String} itemId The Id of the item.
     * @param {String} itemName The name of the item.
     * @param {module:api/SessionApi~displayContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    displayContent(sessionId, itemType, itemId, itemName, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling displayContent");
      }
      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling displayContent");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling displayContent");
      }
      // verify the required parameter 'itemName' is set
      if (itemName === undefined || itemName === null) {
        throw new Error("Missing the required parameter 'itemName' when calling displayContent");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
        'itemType': itemType,
        'itemId': itemId,
        'itemName': itemName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/{sessionId}/Viewing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthProviders operation.
     * @callback module:api/SessionApi~getAuthProvidersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NameIdPair>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all auth providers.
     * @param {module:api/SessionApi~getAuthProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NameIdPair>}
     */
    getAuthProviders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [NameIdPair];
      return this.apiClient.callApi(
        '/Auth/Providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPasswordResetProviders operation.
     * @callback module:api/SessionApi~getPasswordResetProvidersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NameIdPair>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all password reset providers.
     * @param {module:api/SessionApi~getPasswordResetProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NameIdPair>}
     */
    getPasswordResetProviders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [NameIdPair];
      return this.apiClient.callApi(
        '/Auth/PasswordResetProviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessions operation.
     * @callback module:api/SessionApi~getSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SessionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of sessions.
     * @param {Object} opts Optional parameters
     * @param {String} [controllableByUserId] Filter by sessions that a given user is allowed to remote control.
     * @param {String} [deviceId] Filter by device Id.
     * @param {Number} [activeWithinSeconds] Optional. Filter by sessions that were active in the last n seconds.
     * @param {module:api/SessionApi~getSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SessionInfo>}
     */
    getSessions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'controllableByUserId': opts['controllableByUserId'],
        'deviceId': opts['deviceId'],
        'activeWithinSeconds': opts['activeWithinSeconds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [SessionInfo];
      return this.apiClient.callApi(
        '/Sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the play operation.
     * @callback module:api/SessionApi~playCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Instructs a session to play an item.
     * @param {String} sessionId The session id.
     * @param {module:model/PlayCommand} playCommand The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
     * @param {Array.<String>} itemIds The ids of the items to play, comma delimited.
     * @param {Object} opts Optional parameters
     * @param {Number} [startPositionTicks] The starting position of the first item.
     * @param {module:api/SessionApi~playCallback} callback The callback function, accepting three arguments: error, data, response
     */
    play(sessionId, playCommand, itemIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling play");
      }
      // verify the required parameter 'playCommand' is set
      if (playCommand === undefined || playCommand === null) {
        throw new Error("Missing the required parameter 'playCommand' when calling play");
      }
      // verify the required parameter 'itemIds' is set
      if (itemIds === undefined || itemIds === null) {
        throw new Error("Missing the required parameter 'itemIds' when calling play");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
        'playCommand': playCommand,
        'itemIds': this.apiClient.buildCollectionParam(itemIds, 'multi'),
        'startPositionTicks': opts['startPositionTicks']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/{sessionId}/Playing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCapabilities operation.
     * @callback module:api/SessionApi~postCapabilitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates capabilities for a device.
     * @param {Object} opts Optional parameters
     * @param {String} [id] The session id.
     * @param {Array.<String>} [playableMediaTypes] A list of playable media types, comma delimited. Audio, Video, Book, Photo.
     * @param {Array.<module:model/GeneralCommandType>} [supportedCommands] A list of supported remote control commands, comma delimited.
     * @param {Boolean} [supportsMediaControl = false)] Determines whether media can be played remotely..
     * @param {Boolean} [supportsSync = false)] Determines whether sync is supported.
     * @param {Boolean} [supportsPersistentIdentifier = true)] Determines whether the device supports a unique identifier.
     * @param {module:api/SessionApi~postCapabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCapabilities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'playableMediaTypes': this.apiClient.buildCollectionParam(opts['playableMediaTypes'], 'multi'),
        'supportedCommands': this.apiClient.buildCollectionParam(opts['supportedCommands'], 'multi'),
        'supportsMediaControl': opts['supportsMediaControl'],
        'supportsSync': opts['supportsSync'],
        'supportsPersistentIdentifier': opts['supportsPersistentIdentifier']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/Capabilities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFullCapabilities operation.
     * @callback module:api/SessionApi~postFullCapabilitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates capabilities for a device.
     * @param {module:model/ClientCapabilitiesDto} clientCapabilitiesDto The MediaBrowser.Model.Session.ClientCapabilities.
     * @param {Object} opts Optional parameters
     * @param {String} [id] The session id.
     * @param {module:api/SessionApi~postFullCapabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postFullCapabilities(clientCapabilitiesDto, opts, callback) {
      opts = opts || {};
      let postBody = clientCapabilitiesDto;
      // verify the required parameter 'clientCapabilitiesDto' is set
      if (clientCapabilitiesDto === undefined || clientCapabilitiesDto === null) {
        throw new Error("Missing the required parameter 'clientCapabilitiesDto' when calling postFullCapabilities");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/Capabilities/Full', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserFromSession operation.
     * @callback module:api/SessionApi~removeUserFromSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an additional user from a session.
     * @param {String} sessionId The session id.
     * @param {String} userId The user id.
     * @param {module:api/SessionApi~removeUserFromSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUserFromSession(sessionId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling removeUserFromSession");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeUserFromSession");
      }

      let pathParams = {
        'sessionId': sessionId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/{sessionId}/User/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportSessionEnded operation.
     * @callback module:api/SessionApi~reportSessionEndedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports that a session has ended.
     * @param {module:api/SessionApi~reportSessionEndedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportSessionEnded(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/Logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportViewing operation.
     * @callback module:api/SessionApi~reportViewingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports that a session is viewing an item.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [sessionId] The session id.
     * @param {module:api/SessionApi~reportViewingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportViewing(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling reportViewing");
      }

      let pathParams = {
      };
      let queryParams = {
        'sessionId': opts['sessionId'],
        'itemId': itemId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/Viewing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendFullGeneralCommand operation.
     * @callback module:api/SessionApi~sendFullGeneralCommandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issues a full general command to a client.
     * @param {String} sessionId The session id.
     * @param {module:model/GeneralCommand} generalCommand The MediaBrowser.Model.Session.GeneralCommand.
     * @param {module:api/SessionApi~sendFullGeneralCommandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendFullGeneralCommand(sessionId, generalCommand, callback) {
      let postBody = generalCommand;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling sendFullGeneralCommand");
      }
      // verify the required parameter 'generalCommand' is set
      if (generalCommand === undefined || generalCommand === null) {
        throw new Error("Missing the required parameter 'generalCommand' when calling sendFullGeneralCommand");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/{sessionId}/Command', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendGeneralCommand operation.
     * @callback module:api/SessionApi~sendGeneralCommandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issues a general command to a client.
     * @param {String} sessionId The session id.
     * @param {module:model/GeneralCommandType} command The command to send.
     * @param {module:api/SessionApi~sendGeneralCommandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendGeneralCommand(sessionId, command, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling sendGeneralCommand");
      }
      // verify the required parameter 'command' is set
      if (command === undefined || command === null) {
        throw new Error("Missing the required parameter 'command' when calling sendGeneralCommand");
      }

      let pathParams = {
        'sessionId': sessionId,
        'command': command
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/{sessionId}/Command/{command}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessageCommand operation.
     * @callback module:api/SessionApi~sendMessageCommandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issues a command to a client to display a message to the user.
     * @param {String} sessionId The session id.
     * @param {String} text The message test.
     * @param {Object} opts Optional parameters
     * @param {String} [header] The message header.
     * @param {Number} [timeoutMs] The message timeout. If omitted the user will have to confirm viewing the message.
     * @param {module:api/SessionApi~sendMessageCommandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendMessageCommand(sessionId, text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling sendMessageCommand");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling sendMessageCommand");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
        'text': text,
        'header': opts['header'],
        'timeoutMs': opts['timeoutMs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/{sessionId}/Message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPlaystateCommand operation.
     * @callback module:api/SessionApi~sendPlaystateCommandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issues a playstate command to a client.
     * @param {String} sessionId The session id.
     * @param {module:model/PlaystateCommand} command The MediaBrowser.Model.Session.PlaystateCommand.
     * @param {Object} opts Optional parameters
     * @param {Number} [seekPositionTicks] The optional position ticks.
     * @param {String} [controllingUserId] The optional controlling user id.
     * @param {module:api/SessionApi~sendPlaystateCommandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendPlaystateCommand(sessionId, command, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling sendPlaystateCommand");
      }
      // verify the required parameter 'command' is set
      if (command === undefined || command === null) {
        throw new Error("Missing the required parameter 'command' when calling sendPlaystateCommand");
      }

      let pathParams = {
        'sessionId': sessionId,
        'command': command
      };
      let queryParams = {
        'seekPositionTicks': opts['seekPositionTicks'],
        'controllingUserId': opts['controllingUserId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/{sessionId}/Playing/{command}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendSystemCommand operation.
     * @callback module:api/SessionApi~sendSystemCommandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issues a system command to a client.
     * @param {String} sessionId The session id.
     * @param {module:model/GeneralCommandType} command The command to send.
     * @param {module:api/SessionApi~sendSystemCommandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendSystemCommand(sessionId, command, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling sendSystemCommand");
      }
      // verify the required parameter 'command' is set
      if (command === undefined || command === null) {
        throw new Error("Missing the required parameter 'command' when calling sendSystemCommand");
      }

      let pathParams = {
        'sessionId': sessionId,
        'command': command
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Sessions/{sessionId}/System/{command}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
