/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MetadataRefreshMode from '../model/MetadataRefreshMode';
import ProblemDetails from '../model/ProblemDetails';

/**
* ItemRefresh service.
* @module api/ItemRefreshApi
* @version v1
*/
export default class ItemRefreshApi {

    /**
    * Constructs a new ItemRefreshApi. 
    * @alias module:api/ItemRefreshApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the post operation.
     * @callback module:api/ItemRefreshApi~postCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes metadata for an item.
     * @param {String} itemId Item id.
     * @param {Object} opts Optional parameters
     * @param {module:model/MetadataRefreshMode} [metadataRefreshMode] (Optional) Specifies the metadata refresh mode.
     * @param {module:model/MetadataRefreshMode} [imageRefreshMode] (Optional) Specifies the image refresh mode.
     * @param {Boolean} [replaceAllMetadata = false)] (Optional) Determines if metadata should be replaced. Only applicable if mode is FullRefresh.
     * @param {Boolean} [replaceAllImages = false)] (Optional) Determines if images should be replaced. Only applicable if mode is FullRefresh.
     * @param {module:api/ItemRefreshApi~postCallback} callback The callback function, accepting three arguments: error, data, response
     */
    post(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling post");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'metadataRefreshMode': opts['metadataRefreshMode'],
        'imageRefreshMode': opts['imageRefreshMode'],
        'replaceAllMetadata': opts['replaceAllMetadata'],
        'replaceAllImages': opts['replaceAllImages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}/Refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
