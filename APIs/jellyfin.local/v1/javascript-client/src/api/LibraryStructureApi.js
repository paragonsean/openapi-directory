/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddVirtualFolderDto from '../model/AddVirtualFolderDto';
import MediaPathDto from '../model/MediaPathDto';
import MediaPathInfo from '../model/MediaPathInfo';
import ProblemDetails from '../model/ProblemDetails';
import UpdateLibraryOptionsDto from '../model/UpdateLibraryOptionsDto';
import VirtualFolderInfo from '../model/VirtualFolderInfo';

/**
* LibraryStructure service.
* @module api/LibraryStructureApi
* @version v1
*/
export default class LibraryStructureApi {

    /**
    * Constructs a new LibraryStructureApi. 
    * @alias module:api/LibraryStructureApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMediaPath operation.
     * @callback module:api/LibraryStructureApi~addMediaPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a media path to a library.
     * @param {module:model/MediaPathDto} mediaPathDto The media path dto.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [refreshLibrary = false)] Whether to refresh the library.
     * @param {module:api/LibraryStructureApi~addMediaPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMediaPath(mediaPathDto, opts, callback) {
      opts = opts || {};
      let postBody = mediaPathDto;
      // verify the required parameter 'mediaPathDto' is set
      if (mediaPathDto === undefined || mediaPathDto === null) {
        throw new Error("Missing the required parameter 'mediaPathDto' when calling addMediaPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'refreshLibrary': opts['refreshLibrary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/VirtualFolders/Paths', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVirtualFolder operation.
     * @callback module:api/LibraryStructureApi~addVirtualFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a virtual folder.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the virtual folder.
     * @param {String} [collectionType] The type of the collection.
     * @param {Array.<String>} [paths] The paths of the virtual folder.
     * @param {Boolean} [refreshLibrary = false)] Whether to refresh the library.
     * @param {module:model/AddVirtualFolderDto} [addVirtualFolderDto] The library options.
     * @param {module:api/LibraryStructureApi~addVirtualFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVirtualFolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['addVirtualFolderDto'];

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'collectionType': opts['collectionType'],
        'paths': this.apiClient.buildCollectionParam(opts['paths'], 'multi'),
        'refreshLibrary': opts['refreshLibrary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/VirtualFolders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVirtualFolders operation.
     * @callback module:api/LibraryStructureApi~getVirtualFoldersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VirtualFolderInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all virtual folders.
     * @param {module:api/LibraryStructureApi~getVirtualFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VirtualFolderInfo>}
     */
    getVirtualFolders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [VirtualFolderInfo];
      return this.apiClient.callApi(
        '/Library/VirtualFolders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMediaPath operation.
     * @callback module:api/LibraryStructureApi~removeMediaPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a media path.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the library.
     * @param {String} [path] The path to remove.
     * @param {Boolean} [refreshLibrary = false)] Whether to refresh the library.
     * @param {module:api/LibraryStructureApi~removeMediaPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeMediaPath(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'path': opts['path'],
        'refreshLibrary': opts['refreshLibrary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/VirtualFolders/Paths', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVirtualFolder operation.
     * @callback module:api/LibraryStructureApi~removeVirtualFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a virtual folder.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the folder.
     * @param {Boolean} [refreshLibrary = false)] Whether to refresh the library.
     * @param {module:api/LibraryStructureApi~removeVirtualFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeVirtualFolder(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'refreshLibrary': opts['refreshLibrary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/VirtualFolders', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameVirtualFolder operation.
     * @callback module:api/LibraryStructureApi~renameVirtualFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renames a virtual folder.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the virtual folder.
     * @param {String} [newName] The new name.
     * @param {Boolean} [refreshLibrary = false)] Whether to refresh the library.
     * @param {module:api/LibraryStructureApi~renameVirtualFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameVirtualFolder(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'newName': opts['newName'],
        'refreshLibrary': opts['refreshLibrary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/VirtualFolders/Name', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLibraryOptions operation.
     * @callback module:api/LibraryStructureApi~updateLibraryOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update library options.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateLibraryOptionsDto} [updateLibraryOptionsDto] The library name and options.
     * @param {module:api/LibraryStructureApi~updateLibraryOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateLibraryOptions(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateLibraryOptionsDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/VirtualFolders/LibraryOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMediaPath operation.
     * @callback module:api/LibraryStructureApi~updateMediaPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a media path.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the library.
     * @param {module:model/MediaPathInfo} [mediaPathInfo] The path info.
     * @param {module:api/LibraryStructureApi~updateMediaPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMediaPath(opts, callback) {
      opts = opts || {};
      let postBody = opts['mediaPathInfo'];

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/VirtualFolders/Paths/Update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
