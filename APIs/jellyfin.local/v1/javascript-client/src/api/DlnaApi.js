/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceProfile from '../model/DeviceProfile';
import DeviceProfileInfo from '../model/DeviceProfileInfo';
import ProblemDetails from '../model/ProblemDetails';

/**
* Dlna service.
* @module api/DlnaApi
* @version v1
*/
export default class DlnaApi {

    /**
    * Constructs a new DlnaApi. 
    * @alias module:api/DlnaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProfile operation.
     * @callback module:api/DlnaApi~createProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a profile.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceProfile} [deviceProfile] Device profile.
     * @param {module:api/DlnaApi~createProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createProfile(opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceProfile'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Dlna/Profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfile operation.
     * @callback module:api/DlnaApi~deleteProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a profile.
     * @param {String} profileId Profile id.
     * @param {module:api/DlnaApi~deleteProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfile(profileId, callback) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling deleteProfile");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Dlna/Profiles/{profileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultProfile operation.
     * @callback module:api/DlnaApi~getDefaultProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the default profile.
     * @param {module:api/DlnaApi~getDefaultProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceProfile}
     */
    getDefaultProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = DeviceProfile;
      return this.apiClient.callApi(
        '/Dlna/Profiles/Default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfile operation.
     * @callback module:api/DlnaApi~getProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single profile.
     * @param {String} profileId Profile Id.
     * @param {module:api/DlnaApi~getProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceProfile}
     */
    getProfile(profileId, callback) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getProfile");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = DeviceProfile;
      return this.apiClient.callApi(
        '/Dlna/Profiles/{profileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileInfos operation.
     * @callback module:api/DlnaApi~getProfileInfosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceProfileInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get profile infos.
     * @param {module:api/DlnaApi~getProfileInfosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceProfileInfo>}
     */
    getProfileInfos(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [DeviceProfileInfo];
      return this.apiClient.callApi(
        '/Dlna/ProfileInfos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/DlnaApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a profile.
     * @param {String} profileId Profile id.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceProfile} [deviceProfile] Device profile.
     * @param {module:api/DlnaApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProfile(profileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceProfile'];
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updateProfile");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Dlna/Profiles/{profileId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
