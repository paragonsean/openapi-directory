/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigurationPageInfo from '../model/ConfigurationPageInfo';
import ConfigurationPageType from '../model/ConfigurationPageType';
import ProblemDetails from '../model/ProblemDetails';

/**
* Dashboard service.
* @module api/DashboardApi
* @version v1
*/
export default class DashboardApi {

    /**
    * Constructs a new DashboardApi. 
    * @alias module:api/DashboardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getConfigurationPages operation.
     * @callback module:api/DashboardApi~getConfigurationPagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigurationPageInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configuration pages.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [enableInMainMenu] Whether to enable in the main menu.
     * @param {module:model/ConfigurationPageType} [pageType] The Jellyfin.Api.Models.ConfigurationPageInfo.
     * @param {module:api/DashboardApi~getConfigurationPagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigurationPageInfo>}
     */
    getConfigurationPages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'enableInMainMenu': opts['enableInMainMenu'],
        'pageType': opts['pageType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [ConfigurationPageInfo];
      return this.apiClient.callApi(
        '/web/ConfigurationPages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardConfigurationPage operation.
     * @callback module:api/DashboardApi~getDashboardConfigurationPageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a dashboard configuration page.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the page.
     * @param {module:api/DashboardApi~getDashboardConfigurationPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getDashboardConfigurationPage(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/x-javascript', 'text/html', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/web/ConfigurationPage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
