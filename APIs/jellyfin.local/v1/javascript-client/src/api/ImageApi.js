/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageFormat from '../model/ImageFormat';
import ImageInfo from '../model/ImageInfo';
import ImageType from '../model/ImageType';
import ProblemDetails from '../model/ProblemDetails';

/**
* Image service.
* @module api/ImageApi
* @version v1
*/
export default class ImageApi {

    /**
    * Constructs a new ImageApi. 
    * @alias module:api/ImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteItemImage operation.
     * @callback module:api/ImageApi~deleteItemImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an item's image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {Number} [imageIndex] The image index.
     * @param {module:api/ImageApi~deleteItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteItemImage(itemId, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteItemImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling deleteItemImage");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType
      };
      let queryParams = {
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItemImageByIndex operation.
     * @callback module:api/ImageApi~deleteItemImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an item's image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex The image index.
     * @param {module:api/ImageApi~deleteItemImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteItemImageByIndex(itemId, imageType, imageIndex, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteItemImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling deleteItemImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling deleteItemImageByIndex");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}/{imageIndex}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserImage operation.
     * @callback module:api/ImageApi~deleteUserImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the user's image.
     * @param {String} userId User Id.
     * @param {module:model/ImageType} imageType (Unused) Image type.
     * @param {Object} opts Optional parameters
     * @param {Number} [index] (Unused) Image index.
     * @param {module:api/ImageApi~deleteUserImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserImage(userId, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling deleteUserImage");
      }

      let pathParams = {
        'userId': userId,
        'imageType': imageType
      };
      let queryParams = {
        'index': opts['index']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/Images/{imageType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserImageByIndex operation.
     * @callback module:api/ImageApi~deleteUserImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the user's image.
     * @param {String} userId User Id.
     * @param {module:model/ImageType} imageType (Unused) Image type.
     * @param {Number} index (Unused) Image index.
     * @param {module:api/ImageApi~deleteUserImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserImageByIndex(userId, imageType, index, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling deleteUserImageByIndex");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling deleteUserImageByIndex");
      }

      let pathParams = {
        'userId': userId,
        'imageType': imageType,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/Images/{imageType}/{index}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtistImage operation.
     * @callback module:api/ImageApi~getArtistImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artist image by name.
     * @param {String} name Artist name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~getArtistImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getArtistImage(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getArtistImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getArtistImage");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling getArtistImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Artists/{name}/Images/{imageType}/{imageIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenreImage operation.
     * @callback module:api/ImageApi~getGenreImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get genre image by name.
     * @param {String} name Genre name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~getGenreImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getGenreImage(name, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getGenreImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getGenreImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Genres/{name}/Images/{imageType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenreImageByIndex operation.
     * @callback module:api/ImageApi~getGenreImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get genre image by name.
     * @param {String} name Genre name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~getGenreImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getGenreImageByIndex(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getGenreImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getGenreImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling getGenreImageByIndex");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Genres/{name}/Images/{imageType}/{imageIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemImage operation.
     * @callback module:api/ImageApi~getItemImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the item's image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {module:model/ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~getItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getItemImage(itemId, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getItemImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getItemImage");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType
      };
      let queryParams = {
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'tag': opts['tag'],
        'cropWhitespace': opts['cropWhitespace'],
        'format': opts['format'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemImage2 operation.
     * @callback module:api/ImageApi~getItemImage2Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the item's image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} maxWidth The maximum image width to return.
     * @param {Number} maxHeight The maximum image height to return.
     * @param {String} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} percentPlayed Optional. Percent to render for the percent played overlay.
     * @param {Number} unplayedCount Optional. Unplayed count overlay to render.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~getItemImage2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getItemImage2");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getItemImage2");
      }
      // verify the required parameter 'maxWidth' is set
      if (maxWidth === undefined || maxWidth === null) {
        throw new Error("Missing the required parameter 'maxWidth' when calling getItemImage2");
      }
      // verify the required parameter 'maxHeight' is set
      if (maxHeight === undefined || maxHeight === null) {
        throw new Error("Missing the required parameter 'maxHeight' when calling getItemImage2");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling getItemImage2");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getItemImage2");
      }
      // verify the required parameter 'percentPlayed' is set
      if (percentPlayed === undefined || percentPlayed === null) {
        throw new Error("Missing the required parameter 'percentPlayed' when calling getItemImage2");
      }
      // verify the required parameter 'unplayedCount' is set
      if (unplayedCount === undefined || unplayedCount === null) {
        throw new Error("Missing the required parameter 'unplayedCount' when calling getItemImage2");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling getItemImage2");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType,
        'maxWidth': maxWidth,
        'maxHeight': maxHeight,
        'tag': tag,
        'format': format,
        'percentPlayed': percentPlayed,
        'unplayedCount': unplayedCount,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemImageByIndex operation.
     * @callback module:api/ImageApi~getItemImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the item's image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {module:model/ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~getItemImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getItemImageByIndex(itemId, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getItemImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getItemImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling getItemImageByIndex");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'tag': opts['tag'],
        'cropWhitespace': opts['cropWhitespace'],
        'format': opts['format'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}/{imageIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemImageInfos operation.
     * @callback module:api/ImageApi~getItemImageInfosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item image infos.
     * @param {String} itemId Item id.
     * @param {module:api/ImageApi~getItemImageInfosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageInfo>}
     */
    getItemImageInfos(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getItemImageInfos");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [ImageInfo];
      return this.apiClient.callApi(
        '/Items/{itemId}/Images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicGenreImage operation.
     * @callback module:api/ImageApi~getMusicGenreImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get music genre image by name.
     * @param {String} name Music genre name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~getMusicGenreImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getMusicGenreImage(name, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getMusicGenreImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getMusicGenreImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/MusicGenres/{name}/Images/{imageType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicGenreImageByIndex operation.
     * @callback module:api/ImageApi~getMusicGenreImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get music genre image by name.
     * @param {String} name Music genre name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~getMusicGenreImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getMusicGenreImageByIndex(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getMusicGenreImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getMusicGenreImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling getMusicGenreImageByIndex");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/MusicGenres/{name}/Images/{imageType}/{imageIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonImage operation.
     * @callback module:api/ImageApi~getPersonImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get person image by name.
     * @param {String} name Person name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~getPersonImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPersonImage(name, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPersonImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getPersonImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Persons/{name}/Images/{imageType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonImageByIndex operation.
     * @callback module:api/ImageApi~getPersonImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get person image by name.
     * @param {String} name Person name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~getPersonImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPersonImageByIndex(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPersonImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getPersonImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling getPersonImageByIndex");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Persons/{name}/Images/{imageType}/{imageIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudioImage operation.
     * @callback module:api/ImageApi~getStudioImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get studio image by name.
     * @param {String} name Studio name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~getStudioImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getStudioImage(name, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getStudioImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getStudioImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Studios/{name}/Images/{imageType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudioImageByIndex operation.
     * @callback module:api/ImageApi~getStudioImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get studio image by name.
     * @param {String} name Studio name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~getStudioImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getStudioImageByIndex(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getStudioImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getStudioImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling getStudioImageByIndex");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Studios/{name}/Images/{imageType}/{imageIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserImage operation.
     * @callback module:api/ImageApi~getUserImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user profile image.
     * @param {String} userId User id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~getUserImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getUserImage(userId, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getUserImage");
      }

      let pathParams = {
        'userId': userId,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Users/{userId}/Images/{imageType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserImageByIndex operation.
     * @callback module:api/ImageApi~getUserImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user profile image.
     * @param {String} userId User id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~getUserImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getUserImageByIndex(userId, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling getUserImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling getUserImageByIndex");
      }

      let pathParams = {
        'userId': userId,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Users/{userId}/Images/{imageType}/{imageIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headArtistImage operation.
     * @callback module:api/ImageApi~headArtistImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get artist image by name.
     * @param {String} name Artist name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~headArtistImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headArtistImage(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling headArtistImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headArtistImage");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling headArtistImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Artists/{name}/Images/{imageType}/{imageIndex}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headGenreImage operation.
     * @callback module:api/ImageApi~headGenreImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get genre image by name.
     * @param {String} name Genre name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~headGenreImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headGenreImage(name, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling headGenreImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headGenreImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Genres/{name}/Images/{imageType}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headGenreImageByIndex operation.
     * @callback module:api/ImageApi~headGenreImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get genre image by name.
     * @param {String} name Genre name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~headGenreImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headGenreImageByIndex(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling headGenreImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headGenreImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling headGenreImageByIndex");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Genres/{name}/Images/{imageType}/{imageIndex}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headItemImage operation.
     * @callback module:api/ImageApi~headItemImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the item's image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {module:model/ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~headItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headItemImage(itemId, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling headItemImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headItemImage");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType
      };
      let queryParams = {
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'tag': opts['tag'],
        'cropWhitespace': opts['cropWhitespace'],
        'format': opts['format'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headItemImage2 operation.
     * @callback module:api/ImageApi~headItemImage2Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the item's image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} maxWidth The maximum image width to return.
     * @param {Number} maxHeight The maximum image height to return.
     * @param {String} tag Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} format Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} percentPlayed Optional. Percent to render for the percent played overlay.
     * @param {Number} unplayedCount Optional. Unplayed count overlay to render.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~headItemImage2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headItemImage2(itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling headItemImage2");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headItemImage2");
      }
      // verify the required parameter 'maxWidth' is set
      if (maxWidth === undefined || maxWidth === null) {
        throw new Error("Missing the required parameter 'maxWidth' when calling headItemImage2");
      }
      // verify the required parameter 'maxHeight' is set
      if (maxHeight === undefined || maxHeight === null) {
        throw new Error("Missing the required parameter 'maxHeight' when calling headItemImage2");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling headItemImage2");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling headItemImage2");
      }
      // verify the required parameter 'percentPlayed' is set
      if (percentPlayed === undefined || percentPlayed === null) {
        throw new Error("Missing the required parameter 'percentPlayed' when calling headItemImage2");
      }
      // verify the required parameter 'unplayedCount' is set
      if (unplayedCount === undefined || unplayedCount === null) {
        throw new Error("Missing the required parameter 'unplayedCount' when calling headItemImage2");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling headItemImage2");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType,
        'maxWidth': maxWidth,
        'maxHeight': maxHeight,
        'tag': tag,
        'format': format,
        'percentPlayed': percentPlayed,
        'unplayedCount': unplayedCount,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headItemImageByIndex operation.
     * @callback module:api/ImageApi~headItemImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the item's image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {module:model/ImageFormat} [format] Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~headItemImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headItemImageByIndex(itemId, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling headItemImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headItemImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling headItemImageByIndex");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'tag': opts['tag'],
        'cropWhitespace': opts['cropWhitespace'],
        'format': opts['format'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}/{imageIndex}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headMusicGenreImage operation.
     * @callback module:api/ImageApi~headMusicGenreImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get music genre image by name.
     * @param {String} name Music genre name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~headMusicGenreImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headMusicGenreImage(name, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling headMusicGenreImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headMusicGenreImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/MusicGenres/{name}/Images/{imageType}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headMusicGenreImageByIndex operation.
     * @callback module:api/ImageApi~headMusicGenreImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get music genre image by name.
     * @param {String} name Music genre name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~headMusicGenreImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headMusicGenreImageByIndex(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling headMusicGenreImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headMusicGenreImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling headMusicGenreImageByIndex");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/MusicGenres/{name}/Images/{imageType}/{imageIndex}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headPersonImage operation.
     * @callback module:api/ImageApi~headPersonImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get person image by name.
     * @param {String} name Person name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~headPersonImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headPersonImage(name, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling headPersonImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headPersonImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Persons/{name}/Images/{imageType}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headPersonImageByIndex operation.
     * @callback module:api/ImageApi~headPersonImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get person image by name.
     * @param {String} name Person name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~headPersonImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headPersonImageByIndex(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling headPersonImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headPersonImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling headPersonImageByIndex");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Persons/{name}/Images/{imageType}/{imageIndex}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headStudioImage operation.
     * @callback module:api/ImageApi~headStudioImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get studio image by name.
     * @param {String} name Studio name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~headStudioImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headStudioImage(name, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling headStudioImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headStudioImage");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Studios/{name}/Images/{imageType}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headStudioImageByIndex operation.
     * @callback module:api/ImageApi~headStudioImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get studio image by name.
     * @param {String} name Studio name.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~headStudioImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headStudioImageByIndex(name, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling headStudioImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headStudioImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling headStudioImageByIndex");
      }

      let pathParams = {
        'name': name,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Studios/{name}/Images/{imageType}/{imageIndex}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headUserImage operation.
     * @callback module:api/ImageApi~headUserImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user profile image.
     * @param {String} userId User id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {Number} [imageIndex] Image index.
     * @param {module:api/ImageApi~headUserImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headUserImage(userId, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling headUserImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headUserImage");
      }

      let pathParams = {
        'userId': userId,
        'imageType': imageType
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer'],
        'imageIndex': opts['imageIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Users/{userId}/Images/{imageType}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headUserImageByIndex operation.
     * @callback module:api/ImageApi~headUserImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user profile image.
     * @param {String} userId User id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Image index.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Supply the cache tag from the item object to receive strong caching headers.
     * @param {module:model/ImageFormat} [format] Determines the output format of the image - original,gif,jpg,png.
     * @param {Number} [maxWidth] The maximum image width to return.
     * @param {Number} [maxHeight] The maximum image height to return.
     * @param {Number} [percentPlayed] Optional. Percent to render for the percent played overlay.
     * @param {Number} [unplayedCount] Optional. Unplayed count overlay to render.
     * @param {Number} [width] The fixed image width to return.
     * @param {Number} [height] The fixed image height to return.
     * @param {Number} [quality] Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
     * @param {Boolean} [cropWhitespace] Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
     * @param {Boolean} [addPlayedIndicator] Optional. Add a played indicator.
     * @param {Number} [blur] Optional. Blur image.
     * @param {String} [backgroundColor] Optional. Apply a background color for transparent images.
     * @param {String} [foregroundLayer] Optional. Apply a foreground layer on top of the image.
     * @param {module:api/ImageApi~headUserImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headUserImageByIndex(userId, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling headUserImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling headUserImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling headUserImageByIndex");
      }

      let pathParams = {
        'userId': userId,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'tag': opts['tag'],
        'format': opts['format'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
        'percentPlayed': opts['percentPlayed'],
        'unplayedCount': opts['unplayedCount'],
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality'],
        'cropWhitespace': opts['cropWhitespace'],
        'addPlayedIndicator': opts['addPlayedIndicator'],
        'blur': opts['blur'],
        'backgroundColor': opts['backgroundColor'],
        'foregroundLayer': opts['foregroundLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Users/{userId}/Images/{imageType}/{imageIndex}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUserImage operation.
     * @callback module:api/ImageApi~postUserImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the user image.
     * @param {String} userId User Id.
     * @param {module:model/ImageType} imageType (Unused) Image type.
     * @param {Object} opts Optional parameters
     * @param {Number} [index] (Unused) Image index.
     * @param {module:api/ImageApi~postUserImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUserImage(userId, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling postUserImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling postUserImage");
      }

      let pathParams = {
        'userId': userId,
        'imageType': imageType
      };
      let queryParams = {
        'index': opts['index']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/Images/{imageType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUserImageByIndex operation.
     * @callback module:api/ImageApi~postUserImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the user image.
     * @param {String} userId User Id.
     * @param {module:model/ImageType} imageType (Unused) Image type.
     * @param {Number} index (Unused) Image index.
     * @param {module:api/ImageApi~postUserImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUserImageByIndex(userId, imageType, index, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling postUserImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling postUserImageByIndex");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling postUserImageByIndex");
      }

      let pathParams = {
        'userId': userId,
        'imageType': imageType,
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Users/{userId}/Images/{imageType}/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setItemImage operation.
     * @callback module:api/ImageApi~setItemImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set item image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {module:api/ImageApi~setItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setItemImage(itemId, imageType, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling setItemImage");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling setItemImage");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setItemImageByIndex operation.
     * @callback module:api/ImageApi~setItemImageByIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set item image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex (Unused) Image index.
     * @param {module:api/ImageApi~setItemImageByIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setItemImageByIndex(itemId, imageType, imageIndex, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling setItemImageByIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling setItemImageByIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling setItemImageByIndex");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}/{imageIndex}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItemImageIndex operation.
     * @callback module:api/ImageApi~updateItemImageIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the index for an item image.
     * @param {String} itemId Item id.
     * @param {module:model/ImageType} imageType Image type.
     * @param {Number} imageIndex Old image index.
     * @param {Object} opts Optional parameters
     * @param {Number} [newIndex] New image index.
     * @param {module:api/ImageApi~updateItemImageIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateItemImageIndex(itemId, imageType, imageIndex, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateItemImageIndex");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling updateItemImageIndex");
      }
      // verify the required parameter 'imageIndex' is set
      if (imageIndex === undefined || imageIndex === null) {
        throw new Error("Missing the required parameter 'imageIndex' when calling updateItemImageIndex");
      }

      let pathParams = {
        'itemId': itemId,
        'imageType': imageType,
        'imageIndex': imageIndex
      };
      let queryParams = {
        'newIndex': opts['newIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}/Images/{imageType}/{imageIndex}/Index', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
