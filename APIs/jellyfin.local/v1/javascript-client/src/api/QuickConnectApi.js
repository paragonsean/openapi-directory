/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import QuickConnectResult from '../model/QuickConnectResult';
import QuickConnectState from '../model/QuickConnectState';

/**
* QuickConnect service.
* @module api/QuickConnectApi
* @version v1
*/
export default class QuickConnectApi {

    /**
    * Constructs a new QuickConnectApi. 
    * @alias module:api/QuickConnectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activate operation.
     * @callback module:api/QuickConnectApi~activateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Temporarily activates quick connect for five minutes.
     * @param {module:api/QuickConnectApi~activateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/QuickConnect/Activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorize operation.
     * @callback module:api/QuickConnectApi~authorizeCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorizes a pending quick connect request.
     * @param {String} code Quick connect code to authorize.
     * @param {module:api/QuickConnectApi~authorizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    authorize(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling authorize");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/QuickConnect/Authorize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the available operation.
     * @callback module:api/QuickConnectApi~availableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables or disables quick connect.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickConnectState} [status] New MediaBrowser.Model.QuickConnect.QuickConnectState.
     * @param {module:api/QuickConnectApi~availableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    available(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/QuickConnect/Available', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connect operation.
     * @callback module:api/QuickConnectApi~connectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuickConnectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attempts to retrieve authentication information.
     * @param {String} secret Secret previously returned from the Initiate endpoint.
     * @param {module:api/QuickConnectApi~connectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuickConnectResult}
     */
    connect(secret, callback) {
      let postBody = null;
      // verify the required parameter 'secret' is set
      if (secret === undefined || secret === null) {
        throw new Error("Missing the required parameter 'secret' when calling connect");
      }

      let pathParams = {
      };
      let queryParams = {
        'secret': secret
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = QuickConnectResult;
      return this.apiClient.callApi(
        '/QuickConnect/Connect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deauthorize operation.
     * @callback module:api/QuickConnectApi~deauthorizeCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deauthorize all quick connect devices for the current user.
     * @param {module:api/QuickConnectApi~deauthorizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    deauthorize(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/QuickConnect/Deauthorize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatus operation.
     * @callback module:api/QuickConnectApi~getStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuickConnectState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current quick connect state.
     * @param {module:api/QuickConnectApi~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuickConnectState}
     */
    getStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = QuickConnectState;
      return this.apiClient.callApi(
        '/QuickConnect/Status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initiate operation.
     * @callback module:api/QuickConnectApi~initiateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuickConnectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a new quick connect request.
     * @param {module:api/QuickConnectApi~initiateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuickConnectResult}
     */
    initiate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = QuickConnectResult;
      return this.apiClient.callApi(
        '/QuickConnect/Initiate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
