/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDto from '../model/BaseItemDto';
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ChannelMappingOptionsDto from '../model/ChannelMappingOptionsDto';
import ChannelType from '../model/ChannelType';
import GetProgramsDto from '../model/GetProgramsDto';
import GuideInfo from '../model/GuideInfo';
import ImageType from '../model/ImageType';
import ItemFields from '../model/ItemFields';
import ListingsProviderInfo from '../model/ListingsProviderInfo';
import LiveTvInfo from '../model/LiveTvInfo';
import NameIdPair from '../model/NameIdPair';
import ProblemDetails from '../model/ProblemDetails';
import RecordingStatus from '../model/RecordingStatus';
import SeriesTimerInfoDto from '../model/SeriesTimerInfoDto';
import SeriesTimerInfoDtoQueryResult from '../model/SeriesTimerInfoDtoQueryResult';
import SetChannelMappingDto from '../model/SetChannelMappingDto';
import SortOrder from '../model/SortOrder';
import TimerInfoDto from '../model/TimerInfoDto';
import TimerInfoDtoQueryResult from '../model/TimerInfoDtoQueryResult';
import TunerChannelMapping from '../model/TunerChannelMapping';
import TunerHostInfo from '../model/TunerHostInfo';

/**
* LiveTv service.
* @module api/LiveTvApi
* @version v1
*/
export default class LiveTvApi {

    /**
    * Constructs a new LiveTvApi. 
    * @alias module:api/LiveTvApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addListingProvider operation.
     * @callback module:api/LiveTvApi~addListingProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListingsProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a listings provider.
     * @param {Object} opts Optional parameters
     * @param {String} [pw] Password.
     * @param {Boolean} [validateListings = false)] Validate listings.
     * @param {Boolean} [validateLogin = false)] Validate login.
     * @param {module:model/ListingsProviderInfo} [listingsProviderInfo] New listings info.
     * @param {module:api/LiveTvApi~addListingProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListingsProviderInfo}
     */
    addListingProvider(opts, callback) {
      opts = opts || {};
      let postBody = opts['listingsProviderInfo'];

      let pathParams = {
      };
      let queryParams = {
        'pw': opts['pw'],
        'validateListings': opts['validateListings'],
        'validateLogin': opts['validateLogin']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ListingsProviderInfo;
      return this.apiClient.callApi(
        '/LiveTv/ListingProviders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTunerHost operation.
     * @callback module:api/LiveTvApi~addTunerHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TunerHostInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a tuner host.
     * @param {Object} opts Optional parameters
     * @param {module:model/TunerHostInfo} [tunerHostInfo] New tuner host.
     * @param {module:api/LiveTvApi~addTunerHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TunerHostInfo}
     */
    addTunerHost(opts, callback) {
      opts = opts || {};
      let postBody = opts['tunerHostInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = TunerHostInfo;
      return this.apiClient.callApi(
        '/LiveTv/TunerHosts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelSeriesTimer operation.
     * @callback module:api/LiveTvApi~cancelSeriesTimerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a live tv series timer.
     * @param {String} timerId Timer id.
     * @param {module:api/LiveTvApi~cancelSeriesTimerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelSeriesTimer(timerId, callback) {
      let postBody = null;
      // verify the required parameter 'timerId' is set
      if (timerId === undefined || timerId === null) {
        throw new Error("Missing the required parameter 'timerId' when calling cancelSeriesTimer");
      }

      let pathParams = {
        'timerId': timerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/SeriesTimers/{timerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelTimer operation.
     * @callback module:api/LiveTvApi~cancelTimerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a live tv timer.
     * @param {String} timerId Timer id.
     * @param {module:api/LiveTvApi~cancelTimerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelTimer(timerId, callback) {
      let postBody = null;
      // verify the required parameter 'timerId' is set
      if (timerId === undefined || timerId === null) {
        throw new Error("Missing the required parameter 'timerId' when calling cancelTimer");
      }

      let pathParams = {
        'timerId': timerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/Timers/{timerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSeriesTimer operation.
     * @callback module:api/LiveTvApi~createSeriesTimerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a live tv series timer.
     * @param {Object} opts Optional parameters
     * @param {module:model/SeriesTimerInfoDto} [seriesTimerInfoDto] New series timer info.
     * @param {module:api/LiveTvApi~createSeriesTimerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createSeriesTimer(opts, callback) {
      opts = opts || {};
      let postBody = opts['seriesTimerInfoDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/SeriesTimers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTimer operation.
     * @callback module:api/LiveTvApi~createTimerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a live tv timer.
     * @param {Object} opts Optional parameters
     * @param {module:model/TimerInfoDto} [timerInfoDto] New timer info.
     * @param {module:api/LiveTvApi~createTimerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createTimer(opts, callback) {
      opts = opts || {};
      let postBody = opts['timerInfoDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/Timers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteListingProvider operation.
     * @callback module:api/LiveTvApi~deleteListingProviderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete listing provider.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Listing provider id.
     * @param {module:api/LiveTvApi~deleteListingProviderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteListingProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/ListingProviders', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecording operation.
     * @callback module:api/LiveTvApi~deleteRecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a live tv recording.
     * @param {String} recordingId Recording id.
     * @param {module:api/LiveTvApi~deleteRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecording(recordingId, callback) {
      let postBody = null;
      // verify the required parameter 'recordingId' is set
      if (recordingId === undefined || recordingId === null) {
        throw new Error("Missing the required parameter 'recordingId' when calling deleteRecording");
      }

      let pathParams = {
        'recordingId': recordingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/Recordings/{recordingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTunerHost operation.
     * @callback module:api/LiveTvApi~deleteTunerHostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a tuner host.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Tuner host id.
     * @param {module:api/LiveTvApi~deleteTunerHostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTunerHost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/TunerHosts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoverTuners operation.
     * @callback module:api/LiveTvApi~discoverTunersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TunerHostInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discover tuners.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [newDevicesOnly = false)] Only discover new tuners.
     * @param {module:api/LiveTvApi~discoverTunersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TunerHostInfo>}
     */
    discoverTuners(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'newDevicesOnly': opts['newDevicesOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [TunerHostInfo];
      return this.apiClient.callApi(
        '/LiveTv/Tuners/Discover', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discvoverTuners operation.
     * @callback module:api/LiveTvApi~discvoverTunersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TunerHostInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discover tuners.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [newDevicesOnly = false)] Only discover new tuners.
     * @param {module:api/LiveTvApi~discvoverTunersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TunerHostInfo>}
     */
    discvoverTuners(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'newDevicesOnly': opts['newDevicesOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [TunerHostInfo];
      return this.apiClient.callApi(
        '/LiveTv/Tuners/Discvover', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannel operation.
     * @callback module:api/LiveTvApi~getChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a live tv channel.
     * @param {String} channelId Channel id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Attach user data.
     * @param {module:api/LiveTvApi~getChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDto}
     */
    getChannel(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannel");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDto;
      return this.apiClient.callApi(
        '/LiveTv/Channels/{channelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelMappingOptions operation.
     * @callback module:api/LiveTvApi~getChannelMappingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelMappingOptionsDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel mapping options.
     * @param {Object} opts Optional parameters
     * @param {String} [providerId] Provider id.
     * @param {module:api/LiveTvApi~getChannelMappingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelMappingOptionsDto}
     */
    getChannelMappingOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'providerId': opts['providerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ChannelMappingOptionsDto;
      return this.apiClient.callApi(
        '/LiveTv/ChannelMappingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultListingProvider operation.
     * @callback module:api/LiveTvApi~getDefaultListingProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListingsProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets default listings provider info.
     * @param {module:api/LiveTvApi~getDefaultListingProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListingsProviderInfo}
     */
    getDefaultListingProvider(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ListingsProviderInfo;
      return this.apiClient.callApi(
        '/LiveTv/ListingProviders/Default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultTimer operation.
     * @callback module:api/LiveTvApi~getDefaultTimerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeriesTimerInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the default values for a new timer.
     * @param {Object} opts Optional parameters
     * @param {String} [programId] Optional. To attach default values based on a program.
     * @param {module:api/LiveTvApi~getDefaultTimerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeriesTimerInfoDto}
     */
    getDefaultTimer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'programId': opts['programId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = SeriesTimerInfoDto;
      return this.apiClient.callApi(
        '/LiveTv/Timers/Defaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuideInfo operation.
     * @callback module:api/LiveTvApi~getGuideInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuideInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get guid info.
     * @param {module:api/LiveTvApi~getGuideInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuideInfo}
     */
    getGuideInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = GuideInfo;
      return this.apiClient.callApi(
        '/LiveTv/GuideInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLineups operation.
     * @callback module:api/LiveTvApi~getLineupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NameIdPair>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available lineups.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Provider id.
     * @param {String} [type] Provider type.
     * @param {String} [location] Location.
     * @param {String} [country] Country.
     * @param {module:api/LiveTvApi~getLineupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NameIdPair>}
     */
    getLineups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'type': opts['type'],
        'location': opts['location'],
        'country': opts['country']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [NameIdPair];
      return this.apiClient.callApi(
        '/LiveTv/ListingProviders/Lineups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveRecordingFile operation.
     * @callback module:api/LiveTvApi~getLiveRecordingFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a live tv recording stream.
     * @param {String} recordingId Recording id.
     * @param {module:api/LiveTvApi~getLiveRecordingFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getLiveRecordingFile(recordingId, callback) {
      let postBody = null;
      // verify the required parameter 'recordingId' is set
      if (recordingId === undefined || recordingId === null) {
        throw new Error("Missing the required parameter 'recordingId' when calling getLiveRecordingFile");
      }

      let pathParams = {
        'recordingId': recordingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['video/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/LiveTv/LiveRecordings/{recordingId}/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveStreamFile operation.
     * @callback module:api/LiveTvApi~getLiveStreamFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a live tv channel stream.
     * @param {String} streamId Stream id.
     * @param {String} container Container type.
     * @param {module:api/LiveTvApi~getLiveStreamFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getLiveStreamFile(streamId, container, callback) {
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling getLiveStreamFile");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling getLiveStreamFile");
      }

      let pathParams = {
        'streamId': streamId,
        'container': container
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['video/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/LiveTv/LiveStreamFiles/{streamId}/stream.{container}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveTvChannels operation.
     * @callback module:api/LiveTvApi~getLiveTvChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available live tv channels.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelType} [type] Optional. Filter by channel type.
     * @param {String} [userId] Optional. Filter by user and attach user data.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Boolean} [isMovie] Optional. Filter for movies.
     * @param {Boolean} [isSeries] Optional. Filter for series.
     * @param {Boolean} [isNews] Optional. Filter for news.
     * @param {Boolean} [isKids] Optional. Filter for kids.
     * @param {Boolean} [isSports] Optional. Filter for sports.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Boolean} [isFavorite] Optional. Filter by channels that are favorites, or not.
     * @param {Boolean} [isLiked] Optional. Filter by channels that are liked, or not.
     * @param {Boolean} [isDisliked] Optional. Filter by channels that are disliked, or not.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] \"Optional. The image types to include in the output.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Array.<String>} [sortBy] Optional. Key to sort by.
     * @param {module:model/SortOrder} [sortOrder] Optional. Sort order.
     * @param {Boolean} [enableFavoriteSorting = false)] Optional. Incorporate favorite and like status into channel sorting.
     * @param {Boolean} [addCurrentProgram = true)] Optional. Adds current program info to each channel.
     * @param {module:api/LiveTvApi~getLiveTvChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getLiveTvChannels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'userId': opts['userId'],
        'startIndex': opts['startIndex'],
        'isMovie': opts['isMovie'],
        'isSeries': opts['isSeries'],
        'isNews': opts['isNews'],
        'isKids': opts['isKids'],
        'isSports': opts['isSports'],
        'limit': opts['limit'],
        'isFavorite': opts['isFavorite'],
        'isLiked': opts['isLiked'],
        'isDisliked': opts['isDisliked'],
        'enableImages': opts['enableImages'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableUserData': opts['enableUserData'],
        'sortBy': this.apiClient.buildCollectionParam(opts['sortBy'], 'multi'),
        'sortOrder': opts['sortOrder'],
        'enableFavoriteSorting': opts['enableFavoriteSorting'],
        'addCurrentProgram': opts['addCurrentProgram']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/Channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveTvInfo operation.
     * @callback module:api/LiveTvApi~getLiveTvInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveTvInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available live tv services.
     * @param {module:api/LiveTvApi~getLiveTvInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveTvInfo}
     */
    getLiveTvInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = LiveTvInfo;
      return this.apiClient.callApi(
        '/LiveTv/Info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveTvPrograms operation.
     * @callback module:api/LiveTvApi~getLiveTvProgramsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available live tv epgs.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [channelIds] The channels to return guide information for.
     * @param {String} [userId] Optional. Filter by user id.
     * @param {Date} [minStartDate] Optional. The minimum premiere start date.
     * @param {Boolean} [hasAired] Optional. Filter by programs that have completed airing, or not.
     * @param {Boolean} [isAiring] Optional. Filter by programs that are currently airing, or not.
     * @param {Date} [maxStartDate] Optional. The maximum premiere start date.
     * @param {Date} [minEndDate] Optional. The minimum premiere end date.
     * @param {Date} [maxEndDate] Optional. The maximum premiere end date.
     * @param {Boolean} [isMovie] Optional. Filter for movies.
     * @param {Boolean} [isSeries] Optional. Filter for series.
     * @param {Boolean} [isNews] Optional. Filter for news.
     * @param {Boolean} [isKids] Optional. Filter for kids.
     * @param {Boolean} [isSports] Optional. Filter for sports.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {String} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Name, StartDate.
     * @param {String} [sortOrder] Sort Order - Ascending,Descending.
     * @param {Array.<String>} [genres] The genres to return guide information for.
     * @param {Array.<String>} [genreIds] The genre ids to return guide information for.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {String} [seriesTimerId] Optional. Filter by series timer id.
     * @param {String} [librarySeriesId] Optional. Filter by library series id.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableTotalRecordCount = true)] Retrieve total record count.
     * @param {module:api/LiveTvApi~getLiveTvProgramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getLiveTvPrograms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'channelIds': this.apiClient.buildCollectionParam(opts['channelIds'], 'multi'),
        'userId': opts['userId'],
        'minStartDate': opts['minStartDate'],
        'hasAired': opts['hasAired'],
        'isAiring': opts['isAiring'],
        'maxStartDate': opts['maxStartDate'],
        'minEndDate': opts['minEndDate'],
        'maxEndDate': opts['maxEndDate'],
        'isMovie': opts['isMovie'],
        'isSeries': opts['isSeries'],
        'isNews': opts['isNews'],
        'isKids': opts['isKids'],
        'isSports': opts['isSports'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'genres': this.apiClient.buildCollectionParam(opts['genres'], 'multi'),
        'genreIds': this.apiClient.buildCollectionParam(opts['genreIds'], 'multi'),
        'enableImages': opts['enableImages'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'enableUserData': opts['enableUserData'],
        'seriesTimerId': opts['seriesTimerId'],
        'librarySeriesId': opts['librarySeriesId'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableTotalRecordCount': opts['enableTotalRecordCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/Programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgram operation.
     * @callback module:api/LiveTvApi~getProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a live tv program.
     * @param {String} programId Program id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Attach user data.
     * @param {module:api/LiveTvApi~getProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDto}
     */
    getProgram(programId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getProgram");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDto;
      return this.apiClient.callApi(
        '/LiveTv/Programs/{programId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrograms operation.
     * @callback module:api/LiveTvApi~getProgramsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available live tv epgs.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetProgramsDto} [getProgramsDto] Request body.
     * @param {module:api/LiveTvApi~getProgramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getPrograms(opts, callback) {
      opts = opts || {};
      let postBody = opts['getProgramsDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/Programs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendedPrograms operation.
     * @callback module:api/LiveTvApi~getRecommendedProgramsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets recommended live tv epgs.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. filter by user id.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Boolean} [isAiring] Optional. Filter by programs that are currently airing, or not.
     * @param {Boolean} [hasAired] Optional. Filter by programs that have completed airing, or not.
     * @param {Boolean} [isSeries] Optional. Filter for series.
     * @param {Boolean} [isMovie] Optional. Filter for movies.
     * @param {Boolean} [isNews] Optional. Filter for news.
     * @param {Boolean} [isKids] Optional. Filter for kids.
     * @param {Boolean} [isSports] Optional. Filter for sports.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {Array.<String>} [genreIds] The genres to return guide information for.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableUserData] Optional. include user data.
     * @param {Boolean} [enableTotalRecordCount = true)] Retrieve total record count.
     * @param {module:api/LiveTvApi~getRecommendedProgramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getRecommendedPrograms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'limit': opts['limit'],
        'isAiring': opts['isAiring'],
        'hasAired': opts['hasAired'],
        'isSeries': opts['isSeries'],
        'isMovie': opts['isMovie'],
        'isNews': opts['isNews'],
        'isKids': opts['isKids'],
        'isSports': opts['isSports'],
        'enableImages': opts['enableImages'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'genreIds': this.apiClient.buildCollectionParam(opts['genreIds'], 'multi'),
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableUserData': opts['enableUserData'],
        'enableTotalRecordCount': opts['enableTotalRecordCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/Programs/Recommended', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecording operation.
     * @callback module:api/LiveTvApi~getRecordingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a live tv recording.
     * @param {String} recordingId Recording id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Attach user data.
     * @param {module:api/LiveTvApi~getRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDto}
     */
    getRecording(recordingId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recordingId' is set
      if (recordingId === undefined || recordingId === null) {
        throw new Error("Missing the required parameter 'recordingId' when calling getRecording");
      }

      let pathParams = {
        'recordingId': recordingId
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDto;
      return this.apiClient.callApi(
        '/LiveTv/Recordings/{recordingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordingFolders operation.
     * @callback module:api/LiveTvApi~getRecordingFoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets recording folders.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user and attach user data.
     * @param {module:api/LiveTvApi~getRecordingFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getRecordingFolders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/Recordings/Folders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordingGroup operation.
     * @callback module:api/LiveTvApi~getRecordingGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recording group.
     * @param {String} groupId Group id.
     * @param {module:api/LiveTvApi~getRecordingGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecordingGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getRecordingGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/Recordings/Groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordingGroups operation.
     * @callback module:api/LiveTvApi~getRecordingGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets live tv recording groups.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user and attach user data.
     * @param {module:api/LiveTvApi~getRecordingGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getRecordingGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/Recordings/Groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordings operation.
     * @callback module:api/LiveTvApi~getRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets live tv recordings.
     * @param {Object} opts Optional parameters
     * @param {String} [channelId] Optional. Filter by channel id.
     * @param {String} [userId] Optional. Filter by user and attach user data.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {module:model/RecordingStatus} [status] Optional. Filter by recording status.
     * @param {Boolean} [isInProgress] Optional. Filter by recordings that are in progress, or not.
     * @param {String} [seriesTimerId] Optional. Filter by recordings belonging to a series timer.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Boolean} [isMovie] Optional. Filter for movies.
     * @param {Boolean} [isSeries] Optional. Filter for series.
     * @param {Boolean} [isKids] Optional. Filter for kids.
     * @param {Boolean} [isSports] Optional. Filter for sports.
     * @param {Boolean} [isNews] Optional. Filter for news.
     * @param {Boolean} [isLibraryItem] Optional. Filter for is library item.
     * @param {Boolean} [enableTotalRecordCount = true)] Optional. Return total record count.
     * @param {module:api/LiveTvApi~getRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getRecordings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'channelId': opts['channelId'],
        'userId': opts['userId'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'status': opts['status'],
        'isInProgress': opts['isInProgress'],
        'seriesTimerId': opts['seriesTimerId'],
        'enableImages': opts['enableImages'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableUserData': opts['enableUserData'],
        'isMovie': opts['isMovie'],
        'isSeries': opts['isSeries'],
        'isKids': opts['isKids'],
        'isSports': opts['isSports'],
        'isNews': opts['isNews'],
        'isLibraryItem': opts['isLibraryItem'],
        'enableTotalRecordCount': opts['enableTotalRecordCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/Recordings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordingsSeries operation.
     * @callback module:api/LiveTvApi~getRecordingsSeriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets live tv recording series.
     * @param {Object} opts Optional parameters
     * @param {String} [channelId] Optional. Filter by channel id.
     * @param {String} [userId] Optional. Filter by user and attach user data.
     * @param {String} [groupId] Optional. Filter by recording group.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {module:model/RecordingStatus} [status] Optional. Filter by recording status.
     * @param {Boolean} [isInProgress] Optional. Filter by recordings that are in progress, or not.
     * @param {String} [seriesTimerId] Optional. Filter by recordings belonging to a series timer.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Boolean} [enableTotalRecordCount = true)] Optional. Return total record count.
     * @param {module:api/LiveTvApi~getRecordingsSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getRecordingsSeries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'channelId': opts['channelId'],
        'userId': opts['userId'],
        'groupId': opts['groupId'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'status': opts['status'],
        'isInProgress': opts['isInProgress'],
        'seriesTimerId': opts['seriesTimerId'],
        'enableImages': opts['enableImages'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableUserData': opts['enableUserData'],
        'enableTotalRecordCount': opts['enableTotalRecordCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/Recordings/Series', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchedulesDirectCountries operation.
     * @callback module:api/LiveTvApi~getSchedulesDirectCountriesCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available countries.
     * @param {module:api/LiveTvApi~getSchedulesDirectCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getSchedulesDirectCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/LiveTv/ListingProviders/SchedulesDirect/Countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesTimer operation.
     * @callback module:api/LiveTvApi~getSeriesTimerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeriesTimerInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a live tv series timer.
     * @param {String} timerId Timer id.
     * @param {module:api/LiveTvApi~getSeriesTimerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeriesTimerInfoDto}
     */
    getSeriesTimer(timerId, callback) {
      let postBody = null;
      // verify the required parameter 'timerId' is set
      if (timerId === undefined || timerId === null) {
        throw new Error("Missing the required parameter 'timerId' when calling getSeriesTimer");
      }

      let pathParams = {
        'timerId': timerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = SeriesTimerInfoDto;
      return this.apiClient.callApi(
        '/LiveTv/SeriesTimers/{timerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesTimers operation.
     * @callback module:api/LiveTvApi~getSeriesTimersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SeriesTimerInfoDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets live tv series timers.
     * @param {Object} opts Optional parameters
     * @param {String} [sortBy] Optional. Sort by SortName or Priority.
     * @param {module:model/SortOrder} [sortOrder] Optional. Sort in Ascending or Descending order.
     * @param {module:api/LiveTvApi~getSeriesTimersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SeriesTimerInfoDtoQueryResult}
     */
    getSeriesTimers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = SeriesTimerInfoDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/SeriesTimers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimer operation.
     * @callback module:api/LiveTvApi~getTimerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimerInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a timer.
     * @param {String} timerId Timer id.
     * @param {module:api/LiveTvApi~getTimerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimerInfoDto}
     */
    getTimer(timerId, callback) {
      let postBody = null;
      // verify the required parameter 'timerId' is set
      if (timerId === undefined || timerId === null) {
        throw new Error("Missing the required parameter 'timerId' when calling getTimer");
      }

      let pathParams = {
        'timerId': timerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = TimerInfoDto;
      return this.apiClient.callApi(
        '/LiveTv/Timers/{timerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimers operation.
     * @callback module:api/LiveTvApi~getTimersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimerInfoDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the live tv timers.
     * @param {Object} opts Optional parameters
     * @param {String} [channelId] Optional. Filter by channel id.
     * @param {String} [seriesTimerId] Optional. Filter by timers belonging to a series timer.
     * @param {Boolean} [isActive] Optional. Filter by timers that are active.
     * @param {Boolean} [isScheduled] Optional. Filter by timers that are scheduled.
     * @param {module:api/LiveTvApi~getTimersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimerInfoDtoQueryResult}
     */
    getTimers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'channelId': opts['channelId'],
        'seriesTimerId': opts['seriesTimerId'],
        'isActive': opts['isActive'],
        'isScheduled': opts['isScheduled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = TimerInfoDtoQueryResult;
      return this.apiClient.callApi(
        '/LiveTv/Timers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTunerHostTypes operation.
     * @callback module:api/LiveTvApi~getTunerHostTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NameIdPair>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tuner host types.
     * @param {module:api/LiveTvApi~getTunerHostTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NameIdPair>}
     */
    getTunerHostTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [NameIdPair];
      return this.apiClient.callApi(
        '/LiveTv/TunerHosts/Types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetTuner operation.
     * @callback module:api/LiveTvApi~resetTunerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets a tv tuner.
     * @param {String} tunerId Tuner id.
     * @param {module:api/LiveTvApi~resetTunerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetTuner(tunerId, callback) {
      let postBody = null;
      // verify the required parameter 'tunerId' is set
      if (tunerId === undefined || tunerId === null) {
        throw new Error("Missing the required parameter 'tunerId' when calling resetTuner");
      }

      let pathParams = {
        'tunerId': tunerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/Tuners/{tunerId}/Reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setChannelMapping operation.
     * @callback module:api/LiveTvApi~setChannelMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TunerChannelMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set channel mappings.
     * @param {module:model/SetChannelMappingDto} setChannelMappingDto The set channel mapping dto.
     * @param {module:api/LiveTvApi~setChannelMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TunerChannelMapping}
     */
    setChannelMapping(setChannelMappingDto, callback) {
      let postBody = setChannelMappingDto;
      // verify the required parameter 'setChannelMappingDto' is set
      if (setChannelMappingDto === undefined || setChannelMappingDto === null) {
        throw new Error("Missing the required parameter 'setChannelMappingDto' when calling setChannelMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = TunerChannelMapping;
      return this.apiClient.callApi(
        '/LiveTv/ChannelMappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSeriesTimer operation.
     * @callback module:api/LiveTvApi~updateSeriesTimerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a live tv series timer.
     * @param {String} timerId Timer id.
     * @param {Object} opts Optional parameters
     * @param {module:model/SeriesTimerInfoDto} [seriesTimerInfoDto] New series timer info.
     * @param {module:api/LiveTvApi~updateSeriesTimerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSeriesTimer(timerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['seriesTimerInfoDto'];
      // verify the required parameter 'timerId' is set
      if (timerId === undefined || timerId === null) {
        throw new Error("Missing the required parameter 'timerId' when calling updateSeriesTimer");
      }

      let pathParams = {
        'timerId': timerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/SeriesTimers/{timerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTimer operation.
     * @callback module:api/LiveTvApi~updateTimerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a live tv timer.
     * @param {String} timerId Timer id.
     * @param {Object} opts Optional parameters
     * @param {module:model/TimerInfoDto} [timerInfoDto] New timer info.
     * @param {module:api/LiveTvApi~updateTimerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTimer(timerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['timerInfoDto'];
      // verify the required parameter 'timerId' is set
      if (timerId === undefined || timerId === null) {
        throw new Error("Missing the required parameter 'timerId' when calling updateTimer");
      }

      let pathParams = {
        'timerId': timerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveTv/Timers/{timerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
