/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDto from '../model/BaseItemDto';
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ImageType from '../model/ImageType';
import ItemFields from '../model/ItemFields';

/**
* Studios service.
* @module api/StudiosApi
* @version v1
*/
export default class StudiosApi {

    /**
    * Constructs a new StudiosApi. 
    * @alias module:api/StudiosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getStudio operation.
     * @callback module:api/StudiosApi~getStudioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a studio by name.
     * @param {String} name Studio name.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {module:api/StudiosApi~getStudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDto}
     */
    getStudio(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getStudio");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDto;
      return this.apiClient.callApi(
        '/Studios/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudios operation.
     * @callback module:api/StudiosApi~getStudiosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all studios from a given item, folder, or the entire library.
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {String} [searchTerm] Optional. Search term.
     * @param {String} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Array.<String>} [excludeItemTypes] Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
     * @param {Array.<String>} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
     * @param {Boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
     * @param {Boolean} [enableUserData] Optional, include user data.
     * @param {Number} [imageTypeLimit] Optional, the max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {String} [userId] User id.
     * @param {String} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
     * @param {String} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
     * @param {String} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
     * @param {Boolean} [enableImages = true)] Optional, include image information in output.
     * @param {Boolean} [enableTotalRecordCount = true)] Total record count.
     * @param {module:api/StudiosApi~getStudiosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getStudios(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'searchTerm': opts['searchTerm'],
        'parentId': opts['parentId'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'excludeItemTypes': this.apiClient.buildCollectionParam(opts['excludeItemTypes'], 'multi'),
        'includeItemTypes': this.apiClient.buildCollectionParam(opts['includeItemTypes'], 'multi'),
        'isFavorite': opts['isFavorite'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'userId': opts['userId'],
        'nameStartsWithOrGreater': opts['nameStartsWithOrGreater'],
        'nameStartsWith': opts['nameStartsWith'],
        'nameLessThan': opts['nameLessThan'],
        'enableImages': opts['enableImages'],
        'enableTotalRecordCount': opts['enableTotalRecordCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Studios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
