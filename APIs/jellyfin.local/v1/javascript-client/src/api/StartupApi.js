/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StartupConfigurationDto from '../model/StartupConfigurationDto';
import StartupRemoteAccessDto from '../model/StartupRemoteAccessDto';
import StartupUserDto from '../model/StartupUserDto';

/**
* Startup service.
* @module api/StartupApi
* @version v1
*/
export default class StartupApi {

    /**
    * Constructs a new StartupApi. 
    * @alias module:api/StartupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the completeWizard operation.
     * @callback module:api/StartupApi~completeWizardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Completes the startup wizard.
     * @param {module:api/StartupApi~completeWizardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    completeWizard(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Startup/Complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirstUser operation.
     * @callback module:api/StartupApi~getFirstUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartupUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the first user.
     * @param {module:api/StartupApi~getFirstUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartupUserDto}
     */
    getFirstUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = StartupUserDto;
      return this.apiClient.callApi(
        '/Startup/User', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirstUser2 operation.
     * @callback module:api/StartupApi~getFirstUser2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/StartupUserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the first user.
     * @param {module:api/StartupApi~getFirstUser2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartupUserDto}
     */
    getFirstUser2(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = StartupUserDto;
      return this.apiClient.callApi(
        '/Startup/FirstUser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStartupConfiguration operation.
     * @callback module:api/StartupApi~getStartupConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartupConfigurationDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the initial startup wizard configuration.
     * @param {module:api/StartupApi~getStartupConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartupConfigurationDto}
     */
    getStartupConfiguration(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = StartupConfigurationDto;
      return this.apiClient.callApi(
        '/Startup/Configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRemoteAccess operation.
     * @callback module:api/StartupApi~setRemoteAccessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets remote access and UPnP.
     * @param {module:model/StartupRemoteAccessDto} startupRemoteAccessDto The startup remote access dto.
     * @param {module:api/StartupApi~setRemoteAccessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRemoteAccess(startupRemoteAccessDto, callback) {
      let postBody = startupRemoteAccessDto;
      // verify the required parameter 'startupRemoteAccessDto' is set
      if (startupRemoteAccessDto === undefined || startupRemoteAccessDto === null) {
        throw new Error("Missing the required parameter 'startupRemoteAccessDto' when calling setRemoteAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Startup/RemoteAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInitialConfiguration operation.
     * @callback module:api/StartupApi~updateInitialConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the initial startup wizard configuration.
     * @param {module:model/StartupConfigurationDto} startupConfigurationDto The updated startup configuration.
     * @param {module:api/StartupApi~updateInitialConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInitialConfiguration(startupConfigurationDto, callback) {
      let postBody = startupConfigurationDto;
      // verify the required parameter 'startupConfigurationDto' is set
      if (startupConfigurationDto === undefined || startupConfigurationDto === null) {
        throw new Error("Missing the required parameter 'startupConfigurationDto' when calling updateInitialConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Startup/Configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStartupUser operation.
     * @callback module:api/StartupApi~updateStartupUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the user name and password.
     * @param {Object} opts Optional parameters
     * @param {module:model/StartupUserDto} [startupUserDto] The DTO containing username and password.
     * @param {module:api/StartupApi~updateStartupUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateStartupUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['startupUserDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Startup/User', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
