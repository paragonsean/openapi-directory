/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DisplayPreferencesDto from '../model/DisplayPreferencesDto';

/**
* DisplayPreferences service.
* @module api/DisplayPreferencesApi
* @version v1
*/
export default class DisplayPreferencesApi {

    /**
    * Constructs a new DisplayPreferencesApi. 
    * @alias module:api/DisplayPreferencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDisplayPreferences operation.
     * @callback module:api/DisplayPreferencesApi~getDisplayPreferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisplayPreferencesDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Display Preferences.
     * @param {String} displayPreferencesId Display preferences id.
     * @param {String} userId User id.
     * @param {String} client Client.
     * @param {module:api/DisplayPreferencesApi~getDisplayPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisplayPreferencesDto}
     */
    getDisplayPreferences(displayPreferencesId, userId, client, callback) {
      let postBody = null;
      // verify the required parameter 'displayPreferencesId' is set
      if (displayPreferencesId === undefined || displayPreferencesId === null) {
        throw new Error("Missing the required parameter 'displayPreferencesId' when calling getDisplayPreferences");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getDisplayPreferences");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling getDisplayPreferences");
      }

      let pathParams = {
        'displayPreferencesId': displayPreferencesId
      };
      let queryParams = {
        'userId': userId,
        'client': client
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = DisplayPreferencesDto;
      return this.apiClient.callApi(
        '/DisplayPreferences/{displayPreferencesId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDisplayPreferences operation.
     * @callback module:api/DisplayPreferencesApi~updateDisplayPreferencesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Display Preferences.
     * @param {String} displayPreferencesId Display preferences id.
     * @param {String} userId User Id.
     * @param {String} client Client.
     * @param {module:model/DisplayPreferencesDto} displayPreferencesDto New Display Preferences object.
     * @param {module:api/DisplayPreferencesApi~updateDisplayPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDisplayPreferences(displayPreferencesId, userId, client, displayPreferencesDto, callback) {
      let postBody = displayPreferencesDto;
      // verify the required parameter 'displayPreferencesId' is set
      if (displayPreferencesId === undefined || displayPreferencesId === null) {
        throw new Error("Missing the required parameter 'displayPreferencesId' when calling updateDisplayPreferences");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateDisplayPreferences");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling updateDisplayPreferences");
      }
      // verify the required parameter 'displayPreferencesDto' is set
      if (displayPreferencesDto === undefined || displayPreferencesDto === null) {
        throw new Error("Missing the required parameter 'displayPreferencesDto' when calling updateDisplayPreferences");
      }

      let pathParams = {
        'displayPreferencesId': displayPreferencesId
      };
      let queryParams = {
        'userId': userId,
        'client': client
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/DisplayPreferences/{displayPreferencesId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
