/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EncodingContext from '../model/EncodingContext';
import SubtitleDeliveryMethod from '../model/SubtitleDeliveryMethod';

/**
* DynamicHls service.
* @module api/DynamicHlsApi
* @version v1
*/
export default class DynamicHlsApi {

    /**
    * Constructs a new DynamicHlsApi. 
    * @alias module:api/DynamicHlsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getHlsAudioSegment operation.
     * @callback module:api/DynamicHlsApi~getHlsAudioSegmentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a video stream using HTTP live streaming.
     * @param {String} itemId The item id.
     * @param {String} playlistId The playlist id.
     * @param {Number} segmentId The segment id.
     * @param {String} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
     * @param {String} [params] The streaming parameters.
     * @param {String} [tag] The tag.
     * @param {String} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {String} [playSessionId] The play session id.
     * @param {String} [segmentContainer] The segment container.
     * @param {Number} [segmentLength] The segment length.
     * @param {Number} [minSegments] The minimum number of segments.
     * @param {String} [mediaSourceId] The media version id, if playing an alternate version.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
     * @param {Boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {Boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
     * @param {Boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
     * @param {Number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
     * @param {String} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
     * @param {String} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
     * @param {Number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {Number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {Number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {Number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {Number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {module:model/SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {Number} [maxRefFrames] Optional.
     * @param {Number} [maxVideoBitDepth] Optional. The maximum video bit depth.
     * @param {Boolean} [requireAvc] Optional. Whether to require avc.
     * @param {Boolean} [deInterlace] Optional. Whether to deinterlace the video.
     * @param {Boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
     * @param {Number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
     * @param {Number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
     * @param {String} [liveStreamId] The live stream id.
     * @param {Boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
     * @param {String} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
     * @param {String} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
     * @param {String} [transcodeReasons] Optional. The transcoding reason.
     * @param {Number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {Number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {module:model/EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
     * @param {Object.<String, {String: String}>} [streamOptions] Optional. The streaming options.
     * @param {module:api/DynamicHlsApi~getHlsAudioSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getHlsAudioSegment(itemId, playlistId, segmentId, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getHlsAudioSegment");
      }
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getHlsAudioSegment");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getHlsAudioSegment");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling getHlsAudioSegment");
      }

      let pathParams = {
        'itemId': itemId,
        'playlistId': playlistId,
        'segmentId': segmentId,
        'container': container
      };
      let queryParams = {
        'static': opts['_static'],
        'params': opts['params'],
        'tag': opts['tag'],
        'deviceProfileId': opts['deviceProfileId'],
        'playSessionId': opts['playSessionId'],
        'segmentContainer': opts['segmentContainer'],
        'segmentLength': opts['segmentLength'],
        'minSegments': opts['minSegments'],
        'mediaSourceId': opts['mediaSourceId'],
        'deviceId': opts['deviceId'],
        'audioCodec': opts['audioCodec'],
        'enableAutoStreamCopy': opts['enableAutoStreamCopy'],
        'allowVideoStreamCopy': opts['allowVideoStreamCopy'],
        'allowAudioStreamCopy': opts['allowAudioStreamCopy'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'audioSampleRate': opts['audioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'maxStreamingBitrate': opts['maxStreamingBitrate'],
        'audioBitRate': opts['audioBitRate'],
        'audioChannels': opts['audioChannels'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'profile': opts['profile'],
        'level': opts['level'],
        'framerate': opts['framerate'],
        'maxFramerate': opts['maxFramerate'],
        'copyTimestamps': opts['copyTimestamps'],
        'startTimeTicks': opts['startTimeTicks'],
        'width': opts['width'],
        'height': opts['height'],
        'videoBitRate': opts['videoBitRate'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'subtitleMethod': opts['subtitleMethod'],
        'maxRefFrames': opts['maxRefFrames'],
        'maxVideoBitDepth': opts['maxVideoBitDepth'],
        'requireAvc': opts['requireAvc'],
        'deInterlace': opts['deInterlace'],
        'requireNonAnamorphic': opts['requireNonAnamorphic'],
        'transcodingMaxAudioChannels': opts['transcodingMaxAudioChannels'],
        'cpuCoreLimit': opts['cpuCoreLimit'],
        'liveStreamId': opts['liveStreamId'],
        'enableMpegtsM2TsMode': opts['enableMpegtsM2TsMode'],
        'videoCodec': opts['videoCodec'],
        'subtitleCodec': opts['subtitleCodec'],
        'transcodeReasons': opts['transcodeReasons'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'videoStreamIndex': opts['videoStreamIndex'],
        'context': opts['context'],
        'streamOptions': opts['streamOptions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['audio/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHlsVideoSegment operation.
     * @callback module:api/DynamicHlsApi~getHlsVideoSegmentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a video stream using HTTP live streaming.
     * @param {String} itemId The item id.
     * @param {String} playlistId The playlist id.
     * @param {Number} segmentId The segment id.
     * @param {String} container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
     * @param {String} [params] The streaming parameters.
     * @param {String} [tag] The tag.
     * @param {String} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {String} [playSessionId] The play session id.
     * @param {String} [segmentContainer] The segment container.
     * @param {Number} [segmentLength] The segment lenght.
     * @param {Number} [minSegments] The minimum number of segments.
     * @param {String} [mediaSourceId] The media version id, if playing an alternate version.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
     * @param {Boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {Boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
     * @param {Boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
     * @param {Number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
     * @param {String} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
     * @param {String} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
     * @param {Number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {Number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {Number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {Number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {Number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {module:model/SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {Number} [maxRefFrames] Optional.
     * @param {Number} [maxVideoBitDepth] Optional. The maximum video bit depth.
     * @param {Boolean} [requireAvc] Optional. Whether to require avc.
     * @param {Boolean} [deInterlace] Optional. Whether to deinterlace the video.
     * @param {Boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
     * @param {Number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
     * @param {Number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
     * @param {String} [liveStreamId] The live stream id.
     * @param {Boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
     * @param {String} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
     * @param {String} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
     * @param {String} [transcodeReasons] Optional. The transcoding reason.
     * @param {Number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {Number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {module:model/EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
     * @param {Object.<String, {String: String}>} [streamOptions] Optional. The streaming options.
     * @param {module:api/DynamicHlsApi~getHlsVideoSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getHlsVideoSegment(itemId, playlistId, segmentId, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getHlsVideoSegment");
      }
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getHlsVideoSegment");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getHlsVideoSegment");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling getHlsVideoSegment");
      }

      let pathParams = {
        'itemId': itemId,
        'playlistId': playlistId,
        'segmentId': segmentId,
        'container': container
      };
      let queryParams = {
        'static': opts['_static'],
        'params': opts['params'],
        'tag': opts['tag'],
        'deviceProfileId': opts['deviceProfileId'],
        'playSessionId': opts['playSessionId'],
        'segmentContainer': opts['segmentContainer'],
        'segmentLength': opts['segmentLength'],
        'minSegments': opts['minSegments'],
        'mediaSourceId': opts['mediaSourceId'],
        'deviceId': opts['deviceId'],
        'audioCodec': opts['audioCodec'],
        'enableAutoStreamCopy': opts['enableAutoStreamCopy'],
        'allowVideoStreamCopy': opts['allowVideoStreamCopy'],
        'allowAudioStreamCopy': opts['allowAudioStreamCopy'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'audioSampleRate': opts['audioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'audioBitRate': opts['audioBitRate'],
        'audioChannels': opts['audioChannels'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'profile': opts['profile'],
        'level': opts['level'],
        'framerate': opts['framerate'],
        'maxFramerate': opts['maxFramerate'],
        'copyTimestamps': opts['copyTimestamps'],
        'startTimeTicks': opts['startTimeTicks'],
        'width': opts['width'],
        'height': opts['height'],
        'videoBitRate': opts['videoBitRate'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'subtitleMethod': opts['subtitleMethod'],
        'maxRefFrames': opts['maxRefFrames'],
        'maxVideoBitDepth': opts['maxVideoBitDepth'],
        'requireAvc': opts['requireAvc'],
        'deInterlace': opts['deInterlace'],
        'requireNonAnamorphic': opts['requireNonAnamorphic'],
        'transcodingMaxAudioChannels': opts['transcodingMaxAudioChannels'],
        'cpuCoreLimit': opts['cpuCoreLimit'],
        'liveStreamId': opts['liveStreamId'],
        'enableMpegtsM2TsMode': opts['enableMpegtsM2TsMode'],
        'videoCodec': opts['videoCodec'],
        'subtitleCodec': opts['subtitleCodec'],
        'transcodeReasons': opts['transcodeReasons'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'videoStreamIndex': opts['videoStreamIndex'],
        'context': opts['context'],
        'streamOptions': opts['streamOptions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['video/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Videos/{itemId}/hls1/{playlistId}/{segmentId}.{container}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMasterHlsAudioPlaylist operation.
     * @callback module:api/DynamicHlsApi~getMasterHlsAudioPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an audio hls playlist stream.
     * @param {String} itemId The item id.
     * @param {String} mediaSourceId The media version id, if playing an alternate version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
     * @param {String} [params] The streaming parameters.
     * @param {String} [tag] The tag.
     * @param {String} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {String} [playSessionId] The play session id.
     * @param {String} [segmentContainer] The segment container.
     * @param {Number} [segmentLength] The segment length.
     * @param {Number} [minSegments] The minimum number of segments.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
     * @param {Boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {Boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
     * @param {Boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
     * @param {Number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
     * @param {String} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
     * @param {String} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
     * @param {Number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {Number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {Number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {Number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {Number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {module:model/SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {Number} [maxRefFrames] Optional.
     * @param {Number} [maxVideoBitDepth] Optional. The maximum video bit depth.
     * @param {Boolean} [requireAvc] Optional. Whether to require avc.
     * @param {Boolean} [deInterlace] Optional. Whether to deinterlace the video.
     * @param {Boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
     * @param {Number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
     * @param {Number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
     * @param {String} [liveStreamId] The live stream id.
     * @param {Boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
     * @param {String} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
     * @param {String} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
     * @param {String} [transcodeReasons] Optional. The transcoding reason.
     * @param {Number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {Number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {module:model/EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
     * @param {Object.<String, {String: String}>} [streamOptions] Optional. The streaming options.
     * @param {Boolean} [enableAdaptiveBitrateStreaming = true)] Enable adaptive bitrate streaming.
     * @param {module:api/DynamicHlsApi~getMasterHlsAudioPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getMasterHlsAudioPlaylist(itemId, mediaSourceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getMasterHlsAudioPlaylist");
      }
      // verify the required parameter 'mediaSourceId' is set
      if (mediaSourceId === undefined || mediaSourceId === null) {
        throw new Error("Missing the required parameter 'mediaSourceId' when calling getMasterHlsAudioPlaylist");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'static': opts['_static'],
        'params': opts['params'],
        'tag': opts['tag'],
        'deviceProfileId': opts['deviceProfileId'],
        'playSessionId': opts['playSessionId'],
        'segmentContainer': opts['segmentContainer'],
        'segmentLength': opts['segmentLength'],
        'minSegments': opts['minSegments'],
        'mediaSourceId': mediaSourceId,
        'deviceId': opts['deviceId'],
        'audioCodec': opts['audioCodec'],
        'enableAutoStreamCopy': opts['enableAutoStreamCopy'],
        'allowVideoStreamCopy': opts['allowVideoStreamCopy'],
        'allowAudioStreamCopy': opts['allowAudioStreamCopy'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'audioSampleRate': opts['audioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'maxStreamingBitrate': opts['maxStreamingBitrate'],
        'audioBitRate': opts['audioBitRate'],
        'audioChannels': opts['audioChannels'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'profile': opts['profile'],
        'level': opts['level'],
        'framerate': opts['framerate'],
        'maxFramerate': opts['maxFramerate'],
        'copyTimestamps': opts['copyTimestamps'],
        'startTimeTicks': opts['startTimeTicks'],
        'width': opts['width'],
        'height': opts['height'],
        'videoBitRate': opts['videoBitRate'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'subtitleMethod': opts['subtitleMethod'],
        'maxRefFrames': opts['maxRefFrames'],
        'maxVideoBitDepth': opts['maxVideoBitDepth'],
        'requireAvc': opts['requireAvc'],
        'deInterlace': opts['deInterlace'],
        'requireNonAnamorphic': opts['requireNonAnamorphic'],
        'transcodingMaxAudioChannels': opts['transcodingMaxAudioChannels'],
        'cpuCoreLimit': opts['cpuCoreLimit'],
        'liveStreamId': opts['liveStreamId'],
        'enableMpegtsM2TsMode': opts['enableMpegtsM2TsMode'],
        'videoCodec': opts['videoCodec'],
        'subtitleCodec': opts['subtitleCodec'],
        'transcodeReasons': opts['transcodeReasons'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'videoStreamIndex': opts['videoStreamIndex'],
        'context': opts['context'],
        'streamOptions': opts['streamOptions'],
        'enableAdaptiveBitrateStreaming': opts['enableAdaptiveBitrateStreaming']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/x-mpegURL'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Audio/{itemId}/master.m3u8', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMasterHlsVideoPlaylist operation.
     * @callback module:api/DynamicHlsApi~getMasterHlsVideoPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a video hls playlist stream.
     * @param {String} itemId The item id.
     * @param {String} mediaSourceId The media version id, if playing an alternate version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
     * @param {String} [params] The streaming parameters.
     * @param {String} [tag] The tag.
     * @param {String} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {String} [playSessionId] The play session id.
     * @param {String} [segmentContainer] The segment container.
     * @param {Number} [segmentLength] The segment length.
     * @param {Number} [minSegments] The minimum number of segments.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
     * @param {Boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {Boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
     * @param {Boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
     * @param {Number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
     * @param {String} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
     * @param {String} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
     * @param {Number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {Number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {Number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {Number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {Number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {module:model/SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {Number} [maxRefFrames] Optional.
     * @param {Number} [maxVideoBitDepth] Optional. The maximum video bit depth.
     * @param {Boolean} [requireAvc] Optional. Whether to require avc.
     * @param {Boolean} [deInterlace] Optional. Whether to deinterlace the video.
     * @param {Boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
     * @param {Number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
     * @param {Number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
     * @param {String} [liveStreamId] The live stream id.
     * @param {Boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
     * @param {String} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
     * @param {String} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
     * @param {String} [transcodeReasons] Optional. The transcoding reason.
     * @param {Number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {Number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {module:model/EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
     * @param {Object.<String, {String: String}>} [streamOptions] Optional. The streaming options.
     * @param {Boolean} [enableAdaptiveBitrateStreaming = true)] Enable adaptive bitrate streaming.
     * @param {module:api/DynamicHlsApi~getMasterHlsVideoPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getMasterHlsVideoPlaylist(itemId, mediaSourceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getMasterHlsVideoPlaylist");
      }
      // verify the required parameter 'mediaSourceId' is set
      if (mediaSourceId === undefined || mediaSourceId === null) {
        throw new Error("Missing the required parameter 'mediaSourceId' when calling getMasterHlsVideoPlaylist");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'static': opts['_static'],
        'params': opts['params'],
        'tag': opts['tag'],
        'deviceProfileId': opts['deviceProfileId'],
        'playSessionId': opts['playSessionId'],
        'segmentContainer': opts['segmentContainer'],
        'segmentLength': opts['segmentLength'],
        'minSegments': opts['minSegments'],
        'mediaSourceId': mediaSourceId,
        'deviceId': opts['deviceId'],
        'audioCodec': opts['audioCodec'],
        'enableAutoStreamCopy': opts['enableAutoStreamCopy'],
        'allowVideoStreamCopy': opts['allowVideoStreamCopy'],
        'allowAudioStreamCopy': opts['allowAudioStreamCopy'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'audioSampleRate': opts['audioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'audioBitRate': opts['audioBitRate'],
        'audioChannels': opts['audioChannels'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'profile': opts['profile'],
        'level': opts['level'],
        'framerate': opts['framerate'],
        'maxFramerate': opts['maxFramerate'],
        'copyTimestamps': opts['copyTimestamps'],
        'startTimeTicks': opts['startTimeTicks'],
        'width': opts['width'],
        'height': opts['height'],
        'videoBitRate': opts['videoBitRate'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'subtitleMethod': opts['subtitleMethod'],
        'maxRefFrames': opts['maxRefFrames'],
        'maxVideoBitDepth': opts['maxVideoBitDepth'],
        'requireAvc': opts['requireAvc'],
        'deInterlace': opts['deInterlace'],
        'requireNonAnamorphic': opts['requireNonAnamorphic'],
        'transcodingMaxAudioChannels': opts['transcodingMaxAudioChannels'],
        'cpuCoreLimit': opts['cpuCoreLimit'],
        'liveStreamId': opts['liveStreamId'],
        'enableMpegtsM2TsMode': opts['enableMpegtsM2TsMode'],
        'videoCodec': opts['videoCodec'],
        'subtitleCodec': opts['subtitleCodec'],
        'transcodeReasons': opts['transcodeReasons'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'videoStreamIndex': opts['videoStreamIndex'],
        'context': opts['context'],
        'streamOptions': opts['streamOptions'],
        'enableAdaptiveBitrateStreaming': opts['enableAdaptiveBitrateStreaming']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/x-mpegURL'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Videos/{itemId}/master.m3u8', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantHlsAudioPlaylist operation.
     * @callback module:api/DynamicHlsApi~getVariantHlsAudioPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an audio stream using HTTP live streaming.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
     * @param {String} [params] The streaming parameters.
     * @param {String} [tag] The tag.
     * @param {String} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {String} [playSessionId] The play session id.
     * @param {String} [segmentContainer] The segment container.
     * @param {Number} [segmentLength] The segment length.
     * @param {Number} [minSegments] The minimum number of segments.
     * @param {String} [mediaSourceId] The media version id, if playing an alternate version.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
     * @param {Boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {Boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
     * @param {Boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
     * @param {Number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
     * @param {String} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
     * @param {String} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
     * @param {Number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {Number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {Number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {Number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {Number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {module:model/SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {Number} [maxRefFrames] Optional.
     * @param {Number} [maxVideoBitDepth] Optional. The maximum video bit depth.
     * @param {Boolean} [requireAvc] Optional. Whether to require avc.
     * @param {Boolean} [deInterlace] Optional. Whether to deinterlace the video.
     * @param {Boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
     * @param {Number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
     * @param {Number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
     * @param {String} [liveStreamId] The live stream id.
     * @param {Boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
     * @param {String} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
     * @param {String} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
     * @param {String} [transcodeReasons] Optional. The transcoding reason.
     * @param {Number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {Number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {module:model/EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
     * @param {Object.<String, {String: String}>} [streamOptions] Optional. The streaming options.
     * @param {module:api/DynamicHlsApi~getVariantHlsAudioPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getVariantHlsAudioPlaylist(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getVariantHlsAudioPlaylist");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'static': opts['_static'],
        'params': opts['params'],
        'tag': opts['tag'],
        'deviceProfileId': opts['deviceProfileId'],
        'playSessionId': opts['playSessionId'],
        'segmentContainer': opts['segmentContainer'],
        'segmentLength': opts['segmentLength'],
        'minSegments': opts['minSegments'],
        'mediaSourceId': opts['mediaSourceId'],
        'deviceId': opts['deviceId'],
        'audioCodec': opts['audioCodec'],
        'enableAutoStreamCopy': opts['enableAutoStreamCopy'],
        'allowVideoStreamCopy': opts['allowVideoStreamCopy'],
        'allowAudioStreamCopy': opts['allowAudioStreamCopy'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'audioSampleRate': opts['audioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'maxStreamingBitrate': opts['maxStreamingBitrate'],
        'audioBitRate': opts['audioBitRate'],
        'audioChannels': opts['audioChannels'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'profile': opts['profile'],
        'level': opts['level'],
        'framerate': opts['framerate'],
        'maxFramerate': opts['maxFramerate'],
        'copyTimestamps': opts['copyTimestamps'],
        'startTimeTicks': opts['startTimeTicks'],
        'width': opts['width'],
        'height': opts['height'],
        'videoBitRate': opts['videoBitRate'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'subtitleMethod': opts['subtitleMethod'],
        'maxRefFrames': opts['maxRefFrames'],
        'maxVideoBitDepth': opts['maxVideoBitDepth'],
        'requireAvc': opts['requireAvc'],
        'deInterlace': opts['deInterlace'],
        'requireNonAnamorphic': opts['requireNonAnamorphic'],
        'transcodingMaxAudioChannels': opts['transcodingMaxAudioChannels'],
        'cpuCoreLimit': opts['cpuCoreLimit'],
        'liveStreamId': opts['liveStreamId'],
        'enableMpegtsM2TsMode': opts['enableMpegtsM2TsMode'],
        'videoCodec': opts['videoCodec'],
        'subtitleCodec': opts['subtitleCodec'],
        'transcodeReasons': opts['transcodeReasons'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'videoStreamIndex': opts['videoStreamIndex'],
        'context': opts['context'],
        'streamOptions': opts['streamOptions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/x-mpegURL'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Audio/{itemId}/main.m3u8', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantHlsVideoPlaylist operation.
     * @callback module:api/DynamicHlsApi~getVariantHlsVideoPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a video stream using HTTP live streaming.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
     * @param {String} [params] The streaming parameters.
     * @param {String} [tag] The tag.
     * @param {String} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {String} [playSessionId] The play session id.
     * @param {String} [segmentContainer] The segment container.
     * @param {Number} [segmentLength] The segment length.
     * @param {Number} [minSegments] The minimum number of segments.
     * @param {String} [mediaSourceId] The media version id, if playing an alternate version.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
     * @param {Boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {Boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
     * @param {Boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
     * @param {Number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
     * @param {String} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
     * @param {String} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
     * @param {Number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {Number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {Number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {Number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {Number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {module:model/SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {Number} [maxRefFrames] Optional.
     * @param {Number} [maxVideoBitDepth] Optional. The maximum video bit depth.
     * @param {Boolean} [requireAvc] Optional. Whether to require avc.
     * @param {Boolean} [deInterlace] Optional. Whether to deinterlace the video.
     * @param {Boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
     * @param {Number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
     * @param {Number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
     * @param {String} [liveStreamId] The live stream id.
     * @param {Boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
     * @param {String} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
     * @param {String} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
     * @param {String} [transcodeReasons] Optional. The transcoding reason.
     * @param {Number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {Number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {module:model/EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
     * @param {Object.<String, {String: String}>} [streamOptions] Optional. The streaming options.
     * @param {module:api/DynamicHlsApi~getVariantHlsVideoPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getVariantHlsVideoPlaylist(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getVariantHlsVideoPlaylist");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'static': opts['_static'],
        'params': opts['params'],
        'tag': opts['tag'],
        'deviceProfileId': opts['deviceProfileId'],
        'playSessionId': opts['playSessionId'],
        'segmentContainer': opts['segmentContainer'],
        'segmentLength': opts['segmentLength'],
        'minSegments': opts['minSegments'],
        'mediaSourceId': opts['mediaSourceId'],
        'deviceId': opts['deviceId'],
        'audioCodec': opts['audioCodec'],
        'enableAutoStreamCopy': opts['enableAutoStreamCopy'],
        'allowVideoStreamCopy': opts['allowVideoStreamCopy'],
        'allowAudioStreamCopy': opts['allowAudioStreamCopy'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'audioSampleRate': opts['audioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'audioBitRate': opts['audioBitRate'],
        'audioChannels': opts['audioChannels'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'profile': opts['profile'],
        'level': opts['level'],
        'framerate': opts['framerate'],
        'maxFramerate': opts['maxFramerate'],
        'copyTimestamps': opts['copyTimestamps'],
        'startTimeTicks': opts['startTimeTicks'],
        'width': opts['width'],
        'height': opts['height'],
        'videoBitRate': opts['videoBitRate'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'subtitleMethod': opts['subtitleMethod'],
        'maxRefFrames': opts['maxRefFrames'],
        'maxVideoBitDepth': opts['maxVideoBitDepth'],
        'requireAvc': opts['requireAvc'],
        'deInterlace': opts['deInterlace'],
        'requireNonAnamorphic': opts['requireNonAnamorphic'],
        'transcodingMaxAudioChannels': opts['transcodingMaxAudioChannels'],
        'cpuCoreLimit': opts['cpuCoreLimit'],
        'liveStreamId': opts['liveStreamId'],
        'enableMpegtsM2TsMode': opts['enableMpegtsM2TsMode'],
        'videoCodec': opts['videoCodec'],
        'subtitleCodec': opts['subtitleCodec'],
        'transcodeReasons': opts['transcodeReasons'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'videoStreamIndex': opts['videoStreamIndex'],
        'context': opts['context'],
        'streamOptions': opts['streamOptions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/x-mpegURL'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Videos/{itemId}/main.m3u8', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headMasterHlsAudioPlaylist operation.
     * @callback module:api/DynamicHlsApi~headMasterHlsAudioPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an audio hls playlist stream.
     * @param {String} itemId The item id.
     * @param {String} mediaSourceId The media version id, if playing an alternate version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
     * @param {String} [params] The streaming parameters.
     * @param {String} [tag] The tag.
     * @param {String} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {String} [playSessionId] The play session id.
     * @param {String} [segmentContainer] The segment container.
     * @param {Number} [segmentLength] The segment length.
     * @param {Number} [minSegments] The minimum number of segments.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
     * @param {Boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {Boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
     * @param {Boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Number} [maxStreamingBitrate] Optional. The maximum streaming bitrate.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
     * @param {Number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
     * @param {String} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
     * @param {String} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
     * @param {Number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {Number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {Number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {Number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {Number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {module:model/SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {Number} [maxRefFrames] Optional.
     * @param {Number} [maxVideoBitDepth] Optional. The maximum video bit depth.
     * @param {Boolean} [requireAvc] Optional. Whether to require avc.
     * @param {Boolean} [deInterlace] Optional. Whether to deinterlace the video.
     * @param {Boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
     * @param {Number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
     * @param {Number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
     * @param {String} [liveStreamId] The live stream id.
     * @param {Boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
     * @param {String} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
     * @param {String} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
     * @param {String} [transcodeReasons] Optional. The transcoding reason.
     * @param {Number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {Number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {module:model/EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
     * @param {Object.<String, {String: String}>} [streamOptions] Optional. The streaming options.
     * @param {Boolean} [enableAdaptiveBitrateStreaming = true)] Enable adaptive bitrate streaming.
     * @param {module:api/DynamicHlsApi~headMasterHlsAudioPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headMasterHlsAudioPlaylist(itemId, mediaSourceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling headMasterHlsAudioPlaylist");
      }
      // verify the required parameter 'mediaSourceId' is set
      if (mediaSourceId === undefined || mediaSourceId === null) {
        throw new Error("Missing the required parameter 'mediaSourceId' when calling headMasterHlsAudioPlaylist");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'static': opts['_static'],
        'params': opts['params'],
        'tag': opts['tag'],
        'deviceProfileId': opts['deviceProfileId'],
        'playSessionId': opts['playSessionId'],
        'segmentContainer': opts['segmentContainer'],
        'segmentLength': opts['segmentLength'],
        'minSegments': opts['minSegments'],
        'mediaSourceId': mediaSourceId,
        'deviceId': opts['deviceId'],
        'audioCodec': opts['audioCodec'],
        'enableAutoStreamCopy': opts['enableAutoStreamCopy'],
        'allowVideoStreamCopy': opts['allowVideoStreamCopy'],
        'allowAudioStreamCopy': opts['allowAudioStreamCopy'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'audioSampleRate': opts['audioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'maxStreamingBitrate': opts['maxStreamingBitrate'],
        'audioBitRate': opts['audioBitRate'],
        'audioChannels': opts['audioChannels'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'profile': opts['profile'],
        'level': opts['level'],
        'framerate': opts['framerate'],
        'maxFramerate': opts['maxFramerate'],
        'copyTimestamps': opts['copyTimestamps'],
        'startTimeTicks': opts['startTimeTicks'],
        'width': opts['width'],
        'height': opts['height'],
        'videoBitRate': opts['videoBitRate'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'subtitleMethod': opts['subtitleMethod'],
        'maxRefFrames': opts['maxRefFrames'],
        'maxVideoBitDepth': opts['maxVideoBitDepth'],
        'requireAvc': opts['requireAvc'],
        'deInterlace': opts['deInterlace'],
        'requireNonAnamorphic': opts['requireNonAnamorphic'],
        'transcodingMaxAudioChannels': opts['transcodingMaxAudioChannels'],
        'cpuCoreLimit': opts['cpuCoreLimit'],
        'liveStreamId': opts['liveStreamId'],
        'enableMpegtsM2TsMode': opts['enableMpegtsM2TsMode'],
        'videoCodec': opts['videoCodec'],
        'subtitleCodec': opts['subtitleCodec'],
        'transcodeReasons': opts['transcodeReasons'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'videoStreamIndex': opts['videoStreamIndex'],
        'context': opts['context'],
        'streamOptions': opts['streamOptions'],
        'enableAdaptiveBitrateStreaming': opts['enableAdaptiveBitrateStreaming']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/x-mpegURL'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Audio/{itemId}/master.m3u8', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the headMasterHlsVideoPlaylist operation.
     * @callback module:api/DynamicHlsApi~headMasterHlsVideoPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a video hls playlist stream.
     * @param {String} itemId The item id.
     * @param {String} mediaSourceId The media version id, if playing an alternate version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [_static] Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
     * @param {String} [params] The streaming parameters.
     * @param {String} [tag] The tag.
     * @param {String} [deviceProfileId] Optional. The dlna device profile id to utilize.
     * @param {String} [playSessionId] The play session id.
     * @param {String} [segmentContainer] The segment container.
     * @param {Number} [segmentLength] The segment length.
     * @param {Number} [minSegments] The minimum number of segments.
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [audioCodec] Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.
     * @param {Boolean} [enableAutoStreamCopy] Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
     * @param {Boolean} [allowVideoStreamCopy] Whether or not to allow copying of the video stream url.
     * @param {Boolean} [allowAudioStreamCopy] Whether or not to allow copying of the audio stream url.
     * @param {Boolean} [breakOnNonKeyFrames] Optional. Whether to break on non key frames.
     * @param {Number} [audioSampleRate] Optional. Specify a specific audio sample rate, e.g. 44100.
     * @param {Number} [maxAudioBitDepth] Optional. The maximum audio bit depth.
     * @param {Number} [audioBitRate] Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
     * @param {Number} [audioChannels] Optional. Specify a specific number of audio channels to encode to, e.g. 2.
     * @param {Number} [maxAudioChannels] Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
     * @param {String} [profile] Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
     * @param {String} [level] Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
     * @param {Number} [framerate] Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Number} [maxFramerate] Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
     * @param {Boolean} [copyTimestamps] Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
     * @param {Number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.
     * @param {Number} [width] Optional. The fixed horizontal resolution of the encoded video.
     * @param {Number} [height] Optional. The fixed vertical resolution of the encoded video.
     * @param {Number} [videoBitRate] Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
     * @param {Number} [subtitleStreamIndex] Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
     * @param {module:model/SubtitleDeliveryMethod} [subtitleMethod] Optional. Specify the subtitle delivery method.
     * @param {Number} [maxRefFrames] Optional.
     * @param {Number} [maxVideoBitDepth] Optional. The maximum video bit depth.
     * @param {Boolean} [requireAvc] Optional. Whether to require avc.
     * @param {Boolean} [deInterlace] Optional. Whether to deinterlace the video.
     * @param {Boolean} [requireNonAnamorphic] Optional. Whether to require a non anamorphic stream.
     * @param {Number} [transcodingMaxAudioChannels] Optional. The maximum number of audio channels to transcode.
     * @param {Number} [cpuCoreLimit] Optional. The limit of how many cpu cores to use.
     * @param {String} [liveStreamId] The live stream id.
     * @param {Boolean} [enableMpegtsM2TsMode] Optional. Whether to enable the MpegtsM2Ts mode.
     * @param {String} [videoCodec] Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.
     * @param {String} [subtitleCodec] Optional. Specify a subtitle codec to encode to.
     * @param {String} [transcodeReasons] Optional. The transcoding reason.
     * @param {Number} [audioStreamIndex] Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
     * @param {Number} [videoStreamIndex] Optional. The index of the video stream to use. If omitted the first video stream will be used.
     * @param {module:model/EncodingContext} [context] Optional. The MediaBrowser.Model.Dlna.EncodingContext.
     * @param {Object.<String, {String: String}>} [streamOptions] Optional. The streaming options.
     * @param {Boolean} [enableAdaptiveBitrateStreaming = true)] Enable adaptive bitrate streaming.
     * @param {module:api/DynamicHlsApi~headMasterHlsVideoPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    headMasterHlsVideoPlaylist(itemId, mediaSourceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling headMasterHlsVideoPlaylist");
      }
      // verify the required parameter 'mediaSourceId' is set
      if (mediaSourceId === undefined || mediaSourceId === null) {
        throw new Error("Missing the required parameter 'mediaSourceId' when calling headMasterHlsVideoPlaylist");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'static': opts['_static'],
        'params': opts['params'],
        'tag': opts['tag'],
        'deviceProfileId': opts['deviceProfileId'],
        'playSessionId': opts['playSessionId'],
        'segmentContainer': opts['segmentContainer'],
        'segmentLength': opts['segmentLength'],
        'minSegments': opts['minSegments'],
        'mediaSourceId': mediaSourceId,
        'deviceId': opts['deviceId'],
        'audioCodec': opts['audioCodec'],
        'enableAutoStreamCopy': opts['enableAutoStreamCopy'],
        'allowVideoStreamCopy': opts['allowVideoStreamCopy'],
        'allowAudioStreamCopy': opts['allowAudioStreamCopy'],
        'breakOnNonKeyFrames': opts['breakOnNonKeyFrames'],
        'audioSampleRate': opts['audioSampleRate'],
        'maxAudioBitDepth': opts['maxAudioBitDepth'],
        'audioBitRate': opts['audioBitRate'],
        'audioChannels': opts['audioChannels'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'profile': opts['profile'],
        'level': opts['level'],
        'framerate': opts['framerate'],
        'maxFramerate': opts['maxFramerate'],
        'copyTimestamps': opts['copyTimestamps'],
        'startTimeTicks': opts['startTimeTicks'],
        'width': opts['width'],
        'height': opts['height'],
        'videoBitRate': opts['videoBitRate'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'subtitleMethod': opts['subtitleMethod'],
        'maxRefFrames': opts['maxRefFrames'],
        'maxVideoBitDepth': opts['maxVideoBitDepth'],
        'requireAvc': opts['requireAvc'],
        'deInterlace': opts['deInterlace'],
        'requireNonAnamorphic': opts['requireNonAnamorphic'],
        'transcodingMaxAudioChannels': opts['transcodingMaxAudioChannels'],
        'cpuCoreLimit': opts['cpuCoreLimit'],
        'liveStreamId': opts['liveStreamId'],
        'enableMpegtsM2TsMode': opts['enableMpegtsM2TsMode'],
        'videoCodec': opts['videoCodec'],
        'subtitleCodec': opts['subtitleCodec'],
        'transcodeReasons': opts['transcodeReasons'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'videoStreamIndex': opts['videoStreamIndex'],
        'context': opts['context'],
        'streamOptions': opts['streamOptions'],
        'enableAdaptiveBitrateStreaming': opts['enableAdaptiveBitrateStreaming']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/x-mpegURL'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Videos/{itemId}/master.m3u8', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
