/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceInfo from '../model/DeviceInfo';
import DeviceInfoQueryResult from '../model/DeviceInfoQueryResult';
import DeviceOptions from '../model/DeviceOptions';
import ProblemDetails from '../model/ProblemDetails';

/**
* Devices service.
* @module api/DevicesApi
* @version v1
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDevice operation.
     * @callback module:api/DevicesApi~deleteDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a device.
     * @param {String} id Device Id.
     * @param {module:api/DevicesApi~deleteDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDevice(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDevice");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Devices', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceInfo operation.
     * @callback module:api/DevicesApi~getDeviceInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get info for a device.
     * @param {String} id Device Id.
     * @param {module:api/DevicesApi~getDeviceInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInfo}
     */
    getDeviceInfo(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeviceInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = DeviceInfo;
      return this.apiClient.callApi(
        '/Devices/Info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceOptions operation.
     * @callback module:api/DevicesApi~getDeviceOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get options for a device.
     * @param {String} id Device Id.
     * @param {module:api/DevicesApi~getDeviceOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceOptions}
     */
    getDeviceOptions(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeviceOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = DeviceOptions;
      return this.apiClient.callApi(
        '/Devices/Options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevices operation.
     * @callback module:api/DevicesApi~getDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInfoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Devices.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [supportsSync] Gets or sets a value indicating whether [supports synchronize].
     * @param {String} [userId] Gets or sets the user identifier.
     * @param {module:api/DevicesApi~getDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInfoQueryResult}
     */
    getDevices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'supportsSync': opts['supportsSync'],
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = DeviceInfoQueryResult;
      return this.apiClient.callApi(
        '/Devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceOptions operation.
     * @callback module:api/DevicesApi~updateDeviceOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update device options.
     * @param {String} id Device Id.
     * @param {module:model/DeviceOptions} deviceOptions Device Options.
     * @param {module:api/DevicesApi~updateDeviceOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDeviceOptions(id, deviceOptions, callback) {
      let postBody = deviceOptions;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDeviceOptions");
      }
      // verify the required parameter 'deviceOptions' is set
      if (deviceOptions === undefined || deviceOptions === null) {
        throw new Error("Missing the required parameter 'deviceOptions' when calling updateDeviceOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Devices/Options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
