/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import TaskInfo from '../model/TaskInfo';
import TaskTriggerInfo from '../model/TaskTriggerInfo';

/**
* ScheduledTasks service.
* @module api/ScheduledTasksApi
* @version v1
*/
export default class ScheduledTasksApi {

    /**
    * Constructs a new ScheduledTasksApi. 
    * @alias module:api/ScheduledTasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getTask operation.
     * @callback module:api/ScheduledTasksApi~getTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get task by id.
     * @param {String} taskId Task Id.
     * @param {module:api/ScheduledTasksApi~getTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskInfo}
     */
    getTask(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getTask");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = TaskInfo;
      return this.apiClient.callApi(
        '/ScheduledTasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasks operation.
     * @callback module:api/ScheduledTasksApi~getTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaskInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tasks.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isHidden] Optional filter tasks that are hidden, or not.
     * @param {Boolean} [isEnabled] Optional filter tasks that are enabled, or not.
     * @param {module:api/ScheduledTasksApi~getTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaskInfo>}
     */
    getTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isHidden': opts['isHidden'],
        'isEnabled': opts['isEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [TaskInfo];
      return this.apiClient.callApi(
        '/ScheduledTasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTask operation.
     * @callback module:api/ScheduledTasksApi~startTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start specified task.
     * @param {String} taskId Task Id.
     * @param {module:api/ScheduledTasksApi~startTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startTask(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling startTask");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ScheduledTasks/Running/{taskId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopTask operation.
     * @callback module:api/ScheduledTasksApi~stopTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop specified task.
     * @param {String} taskId Task Id.
     * @param {module:api/ScheduledTasksApi~stopTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopTask(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling stopTask");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ScheduledTasks/Running/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTask operation.
     * @callback module:api/ScheduledTasksApi~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update specified task triggers.
     * @param {String} taskId Task Id.
     * @param {Array.<module:model/TaskTriggerInfo>} taskTriggerInfo Triggers.
     * @param {module:api/ScheduledTasksApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTask(taskId, taskTriggerInfo, callback) {
      let postBody = taskTriggerInfo;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateTask");
      }
      // verify the required parameter 'taskTriggerInfo' is set
      if (taskTriggerInfo === undefined || taskTriggerInfo === null) {
        throw new Error("Missing the required parameter 'taskTriggerInfo' when calling updateTask");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ScheduledTasks/{taskId}/Triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
