/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LiveStreamResponse from '../model/LiveStreamResponse';
import OpenLiveStreamDto from '../model/OpenLiveStreamDto';
import PlaybackInfoDto from '../model/PlaybackInfoDto';
import PlaybackInfoResponse from '../model/PlaybackInfoResponse';
import ProblemDetails from '../model/ProblemDetails';

/**
* MediaInfo service.
* @module api/MediaInfoApi
* @version v1
*/
export default class MediaInfoApi {

    /**
    * Constructs a new MediaInfoApi. 
    * @alias module:api/MediaInfoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the closeLiveStream operation.
     * @callback module:api/MediaInfoApi~closeLiveStreamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Closes a media source.
     * @param {String} liveStreamId The livestream id.
     * @param {module:api/MediaInfoApi~closeLiveStreamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    closeLiveStream(liveStreamId, callback) {
      let postBody = null;
      // verify the required parameter 'liveStreamId' is set
      if (liveStreamId === undefined || liveStreamId === null) {
        throw new Error("Missing the required parameter 'liveStreamId' when calling closeLiveStream");
      }

      let pathParams = {
      };
      let queryParams = {
        'liveStreamId': liveStreamId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/LiveStreams/Close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBitrateTestBytes operation.
     * @callback module:api/MediaInfoApi~getBitrateTestBytesCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests the network with a request with the size of the bitrate.
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 102400)] The bitrate. Defaults to 102400.
     * @param {module:api/MediaInfoApi~getBitrateTestBytesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getBitrateTestBytes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Playback/BitrateTest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaybackInfo operation.
     * @callback module:api/MediaInfoApi~getPlaybackInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaybackInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets live playback media info for an item.
     * @param {String} itemId The item id.
     * @param {String} userId The user id.
     * @param {module:api/MediaInfoApi~getPlaybackInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaybackInfoResponse}
     */
    getPlaybackInfo(itemId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getPlaybackInfo");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPlaybackInfo");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = PlaybackInfoResponse;
      return this.apiClient.callApi(
        '/Items/{itemId}/PlaybackInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPostedPlaybackInfo operation.
     * @callback module:api/MediaInfoApi~getPostedPlaybackInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaybackInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets live playback media info for an item.
     * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] The user id.
     * @param {Number} [maxStreamingBitrate] The maximum streaming bitrate.
     * @param {Number} [startTimeTicks] The start time in ticks.
     * @param {Number} [audioStreamIndex] The audio stream index.
     * @param {Number} [subtitleStreamIndex] The subtitle stream index.
     * @param {Number} [maxAudioChannels] The maximum number of audio channels.
     * @param {String} [mediaSourceId] The media source id.
     * @param {String} [liveStreamId] The livestream id.
     * @param {Boolean} [autoOpenLiveStream] Whether to auto open the livestream.
     * @param {Boolean} [enableDirectPlay] Whether to enable direct play. Default: true.
     * @param {Boolean} [enableDirectStream] Whether to enable direct stream. Default: true.
     * @param {Boolean} [enableTranscoding] Whether to enable transcoding. Default: true.
     * @param {Boolean} [allowVideoStreamCopy] Whether to allow to copy the video stream. Default: true.
     * @param {Boolean} [allowAudioStreamCopy] Whether to allow to copy the audio stream. Default: true.
     * @param {module:model/PlaybackInfoDto} [playbackInfoDto] The playback info.
     * @param {module:api/MediaInfoApi~getPostedPlaybackInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaybackInfoResponse}
     */
    getPostedPlaybackInfo(itemId, opts, callback) {
      opts = opts || {};
      let postBody = opts['playbackInfoDto'];
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getPostedPlaybackInfo");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'userId': opts['userId'],
        'maxStreamingBitrate': opts['maxStreamingBitrate'],
        'startTimeTicks': opts['startTimeTicks'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'mediaSourceId': opts['mediaSourceId'],
        'liveStreamId': opts['liveStreamId'],
        'autoOpenLiveStream': opts['autoOpenLiveStream'],
        'enableDirectPlay': opts['enableDirectPlay'],
        'enableDirectStream': opts['enableDirectStream'],
        'enableTranscoding': opts['enableTranscoding'],
        'allowVideoStreamCopy': opts['allowVideoStreamCopy'],
        'allowAudioStreamCopy': opts['allowAudioStreamCopy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = PlaybackInfoResponse;
      return this.apiClient.callApi(
        '/Items/{itemId}/PlaybackInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the openLiveStream operation.
     * @callback module:api/MediaInfoApi~openLiveStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Opens a media source.
     * @param {Object} opts Optional parameters
     * @param {String} [openToken] The open token.
     * @param {String} [userId] The user id.
     * @param {String} [playSessionId] The play session id.
     * @param {Number} [maxStreamingBitrate] The maximum streaming bitrate.
     * @param {Number} [startTimeTicks] The start time in ticks.
     * @param {Number} [audioStreamIndex] The audio stream index.
     * @param {Number} [subtitleStreamIndex] The subtitle stream index.
     * @param {Number} [maxAudioChannels] The maximum number of audio channels.
     * @param {String} [itemId] The item id.
     * @param {Boolean} [enableDirectPlay] Whether to enable direct play. Default: true.
     * @param {Boolean} [enableDirectStream] Whether to enable direct stream. Default: true.
     * @param {module:model/OpenLiveStreamDto} [openLiveStreamDto] The open live stream dto.
     * @param {module:api/MediaInfoApi~openLiveStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStreamResponse}
     */
    openLiveStream(opts, callback) {
      opts = opts || {};
      let postBody = opts['openLiveStreamDto'];

      let pathParams = {
      };
      let queryParams = {
        'openToken': opts['openToken'],
        'userId': opts['userId'],
        'playSessionId': opts['playSessionId'],
        'maxStreamingBitrate': opts['maxStreamingBitrate'],
        'startTimeTicks': opts['startTimeTicks'],
        'audioStreamIndex': opts['audioStreamIndex'],
        'subtitleStreamIndex': opts['subtitleStreamIndex'],
        'maxAudioChannels': opts['maxAudioChannels'],
        'itemId': opts['itemId'],
        'enableDirectPlay': opts['enableDirectPlay'],
        'enableDirectStream': opts['enableDirectStream']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = LiveStreamResponse;
      return this.apiClient.callApi(
        '/LiveStreams/Open', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
