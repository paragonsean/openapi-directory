/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ImageType from '../model/ImageType';
import ItemFields from '../model/ItemFields';
import ProblemDetails from '../model/ProblemDetails';

/**
* TvShows service.
* @module api/TvShowsApi
* @version v1
*/
export default class TvShowsApi {

    /**
    * Constructs a new TvShowsApi. 
    * @alias module:api/TvShowsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEpisodes operation.
     * @callback module:api/TvShowsApi~getEpisodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets episodes for a tv season.
     * @param {String} seriesId The series id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] The user id.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
     * @param {Number} [season] Optional filter by season number.
     * @param {String} [seasonId] Optional. Filter by season id.
     * @param {Boolean} [isMissing] Optional. Filter by items that are missing episodes or not.
     * @param {String} [adjacentTo] Optional. Return items that are siblings of a supplied item.
     * @param {String} [startItemId] Optional. Skip through the list until a given item is found.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Boolean} [enableImages] Optional, include image information in output.
     * @param {Number} [imageTypeLimit] Optional, the max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {String} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
     * @param {module:api/TvShowsApi~getEpisodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getEpisodes(seriesId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'seriesId' is set
      if (seriesId === undefined || seriesId === null) {
        throw new Error("Missing the required parameter 'seriesId' when calling getEpisodes");
      }

      let pathParams = {
        'seriesId': seriesId
      };
      let queryParams = {
        'userId': opts['userId'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'season': opts['season'],
        'seasonId': opts['seasonId'],
        'isMissing': opts['isMissing'],
        'adjacentTo': opts['adjacentTo'],
        'startItemId': opts['startItemId'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'enableImages': opts['enableImages'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'enableUserData': opts['enableUserData'],
        'sortBy': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Shows/{seriesId}/Episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNextUp operation.
     * @callback module:api/TvShowsApi~getNextUpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of next up episodes.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] The user id of the user to get the next up episodes for.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {String} [seriesId] Optional. Filter by series id.
     * @param {String} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
     * @param {Boolean} [enableImges] Optional. Include image information in output.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Boolean} [enableTotalRecordCount = true)] Whether to enable the total records count. Defaults to true.
     * @param {module:api/TvShowsApi~getNextUpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getNextUp(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'seriesId': opts['seriesId'],
        'parentId': opts['parentId'],
        'enableImges': opts['enableImges'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'enableUserData': opts['enableUserData'],
        'enableTotalRecordCount': opts['enableTotalRecordCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Shows/NextUp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeasons operation.
     * @callback module:api/TvShowsApi~getSeasonsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets seasons for a tv series.
     * @param {String} seriesId The series id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] The user id.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
     * @param {Boolean} [isSpecialSeason] Optional. Filter by special season.
     * @param {Boolean} [isMissing] Optional. Filter by items that are missing episodes or not.
     * @param {String} [adjacentTo] Optional. Return items that are siblings of a supplied item.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {module:api/TvShowsApi~getSeasonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getSeasons(seriesId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'seriesId' is set
      if (seriesId === undefined || seriesId === null) {
        throw new Error("Missing the required parameter 'seriesId' when calling getSeasons");
      }

      let pathParams = {
        'seriesId': seriesId
      };
      let queryParams = {
        'userId': opts['userId'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'isSpecialSeason': opts['isSpecialSeason'],
        'isMissing': opts['isMissing'],
        'adjacentTo': opts['adjacentTo'],
        'enableImages': opts['enableImages'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'enableUserData': opts['enableUserData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Shows/{seriesId}/Seasons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpcomingEpisodes operation.
     * @callback module:api/TvShowsApi~getUpcomingEpisodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of upcoming episodes.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] The user id of the user to get the upcoming episodes for.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {String} [parentId] Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.
     * @param {Boolean} [enableImges] Optional. Include image information in output.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {module:api/TvShowsApi~getUpcomingEpisodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getUpcomingEpisodes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'parentId': opts['parentId'],
        'enableImges': opts['enableImges'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'enableUserData': opts['enableUserData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Shows/Upcoming', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
