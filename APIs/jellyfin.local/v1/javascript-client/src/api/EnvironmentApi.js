/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultDirectoryBrowserInfoDto from '../model/DefaultDirectoryBrowserInfoDto';
import FileSystemEntryInfo from '../model/FileSystemEntryInfo';
import ProblemDetails from '../model/ProblemDetails';
import ValidatePathDto from '../model/ValidatePathDto';

/**
* Environment service.
* @module api/EnvironmentApi
* @version v1
*/
export default class EnvironmentApi {

    /**
    * Constructs a new EnvironmentApi. 
    * @alias module:api/EnvironmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDefaultDirectoryBrowser operation.
     * @callback module:api/EnvironmentApi~getDefaultDirectoryBrowserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultDirectoryBrowserInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Default directory browser.
     * @param {module:api/EnvironmentApi~getDefaultDirectoryBrowserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultDirectoryBrowserInfoDto}
     */
    getDefaultDirectoryBrowser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = DefaultDirectoryBrowserInfoDto;
      return this.apiClient.callApi(
        '/Environment/DefaultDirectoryBrowser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDirectoryContents operation.
     * @callback module:api/EnvironmentApi~getDirectoryContentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileSystemEntryInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the contents of a given directory in the file system.
     * @param {String} path The path.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeFiles = false)] An optional filter to include or exclude files from the results. true/false.
     * @param {Boolean} [includeDirectories = false)] An optional filter to include or exclude folders from the results. true/false.
     * @param {module:api/EnvironmentApi~getDirectoryContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileSystemEntryInfo>}
     */
    getDirectoryContents(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getDirectoryContents");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'includeFiles': opts['includeFiles'],
        'includeDirectories': opts['includeDirectories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [FileSystemEntryInfo];
      return this.apiClient.callApi(
        '/Environment/DirectoryContents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDrives operation.
     * @callback module:api/EnvironmentApi~getDrivesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileSystemEntryInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available drives from the server's file system.
     * @param {module:api/EnvironmentApi~getDrivesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileSystemEntryInfo>}
     */
    getDrives(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [FileSystemEntryInfo];
      return this.apiClient.callApi(
        '/Environment/Drives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkShares operation.
     * @callback module:api/EnvironmentApi~getNetworkSharesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileSystemEntryInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets network paths.
     * @param {module:api/EnvironmentApi~getNetworkSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileSystemEntryInfo>}
     */
    getNetworkShares(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [FileSystemEntryInfo];
      return this.apiClient.callApi(
        '/Environment/NetworkShares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParentPath operation.
     * @callback module:api/EnvironmentApi~getParentPathCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the parent path of a given path.
     * @param {String} path The path.
     * @param {module:api/EnvironmentApi~getParentPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getParentPath(path, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getParentPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Environment/ParentPath', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatePath operation.
     * @callback module:api/EnvironmentApi~validatePathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates path.
     * @param {module:model/ValidatePathDto} validatePathDto Validate request object.
     * @param {module:api/EnvironmentApi~validatePathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validatePath(validatePathDto, callback) {
      let postBody = validatePathDto;
      // verify the required parameter 'validatePathDto' is set
      if (validatePathDto === undefined || validatePathDto === null) {
        throw new Error("Missing the required parameter 'validatePathDto' when calling validatePath");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Environment/ValidatePath', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
