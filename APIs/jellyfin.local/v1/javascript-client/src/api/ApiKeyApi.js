/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthenticationInfoQueryResult from '../model/AuthenticationInfoQueryResult';

/**
* ApiKey service.
* @module api/ApiKeyApi
* @version v1
*/
export default class ApiKeyApi {

    /**
    * Constructs a new ApiKeyApi. 
    * @alias module:api/ApiKeyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createKey operation.
     * @callback module:api/ApiKeyApi~createKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new api key.
     * @param {String} app Name of the app using the authentication key.
     * @param {module:api/ApiKeyApi~createKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createKey(app, callback) {
      let postBody = null;
      // verify the required parameter 'app' is set
      if (app === undefined || app === null) {
        throw new Error("Missing the required parameter 'app' when calling createKey");
      }

      let pathParams = {
      };
      let queryParams = {
        'app': app
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Auth/Keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeys operation.
     * @callback module:api/ApiKeyApi~getKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationInfoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all keys.
     * @param {module:api/ApiKeyApi~getKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationInfoQueryResult}
     */
    getKeys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = AuthenticationInfoQueryResult;
      return this.apiClient.callApi(
        '/Auth/Keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeKey operation.
     * @callback module:api/ApiKeyApi~revokeKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an api key.
     * @param {String} key The access token to delete.
     * @param {module:api/ApiKeyApi~revokeKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling revokeKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Auth/Keys/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
