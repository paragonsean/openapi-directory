/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlbumInfoRemoteSearchQuery from '../model/AlbumInfoRemoteSearchQuery';
import ArtistInfoRemoteSearchQuery from '../model/ArtistInfoRemoteSearchQuery';
import BookInfoRemoteSearchQuery from '../model/BookInfoRemoteSearchQuery';
import BoxSetInfoRemoteSearchQuery from '../model/BoxSetInfoRemoteSearchQuery';
import ExternalIdInfo from '../model/ExternalIdInfo';
import MovieInfoRemoteSearchQuery from '../model/MovieInfoRemoteSearchQuery';
import MusicVideoInfoRemoteSearchQuery from '../model/MusicVideoInfoRemoteSearchQuery';
import PersonLookupInfoRemoteSearchQuery from '../model/PersonLookupInfoRemoteSearchQuery';
import ProblemDetails from '../model/ProblemDetails';
import RemoteSearchResult from '../model/RemoteSearchResult';
import SeriesInfoRemoteSearchQuery from '../model/SeriesInfoRemoteSearchQuery';
import TrailerInfoRemoteSearchQuery from '../model/TrailerInfoRemoteSearchQuery';

/**
* ItemLookup service.
* @module api/ItemLookupApi
* @version v1
*/
export default class ItemLookupApi {

    /**
    * Constructs a new ItemLookupApi. 
    * @alias module:api/ItemLookupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applySearchCriteria operation.
     * @callback module:api/ItemLookupApi~applySearchCriteriaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies search criteria to an item and refreshes metadata.
     * @param {String} itemId Item id.
     * @param {module:model/RemoteSearchResult} remoteSearchResult The remote search result.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [replaceAllImages = true)] Optional. Whether or not to replace all images. Default: True.
     * @param {module:api/ItemLookupApi~applySearchCriteriaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applySearchCriteria(itemId, remoteSearchResult, opts, callback) {
      opts = opts || {};
      let postBody = remoteSearchResult;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling applySearchCriteria");
      }
      // verify the required parameter 'remoteSearchResult' is set
      if (remoteSearchResult === undefined || remoteSearchResult === null) {
        throw new Error("Missing the required parameter 'remoteSearchResult' when calling applySearchCriteria");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'replaceAllImages': opts['replaceAllImages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/RemoteSearch/Apply/{itemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBookRemoteSearchResults operation.
     * @callback module:api/ItemLookupApi~getBookRemoteSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get book remote search.
     * @param {module:model/BookInfoRemoteSearchQuery} bookInfoRemoteSearchQuery Remote search query.
     * @param {module:api/ItemLookupApi~getBookRemoteSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSearchResult>}
     */
    getBookRemoteSearchResults(bookInfoRemoteSearchQuery, callback) {
      let postBody = bookInfoRemoteSearchQuery;
      // verify the required parameter 'bookInfoRemoteSearchQuery' is set
      if (bookInfoRemoteSearchQuery === undefined || bookInfoRemoteSearchQuery === null) {
        throw new Error("Missing the required parameter 'bookInfoRemoteSearchQuery' when calling getBookRemoteSearchResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSearchResult];
      return this.apiClient.callApi(
        '/Items/RemoteSearch/Book', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoxSetRemoteSearchResults operation.
     * @callback module:api/ItemLookupApi~getBoxSetRemoteSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get box set remote search.
     * @param {module:model/BoxSetInfoRemoteSearchQuery} boxSetInfoRemoteSearchQuery Remote search query.
     * @param {module:api/ItemLookupApi~getBoxSetRemoteSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSearchResult>}
     */
    getBoxSetRemoteSearchResults(boxSetInfoRemoteSearchQuery, callback) {
      let postBody = boxSetInfoRemoteSearchQuery;
      // verify the required parameter 'boxSetInfoRemoteSearchQuery' is set
      if (boxSetInfoRemoteSearchQuery === undefined || boxSetInfoRemoteSearchQuery === null) {
        throw new Error("Missing the required parameter 'boxSetInfoRemoteSearchQuery' when calling getBoxSetRemoteSearchResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSearchResult];
      return this.apiClient.callApi(
        '/Items/RemoteSearch/BoxSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExternalIdInfos operation.
     * @callback module:api/ItemLookupApi~getExternalIdInfosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExternalIdInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the item's external id info.
     * @param {String} itemId Item id.
     * @param {module:api/ItemLookupApi~getExternalIdInfosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExternalIdInfo>}
     */
    getExternalIdInfos(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getExternalIdInfos");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [ExternalIdInfo];
      return this.apiClient.callApi(
        '/Items/{itemId}/ExternalIdInfos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMovieRemoteSearchResults operation.
     * @callback module:api/ItemLookupApi~getMovieRemoteSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get movie remote search.
     * @param {module:model/MovieInfoRemoteSearchQuery} movieInfoRemoteSearchQuery Remote search query.
     * @param {module:api/ItemLookupApi~getMovieRemoteSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSearchResult>}
     */
    getMovieRemoteSearchResults(movieInfoRemoteSearchQuery, callback) {
      let postBody = movieInfoRemoteSearchQuery;
      // verify the required parameter 'movieInfoRemoteSearchQuery' is set
      if (movieInfoRemoteSearchQuery === undefined || movieInfoRemoteSearchQuery === null) {
        throw new Error("Missing the required parameter 'movieInfoRemoteSearchQuery' when calling getMovieRemoteSearchResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSearchResult];
      return this.apiClient.callApi(
        '/Items/RemoteSearch/Movie', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicAlbumRemoteSearchResults operation.
     * @callback module:api/ItemLookupApi~getMusicAlbumRemoteSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get music album remote search.
     * @param {module:model/AlbumInfoRemoteSearchQuery} albumInfoRemoteSearchQuery Remote search query.
     * @param {module:api/ItemLookupApi~getMusicAlbumRemoteSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSearchResult>}
     */
    getMusicAlbumRemoteSearchResults(albumInfoRemoteSearchQuery, callback) {
      let postBody = albumInfoRemoteSearchQuery;
      // verify the required parameter 'albumInfoRemoteSearchQuery' is set
      if (albumInfoRemoteSearchQuery === undefined || albumInfoRemoteSearchQuery === null) {
        throw new Error("Missing the required parameter 'albumInfoRemoteSearchQuery' when calling getMusicAlbumRemoteSearchResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSearchResult];
      return this.apiClient.callApi(
        '/Items/RemoteSearch/MusicAlbum', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicArtistRemoteSearchResults operation.
     * @callback module:api/ItemLookupApi~getMusicArtistRemoteSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get music artist remote search.
     * @param {module:model/ArtistInfoRemoteSearchQuery} artistInfoRemoteSearchQuery Remote search query.
     * @param {module:api/ItemLookupApi~getMusicArtistRemoteSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSearchResult>}
     */
    getMusicArtistRemoteSearchResults(artistInfoRemoteSearchQuery, callback) {
      let postBody = artistInfoRemoteSearchQuery;
      // verify the required parameter 'artistInfoRemoteSearchQuery' is set
      if (artistInfoRemoteSearchQuery === undefined || artistInfoRemoteSearchQuery === null) {
        throw new Error("Missing the required parameter 'artistInfoRemoteSearchQuery' when calling getMusicArtistRemoteSearchResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSearchResult];
      return this.apiClient.callApi(
        '/Items/RemoteSearch/MusicArtist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicVideoRemoteSearchResults operation.
     * @callback module:api/ItemLookupApi~getMusicVideoRemoteSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get music video remote search.
     * @param {module:model/MusicVideoInfoRemoteSearchQuery} musicVideoInfoRemoteSearchQuery Remote search query.
     * @param {module:api/ItemLookupApi~getMusicVideoRemoteSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSearchResult>}
     */
    getMusicVideoRemoteSearchResults(musicVideoInfoRemoteSearchQuery, callback) {
      let postBody = musicVideoInfoRemoteSearchQuery;
      // verify the required parameter 'musicVideoInfoRemoteSearchQuery' is set
      if (musicVideoInfoRemoteSearchQuery === undefined || musicVideoInfoRemoteSearchQuery === null) {
        throw new Error("Missing the required parameter 'musicVideoInfoRemoteSearchQuery' when calling getMusicVideoRemoteSearchResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSearchResult];
      return this.apiClient.callApi(
        '/Items/RemoteSearch/MusicVideo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonRemoteSearchResults operation.
     * @callback module:api/ItemLookupApi~getPersonRemoteSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get person remote search.
     * @param {module:model/PersonLookupInfoRemoteSearchQuery} personLookupInfoRemoteSearchQuery Remote search query.
     * @param {module:api/ItemLookupApi~getPersonRemoteSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSearchResult>}
     */
    getPersonRemoteSearchResults(personLookupInfoRemoteSearchQuery, callback) {
      let postBody = personLookupInfoRemoteSearchQuery;
      // verify the required parameter 'personLookupInfoRemoteSearchQuery' is set
      if (personLookupInfoRemoteSearchQuery === undefined || personLookupInfoRemoteSearchQuery === null) {
        throw new Error("Missing the required parameter 'personLookupInfoRemoteSearchQuery' when calling getPersonRemoteSearchResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSearchResult];
      return this.apiClient.callApi(
        '/Items/RemoteSearch/Person', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteSearchImage operation.
     * @callback module:api/ItemLookupApi~getRemoteSearchImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a remote image.
     * @param {String} imageUrl The image url.
     * @param {String} providerName The provider name.
     * @param {module:api/ItemLookupApi~getRemoteSearchImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getRemoteSearchImage(imageUrl, providerName, callback) {
      let postBody = null;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling getRemoteSearchImage");
      }
      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling getRemoteSearchImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'imageUrl': imageUrl,
        'providerName': providerName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['image/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Items/RemoteSearch/Image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeriesRemoteSearchResults operation.
     * @callback module:api/ItemLookupApi~getSeriesRemoteSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get series remote search.
     * @param {module:model/SeriesInfoRemoteSearchQuery} seriesInfoRemoteSearchQuery Remote search query.
     * @param {module:api/ItemLookupApi~getSeriesRemoteSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSearchResult>}
     */
    getSeriesRemoteSearchResults(seriesInfoRemoteSearchQuery, callback) {
      let postBody = seriesInfoRemoteSearchQuery;
      // verify the required parameter 'seriesInfoRemoteSearchQuery' is set
      if (seriesInfoRemoteSearchQuery === undefined || seriesInfoRemoteSearchQuery === null) {
        throw new Error("Missing the required parameter 'seriesInfoRemoteSearchQuery' when calling getSeriesRemoteSearchResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSearchResult];
      return this.apiClient.callApi(
        '/Items/RemoteSearch/Series', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrailerRemoteSearchResults operation.
     * @callback module:api/ItemLookupApi~getTrailerRemoteSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get trailer remote search.
     * @param {module:model/TrailerInfoRemoteSearchQuery} trailerInfoRemoteSearchQuery Remote search query.
     * @param {module:api/ItemLookupApi~getTrailerRemoteSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteSearchResult>}
     */
    getTrailerRemoteSearchResults(trailerInfoRemoteSearchQuery, callback) {
      let postBody = trailerInfoRemoteSearchQuery;
      // verify the required parameter 'trailerInfoRemoteSearchQuery' is set
      if (trailerInfoRemoteSearchQuery === undefined || trailerInfoRemoteSearchQuery === null) {
        throw new Error("Missing the required parameter 'trailerInfoRemoteSearchQuery' when calling getTrailerRemoteSearchResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [RemoteSearchResult];
      return this.apiClient.callApi(
        '/Items/RemoteSearch/Trailer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
