/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SearchHintResult from '../model/SearchHintResult';

/**
* Search service.
* @module api/SearchApi
* @version v1
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/SearchApi~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchHintResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the search hint result.
     * @param {String} searchTerm The search term to filter on.
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {String} [userId] Optional. Supply a user id to search within a user's library or omit to search all.
     * @param {Array.<String>} [includeItemTypes] If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
     * @param {Array.<String>} [excludeItemTypes] If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
     * @param {Array.<String>} [mediaTypes] If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
     * @param {String} [parentId] If specified, only children of the parent are returned.
     * @param {Boolean} [isMovie] Optional filter for movies.
     * @param {Boolean} [isSeries] Optional filter for series.
     * @param {Boolean} [isNews] Optional filter for news.
     * @param {Boolean} [isKids] Optional filter for kids.
     * @param {Boolean} [isSports] Optional filter for sports.
     * @param {Boolean} [includePeople = true)] Optional filter whether to include people.
     * @param {Boolean} [includeMedia = true)] Optional filter whether to include media.
     * @param {Boolean} [includeGenres = true)] Optional filter whether to include genres.
     * @param {Boolean} [includeStudios = true)] Optional filter whether to include studios.
     * @param {Boolean} [includeArtists = true)] Optional filter whether to include artists.
     * @param {module:api/SearchApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchHintResult}
     */
    get(searchTerm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling get");
      }

      let pathParams = {
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'userId': opts['userId'],
        'searchTerm': searchTerm,
        'includeItemTypes': this.apiClient.buildCollectionParam(opts['includeItemTypes'], 'multi'),
        'excludeItemTypes': this.apiClient.buildCollectionParam(opts['excludeItemTypes'], 'multi'),
        'mediaTypes': this.apiClient.buildCollectionParam(opts['mediaTypes'], 'multi'),
        'parentId': opts['parentId'],
        'isMovie': opts['isMovie'],
        'isSeries': opts['isSeries'],
        'isNews': opts['isNews'],
        'isKids': opts['isKids'],
        'isSports': opts['isSports'],
        'includePeople': opts['includePeople'],
        'includeMedia': opts['includeMedia'],
        'includeGenres': opts['includeGenres'],
        'includeStudios': opts['includeStudios'],
        'includeArtists': opts['includeArtists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = SearchHintResult;
      return this.apiClient.callApi(
        '/Search/Hints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
