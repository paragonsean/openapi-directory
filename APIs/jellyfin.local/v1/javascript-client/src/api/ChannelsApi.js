/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ChannelFeatures from '../model/ChannelFeatures';
import ItemFields from '../model/ItemFields';
import ItemFilter from '../model/ItemFilter';

/**
* Channels service.
* @module api/ChannelsApi
* @version v1
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllChannelFeatures operation.
     * @callback module:api/ChannelsApi~getAllChannelFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelFeatures>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all channel features.
     * @param {module:api/ChannelsApi~getAllChannelFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelFeatures>}
     */
    getAllChannelFeatures(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [ChannelFeatures];
      return this.apiClient.callApi(
        '/Channels/Features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelFeatures operation.
     * @callback module:api/ChannelsApi~getChannelFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelFeatures} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel features.
     * @param {String} channelId Channel id.
     * @param {module:api/ChannelsApi~getChannelFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelFeatures}
     */
    getChannelFeatures(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelFeatures");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ChannelFeatures;
      return this.apiClient.callApi(
        '/Channels/{channelId}/Features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelItems operation.
     * @callback module:api/ChannelsApi~getChannelItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel items.
     * @param {String} channelId Channel Id.
     * @param {Object} opts Optional parameters
     * @param {String} [folderId] Optional. Folder Id.
     * @param {String} [userId] Optional. User Id.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {String} [sortOrder] Optional. Sort Order - Ascending,Descending.
     * @param {Array.<module:model/ItemFilter>} [filters] Optional. Specify additional filters to apply.
     * @param {String} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {module:api/ChannelsApi~getChannelItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getChannelItems(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelItems");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'folderId': opts['folderId'],
        'userId': opts['userId'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'sortOrder': opts['sortOrder'],
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'sortBy': opts['sortBy'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Channels/{channelId}/Items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannels operation.
     * @callback module:api/ChannelsApi~getChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available channels.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] User Id to filter by. Use System.Guid.Empty to not filter by user.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Boolean} [supportsLatestItems] Optional. Filter by channels that support getting latest items.
     * @param {Boolean} [supportsMediaDeletion] Optional. Filter by channels that support media deletion.
     * @param {Boolean} [isFavorite] Optional. Filter by channels that are favorite.
     * @param {module:api/ChannelsApi~getChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getChannels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'supportsLatestItems': opts['supportsLatestItems'],
        'supportsMediaDeletion': opts['supportsMediaDeletion'],
        'isFavorite': opts['isFavorite']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestChannelItems operation.
     * @callback module:api/ChannelsApi~getLatestChannelItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets latest channel items.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. User Id.
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFilter>} [filters] Optional. Specify additional filters to apply.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Array.<String>} [channelIds] Optional. Specify one or more channel id's, comma delimited.
     * @param {module:api/ChannelsApi~getLatestChannelItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getLatestChannelItems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'channelIds': this.apiClient.buildCollectionParam(opts['channelIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Channels/Items/Latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
