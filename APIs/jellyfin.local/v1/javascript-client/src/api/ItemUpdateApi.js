/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDto from '../model/BaseItemDto';
import MetadataEditorInfo from '../model/MetadataEditorInfo';
import ProblemDetails from '../model/ProblemDetails';

/**
* ItemUpdate service.
* @module api/ItemUpdateApi
* @version v1
*/
export default class ItemUpdateApi {

    /**
    * Constructs a new ItemUpdateApi. 
    * @alias module:api/ItemUpdateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMetadataEditorInfo operation.
     * @callback module:api/ItemUpdateApi~getMetadataEditorInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetadataEditorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata editor info for an item.
     * @param {String} itemId The item id.
     * @param {module:api/ItemUpdateApi~getMetadataEditorInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetadataEditorInfo}
     */
    getMetadataEditorInfo(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getMetadataEditorInfo");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = MetadataEditorInfo;
      return this.apiClient.callApi(
        '/Items/{itemId}/MetadataEditor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItem operation.
     * @callback module:api/ItemUpdateApi~updateItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an item.
     * @param {String} itemId The item id.
     * @param {module:model/BaseItemDto} baseItemDto The new item properties.
     * @param {module:api/ItemUpdateApi~updateItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateItem(itemId, baseItemDto, callback) {
      let postBody = baseItemDto;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateItem");
      }
      // verify the required parameter 'baseItemDto' is set
      if (baseItemDto === undefined || baseItemDto === null) {
        throw new Error("Missing the required parameter 'baseItemDto' when calling updateItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItemContentType operation.
     * @callback module:api/ItemUpdateApi~updateItemContentTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an item's content type.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [contentType] The content type of the item.
     * @param {module:api/ItemUpdateApi~updateItemContentTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateItemContentType(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateItemContentType");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'contentType': opts['contentType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}/ContentType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
