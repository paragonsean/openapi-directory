/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';

/**
* Suggestions service.
* @module api/SuggestionsApi
* @version v1
*/
export default class SuggestionsApi {

    /**
    * Constructs a new SuggestionsApi. 
    * @alias module:api/SuggestionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSuggestions operation.
     * @callback module:api/SuggestionsApi~getSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets suggestions.
     * @param {String} userId The user id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [mediaType] The media types.
     * @param {Array.<String>} [type] The type.
     * @param {Number} [startIndex] Optional. The start index.
     * @param {Number} [limit] Optional. The limit.
     * @param {Boolean} [enableTotalRecordCount = false)] Whether to enable the total record count.
     * @param {module:api/SuggestionsApi~getSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getSuggestions(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getSuggestions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'mediaType': this.apiClient.buildCollectionParam(opts['mediaType'], 'multi'),
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'enableTotalRecordCount': opts['enableTotalRecordCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Users/{userId}/Suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
