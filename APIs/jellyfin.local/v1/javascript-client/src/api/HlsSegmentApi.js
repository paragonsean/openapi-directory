/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';

/**
* HlsSegment service.
* @module api/HlsSegmentApi
* @version v1
*/
export default class HlsSegmentApi {

    /**
    * Constructs a new HlsSegmentApi. 
    * @alias module:api/HlsSegmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getHlsAudioSegmentLegacyAac operation.
     * @callback module:api/HlsSegmentApi~getHlsAudioSegmentLegacyAacCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified audio segment for an audio item.
     * @param {String} itemId The item id.
     * @param {String} segmentId The segment id.
     * @param {module:api/HlsSegmentApi~getHlsAudioSegmentLegacyAacCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getHlsAudioSegmentLegacyAac(itemId, segmentId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getHlsAudioSegmentLegacyAac");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getHlsAudioSegmentLegacyAac");
      }

      let pathParams = {
        'itemId': itemId,
        'segmentId': segmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['audio/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Audio/{itemId}/hls/{segmentId}/stream.aac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHlsAudioSegmentLegacyMp3 operation.
     * @callback module:api/HlsSegmentApi~getHlsAudioSegmentLegacyMp3Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified audio segment for an audio item.
     * @param {String} itemId The item id.
     * @param {String} segmentId The segment id.
     * @param {module:api/HlsSegmentApi~getHlsAudioSegmentLegacyMp3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getHlsAudioSegmentLegacyMp3(itemId, segmentId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getHlsAudioSegmentLegacyMp3");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getHlsAudioSegmentLegacyMp3");
      }

      let pathParams = {
        'itemId': itemId,
        'segmentId': segmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['audio/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Audio/{itemId}/hls/{segmentId}/stream.mp3', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHlsPlaylistLegacy operation.
     * @callback module:api/HlsSegmentApi~getHlsPlaylistLegacyCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a hls video playlist.
     * @param {String} itemId The video id.
     * @param {String} playlistId The playlist id.
     * @param {module:api/HlsSegmentApi~getHlsPlaylistLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getHlsPlaylistLegacy(itemId, playlistId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getHlsPlaylistLegacy");
      }
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getHlsPlaylistLegacy");
      }

      let pathParams = {
        'itemId': itemId,
        'playlistId': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/x-mpegURL'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Videos/{itemId}/hls/{playlistId}/stream.m3u8', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHlsVideoSegmentLegacy operation.
     * @callback module:api/HlsSegmentApi~getHlsVideoSegmentLegacyCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a hls video segment.
     * @param {String} itemId The item id.
     * @param {String} playlistId The playlist id.
     * @param {String} segmentId The segment id.
     * @param {String} segmentContainer The segment container.
     * @param {module:api/HlsSegmentApi~getHlsVideoSegmentLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getHlsVideoSegmentLegacy(itemId, playlistId, segmentId, segmentContainer, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getHlsVideoSegmentLegacy");
      }
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getHlsVideoSegmentLegacy");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getHlsVideoSegmentLegacy");
      }
      // verify the required parameter 'segmentContainer' is set
      if (segmentContainer === undefined || segmentContainer === null) {
        throw new Error("Missing the required parameter 'segmentContainer' when calling getHlsVideoSegmentLegacy");
      }

      let pathParams = {
        'itemId': itemId,
        'playlistId': playlistId,
        'segmentId': segmentId,
        'segmentContainer': segmentContainer
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['video/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopEncodingProcess operation.
     * @callback module:api/HlsSegmentApi~stopEncodingProcessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an active encoding.
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {String} [playSessionId] The play session id.
     * @param {module:api/HlsSegmentApi~stopEncodingProcessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopEncodingProcess(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'deviceId': opts['deviceId'],
        'playSessionId': opts['playSessionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Videos/ActiveEncodings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
