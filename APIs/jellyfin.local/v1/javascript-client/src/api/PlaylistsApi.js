/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import CreatePlaylistDto from '../model/CreatePlaylistDto';
import ImageType from '../model/ImageType';
import ItemFields from '../model/ItemFields';
import PlaylistCreationResult from '../model/PlaylistCreationResult';

/**
* Playlists service.
* @module api/PlaylistsApi
* @version v1
*/
export default class PlaylistsApi {

    /**
    * Constructs a new PlaylistsApi. 
    * @alias module:api/PlaylistsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addToPlaylist operation.
     * @callback module:api/PlaylistsApi~addToPlaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds items to a playlist.
     * @param {String} playlistId The playlist id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] Item id, comma delimited.
     * @param {String} [userId] The userId.
     * @param {module:api/PlaylistsApi~addToPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addToPlaylist(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling addToPlaylist");
      }

      let pathParams = {
        'playlistId': playlistId
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Playlists/{playlistId}/Items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPlaylist operation.
     * @callback module:api/PlaylistsApi~createPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new playlist.
     * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The playlist name.
     * @param {Array.<String>} [ids] The item ids.
     * @param {String} [userId] The user id.
     * @param {String} [mediaType] The media type.
     * @param {module:model/CreatePlaylistDto} [createPlaylistDto] The create playlist payload.
     * @param {module:api/PlaylistsApi~createPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistCreationResult}
     */
    createPlaylist(opts, callback) {
      opts = opts || {};
      let postBody = opts['createPlaylistDto'];

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'userId': opts['userId'],
        'mediaType': opts['mediaType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = PlaylistCreationResult;
      return this.apiClient.callApi(
        '/Playlists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistItems operation.
     * @callback module:api/PlaylistsApi~getPlaylistItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the original items of a playlist.
     * @param {String} playlistId The playlist id.
     * @param {String} userId User id.
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Boolean} [enableImages] Optional. Include image information in output.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {module:api/PlaylistsApi~getPlaylistItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getPlaylistItems(playlistId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getPlaylistItems");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPlaylistItems");
      }

      let pathParams = {
        'playlistId': playlistId
      };
      let queryParams = {
        'userId': userId,
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'enableImages': opts['enableImages'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Playlists/{playlistId}/Items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveItem operation.
     * @callback module:api/PlaylistsApi~moveItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves a playlist item.
     * @param {String} playlistId The playlist id.
     * @param {String} itemId The item id.
     * @param {Number} newIndex The new index.
     * @param {module:api/PlaylistsApi~moveItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveItem(playlistId, itemId, newIndex, callback) {
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling moveItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling moveItem");
      }
      // verify the required parameter 'newIndex' is set
      if (newIndex === undefined || newIndex === null) {
        throw new Error("Missing the required parameter 'newIndex' when calling moveItem");
      }

      let pathParams = {
        'playlistId': playlistId,
        'itemId': itemId,
        'newIndex': newIndex
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFromPlaylist operation.
     * @callback module:api/PlaylistsApi~removeFromPlaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes items from a playlist.
     * @param {String} playlistId The playlist id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [entryIds] The item ids, comma delimited.
     * @param {module:api/PlaylistsApi~removeFromPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeFromPlaylist(playlistId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling removeFromPlaylist");
      }

      let pathParams = {
        'playlistId': playlistId
      };
      let queryParams = {
        'entryIds': this.apiClient.buildCollectionParam(opts['entryIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Playlists/{playlistId}/Items', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
