/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseItemDto from '../model/BaseItemDto';
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ImageType from '../model/ImageType';
import ItemFields from '../model/ItemFields';
import ProblemDetails from '../model/ProblemDetails';

/**
* Years service.
* @module api/YearsApi
* @version v1
*/
export default class YearsApi {

    /**
    * Constructs a new YearsApi. 
    * @alias module:api/YearsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getYear operation.
     * @callback module:api/YearsApi~getYearCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a year.
     * @param {Number} year The year.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {module:api/YearsApi~getYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDto}
     */
    getYear(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getYear");
      }

      let pathParams = {
        'year': year
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDto;
      return this.apiClient.callApi(
        '/Years/{year}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getYears operation.
     * @callback module:api/YearsApi~getYearsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get years.
     * @param {Object} opts Optional parameters
     * @param {Number} [startIndex] Skips over a given number of items within the results. Use for paging.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {String} [sortOrder] Sort Order - Ascending,Descending.
     * @param {String} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output.
     * @param {Array.<String>} [excludeItemTypes] Optional. If specified, results will be excluded based on item type. This allows multiple, comma delimited.
     * @param {Array.<String>} [includeItemTypes] Optional. If specified, results will be included based on item type. This allows multiple, comma delimited.
     * @param {Array.<String>} [mediaTypes] Optional. Filter by MediaType. Allows multiple, comma delimited.
     * @param {String} [sortBy] Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
     * @param {Boolean} [enableUserData] Optional. Include user data.
     * @param {Number} [imageTypeLimit] Optional. The max number of images to return, per image type.
     * @param {Array.<module:model/ImageType>} [enableImageTypes] Optional. The image types to include in the output.
     * @param {String} [userId] User Id.
     * @param {Boolean} [recursive = true)] Search recursively.
     * @param {Boolean} [enableImages = true)] Optional. Include image information in output.
     * @param {module:api/YearsApi~getYearsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getYears(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startIndex': opts['startIndex'],
        'limit': opts['limit'],
        'sortOrder': opts['sortOrder'],
        'parentId': opts['parentId'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'excludeItemTypes': this.apiClient.buildCollectionParam(opts['excludeItemTypes'], 'multi'),
        'includeItemTypes': this.apiClient.buildCollectionParam(opts['includeItemTypes'], 'multi'),
        'mediaTypes': this.apiClient.buildCollectionParam(opts['mediaTypes'], 'multi'),
        'sortBy': opts['sortBy'],
        'enableUserData': opts['enableUserData'],
        'imageTypeLimit': opts['imageTypeLimit'],
        'enableImageTypes': this.apiClient.buildCollectionParam(opts['enableImageTypes'], 'multi'),
        'userId': opts['userId'],
        'recursive': opts['recursive'],
        'enableImages': opts['enableImages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Years', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
