/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllThemeMediaResult from '../model/AllThemeMediaResult';
import BaseItemDto from '../model/BaseItemDto';
import BaseItemDtoQueryResult from '../model/BaseItemDtoQueryResult';
import ItemCounts from '../model/ItemCounts';
import ItemFields from '../model/ItemFields';
import LibraryOptionsResultDto from '../model/LibraryOptionsResultDto';
import MediaUpdateInfoDto from '../model/MediaUpdateInfoDto';
import ProblemDetails from '../model/ProblemDetails';
import ThemeMediaResult from '../model/ThemeMediaResult';

/**
* Library service.
* @module api/LibraryApi
* @version v1
*/
export default class LibraryApi {

    /**
    * Constructs a new LibraryApi. 
    * @alias module:api/LibraryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteItem operation.
     * @callback module:api/LibraryApi~deleteItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an item from the library and filesystem.
     * @param {String} itemId The item id.
     * @param {module:api/LibraryApi~deleteItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteItem(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItems operation.
     * @callback module:api/LibraryApi~deleteItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes items from the library and filesystem.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] The item ids.
     * @param {module:api/LibraryApi~deleteItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteItems(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Items', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAncestors operation.
     * @callback module:api/LibraryApi~getAncestorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BaseItemDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all parents of an item.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {module:api/LibraryApi~getAncestorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BaseItemDto>}
     */
    getAncestors(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getAncestors");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = [BaseItemDto];
      return this.apiClient.callApi(
        '/Items/{itemId}/Ancestors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCriticReviews operation.
     * @callback module:api/LibraryApi~getCriticReviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets critic review for an item.
     * @param {String} itemId 
     * @param {module:api/LibraryApi~getCriticReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getCriticReviews(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getCriticReviews");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Items/{itemId}/CriticReviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDownload operation.
     * @callback module:api/LibraryApi~getDownloadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads item media.
     * @param {String} itemId The item id.
     * @param {module:api/LibraryApi~getDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getDownload(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getDownload");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['audio/*', 'video/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Items/{itemId}/Download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFile operation.
     * @callback module:api/LibraryApi~getFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the original file of an item.
     * @param {String} itemId The item id.
     * @param {module:api/LibraryApi~getFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getFile(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getFile");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['audio/*', 'video/*', 'application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Items/{itemId}/File', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemCounts operation.
     * @callback module:api/LibraryApi~getItemCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemCounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item counts.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Get counts from a specific user's library.
     * @param {Boolean} [isFavorite] Optional. Get counts of favorite items.
     * @param {module:api/LibraryApi~getItemCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemCounts}
     */
    getItemCounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'isFavorite': opts['isFavorite']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ItemCounts;
      return this.apiClient.callApi(
        '/Items/Counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLibraryOptionsInfo operation.
     * @callback module:api/LibraryApi~getLibraryOptionsInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LibraryOptionsResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the library options info.
     * @param {Object} opts Optional parameters
     * @param {String} [libraryContentType] Library content type.
     * @param {Boolean} [isNewLibrary] Whether this is a new library.
     * @param {module:api/LibraryApi~getLibraryOptionsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LibraryOptionsResultDto}
     */
    getLibraryOptionsInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'libraryContentType': opts['libraryContentType'],
        'isNewLibrary': opts['isNewLibrary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = LibraryOptionsResultDto;
      return this.apiClient.callApi(
        '/Libraries/AvailableOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaFolders operation.
     * @callback module:api/LibraryApi~getMediaFoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all user media folders.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isHidden] Optional. Filter by folders that are marked hidden, or not.
     * @param {module:api/LibraryApi~getMediaFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getMediaFolders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isHidden': opts['isHidden']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Library/MediaFolders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhysicalPaths operation.
     * @callback module:api/LibraryApi~getPhysicalPathsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of physical paths from virtual folders.
     * @param {module:api/LibraryApi~getPhysicalPathsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getPhysicalPaths(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/Library/PhysicalPaths', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarAlbums operation.
     * @callback module:api/LibraryApi~getSimilarAlbumsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets similar items.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [excludeArtistIds] Exclude artist ids.
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
     * @param {module:api/LibraryApi~getSimilarAlbumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getSimilarAlbums(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSimilarAlbums");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'excludeArtistIds': this.apiClient.buildCollectionParam(opts['excludeArtistIds'], 'multi'),
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Albums/{itemId}/Similar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarArtists operation.
     * @callback module:api/LibraryApi~getSimilarArtistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets similar items.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [excludeArtistIds] Exclude artist ids.
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
     * @param {module:api/LibraryApi~getSimilarArtistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getSimilarArtists(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSimilarArtists");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'excludeArtistIds': this.apiClient.buildCollectionParam(opts['excludeArtistIds'], 'multi'),
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Artists/{itemId}/Similar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarItems operation.
     * @callback module:api/LibraryApi~getSimilarItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets similar items.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [excludeArtistIds] Exclude artist ids.
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
     * @param {module:api/LibraryApi~getSimilarItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getSimilarItems(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSimilarItems");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'excludeArtistIds': this.apiClient.buildCollectionParam(opts['excludeArtistIds'], 'multi'),
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Items/{itemId}/Similar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarMovies operation.
     * @callback module:api/LibraryApi~getSimilarMoviesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets similar items.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [excludeArtistIds] Exclude artist ids.
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
     * @param {module:api/LibraryApi~getSimilarMoviesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getSimilarMovies(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSimilarMovies");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'excludeArtistIds': this.apiClient.buildCollectionParam(opts['excludeArtistIds'], 'multi'),
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Movies/{itemId}/Similar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarShows operation.
     * @callback module:api/LibraryApi~getSimilarShowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets similar items.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [excludeArtistIds] Exclude artist ids.
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
     * @param {module:api/LibraryApi~getSimilarShowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getSimilarShows(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSimilarShows");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'excludeArtistIds': this.apiClient.buildCollectionParam(opts['excludeArtistIds'], 'multi'),
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Shows/{itemId}/Similar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarTrailers operation.
     * @callback module:api/LibraryApi~getSimilarTrailersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseItemDtoQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets similar items.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [excludeArtistIds] Exclude artist ids.
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Number} [limit] Optional. The maximum number of records to return.
     * @param {Array.<module:model/ItemFields>} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls.
     * @param {module:api/LibraryApi~getSimilarTrailersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseItemDtoQueryResult}
     */
    getSimilarTrailers(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSimilarTrailers");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'excludeArtistIds': this.apiClient.buildCollectionParam(opts['excludeArtistIds'], 'multi'),
        'userId': opts['userId'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = BaseItemDtoQueryResult;
      return this.apiClient.callApi(
        '/Trailers/{itemId}/Similar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getThemeMedia operation.
     * @callback module:api/LibraryApi~getThemeMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllThemeMediaResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get theme songs and videos for an item.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Boolean} [inheritFromParent = false)] Optional. Determines whether or not parent items should be searched for theme media.
     * @param {module:api/LibraryApi~getThemeMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllThemeMediaResult}
     */
    getThemeMedia(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getThemeMedia");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'userId': opts['userId'],
        'inheritFromParent': opts['inheritFromParent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = AllThemeMediaResult;
      return this.apiClient.callApi(
        '/Items/{itemId}/ThemeMedia', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getThemeSongs operation.
     * @callback module:api/LibraryApi~getThemeSongsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThemeMediaResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get theme songs for an item.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Boolean} [inheritFromParent = false)] Optional. Determines whether or not parent items should be searched for theme media.
     * @param {module:api/LibraryApi~getThemeSongsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThemeMediaResult}
     */
    getThemeSongs(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getThemeSongs");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'userId': opts['userId'],
        'inheritFromParent': opts['inheritFromParent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ThemeMediaResult;
      return this.apiClient.callApi(
        '/Items/{itemId}/ThemeSongs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getThemeVideos operation.
     * @callback module:api/LibraryApi~getThemeVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThemeMediaResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get theme videos for an item.
     * @param {String} itemId The item id.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Optional. Filter by user id, and attach user data.
     * @param {Boolean} [inheritFromParent = false)] Optional. Determines whether or not parent items should be searched for theme media.
     * @param {module:api/LibraryApi~getThemeVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThemeMediaResult}
     */
    getThemeVideos(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getThemeVideos");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'userId': opts['userId'],
        'inheritFromParent': opts['inheritFromParent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json; profile=CamelCase', 'application/json; profile=PascalCase'];
      let returnType = ThemeMediaResult;
      return this.apiClient.callApi(
        '/Items/{itemId}/ThemeVideos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAddedMovies operation.
     * @callback module:api/LibraryApi~postAddedMoviesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports that new movies have been added by an external source.
     * @param {Object} opts Optional parameters
     * @param {String} [tmdbId] The tmdbId.
     * @param {String} [imdbId] The imdbId.
     * @param {module:api/LibraryApi~postAddedMoviesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAddedMovies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tmdbId': opts['tmdbId'],
        'imdbId': opts['imdbId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/Movies/Added', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAddedSeries operation.
     * @callback module:api/LibraryApi~postAddedSeriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports that new episodes of a series have been added by an external source.
     * @param {Object} opts Optional parameters
     * @param {String} [tvdbId] The tvdbId.
     * @param {module:api/LibraryApi~postAddedSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAddedSeries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tvdbId': opts['tvdbId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/Series/Added', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUpdatedMedia operation.
     * @callback module:api/LibraryApi~postUpdatedMediaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports that new movies have been added by an external source.
     * @param {Array.<module:model/MediaUpdateInfoDto>} mediaUpdateInfoDto A list of updated media paths.
     * @param {module:api/LibraryApi~postUpdatedMediaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUpdatedMedia(mediaUpdateInfoDto, callback) {
      let postBody = mediaUpdateInfoDto;
      // verify the required parameter 'mediaUpdateInfoDto' is set
      if (mediaUpdateInfoDto === undefined || mediaUpdateInfoDto === null) {
        throw new Error("Missing the required parameter 'mediaUpdateInfoDto' when calling postUpdatedMedia");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/Media/Updated', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUpdatedMovies operation.
     * @callback module:api/LibraryApi~postUpdatedMoviesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports that new movies have been added by an external source.
     * @param {Object} opts Optional parameters
     * @param {String} [tmdbId] The tmdbId.
     * @param {String} [imdbId] The imdbId.
     * @param {module:api/LibraryApi~postUpdatedMoviesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUpdatedMovies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tmdbId': opts['tmdbId'],
        'imdbId': opts['imdbId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/Movies/Updated', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUpdatedSeries operation.
     * @callback module:api/LibraryApi~postUpdatedSeriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports that new episodes of a series have been added by an external source.
     * @param {Object} opts Optional parameters
     * @param {String} [tvdbId] The tvdbId.
     * @param {module:api/LibraryApi~postUpdatedSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postUpdatedSeries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tvdbId': opts['tvdbId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/Series/Updated', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshLibrary operation.
     * @callback module:api/LibraryApi~refreshLibraryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a library scan.
     * @param {module:api/LibraryApi~refreshLibraryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    refreshLibrary(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CustomAuthentication'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Library/Refresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
