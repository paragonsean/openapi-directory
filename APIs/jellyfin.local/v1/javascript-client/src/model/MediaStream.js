/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaStreamType from './MediaStreamType';
import SubtitleDeliveryMethod from './SubtitleDeliveryMethod';

/**
 * The MediaStream model module.
 * @module model/MediaStream
 * @version v1
 */
class MediaStream {
    /**
     * Constructs a new <code>MediaStream</code>.
     * Class MediaStream.
     * @alias module:model/MediaStream
     */
    constructor() { 
        
        MediaStream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaStream} obj Optional instance to populate.
     * @return {module:model/MediaStream} The populated <code>MediaStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaStream();

            if (data.hasOwnProperty('AspectRatio')) {
                obj['AspectRatio'] = ApiClient.convertToType(data['AspectRatio'], 'String');
            }
            if (data.hasOwnProperty('AverageFrameRate')) {
                obj['AverageFrameRate'] = ApiClient.convertToType(data['AverageFrameRate'], 'Number');
            }
            if (data.hasOwnProperty('BitDepth')) {
                obj['BitDepth'] = ApiClient.convertToType(data['BitDepth'], 'Number');
            }
            if (data.hasOwnProperty('BitRate')) {
                obj['BitRate'] = ApiClient.convertToType(data['BitRate'], 'Number');
            }
            if (data.hasOwnProperty('ChannelLayout')) {
                obj['ChannelLayout'] = ApiClient.convertToType(data['ChannelLayout'], 'String');
            }
            if (data.hasOwnProperty('Channels')) {
                obj['Channels'] = ApiClient.convertToType(data['Channels'], 'Number');
            }
            if (data.hasOwnProperty('Codec')) {
                obj['Codec'] = ApiClient.convertToType(data['Codec'], 'String');
            }
            if (data.hasOwnProperty('CodecTag')) {
                obj['CodecTag'] = ApiClient.convertToType(data['CodecTag'], 'String');
            }
            if (data.hasOwnProperty('CodecTimeBase')) {
                obj['CodecTimeBase'] = ApiClient.convertToType(data['CodecTimeBase'], 'String');
            }
            if (data.hasOwnProperty('ColorPrimaries')) {
                obj['ColorPrimaries'] = ApiClient.convertToType(data['ColorPrimaries'], 'String');
            }
            if (data.hasOwnProperty('ColorRange')) {
                obj['ColorRange'] = ApiClient.convertToType(data['ColorRange'], 'String');
            }
            if (data.hasOwnProperty('ColorSpace')) {
                obj['ColorSpace'] = ApiClient.convertToType(data['ColorSpace'], 'String');
            }
            if (data.hasOwnProperty('ColorTransfer')) {
                obj['ColorTransfer'] = ApiClient.convertToType(data['ColorTransfer'], 'String');
            }
            if (data.hasOwnProperty('Comment')) {
                obj['Comment'] = ApiClient.convertToType(data['Comment'], 'String');
            }
            if (data.hasOwnProperty('DeliveryMethod')) {
                obj['DeliveryMethod'] = SubtitleDeliveryMethod.constructFromObject(data['DeliveryMethod']);
            }
            if (data.hasOwnProperty('DeliveryUrl')) {
                obj['DeliveryUrl'] = ApiClient.convertToType(data['DeliveryUrl'], 'String');
            }
            if (data.hasOwnProperty('DisplayTitle')) {
                obj['DisplayTitle'] = ApiClient.convertToType(data['DisplayTitle'], 'String');
            }
            if (data.hasOwnProperty('Height')) {
                obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
            }
            if (data.hasOwnProperty('Index')) {
                obj['Index'] = ApiClient.convertToType(data['Index'], 'Number');
            }
            if (data.hasOwnProperty('IsAVC')) {
                obj['IsAVC'] = ApiClient.convertToType(data['IsAVC'], 'Boolean');
            }
            if (data.hasOwnProperty('IsAnamorphic')) {
                obj['IsAnamorphic'] = ApiClient.convertToType(data['IsAnamorphic'], 'Boolean');
            }
            if (data.hasOwnProperty('IsDefault')) {
                obj['IsDefault'] = ApiClient.convertToType(data['IsDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('IsExternal')) {
                obj['IsExternal'] = ApiClient.convertToType(data['IsExternal'], 'Boolean');
            }
            if (data.hasOwnProperty('IsExternalUrl')) {
                obj['IsExternalUrl'] = ApiClient.convertToType(data['IsExternalUrl'], 'Boolean');
            }
            if (data.hasOwnProperty('IsForced')) {
                obj['IsForced'] = ApiClient.convertToType(data['IsForced'], 'Boolean');
            }
            if (data.hasOwnProperty('IsInterlaced')) {
                obj['IsInterlaced'] = ApiClient.convertToType(data['IsInterlaced'], 'Boolean');
            }
            if (data.hasOwnProperty('IsTextSubtitleStream')) {
                obj['IsTextSubtitleStream'] = ApiClient.convertToType(data['IsTextSubtitleStream'], 'Boolean');
            }
            if (data.hasOwnProperty('Language')) {
                obj['Language'] = ApiClient.convertToType(data['Language'], 'String');
            }
            if (data.hasOwnProperty('Level')) {
                obj['Level'] = ApiClient.convertToType(data['Level'], 'Number');
            }
            if (data.hasOwnProperty('NalLengthSize')) {
                obj['NalLengthSize'] = ApiClient.convertToType(data['NalLengthSize'], 'String');
            }
            if (data.hasOwnProperty('PacketLength')) {
                obj['PacketLength'] = ApiClient.convertToType(data['PacketLength'], 'Number');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('PixelFormat')) {
                obj['PixelFormat'] = ApiClient.convertToType(data['PixelFormat'], 'String');
            }
            if (data.hasOwnProperty('Profile')) {
                obj['Profile'] = ApiClient.convertToType(data['Profile'], 'String');
            }
            if (data.hasOwnProperty('RealFrameRate')) {
                obj['RealFrameRate'] = ApiClient.convertToType(data['RealFrameRate'], 'Number');
            }
            if (data.hasOwnProperty('RefFrames')) {
                obj['RefFrames'] = ApiClient.convertToType(data['RefFrames'], 'Number');
            }
            if (data.hasOwnProperty('SampleRate')) {
                obj['SampleRate'] = ApiClient.convertToType(data['SampleRate'], 'Number');
            }
            if (data.hasOwnProperty('Score')) {
                obj['Score'] = ApiClient.convertToType(data['Score'], 'Number');
            }
            if (data.hasOwnProperty('SupportsExternalStream')) {
                obj['SupportsExternalStream'] = ApiClient.convertToType(data['SupportsExternalStream'], 'Boolean');
            }
            if (data.hasOwnProperty('TimeBase')) {
                obj['TimeBase'] = ApiClient.convertToType(data['TimeBase'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = MediaStreamType.constructFromObject(data['Type']);
            }
            if (data.hasOwnProperty('VideoRange')) {
                obj['VideoRange'] = ApiClient.convertToType(data['VideoRange'], 'String');
            }
            if (data.hasOwnProperty('Width')) {
                obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
            }
            if (data.hasOwnProperty('localizedDefault')) {
                obj['localizedDefault'] = ApiClient.convertToType(data['localizedDefault'], 'String');
            }
            if (data.hasOwnProperty('localizedForced')) {
                obj['localizedForced'] = ApiClient.convertToType(data['localizedForced'], 'String');
            }
            if (data.hasOwnProperty('localizedUndefined')) {
                obj['localizedUndefined'] = ApiClient.convertToType(data['localizedUndefined'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaStream</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AspectRatio'] && !(typeof data['AspectRatio'] === 'string' || data['AspectRatio'] instanceof String)) {
            throw new Error("Expected the field `AspectRatio` to be a primitive type in the JSON string but got " + data['AspectRatio']);
        }
        // ensure the json data is a string
        if (data['ChannelLayout'] && !(typeof data['ChannelLayout'] === 'string' || data['ChannelLayout'] instanceof String)) {
            throw new Error("Expected the field `ChannelLayout` to be a primitive type in the JSON string but got " + data['ChannelLayout']);
        }
        // ensure the json data is a string
        if (data['Codec'] && !(typeof data['Codec'] === 'string' || data['Codec'] instanceof String)) {
            throw new Error("Expected the field `Codec` to be a primitive type in the JSON string but got " + data['Codec']);
        }
        // ensure the json data is a string
        if (data['CodecTag'] && !(typeof data['CodecTag'] === 'string' || data['CodecTag'] instanceof String)) {
            throw new Error("Expected the field `CodecTag` to be a primitive type in the JSON string but got " + data['CodecTag']);
        }
        // ensure the json data is a string
        if (data['CodecTimeBase'] && !(typeof data['CodecTimeBase'] === 'string' || data['CodecTimeBase'] instanceof String)) {
            throw new Error("Expected the field `CodecTimeBase` to be a primitive type in the JSON string but got " + data['CodecTimeBase']);
        }
        // ensure the json data is a string
        if (data['ColorPrimaries'] && !(typeof data['ColorPrimaries'] === 'string' || data['ColorPrimaries'] instanceof String)) {
            throw new Error("Expected the field `ColorPrimaries` to be a primitive type in the JSON string but got " + data['ColorPrimaries']);
        }
        // ensure the json data is a string
        if (data['ColorRange'] && !(typeof data['ColorRange'] === 'string' || data['ColorRange'] instanceof String)) {
            throw new Error("Expected the field `ColorRange` to be a primitive type in the JSON string but got " + data['ColorRange']);
        }
        // ensure the json data is a string
        if (data['ColorSpace'] && !(typeof data['ColorSpace'] === 'string' || data['ColorSpace'] instanceof String)) {
            throw new Error("Expected the field `ColorSpace` to be a primitive type in the JSON string but got " + data['ColorSpace']);
        }
        // ensure the json data is a string
        if (data['ColorTransfer'] && !(typeof data['ColorTransfer'] === 'string' || data['ColorTransfer'] instanceof String)) {
            throw new Error("Expected the field `ColorTransfer` to be a primitive type in the JSON string but got " + data['ColorTransfer']);
        }
        // ensure the json data is a string
        if (data['Comment'] && !(typeof data['Comment'] === 'string' || data['Comment'] instanceof String)) {
            throw new Error("Expected the field `Comment` to be a primitive type in the JSON string but got " + data['Comment']);
        }
        // ensure the json data is a string
        if (data['DeliveryUrl'] && !(typeof data['DeliveryUrl'] === 'string' || data['DeliveryUrl'] instanceof String)) {
            throw new Error("Expected the field `DeliveryUrl` to be a primitive type in the JSON string but got " + data['DeliveryUrl']);
        }
        // ensure the json data is a string
        if (data['DisplayTitle'] && !(typeof data['DisplayTitle'] === 'string' || data['DisplayTitle'] instanceof String)) {
            throw new Error("Expected the field `DisplayTitle` to be a primitive type in the JSON string but got " + data['DisplayTitle']);
        }
        // ensure the json data is a string
        if (data['Language'] && !(typeof data['Language'] === 'string' || data['Language'] instanceof String)) {
            throw new Error("Expected the field `Language` to be a primitive type in the JSON string but got " + data['Language']);
        }
        // ensure the json data is a string
        if (data['NalLengthSize'] && !(typeof data['NalLengthSize'] === 'string' || data['NalLengthSize'] instanceof String)) {
            throw new Error("Expected the field `NalLengthSize` to be a primitive type in the JSON string but got " + data['NalLengthSize']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is a string
        if (data['PixelFormat'] && !(typeof data['PixelFormat'] === 'string' || data['PixelFormat'] instanceof String)) {
            throw new Error("Expected the field `PixelFormat` to be a primitive type in the JSON string but got " + data['PixelFormat']);
        }
        // ensure the json data is a string
        if (data['Profile'] && !(typeof data['Profile'] === 'string' || data['Profile'] instanceof String)) {
            throw new Error("Expected the field `Profile` to be a primitive type in the JSON string but got " + data['Profile']);
        }
        // ensure the json data is a string
        if (data['TimeBase'] && !(typeof data['TimeBase'] === 'string' || data['TimeBase'] instanceof String)) {
            throw new Error("Expected the field `TimeBase` to be a primitive type in the JSON string but got " + data['TimeBase']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['VideoRange'] && !(typeof data['VideoRange'] === 'string' || data['VideoRange'] instanceof String)) {
            throw new Error("Expected the field `VideoRange` to be a primitive type in the JSON string but got " + data['VideoRange']);
        }
        // ensure the json data is a string
        if (data['localizedDefault'] && !(typeof data['localizedDefault'] === 'string' || data['localizedDefault'] instanceof String)) {
            throw new Error("Expected the field `localizedDefault` to be a primitive type in the JSON string but got " + data['localizedDefault']);
        }
        // ensure the json data is a string
        if (data['localizedForced'] && !(typeof data['localizedForced'] === 'string' || data['localizedForced'] instanceof String)) {
            throw new Error("Expected the field `localizedForced` to be a primitive type in the JSON string but got " + data['localizedForced']);
        }
        // ensure the json data is a string
        if (data['localizedUndefined'] && !(typeof data['localizedUndefined'] === 'string' || data['localizedUndefined'] instanceof String)) {
            throw new Error("Expected the field `localizedUndefined` to be a primitive type in the JSON string but got " + data['localizedUndefined']);
        }

        return true;
    }


}



/**
 * Gets or sets the aspect ratio.
 * @member {String} AspectRatio
 */
MediaStream.prototype['AspectRatio'] = undefined;

/**
 * Gets or sets the average frame rate.
 * @member {Number} AverageFrameRate
 */
MediaStream.prototype['AverageFrameRate'] = undefined;

/**
 * Gets or sets the bit depth.
 * @member {Number} BitDepth
 */
MediaStream.prototype['BitDepth'] = undefined;

/**
 * Gets or sets the bit rate.
 * @member {Number} BitRate
 */
MediaStream.prototype['BitRate'] = undefined;

/**
 * Gets or sets the channel layout.
 * @member {String} ChannelLayout
 */
MediaStream.prototype['ChannelLayout'] = undefined;

/**
 * Gets or sets the channels.
 * @member {Number} Channels
 */
MediaStream.prototype['Channels'] = undefined;

/**
 * Gets or sets the codec.
 * @member {String} Codec
 */
MediaStream.prototype['Codec'] = undefined;

/**
 * Gets or sets the codec tag.
 * @member {String} CodecTag
 */
MediaStream.prototype['CodecTag'] = undefined;

/**
 * Gets or sets the codec time base.
 * @member {String} CodecTimeBase
 */
MediaStream.prototype['CodecTimeBase'] = undefined;

/**
 * Gets or sets the color primaries.
 * @member {String} ColorPrimaries
 */
MediaStream.prototype['ColorPrimaries'] = undefined;

/**
 * Gets or sets the color range.
 * @member {String} ColorRange
 */
MediaStream.prototype['ColorRange'] = undefined;

/**
 * Gets or sets the color space.
 * @member {String} ColorSpace
 */
MediaStream.prototype['ColorSpace'] = undefined;

/**
 * Gets or sets the color transfer.
 * @member {String} ColorTransfer
 */
MediaStream.prototype['ColorTransfer'] = undefined;

/**
 * Gets or sets the comment.
 * @member {String} Comment
 */
MediaStream.prototype['Comment'] = undefined;

/**
 * @member {module:model/SubtitleDeliveryMethod} DeliveryMethod
 */
MediaStream.prototype['DeliveryMethod'] = undefined;

/**
 * Gets or sets the delivery URL.
 * @member {String} DeliveryUrl
 */
MediaStream.prototype['DeliveryUrl'] = undefined;

/**
 * @member {String} DisplayTitle
 */
MediaStream.prototype['DisplayTitle'] = undefined;

/**
 * Gets or sets the height.
 * @member {Number} Height
 */
MediaStream.prototype['Height'] = undefined;

/**
 * Gets or sets the index.
 * @member {Number} Index
 */
MediaStream.prototype['Index'] = undefined;

/**
 * @member {Boolean} IsAVC
 */
MediaStream.prototype['IsAVC'] = undefined;

/**
 * Gets a value indicating whether this instance is anamorphic.
 * @member {Boolean} IsAnamorphic
 */
MediaStream.prototype['IsAnamorphic'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is default.
 * @member {Boolean} IsDefault
 */
MediaStream.prototype['IsDefault'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is external.
 * @member {Boolean} IsExternal
 */
MediaStream.prototype['IsExternal'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is external URL.
 * @member {Boolean} IsExternalUrl
 */
MediaStream.prototype['IsExternalUrl'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is forced.
 * @member {Boolean} IsForced
 */
MediaStream.prototype['IsForced'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is interlaced.
 * @member {Boolean} IsInterlaced
 */
MediaStream.prototype['IsInterlaced'] = undefined;

/**
 * @member {Boolean} IsTextSubtitleStream
 */
MediaStream.prototype['IsTextSubtitleStream'] = undefined;

/**
 * Gets or sets the language.
 * @member {String} Language
 */
MediaStream.prototype['Language'] = undefined;

/**
 * Gets or sets the level.
 * @member {Number} Level
 */
MediaStream.prototype['Level'] = undefined;

/**
 * @member {String} NalLengthSize
 */
MediaStream.prototype['NalLengthSize'] = undefined;

/**
 * Gets or sets the length of the packet.
 * @member {Number} PacketLength
 */
MediaStream.prototype['PacketLength'] = undefined;

/**
 * Gets or sets the filename.
 * @member {String} Path
 */
MediaStream.prototype['Path'] = undefined;

/**
 * Gets or sets the pixel format.
 * @member {String} PixelFormat
 */
MediaStream.prototype['PixelFormat'] = undefined;

/**
 * Gets or sets the profile.
 * @member {String} Profile
 */
MediaStream.prototype['Profile'] = undefined;

/**
 * Gets or sets the real frame rate.
 * @member {Number} RealFrameRate
 */
MediaStream.prototype['RealFrameRate'] = undefined;

/**
 * Gets or sets the reference frames.
 * @member {Number} RefFrames
 */
MediaStream.prototype['RefFrames'] = undefined;

/**
 * Gets or sets the sample rate.
 * @member {Number} SampleRate
 */
MediaStream.prototype['SampleRate'] = undefined;

/**
 * Gets or sets the score.
 * @member {Number} Score
 */
MediaStream.prototype['Score'] = undefined;

/**
 * Gets or sets a value indicating whether [supports external stream].
 * @member {Boolean} SupportsExternalStream
 */
MediaStream.prototype['SupportsExternalStream'] = undefined;

/**
 * Gets or sets the time base.
 * @member {String} TimeBase
 */
MediaStream.prototype['TimeBase'] = undefined;

/**
 * Gets or sets the title.
 * @member {String} Title
 */
MediaStream.prototype['Title'] = undefined;

/**
 * @member {module:model/MediaStreamType} Type
 */
MediaStream.prototype['Type'] = undefined;

/**
 * Gets or sets the video range.
 * @member {String} VideoRange
 */
MediaStream.prototype['VideoRange'] = undefined;

/**
 * Gets or sets the width.
 * @member {Number} Width
 */
MediaStream.prototype['Width'] = undefined;

/**
 * @member {String} localizedDefault
 */
MediaStream.prototype['localizedDefault'] = undefined;

/**
 * @member {String} localizedForced
 */
MediaStream.prototype['localizedForced'] = undefined;

/**
 * @member {String} localizedUndefined
 */
MediaStream.prototype['localizedUndefined'] = undefined;






export default MediaStream;

