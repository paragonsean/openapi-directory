/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageType from './ImageType';

/**
 * The ImageInfo model module.
 * @module model/ImageInfo
 * @version v1
 */
class ImageInfo {
    /**
     * Constructs a new <code>ImageInfo</code>.
     * Class ImageInfo.
     * @alias module:model/ImageInfo
     */
    constructor() { 
        
        ImageInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageInfo} obj Optional instance to populate.
     * @return {module:model/ImageInfo} The populated <code>ImageInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageInfo();

            if (data.hasOwnProperty('BlurHash')) {
                obj['BlurHash'] = ApiClient.convertToType(data['BlurHash'], 'String');
            }
            if (data.hasOwnProperty('Height')) {
                obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
            }
            if (data.hasOwnProperty('ImageIndex')) {
                obj['ImageIndex'] = ApiClient.convertToType(data['ImageIndex'], 'Number');
            }
            if (data.hasOwnProperty('ImageTag')) {
                obj['ImageTag'] = ApiClient.convertToType(data['ImageTag'], 'String');
            }
            if (data.hasOwnProperty('ImageType')) {
                obj['ImageType'] = ImageType.constructFromObject(data['ImageType']);
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'Number');
            }
            if (data.hasOwnProperty('Width')) {
                obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BlurHash'] && !(typeof data['BlurHash'] === 'string' || data['BlurHash'] instanceof String)) {
            throw new Error("Expected the field `BlurHash` to be a primitive type in the JSON string but got " + data['BlurHash']);
        }
        // ensure the json data is a string
        if (data['ImageTag'] && !(typeof data['ImageTag'] === 'string' || data['ImageTag'] instanceof String)) {
            throw new Error("Expected the field `ImageTag` to be a primitive type in the JSON string but got " + data['ImageTag']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }

        return true;
    }


}



/**
 * Gets or sets the blurhash.
 * @member {String} BlurHash
 */
ImageInfo.prototype['BlurHash'] = undefined;

/**
 * Gets or sets the height.
 * @member {Number} Height
 */
ImageInfo.prototype['Height'] = undefined;

/**
 * Gets or sets the index of the image.
 * @member {Number} ImageIndex
 */
ImageInfo.prototype['ImageIndex'] = undefined;

/**
 * Gets or sets the image tag.
 * @member {String} ImageTag
 */
ImageInfo.prototype['ImageTag'] = undefined;

/**
 * @member {module:model/ImageType} ImageType
 */
ImageInfo.prototype['ImageType'] = undefined;

/**
 * Gets or sets the path.
 * @member {String} Path
 */
ImageInfo.prototype['Path'] = undefined;

/**
 * Gets or sets the size.
 * @member {Number} Size
 */
ImageInfo.prototype['Size'] = undefined;

/**
 * Gets or sets the width.
 * @member {Number} Width
 */
ImageInfo.prototype['Width'] = undefined;






export default ImageInfo;

