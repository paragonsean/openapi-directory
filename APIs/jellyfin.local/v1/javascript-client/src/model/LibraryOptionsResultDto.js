/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LibraryOptionInfoDto from './LibraryOptionInfoDto';
import LibraryTypeOptionsDto from './LibraryTypeOptionsDto';

/**
 * The LibraryOptionsResultDto model module.
 * @module model/LibraryOptionsResultDto
 * @version v1
 */
class LibraryOptionsResultDto {
    /**
     * Constructs a new <code>LibraryOptionsResultDto</code>.
     * Library options result dto.
     * @alias module:model/LibraryOptionsResultDto
     */
    constructor() { 
        
        LibraryOptionsResultDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LibraryOptionsResultDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LibraryOptionsResultDto} obj Optional instance to populate.
     * @return {module:model/LibraryOptionsResultDto} The populated <code>LibraryOptionsResultDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LibraryOptionsResultDto();

            if (data.hasOwnProperty('MetadataReaders')) {
                obj['MetadataReaders'] = ApiClient.convertToType(data['MetadataReaders'], [LibraryOptionInfoDto]);
            }
            if (data.hasOwnProperty('MetadataSavers')) {
                obj['MetadataSavers'] = ApiClient.convertToType(data['MetadataSavers'], [LibraryOptionInfoDto]);
            }
            if (data.hasOwnProperty('SubtitleFetchers')) {
                obj['SubtitleFetchers'] = ApiClient.convertToType(data['SubtitleFetchers'], [LibraryOptionInfoDto]);
            }
            if (data.hasOwnProperty('TypeOptions')) {
                obj['TypeOptions'] = ApiClient.convertToType(data['TypeOptions'], [LibraryTypeOptionsDto]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LibraryOptionsResultDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LibraryOptionsResultDto</code>.
     */
    static validateJSON(data) {
        if (data['MetadataReaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MetadataReaders'])) {
                throw new Error("Expected the field `MetadataReaders` to be an array in the JSON data but got " + data['MetadataReaders']);
            }
            // validate the optional field `MetadataReaders` (array)
            for (const item of data['MetadataReaders']) {
                LibraryOptionInfoDto.validateJSON(item);
            };
        }
        if (data['MetadataSavers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MetadataSavers'])) {
                throw new Error("Expected the field `MetadataSavers` to be an array in the JSON data but got " + data['MetadataSavers']);
            }
            // validate the optional field `MetadataSavers` (array)
            for (const item of data['MetadataSavers']) {
                LibraryOptionInfoDto.validateJSON(item);
            };
        }
        if (data['SubtitleFetchers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SubtitleFetchers'])) {
                throw new Error("Expected the field `SubtitleFetchers` to be an array in the JSON data but got " + data['SubtitleFetchers']);
            }
            // validate the optional field `SubtitleFetchers` (array)
            for (const item of data['SubtitleFetchers']) {
                LibraryOptionInfoDto.validateJSON(item);
            };
        }
        if (data['TypeOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TypeOptions'])) {
                throw new Error("Expected the field `TypeOptions` to be an array in the JSON data but got " + data['TypeOptions']);
            }
            // validate the optional field `TypeOptions` (array)
            for (const item of data['TypeOptions']) {
                LibraryTypeOptionsDto.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Gets or sets the metadata readers.
 * @member {Array.<module:model/LibraryOptionInfoDto>} MetadataReaders
 */
LibraryOptionsResultDto.prototype['MetadataReaders'] = undefined;

/**
 * Gets or sets the metadata savers.
 * @member {Array.<module:model/LibraryOptionInfoDto>} MetadataSavers
 */
LibraryOptionsResultDto.prototype['MetadataSavers'] = undefined;

/**
 * Gets or sets the subtitle fetchers.
 * @member {Array.<module:model/LibraryOptionInfoDto>} SubtitleFetchers
 */
LibraryOptionsResultDto.prototype['SubtitleFetchers'] = undefined;

/**
 * Gets or sets the type options.
 * @member {Array.<module:model/LibraryTypeOptionsDto>} TypeOptions
 */
LibraryOptionsResultDto.prototype['TypeOptions'] = undefined;






export default LibraryOptionsResultDto;

