/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpHeaderInfo from './HttpHeaderInfo';

/**
 * The DeviceIdentification model module.
 * @module model/DeviceIdentification
 * @version v1
 */
class DeviceIdentification {
    /**
     * Constructs a new <code>DeviceIdentification</code>.
     * @alias module:model/DeviceIdentification
     */
    constructor() { 
        
        DeviceIdentification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceIdentification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceIdentification} obj Optional instance to populate.
     * @return {module:model/DeviceIdentification} The populated <code>DeviceIdentification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceIdentification();

            if (data.hasOwnProperty('FriendlyName')) {
                obj['FriendlyName'] = ApiClient.convertToType(data['FriendlyName'], 'String');
            }
            if (data.hasOwnProperty('Headers')) {
                obj['Headers'] = ApiClient.convertToType(data['Headers'], [HttpHeaderInfo]);
            }
            if (data.hasOwnProperty('Manufacturer')) {
                obj['Manufacturer'] = ApiClient.convertToType(data['Manufacturer'], 'String');
            }
            if (data.hasOwnProperty('ManufacturerUrl')) {
                obj['ManufacturerUrl'] = ApiClient.convertToType(data['ManufacturerUrl'], 'String');
            }
            if (data.hasOwnProperty('ModelDescription')) {
                obj['ModelDescription'] = ApiClient.convertToType(data['ModelDescription'], 'String');
            }
            if (data.hasOwnProperty('ModelName')) {
                obj['ModelName'] = ApiClient.convertToType(data['ModelName'], 'String');
            }
            if (data.hasOwnProperty('ModelNumber')) {
                obj['ModelNumber'] = ApiClient.convertToType(data['ModelNumber'], 'String');
            }
            if (data.hasOwnProperty('ModelUrl')) {
                obj['ModelUrl'] = ApiClient.convertToType(data['ModelUrl'], 'String');
            }
            if (data.hasOwnProperty('SerialNumber')) {
                obj['SerialNumber'] = ApiClient.convertToType(data['SerialNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceIdentification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceIdentification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['FriendlyName'] && !(typeof data['FriendlyName'] === 'string' || data['FriendlyName'] instanceof String)) {
            throw new Error("Expected the field `FriendlyName` to be a primitive type in the JSON string but got " + data['FriendlyName']);
        }
        if (data['Headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Headers'])) {
                throw new Error("Expected the field `Headers` to be an array in the JSON data but got " + data['Headers']);
            }
            // validate the optional field `Headers` (array)
            for (const item of data['Headers']) {
                HttpHeaderInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Manufacturer'] && !(typeof data['Manufacturer'] === 'string' || data['Manufacturer'] instanceof String)) {
            throw new Error("Expected the field `Manufacturer` to be a primitive type in the JSON string but got " + data['Manufacturer']);
        }
        // ensure the json data is a string
        if (data['ManufacturerUrl'] && !(typeof data['ManufacturerUrl'] === 'string' || data['ManufacturerUrl'] instanceof String)) {
            throw new Error("Expected the field `ManufacturerUrl` to be a primitive type in the JSON string but got " + data['ManufacturerUrl']);
        }
        // ensure the json data is a string
        if (data['ModelDescription'] && !(typeof data['ModelDescription'] === 'string' || data['ModelDescription'] instanceof String)) {
            throw new Error("Expected the field `ModelDescription` to be a primitive type in the JSON string but got " + data['ModelDescription']);
        }
        // ensure the json data is a string
        if (data['ModelName'] && !(typeof data['ModelName'] === 'string' || data['ModelName'] instanceof String)) {
            throw new Error("Expected the field `ModelName` to be a primitive type in the JSON string but got " + data['ModelName']);
        }
        // ensure the json data is a string
        if (data['ModelNumber'] && !(typeof data['ModelNumber'] === 'string' || data['ModelNumber'] instanceof String)) {
            throw new Error("Expected the field `ModelNumber` to be a primitive type in the JSON string but got " + data['ModelNumber']);
        }
        // ensure the json data is a string
        if (data['ModelUrl'] && !(typeof data['ModelUrl'] === 'string' || data['ModelUrl'] instanceof String)) {
            throw new Error("Expected the field `ModelUrl` to be a primitive type in the JSON string but got " + data['ModelUrl']);
        }
        // ensure the json data is a string
        if (data['SerialNumber'] && !(typeof data['SerialNumber'] === 'string' || data['SerialNumber'] instanceof String)) {
            throw new Error("Expected the field `SerialNumber` to be a primitive type in the JSON string but got " + data['SerialNumber']);
        }

        return true;
    }


}



/**
 * Gets or sets the name of the friendly.
 * @member {String} FriendlyName
 */
DeviceIdentification.prototype['FriendlyName'] = undefined;

/**
 * Gets or sets the headers.
 * @member {Array.<module:model/HttpHeaderInfo>} Headers
 */
DeviceIdentification.prototype['Headers'] = undefined;

/**
 * Gets or sets the manufacturer.
 * @member {String} Manufacturer
 */
DeviceIdentification.prototype['Manufacturer'] = undefined;

/**
 * Gets or sets the manufacturer URL.
 * @member {String} ManufacturerUrl
 */
DeviceIdentification.prototype['ManufacturerUrl'] = undefined;

/**
 * Gets or sets the model description.
 * @member {String} ModelDescription
 */
DeviceIdentification.prototype['ModelDescription'] = undefined;

/**
 * Gets or sets the name of the model.
 * @member {String} ModelName
 */
DeviceIdentification.prototype['ModelName'] = undefined;

/**
 * Gets or sets the model number.
 * @member {String} ModelNumber
 */
DeviceIdentification.prototype['ModelNumber'] = undefined;

/**
 * Gets or sets the model URL.
 * @member {String} ModelUrl
 */
DeviceIdentification.prototype['ModelUrl'] = undefined;

/**
 * Gets or sets the serial number.
 * @member {String} SerialNumber
 */
DeviceIdentification.prototype['SerialNumber'] = undefined;






export default DeviceIdentification;

