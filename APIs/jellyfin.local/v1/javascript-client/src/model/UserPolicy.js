/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessSchedule from './AccessSchedule';
import SyncPlayUserAccessType from './SyncPlayUserAccessType';
import UnratedItem from './UnratedItem';

/**
 * The UserPolicy model module.
 * @module model/UserPolicy
 * @version v1
 */
class UserPolicy {
    /**
     * Constructs a new <code>UserPolicy</code>.
     * @alias module:model/UserPolicy
     */
    constructor() { 
        
        UserPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserPolicy} obj Optional instance to populate.
     * @return {module:model/UserPolicy} The populated <code>UserPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserPolicy();

            if (data.hasOwnProperty('AccessSchedules')) {
                obj['AccessSchedules'] = ApiClient.convertToType(data['AccessSchedules'], [AccessSchedule]);
            }
            if (data.hasOwnProperty('AuthenticationProviderId')) {
                obj['AuthenticationProviderId'] = ApiClient.convertToType(data['AuthenticationProviderId'], 'String');
            }
            if (data.hasOwnProperty('BlockUnratedItems')) {
                obj['BlockUnratedItems'] = ApiClient.convertToType(data['BlockUnratedItems'], [UnratedItem]);
            }
            if (data.hasOwnProperty('BlockedChannels')) {
                obj['BlockedChannels'] = ApiClient.convertToType(data['BlockedChannels'], ['String']);
            }
            if (data.hasOwnProperty('BlockedMediaFolders')) {
                obj['BlockedMediaFolders'] = ApiClient.convertToType(data['BlockedMediaFolders'], ['String']);
            }
            if (data.hasOwnProperty('BlockedTags')) {
                obj['BlockedTags'] = ApiClient.convertToType(data['BlockedTags'], ['String']);
            }
            if (data.hasOwnProperty('EnableAllChannels')) {
                obj['EnableAllChannels'] = ApiClient.convertToType(data['EnableAllChannels'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableAllDevices')) {
                obj['EnableAllDevices'] = ApiClient.convertToType(data['EnableAllDevices'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableAllFolders')) {
                obj['EnableAllFolders'] = ApiClient.convertToType(data['EnableAllFolders'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableAudioPlaybackTranscoding')) {
                obj['EnableAudioPlaybackTranscoding'] = ApiClient.convertToType(data['EnableAudioPlaybackTranscoding'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableContentDeletion')) {
                obj['EnableContentDeletion'] = ApiClient.convertToType(data['EnableContentDeletion'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableContentDeletionFromFolders')) {
                obj['EnableContentDeletionFromFolders'] = ApiClient.convertToType(data['EnableContentDeletionFromFolders'], ['String']);
            }
            if (data.hasOwnProperty('EnableContentDownloading')) {
                obj['EnableContentDownloading'] = ApiClient.convertToType(data['EnableContentDownloading'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableLiveTvAccess')) {
                obj['EnableLiveTvAccess'] = ApiClient.convertToType(data['EnableLiveTvAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableLiveTvManagement')) {
                obj['EnableLiveTvManagement'] = ApiClient.convertToType(data['EnableLiveTvManagement'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableMediaConversion')) {
                obj['EnableMediaConversion'] = ApiClient.convertToType(data['EnableMediaConversion'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableMediaPlayback')) {
                obj['EnableMediaPlayback'] = ApiClient.convertToType(data['EnableMediaPlayback'], 'Boolean');
            }
            if (data.hasOwnProperty('EnablePlaybackRemuxing')) {
                obj['EnablePlaybackRemuxing'] = ApiClient.convertToType(data['EnablePlaybackRemuxing'], 'Boolean');
            }
            if (data.hasOwnProperty('EnablePublicSharing')) {
                obj['EnablePublicSharing'] = ApiClient.convertToType(data['EnablePublicSharing'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableRemoteAccess')) {
                obj['EnableRemoteAccess'] = ApiClient.convertToType(data['EnableRemoteAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableRemoteControlOfOtherUsers')) {
                obj['EnableRemoteControlOfOtherUsers'] = ApiClient.convertToType(data['EnableRemoteControlOfOtherUsers'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableSharedDeviceControl')) {
                obj['EnableSharedDeviceControl'] = ApiClient.convertToType(data['EnableSharedDeviceControl'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableSyncTranscoding')) {
                obj['EnableSyncTranscoding'] = ApiClient.convertToType(data['EnableSyncTranscoding'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableUserPreferenceAccess')) {
                obj['EnableUserPreferenceAccess'] = ApiClient.convertToType(data['EnableUserPreferenceAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableVideoPlaybackTranscoding')) {
                obj['EnableVideoPlaybackTranscoding'] = ApiClient.convertToType(data['EnableVideoPlaybackTranscoding'], 'Boolean');
            }
            if (data.hasOwnProperty('EnabledChannels')) {
                obj['EnabledChannels'] = ApiClient.convertToType(data['EnabledChannels'], ['String']);
            }
            if (data.hasOwnProperty('EnabledDevices')) {
                obj['EnabledDevices'] = ApiClient.convertToType(data['EnabledDevices'], ['String']);
            }
            if (data.hasOwnProperty('EnabledFolders')) {
                obj['EnabledFolders'] = ApiClient.convertToType(data['EnabledFolders'], ['String']);
            }
            if (data.hasOwnProperty('ForceRemoteSourceTranscoding')) {
                obj['ForceRemoteSourceTranscoding'] = ApiClient.convertToType(data['ForceRemoteSourceTranscoding'], 'Boolean');
            }
            if (data.hasOwnProperty('InvalidLoginAttemptCount')) {
                obj['InvalidLoginAttemptCount'] = ApiClient.convertToType(data['InvalidLoginAttemptCount'], 'Number');
            }
            if (data.hasOwnProperty('IsAdministrator')) {
                obj['IsAdministrator'] = ApiClient.convertToType(data['IsAdministrator'], 'Boolean');
            }
            if (data.hasOwnProperty('IsDisabled')) {
                obj['IsDisabled'] = ApiClient.convertToType(data['IsDisabled'], 'Boolean');
            }
            if (data.hasOwnProperty('IsHidden')) {
                obj['IsHidden'] = ApiClient.convertToType(data['IsHidden'], 'Boolean');
            }
            if (data.hasOwnProperty('LoginAttemptsBeforeLockout')) {
                obj['LoginAttemptsBeforeLockout'] = ApiClient.convertToType(data['LoginAttemptsBeforeLockout'], 'Number');
            }
            if (data.hasOwnProperty('MaxActiveSessions')) {
                obj['MaxActiveSessions'] = ApiClient.convertToType(data['MaxActiveSessions'], 'Number');
            }
            if (data.hasOwnProperty('MaxParentalRating')) {
                obj['MaxParentalRating'] = ApiClient.convertToType(data['MaxParentalRating'], 'Number');
            }
            if (data.hasOwnProperty('PasswordResetProviderId')) {
                obj['PasswordResetProviderId'] = ApiClient.convertToType(data['PasswordResetProviderId'], 'String');
            }
            if (data.hasOwnProperty('RemoteClientBitrateLimit')) {
                obj['RemoteClientBitrateLimit'] = ApiClient.convertToType(data['RemoteClientBitrateLimit'], 'Number');
            }
            if (data.hasOwnProperty('SyncPlayAccess')) {
                obj['SyncPlayAccess'] = SyncPlayUserAccessType.constructFromObject(data['SyncPlayAccess']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserPolicy</code>.
     */
    static validateJSON(data) {
        if (data['AccessSchedules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AccessSchedules'])) {
                throw new Error("Expected the field `AccessSchedules` to be an array in the JSON data but got " + data['AccessSchedules']);
            }
            // validate the optional field `AccessSchedules` (array)
            for (const item of data['AccessSchedules']) {
                AccessSchedule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['AuthenticationProviderId'] && !(typeof data['AuthenticationProviderId'] === 'string' || data['AuthenticationProviderId'] instanceof String)) {
            throw new Error("Expected the field `AuthenticationProviderId` to be a primitive type in the JSON string but got " + data['AuthenticationProviderId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['BlockUnratedItems'])) {
            throw new Error("Expected the field `BlockUnratedItems` to be an array in the JSON data but got " + data['BlockUnratedItems']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['BlockedChannels'])) {
            throw new Error("Expected the field `BlockedChannels` to be an array in the JSON data but got " + data['BlockedChannels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['BlockedMediaFolders'])) {
            throw new Error("Expected the field `BlockedMediaFolders` to be an array in the JSON data but got " + data['BlockedMediaFolders']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['BlockedTags'])) {
            throw new Error("Expected the field `BlockedTags` to be an array in the JSON data but got " + data['BlockedTags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['EnableContentDeletionFromFolders'])) {
            throw new Error("Expected the field `EnableContentDeletionFromFolders` to be an array in the JSON data but got " + data['EnableContentDeletionFromFolders']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['EnabledChannels'])) {
            throw new Error("Expected the field `EnabledChannels` to be an array in the JSON data but got " + data['EnabledChannels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['EnabledDevices'])) {
            throw new Error("Expected the field `EnabledDevices` to be an array in the JSON data but got " + data['EnabledDevices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['EnabledFolders'])) {
            throw new Error("Expected the field `EnabledFolders` to be an array in the JSON data but got " + data['EnabledFolders']);
        }
        // ensure the json data is a string
        if (data['PasswordResetProviderId'] && !(typeof data['PasswordResetProviderId'] === 'string' || data['PasswordResetProviderId'] instanceof String)) {
            throw new Error("Expected the field `PasswordResetProviderId` to be a primitive type in the JSON string but got " + data['PasswordResetProviderId']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/AccessSchedule>} AccessSchedules
 */
UserPolicy.prototype['AccessSchedules'] = undefined;

/**
 * @member {String} AuthenticationProviderId
 */
UserPolicy.prototype['AuthenticationProviderId'] = undefined;

/**
 * @member {Array.<module:model/UnratedItem>} BlockUnratedItems
 */
UserPolicy.prototype['BlockUnratedItems'] = undefined;

/**
 * @member {Array.<String>} BlockedChannels
 */
UserPolicy.prototype['BlockedChannels'] = undefined;

/**
 * @member {Array.<String>} BlockedMediaFolders
 */
UserPolicy.prototype['BlockedMediaFolders'] = undefined;

/**
 * @member {Array.<String>} BlockedTags
 */
UserPolicy.prototype['BlockedTags'] = undefined;

/**
 * @member {Boolean} EnableAllChannels
 */
UserPolicy.prototype['EnableAllChannels'] = undefined;

/**
 * @member {Boolean} EnableAllDevices
 */
UserPolicy.prototype['EnableAllDevices'] = undefined;

/**
 * @member {Boolean} EnableAllFolders
 */
UserPolicy.prototype['EnableAllFolders'] = undefined;

/**
 * @member {Boolean} EnableAudioPlaybackTranscoding
 */
UserPolicy.prototype['EnableAudioPlaybackTranscoding'] = undefined;

/**
 * @member {Boolean} EnableContentDeletion
 */
UserPolicy.prototype['EnableContentDeletion'] = undefined;

/**
 * @member {Array.<String>} EnableContentDeletionFromFolders
 */
UserPolicy.prototype['EnableContentDeletionFromFolders'] = undefined;

/**
 * @member {Boolean} EnableContentDownloading
 */
UserPolicy.prototype['EnableContentDownloading'] = undefined;

/**
 * @member {Boolean} EnableLiveTvAccess
 */
UserPolicy.prototype['EnableLiveTvAccess'] = undefined;

/**
 * @member {Boolean} EnableLiveTvManagement
 */
UserPolicy.prototype['EnableLiveTvManagement'] = undefined;

/**
 * @member {Boolean} EnableMediaConversion
 */
UserPolicy.prototype['EnableMediaConversion'] = undefined;

/**
 * @member {Boolean} EnableMediaPlayback
 */
UserPolicy.prototype['EnableMediaPlayback'] = undefined;

/**
 * @member {Boolean} EnablePlaybackRemuxing
 */
UserPolicy.prototype['EnablePlaybackRemuxing'] = undefined;

/**
 * @member {Boolean} EnablePublicSharing
 */
UserPolicy.prototype['EnablePublicSharing'] = undefined;

/**
 * @member {Boolean} EnableRemoteAccess
 */
UserPolicy.prototype['EnableRemoteAccess'] = undefined;

/**
 * @member {Boolean} EnableRemoteControlOfOtherUsers
 */
UserPolicy.prototype['EnableRemoteControlOfOtherUsers'] = undefined;

/**
 * @member {Boolean} EnableSharedDeviceControl
 */
UserPolicy.prototype['EnableSharedDeviceControl'] = undefined;

/**
 * Gets or sets a value indicating whether [enable synchronize].
 * @member {Boolean} EnableSyncTranscoding
 */
UserPolicy.prototype['EnableSyncTranscoding'] = undefined;

/**
 * @member {Boolean} EnableUserPreferenceAccess
 */
UserPolicy.prototype['EnableUserPreferenceAccess'] = undefined;

/**
 * @member {Boolean} EnableVideoPlaybackTranscoding
 */
UserPolicy.prototype['EnableVideoPlaybackTranscoding'] = undefined;

/**
 * @member {Array.<String>} EnabledChannels
 */
UserPolicy.prototype['EnabledChannels'] = undefined;

/**
 * @member {Array.<String>} EnabledDevices
 */
UserPolicy.prototype['EnabledDevices'] = undefined;

/**
 * @member {Array.<String>} EnabledFolders
 */
UserPolicy.prototype['EnabledFolders'] = undefined;

/**
 * @member {Boolean} ForceRemoteSourceTranscoding
 */
UserPolicy.prototype['ForceRemoteSourceTranscoding'] = undefined;

/**
 * @member {Number} InvalidLoginAttemptCount
 */
UserPolicy.prototype['InvalidLoginAttemptCount'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is administrator.
 * @member {Boolean} IsAdministrator
 */
UserPolicy.prototype['IsAdministrator'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is disabled.
 * @member {Boolean} IsDisabled
 */
UserPolicy.prototype['IsDisabled'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is hidden.
 * @member {Boolean} IsHidden
 */
UserPolicy.prototype['IsHidden'] = undefined;

/**
 * @member {Number} LoginAttemptsBeforeLockout
 */
UserPolicy.prototype['LoginAttemptsBeforeLockout'] = undefined;

/**
 * @member {Number} MaxActiveSessions
 */
UserPolicy.prototype['MaxActiveSessions'] = undefined;

/**
 * Gets or sets the max parental rating.
 * @member {Number} MaxParentalRating
 */
UserPolicy.prototype['MaxParentalRating'] = undefined;

/**
 * @member {String} PasswordResetProviderId
 */
UserPolicy.prototype['PasswordResetProviderId'] = undefined;

/**
 * @member {Number} RemoteClientBitrateLimit
 */
UserPolicy.prototype['RemoteClientBitrateLimit'] = undefined;

/**
 * @member {module:model/SyncPlayUserAccessType} SyncPlayAccess
 */
UserPolicy.prototype['SyncPlayAccess'] = undefined;






export default UserPolicy;

