/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseItemDto from './BaseItemDto';
import PlayMethod from './PlayMethod';
import QueueItem from './QueueItem';
import RepeatMode from './RepeatMode';

/**
 * The PlaybackStartInfo model module.
 * @module model/PlaybackStartInfo
 * @version v1
 */
class PlaybackStartInfo {
    /**
     * Constructs a new <code>PlaybackStartInfo</code>.
     * Class PlaybackStartInfo.
     * @alias module:model/PlaybackStartInfo
     */
    constructor() { 
        
        PlaybackStartInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlaybackStartInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaybackStartInfo} obj Optional instance to populate.
     * @return {module:model/PlaybackStartInfo} The populated <code>PlaybackStartInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlaybackStartInfo();

            if (data.hasOwnProperty('AspectRatio')) {
                obj['AspectRatio'] = ApiClient.convertToType(data['AspectRatio'], 'String');
            }
            if (data.hasOwnProperty('AudioStreamIndex')) {
                obj['AudioStreamIndex'] = ApiClient.convertToType(data['AudioStreamIndex'], 'Number');
            }
            if (data.hasOwnProperty('Brightness')) {
                obj['Brightness'] = ApiClient.convertToType(data['Brightness'], 'Number');
            }
            if (data.hasOwnProperty('CanSeek')) {
                obj['CanSeek'] = ApiClient.convertToType(data['CanSeek'], 'Boolean');
            }
            if (data.hasOwnProperty('IsMuted')) {
                obj['IsMuted'] = ApiClient.convertToType(data['IsMuted'], 'Boolean');
            }
            if (data.hasOwnProperty('IsPaused')) {
                obj['IsPaused'] = ApiClient.convertToType(data['IsPaused'], 'Boolean');
            }
            if (data.hasOwnProperty('Item')) {
                obj['Item'] = BaseItemDto.constructFromObject(data['Item']);
            }
            if (data.hasOwnProperty('ItemId')) {
                obj['ItemId'] = ApiClient.convertToType(data['ItemId'], 'String');
            }
            if (data.hasOwnProperty('LiveStreamId')) {
                obj['LiveStreamId'] = ApiClient.convertToType(data['LiveStreamId'], 'String');
            }
            if (data.hasOwnProperty('MediaSourceId')) {
                obj['MediaSourceId'] = ApiClient.convertToType(data['MediaSourceId'], 'String');
            }
            if (data.hasOwnProperty('NowPlayingQueue')) {
                obj['NowPlayingQueue'] = ApiClient.convertToType(data['NowPlayingQueue'], [QueueItem]);
            }
            if (data.hasOwnProperty('PlayMethod')) {
                obj['PlayMethod'] = PlayMethod.constructFromObject(data['PlayMethod']);
            }
            if (data.hasOwnProperty('PlaySessionId')) {
                obj['PlaySessionId'] = ApiClient.convertToType(data['PlaySessionId'], 'String');
            }
            if (data.hasOwnProperty('PlaybackStartTimeTicks')) {
                obj['PlaybackStartTimeTicks'] = ApiClient.convertToType(data['PlaybackStartTimeTicks'], 'Number');
            }
            if (data.hasOwnProperty('PlaylistItemId')) {
                obj['PlaylistItemId'] = ApiClient.convertToType(data['PlaylistItemId'], 'String');
            }
            if (data.hasOwnProperty('PositionTicks')) {
                obj['PositionTicks'] = ApiClient.convertToType(data['PositionTicks'], 'Number');
            }
            if (data.hasOwnProperty('RepeatMode')) {
                obj['RepeatMode'] = RepeatMode.constructFromObject(data['RepeatMode']);
            }
            if (data.hasOwnProperty('SessionId')) {
                obj['SessionId'] = ApiClient.convertToType(data['SessionId'], 'String');
            }
            if (data.hasOwnProperty('SubtitleStreamIndex')) {
                obj['SubtitleStreamIndex'] = ApiClient.convertToType(data['SubtitleStreamIndex'], 'Number');
            }
            if (data.hasOwnProperty('VolumeLevel')) {
                obj['VolumeLevel'] = ApiClient.convertToType(data['VolumeLevel'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlaybackStartInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlaybackStartInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AspectRatio'] && !(typeof data['AspectRatio'] === 'string' || data['AspectRatio'] instanceof String)) {
            throw new Error("Expected the field `AspectRatio` to be a primitive type in the JSON string but got " + data['AspectRatio']);
        }
        // validate the optional field `Item`
        if (data['Item']) { // data not null
          BaseItemDto.validateJSON(data['Item']);
        }
        // ensure the json data is a string
        if (data['ItemId'] && !(typeof data['ItemId'] === 'string' || data['ItemId'] instanceof String)) {
            throw new Error("Expected the field `ItemId` to be a primitive type in the JSON string but got " + data['ItemId']);
        }
        // ensure the json data is a string
        if (data['LiveStreamId'] && !(typeof data['LiveStreamId'] === 'string' || data['LiveStreamId'] instanceof String)) {
            throw new Error("Expected the field `LiveStreamId` to be a primitive type in the JSON string but got " + data['LiveStreamId']);
        }
        // ensure the json data is a string
        if (data['MediaSourceId'] && !(typeof data['MediaSourceId'] === 'string' || data['MediaSourceId'] instanceof String)) {
            throw new Error("Expected the field `MediaSourceId` to be a primitive type in the JSON string but got " + data['MediaSourceId']);
        }
        if (data['NowPlayingQueue']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['NowPlayingQueue'])) {
                throw new Error("Expected the field `NowPlayingQueue` to be an array in the JSON data but got " + data['NowPlayingQueue']);
            }
            // validate the optional field `NowPlayingQueue` (array)
            for (const item of data['NowPlayingQueue']) {
                QueueItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PlaySessionId'] && !(typeof data['PlaySessionId'] === 'string' || data['PlaySessionId'] instanceof String)) {
            throw new Error("Expected the field `PlaySessionId` to be a primitive type in the JSON string but got " + data['PlaySessionId']);
        }
        // ensure the json data is a string
        if (data['PlaylistItemId'] && !(typeof data['PlaylistItemId'] === 'string' || data['PlaylistItemId'] instanceof String)) {
            throw new Error("Expected the field `PlaylistItemId` to be a primitive type in the JSON string but got " + data['PlaylistItemId']);
        }
        // ensure the json data is a string
        if (data['SessionId'] && !(typeof data['SessionId'] === 'string' || data['SessionId'] instanceof String)) {
            throw new Error("Expected the field `SessionId` to be a primitive type in the JSON string but got " + data['SessionId']);
        }

        return true;
    }


}



/**
 * @member {String} AspectRatio
 */
PlaybackStartInfo.prototype['AspectRatio'] = undefined;

/**
 * Gets or sets the index of the audio stream.
 * @member {Number} AudioStreamIndex
 */
PlaybackStartInfo.prototype['AudioStreamIndex'] = undefined;

/**
 * @member {Number} Brightness
 */
PlaybackStartInfo.prototype['Brightness'] = undefined;

/**
 * Gets or sets a value indicating whether this instance can seek.
 * @member {Boolean} CanSeek
 */
PlaybackStartInfo.prototype['CanSeek'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is muted.
 * @member {Boolean} IsMuted
 */
PlaybackStartInfo.prototype['IsMuted'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is paused.
 * @member {Boolean} IsPaused
 */
PlaybackStartInfo.prototype['IsPaused'] = undefined;

/**
 * @member {module:model/BaseItemDto} Item
 */
PlaybackStartInfo.prototype['Item'] = undefined;

/**
 * Gets or sets the item identifier.
 * @member {String} ItemId
 */
PlaybackStartInfo.prototype['ItemId'] = undefined;

/**
 * Gets or sets the live stream identifier.
 * @member {String} LiveStreamId
 */
PlaybackStartInfo.prototype['LiveStreamId'] = undefined;

/**
 * Gets or sets the media version identifier.
 * @member {String} MediaSourceId
 */
PlaybackStartInfo.prototype['MediaSourceId'] = undefined;

/**
 * @member {Array.<module:model/QueueItem>} NowPlayingQueue
 */
PlaybackStartInfo.prototype['NowPlayingQueue'] = undefined;

/**
 * @member {module:model/PlayMethod} PlayMethod
 */
PlaybackStartInfo.prototype['PlayMethod'] = undefined;

/**
 * Gets or sets the play session identifier.
 * @member {String} PlaySessionId
 */
PlaybackStartInfo.prototype['PlaySessionId'] = undefined;

/**
 * @member {Number} PlaybackStartTimeTicks
 */
PlaybackStartInfo.prototype['PlaybackStartTimeTicks'] = undefined;

/**
 * @member {String} PlaylistItemId
 */
PlaybackStartInfo.prototype['PlaylistItemId'] = undefined;

/**
 * Gets or sets the position ticks.
 * @member {Number} PositionTicks
 */
PlaybackStartInfo.prototype['PositionTicks'] = undefined;

/**
 * @member {module:model/RepeatMode} RepeatMode
 */
PlaybackStartInfo.prototype['RepeatMode'] = undefined;

/**
 * Gets or sets the session id.
 * @member {String} SessionId
 */
PlaybackStartInfo.prototype['SessionId'] = undefined;

/**
 * Gets or sets the index of the subtitle stream.
 * @member {Number} SubtitleStreamIndex
 */
PlaybackStartInfo.prototype['SubtitleStreamIndex'] = undefined;

/**
 * Gets or sets the volume level.
 * @member {Number} VolumeLevel
 */
PlaybackStartInfo.prototype['VolumeLevel'] = undefined;






export default PlaybackStartInfo;

