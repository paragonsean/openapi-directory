/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DlnaProfileType from './DlnaProfileType';
import ProfileCondition from './ProfileCondition';

/**
 * The ResponseProfile model module.
 * @module model/ResponseProfile
 * @version v1
 */
class ResponseProfile {
    /**
     * Constructs a new <code>ResponseProfile</code>.
     * @alias module:model/ResponseProfile
     */
    constructor() { 
        
        ResponseProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResponseProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseProfile} obj Optional instance to populate.
     * @return {module:model/ResponseProfile} The populated <code>ResponseProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseProfile();

            if (data.hasOwnProperty('AudioCodec')) {
                obj['AudioCodec'] = ApiClient.convertToType(data['AudioCodec'], 'String');
            }
            if (data.hasOwnProperty('Conditions')) {
                obj['Conditions'] = ApiClient.convertToType(data['Conditions'], [ProfileCondition]);
            }
            if (data.hasOwnProperty('Container')) {
                obj['Container'] = ApiClient.convertToType(data['Container'], 'String');
            }
            if (data.hasOwnProperty('MimeType')) {
                obj['MimeType'] = ApiClient.convertToType(data['MimeType'], 'String');
            }
            if (data.hasOwnProperty('OrgPn')) {
                obj['OrgPn'] = ApiClient.convertToType(data['OrgPn'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = DlnaProfileType.constructFromObject(data['Type']);
            }
            if (data.hasOwnProperty('VideoCodec')) {
                obj['VideoCodec'] = ApiClient.convertToType(data['VideoCodec'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AudioCodec'] && !(typeof data['AudioCodec'] === 'string' || data['AudioCodec'] instanceof String)) {
            throw new Error("Expected the field `AudioCodec` to be a primitive type in the JSON string but got " + data['AudioCodec']);
        }
        if (data['Conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Conditions'])) {
                throw new Error("Expected the field `Conditions` to be an array in the JSON data but got " + data['Conditions']);
            }
            // validate the optional field `Conditions` (array)
            for (const item of data['Conditions']) {
                ProfileCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Container'] && !(typeof data['Container'] === 'string' || data['Container'] instanceof String)) {
            throw new Error("Expected the field `Container` to be a primitive type in the JSON string but got " + data['Container']);
        }
        // ensure the json data is a string
        if (data['MimeType'] && !(typeof data['MimeType'] === 'string' || data['MimeType'] instanceof String)) {
            throw new Error("Expected the field `MimeType` to be a primitive type in the JSON string but got " + data['MimeType']);
        }
        // ensure the json data is a string
        if (data['OrgPn'] && !(typeof data['OrgPn'] === 'string' || data['OrgPn'] instanceof String)) {
            throw new Error("Expected the field `OrgPn` to be a primitive type in the JSON string but got " + data['OrgPn']);
        }
        // ensure the json data is a string
        if (data['VideoCodec'] && !(typeof data['VideoCodec'] === 'string' || data['VideoCodec'] instanceof String)) {
            throw new Error("Expected the field `VideoCodec` to be a primitive type in the JSON string but got " + data['VideoCodec']);
        }

        return true;
    }


}



/**
 * @member {String} AudioCodec
 */
ResponseProfile.prototype['AudioCodec'] = undefined;

/**
 * @member {Array.<module:model/ProfileCondition>} Conditions
 */
ResponseProfile.prototype['Conditions'] = undefined;

/**
 * @member {String} Container
 */
ResponseProfile.prototype['Container'] = undefined;

/**
 * @member {String} MimeType
 */
ResponseProfile.prototype['MimeType'] = undefined;

/**
 * @member {String} OrgPn
 */
ResponseProfile.prototype['OrgPn'] = undefined;

/**
 * @member {module:model/DlnaProfileType} Type
 */
ResponseProfile.prototype['Type'] = undefined;

/**
 * @member {String} VideoCodec
 */
ResponseProfile.prototype['VideoCodec'] = undefined;






export default ResponseProfile;

