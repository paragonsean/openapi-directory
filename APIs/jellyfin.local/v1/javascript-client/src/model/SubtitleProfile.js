/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubtitleDeliveryMethod from './SubtitleDeliveryMethod';

/**
 * The SubtitleProfile model module.
 * @module model/SubtitleProfile
 * @version v1
 */
class SubtitleProfile {
    /**
     * Constructs a new <code>SubtitleProfile</code>.
     * @alias module:model/SubtitleProfile
     */
    constructor() { 
        
        SubtitleProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubtitleProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubtitleProfile} obj Optional instance to populate.
     * @return {module:model/SubtitleProfile} The populated <code>SubtitleProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubtitleProfile();

            if (data.hasOwnProperty('Container')) {
                obj['Container'] = ApiClient.convertToType(data['Container'], 'String');
            }
            if (data.hasOwnProperty('DidlMode')) {
                obj['DidlMode'] = ApiClient.convertToType(data['DidlMode'], 'String');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], 'String');
            }
            if (data.hasOwnProperty('Language')) {
                obj['Language'] = ApiClient.convertToType(data['Language'], 'String');
            }
            if (data.hasOwnProperty('Method')) {
                obj['Method'] = SubtitleDeliveryMethod.constructFromObject(data['Method']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubtitleProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubtitleProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Container'] && !(typeof data['Container'] === 'string' || data['Container'] instanceof String)) {
            throw new Error("Expected the field `Container` to be a primitive type in the JSON string but got " + data['Container']);
        }
        // ensure the json data is a string
        if (data['DidlMode'] && !(typeof data['DidlMode'] === 'string' || data['DidlMode'] instanceof String)) {
            throw new Error("Expected the field `DidlMode` to be a primitive type in the JSON string but got " + data['DidlMode']);
        }
        // ensure the json data is a string
        if (data['Format'] && !(typeof data['Format'] === 'string' || data['Format'] instanceof String)) {
            throw new Error("Expected the field `Format` to be a primitive type in the JSON string but got " + data['Format']);
        }
        // ensure the json data is a string
        if (data['Language'] && !(typeof data['Language'] === 'string' || data['Language'] instanceof String)) {
            throw new Error("Expected the field `Language` to be a primitive type in the JSON string but got " + data['Language']);
        }

        return true;
    }


}



/**
 * @member {String} Container
 */
SubtitleProfile.prototype['Container'] = undefined;

/**
 * @member {String} DidlMode
 */
SubtitleProfile.prototype['DidlMode'] = undefined;

/**
 * @member {String} Format
 */
SubtitleProfile.prototype['Format'] = undefined;

/**
 * @member {String} Language
 */
SubtitleProfile.prototype['Language'] = undefined;

/**
 * @member {module:model/SubtitleDeliveryMethod} Method
 */
SubtitleProfile.prototype['Method'] = undefined;






export default SubtitleProfile;

