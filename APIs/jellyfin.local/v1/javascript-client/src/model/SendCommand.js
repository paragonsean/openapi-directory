/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SendCommandType from './SendCommandType';

/**
 * The SendCommand model module.
 * @module model/SendCommand
 * @version v1
 */
class SendCommand {
    /**
     * Constructs a new <code>SendCommand</code>.
     * Class SendCommand.
     * @alias module:model/SendCommand
     */
    constructor() { 
        
        SendCommand.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SendCommand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendCommand} obj Optional instance to populate.
     * @return {module:model/SendCommand} The populated <code>SendCommand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendCommand();

            if (data.hasOwnProperty('Command')) {
                obj['Command'] = SendCommandType.constructFromObject(data['Command']);
            }
            if (data.hasOwnProperty('EmittedAt')) {
                obj['EmittedAt'] = ApiClient.convertToType(data['EmittedAt'], 'Date');
            }
            if (data.hasOwnProperty('GroupId')) {
                obj['GroupId'] = ApiClient.convertToType(data['GroupId'], 'String');
            }
            if (data.hasOwnProperty('PlaylistItemId')) {
                obj['PlaylistItemId'] = ApiClient.convertToType(data['PlaylistItemId'], 'String');
            }
            if (data.hasOwnProperty('PositionTicks')) {
                obj['PositionTicks'] = ApiClient.convertToType(data['PositionTicks'], 'Number');
            }
            if (data.hasOwnProperty('When')) {
                obj['When'] = ApiClient.convertToType(data['When'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendCommand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendCommand</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['GroupId'] && !(typeof data['GroupId'] === 'string' || data['GroupId'] instanceof String)) {
            throw new Error("Expected the field `GroupId` to be a primitive type in the JSON string but got " + data['GroupId']);
        }
        // ensure the json data is a string
        if (data['PlaylistItemId'] && !(typeof data['PlaylistItemId'] === 'string' || data['PlaylistItemId'] instanceof String)) {
            throw new Error("Expected the field `PlaylistItemId` to be a primitive type in the JSON string but got " + data['PlaylistItemId']);
        }

        return true;
    }


}



/**
 * @member {module:model/SendCommandType} Command
 */
SendCommand.prototype['Command'] = undefined;

/**
 * Gets the UTC time when this command has been emitted.
 * @member {Date} EmittedAt
 */
SendCommand.prototype['EmittedAt'] = undefined;

/**
 * Gets the group identifier.
 * @member {String} GroupId
 */
SendCommand.prototype['GroupId'] = undefined;

/**
 * Gets the playlist identifier of the playing item.
 * @member {String} PlaylistItemId
 */
SendCommand.prototype['PlaylistItemId'] = undefined;

/**
 * Gets the position ticks.
 * @member {Number} PositionTicks
 */
SendCommand.prototype['PositionTicks'] = undefined;

/**
 * Gets or sets the UTC time when to execute the command.
 * @member {Date} When
 */
SendCommand.prototype['When'] = undefined;






export default SendCommand;

