/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseItem from './BaseItem';
import BaseItemDto from './BaseItemDto';
import ClientCapabilities from './ClientCapabilities';
import GeneralCommandType from './GeneralCommandType';
import PlayerStateInfo from './PlayerStateInfo';
import QueueItem from './QueueItem';
import SessionUserInfo from './SessionUserInfo';
import TranscodingInfo from './TranscodingInfo';

/**
 * The SessionInfo model module.
 * @module model/SessionInfo
 * @version v1
 */
class SessionInfo {
    /**
     * Constructs a new <code>SessionInfo</code>.
     * Class SessionInfo.
     * @alias module:model/SessionInfo
     */
    constructor() { 
        
        SessionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SessionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SessionInfo} obj Optional instance to populate.
     * @return {module:model/SessionInfo} The populated <code>SessionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SessionInfo();

            if (data.hasOwnProperty('AdditionalUsers')) {
                obj['AdditionalUsers'] = ApiClient.convertToType(data['AdditionalUsers'], [SessionUserInfo]);
            }
            if (data.hasOwnProperty('ApplicationVersion')) {
                obj['ApplicationVersion'] = ApiClient.convertToType(data['ApplicationVersion'], 'String');
            }
            if (data.hasOwnProperty('Capabilities')) {
                obj['Capabilities'] = ClientCapabilities.constructFromObject(data['Capabilities']);
            }
            if (data.hasOwnProperty('Client')) {
                obj['Client'] = ApiClient.convertToType(data['Client'], 'String');
            }
            if (data.hasOwnProperty('DeviceId')) {
                obj['DeviceId'] = ApiClient.convertToType(data['DeviceId'], 'String');
            }
            if (data.hasOwnProperty('DeviceName')) {
                obj['DeviceName'] = ApiClient.convertToType(data['DeviceName'], 'String');
            }
            if (data.hasOwnProperty('DeviceType')) {
                obj['DeviceType'] = ApiClient.convertToType(data['DeviceType'], 'String');
            }
            if (data.hasOwnProperty('FullNowPlayingItem')) {
                obj['FullNowPlayingItem'] = BaseItem.constructFromObject(data['FullNowPlayingItem']);
            }
            if (data.hasOwnProperty('HasCustomDeviceName')) {
                obj['HasCustomDeviceName'] = ApiClient.convertToType(data['HasCustomDeviceName'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('IsActive')) {
                obj['IsActive'] = ApiClient.convertToType(data['IsActive'], 'Boolean');
            }
            if (data.hasOwnProperty('LastActivityDate')) {
                obj['LastActivityDate'] = ApiClient.convertToType(data['LastActivityDate'], 'Date');
            }
            if (data.hasOwnProperty('LastPlaybackCheckIn')) {
                obj['LastPlaybackCheckIn'] = ApiClient.convertToType(data['LastPlaybackCheckIn'], 'Date');
            }
            if (data.hasOwnProperty('NowPlayingItem')) {
                obj['NowPlayingItem'] = BaseItemDto.constructFromObject(data['NowPlayingItem']);
            }
            if (data.hasOwnProperty('NowPlayingQueue')) {
                obj['NowPlayingQueue'] = ApiClient.convertToType(data['NowPlayingQueue'], [QueueItem]);
            }
            if (data.hasOwnProperty('NowViewingItem')) {
                obj['NowViewingItem'] = BaseItemDto.constructFromObject(data['NowViewingItem']);
            }
            if (data.hasOwnProperty('PlayState')) {
                obj['PlayState'] = PlayerStateInfo.constructFromObject(data['PlayState']);
            }
            if (data.hasOwnProperty('PlayableMediaTypes')) {
                obj['PlayableMediaTypes'] = ApiClient.convertToType(data['PlayableMediaTypes'], ['String']);
            }
            if (data.hasOwnProperty('PlaylistItemId')) {
                obj['PlaylistItemId'] = ApiClient.convertToType(data['PlaylistItemId'], 'String');
            }
            if (data.hasOwnProperty('RemoteEndPoint')) {
                obj['RemoteEndPoint'] = ApiClient.convertToType(data['RemoteEndPoint'], 'String');
            }
            if (data.hasOwnProperty('ServerId')) {
                obj['ServerId'] = ApiClient.convertToType(data['ServerId'], 'String');
            }
            if (data.hasOwnProperty('SupportedCommands')) {
                obj['SupportedCommands'] = ApiClient.convertToType(data['SupportedCommands'], [GeneralCommandType]);
            }
            if (data.hasOwnProperty('SupportsMediaControl')) {
                obj['SupportsMediaControl'] = ApiClient.convertToType(data['SupportsMediaControl'], 'Boolean');
            }
            if (data.hasOwnProperty('SupportsRemoteControl')) {
                obj['SupportsRemoteControl'] = ApiClient.convertToType(data['SupportsRemoteControl'], 'Boolean');
            }
            if (data.hasOwnProperty('TranscodingInfo')) {
                obj['TranscodingInfo'] = TranscodingInfo.constructFromObject(data['TranscodingInfo']);
            }
            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'String');
            }
            if (data.hasOwnProperty('UserName')) {
                obj['UserName'] = ApiClient.convertToType(data['UserName'], 'String');
            }
            if (data.hasOwnProperty('UserPrimaryImageTag')) {
                obj['UserPrimaryImageTag'] = ApiClient.convertToType(data['UserPrimaryImageTag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SessionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SessionInfo</code>.
     */
    static validateJSON(data) {
        if (data['AdditionalUsers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AdditionalUsers'])) {
                throw new Error("Expected the field `AdditionalUsers` to be an array in the JSON data but got " + data['AdditionalUsers']);
            }
            // validate the optional field `AdditionalUsers` (array)
            for (const item of data['AdditionalUsers']) {
                SessionUserInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ApplicationVersion'] && !(typeof data['ApplicationVersion'] === 'string' || data['ApplicationVersion'] instanceof String)) {
            throw new Error("Expected the field `ApplicationVersion` to be a primitive type in the JSON string but got " + data['ApplicationVersion']);
        }
        // validate the optional field `Capabilities`
        if (data['Capabilities']) { // data not null
          ClientCapabilities.validateJSON(data['Capabilities']);
        }
        // ensure the json data is a string
        if (data['Client'] && !(typeof data['Client'] === 'string' || data['Client'] instanceof String)) {
            throw new Error("Expected the field `Client` to be a primitive type in the JSON string but got " + data['Client']);
        }
        // ensure the json data is a string
        if (data['DeviceId'] && !(typeof data['DeviceId'] === 'string' || data['DeviceId'] instanceof String)) {
            throw new Error("Expected the field `DeviceId` to be a primitive type in the JSON string but got " + data['DeviceId']);
        }
        // ensure the json data is a string
        if (data['DeviceName'] && !(typeof data['DeviceName'] === 'string' || data['DeviceName'] instanceof String)) {
            throw new Error("Expected the field `DeviceName` to be a primitive type in the JSON string but got " + data['DeviceName']);
        }
        // ensure the json data is a string
        if (data['DeviceType'] && !(typeof data['DeviceType'] === 'string' || data['DeviceType'] instanceof String)) {
            throw new Error("Expected the field `DeviceType` to be a primitive type in the JSON string but got " + data['DeviceType']);
        }
        // validate the optional field `FullNowPlayingItem`
        if (data['FullNowPlayingItem']) { // data not null
          BaseItem.validateJSON(data['FullNowPlayingItem']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // validate the optional field `NowPlayingItem`
        if (data['NowPlayingItem']) { // data not null
          BaseItemDto.validateJSON(data['NowPlayingItem']);
        }
        if (data['NowPlayingQueue']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['NowPlayingQueue'])) {
                throw new Error("Expected the field `NowPlayingQueue` to be an array in the JSON data but got " + data['NowPlayingQueue']);
            }
            // validate the optional field `NowPlayingQueue` (array)
            for (const item of data['NowPlayingQueue']) {
                QueueItem.validateJSON(item);
            };
        }
        // validate the optional field `NowViewingItem`
        if (data['NowViewingItem']) { // data not null
          BaseItemDto.validateJSON(data['NowViewingItem']);
        }
        // validate the optional field `PlayState`
        if (data['PlayState']) { // data not null
          PlayerStateInfo.validateJSON(data['PlayState']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['PlayableMediaTypes'])) {
            throw new Error("Expected the field `PlayableMediaTypes` to be an array in the JSON data but got " + data['PlayableMediaTypes']);
        }
        // ensure the json data is a string
        if (data['PlaylistItemId'] && !(typeof data['PlaylistItemId'] === 'string' || data['PlaylistItemId'] instanceof String)) {
            throw new Error("Expected the field `PlaylistItemId` to be a primitive type in the JSON string but got " + data['PlaylistItemId']);
        }
        // ensure the json data is a string
        if (data['RemoteEndPoint'] && !(typeof data['RemoteEndPoint'] === 'string' || data['RemoteEndPoint'] instanceof String)) {
            throw new Error("Expected the field `RemoteEndPoint` to be a primitive type in the JSON string but got " + data['RemoteEndPoint']);
        }
        // ensure the json data is a string
        if (data['ServerId'] && !(typeof data['ServerId'] === 'string' || data['ServerId'] instanceof String)) {
            throw new Error("Expected the field `ServerId` to be a primitive type in the JSON string but got " + data['ServerId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SupportedCommands'])) {
            throw new Error("Expected the field `SupportedCommands` to be an array in the JSON data but got " + data['SupportedCommands']);
        }
        // validate the optional field `TranscodingInfo`
        if (data['TranscodingInfo']) { // data not null
          TranscodingInfo.validateJSON(data['TranscodingInfo']);
        }
        // ensure the json data is a string
        if (data['UserId'] && !(typeof data['UserId'] === 'string' || data['UserId'] instanceof String)) {
            throw new Error("Expected the field `UserId` to be a primitive type in the JSON string but got " + data['UserId']);
        }
        // ensure the json data is a string
        if (data['UserName'] && !(typeof data['UserName'] === 'string' || data['UserName'] instanceof String)) {
            throw new Error("Expected the field `UserName` to be a primitive type in the JSON string but got " + data['UserName']);
        }
        // ensure the json data is a string
        if (data['UserPrimaryImageTag'] && !(typeof data['UserPrimaryImageTag'] === 'string' || data['UserPrimaryImageTag'] instanceof String)) {
            throw new Error("Expected the field `UserPrimaryImageTag` to be a primitive type in the JSON string but got " + data['UserPrimaryImageTag']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/SessionUserInfo>} AdditionalUsers
 */
SessionInfo.prototype['AdditionalUsers'] = undefined;

/**
 * Gets or sets the application version.
 * @member {String} ApplicationVersion
 */
SessionInfo.prototype['ApplicationVersion'] = undefined;

/**
 * @member {module:model/ClientCapabilities} Capabilities
 */
SessionInfo.prototype['Capabilities'] = undefined;

/**
 * Gets or sets the type of the client.
 * @member {String} Client
 */
SessionInfo.prototype['Client'] = undefined;

/**
 * Gets or sets the device id.
 * @member {String} DeviceId
 */
SessionInfo.prototype['DeviceId'] = undefined;

/**
 * Gets or sets the name of the device.
 * @member {String} DeviceName
 */
SessionInfo.prototype['DeviceName'] = undefined;

/**
 * Gets or sets the type of the device.
 * @member {String} DeviceType
 */
SessionInfo.prototype['DeviceType'] = undefined;

/**
 * @member {module:model/BaseItem} FullNowPlayingItem
 */
SessionInfo.prototype['FullNowPlayingItem'] = undefined;

/**
 * @member {Boolean} HasCustomDeviceName
 */
SessionInfo.prototype['HasCustomDeviceName'] = undefined;

/**
 * Gets or sets the id.
 * @member {String} Id
 */
SessionInfo.prototype['Id'] = undefined;

/**
 * Gets a value indicating whether this instance is active.
 * @member {Boolean} IsActive
 */
SessionInfo.prototype['IsActive'] = undefined;

/**
 * Gets or sets the last activity date.
 * @member {Date} LastActivityDate
 */
SessionInfo.prototype['LastActivityDate'] = undefined;

/**
 * Gets or sets the last playback check in.
 * @member {Date} LastPlaybackCheckIn
 */
SessionInfo.prototype['LastPlaybackCheckIn'] = undefined;

/**
 * @member {module:model/BaseItemDto} NowPlayingItem
 */
SessionInfo.prototype['NowPlayingItem'] = undefined;

/**
 * @member {Array.<module:model/QueueItem>} NowPlayingQueue
 */
SessionInfo.prototype['NowPlayingQueue'] = undefined;

/**
 * @member {module:model/BaseItemDto} NowViewingItem
 */
SessionInfo.prototype['NowViewingItem'] = undefined;

/**
 * @member {module:model/PlayerStateInfo} PlayState
 */
SessionInfo.prototype['PlayState'] = undefined;

/**
 * Gets or sets the playable media types.
 * @member {Array.<String>} PlayableMediaTypes
 */
SessionInfo.prototype['PlayableMediaTypes'] = undefined;

/**
 * @member {String} PlaylistItemId
 */
SessionInfo.prototype['PlaylistItemId'] = undefined;

/**
 * Gets or sets the remote end point.
 * @member {String} RemoteEndPoint
 */
SessionInfo.prototype['RemoteEndPoint'] = undefined;

/**
 * @member {String} ServerId
 */
SessionInfo.prototype['ServerId'] = undefined;

/**
 * Gets or sets the supported commands.
 * @member {Array.<module:model/GeneralCommandType>} SupportedCommands
 */
SessionInfo.prototype['SupportedCommands'] = undefined;

/**
 * @member {Boolean} SupportsMediaControl
 */
SessionInfo.prototype['SupportsMediaControl'] = undefined;

/**
 * @member {Boolean} SupportsRemoteControl
 */
SessionInfo.prototype['SupportsRemoteControl'] = undefined;

/**
 * @member {module:model/TranscodingInfo} TranscodingInfo
 */
SessionInfo.prototype['TranscodingInfo'] = undefined;

/**
 * Gets or sets the user id.
 * @member {String} UserId
 */
SessionInfo.prototype['UserId'] = undefined;

/**
 * Gets or sets the username.
 * @member {String} UserName
 */
SessionInfo.prototype['UserName'] = undefined;

/**
 * @member {String} UserPrimaryImageTag
 */
SessionInfo.prototype['UserPrimaryImageTag'] = undefined;






export default SessionInfo;

