/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserConfiguration from './UserConfiguration';
import UserPolicy from './UserPolicy';

/**
 * The UserDto model module.
 * @module model/UserDto
 * @version v1
 */
class UserDto {
    /**
     * Constructs a new <code>UserDto</code>.
     * Class UserDto.
     * @alias module:model/UserDto
     */
    constructor() { 
        
        UserDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserDto} obj Optional instance to populate.
     * @return {module:model/UserDto} The populated <code>UserDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserDto();

            if (data.hasOwnProperty('Configuration')) {
                obj['Configuration'] = UserConfiguration.constructFromObject(data['Configuration']);
            }
            if (data.hasOwnProperty('EnableAutoLogin')) {
                obj['EnableAutoLogin'] = ApiClient.convertToType(data['EnableAutoLogin'], 'Boolean');
            }
            if (data.hasOwnProperty('HasConfiguredEasyPassword')) {
                obj['HasConfiguredEasyPassword'] = ApiClient.convertToType(data['HasConfiguredEasyPassword'], 'Boolean');
            }
            if (data.hasOwnProperty('HasConfiguredPassword')) {
                obj['HasConfiguredPassword'] = ApiClient.convertToType(data['HasConfiguredPassword'], 'Boolean');
            }
            if (data.hasOwnProperty('HasPassword')) {
                obj['HasPassword'] = ApiClient.convertToType(data['HasPassword'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('LastActivityDate')) {
                obj['LastActivityDate'] = ApiClient.convertToType(data['LastActivityDate'], 'Date');
            }
            if (data.hasOwnProperty('LastLoginDate')) {
                obj['LastLoginDate'] = ApiClient.convertToType(data['LastLoginDate'], 'Date');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Policy')) {
                obj['Policy'] = UserPolicy.constructFromObject(data['Policy']);
            }
            if (data.hasOwnProperty('PrimaryImageAspectRatio')) {
                obj['PrimaryImageAspectRatio'] = ApiClient.convertToType(data['PrimaryImageAspectRatio'], 'Number');
            }
            if (data.hasOwnProperty('PrimaryImageTag')) {
                obj['PrimaryImageTag'] = ApiClient.convertToType(data['PrimaryImageTag'], 'String');
            }
            if (data.hasOwnProperty('ServerId')) {
                obj['ServerId'] = ApiClient.convertToType(data['ServerId'], 'String');
            }
            if (data.hasOwnProperty('ServerName')) {
                obj['ServerName'] = ApiClient.convertToType(data['ServerName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserDto</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Configuration`
        if (data['Configuration']) { // data not null
          UserConfiguration.validateJSON(data['Configuration']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `Policy`
        if (data['Policy']) { // data not null
          UserPolicy.validateJSON(data['Policy']);
        }
        // ensure the json data is a string
        if (data['PrimaryImageTag'] && !(typeof data['PrimaryImageTag'] === 'string' || data['PrimaryImageTag'] instanceof String)) {
            throw new Error("Expected the field `PrimaryImageTag` to be a primitive type in the JSON string but got " + data['PrimaryImageTag']);
        }
        // ensure the json data is a string
        if (data['ServerId'] && !(typeof data['ServerId'] === 'string' || data['ServerId'] instanceof String)) {
            throw new Error("Expected the field `ServerId` to be a primitive type in the JSON string but got " + data['ServerId']);
        }
        // ensure the json data is a string
        if (data['ServerName'] && !(typeof data['ServerName'] === 'string' || data['ServerName'] instanceof String)) {
            throw new Error("Expected the field `ServerName` to be a primitive type in the JSON string but got " + data['ServerName']);
        }

        return true;
    }


}



/**
 * @member {module:model/UserConfiguration} Configuration
 */
UserDto.prototype['Configuration'] = undefined;

/**
 * Gets or sets whether async login is enabled or not.
 * @member {Boolean} EnableAutoLogin
 */
UserDto.prototype['EnableAutoLogin'] = undefined;

/**
 * Gets or sets a value indicating whether this instance has configured easy password.
 * @member {Boolean} HasConfiguredEasyPassword
 */
UserDto.prototype['HasConfiguredEasyPassword'] = undefined;

/**
 * Gets or sets a value indicating whether this instance has configured password.
 * @member {Boolean} HasConfiguredPassword
 */
UserDto.prototype['HasConfiguredPassword'] = undefined;

/**
 * Gets or sets a value indicating whether this instance has password.
 * @member {Boolean} HasPassword
 */
UserDto.prototype['HasPassword'] = undefined;

/**
 * Gets or sets the id.
 * @member {String} Id
 */
UserDto.prototype['Id'] = undefined;

/**
 * Gets or sets the last activity date.
 * @member {Date} LastActivityDate
 */
UserDto.prototype['LastActivityDate'] = undefined;

/**
 * Gets or sets the last login date.
 * @member {Date} LastLoginDate
 */
UserDto.prototype['LastLoginDate'] = undefined;

/**
 * Gets or sets the name.
 * @member {String} Name
 */
UserDto.prototype['Name'] = undefined;

/**
 * @member {module:model/UserPolicy} Policy
 */
UserDto.prototype['Policy'] = undefined;

/**
 * Gets or sets the primary image aspect ratio.
 * @member {Number} PrimaryImageAspectRatio
 */
UserDto.prototype['PrimaryImageAspectRatio'] = undefined;

/**
 * Gets or sets the primary image tag.
 * @member {String} PrimaryImageTag
 */
UserDto.prototype['PrimaryImageTag'] = undefined;

/**
 * Gets or sets the server identifier.
 * @member {String} ServerId
 */
UserDto.prototype['ServerId'] = undefined;

/**
 * Gets or sets the name of the server.  This is not used by the server and is for client-side usage only.
 * @member {String} ServerName
 */
UserDto.prototype['ServerName'] = undefined;






export default UserDto;

