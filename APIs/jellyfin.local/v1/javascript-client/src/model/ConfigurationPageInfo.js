/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigurationPageType from './ConfigurationPageType';

/**
 * The ConfigurationPageInfo model module.
 * @module model/ConfigurationPageInfo
 * @version v1
 */
class ConfigurationPageInfo {
    /**
     * Constructs a new <code>ConfigurationPageInfo</code>.
     * The configuration page info.
     * @alias module:model/ConfigurationPageInfo
     */
    constructor() { 
        
        ConfigurationPageInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigurationPageInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigurationPageInfo} obj Optional instance to populate.
     * @return {module:model/ConfigurationPageInfo} The populated <code>ConfigurationPageInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigurationPageInfo();

            if (data.hasOwnProperty('ConfigurationPageType')) {
                obj['ConfigurationPageType'] = ConfigurationPageType.constructFromObject(data['ConfigurationPageType']);
            }
            if (data.hasOwnProperty('DisplayName')) {
                obj['DisplayName'] = ApiClient.convertToType(data['DisplayName'], 'String');
            }
            if (data.hasOwnProperty('EnableInMainMenu')) {
                obj['EnableInMainMenu'] = ApiClient.convertToType(data['EnableInMainMenu'], 'Boolean');
            }
            if (data.hasOwnProperty('MenuIcon')) {
                obj['MenuIcon'] = ApiClient.convertToType(data['MenuIcon'], 'String');
            }
            if (data.hasOwnProperty('MenuSection')) {
                obj['MenuSection'] = ApiClient.convertToType(data['MenuSection'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PluginId')) {
                obj['PluginId'] = ApiClient.convertToType(data['PluginId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigurationPageInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigurationPageInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DisplayName'] && !(typeof data['DisplayName'] === 'string' || data['DisplayName'] instanceof String)) {
            throw new Error("Expected the field `DisplayName` to be a primitive type in the JSON string but got " + data['DisplayName']);
        }
        // ensure the json data is a string
        if (data['MenuIcon'] && !(typeof data['MenuIcon'] === 'string' || data['MenuIcon'] instanceof String)) {
            throw new Error("Expected the field `MenuIcon` to be a primitive type in the JSON string but got " + data['MenuIcon']);
        }
        // ensure the json data is a string
        if (data['MenuSection'] && !(typeof data['MenuSection'] === 'string' || data['MenuSection'] instanceof String)) {
            throw new Error("Expected the field `MenuSection` to be a primitive type in the JSON string but got " + data['MenuSection']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['PluginId'] && !(typeof data['PluginId'] === 'string' || data['PluginId'] instanceof String)) {
            throw new Error("Expected the field `PluginId` to be a primitive type in the JSON string but got " + data['PluginId']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConfigurationPageType} ConfigurationPageType
 */
ConfigurationPageInfo.prototype['ConfigurationPageType'] = undefined;

/**
 * Gets or sets the display name.
 * @member {String} DisplayName
 */
ConfigurationPageInfo.prototype['DisplayName'] = undefined;

/**
 * Gets or sets a value indicating whether the configurations page is enabled in the main menu.
 * @member {Boolean} EnableInMainMenu
 */
ConfigurationPageInfo.prototype['EnableInMainMenu'] = undefined;

/**
 * Gets or sets the menu icon.
 * @member {String} MenuIcon
 */
ConfigurationPageInfo.prototype['MenuIcon'] = undefined;

/**
 * Gets or sets the menu section.
 * @member {String} MenuSection
 */
ConfigurationPageInfo.prototype['MenuSection'] = undefined;

/**
 * Gets or sets the name.
 * @member {String} Name
 */
ConfigurationPageInfo.prototype['Name'] = undefined;

/**
 * Gets or sets the plugin id.
 * @member {String} PluginId
 */
ConfigurationPageInfo.prototype['PluginId'] = undefined;






export default ConfigurationPageInfo;

