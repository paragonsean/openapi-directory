/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageByNameInfo model module.
 * @module model/ImageByNameInfo
 * @version v1
 */
class ImageByNameInfo {
    /**
     * Constructs a new <code>ImageByNameInfo</code>.
     * @alias module:model/ImageByNameInfo
     */
    constructor() { 
        
        ImageByNameInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageByNameInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageByNameInfo} obj Optional instance to populate.
     * @return {module:model/ImageByNameInfo} The populated <code>ImageByNameInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageByNameInfo();

            if (data.hasOwnProperty('Context')) {
                obj['Context'] = ApiClient.convertToType(data['Context'], 'String');
            }
            if (data.hasOwnProperty('FileLength')) {
                obj['FileLength'] = ApiClient.convertToType(data['FileLength'], 'Number');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Theme')) {
                obj['Theme'] = ApiClient.convertToType(data['Theme'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageByNameInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageByNameInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Context'] && !(typeof data['Context'] === 'string' || data['Context'] instanceof String)) {
            throw new Error("Expected the field `Context` to be a primitive type in the JSON string but got " + data['Context']);
        }
        // ensure the json data is a string
        if (data['Format'] && !(typeof data['Format'] === 'string' || data['Format'] instanceof String)) {
            throw new Error("Expected the field `Format` to be a primitive type in the JSON string but got " + data['Format']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Theme'] && !(typeof data['Theme'] === 'string' || data['Theme'] instanceof String)) {
            throw new Error("Expected the field `Theme` to be a primitive type in the JSON string but got " + data['Theme']);
        }

        return true;
    }


}



/**
 * Gets or sets the context.
 * @member {String} Context
 */
ImageByNameInfo.prototype['Context'] = undefined;

/**
 * Gets or sets the length of the file.
 * @member {Number} FileLength
 */
ImageByNameInfo.prototype['FileLength'] = undefined;

/**
 * Gets or sets the format.
 * @member {String} Format
 */
ImageByNameInfo.prototype['Format'] = undefined;

/**
 * Gets or sets the name.
 * @member {String} Name
 */
ImageByNameInfo.prototype['Name'] = undefined;

/**
 * Gets or sets the theme.
 * @member {String} Theme
 */
ImageByNameInfo.prototype['Theme'] = undefined;






export default ImageByNameInfo;

