/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceProfile from './DeviceProfile';

/**
 * The PlaybackInfoDto model module.
 * @module model/PlaybackInfoDto
 * @version v1
 */
class PlaybackInfoDto {
    /**
     * Constructs a new <code>PlaybackInfoDto</code>.
     * Plabyback info dto.
     * @alias module:model/PlaybackInfoDto
     */
    constructor() { 
        
        PlaybackInfoDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlaybackInfoDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaybackInfoDto} obj Optional instance to populate.
     * @return {module:model/PlaybackInfoDto} The populated <code>PlaybackInfoDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlaybackInfoDto();

            if (data.hasOwnProperty('AllowAudioStreamCopy')) {
                obj['AllowAudioStreamCopy'] = ApiClient.convertToType(data['AllowAudioStreamCopy'], 'Boolean');
            }
            if (data.hasOwnProperty('AllowVideoStreamCopy')) {
                obj['AllowVideoStreamCopy'] = ApiClient.convertToType(data['AllowVideoStreamCopy'], 'Boolean');
            }
            if (data.hasOwnProperty('AudioStreamIndex')) {
                obj['AudioStreamIndex'] = ApiClient.convertToType(data['AudioStreamIndex'], 'Number');
            }
            if (data.hasOwnProperty('AutoOpenLiveStream')) {
                obj['AutoOpenLiveStream'] = ApiClient.convertToType(data['AutoOpenLiveStream'], 'Boolean');
            }
            if (data.hasOwnProperty('DeviceProfile')) {
                obj['DeviceProfile'] = DeviceProfile.constructFromObject(data['DeviceProfile']);
            }
            if (data.hasOwnProperty('EnableDirectPlay')) {
                obj['EnableDirectPlay'] = ApiClient.convertToType(data['EnableDirectPlay'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableDirectStream')) {
                obj['EnableDirectStream'] = ApiClient.convertToType(data['EnableDirectStream'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableTranscoding')) {
                obj['EnableTranscoding'] = ApiClient.convertToType(data['EnableTranscoding'], 'Boolean');
            }
            if (data.hasOwnProperty('LiveStreamId')) {
                obj['LiveStreamId'] = ApiClient.convertToType(data['LiveStreamId'], 'String');
            }
            if (data.hasOwnProperty('MaxAudioChannels')) {
                obj['MaxAudioChannels'] = ApiClient.convertToType(data['MaxAudioChannels'], 'Number');
            }
            if (data.hasOwnProperty('MaxStreamingBitrate')) {
                obj['MaxStreamingBitrate'] = ApiClient.convertToType(data['MaxStreamingBitrate'], 'Number');
            }
            if (data.hasOwnProperty('MediaSourceId')) {
                obj['MediaSourceId'] = ApiClient.convertToType(data['MediaSourceId'], 'String');
            }
            if (data.hasOwnProperty('StartTimeTicks')) {
                obj['StartTimeTicks'] = ApiClient.convertToType(data['StartTimeTicks'], 'Number');
            }
            if (data.hasOwnProperty('SubtitleStreamIndex')) {
                obj['SubtitleStreamIndex'] = ApiClient.convertToType(data['SubtitleStreamIndex'], 'Number');
            }
            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlaybackInfoDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlaybackInfoDto</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DeviceProfile`
        if (data['DeviceProfile']) { // data not null
          DeviceProfile.validateJSON(data['DeviceProfile']);
        }
        // ensure the json data is a string
        if (data['LiveStreamId'] && !(typeof data['LiveStreamId'] === 'string' || data['LiveStreamId'] instanceof String)) {
            throw new Error("Expected the field `LiveStreamId` to be a primitive type in the JSON string but got " + data['LiveStreamId']);
        }
        // ensure the json data is a string
        if (data['MediaSourceId'] && !(typeof data['MediaSourceId'] === 'string' || data['MediaSourceId'] instanceof String)) {
            throw new Error("Expected the field `MediaSourceId` to be a primitive type in the JSON string but got " + data['MediaSourceId']);
        }
        // ensure the json data is a string
        if (data['UserId'] && !(typeof data['UserId'] === 'string' || data['UserId'] instanceof String)) {
            throw new Error("Expected the field `UserId` to be a primitive type in the JSON string but got " + data['UserId']);
        }

        return true;
    }


}



/**
 * Gets or sets a value indicating whether to allow audio stream copy.
 * @member {Boolean} AllowAudioStreamCopy
 */
PlaybackInfoDto.prototype['AllowAudioStreamCopy'] = undefined;

/**
 * Gets or sets a value indicating whether to enable video stream copy.
 * @member {Boolean} AllowVideoStreamCopy
 */
PlaybackInfoDto.prototype['AllowVideoStreamCopy'] = undefined;

/**
 * Gets or sets the audio stream index.
 * @member {Number} AudioStreamIndex
 */
PlaybackInfoDto.prototype['AudioStreamIndex'] = undefined;

/**
 * Gets or sets a value indicating whether to auto open the live stream.
 * @member {Boolean} AutoOpenLiveStream
 */
PlaybackInfoDto.prototype['AutoOpenLiveStream'] = undefined;

/**
 * @member {module:model/DeviceProfile} DeviceProfile
 */
PlaybackInfoDto.prototype['DeviceProfile'] = undefined;

/**
 * Gets or sets a value indicating whether to enable direct play.
 * @member {Boolean} EnableDirectPlay
 */
PlaybackInfoDto.prototype['EnableDirectPlay'] = undefined;

/**
 * Gets or sets a value indicating whether to enable direct stream.
 * @member {Boolean} EnableDirectStream
 */
PlaybackInfoDto.prototype['EnableDirectStream'] = undefined;

/**
 * Gets or sets a value indicating whether to enable transcoding.
 * @member {Boolean} EnableTranscoding
 */
PlaybackInfoDto.prototype['EnableTranscoding'] = undefined;

/**
 * Gets or sets the live stream id.
 * @member {String} LiveStreamId
 */
PlaybackInfoDto.prototype['LiveStreamId'] = undefined;

/**
 * Gets or sets the max audio channels.
 * @member {Number} MaxAudioChannels
 */
PlaybackInfoDto.prototype['MaxAudioChannels'] = undefined;

/**
 * Gets or sets the max streaming bitrate.
 * @member {Number} MaxStreamingBitrate
 */
PlaybackInfoDto.prototype['MaxStreamingBitrate'] = undefined;

/**
 * Gets or sets the media source id.
 * @member {String} MediaSourceId
 */
PlaybackInfoDto.prototype['MediaSourceId'] = undefined;

/**
 * Gets or sets the start time in ticks.
 * @member {Number} StartTimeTicks
 */
PlaybackInfoDto.prototype['StartTimeTicks'] = undefined;

/**
 * Gets or sets the subtitle stream index.
 * @member {Number} SubtitleStreamIndex
 */
PlaybackInfoDto.prototype['SubtitleStreamIndex'] = undefined;

/**
 * Gets or sets the playback userId.
 * @member {String} UserId
 */
PlaybackInfoDto.prototype['UserId'] = undefined;






export default PlaybackInfoDto;

