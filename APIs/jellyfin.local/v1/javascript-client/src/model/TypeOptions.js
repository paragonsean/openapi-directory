/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageOption from './ImageOption';

/**
 * The TypeOptions model module.
 * @module model/TypeOptions
 * @version v1
 */
class TypeOptions {
    /**
     * Constructs a new <code>TypeOptions</code>.
     * @alias module:model/TypeOptions
     */
    constructor() { 
        
        TypeOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TypeOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TypeOptions} obj Optional instance to populate.
     * @return {module:model/TypeOptions} The populated <code>TypeOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TypeOptions();

            if (data.hasOwnProperty('ImageFetcherOrder')) {
                obj['ImageFetcherOrder'] = ApiClient.convertToType(data['ImageFetcherOrder'], ['String']);
            }
            if (data.hasOwnProperty('ImageFetchers')) {
                obj['ImageFetchers'] = ApiClient.convertToType(data['ImageFetchers'], ['String']);
            }
            if (data.hasOwnProperty('ImageOptions')) {
                obj['ImageOptions'] = ApiClient.convertToType(data['ImageOptions'], [ImageOption]);
            }
            if (data.hasOwnProperty('MetadataFetcherOrder')) {
                obj['MetadataFetcherOrder'] = ApiClient.convertToType(data['MetadataFetcherOrder'], ['String']);
            }
            if (data.hasOwnProperty('MetadataFetchers')) {
                obj['MetadataFetchers'] = ApiClient.convertToType(data['MetadataFetchers'], ['String']);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TypeOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TypeOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['ImageFetcherOrder'])) {
            throw new Error("Expected the field `ImageFetcherOrder` to be an array in the JSON data but got " + data['ImageFetcherOrder']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ImageFetchers'])) {
            throw new Error("Expected the field `ImageFetchers` to be an array in the JSON data but got " + data['ImageFetchers']);
        }
        if (data['ImageOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ImageOptions'])) {
                throw new Error("Expected the field `ImageOptions` to be an array in the JSON data but got " + data['ImageOptions']);
            }
            // validate the optional field `ImageOptions` (array)
            for (const item of data['ImageOptions']) {
                ImageOption.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['MetadataFetcherOrder'])) {
            throw new Error("Expected the field `MetadataFetcherOrder` to be an array in the JSON data but got " + data['MetadataFetcherOrder']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['MetadataFetchers'])) {
            throw new Error("Expected the field `MetadataFetchers` to be an array in the JSON data but got " + data['MetadataFetchers']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} ImageFetcherOrder
 */
TypeOptions.prototype['ImageFetcherOrder'] = undefined;

/**
 * @member {Array.<String>} ImageFetchers
 */
TypeOptions.prototype['ImageFetchers'] = undefined;

/**
 * @member {Array.<module:model/ImageOption>} ImageOptions
 */
TypeOptions.prototype['ImageOptions'] = undefined;

/**
 * @member {Array.<String>} MetadataFetcherOrder
 */
TypeOptions.prototype['MetadataFetcherOrder'] = undefined;

/**
 * @member {Array.<String>} MetadataFetchers
 */
TypeOptions.prototype['MetadataFetchers'] = undefined;

/**
 * @member {String} Type
 */
TypeOptions.prototype['Type'] = undefined;






export default TypeOptions;

