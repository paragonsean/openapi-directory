/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RemoteImageInfo from './RemoteImageInfo';

/**
 * The RemoteImageResult model module.
 * @module model/RemoteImageResult
 * @version v1
 */
class RemoteImageResult {
    /**
     * Constructs a new <code>RemoteImageResult</code>.
     * Class RemoteImageResult.
     * @alias module:model/RemoteImageResult
     */
    constructor() { 
        
        RemoteImageResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RemoteImageResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemoteImageResult} obj Optional instance to populate.
     * @return {module:model/RemoteImageResult} The populated <code>RemoteImageResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemoteImageResult();

            if (data.hasOwnProperty('Images')) {
                obj['Images'] = ApiClient.convertToType(data['Images'], [RemoteImageInfo]);
            }
            if (data.hasOwnProperty('Providers')) {
                obj['Providers'] = ApiClient.convertToType(data['Providers'], ['String']);
            }
            if (data.hasOwnProperty('TotalRecordCount')) {
                obj['TotalRecordCount'] = ApiClient.convertToType(data['TotalRecordCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemoteImageResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemoteImageResult</code>.
     */
    static validateJSON(data) {
        if (data['Images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Images'])) {
                throw new Error("Expected the field `Images` to be an array in the JSON data but got " + data['Images']);
            }
            // validate the optional field `Images` (array)
            for (const item of data['Images']) {
                RemoteImageInfo.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Providers'])) {
            throw new Error("Expected the field `Providers` to be an array in the JSON data but got " + data['Providers']);
        }

        return true;
    }


}



/**
 * Gets or sets the images.
 * @member {Array.<module:model/RemoteImageInfo>} Images
 */
RemoteImageResult.prototype['Images'] = undefined;

/**
 * Gets or sets the providers.
 * @member {Array.<String>} Providers
 */
RemoteImageResult.prototype['Providers'] = undefined;

/**
 * Gets or sets the total record count.
 * @member {Number} TotalRecordCount
 */
RemoteImageResult.prototype['TotalRecordCount'] = undefined;






export default RemoteImageResult;

