/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SongInfo from './SongInfo';

/**
 * The AlbumInfo model module.
 * @module model/AlbumInfo
 * @version v1
 */
class AlbumInfo {
    /**
     * Constructs a new <code>AlbumInfo</code>.
     * @alias module:model/AlbumInfo
     */
    constructor() { 
        
        AlbumInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlbumInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlbumInfo} obj Optional instance to populate.
     * @return {module:model/AlbumInfo} The populated <code>AlbumInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlbumInfo();

            if (data.hasOwnProperty('AlbumArtists')) {
                obj['AlbumArtists'] = ApiClient.convertToType(data['AlbumArtists'], ['String']);
            }
            if (data.hasOwnProperty('ArtistProviderIds')) {
                obj['ArtistProviderIds'] = ApiClient.convertToType(data['ArtistProviderIds'], {'String': 'String'});
            }
            if (data.hasOwnProperty('IndexNumber')) {
                obj['IndexNumber'] = ApiClient.convertToType(data['IndexNumber'], 'Number');
            }
            if (data.hasOwnProperty('IsAutomated')) {
                obj['IsAutomated'] = ApiClient.convertToType(data['IsAutomated'], 'Boolean');
            }
            if (data.hasOwnProperty('MetadataCountryCode')) {
                obj['MetadataCountryCode'] = ApiClient.convertToType(data['MetadataCountryCode'], 'String');
            }
            if (data.hasOwnProperty('MetadataLanguage')) {
                obj['MetadataLanguage'] = ApiClient.convertToType(data['MetadataLanguage'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ParentIndexNumber')) {
                obj['ParentIndexNumber'] = ApiClient.convertToType(data['ParentIndexNumber'], 'Number');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('PremiereDate')) {
                obj['PremiereDate'] = ApiClient.convertToType(data['PremiereDate'], 'Date');
            }
            if (data.hasOwnProperty('ProviderIds')) {
                obj['ProviderIds'] = ApiClient.convertToType(data['ProviderIds'], {'String': 'String'});
            }
            if (data.hasOwnProperty('SongInfos')) {
                obj['SongInfos'] = ApiClient.convertToType(data['SongInfos'], [SongInfo]);
            }
            if (data.hasOwnProperty('Year')) {
                obj['Year'] = ApiClient.convertToType(data['Year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlbumInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlbumInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['AlbumArtists'])) {
            throw new Error("Expected the field `AlbumArtists` to be an array in the JSON data but got " + data['AlbumArtists']);
        }
        // ensure the json data is a string
        if (data['MetadataCountryCode'] && !(typeof data['MetadataCountryCode'] === 'string' || data['MetadataCountryCode'] instanceof String)) {
            throw new Error("Expected the field `MetadataCountryCode` to be a primitive type in the JSON string but got " + data['MetadataCountryCode']);
        }
        // ensure the json data is a string
        if (data['MetadataLanguage'] && !(typeof data['MetadataLanguage'] === 'string' || data['MetadataLanguage'] instanceof String)) {
            throw new Error("Expected the field `MetadataLanguage` to be a primitive type in the JSON string but got " + data['MetadataLanguage']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        if (data['SongInfos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SongInfos'])) {
                throw new Error("Expected the field `SongInfos` to be an array in the JSON data but got " + data['SongInfos']);
            }
            // validate the optional field `SongInfos` (array)
            for (const item of data['SongInfos']) {
                SongInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Gets or sets the album artist.
 * @member {Array.<String>} AlbumArtists
 */
AlbumInfo.prototype['AlbumArtists'] = undefined;

/**
 * Gets or sets the artist provider ids.
 * @member {Object.<String, String>} ArtistProviderIds
 */
AlbumInfo.prototype['ArtistProviderIds'] = undefined;

/**
 * @member {Number} IndexNumber
 */
AlbumInfo.prototype['IndexNumber'] = undefined;

/**
 * @member {Boolean} IsAutomated
 */
AlbumInfo.prototype['IsAutomated'] = undefined;

/**
 * Gets or sets the metadata country code.
 * @member {String} MetadataCountryCode
 */
AlbumInfo.prototype['MetadataCountryCode'] = undefined;

/**
 * Gets or sets the metadata language.
 * @member {String} MetadataLanguage
 */
AlbumInfo.prototype['MetadataLanguage'] = undefined;

/**
 * Gets or sets the name.
 * @member {String} Name
 */
AlbumInfo.prototype['Name'] = undefined;

/**
 * @member {Number} ParentIndexNumber
 */
AlbumInfo.prototype['ParentIndexNumber'] = undefined;

/**
 * Gets or sets the path.
 * @member {String} Path
 */
AlbumInfo.prototype['Path'] = undefined;

/**
 * @member {Date} PremiereDate
 */
AlbumInfo.prototype['PremiereDate'] = undefined;

/**
 * Gets or sets the provider ids.
 * @member {Object.<String, String>} ProviderIds
 */
AlbumInfo.prototype['ProviderIds'] = undefined;

/**
 * @member {Array.<module:model/SongInfo>} SongInfos
 */
AlbumInfo.prototype['SongInfos'] = undefined;

/**
 * Gets or sets the year.
 * @member {Number} Year
 */
AlbumInfo.prototype['Year'] = undefined;






export default AlbumInfo;

