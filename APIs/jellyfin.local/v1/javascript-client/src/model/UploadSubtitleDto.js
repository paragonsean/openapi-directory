/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadSubtitleDto model module.
 * @module model/UploadSubtitleDto
 * @version v1
 */
class UploadSubtitleDto {
    /**
     * Constructs a new <code>UploadSubtitleDto</code>.
     * Upload subtitles dto.
     * @alias module:model/UploadSubtitleDto
     * @param data {String} Gets or sets the subtitle data.
     * @param format {String} Gets or sets the subtitle format.
     * @param isForced {Boolean} Gets or sets a value indicating whether the subtitle is forced.
     * @param language {String} Gets or sets the subtitle language.
     */
    constructor(data, format, isForced, language) { 
        
        UploadSubtitleDto.initialize(this, data, format, isForced, language);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, format, isForced, language) { 
        obj['Data'] = data;
        obj['Format'] = format;
        obj['IsForced'] = isForced;
        obj['Language'] = language;
    }

    /**
     * Constructs a <code>UploadSubtitleDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadSubtitleDto} obj Optional instance to populate.
     * @return {module:model/UploadSubtitleDto} The populated <code>UploadSubtitleDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadSubtitleDto();

            if (data.hasOwnProperty('Data')) {
                obj['Data'] = ApiClient.convertToType(data['Data'], 'String');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], 'String');
            }
            if (data.hasOwnProperty('IsForced')) {
                obj['IsForced'] = ApiClient.convertToType(data['IsForced'], 'Boolean');
            }
            if (data.hasOwnProperty('Language')) {
                obj['Language'] = ApiClient.convertToType(data['Language'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadSubtitleDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadSubtitleDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadSubtitleDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Data'] && !(typeof data['Data'] === 'string' || data['Data'] instanceof String)) {
            throw new Error("Expected the field `Data` to be a primitive type in the JSON string but got " + data['Data']);
        }
        // ensure the json data is a string
        if (data['Format'] && !(typeof data['Format'] === 'string' || data['Format'] instanceof String)) {
            throw new Error("Expected the field `Format` to be a primitive type in the JSON string but got " + data['Format']);
        }
        // ensure the json data is a string
        if (data['Language'] && !(typeof data['Language'] === 'string' || data['Language'] instanceof String)) {
            throw new Error("Expected the field `Language` to be a primitive type in the JSON string but got " + data['Language']);
        }

        return true;
    }


}

UploadSubtitleDto.RequiredProperties = ["Data", "Format", "IsForced", "Language"];

/**
 * Gets or sets the subtitle data.
 * @member {String} Data
 */
UploadSubtitleDto.prototype['Data'] = undefined;

/**
 * Gets or sets the subtitle format.
 * @member {String} Format
 */
UploadSubtitleDto.prototype['Format'] = undefined;

/**
 * Gets or sets a value indicating whether the subtitle is forced.
 * @member {Boolean} IsForced
 */
UploadSubtitleDto.prototype['IsForced'] = undefined;

/**
 * Gets or sets the subtitle language.
 * @member {String} Language
 */
UploadSubtitleDto.prototype['Language'] = undefined;






export default UploadSubtitleDto;

