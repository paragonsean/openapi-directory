/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceProfile from './DeviceProfile';
import MediaProtocol from './MediaProtocol';

/**
 * The OpenLiveStreamDto model module.
 * @module model/OpenLiveStreamDto
 * @version v1
 */
class OpenLiveStreamDto {
    /**
     * Constructs a new <code>OpenLiveStreamDto</code>.
     * Open live stream dto.
     * @alias module:model/OpenLiveStreamDto
     */
    constructor() { 
        
        OpenLiveStreamDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OpenLiveStreamDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenLiveStreamDto} obj Optional instance to populate.
     * @return {module:model/OpenLiveStreamDto} The populated <code>OpenLiveStreamDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenLiveStreamDto();

            if (data.hasOwnProperty('AudioStreamIndex')) {
                obj['AudioStreamIndex'] = ApiClient.convertToType(data['AudioStreamIndex'], 'Number');
            }
            if (data.hasOwnProperty('DeviceProfile')) {
                obj['DeviceProfile'] = DeviceProfile.constructFromObject(data['DeviceProfile']);
            }
            if (data.hasOwnProperty('DirectPlayProtocols')) {
                obj['DirectPlayProtocols'] = ApiClient.convertToType(data['DirectPlayProtocols'], [MediaProtocol]);
            }
            if (data.hasOwnProperty('EnableDirectPlay')) {
                obj['EnableDirectPlay'] = ApiClient.convertToType(data['EnableDirectPlay'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableDirectStream')) {
                obj['EnableDirectStream'] = ApiClient.convertToType(data['EnableDirectStream'], 'Boolean');
            }
            if (data.hasOwnProperty('ItemId')) {
                obj['ItemId'] = ApiClient.convertToType(data['ItemId'], 'String');
            }
            if (data.hasOwnProperty('MaxAudioChannels')) {
                obj['MaxAudioChannels'] = ApiClient.convertToType(data['MaxAudioChannels'], 'Number');
            }
            if (data.hasOwnProperty('MaxStreamingBitrate')) {
                obj['MaxStreamingBitrate'] = ApiClient.convertToType(data['MaxStreamingBitrate'], 'Number');
            }
            if (data.hasOwnProperty('OpenToken')) {
                obj['OpenToken'] = ApiClient.convertToType(data['OpenToken'], 'String');
            }
            if (data.hasOwnProperty('PlaySessionId')) {
                obj['PlaySessionId'] = ApiClient.convertToType(data['PlaySessionId'], 'String');
            }
            if (data.hasOwnProperty('StartTimeTicks')) {
                obj['StartTimeTicks'] = ApiClient.convertToType(data['StartTimeTicks'], 'Number');
            }
            if (data.hasOwnProperty('SubtitleStreamIndex')) {
                obj['SubtitleStreamIndex'] = ApiClient.convertToType(data['SubtitleStreamIndex'], 'Number');
            }
            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenLiveStreamDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenLiveStreamDto</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DeviceProfile`
        if (data['DeviceProfile']) { // data not null
          DeviceProfile.validateJSON(data['DeviceProfile']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DirectPlayProtocols'])) {
            throw new Error("Expected the field `DirectPlayProtocols` to be an array in the JSON data but got " + data['DirectPlayProtocols']);
        }
        // ensure the json data is a string
        if (data['ItemId'] && !(typeof data['ItemId'] === 'string' || data['ItemId'] instanceof String)) {
            throw new Error("Expected the field `ItemId` to be a primitive type in the JSON string but got " + data['ItemId']);
        }
        // ensure the json data is a string
        if (data['OpenToken'] && !(typeof data['OpenToken'] === 'string' || data['OpenToken'] instanceof String)) {
            throw new Error("Expected the field `OpenToken` to be a primitive type in the JSON string but got " + data['OpenToken']);
        }
        // ensure the json data is a string
        if (data['PlaySessionId'] && !(typeof data['PlaySessionId'] === 'string' || data['PlaySessionId'] instanceof String)) {
            throw new Error("Expected the field `PlaySessionId` to be a primitive type in the JSON string but got " + data['PlaySessionId']);
        }
        // ensure the json data is a string
        if (data['UserId'] && !(typeof data['UserId'] === 'string' || data['UserId'] instanceof String)) {
            throw new Error("Expected the field `UserId` to be a primitive type in the JSON string but got " + data['UserId']);
        }

        return true;
    }


}



/**
 * Gets or sets the audio stream index.
 * @member {Number} AudioStreamIndex
 */
OpenLiveStreamDto.prototype['AudioStreamIndex'] = undefined;

/**
 * @member {module:model/DeviceProfile} DeviceProfile
 */
OpenLiveStreamDto.prototype['DeviceProfile'] = undefined;

/**
 * Gets or sets the device play protocols.
 * @member {Array.<module:model/MediaProtocol>} DirectPlayProtocols
 */
OpenLiveStreamDto.prototype['DirectPlayProtocols'] = undefined;

/**
 * Gets or sets a value indicating whether to enable direct play.
 * @member {Boolean} EnableDirectPlay
 */
OpenLiveStreamDto.prototype['EnableDirectPlay'] = undefined;

/**
 * Gets or sets a value indicating whether to enale direct stream.
 * @member {Boolean} EnableDirectStream
 */
OpenLiveStreamDto.prototype['EnableDirectStream'] = undefined;

/**
 * Gets or sets the item id.
 * @member {String} ItemId
 */
OpenLiveStreamDto.prototype['ItemId'] = undefined;

/**
 * Gets or sets the max audio channels.
 * @member {Number} MaxAudioChannels
 */
OpenLiveStreamDto.prototype['MaxAudioChannels'] = undefined;

/**
 * Gets or sets the max streaming bitrate.
 * @member {Number} MaxStreamingBitrate
 */
OpenLiveStreamDto.prototype['MaxStreamingBitrate'] = undefined;

/**
 * Gets or sets the open token.
 * @member {String} OpenToken
 */
OpenLiveStreamDto.prototype['OpenToken'] = undefined;

/**
 * Gets or sets the play session id.
 * @member {String} PlaySessionId
 */
OpenLiveStreamDto.prototype['PlaySessionId'] = undefined;

/**
 * Gets or sets the start time in ticks.
 * @member {Number} StartTimeTicks
 */
OpenLiveStreamDto.prototype['StartTimeTicks'] = undefined;

/**
 * Gets or sets the subtitle stream index.
 * @member {Number} SubtitleStreamIndex
 */
OpenLiveStreamDto.prototype['SubtitleStreamIndex'] = undefined;

/**
 * Gets or sets the user id.
 * @member {String} UserId
 */
OpenLiveStreamDto.prototype['UserId'] = undefined;






export default OpenLiveStreamDto;

