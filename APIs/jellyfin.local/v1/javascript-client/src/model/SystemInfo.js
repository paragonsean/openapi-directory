/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Architecture from './Architecture';
import FFmpegLocation from './FFmpegLocation';
import InstallationInfo from './InstallationInfo';

/**
 * The SystemInfo model module.
 * @module model/SystemInfo
 * @version v1
 */
class SystemInfo {
    /**
     * Constructs a new <code>SystemInfo</code>.
     * Class SystemInfo.
     * @alias module:model/SystemInfo
     */
    constructor() { 
        
        SystemInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SystemInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SystemInfo} obj Optional instance to populate.
     * @return {module:model/SystemInfo} The populated <code>SystemInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SystemInfo();

            if (data.hasOwnProperty('CachePath')) {
                obj['CachePath'] = ApiClient.convertToType(data['CachePath'], 'String');
            }
            if (data.hasOwnProperty('CanLaunchWebBrowser')) {
                obj['CanLaunchWebBrowser'] = ApiClient.convertToType(data['CanLaunchWebBrowser'], 'Boolean');
            }
            if (data.hasOwnProperty('CanSelfRestart')) {
                obj['CanSelfRestart'] = ApiClient.convertToType(data['CanSelfRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('CompletedInstallations')) {
                obj['CompletedInstallations'] = ApiClient.convertToType(data['CompletedInstallations'], [InstallationInfo]);
            }
            if (data.hasOwnProperty('EncoderLocation')) {
                obj['EncoderLocation'] = FFmpegLocation.constructFromObject(data['EncoderLocation']);
            }
            if (data.hasOwnProperty('HasPendingRestart')) {
                obj['HasPendingRestart'] = ApiClient.convertToType(data['HasPendingRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('HasUpdateAvailable')) {
                obj['HasUpdateAvailable'] = ApiClient.convertToType(data['HasUpdateAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('InternalMetadataPath')) {
                obj['InternalMetadataPath'] = ApiClient.convertToType(data['InternalMetadataPath'], 'String');
            }
            if (data.hasOwnProperty('IsShuttingDown')) {
                obj['IsShuttingDown'] = ApiClient.convertToType(data['IsShuttingDown'], 'Boolean');
            }
            if (data.hasOwnProperty('ItemsByNamePath')) {
                obj['ItemsByNamePath'] = ApiClient.convertToType(data['ItemsByNamePath'], 'String');
            }
            if (data.hasOwnProperty('LocalAddress')) {
                obj['LocalAddress'] = ApiClient.convertToType(data['LocalAddress'], 'String');
            }
            if (data.hasOwnProperty('LogPath')) {
                obj['LogPath'] = ApiClient.convertToType(data['LogPath'], 'String');
            }
            if (data.hasOwnProperty('OperatingSystem')) {
                obj['OperatingSystem'] = ApiClient.convertToType(data['OperatingSystem'], 'String');
            }
            if (data.hasOwnProperty('OperatingSystemDisplayName')) {
                obj['OperatingSystemDisplayName'] = ApiClient.convertToType(data['OperatingSystemDisplayName'], 'String');
            }
            if (data.hasOwnProperty('PackageName')) {
                obj['PackageName'] = ApiClient.convertToType(data['PackageName'], 'String');
            }
            if (data.hasOwnProperty('ProductName')) {
                obj['ProductName'] = ApiClient.convertToType(data['ProductName'], 'String');
            }
            if (data.hasOwnProperty('ProgramDataPath')) {
                obj['ProgramDataPath'] = ApiClient.convertToType(data['ProgramDataPath'], 'String');
            }
            if (data.hasOwnProperty('ServerName')) {
                obj['ServerName'] = ApiClient.convertToType(data['ServerName'], 'String');
            }
            if (data.hasOwnProperty('StartupWizardCompleted')) {
                obj['StartupWizardCompleted'] = ApiClient.convertToType(data['StartupWizardCompleted'], 'Boolean');
            }
            if (data.hasOwnProperty('SupportsLibraryMonitor')) {
                obj['SupportsLibraryMonitor'] = ApiClient.convertToType(data['SupportsLibraryMonitor'], 'Boolean');
            }
            if (data.hasOwnProperty('SystemArchitecture')) {
                obj['SystemArchitecture'] = Architecture.constructFromObject(data['SystemArchitecture']);
            }
            if (data.hasOwnProperty('TranscodingTempPath')) {
                obj['TranscodingTempPath'] = ApiClient.convertToType(data['TranscodingTempPath'], 'String');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
            if (data.hasOwnProperty('WebPath')) {
                obj['WebPath'] = ApiClient.convertToType(data['WebPath'], 'String');
            }
            if (data.hasOwnProperty('WebSocketPortNumber')) {
                obj['WebSocketPortNumber'] = ApiClient.convertToType(data['WebSocketPortNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SystemInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SystemInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CachePath'] && !(typeof data['CachePath'] === 'string' || data['CachePath'] instanceof String)) {
            throw new Error("Expected the field `CachePath` to be a primitive type in the JSON string but got " + data['CachePath']);
        }
        if (data['CompletedInstallations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CompletedInstallations'])) {
                throw new Error("Expected the field `CompletedInstallations` to be an array in the JSON data but got " + data['CompletedInstallations']);
            }
            // validate the optional field `CompletedInstallations` (array)
            for (const item of data['CompletedInstallations']) {
                InstallationInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['InternalMetadataPath'] && !(typeof data['InternalMetadataPath'] === 'string' || data['InternalMetadataPath'] instanceof String)) {
            throw new Error("Expected the field `InternalMetadataPath` to be a primitive type in the JSON string but got " + data['InternalMetadataPath']);
        }
        // ensure the json data is a string
        if (data['ItemsByNamePath'] && !(typeof data['ItemsByNamePath'] === 'string' || data['ItemsByNamePath'] instanceof String)) {
            throw new Error("Expected the field `ItemsByNamePath` to be a primitive type in the JSON string but got " + data['ItemsByNamePath']);
        }
        // ensure the json data is a string
        if (data['LocalAddress'] && !(typeof data['LocalAddress'] === 'string' || data['LocalAddress'] instanceof String)) {
            throw new Error("Expected the field `LocalAddress` to be a primitive type in the JSON string but got " + data['LocalAddress']);
        }
        // ensure the json data is a string
        if (data['LogPath'] && !(typeof data['LogPath'] === 'string' || data['LogPath'] instanceof String)) {
            throw new Error("Expected the field `LogPath` to be a primitive type in the JSON string but got " + data['LogPath']);
        }
        // ensure the json data is a string
        if (data['OperatingSystem'] && !(typeof data['OperatingSystem'] === 'string' || data['OperatingSystem'] instanceof String)) {
            throw new Error("Expected the field `OperatingSystem` to be a primitive type in the JSON string but got " + data['OperatingSystem']);
        }
        // ensure the json data is a string
        if (data['OperatingSystemDisplayName'] && !(typeof data['OperatingSystemDisplayName'] === 'string' || data['OperatingSystemDisplayName'] instanceof String)) {
            throw new Error("Expected the field `OperatingSystemDisplayName` to be a primitive type in the JSON string but got " + data['OperatingSystemDisplayName']);
        }
        // ensure the json data is a string
        if (data['PackageName'] && !(typeof data['PackageName'] === 'string' || data['PackageName'] instanceof String)) {
            throw new Error("Expected the field `PackageName` to be a primitive type in the JSON string but got " + data['PackageName']);
        }
        // ensure the json data is a string
        if (data['ProductName'] && !(typeof data['ProductName'] === 'string' || data['ProductName'] instanceof String)) {
            throw new Error("Expected the field `ProductName` to be a primitive type in the JSON string but got " + data['ProductName']);
        }
        // ensure the json data is a string
        if (data['ProgramDataPath'] && !(typeof data['ProgramDataPath'] === 'string' || data['ProgramDataPath'] instanceof String)) {
            throw new Error("Expected the field `ProgramDataPath` to be a primitive type in the JSON string but got " + data['ProgramDataPath']);
        }
        // ensure the json data is a string
        if (data['ServerName'] && !(typeof data['ServerName'] === 'string' || data['ServerName'] instanceof String)) {
            throw new Error("Expected the field `ServerName` to be a primitive type in the JSON string but got " + data['ServerName']);
        }
        // ensure the json data is a string
        if (data['TranscodingTempPath'] && !(typeof data['TranscodingTempPath'] === 'string' || data['TranscodingTempPath'] instanceof String)) {
            throw new Error("Expected the field `TranscodingTempPath` to be a primitive type in the JSON string but got " + data['TranscodingTempPath']);
        }
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }
        // ensure the json data is a string
        if (data['WebPath'] && !(typeof data['WebPath'] === 'string' || data['WebPath'] instanceof String)) {
            throw new Error("Expected the field `WebPath` to be a primitive type in the JSON string but got " + data['WebPath']);
        }

        return true;
    }


}



/**
 * Gets or sets the cache path.
 * @member {String} CachePath
 */
SystemInfo.prototype['CachePath'] = undefined;

/**
 * @member {Boolean} CanLaunchWebBrowser
 */
SystemInfo.prototype['CanLaunchWebBrowser'] = undefined;

/**
 * Gets or sets a value indicating whether this instance can self restart.
 * @member {Boolean} CanSelfRestart
 */
SystemInfo.prototype['CanSelfRestart'] = undefined;

/**
 * Gets or sets the completed installations.
 * @member {Array.<module:model/InstallationInfo>} CompletedInstallations
 */
SystemInfo.prototype['CompletedInstallations'] = undefined;

/**
 * @member {module:model/FFmpegLocation} EncoderLocation
 */
SystemInfo.prototype['EncoderLocation'] = undefined;

/**
 * Gets or sets a value indicating whether this instance has pending restart.
 * @member {Boolean} HasPendingRestart
 */
SystemInfo.prototype['HasPendingRestart'] = undefined;

/**
 * Gets or sets a value indicating whether this instance has update available.
 * @member {Boolean} HasUpdateAvailable
 */
SystemInfo.prototype['HasUpdateAvailable'] = undefined;

/**
 * Gets or sets the id.
 * @member {String} Id
 */
SystemInfo.prototype['Id'] = undefined;

/**
 * Gets or sets the internal metadata path.
 * @member {String} InternalMetadataPath
 */
SystemInfo.prototype['InternalMetadataPath'] = undefined;

/**
 * @member {Boolean} IsShuttingDown
 */
SystemInfo.prototype['IsShuttingDown'] = undefined;

/**
 * Gets or sets the items by name path.
 * @member {String} ItemsByNamePath
 */
SystemInfo.prototype['ItemsByNamePath'] = undefined;

/**
 * Gets or sets the local address.
 * @member {String} LocalAddress
 */
SystemInfo.prototype['LocalAddress'] = undefined;

/**
 * Gets or sets the log path.
 * @member {String} LogPath
 */
SystemInfo.prototype['LogPath'] = undefined;

/**
 * Gets or sets the operating system.
 * @member {String} OperatingSystem
 */
SystemInfo.prototype['OperatingSystem'] = undefined;

/**
 * Gets or sets the display name of the operating system.
 * @member {String} OperatingSystemDisplayName
 */
SystemInfo.prototype['OperatingSystemDisplayName'] = undefined;

/**
 * Get or sets the package name.
 * @member {String} PackageName
 */
SystemInfo.prototype['PackageName'] = undefined;

/**
 * Gets or sets the product name. This is the AssemblyProduct name.
 * @member {String} ProductName
 */
SystemInfo.prototype['ProductName'] = undefined;

/**
 * Gets or sets the program data path.
 * @member {String} ProgramDataPath
 */
SystemInfo.prototype['ProgramDataPath'] = undefined;

/**
 * Gets or sets the name of the server.
 * @member {String} ServerName
 */
SystemInfo.prototype['ServerName'] = undefined;

/**
 * Gets or sets a value indicating whether the startup wizard is completed.
 * @member {Boolean} StartupWizardCompleted
 */
SystemInfo.prototype['StartupWizardCompleted'] = undefined;

/**
 * Gets or sets a value indicating whether [supports library monitor].
 * @member {Boolean} SupportsLibraryMonitor
 */
SystemInfo.prototype['SupportsLibraryMonitor'] = undefined;

/**
 * @member {module:model/Architecture} SystemArchitecture
 */
SystemInfo.prototype['SystemArchitecture'] = undefined;

/**
 * Gets or sets the transcode path.
 * @member {String} TranscodingTempPath
 */
SystemInfo.prototype['TranscodingTempPath'] = undefined;

/**
 * Gets or sets the server version.
 * @member {String} Version
 */
SystemInfo.prototype['Version'] = undefined;

/**
 * Gets or sets the web UI resources path.
 * @member {String} WebPath
 */
SystemInfo.prototype['WebPath'] = undefined;

/**
 * Gets or sets the web socket port number.
 * @member {Number} WebSocketPortNumber
 */
SystemInfo.prototype['WebSocketPortNumber'] = undefined;






export default SystemInfo;

