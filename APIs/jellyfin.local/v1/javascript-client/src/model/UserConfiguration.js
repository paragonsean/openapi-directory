/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubtitlePlaybackMode from './SubtitlePlaybackMode';

/**
 * The UserConfiguration model module.
 * @module model/UserConfiguration
 * @version v1
 */
class UserConfiguration {
    /**
     * Constructs a new <code>UserConfiguration</code>.
     * Class UserConfiguration.
     * @alias module:model/UserConfiguration
     */
    constructor() { 
        
        UserConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserConfiguration} obj Optional instance to populate.
     * @return {module:model/UserConfiguration} The populated <code>UserConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserConfiguration();

            if (data.hasOwnProperty('AudioLanguagePreference')) {
                obj['AudioLanguagePreference'] = ApiClient.convertToType(data['AudioLanguagePreference'], 'String');
            }
            if (data.hasOwnProperty('DisplayCollectionsView')) {
                obj['DisplayCollectionsView'] = ApiClient.convertToType(data['DisplayCollectionsView'], 'Boolean');
            }
            if (data.hasOwnProperty('DisplayMissingEpisodes')) {
                obj['DisplayMissingEpisodes'] = ApiClient.convertToType(data['DisplayMissingEpisodes'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableLocalPassword')) {
                obj['EnableLocalPassword'] = ApiClient.convertToType(data['EnableLocalPassword'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableNextEpisodeAutoPlay')) {
                obj['EnableNextEpisodeAutoPlay'] = ApiClient.convertToType(data['EnableNextEpisodeAutoPlay'], 'Boolean');
            }
            if (data.hasOwnProperty('GroupedFolders')) {
                obj['GroupedFolders'] = ApiClient.convertToType(data['GroupedFolders'], ['String']);
            }
            if (data.hasOwnProperty('HidePlayedInLatest')) {
                obj['HidePlayedInLatest'] = ApiClient.convertToType(data['HidePlayedInLatest'], 'Boolean');
            }
            if (data.hasOwnProperty('LatestItemsExcludes')) {
                obj['LatestItemsExcludes'] = ApiClient.convertToType(data['LatestItemsExcludes'], ['String']);
            }
            if (data.hasOwnProperty('MyMediaExcludes')) {
                obj['MyMediaExcludes'] = ApiClient.convertToType(data['MyMediaExcludes'], ['String']);
            }
            if (data.hasOwnProperty('OrderedViews')) {
                obj['OrderedViews'] = ApiClient.convertToType(data['OrderedViews'], ['String']);
            }
            if (data.hasOwnProperty('PlayDefaultAudioTrack')) {
                obj['PlayDefaultAudioTrack'] = ApiClient.convertToType(data['PlayDefaultAudioTrack'], 'Boolean');
            }
            if (data.hasOwnProperty('RememberAudioSelections')) {
                obj['RememberAudioSelections'] = ApiClient.convertToType(data['RememberAudioSelections'], 'Boolean');
            }
            if (data.hasOwnProperty('RememberSubtitleSelections')) {
                obj['RememberSubtitleSelections'] = ApiClient.convertToType(data['RememberSubtitleSelections'], 'Boolean');
            }
            if (data.hasOwnProperty('SubtitleLanguagePreference')) {
                obj['SubtitleLanguagePreference'] = ApiClient.convertToType(data['SubtitleLanguagePreference'], 'String');
            }
            if (data.hasOwnProperty('SubtitleMode')) {
                obj['SubtitleMode'] = SubtitlePlaybackMode.constructFromObject(data['SubtitleMode']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AudioLanguagePreference'] && !(typeof data['AudioLanguagePreference'] === 'string' || data['AudioLanguagePreference'] instanceof String)) {
            throw new Error("Expected the field `AudioLanguagePreference` to be a primitive type in the JSON string but got " + data['AudioLanguagePreference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['GroupedFolders'])) {
            throw new Error("Expected the field `GroupedFolders` to be an array in the JSON data but got " + data['GroupedFolders']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['LatestItemsExcludes'])) {
            throw new Error("Expected the field `LatestItemsExcludes` to be an array in the JSON data but got " + data['LatestItemsExcludes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['MyMediaExcludes'])) {
            throw new Error("Expected the field `MyMediaExcludes` to be an array in the JSON data but got " + data['MyMediaExcludes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['OrderedViews'])) {
            throw new Error("Expected the field `OrderedViews` to be an array in the JSON data but got " + data['OrderedViews']);
        }
        // ensure the json data is a string
        if (data['SubtitleLanguagePreference'] && !(typeof data['SubtitleLanguagePreference'] === 'string' || data['SubtitleLanguagePreference'] instanceof String)) {
            throw new Error("Expected the field `SubtitleLanguagePreference` to be a primitive type in the JSON string but got " + data['SubtitleLanguagePreference']);
        }

        return true;
    }


}



/**
 * Gets or sets the audio language preference.
 * @member {String} AudioLanguagePreference
 */
UserConfiguration.prototype['AudioLanguagePreference'] = undefined;

/**
 * @member {Boolean} DisplayCollectionsView
 */
UserConfiguration.prototype['DisplayCollectionsView'] = undefined;

/**
 * @member {Boolean} DisplayMissingEpisodes
 */
UserConfiguration.prototype['DisplayMissingEpisodes'] = undefined;

/**
 * @member {Boolean} EnableLocalPassword
 */
UserConfiguration.prototype['EnableLocalPassword'] = undefined;

/**
 * @member {Boolean} EnableNextEpisodeAutoPlay
 */
UserConfiguration.prototype['EnableNextEpisodeAutoPlay'] = undefined;

/**
 * @member {Array.<String>} GroupedFolders
 */
UserConfiguration.prototype['GroupedFolders'] = undefined;

/**
 * @member {Boolean} HidePlayedInLatest
 */
UserConfiguration.prototype['HidePlayedInLatest'] = undefined;

/**
 * @member {Array.<String>} LatestItemsExcludes
 */
UserConfiguration.prototype['LatestItemsExcludes'] = undefined;

/**
 * @member {Array.<String>} MyMediaExcludes
 */
UserConfiguration.prototype['MyMediaExcludes'] = undefined;

/**
 * @member {Array.<String>} OrderedViews
 */
UserConfiguration.prototype['OrderedViews'] = undefined;

/**
 * Gets or sets a value indicating whether [play default audio track].
 * @member {Boolean} PlayDefaultAudioTrack
 */
UserConfiguration.prototype['PlayDefaultAudioTrack'] = undefined;

/**
 * @member {Boolean} RememberAudioSelections
 */
UserConfiguration.prototype['RememberAudioSelections'] = undefined;

/**
 * @member {Boolean} RememberSubtitleSelections
 */
UserConfiguration.prototype['RememberSubtitleSelections'] = undefined;

/**
 * Gets or sets the subtitle language preference.
 * @member {String} SubtitleLanguagePreference
 */
UserConfiguration.prototype['SubtitleLanguagePreference'] = undefined;

/**
 * @member {module:model/SubtitlePlaybackMode} SubtitleMode
 */
UserConfiguration.prototype['SubtitleMode'] = undefined;






export default UserConfiguration;

