/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageType from './ImageType';

/**
 * The ImageOption model module.
 * @module model/ImageOption
 * @version v1
 */
class ImageOption {
    /**
     * Constructs a new <code>ImageOption</code>.
     * @alias module:model/ImageOption
     */
    constructor() { 
        
        ImageOption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageOption} obj Optional instance to populate.
     * @return {module:model/ImageOption} The populated <code>ImageOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageOption();

            if (data.hasOwnProperty('Limit')) {
                obj['Limit'] = ApiClient.convertToType(data['Limit'], 'Number');
            }
            if (data.hasOwnProperty('MinWidth')) {
                obj['MinWidth'] = ApiClient.convertToType(data['MinWidth'], 'Number');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ImageType.constructFromObject(data['Type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageOption</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Gets or sets the limit.
 * @member {Number} Limit
 */
ImageOption.prototype['Limit'] = undefined;

/**
 * Gets or sets the minimum width.
 * @member {Number} MinWidth
 */
ImageOption.prototype['MinWidth'] = undefined;

/**
 * @member {module:model/ImageType} Type
 */
ImageOption.prototype['Type'] = undefined;






export default ImageOption;

