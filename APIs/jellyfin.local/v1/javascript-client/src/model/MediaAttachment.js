/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MediaAttachment model module.
 * @module model/MediaAttachment
 * @version v1
 */
class MediaAttachment {
    /**
     * Constructs a new <code>MediaAttachment</code>.
     * Class MediaAttachment.
     * @alias module:model/MediaAttachment
     */
    constructor() { 
        
        MediaAttachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaAttachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaAttachment} obj Optional instance to populate.
     * @return {module:model/MediaAttachment} The populated <code>MediaAttachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaAttachment();

            if (data.hasOwnProperty('Codec')) {
                obj['Codec'] = ApiClient.convertToType(data['Codec'], 'String');
            }
            if (data.hasOwnProperty('CodecTag')) {
                obj['CodecTag'] = ApiClient.convertToType(data['CodecTag'], 'String');
            }
            if (data.hasOwnProperty('Comment')) {
                obj['Comment'] = ApiClient.convertToType(data['Comment'], 'String');
            }
            if (data.hasOwnProperty('DeliveryUrl')) {
                obj['DeliveryUrl'] = ApiClient.convertToType(data['DeliveryUrl'], 'String');
            }
            if (data.hasOwnProperty('FileName')) {
                obj['FileName'] = ApiClient.convertToType(data['FileName'], 'String');
            }
            if (data.hasOwnProperty('Index')) {
                obj['Index'] = ApiClient.convertToType(data['Index'], 'Number');
            }
            if (data.hasOwnProperty('MimeType')) {
                obj['MimeType'] = ApiClient.convertToType(data['MimeType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaAttachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaAttachment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Codec'] && !(typeof data['Codec'] === 'string' || data['Codec'] instanceof String)) {
            throw new Error("Expected the field `Codec` to be a primitive type in the JSON string but got " + data['Codec']);
        }
        // ensure the json data is a string
        if (data['CodecTag'] && !(typeof data['CodecTag'] === 'string' || data['CodecTag'] instanceof String)) {
            throw new Error("Expected the field `CodecTag` to be a primitive type in the JSON string but got " + data['CodecTag']);
        }
        // ensure the json data is a string
        if (data['Comment'] && !(typeof data['Comment'] === 'string' || data['Comment'] instanceof String)) {
            throw new Error("Expected the field `Comment` to be a primitive type in the JSON string but got " + data['Comment']);
        }
        // ensure the json data is a string
        if (data['DeliveryUrl'] && !(typeof data['DeliveryUrl'] === 'string' || data['DeliveryUrl'] instanceof String)) {
            throw new Error("Expected the field `DeliveryUrl` to be a primitive type in the JSON string but got " + data['DeliveryUrl']);
        }
        // ensure the json data is a string
        if (data['FileName'] && !(typeof data['FileName'] === 'string' || data['FileName'] instanceof String)) {
            throw new Error("Expected the field `FileName` to be a primitive type in the JSON string but got " + data['FileName']);
        }
        // ensure the json data is a string
        if (data['MimeType'] && !(typeof data['MimeType'] === 'string' || data['MimeType'] instanceof String)) {
            throw new Error("Expected the field `MimeType` to be a primitive type in the JSON string but got " + data['MimeType']);
        }

        return true;
    }


}



/**
 * Gets or sets the codec.
 * @member {String} Codec
 */
MediaAttachment.prototype['Codec'] = undefined;

/**
 * Gets or sets the codec tag.
 * @member {String} CodecTag
 */
MediaAttachment.prototype['CodecTag'] = undefined;

/**
 * Gets or sets the comment.
 * @member {String} Comment
 */
MediaAttachment.prototype['Comment'] = undefined;

/**
 * Gets or sets the delivery URL.
 * @member {String} DeliveryUrl
 */
MediaAttachment.prototype['DeliveryUrl'] = undefined;

/**
 * Gets or sets the filename.
 * @member {String} FileName
 */
MediaAttachment.prototype['FileName'] = undefined;

/**
 * Gets or sets the index.
 * @member {Number} Index
 */
MediaAttachment.prototype['Index'] = undefined;

/**
 * Gets or sets the MIME type.
 * @member {String} MimeType
 */
MediaAttachment.prototype['MimeType'] = undefined;






export default MediaAttachment;

