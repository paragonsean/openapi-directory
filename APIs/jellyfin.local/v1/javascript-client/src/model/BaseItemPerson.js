/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseItemPersonImageBlurHashes from './BaseItemPersonImageBlurHashes';

/**
 * The BaseItemPerson model module.
 * @module model/BaseItemPerson
 * @version v1
 */
class BaseItemPerson {
    /**
     * Constructs a new <code>BaseItemPerson</code>.
     * This is used by the api to get information about a Person within a BaseItem.
     * @alias module:model/BaseItemPerson
     */
    constructor() { 
        
        BaseItemPerson.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BaseItemPerson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseItemPerson} obj Optional instance to populate.
     * @return {module:model/BaseItemPerson} The populated <code>BaseItemPerson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseItemPerson();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('ImageBlurHashes')) {
                obj['ImageBlurHashes'] = BaseItemPersonImageBlurHashes.constructFromObject(data['ImageBlurHashes']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PrimaryImageTag')) {
                obj['PrimaryImageTag'] = ApiClient.convertToType(data['PrimaryImageTag'], 'String');
            }
            if (data.hasOwnProperty('Role')) {
                obj['Role'] = ApiClient.convertToType(data['Role'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaseItemPerson</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaseItemPerson</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // validate the optional field `ImageBlurHashes`
        if (data['ImageBlurHashes']) { // data not null
          BaseItemPersonImageBlurHashes.validateJSON(data['ImageBlurHashes']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['PrimaryImageTag'] && !(typeof data['PrimaryImageTag'] === 'string' || data['PrimaryImageTag'] instanceof String)) {
            throw new Error("Expected the field `PrimaryImageTag` to be a primitive type in the JSON string but got " + data['PrimaryImageTag']);
        }
        // ensure the json data is a string
        if (data['Role'] && !(typeof data['Role'] === 'string' || data['Role'] instanceof String)) {
            throw new Error("Expected the field `Role` to be a primitive type in the JSON string but got " + data['Role']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * Gets or sets the identifier.
 * @member {String} Id
 */
BaseItemPerson.prototype['Id'] = undefined;

/**
 * @member {module:model/BaseItemPersonImageBlurHashes} ImageBlurHashes
 */
BaseItemPerson.prototype['ImageBlurHashes'] = undefined;

/**
 * Gets or sets the name.
 * @member {String} Name
 */
BaseItemPerson.prototype['Name'] = undefined;

/**
 * Gets or sets the primary image tag.
 * @member {String} PrimaryImageTag
 */
BaseItemPerson.prototype['PrimaryImageTag'] = undefined;

/**
 * Gets or sets the role.
 * @member {String} Role
 */
BaseItemPerson.prototype['Role'] = undefined;

/**
 * Gets or sets the type.
 * @member {String} Type
 */
BaseItemPerson.prototype['Type'] = undefined;






export default BaseItemPerson;

