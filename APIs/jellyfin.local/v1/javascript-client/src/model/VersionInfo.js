/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Version from './Version';

/**
 * The VersionInfo model module.
 * @module model/VersionInfo
 * @version v1
 */
class VersionInfo {
    /**
     * Constructs a new <code>VersionInfo</code>.
     * Defines the MediaBrowser.Model.Updates.VersionInfo class.
     * @alias module:model/VersionInfo
     */
    constructor() { 
        
        VersionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VersionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VersionInfo} obj Optional instance to populate.
     * @return {module:model/VersionInfo} The populated <code>VersionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VersionInfo();

            if (data.hasOwnProperty('VersionNumber')) {
                obj['VersionNumber'] = Version.constructFromObject(data['VersionNumber']);
            }
            if (data.hasOwnProperty('changelog')) {
                obj['changelog'] = ApiClient.convertToType(data['changelog'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('repositoryName')) {
                obj['repositoryName'] = ApiClient.convertToType(data['repositoryName'], 'String');
            }
            if (data.hasOwnProperty('repositoryUrl')) {
                obj['repositoryUrl'] = ApiClient.convertToType(data['repositoryUrl'], 'String');
            }
            if (data.hasOwnProperty('sourceUrl')) {
                obj['sourceUrl'] = ApiClient.convertToType(data['sourceUrl'], 'String');
            }
            if (data.hasOwnProperty('targetAbi')) {
                obj['targetAbi'] = ApiClient.convertToType(data['targetAbi'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VersionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VersionInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `VersionNumber`
        if (data['VersionNumber']) { // data not null
          Version.validateJSON(data['VersionNumber']);
        }
        // ensure the json data is a string
        if (data['changelog'] && !(typeof data['changelog'] === 'string' || data['changelog'] instanceof String)) {
            throw new Error("Expected the field `changelog` to be a primitive type in the JSON string but got " + data['changelog']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // ensure the json data is a string
        if (data['repositoryName'] && !(typeof data['repositoryName'] === 'string' || data['repositoryName'] instanceof String)) {
            throw new Error("Expected the field `repositoryName` to be a primitive type in the JSON string but got " + data['repositoryName']);
        }
        // ensure the json data is a string
        if (data['repositoryUrl'] && !(typeof data['repositoryUrl'] === 'string' || data['repositoryUrl'] instanceof String)) {
            throw new Error("Expected the field `repositoryUrl` to be a primitive type in the JSON string but got " + data['repositoryUrl']);
        }
        // ensure the json data is a string
        if (data['sourceUrl'] && !(typeof data['sourceUrl'] === 'string' || data['sourceUrl'] instanceof String)) {
            throw new Error("Expected the field `sourceUrl` to be a primitive type in the JSON string but got " + data['sourceUrl']);
        }
        // ensure the json data is a string
        if (data['targetAbi'] && !(typeof data['targetAbi'] === 'string' || data['targetAbi'] instanceof String)) {
            throw new Error("Expected the field `targetAbi` to be a primitive type in the JSON string but got " + data['targetAbi']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/Version} VersionNumber
 */
VersionInfo.prototype['VersionNumber'] = undefined;

/**
 * Gets or sets the changelog for this version.
 * @member {String} changelog
 */
VersionInfo.prototype['changelog'] = undefined;

/**
 * Gets or sets a checksum for the binary.
 * @member {String} checksum
 */
VersionInfo.prototype['checksum'] = undefined;

/**
 * Gets or sets the repository name.
 * @member {String} repositoryName
 */
VersionInfo.prototype['repositoryName'] = undefined;

/**
 * Gets or sets the repository url.
 * @member {String} repositoryUrl
 */
VersionInfo.prototype['repositoryUrl'] = undefined;

/**
 * Gets or sets the source URL.
 * @member {String} sourceUrl
 */
VersionInfo.prototype['sourceUrl'] = undefined;

/**
 * Gets or sets the ABI that this version was built against.
 * @member {String} targetAbi
 */
VersionInfo.prototype['targetAbi'] = undefined;

/**
 * Gets or sets a timestamp of when the binary was built.
 * @member {String} timestamp
 */
VersionInfo.prototype['timestamp'] = undefined;

/**
 * Gets or sets the version.
 * @member {String} version
 */
VersionInfo.prototype['version'] = undefined;






export default VersionInfo;

