/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublicSystemInfo model module.
 * @module model/PublicSystemInfo
 * @version v1
 */
class PublicSystemInfo {
    /**
     * Constructs a new <code>PublicSystemInfo</code>.
     * @alias module:model/PublicSystemInfo
     */
    constructor() { 
        
        PublicSystemInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublicSystemInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicSystemInfo} obj Optional instance to populate.
     * @return {module:model/PublicSystemInfo} The populated <code>PublicSystemInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicSystemInfo();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('LocalAddress')) {
                obj['LocalAddress'] = ApiClient.convertToType(data['LocalAddress'], 'String');
            }
            if (data.hasOwnProperty('OperatingSystem')) {
                obj['OperatingSystem'] = ApiClient.convertToType(data['OperatingSystem'], 'String');
            }
            if (data.hasOwnProperty('ProductName')) {
                obj['ProductName'] = ApiClient.convertToType(data['ProductName'], 'String');
            }
            if (data.hasOwnProperty('ServerName')) {
                obj['ServerName'] = ApiClient.convertToType(data['ServerName'], 'String');
            }
            if (data.hasOwnProperty('StartupWizardCompleted')) {
                obj['StartupWizardCompleted'] = ApiClient.convertToType(data['StartupWizardCompleted'], 'Boolean');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicSystemInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicSystemInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['LocalAddress'] && !(typeof data['LocalAddress'] === 'string' || data['LocalAddress'] instanceof String)) {
            throw new Error("Expected the field `LocalAddress` to be a primitive type in the JSON string but got " + data['LocalAddress']);
        }
        // ensure the json data is a string
        if (data['OperatingSystem'] && !(typeof data['OperatingSystem'] === 'string' || data['OperatingSystem'] instanceof String)) {
            throw new Error("Expected the field `OperatingSystem` to be a primitive type in the JSON string but got " + data['OperatingSystem']);
        }
        // ensure the json data is a string
        if (data['ProductName'] && !(typeof data['ProductName'] === 'string' || data['ProductName'] instanceof String)) {
            throw new Error("Expected the field `ProductName` to be a primitive type in the JSON string but got " + data['ProductName']);
        }
        // ensure the json data is a string
        if (data['ServerName'] && !(typeof data['ServerName'] === 'string' || data['ServerName'] instanceof String)) {
            throw new Error("Expected the field `ServerName` to be a primitive type in the JSON string but got " + data['ServerName']);
        }
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }

        return true;
    }


}



/**
 * Gets or sets the id.
 * @member {String} Id
 */
PublicSystemInfo.prototype['Id'] = undefined;

/**
 * Gets or sets the local address.
 * @member {String} LocalAddress
 */
PublicSystemInfo.prototype['LocalAddress'] = undefined;

/**
 * Gets or sets the operating system.
 * @member {String} OperatingSystem
 */
PublicSystemInfo.prototype['OperatingSystem'] = undefined;

/**
 * Gets or sets the product name. This is the AssemblyProduct name.
 * @member {String} ProductName
 */
PublicSystemInfo.prototype['ProductName'] = undefined;

/**
 * Gets or sets the name of the server.
 * @member {String} ServerName
 */
PublicSystemInfo.prototype['ServerName'] = undefined;

/**
 * Gets or sets a value indicating whether the startup wizard is completed.
 * @member {Boolean} StartupWizardCompleted
 */
PublicSystemInfo.prototype['StartupWizardCompleted'] = undefined;

/**
 * Gets or sets the server version.
 * @member {String} Version
 */
PublicSystemInfo.prototype['Version'] = undefined;






export default PublicSystemInfo;

