/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Version from './Version';

/**
 * The InstallationInfo model module.
 * @module model/InstallationInfo
 * @version v1
 */
class InstallationInfo {
    /**
     * Constructs a new <code>InstallationInfo</code>.
     * Class InstallationInfo.
     * @alias module:model/InstallationInfo
     */
    constructor() { 
        
        InstallationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstallationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstallationInfo} obj Optional instance to populate.
     * @return {module:model/InstallationInfo} The populated <code>InstallationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstallationInfo();

            if (data.hasOwnProperty('Changelog')) {
                obj['Changelog'] = ApiClient.convertToType(data['Changelog'], 'String');
            }
            if (data.hasOwnProperty('Checksum')) {
                obj['Checksum'] = ApiClient.convertToType(data['Checksum'], 'String');
            }
            if (data.hasOwnProperty('Guid')) {
                obj['Guid'] = ApiClient.convertToType(data['Guid'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('SourceUrl')) {
                obj['SourceUrl'] = ApiClient.convertToType(data['SourceUrl'], 'String');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = Version.constructFromObject(data['Version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstallationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstallationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Changelog'] && !(typeof data['Changelog'] === 'string' || data['Changelog'] instanceof String)) {
            throw new Error("Expected the field `Changelog` to be a primitive type in the JSON string but got " + data['Changelog']);
        }
        // ensure the json data is a string
        if (data['Checksum'] && !(typeof data['Checksum'] === 'string' || data['Checksum'] instanceof String)) {
            throw new Error("Expected the field `Checksum` to be a primitive type in the JSON string but got " + data['Checksum']);
        }
        // ensure the json data is a string
        if (data['Guid'] && !(typeof data['Guid'] === 'string' || data['Guid'] instanceof String)) {
            throw new Error("Expected the field `Guid` to be a primitive type in the JSON string but got " + data['Guid']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['SourceUrl'] && !(typeof data['SourceUrl'] === 'string' || data['SourceUrl'] instanceof String)) {
            throw new Error("Expected the field `SourceUrl` to be a primitive type in the JSON string but got " + data['SourceUrl']);
        }
        // validate the optional field `Version`
        if (data['Version']) { // data not null
          Version.validateJSON(data['Version']);
        }

        return true;
    }


}



/**
 * Gets or sets the changelog for this version.
 * @member {String} Changelog
 */
InstallationInfo.prototype['Changelog'] = undefined;

/**
 * Gets or sets a checksum for the binary.
 * @member {String} Checksum
 */
InstallationInfo.prototype['Checksum'] = undefined;

/**
 * Gets or sets the Id.
 * @member {String} Guid
 */
InstallationInfo.prototype['Guid'] = undefined;

/**
 * Gets or sets the name.
 * @member {String} Name
 */
InstallationInfo.prototype['Name'] = undefined;

/**
 * Gets or sets the source URL.
 * @member {String} SourceUrl
 */
InstallationInfo.prototype['SourceUrl'] = undefined;

/**
 * @member {module:model/Version} Version
 */
InstallationInfo.prototype['Version'] = undefined;






export default InstallationInfo;

