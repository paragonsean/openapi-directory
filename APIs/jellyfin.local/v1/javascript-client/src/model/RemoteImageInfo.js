/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageType from './ImageType';
import RatingType from './RatingType';

/**
 * The RemoteImageInfo model module.
 * @module model/RemoteImageInfo
 * @version v1
 */
class RemoteImageInfo {
    /**
     * Constructs a new <code>RemoteImageInfo</code>.
     * Class RemoteImageInfo.
     * @alias module:model/RemoteImageInfo
     */
    constructor() { 
        
        RemoteImageInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RemoteImageInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemoteImageInfo} obj Optional instance to populate.
     * @return {module:model/RemoteImageInfo} The populated <code>RemoteImageInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemoteImageInfo();

            if (data.hasOwnProperty('CommunityRating')) {
                obj['CommunityRating'] = ApiClient.convertToType(data['CommunityRating'], 'Number');
            }
            if (data.hasOwnProperty('Height')) {
                obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
            }
            if (data.hasOwnProperty('Language')) {
                obj['Language'] = ApiClient.convertToType(data['Language'], 'String');
            }
            if (data.hasOwnProperty('ProviderName')) {
                obj['ProviderName'] = ApiClient.convertToType(data['ProviderName'], 'String');
            }
            if (data.hasOwnProperty('RatingType')) {
                obj['RatingType'] = RatingType.constructFromObject(data['RatingType']);
            }
            if (data.hasOwnProperty('ThumbnailUrl')) {
                obj['ThumbnailUrl'] = ApiClient.convertToType(data['ThumbnailUrl'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ImageType.constructFromObject(data['Type']);
            }
            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
            if (data.hasOwnProperty('VoteCount')) {
                obj['VoteCount'] = ApiClient.convertToType(data['VoteCount'], 'Number');
            }
            if (data.hasOwnProperty('Width')) {
                obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemoteImageInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemoteImageInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Language'] && !(typeof data['Language'] === 'string' || data['Language'] instanceof String)) {
            throw new Error("Expected the field `Language` to be a primitive type in the JSON string but got " + data['Language']);
        }
        // ensure the json data is a string
        if (data['ProviderName'] && !(typeof data['ProviderName'] === 'string' || data['ProviderName'] instanceof String)) {
            throw new Error("Expected the field `ProviderName` to be a primitive type in the JSON string but got " + data['ProviderName']);
        }
        // ensure the json data is a string
        if (data['ThumbnailUrl'] && !(typeof data['ThumbnailUrl'] === 'string' || data['ThumbnailUrl'] instanceof String)) {
            throw new Error("Expected the field `ThumbnailUrl` to be a primitive type in the JSON string but got " + data['ThumbnailUrl']);
        }
        // ensure the json data is a string
        if (data['Url'] && !(typeof data['Url'] === 'string' || data['Url'] instanceof String)) {
            throw new Error("Expected the field `Url` to be a primitive type in the JSON string but got " + data['Url']);
        }

        return true;
    }


}



/**
 * Gets or sets the community rating.
 * @member {Number} CommunityRating
 */
RemoteImageInfo.prototype['CommunityRating'] = undefined;

/**
 * Gets or sets the height.
 * @member {Number} Height
 */
RemoteImageInfo.prototype['Height'] = undefined;

/**
 * Gets or sets the language.
 * @member {String} Language
 */
RemoteImageInfo.prototype['Language'] = undefined;

/**
 * Gets or sets the name of the provider.
 * @member {String} ProviderName
 */
RemoteImageInfo.prototype['ProviderName'] = undefined;

/**
 * @member {module:model/RatingType} RatingType
 */
RemoteImageInfo.prototype['RatingType'] = undefined;

/**
 * Gets a url used for previewing a smaller version.
 * @member {String} ThumbnailUrl
 */
RemoteImageInfo.prototype['ThumbnailUrl'] = undefined;

/**
 * @member {module:model/ImageType} Type
 */
RemoteImageInfo.prototype['Type'] = undefined;

/**
 * Gets or sets the URL.
 * @member {String} Url
 */
RemoteImageInfo.prototype['Url'] = undefined;

/**
 * Gets or sets the vote count.
 * @member {Number} VoteCount
 */
RemoteImageInfo.prototype['VoteCount'] = undefined;

/**
 * Gets or sets the width.
 * @member {Number} Width
 */
RemoteImageInfo.prototype['Width'] = undefined;






export default RemoteImageInfo;

