/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseItemDto from './BaseItemDto';
import QueueItem from './QueueItem';

/**
 * The PlaybackStopInfo model module.
 * @module model/PlaybackStopInfo
 * @version v1
 */
class PlaybackStopInfo {
    /**
     * Constructs a new <code>PlaybackStopInfo</code>.
     * Class PlaybackStopInfo.
     * @alias module:model/PlaybackStopInfo
     */
    constructor() { 
        
        PlaybackStopInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlaybackStopInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaybackStopInfo} obj Optional instance to populate.
     * @return {module:model/PlaybackStopInfo} The populated <code>PlaybackStopInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlaybackStopInfo();

            if (data.hasOwnProperty('Failed')) {
                obj['Failed'] = ApiClient.convertToType(data['Failed'], 'Boolean');
            }
            if (data.hasOwnProperty('Item')) {
                obj['Item'] = BaseItemDto.constructFromObject(data['Item']);
            }
            if (data.hasOwnProperty('ItemId')) {
                obj['ItemId'] = ApiClient.convertToType(data['ItemId'], 'String');
            }
            if (data.hasOwnProperty('LiveStreamId')) {
                obj['LiveStreamId'] = ApiClient.convertToType(data['LiveStreamId'], 'String');
            }
            if (data.hasOwnProperty('MediaSourceId')) {
                obj['MediaSourceId'] = ApiClient.convertToType(data['MediaSourceId'], 'String');
            }
            if (data.hasOwnProperty('NextMediaType')) {
                obj['NextMediaType'] = ApiClient.convertToType(data['NextMediaType'], 'String');
            }
            if (data.hasOwnProperty('NowPlayingQueue')) {
                obj['NowPlayingQueue'] = ApiClient.convertToType(data['NowPlayingQueue'], [QueueItem]);
            }
            if (data.hasOwnProperty('PlaySessionId')) {
                obj['PlaySessionId'] = ApiClient.convertToType(data['PlaySessionId'], 'String');
            }
            if (data.hasOwnProperty('PlaylistItemId')) {
                obj['PlaylistItemId'] = ApiClient.convertToType(data['PlaylistItemId'], 'String');
            }
            if (data.hasOwnProperty('PositionTicks')) {
                obj['PositionTicks'] = ApiClient.convertToType(data['PositionTicks'], 'Number');
            }
            if (data.hasOwnProperty('SessionId')) {
                obj['SessionId'] = ApiClient.convertToType(data['SessionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlaybackStopInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlaybackStopInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Item`
        if (data['Item']) { // data not null
          BaseItemDto.validateJSON(data['Item']);
        }
        // ensure the json data is a string
        if (data['ItemId'] && !(typeof data['ItemId'] === 'string' || data['ItemId'] instanceof String)) {
            throw new Error("Expected the field `ItemId` to be a primitive type in the JSON string but got " + data['ItemId']);
        }
        // ensure the json data is a string
        if (data['LiveStreamId'] && !(typeof data['LiveStreamId'] === 'string' || data['LiveStreamId'] instanceof String)) {
            throw new Error("Expected the field `LiveStreamId` to be a primitive type in the JSON string but got " + data['LiveStreamId']);
        }
        // ensure the json data is a string
        if (data['MediaSourceId'] && !(typeof data['MediaSourceId'] === 'string' || data['MediaSourceId'] instanceof String)) {
            throw new Error("Expected the field `MediaSourceId` to be a primitive type in the JSON string but got " + data['MediaSourceId']);
        }
        // ensure the json data is a string
        if (data['NextMediaType'] && !(typeof data['NextMediaType'] === 'string' || data['NextMediaType'] instanceof String)) {
            throw new Error("Expected the field `NextMediaType` to be a primitive type in the JSON string but got " + data['NextMediaType']);
        }
        if (data['NowPlayingQueue']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['NowPlayingQueue'])) {
                throw new Error("Expected the field `NowPlayingQueue` to be an array in the JSON data but got " + data['NowPlayingQueue']);
            }
            // validate the optional field `NowPlayingQueue` (array)
            for (const item of data['NowPlayingQueue']) {
                QueueItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PlaySessionId'] && !(typeof data['PlaySessionId'] === 'string' || data['PlaySessionId'] instanceof String)) {
            throw new Error("Expected the field `PlaySessionId` to be a primitive type in the JSON string but got " + data['PlaySessionId']);
        }
        // ensure the json data is a string
        if (data['PlaylistItemId'] && !(typeof data['PlaylistItemId'] === 'string' || data['PlaylistItemId'] instanceof String)) {
            throw new Error("Expected the field `PlaylistItemId` to be a primitive type in the JSON string but got " + data['PlaylistItemId']);
        }
        // ensure the json data is a string
        if (data['SessionId'] && !(typeof data['SessionId'] === 'string' || data['SessionId'] instanceof String)) {
            throw new Error("Expected the field `SessionId` to be a primitive type in the JSON string but got " + data['SessionId']);
        }

        return true;
    }


}



/**
 * Gets or sets a value indicating whether this MediaBrowser.Model.Session.PlaybackStopInfo is failed.
 * @member {Boolean} Failed
 */
PlaybackStopInfo.prototype['Failed'] = undefined;

/**
 * @member {module:model/BaseItemDto} Item
 */
PlaybackStopInfo.prototype['Item'] = undefined;

/**
 * Gets or sets the item identifier.
 * @member {String} ItemId
 */
PlaybackStopInfo.prototype['ItemId'] = undefined;

/**
 * Gets or sets the live stream identifier.
 * @member {String} LiveStreamId
 */
PlaybackStopInfo.prototype['LiveStreamId'] = undefined;

/**
 * Gets or sets the media version identifier.
 * @member {String} MediaSourceId
 */
PlaybackStopInfo.prototype['MediaSourceId'] = undefined;

/**
 * @member {String} NextMediaType
 */
PlaybackStopInfo.prototype['NextMediaType'] = undefined;

/**
 * @member {Array.<module:model/QueueItem>} NowPlayingQueue
 */
PlaybackStopInfo.prototype['NowPlayingQueue'] = undefined;

/**
 * Gets or sets the play session identifier.
 * @member {String} PlaySessionId
 */
PlaybackStopInfo.prototype['PlaySessionId'] = undefined;

/**
 * @member {String} PlaylistItemId
 */
PlaybackStopInfo.prototype['PlaylistItemId'] = undefined;

/**
 * Gets or sets the position ticks.
 * @member {Number} PositionTicks
 */
PlaybackStopInfo.prototype['PositionTicks'] = undefined;

/**
 * Gets or sets the session id.
 * @member {String} SessionId
 */
PlaybackStopInfo.prototype['SessionId'] = undefined;






export default PlaybackStopInfo;

