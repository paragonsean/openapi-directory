/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LibraryOptions from './LibraryOptions';

/**
 * The VirtualFolderInfo model module.
 * @module model/VirtualFolderInfo
 * @version v1
 */
class VirtualFolderInfo {
    /**
     * Constructs a new <code>VirtualFolderInfo</code>.
     * Used to hold information about a user&#39;s list of configured virtual folders.
     * @alias module:model/VirtualFolderInfo
     */
    constructor() { 
        
        VirtualFolderInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualFolderInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualFolderInfo} obj Optional instance to populate.
     * @return {module:model/VirtualFolderInfo} The populated <code>VirtualFolderInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualFolderInfo();

            if (data.hasOwnProperty('CollectionType')) {
                obj['CollectionType'] = ApiClient.convertToType(data['CollectionType'], 'String');
            }
            if (data.hasOwnProperty('ItemId')) {
                obj['ItemId'] = ApiClient.convertToType(data['ItemId'], 'String');
            }
            if (data.hasOwnProperty('LibraryOptions')) {
                obj['LibraryOptions'] = LibraryOptions.constructFromObject(data['LibraryOptions']);
            }
            if (data.hasOwnProperty('Locations')) {
                obj['Locations'] = ApiClient.convertToType(data['Locations'], ['String']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PrimaryImageItemId')) {
                obj['PrimaryImageItemId'] = ApiClient.convertToType(data['PrimaryImageItemId'], 'String');
            }
            if (data.hasOwnProperty('RefreshProgress')) {
                obj['RefreshProgress'] = ApiClient.convertToType(data['RefreshProgress'], 'Number');
            }
            if (data.hasOwnProperty('RefreshStatus')) {
                obj['RefreshStatus'] = ApiClient.convertToType(data['RefreshStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualFolderInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualFolderInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CollectionType'] && !(typeof data['CollectionType'] === 'string' || data['CollectionType'] instanceof String)) {
            throw new Error("Expected the field `CollectionType` to be a primitive type in the JSON string but got " + data['CollectionType']);
        }
        // ensure the json data is a string
        if (data['ItemId'] && !(typeof data['ItemId'] === 'string' || data['ItemId'] instanceof String)) {
            throw new Error("Expected the field `ItemId` to be a primitive type in the JSON string but got " + data['ItemId']);
        }
        // validate the optional field `LibraryOptions`
        if (data['LibraryOptions']) { // data not null
          LibraryOptions.validateJSON(data['LibraryOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Locations'])) {
            throw new Error("Expected the field `Locations` to be an array in the JSON data but got " + data['Locations']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['PrimaryImageItemId'] && !(typeof data['PrimaryImageItemId'] === 'string' || data['PrimaryImageItemId'] instanceof String)) {
            throw new Error("Expected the field `PrimaryImageItemId` to be a primitive type in the JSON string but got " + data['PrimaryImageItemId']);
        }
        // ensure the json data is a string
        if (data['RefreshStatus'] && !(typeof data['RefreshStatus'] === 'string' || data['RefreshStatus'] instanceof String)) {
            throw new Error("Expected the field `RefreshStatus` to be a primitive type in the JSON string but got " + data['RefreshStatus']);
        }

        return true;
    }


}



/**
 * Gets or sets the type of the collection.
 * @member {String} CollectionType
 */
VirtualFolderInfo.prototype['CollectionType'] = undefined;

/**
 * Gets or sets the item identifier.
 * @member {String} ItemId
 */
VirtualFolderInfo.prototype['ItemId'] = undefined;

/**
 * @member {module:model/LibraryOptions} LibraryOptions
 */
VirtualFolderInfo.prototype['LibraryOptions'] = undefined;

/**
 * Gets or sets the locations.
 * @member {Array.<String>} Locations
 */
VirtualFolderInfo.prototype['Locations'] = undefined;

/**
 * Gets or sets the name.
 * @member {String} Name
 */
VirtualFolderInfo.prototype['Name'] = undefined;

/**
 * Gets or sets the primary image item identifier.
 * @member {String} PrimaryImageItemId
 */
VirtualFolderInfo.prototype['PrimaryImageItemId'] = undefined;

/**
 * @member {Number} RefreshProgress
 */
VirtualFolderInfo.prototype['RefreshProgress'] = undefined;

/**
 * @member {String} RefreshStatus
 */
VirtualFolderInfo.prototype['RefreshStatus'] = undefined;






export default VirtualFolderInfo;

