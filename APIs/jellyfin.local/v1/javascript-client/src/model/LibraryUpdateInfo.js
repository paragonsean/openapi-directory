/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LibraryUpdateInfo model module.
 * @module model/LibraryUpdateInfo
 * @version v1
 */
class LibraryUpdateInfo {
    /**
     * Constructs a new <code>LibraryUpdateInfo</code>.
     * Class LibraryUpdateInfo.
     * @alias module:model/LibraryUpdateInfo
     */
    constructor() { 
        
        LibraryUpdateInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LibraryUpdateInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LibraryUpdateInfo} obj Optional instance to populate.
     * @return {module:model/LibraryUpdateInfo} The populated <code>LibraryUpdateInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LibraryUpdateInfo();

            if (data.hasOwnProperty('CollectionFolders')) {
                obj['CollectionFolders'] = ApiClient.convertToType(data['CollectionFolders'], ['String']);
            }
            if (data.hasOwnProperty('FoldersAddedTo')) {
                obj['FoldersAddedTo'] = ApiClient.convertToType(data['FoldersAddedTo'], ['String']);
            }
            if (data.hasOwnProperty('FoldersRemovedFrom')) {
                obj['FoldersRemovedFrom'] = ApiClient.convertToType(data['FoldersRemovedFrom'], ['String']);
            }
            if (data.hasOwnProperty('IsEmpty')) {
                obj['IsEmpty'] = ApiClient.convertToType(data['IsEmpty'], 'Boolean');
            }
            if (data.hasOwnProperty('ItemsAdded')) {
                obj['ItemsAdded'] = ApiClient.convertToType(data['ItemsAdded'], ['String']);
            }
            if (data.hasOwnProperty('ItemsRemoved')) {
                obj['ItemsRemoved'] = ApiClient.convertToType(data['ItemsRemoved'], ['String']);
            }
            if (data.hasOwnProperty('ItemsUpdated')) {
                obj['ItemsUpdated'] = ApiClient.convertToType(data['ItemsUpdated'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LibraryUpdateInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LibraryUpdateInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['CollectionFolders'])) {
            throw new Error("Expected the field `CollectionFolders` to be an array in the JSON data but got " + data['CollectionFolders']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['FoldersAddedTo'])) {
            throw new Error("Expected the field `FoldersAddedTo` to be an array in the JSON data but got " + data['FoldersAddedTo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['FoldersRemovedFrom'])) {
            throw new Error("Expected the field `FoldersRemovedFrom` to be an array in the JSON data but got " + data['FoldersRemovedFrom']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ItemsAdded'])) {
            throw new Error("Expected the field `ItemsAdded` to be an array in the JSON data but got " + data['ItemsAdded']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ItemsRemoved'])) {
            throw new Error("Expected the field `ItemsRemoved` to be an array in the JSON data but got " + data['ItemsRemoved']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ItemsUpdated'])) {
            throw new Error("Expected the field `ItemsUpdated` to be an array in the JSON data but got " + data['ItemsUpdated']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} CollectionFolders
 */
LibraryUpdateInfo.prototype['CollectionFolders'] = undefined;

/**
 * Gets or sets the folders added to.
 * @member {Array.<String>} FoldersAddedTo
 */
LibraryUpdateInfo.prototype['FoldersAddedTo'] = undefined;

/**
 * Gets or sets the folders removed from.
 * @member {Array.<String>} FoldersRemovedFrom
 */
LibraryUpdateInfo.prototype['FoldersRemovedFrom'] = undefined;

/**
 * @member {Boolean} IsEmpty
 */
LibraryUpdateInfo.prototype['IsEmpty'] = undefined;

/**
 * Gets or sets the items added.
 * @member {Array.<String>} ItemsAdded
 */
LibraryUpdateInfo.prototype['ItemsAdded'] = undefined;

/**
 * Gets or sets the items removed.
 * @member {Array.<String>} ItemsRemoved
 */
LibraryUpdateInfo.prototype['ItemsRemoved'] = undefined;

/**
 * Gets or sets the items updated.
 * @member {Array.<String>} ItemsUpdated
 */
LibraryUpdateInfo.prototype['ItemsUpdated'] = undefined;






export default LibraryUpdateInfo;

