/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetadataOptions model module.
 * @module model/MetadataOptions
 * @version v1
 */
class MetadataOptions {
    /**
     * Constructs a new <code>MetadataOptions</code>.
     * Class MetadataOptions.
     * @alias module:model/MetadataOptions
     */
    constructor() { 
        
        MetadataOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetadataOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetadataOptions} obj Optional instance to populate.
     * @return {module:model/MetadataOptions} The populated <code>MetadataOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetadataOptions();

            if (data.hasOwnProperty('DisabledImageFetchers')) {
                obj['DisabledImageFetchers'] = ApiClient.convertToType(data['DisabledImageFetchers'], ['String']);
            }
            if (data.hasOwnProperty('DisabledMetadataFetchers')) {
                obj['DisabledMetadataFetchers'] = ApiClient.convertToType(data['DisabledMetadataFetchers'], ['String']);
            }
            if (data.hasOwnProperty('DisabledMetadataSavers')) {
                obj['DisabledMetadataSavers'] = ApiClient.convertToType(data['DisabledMetadataSavers'], ['String']);
            }
            if (data.hasOwnProperty('ImageFetcherOrder')) {
                obj['ImageFetcherOrder'] = ApiClient.convertToType(data['ImageFetcherOrder'], ['String']);
            }
            if (data.hasOwnProperty('ItemType')) {
                obj['ItemType'] = ApiClient.convertToType(data['ItemType'], 'String');
            }
            if (data.hasOwnProperty('LocalMetadataReaderOrder')) {
                obj['LocalMetadataReaderOrder'] = ApiClient.convertToType(data['LocalMetadataReaderOrder'], ['String']);
            }
            if (data.hasOwnProperty('MetadataFetcherOrder')) {
                obj['MetadataFetcherOrder'] = ApiClient.convertToType(data['MetadataFetcherOrder'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetadataOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetadataOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['DisabledImageFetchers'])) {
            throw new Error("Expected the field `DisabledImageFetchers` to be an array in the JSON data but got " + data['DisabledImageFetchers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DisabledMetadataFetchers'])) {
            throw new Error("Expected the field `DisabledMetadataFetchers` to be an array in the JSON data but got " + data['DisabledMetadataFetchers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DisabledMetadataSavers'])) {
            throw new Error("Expected the field `DisabledMetadataSavers` to be an array in the JSON data but got " + data['DisabledMetadataSavers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ImageFetcherOrder'])) {
            throw new Error("Expected the field `ImageFetcherOrder` to be an array in the JSON data but got " + data['ImageFetcherOrder']);
        }
        // ensure the json data is a string
        if (data['ItemType'] && !(typeof data['ItemType'] === 'string' || data['ItemType'] instanceof String)) {
            throw new Error("Expected the field `ItemType` to be a primitive type in the JSON string but got " + data['ItemType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['LocalMetadataReaderOrder'])) {
            throw new Error("Expected the field `LocalMetadataReaderOrder` to be an array in the JSON data but got " + data['LocalMetadataReaderOrder']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['MetadataFetcherOrder'])) {
            throw new Error("Expected the field `MetadataFetcherOrder` to be an array in the JSON data but got " + data['MetadataFetcherOrder']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} DisabledImageFetchers
 */
MetadataOptions.prototype['DisabledImageFetchers'] = undefined;

/**
 * @member {Array.<String>} DisabledMetadataFetchers
 */
MetadataOptions.prototype['DisabledMetadataFetchers'] = undefined;

/**
 * @member {Array.<String>} DisabledMetadataSavers
 */
MetadataOptions.prototype['DisabledMetadataSavers'] = undefined;

/**
 * @member {Array.<String>} ImageFetcherOrder
 */
MetadataOptions.prototype['ImageFetcherOrder'] = undefined;

/**
 * @member {String} ItemType
 */
MetadataOptions.prototype['ItemType'] = undefined;

/**
 * @member {Array.<String>} LocalMetadataReaderOrder
 */
MetadataOptions.prototype['LocalMetadataReaderOrder'] = undefined;

/**
 * @member {Array.<String>} MetadataFetcherOrder
 */
MetadataOptions.prototype['MetadataFetcherOrder'] = undefined;






export default MetadataOptions;

