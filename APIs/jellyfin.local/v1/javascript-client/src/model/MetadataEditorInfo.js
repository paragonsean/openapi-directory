/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CountryInfo from './CountryInfo';
import CultureDto from './CultureDto';
import ExternalIdInfo from './ExternalIdInfo';
import NameValuePair from './NameValuePair';
import ParentalRating from './ParentalRating';

/**
 * The MetadataEditorInfo model module.
 * @module model/MetadataEditorInfo
 * @version v1
 */
class MetadataEditorInfo {
    /**
     * Constructs a new <code>MetadataEditorInfo</code>.
     * @alias module:model/MetadataEditorInfo
     */
    constructor() { 
        
        MetadataEditorInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetadataEditorInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetadataEditorInfo} obj Optional instance to populate.
     * @return {module:model/MetadataEditorInfo} The populated <code>MetadataEditorInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetadataEditorInfo();

            if (data.hasOwnProperty('ContentType')) {
                obj['ContentType'] = ApiClient.convertToType(data['ContentType'], 'String');
            }
            if (data.hasOwnProperty('ContentTypeOptions')) {
                obj['ContentTypeOptions'] = ApiClient.convertToType(data['ContentTypeOptions'], [NameValuePair]);
            }
            if (data.hasOwnProperty('Countries')) {
                obj['Countries'] = ApiClient.convertToType(data['Countries'], [CountryInfo]);
            }
            if (data.hasOwnProperty('Cultures')) {
                obj['Cultures'] = ApiClient.convertToType(data['Cultures'], [CultureDto]);
            }
            if (data.hasOwnProperty('ExternalIdInfos')) {
                obj['ExternalIdInfos'] = ApiClient.convertToType(data['ExternalIdInfos'], [ExternalIdInfo]);
            }
            if (data.hasOwnProperty('ParentalRatingOptions')) {
                obj['ParentalRatingOptions'] = ApiClient.convertToType(data['ParentalRatingOptions'], [ParentalRating]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetadataEditorInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetadataEditorInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ContentType'] && !(typeof data['ContentType'] === 'string' || data['ContentType'] instanceof String)) {
            throw new Error("Expected the field `ContentType` to be a primitive type in the JSON string but got " + data['ContentType']);
        }
        if (data['ContentTypeOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ContentTypeOptions'])) {
                throw new Error("Expected the field `ContentTypeOptions` to be an array in the JSON data but got " + data['ContentTypeOptions']);
            }
            // validate the optional field `ContentTypeOptions` (array)
            for (const item of data['ContentTypeOptions']) {
                NameValuePair.validateJSON(item);
            };
        }
        if (data['Countries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Countries'])) {
                throw new Error("Expected the field `Countries` to be an array in the JSON data but got " + data['Countries']);
            }
            // validate the optional field `Countries` (array)
            for (const item of data['Countries']) {
                CountryInfo.validateJSON(item);
            };
        }
        if (data['Cultures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Cultures'])) {
                throw new Error("Expected the field `Cultures` to be an array in the JSON data but got " + data['Cultures']);
            }
            // validate the optional field `Cultures` (array)
            for (const item of data['Cultures']) {
                CultureDto.validateJSON(item);
            };
        }
        if (data['ExternalIdInfos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ExternalIdInfos'])) {
                throw new Error("Expected the field `ExternalIdInfos` to be an array in the JSON data but got " + data['ExternalIdInfos']);
            }
            // validate the optional field `ExternalIdInfos` (array)
            for (const item of data['ExternalIdInfos']) {
                ExternalIdInfo.validateJSON(item);
            };
        }
        if (data['ParentalRatingOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ParentalRatingOptions'])) {
                throw new Error("Expected the field `ParentalRatingOptions` to be an array in the JSON data but got " + data['ParentalRatingOptions']);
            }
            // validate the optional field `ParentalRatingOptions` (array)
            for (const item of data['ParentalRatingOptions']) {
                ParentalRating.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} ContentType
 */
MetadataEditorInfo.prototype['ContentType'] = undefined;

/**
 * @member {Array.<module:model/NameValuePair>} ContentTypeOptions
 */
MetadataEditorInfo.prototype['ContentTypeOptions'] = undefined;

/**
 * @member {Array.<module:model/CountryInfo>} Countries
 */
MetadataEditorInfo.prototype['Countries'] = undefined;

/**
 * @member {Array.<module:model/CultureDto>} Cultures
 */
MetadataEditorInfo.prototype['Cultures'] = undefined;

/**
 * @member {Array.<module:model/ExternalIdInfo>} ExternalIdInfos
 */
MetadataEditorInfo.prototype['ExternalIdInfos'] = undefined;

/**
 * @member {Array.<module:model/ParentalRating>} ParentalRatingOptions
 */
MetadataEditorInfo.prototype['ParentalRatingOptions'] = undefined;






export default MetadataEditorInfo;

