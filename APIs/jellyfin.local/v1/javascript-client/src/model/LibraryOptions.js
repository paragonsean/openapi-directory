/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaPathInfo from './MediaPathInfo';
import TypeOptions from './TypeOptions';

/**
 * The LibraryOptions model module.
 * @module model/LibraryOptions
 * @version v1
 */
class LibraryOptions {
    /**
     * Constructs a new <code>LibraryOptions</code>.
     * @alias module:model/LibraryOptions
     */
    constructor() { 
        
        LibraryOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LibraryOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LibraryOptions} obj Optional instance to populate.
     * @return {module:model/LibraryOptions} The populated <code>LibraryOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LibraryOptions();

            if (data.hasOwnProperty('AutomaticRefreshIntervalDays')) {
                obj['AutomaticRefreshIntervalDays'] = ApiClient.convertToType(data['AutomaticRefreshIntervalDays'], 'Number');
            }
            if (data.hasOwnProperty('DisabledLocalMetadataReaders')) {
                obj['DisabledLocalMetadataReaders'] = ApiClient.convertToType(data['DisabledLocalMetadataReaders'], ['String']);
            }
            if (data.hasOwnProperty('DisabledSubtitleFetchers')) {
                obj['DisabledSubtitleFetchers'] = ApiClient.convertToType(data['DisabledSubtitleFetchers'], ['String']);
            }
            if (data.hasOwnProperty('EnableAutomaticSeriesGrouping')) {
                obj['EnableAutomaticSeriesGrouping'] = ApiClient.convertToType(data['EnableAutomaticSeriesGrouping'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableChapterImageExtraction')) {
                obj['EnableChapterImageExtraction'] = ApiClient.convertToType(data['EnableChapterImageExtraction'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableEmbeddedEpisodeInfos')) {
                obj['EnableEmbeddedEpisodeInfos'] = ApiClient.convertToType(data['EnableEmbeddedEpisodeInfos'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableEmbeddedTitles')) {
                obj['EnableEmbeddedTitles'] = ApiClient.convertToType(data['EnableEmbeddedTitles'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableInternetProviders')) {
                obj['EnableInternetProviders'] = ApiClient.convertToType(data['EnableInternetProviders'], 'Boolean');
            }
            if (data.hasOwnProperty('EnablePhotos')) {
                obj['EnablePhotos'] = ApiClient.convertToType(data['EnablePhotos'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableRealtimeMonitor')) {
                obj['EnableRealtimeMonitor'] = ApiClient.convertToType(data['EnableRealtimeMonitor'], 'Boolean');
            }
            if (data.hasOwnProperty('ExtractChapterImagesDuringLibraryScan')) {
                obj['ExtractChapterImagesDuringLibraryScan'] = ApiClient.convertToType(data['ExtractChapterImagesDuringLibraryScan'], 'Boolean');
            }
            if (data.hasOwnProperty('LocalMetadataReaderOrder')) {
                obj['LocalMetadataReaderOrder'] = ApiClient.convertToType(data['LocalMetadataReaderOrder'], ['String']);
            }
            if (data.hasOwnProperty('MetadataCountryCode')) {
                obj['MetadataCountryCode'] = ApiClient.convertToType(data['MetadataCountryCode'], 'String');
            }
            if (data.hasOwnProperty('MetadataSavers')) {
                obj['MetadataSavers'] = ApiClient.convertToType(data['MetadataSavers'], ['String']);
            }
            if (data.hasOwnProperty('PathInfos')) {
                obj['PathInfos'] = ApiClient.convertToType(data['PathInfos'], [MediaPathInfo]);
            }
            if (data.hasOwnProperty('PreferredMetadataLanguage')) {
                obj['PreferredMetadataLanguage'] = ApiClient.convertToType(data['PreferredMetadataLanguage'], 'String');
            }
            if (data.hasOwnProperty('RequirePerfectSubtitleMatch')) {
                obj['RequirePerfectSubtitleMatch'] = ApiClient.convertToType(data['RequirePerfectSubtitleMatch'], 'Boolean');
            }
            if (data.hasOwnProperty('SaveLocalMetadata')) {
                obj['SaveLocalMetadata'] = ApiClient.convertToType(data['SaveLocalMetadata'], 'Boolean');
            }
            if (data.hasOwnProperty('SaveSubtitlesWithMedia')) {
                obj['SaveSubtitlesWithMedia'] = ApiClient.convertToType(data['SaveSubtitlesWithMedia'], 'Boolean');
            }
            if (data.hasOwnProperty('SeasonZeroDisplayName')) {
                obj['SeasonZeroDisplayName'] = ApiClient.convertToType(data['SeasonZeroDisplayName'], 'String');
            }
            if (data.hasOwnProperty('SkipSubtitlesIfAudioTrackMatches')) {
                obj['SkipSubtitlesIfAudioTrackMatches'] = ApiClient.convertToType(data['SkipSubtitlesIfAudioTrackMatches'], 'Boolean');
            }
            if (data.hasOwnProperty('SkipSubtitlesIfEmbeddedSubtitlesPresent')) {
                obj['SkipSubtitlesIfEmbeddedSubtitlesPresent'] = ApiClient.convertToType(data['SkipSubtitlesIfEmbeddedSubtitlesPresent'], 'Boolean');
            }
            if (data.hasOwnProperty('SubtitleDownloadLanguages')) {
                obj['SubtitleDownloadLanguages'] = ApiClient.convertToType(data['SubtitleDownloadLanguages'], ['String']);
            }
            if (data.hasOwnProperty('SubtitleFetcherOrder')) {
                obj['SubtitleFetcherOrder'] = ApiClient.convertToType(data['SubtitleFetcherOrder'], ['String']);
            }
            if (data.hasOwnProperty('TypeOptions')) {
                obj['TypeOptions'] = ApiClient.convertToType(data['TypeOptions'], [TypeOptions]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LibraryOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LibraryOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['DisabledLocalMetadataReaders'])) {
            throw new Error("Expected the field `DisabledLocalMetadataReaders` to be an array in the JSON data but got " + data['DisabledLocalMetadataReaders']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DisabledSubtitleFetchers'])) {
            throw new Error("Expected the field `DisabledSubtitleFetchers` to be an array in the JSON data but got " + data['DisabledSubtitleFetchers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['LocalMetadataReaderOrder'])) {
            throw new Error("Expected the field `LocalMetadataReaderOrder` to be an array in the JSON data but got " + data['LocalMetadataReaderOrder']);
        }
        // ensure the json data is a string
        if (data['MetadataCountryCode'] && !(typeof data['MetadataCountryCode'] === 'string' || data['MetadataCountryCode'] instanceof String)) {
            throw new Error("Expected the field `MetadataCountryCode` to be a primitive type in the JSON string but got " + data['MetadataCountryCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['MetadataSavers'])) {
            throw new Error("Expected the field `MetadataSavers` to be an array in the JSON data but got " + data['MetadataSavers']);
        }
        if (data['PathInfos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PathInfos'])) {
                throw new Error("Expected the field `PathInfos` to be an array in the JSON data but got " + data['PathInfos']);
            }
            // validate the optional field `PathInfos` (array)
            for (const item of data['PathInfos']) {
                MediaPathInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PreferredMetadataLanguage'] && !(typeof data['PreferredMetadataLanguage'] === 'string' || data['PreferredMetadataLanguage'] instanceof String)) {
            throw new Error("Expected the field `PreferredMetadataLanguage` to be a primitive type in the JSON string but got " + data['PreferredMetadataLanguage']);
        }
        // ensure the json data is a string
        if (data['SeasonZeroDisplayName'] && !(typeof data['SeasonZeroDisplayName'] === 'string' || data['SeasonZeroDisplayName'] instanceof String)) {
            throw new Error("Expected the field `SeasonZeroDisplayName` to be a primitive type in the JSON string but got " + data['SeasonZeroDisplayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SubtitleDownloadLanguages'])) {
            throw new Error("Expected the field `SubtitleDownloadLanguages` to be an array in the JSON data but got " + data['SubtitleDownloadLanguages']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SubtitleFetcherOrder'])) {
            throw new Error("Expected the field `SubtitleFetcherOrder` to be an array in the JSON data but got " + data['SubtitleFetcherOrder']);
        }
        if (data['TypeOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TypeOptions'])) {
                throw new Error("Expected the field `TypeOptions` to be an array in the JSON data but got " + data['TypeOptions']);
            }
            // validate the optional field `TypeOptions` (array)
            for (const item of data['TypeOptions']) {
                TypeOptions.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} AutomaticRefreshIntervalDays
 */
LibraryOptions.prototype['AutomaticRefreshIntervalDays'] = undefined;

/**
 * @member {Array.<String>} DisabledLocalMetadataReaders
 */
LibraryOptions.prototype['DisabledLocalMetadataReaders'] = undefined;

/**
 * @member {Array.<String>} DisabledSubtitleFetchers
 */
LibraryOptions.prototype['DisabledSubtitleFetchers'] = undefined;

/**
 * @member {Boolean} EnableAutomaticSeriesGrouping
 */
LibraryOptions.prototype['EnableAutomaticSeriesGrouping'] = undefined;

/**
 * @member {Boolean} EnableChapterImageExtraction
 */
LibraryOptions.prototype['EnableChapterImageExtraction'] = undefined;

/**
 * @member {Boolean} EnableEmbeddedEpisodeInfos
 */
LibraryOptions.prototype['EnableEmbeddedEpisodeInfos'] = undefined;

/**
 * @member {Boolean} EnableEmbeddedTitles
 */
LibraryOptions.prototype['EnableEmbeddedTitles'] = undefined;

/**
 * @member {Boolean} EnableInternetProviders
 */
LibraryOptions.prototype['EnableInternetProviders'] = undefined;

/**
 * @member {Boolean} EnablePhotos
 */
LibraryOptions.prototype['EnablePhotos'] = undefined;

/**
 * @member {Boolean} EnableRealtimeMonitor
 */
LibraryOptions.prototype['EnableRealtimeMonitor'] = undefined;

/**
 * @member {Boolean} ExtractChapterImagesDuringLibraryScan
 */
LibraryOptions.prototype['ExtractChapterImagesDuringLibraryScan'] = undefined;

/**
 * @member {Array.<String>} LocalMetadataReaderOrder
 */
LibraryOptions.prototype['LocalMetadataReaderOrder'] = undefined;

/**
 * Gets or sets the metadata country code.
 * @member {String} MetadataCountryCode
 */
LibraryOptions.prototype['MetadataCountryCode'] = undefined;

/**
 * @member {Array.<String>} MetadataSavers
 */
LibraryOptions.prototype['MetadataSavers'] = undefined;

/**
 * @member {Array.<module:model/MediaPathInfo>} PathInfos
 */
LibraryOptions.prototype['PathInfos'] = undefined;

/**
 * Gets or sets the preferred metadata language.
 * @member {String} PreferredMetadataLanguage
 */
LibraryOptions.prototype['PreferredMetadataLanguage'] = undefined;

/**
 * @member {Boolean} RequirePerfectSubtitleMatch
 */
LibraryOptions.prototype['RequirePerfectSubtitleMatch'] = undefined;

/**
 * @member {Boolean} SaveLocalMetadata
 */
LibraryOptions.prototype['SaveLocalMetadata'] = undefined;

/**
 * @member {Boolean} SaveSubtitlesWithMedia
 */
LibraryOptions.prototype['SaveSubtitlesWithMedia'] = undefined;

/**
 * @member {String} SeasonZeroDisplayName
 */
LibraryOptions.prototype['SeasonZeroDisplayName'] = undefined;

/**
 * @member {Boolean} SkipSubtitlesIfAudioTrackMatches
 */
LibraryOptions.prototype['SkipSubtitlesIfAudioTrackMatches'] = undefined;

/**
 * @member {Boolean} SkipSubtitlesIfEmbeddedSubtitlesPresent
 */
LibraryOptions.prototype['SkipSubtitlesIfEmbeddedSubtitlesPresent'] = undefined;

/**
 * @member {Array.<String>} SubtitleDownloadLanguages
 */
LibraryOptions.prototype['SubtitleDownloadLanguages'] = undefined;

/**
 * @member {Array.<String>} SubtitleFetcherOrder
 */
LibraryOptions.prototype['SubtitleFetcherOrder'] = undefined;

/**
 * @member {Array.<module:model/TypeOptions>} TypeOptions
 */
LibraryOptions.prototype['TypeOptions'] = undefined;






export default LibraryOptions;

