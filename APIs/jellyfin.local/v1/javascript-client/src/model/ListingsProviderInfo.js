/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NameValuePair from './NameValuePair';

/**
 * The ListingsProviderInfo model module.
 * @module model/ListingsProviderInfo
 * @version v1
 */
class ListingsProviderInfo {
    /**
     * Constructs a new <code>ListingsProviderInfo</code>.
     * @alias module:model/ListingsProviderInfo
     */
    constructor() { 
        
        ListingsProviderInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListingsProviderInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListingsProviderInfo} obj Optional instance to populate.
     * @return {module:model/ListingsProviderInfo} The populated <code>ListingsProviderInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListingsProviderInfo();

            if (data.hasOwnProperty('ChannelMappings')) {
                obj['ChannelMappings'] = ApiClient.convertToType(data['ChannelMappings'], [NameValuePair]);
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('EnableAllTuners')) {
                obj['EnableAllTuners'] = ApiClient.convertToType(data['EnableAllTuners'], 'Boolean');
            }
            if (data.hasOwnProperty('EnabledTuners')) {
                obj['EnabledTuners'] = ApiClient.convertToType(data['EnabledTuners'], ['String']);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('KidsCategories')) {
                obj['KidsCategories'] = ApiClient.convertToType(data['KidsCategories'], ['String']);
            }
            if (data.hasOwnProperty('ListingsId')) {
                obj['ListingsId'] = ApiClient.convertToType(data['ListingsId'], 'String');
            }
            if (data.hasOwnProperty('MovieCategories')) {
                obj['MovieCategories'] = ApiClient.convertToType(data['MovieCategories'], ['String']);
            }
            if (data.hasOwnProperty('MoviePrefix')) {
                obj['MoviePrefix'] = ApiClient.convertToType(data['MoviePrefix'], 'String');
            }
            if (data.hasOwnProperty('NewsCategories')) {
                obj['NewsCategories'] = ApiClient.convertToType(data['NewsCategories'], ['String']);
            }
            if (data.hasOwnProperty('Password')) {
                obj['Password'] = ApiClient.convertToType(data['Password'], 'String');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('PreferredLanguage')) {
                obj['PreferredLanguage'] = ApiClient.convertToType(data['PreferredLanguage'], 'String');
            }
            if (data.hasOwnProperty('SportsCategories')) {
                obj['SportsCategories'] = ApiClient.convertToType(data['SportsCategories'], ['String']);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('UserAgent')) {
                obj['UserAgent'] = ApiClient.convertToType(data['UserAgent'], 'String');
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
            if (data.hasOwnProperty('ZipCode')) {
                obj['ZipCode'] = ApiClient.convertToType(data['ZipCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListingsProviderInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListingsProviderInfo</code>.
     */
    static validateJSON(data) {
        if (data['ChannelMappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ChannelMappings'])) {
                throw new Error("Expected the field `ChannelMappings` to be an array in the JSON data but got " + data['ChannelMappings']);
            }
            // validate the optional field `ChannelMappings` (array)
            for (const item of data['ChannelMappings']) {
                NameValuePair.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['EnabledTuners'])) {
            throw new Error("Expected the field `EnabledTuners` to be an array in the JSON data but got " + data['EnabledTuners']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['KidsCategories'])) {
            throw new Error("Expected the field `KidsCategories` to be an array in the JSON data but got " + data['KidsCategories']);
        }
        // ensure the json data is a string
        if (data['ListingsId'] && !(typeof data['ListingsId'] === 'string' || data['ListingsId'] instanceof String)) {
            throw new Error("Expected the field `ListingsId` to be a primitive type in the JSON string but got " + data['ListingsId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['MovieCategories'])) {
            throw new Error("Expected the field `MovieCategories` to be an array in the JSON data but got " + data['MovieCategories']);
        }
        // ensure the json data is a string
        if (data['MoviePrefix'] && !(typeof data['MoviePrefix'] === 'string' || data['MoviePrefix'] instanceof String)) {
            throw new Error("Expected the field `MoviePrefix` to be a primitive type in the JSON string but got " + data['MoviePrefix']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['NewsCategories'])) {
            throw new Error("Expected the field `NewsCategories` to be an array in the JSON data but got " + data['NewsCategories']);
        }
        // ensure the json data is a string
        if (data['Password'] && !(typeof data['Password'] === 'string' || data['Password'] instanceof String)) {
            throw new Error("Expected the field `Password` to be a primitive type in the JSON string but got " + data['Password']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is a string
        if (data['PreferredLanguage'] && !(typeof data['PreferredLanguage'] === 'string' || data['PreferredLanguage'] instanceof String)) {
            throw new Error("Expected the field `PreferredLanguage` to be a primitive type in the JSON string but got " + data['PreferredLanguage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SportsCategories'])) {
            throw new Error("Expected the field `SportsCategories` to be an array in the JSON data but got " + data['SportsCategories']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['UserAgent'] && !(typeof data['UserAgent'] === 'string' || data['UserAgent'] instanceof String)) {
            throw new Error("Expected the field `UserAgent` to be a primitive type in the JSON string but got " + data['UserAgent']);
        }
        // ensure the json data is a string
        if (data['Username'] && !(typeof data['Username'] === 'string' || data['Username'] instanceof String)) {
            throw new Error("Expected the field `Username` to be a primitive type in the JSON string but got " + data['Username']);
        }
        // ensure the json data is a string
        if (data['ZipCode'] && !(typeof data['ZipCode'] === 'string' || data['ZipCode'] instanceof String)) {
            throw new Error("Expected the field `ZipCode` to be a primitive type in the JSON string but got " + data['ZipCode']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/NameValuePair>} ChannelMappings
 */
ListingsProviderInfo.prototype['ChannelMappings'] = undefined;

/**
 * @member {String} Country
 */
ListingsProviderInfo.prototype['Country'] = undefined;

/**
 * @member {Boolean} EnableAllTuners
 */
ListingsProviderInfo.prototype['EnableAllTuners'] = undefined;

/**
 * @member {Array.<String>} EnabledTuners
 */
ListingsProviderInfo.prototype['EnabledTuners'] = undefined;

/**
 * @member {String} Id
 */
ListingsProviderInfo.prototype['Id'] = undefined;

/**
 * @member {Array.<String>} KidsCategories
 */
ListingsProviderInfo.prototype['KidsCategories'] = undefined;

/**
 * @member {String} ListingsId
 */
ListingsProviderInfo.prototype['ListingsId'] = undefined;

/**
 * @member {Array.<String>} MovieCategories
 */
ListingsProviderInfo.prototype['MovieCategories'] = undefined;

/**
 * @member {String} MoviePrefix
 */
ListingsProviderInfo.prototype['MoviePrefix'] = undefined;

/**
 * @member {Array.<String>} NewsCategories
 */
ListingsProviderInfo.prototype['NewsCategories'] = undefined;

/**
 * @member {String} Password
 */
ListingsProviderInfo.prototype['Password'] = undefined;

/**
 * @member {String} Path
 */
ListingsProviderInfo.prototype['Path'] = undefined;

/**
 * @member {String} PreferredLanguage
 */
ListingsProviderInfo.prototype['PreferredLanguage'] = undefined;

/**
 * @member {Array.<String>} SportsCategories
 */
ListingsProviderInfo.prototype['SportsCategories'] = undefined;

/**
 * @member {String} Type
 */
ListingsProviderInfo.prototype['Type'] = undefined;

/**
 * @member {String} UserAgent
 */
ListingsProviderInfo.prototype['UserAgent'] = undefined;

/**
 * @member {String} Username
 */
ListingsProviderInfo.prototype['Username'] = undefined;

/**
 * @member {String} ZipCode
 */
ListingsProviderInfo.prototype['ZipCode'] = undefined;






export default ListingsProviderInfo;

