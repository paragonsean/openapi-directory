/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NameIdPair from './NameIdPair';
import NameValuePair from './NameValuePair';
import TunerChannelMapping from './TunerChannelMapping';

/**
 * The ChannelMappingOptionsDto model module.
 * @module model/ChannelMappingOptionsDto
 * @version v1
 */
class ChannelMappingOptionsDto {
    /**
     * Constructs a new <code>ChannelMappingOptionsDto</code>.
     * Channel mapping options dto.
     * @alias module:model/ChannelMappingOptionsDto
     */
    constructor() { 
        
        ChannelMappingOptionsDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelMappingOptionsDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelMappingOptionsDto} obj Optional instance to populate.
     * @return {module:model/ChannelMappingOptionsDto} The populated <code>ChannelMappingOptionsDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelMappingOptionsDto();

            if (data.hasOwnProperty('Mappings')) {
                obj['Mappings'] = ApiClient.convertToType(data['Mappings'], [NameValuePair]);
            }
            if (data.hasOwnProperty('ProviderChannels')) {
                obj['ProviderChannels'] = ApiClient.convertToType(data['ProviderChannels'], [NameIdPair]);
            }
            if (data.hasOwnProperty('ProviderName')) {
                obj['ProviderName'] = ApiClient.convertToType(data['ProviderName'], 'String');
            }
            if (data.hasOwnProperty('TunerChannels')) {
                obj['TunerChannels'] = ApiClient.convertToType(data['TunerChannels'], [TunerChannelMapping]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelMappingOptionsDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelMappingOptionsDto</code>.
     */
    static validateJSON(data) {
        if (data['Mappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Mappings'])) {
                throw new Error("Expected the field `Mappings` to be an array in the JSON data but got " + data['Mappings']);
            }
            // validate the optional field `Mappings` (array)
            for (const item of data['Mappings']) {
                NameValuePair.validateJSON(item);
            };
        }
        if (data['ProviderChannels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ProviderChannels'])) {
                throw new Error("Expected the field `ProviderChannels` to be an array in the JSON data but got " + data['ProviderChannels']);
            }
            // validate the optional field `ProviderChannels` (array)
            for (const item of data['ProviderChannels']) {
                NameIdPair.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ProviderName'] && !(typeof data['ProviderName'] === 'string' || data['ProviderName'] instanceof String)) {
            throw new Error("Expected the field `ProviderName` to be a primitive type in the JSON string but got " + data['ProviderName']);
        }
        if (data['TunerChannels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TunerChannels'])) {
                throw new Error("Expected the field `TunerChannels` to be an array in the JSON data but got " + data['TunerChannels']);
            }
            // validate the optional field `TunerChannels` (array)
            for (const item of data['TunerChannels']) {
                TunerChannelMapping.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Gets or sets list of mappings.
 * @member {Array.<module:model/NameValuePair>} Mappings
 */
ChannelMappingOptionsDto.prototype['Mappings'] = undefined;

/**
 * Gets or sets list of provider channels.
 * @member {Array.<module:model/NameIdPair>} ProviderChannels
 */
ChannelMappingOptionsDto.prototype['ProviderChannels'] = undefined;

/**
 * Gets or sets provider name.
 * @member {String} ProviderName
 */
ChannelMappingOptionsDto.prototype['ProviderName'] = undefined;

/**
 * Gets or sets list of tuner channels.
 * @member {Array.<module:model/TunerChannelMapping>} TunerChannels
 */
ChannelMappingOptionsDto.prototype['TunerChannels'] = undefined;






export default ChannelMappingOptionsDto;

