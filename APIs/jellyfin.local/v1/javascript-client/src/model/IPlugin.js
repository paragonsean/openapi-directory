/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Version from './Version';

/**
 * The IPlugin model module.
 * @module model/IPlugin
 * @version v1
 */
class IPlugin {
    /**
     * Constructs a new <code>IPlugin</code>.
     * Defines the MediaBrowser.Common.Plugins.IPlugin.
     * @alias module:model/IPlugin
     */
    constructor() { 
        
        IPlugin.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IPlugin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IPlugin} obj Optional instance to populate.
     * @return {module:model/IPlugin} The populated <code>IPlugin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IPlugin();

            if (data.hasOwnProperty('AssemblyFilePath')) {
                obj['AssemblyFilePath'] = ApiClient.convertToType(data['AssemblyFilePath'], 'String');
            }
            if (data.hasOwnProperty('CanUninstall')) {
                obj['CanUninstall'] = ApiClient.convertToType(data['CanUninstall'], 'Boolean');
            }
            if (data.hasOwnProperty('DataFolderPath')) {
                obj['DataFolderPath'] = ApiClient.convertToType(data['DataFolderPath'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = Version.constructFromObject(data['Version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IPlugin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IPlugin</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AssemblyFilePath'] && !(typeof data['AssemblyFilePath'] === 'string' || data['AssemblyFilePath'] instanceof String)) {
            throw new Error("Expected the field `AssemblyFilePath` to be a primitive type in the JSON string but got " + data['AssemblyFilePath']);
        }
        // ensure the json data is a string
        if (data['DataFolderPath'] && !(typeof data['DataFolderPath'] === 'string' || data['DataFolderPath'] instanceof String)) {
            throw new Error("Expected the field `DataFolderPath` to be a primitive type in the JSON string but got " + data['DataFolderPath']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `Version`
        if (data['Version']) { // data not null
          Version.validateJSON(data['Version']);
        }

        return true;
    }


}



/**
 * Gets the path to the assembly file.
 * @member {String} AssemblyFilePath
 */
IPlugin.prototype['AssemblyFilePath'] = undefined;

/**
 * Gets a value indicating whether the plugin can be uninstalled.
 * @member {Boolean} CanUninstall
 */
IPlugin.prototype['CanUninstall'] = undefined;

/**
 * Gets the full path to the data folder, where the plugin can store any miscellaneous files needed.
 * @member {String} DataFolderPath
 */
IPlugin.prototype['DataFolderPath'] = undefined;

/**
 * Gets the Description.
 * @member {String} Description
 */
IPlugin.prototype['Description'] = undefined;

/**
 * Gets the unique id.
 * @member {String} Id
 */
IPlugin.prototype['Id'] = undefined;

/**
 * Gets the name of the plugin.
 * @member {String} Name
 */
IPlugin.prototype['Name'] = undefined;

/**
 * @member {module:model/Version} Version
 */
IPlugin.prototype['Version'] = undefined;






export default IPlugin;

