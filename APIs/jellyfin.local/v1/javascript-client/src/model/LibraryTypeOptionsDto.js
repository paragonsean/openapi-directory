/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageOption from './ImageOption';
import ImageType from './ImageType';
import LibraryOptionInfoDto from './LibraryOptionInfoDto';

/**
 * The LibraryTypeOptionsDto model module.
 * @module model/LibraryTypeOptionsDto
 * @version v1
 */
class LibraryTypeOptionsDto {
    /**
     * Constructs a new <code>LibraryTypeOptionsDto</code>.
     * Library type options dto.
     * @alias module:model/LibraryTypeOptionsDto
     */
    constructor() { 
        
        LibraryTypeOptionsDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LibraryTypeOptionsDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LibraryTypeOptionsDto} obj Optional instance to populate.
     * @return {module:model/LibraryTypeOptionsDto} The populated <code>LibraryTypeOptionsDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LibraryTypeOptionsDto();

            if (data.hasOwnProperty('DefaultImageOptions')) {
                obj['DefaultImageOptions'] = ApiClient.convertToType(data['DefaultImageOptions'], [ImageOption]);
            }
            if (data.hasOwnProperty('ImageFetchers')) {
                obj['ImageFetchers'] = ApiClient.convertToType(data['ImageFetchers'], [LibraryOptionInfoDto]);
            }
            if (data.hasOwnProperty('MetadataFetchers')) {
                obj['MetadataFetchers'] = ApiClient.convertToType(data['MetadataFetchers'], [LibraryOptionInfoDto]);
            }
            if (data.hasOwnProperty('SupportedImageTypes')) {
                obj['SupportedImageTypes'] = ApiClient.convertToType(data['SupportedImageTypes'], [ImageType]);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LibraryTypeOptionsDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LibraryTypeOptionsDto</code>.
     */
    static validateJSON(data) {
        if (data['DefaultImageOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DefaultImageOptions'])) {
                throw new Error("Expected the field `DefaultImageOptions` to be an array in the JSON data but got " + data['DefaultImageOptions']);
            }
            // validate the optional field `DefaultImageOptions` (array)
            for (const item of data['DefaultImageOptions']) {
                ImageOption.validateJSON(item);
            };
        }
        if (data['ImageFetchers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ImageFetchers'])) {
                throw new Error("Expected the field `ImageFetchers` to be an array in the JSON data but got " + data['ImageFetchers']);
            }
            // validate the optional field `ImageFetchers` (array)
            for (const item of data['ImageFetchers']) {
                LibraryOptionInfoDto.validateJSON(item);
            };
        }
        if (data['MetadataFetchers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MetadataFetchers'])) {
                throw new Error("Expected the field `MetadataFetchers` to be an array in the JSON data but got " + data['MetadataFetchers']);
            }
            // validate the optional field `MetadataFetchers` (array)
            for (const item of data['MetadataFetchers']) {
                LibraryOptionInfoDto.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SupportedImageTypes'])) {
            throw new Error("Expected the field `SupportedImageTypes` to be an array in the JSON data but got " + data['SupportedImageTypes']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * Gets or sets the default image options.
 * @member {Array.<module:model/ImageOption>} DefaultImageOptions
 */
LibraryTypeOptionsDto.prototype['DefaultImageOptions'] = undefined;

/**
 * Gets or sets the image fetchers.
 * @member {Array.<module:model/LibraryOptionInfoDto>} ImageFetchers
 */
LibraryTypeOptionsDto.prototype['ImageFetchers'] = undefined;

/**
 * Gets or sets the metadata fetchers.
 * @member {Array.<module:model/LibraryOptionInfoDto>} MetadataFetchers
 */
LibraryTypeOptionsDto.prototype['MetadataFetchers'] = undefined;

/**
 * Gets or sets the supported image types.
 * @member {Array.<module:model/ImageType>} SupportedImageTypes
 */
LibraryTypeOptionsDto.prototype['SupportedImageTypes'] = undefined;

/**
 * Gets or sets the type.
 * @member {String} Type
 */
LibraryTypeOptionsDto.prototype['Type'] = undefined;






export default LibraryTypeOptionsDto;

