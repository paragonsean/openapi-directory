/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClientCapabilities from './ClientCapabilities';

/**
 * The DeviceInfo model module.
 * @module model/DeviceInfo
 * @version v1
 */
class DeviceInfo {
    /**
     * Constructs a new <code>DeviceInfo</code>.
     * @alias module:model/DeviceInfo
     */
    constructor() { 
        
        DeviceInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceInfo} obj Optional instance to populate.
     * @return {module:model/DeviceInfo} The populated <code>DeviceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceInfo();

            if (data.hasOwnProperty('AppName')) {
                obj['AppName'] = ApiClient.convertToType(data['AppName'], 'String');
            }
            if (data.hasOwnProperty('AppVersion')) {
                obj['AppVersion'] = ApiClient.convertToType(data['AppVersion'], 'String');
            }
            if (data.hasOwnProperty('Capabilities')) {
                obj['Capabilities'] = ClientCapabilities.constructFromObject(data['Capabilities']);
            }
            if (data.hasOwnProperty('DateLastActivity')) {
                obj['DateLastActivity'] = ApiClient.convertToType(data['DateLastActivity'], 'Date');
            }
            if (data.hasOwnProperty('IconUrl')) {
                obj['IconUrl'] = ApiClient.convertToType(data['IconUrl'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('LastUserId')) {
                obj['LastUserId'] = ApiClient.convertToType(data['LastUserId'], 'String');
            }
            if (data.hasOwnProperty('LastUserName')) {
                obj['LastUserName'] = ApiClient.convertToType(data['LastUserName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AppName'] && !(typeof data['AppName'] === 'string' || data['AppName'] instanceof String)) {
            throw new Error("Expected the field `AppName` to be a primitive type in the JSON string but got " + data['AppName']);
        }
        // ensure the json data is a string
        if (data['AppVersion'] && !(typeof data['AppVersion'] === 'string' || data['AppVersion'] instanceof String)) {
            throw new Error("Expected the field `AppVersion` to be a primitive type in the JSON string but got " + data['AppVersion']);
        }
        // validate the optional field `Capabilities`
        if (data['Capabilities']) { // data not null
          ClientCapabilities.validateJSON(data['Capabilities']);
        }
        // ensure the json data is a string
        if (data['IconUrl'] && !(typeof data['IconUrl'] === 'string' || data['IconUrl'] instanceof String)) {
            throw new Error("Expected the field `IconUrl` to be a primitive type in the JSON string but got " + data['IconUrl']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['LastUserId'] && !(typeof data['LastUserId'] === 'string' || data['LastUserId'] instanceof String)) {
            throw new Error("Expected the field `LastUserId` to be a primitive type in the JSON string but got " + data['LastUserId']);
        }
        // ensure the json data is a string
        if (data['LastUserName'] && !(typeof data['LastUserName'] === 'string' || data['LastUserName'] instanceof String)) {
            throw new Error("Expected the field `LastUserName` to be a primitive type in the JSON string but got " + data['LastUserName']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}



/**
 * Gets or sets the name of the application.
 * @member {String} AppName
 */
DeviceInfo.prototype['AppName'] = undefined;

/**
 * Gets or sets the application version.
 * @member {String} AppVersion
 */
DeviceInfo.prototype['AppVersion'] = undefined;

/**
 * @member {module:model/ClientCapabilities} Capabilities
 */
DeviceInfo.prototype['Capabilities'] = undefined;

/**
 * Gets or sets the date last modified.
 * @member {Date} DateLastActivity
 */
DeviceInfo.prototype['DateLastActivity'] = undefined;

/**
 * @member {String} IconUrl
 */
DeviceInfo.prototype['IconUrl'] = undefined;

/**
 * Gets or sets the identifier.
 * @member {String} Id
 */
DeviceInfo.prototype['Id'] = undefined;

/**
 * Gets or sets the last user identifier.
 * @member {String} LastUserId
 */
DeviceInfo.prototype['LastUserId'] = undefined;

/**
 * Gets or sets the last name of the user.
 * @member {String} LastUserName
 */
DeviceInfo.prototype['LastUserName'] = undefined;

/**
 * @member {String} Name
 */
DeviceInfo.prototype['Name'] = undefined;






export default DeviceInfo;

