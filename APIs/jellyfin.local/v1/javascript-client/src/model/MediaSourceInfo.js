/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IsoType from './IsoType';
import MediaAttachment from './MediaAttachment';
import MediaProtocol from './MediaProtocol';
import MediaSourceType from './MediaSourceType';
import MediaStream from './MediaStream';
import TransportStreamTimestamp from './TransportStreamTimestamp';
import Video3DFormat from './Video3DFormat';
import VideoType from './VideoType';

/**
 * The MediaSourceInfo model module.
 * @module model/MediaSourceInfo
 * @version v1
 */
class MediaSourceInfo {
    /**
     * Constructs a new <code>MediaSourceInfo</code>.
     * @alias module:model/MediaSourceInfo
     */
    constructor() { 
        
        MediaSourceInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaSourceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaSourceInfo} obj Optional instance to populate.
     * @return {module:model/MediaSourceInfo} The populated <code>MediaSourceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaSourceInfo();

            if (data.hasOwnProperty('AnalyzeDurationMs')) {
                obj['AnalyzeDurationMs'] = ApiClient.convertToType(data['AnalyzeDurationMs'], 'Number');
            }
            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('BufferMs')) {
                obj['BufferMs'] = ApiClient.convertToType(data['BufferMs'], 'Number');
            }
            if (data.hasOwnProperty('Container')) {
                obj['Container'] = ApiClient.convertToType(data['Container'], 'String');
            }
            if (data.hasOwnProperty('DefaultAudioStreamIndex')) {
                obj['DefaultAudioStreamIndex'] = ApiClient.convertToType(data['DefaultAudioStreamIndex'], 'Number');
            }
            if (data.hasOwnProperty('DefaultSubtitleStreamIndex')) {
                obj['DefaultSubtitleStreamIndex'] = ApiClient.convertToType(data['DefaultSubtitleStreamIndex'], 'Number');
            }
            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('EncoderPath')) {
                obj['EncoderPath'] = ApiClient.convertToType(data['EncoderPath'], 'String');
            }
            if (data.hasOwnProperty('EncoderProtocol')) {
                obj['EncoderProtocol'] = MediaProtocol.constructFromObject(data['EncoderProtocol']);
            }
            if (data.hasOwnProperty('Formats')) {
                obj['Formats'] = ApiClient.convertToType(data['Formats'], ['String']);
            }
            if (data.hasOwnProperty('GenPtsInput')) {
                obj['GenPtsInput'] = ApiClient.convertToType(data['GenPtsInput'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('IgnoreDts')) {
                obj['IgnoreDts'] = ApiClient.convertToType(data['IgnoreDts'], 'Boolean');
            }
            if (data.hasOwnProperty('IgnoreIndex')) {
                obj['IgnoreIndex'] = ApiClient.convertToType(data['IgnoreIndex'], 'Boolean');
            }
            if (data.hasOwnProperty('IsInfiniteStream')) {
                obj['IsInfiniteStream'] = ApiClient.convertToType(data['IsInfiniteStream'], 'Boolean');
            }
            if (data.hasOwnProperty('IsRemote')) {
                obj['IsRemote'] = ApiClient.convertToType(data['IsRemote'], 'Boolean');
            }
            if (data.hasOwnProperty('IsoType')) {
                obj['IsoType'] = IsoType.constructFromObject(data['IsoType']);
            }
            if (data.hasOwnProperty('LiveStreamId')) {
                obj['LiveStreamId'] = ApiClient.convertToType(data['LiveStreamId'], 'String');
            }
            if (data.hasOwnProperty('MediaAttachments')) {
                obj['MediaAttachments'] = ApiClient.convertToType(data['MediaAttachments'], [MediaAttachment]);
            }
            if (data.hasOwnProperty('MediaStreams')) {
                obj['MediaStreams'] = ApiClient.convertToType(data['MediaStreams'], [MediaStream]);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OpenToken')) {
                obj['OpenToken'] = ApiClient.convertToType(data['OpenToken'], 'String');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('Protocol')) {
                obj['Protocol'] = MediaProtocol.constructFromObject(data['Protocol']);
            }
            if (data.hasOwnProperty('ReadAtNativeFramerate')) {
                obj['ReadAtNativeFramerate'] = ApiClient.convertToType(data['ReadAtNativeFramerate'], 'Boolean');
            }
            if (data.hasOwnProperty('RequiredHttpHeaders')) {
                obj['RequiredHttpHeaders'] = ApiClient.convertToType(data['RequiredHttpHeaders'], {'String': 'String'});
            }
            if (data.hasOwnProperty('RequiresClosing')) {
                obj['RequiresClosing'] = ApiClient.convertToType(data['RequiresClosing'], 'Boolean');
            }
            if (data.hasOwnProperty('RequiresLooping')) {
                obj['RequiresLooping'] = ApiClient.convertToType(data['RequiresLooping'], 'Boolean');
            }
            if (data.hasOwnProperty('RequiresOpening')) {
                obj['RequiresOpening'] = ApiClient.convertToType(data['RequiresOpening'], 'Boolean');
            }
            if (data.hasOwnProperty('RunTimeTicks')) {
                obj['RunTimeTicks'] = ApiClient.convertToType(data['RunTimeTicks'], 'Number');
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'Number');
            }
            if (data.hasOwnProperty('SupportsDirectPlay')) {
                obj['SupportsDirectPlay'] = ApiClient.convertToType(data['SupportsDirectPlay'], 'Boolean');
            }
            if (data.hasOwnProperty('SupportsDirectStream')) {
                obj['SupportsDirectStream'] = ApiClient.convertToType(data['SupportsDirectStream'], 'Boolean');
            }
            if (data.hasOwnProperty('SupportsProbing')) {
                obj['SupportsProbing'] = ApiClient.convertToType(data['SupportsProbing'], 'Boolean');
            }
            if (data.hasOwnProperty('SupportsTranscoding')) {
                obj['SupportsTranscoding'] = ApiClient.convertToType(data['SupportsTranscoding'], 'Boolean');
            }
            if (data.hasOwnProperty('Timestamp')) {
                obj['Timestamp'] = TransportStreamTimestamp.constructFromObject(data['Timestamp']);
            }
            if (data.hasOwnProperty('TranscodingContainer')) {
                obj['TranscodingContainer'] = ApiClient.convertToType(data['TranscodingContainer'], 'String');
            }
            if (data.hasOwnProperty('TranscodingSubProtocol')) {
                obj['TranscodingSubProtocol'] = ApiClient.convertToType(data['TranscodingSubProtocol'], 'String');
            }
            if (data.hasOwnProperty('TranscodingUrl')) {
                obj['TranscodingUrl'] = ApiClient.convertToType(data['TranscodingUrl'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = MediaSourceType.constructFromObject(data['Type']);
            }
            if (data.hasOwnProperty('Video3DFormat')) {
                obj['Video3DFormat'] = Video3DFormat.constructFromObject(data['Video3DFormat']);
            }
            if (data.hasOwnProperty('VideoType')) {
                obj['VideoType'] = VideoType.constructFromObject(data['VideoType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaSourceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaSourceInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Container'] && !(typeof data['Container'] === 'string' || data['Container'] instanceof String)) {
            throw new Error("Expected the field `Container` to be a primitive type in the JSON string but got " + data['Container']);
        }
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // ensure the json data is a string
        if (data['EncoderPath'] && !(typeof data['EncoderPath'] === 'string' || data['EncoderPath'] instanceof String)) {
            throw new Error("Expected the field `EncoderPath` to be a primitive type in the JSON string but got " + data['EncoderPath']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Formats'])) {
            throw new Error("Expected the field `Formats` to be an array in the JSON data but got " + data['Formats']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['LiveStreamId'] && !(typeof data['LiveStreamId'] === 'string' || data['LiveStreamId'] instanceof String)) {
            throw new Error("Expected the field `LiveStreamId` to be a primitive type in the JSON string but got " + data['LiveStreamId']);
        }
        if (data['MediaAttachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MediaAttachments'])) {
                throw new Error("Expected the field `MediaAttachments` to be an array in the JSON data but got " + data['MediaAttachments']);
            }
            // validate the optional field `MediaAttachments` (array)
            for (const item of data['MediaAttachments']) {
                MediaAttachment.validateJSON(item);
            };
        }
        if (data['MediaStreams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MediaStreams'])) {
                throw new Error("Expected the field `MediaStreams` to be an array in the JSON data but got " + data['MediaStreams']);
            }
            // validate the optional field `MediaStreams` (array)
            for (const item of data['MediaStreams']) {
                MediaStream.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['OpenToken'] && !(typeof data['OpenToken'] === 'string' || data['OpenToken'] instanceof String)) {
            throw new Error("Expected the field `OpenToken` to be a primitive type in the JSON string but got " + data['OpenToken']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is a string
        if (data['TranscodingContainer'] && !(typeof data['TranscodingContainer'] === 'string' || data['TranscodingContainer'] instanceof String)) {
            throw new Error("Expected the field `TranscodingContainer` to be a primitive type in the JSON string but got " + data['TranscodingContainer']);
        }
        // ensure the json data is a string
        if (data['TranscodingSubProtocol'] && !(typeof data['TranscodingSubProtocol'] === 'string' || data['TranscodingSubProtocol'] instanceof String)) {
            throw new Error("Expected the field `TranscodingSubProtocol` to be a primitive type in the JSON string but got " + data['TranscodingSubProtocol']);
        }
        // ensure the json data is a string
        if (data['TranscodingUrl'] && !(typeof data['TranscodingUrl'] === 'string' || data['TranscodingUrl'] instanceof String)) {
            throw new Error("Expected the field `TranscodingUrl` to be a primitive type in the JSON string but got " + data['TranscodingUrl']);
        }

        return true;
    }


}



/**
 * @member {Number} AnalyzeDurationMs
 */
MediaSourceInfo.prototype['AnalyzeDurationMs'] = undefined;

/**
 * @member {Number} Bitrate
 */
MediaSourceInfo.prototype['Bitrate'] = undefined;

/**
 * @member {Number} BufferMs
 */
MediaSourceInfo.prototype['BufferMs'] = undefined;

/**
 * @member {String} Container
 */
MediaSourceInfo.prototype['Container'] = undefined;

/**
 * @member {Number} DefaultAudioStreamIndex
 */
MediaSourceInfo.prototype['DefaultAudioStreamIndex'] = undefined;

/**
 * @member {Number} DefaultSubtitleStreamIndex
 */
MediaSourceInfo.prototype['DefaultSubtitleStreamIndex'] = undefined;

/**
 * @member {String} ETag
 */
MediaSourceInfo.prototype['ETag'] = undefined;

/**
 * @member {String} EncoderPath
 */
MediaSourceInfo.prototype['EncoderPath'] = undefined;

/**
 * @member {module:model/MediaProtocol} EncoderProtocol
 */
MediaSourceInfo.prototype['EncoderProtocol'] = undefined;

/**
 * @member {Array.<String>} Formats
 */
MediaSourceInfo.prototype['Formats'] = undefined;

/**
 * @member {Boolean} GenPtsInput
 */
MediaSourceInfo.prototype['GenPtsInput'] = undefined;

/**
 * @member {String} Id
 */
MediaSourceInfo.prototype['Id'] = undefined;

/**
 * @member {Boolean} IgnoreDts
 */
MediaSourceInfo.prototype['IgnoreDts'] = undefined;

/**
 * @member {Boolean} IgnoreIndex
 */
MediaSourceInfo.prototype['IgnoreIndex'] = undefined;

/**
 * @member {Boolean} IsInfiniteStream
 */
MediaSourceInfo.prototype['IsInfiniteStream'] = undefined;

/**
 * Differentiate internet url vs local network.
 * @member {Boolean} IsRemote
 */
MediaSourceInfo.prototype['IsRemote'] = undefined;

/**
 * @member {module:model/IsoType} IsoType
 */
MediaSourceInfo.prototype['IsoType'] = undefined;

/**
 * @member {String} LiveStreamId
 */
MediaSourceInfo.prototype['LiveStreamId'] = undefined;

/**
 * @member {Array.<module:model/MediaAttachment>} MediaAttachments
 */
MediaSourceInfo.prototype['MediaAttachments'] = undefined;

/**
 * @member {Array.<module:model/MediaStream>} MediaStreams
 */
MediaSourceInfo.prototype['MediaStreams'] = undefined;

/**
 * @member {String} Name
 */
MediaSourceInfo.prototype['Name'] = undefined;

/**
 * @member {String} OpenToken
 */
MediaSourceInfo.prototype['OpenToken'] = undefined;

/**
 * @member {String} Path
 */
MediaSourceInfo.prototype['Path'] = undefined;

/**
 * @member {module:model/MediaProtocol} Protocol
 */
MediaSourceInfo.prototype['Protocol'] = undefined;

/**
 * @member {Boolean} ReadAtNativeFramerate
 */
MediaSourceInfo.prototype['ReadAtNativeFramerate'] = undefined;

/**
 * @member {Object.<String, String>} RequiredHttpHeaders
 */
MediaSourceInfo.prototype['RequiredHttpHeaders'] = undefined;

/**
 * @member {Boolean} RequiresClosing
 */
MediaSourceInfo.prototype['RequiresClosing'] = undefined;

/**
 * @member {Boolean} RequiresLooping
 */
MediaSourceInfo.prototype['RequiresLooping'] = undefined;

/**
 * @member {Boolean} RequiresOpening
 */
MediaSourceInfo.prototype['RequiresOpening'] = undefined;

/**
 * @member {Number} RunTimeTicks
 */
MediaSourceInfo.prototype['RunTimeTicks'] = undefined;

/**
 * @member {Number} Size
 */
MediaSourceInfo.prototype['Size'] = undefined;

/**
 * @member {Boolean} SupportsDirectPlay
 */
MediaSourceInfo.prototype['SupportsDirectPlay'] = undefined;

/**
 * @member {Boolean} SupportsDirectStream
 */
MediaSourceInfo.prototype['SupportsDirectStream'] = undefined;

/**
 * @member {Boolean} SupportsProbing
 */
MediaSourceInfo.prototype['SupportsProbing'] = undefined;

/**
 * @member {Boolean} SupportsTranscoding
 */
MediaSourceInfo.prototype['SupportsTranscoding'] = undefined;

/**
 * @member {module:model/TransportStreamTimestamp} Timestamp
 */
MediaSourceInfo.prototype['Timestamp'] = undefined;

/**
 * @member {String} TranscodingContainer
 */
MediaSourceInfo.prototype['TranscodingContainer'] = undefined;

/**
 * @member {String} TranscodingSubProtocol
 */
MediaSourceInfo.prototype['TranscodingSubProtocol'] = undefined;

/**
 * @member {String} TranscodingUrl
 */
MediaSourceInfo.prototype['TranscodingUrl'] = undefined;

/**
 * @member {module:model/MediaSourceType} Type
 */
MediaSourceInfo.prototype['Type'] = undefined;

/**
 * @member {module:model/Video3DFormat} Video3DFormat
 */
MediaSourceInfo.prototype['Video3DFormat'] = undefined;

/**
 * @member {module:model/VideoType} VideoType
 */
MediaSourceInfo.prototype['VideoType'] = undefined;






export default MediaSourceInfo;

