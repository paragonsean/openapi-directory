/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DlnaProfileType from './DlnaProfileType';
import EncodingContext from './EncodingContext';
import TranscodeSeekInfo from './TranscodeSeekInfo';

/**
 * The TranscodingProfile model module.
 * @module model/TranscodingProfile
 * @version v1
 */
class TranscodingProfile {
    /**
     * Constructs a new <code>TranscodingProfile</code>.
     * @alias module:model/TranscodingProfile
     */
    constructor() { 
        
        TranscodingProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TranscodingProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TranscodingProfile} obj Optional instance to populate.
     * @return {module:model/TranscodingProfile} The populated <code>TranscodingProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TranscodingProfile();

            if (data.hasOwnProperty('AudioCodec')) {
                obj['AudioCodec'] = ApiClient.convertToType(data['AudioCodec'], 'String');
            }
            if (data.hasOwnProperty('BreakOnNonKeyFrames')) {
                obj['BreakOnNonKeyFrames'] = ApiClient.convertToType(data['BreakOnNonKeyFrames'], 'Boolean');
            }
            if (data.hasOwnProperty('Container')) {
                obj['Container'] = ApiClient.convertToType(data['Container'], 'String');
            }
            if (data.hasOwnProperty('Context')) {
                obj['Context'] = EncodingContext.constructFromObject(data['Context']);
            }
            if (data.hasOwnProperty('CopyTimestamps')) {
                obj['CopyTimestamps'] = ApiClient.convertToType(data['CopyTimestamps'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableMpegtsM2TsMode')) {
                obj['EnableMpegtsM2TsMode'] = ApiClient.convertToType(data['EnableMpegtsM2TsMode'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableSubtitlesInManifest')) {
                obj['EnableSubtitlesInManifest'] = ApiClient.convertToType(data['EnableSubtitlesInManifest'], 'Boolean');
            }
            if (data.hasOwnProperty('EstimateContentLength')) {
                obj['EstimateContentLength'] = ApiClient.convertToType(data['EstimateContentLength'], 'Boolean');
            }
            if (data.hasOwnProperty('MaxAudioChannels')) {
                obj['MaxAudioChannels'] = ApiClient.convertToType(data['MaxAudioChannels'], 'String');
            }
            if (data.hasOwnProperty('MinSegments')) {
                obj['MinSegments'] = ApiClient.convertToType(data['MinSegments'], 'Number');
            }
            if (data.hasOwnProperty('Protocol')) {
                obj['Protocol'] = ApiClient.convertToType(data['Protocol'], 'String');
            }
            if (data.hasOwnProperty('SegmentLength')) {
                obj['SegmentLength'] = ApiClient.convertToType(data['SegmentLength'], 'Number');
            }
            if (data.hasOwnProperty('TranscodeSeekInfo')) {
                obj['TranscodeSeekInfo'] = TranscodeSeekInfo.constructFromObject(data['TranscodeSeekInfo']);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = DlnaProfileType.constructFromObject(data['Type']);
            }
            if (data.hasOwnProperty('VideoCodec')) {
                obj['VideoCodec'] = ApiClient.convertToType(data['VideoCodec'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TranscodingProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TranscodingProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AudioCodec'] && !(typeof data['AudioCodec'] === 'string' || data['AudioCodec'] instanceof String)) {
            throw new Error("Expected the field `AudioCodec` to be a primitive type in the JSON string but got " + data['AudioCodec']);
        }
        // ensure the json data is a string
        if (data['Container'] && !(typeof data['Container'] === 'string' || data['Container'] instanceof String)) {
            throw new Error("Expected the field `Container` to be a primitive type in the JSON string but got " + data['Container']);
        }
        // ensure the json data is a string
        if (data['MaxAudioChannels'] && !(typeof data['MaxAudioChannels'] === 'string' || data['MaxAudioChannels'] instanceof String)) {
            throw new Error("Expected the field `MaxAudioChannels` to be a primitive type in the JSON string but got " + data['MaxAudioChannels']);
        }
        // ensure the json data is a string
        if (data['Protocol'] && !(typeof data['Protocol'] === 'string' || data['Protocol'] instanceof String)) {
            throw new Error("Expected the field `Protocol` to be a primitive type in the JSON string but got " + data['Protocol']);
        }
        // ensure the json data is a string
        if (data['VideoCodec'] && !(typeof data['VideoCodec'] === 'string' || data['VideoCodec'] instanceof String)) {
            throw new Error("Expected the field `VideoCodec` to be a primitive type in the JSON string but got " + data['VideoCodec']);
        }

        return true;
    }


}



/**
 * @member {String} AudioCodec
 */
TranscodingProfile.prototype['AudioCodec'] = undefined;

/**
 * @member {Boolean} BreakOnNonKeyFrames
 */
TranscodingProfile.prototype['BreakOnNonKeyFrames'] = undefined;

/**
 * @member {String} Container
 */
TranscodingProfile.prototype['Container'] = undefined;

/**
 * @member {module:model/EncodingContext} Context
 */
TranscodingProfile.prototype['Context'] = undefined;

/**
 * @member {Boolean} CopyTimestamps
 */
TranscodingProfile.prototype['CopyTimestamps'] = undefined;

/**
 * @member {Boolean} EnableMpegtsM2TsMode
 */
TranscodingProfile.prototype['EnableMpegtsM2TsMode'] = undefined;

/**
 * @member {Boolean} EnableSubtitlesInManifest
 */
TranscodingProfile.prototype['EnableSubtitlesInManifest'] = undefined;

/**
 * @member {Boolean} EstimateContentLength
 */
TranscodingProfile.prototype['EstimateContentLength'] = undefined;

/**
 * @member {String} MaxAudioChannels
 */
TranscodingProfile.prototype['MaxAudioChannels'] = undefined;

/**
 * @member {Number} MinSegments
 */
TranscodingProfile.prototype['MinSegments'] = undefined;

/**
 * @member {String} Protocol
 */
TranscodingProfile.prototype['Protocol'] = undefined;

/**
 * @member {Number} SegmentLength
 */
TranscodingProfile.prototype['SegmentLength'] = undefined;

/**
 * @member {module:model/TranscodeSeekInfo} TranscodeSeekInfo
 */
TranscodingProfile.prototype['TranscodeSeekInfo'] = undefined;

/**
 * @member {module:model/DlnaProfileType} Type
 */
TranscodingProfile.prototype['Type'] = undefined;

/**
 * @member {String} VideoCodec
 */
TranscodingProfile.prototype['VideoCodec'] = undefined;






export default TranscodingProfile;

