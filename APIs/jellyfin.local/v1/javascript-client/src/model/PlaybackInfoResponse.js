/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaSourceInfo from './MediaSourceInfo';
import PlaybackErrorCode from './PlaybackErrorCode';

/**
 * The PlaybackInfoResponse model module.
 * @module model/PlaybackInfoResponse
 * @version v1
 */
class PlaybackInfoResponse {
    /**
     * Constructs a new <code>PlaybackInfoResponse</code>.
     * Class PlaybackInfoResponse.
     * @alias module:model/PlaybackInfoResponse
     */
    constructor() { 
        
        PlaybackInfoResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlaybackInfoResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaybackInfoResponse} obj Optional instance to populate.
     * @return {module:model/PlaybackInfoResponse} The populated <code>PlaybackInfoResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlaybackInfoResponse();

            if (data.hasOwnProperty('ErrorCode')) {
                obj['ErrorCode'] = PlaybackErrorCode.constructFromObject(data['ErrorCode']);
            }
            if (data.hasOwnProperty('MediaSources')) {
                obj['MediaSources'] = ApiClient.convertToType(data['MediaSources'], [MediaSourceInfo]);
            }
            if (data.hasOwnProperty('PlaySessionId')) {
                obj['PlaySessionId'] = ApiClient.convertToType(data['PlaySessionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlaybackInfoResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlaybackInfoResponse</code>.
     */
    static validateJSON(data) {
        if (data['MediaSources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MediaSources'])) {
                throw new Error("Expected the field `MediaSources` to be an array in the JSON data but got " + data['MediaSources']);
            }
            // validate the optional field `MediaSources` (array)
            for (const item of data['MediaSources']) {
                MediaSourceInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PlaySessionId'] && !(typeof data['PlaySessionId'] === 'string' || data['PlaySessionId'] instanceof String)) {
            throw new Error("Expected the field `PlaySessionId` to be a primitive type in the JSON string but got " + data['PlaySessionId']);
        }

        return true;
    }


}



/**
 * @member {module:model/PlaybackErrorCode} ErrorCode
 */
PlaybackInfoResponse.prototype['ErrorCode'] = undefined;

/**
 * Gets or sets the media sources.
 * @member {Array.<module:model/MediaSourceInfo>} MediaSources
 */
PlaybackInfoResponse.prototype['MediaSources'] = undefined;

/**
 * Gets or sets the play session identifier.
 * @member {String} PlaySessionId
 */
PlaybackInfoResponse.prototype['PlaySessionId'] = undefined;






export default PlaybackInfoResponse;

