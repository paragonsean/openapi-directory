/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskResult from './TaskResult';
import TaskState from './TaskState';
import TaskTriggerInfo from './TaskTriggerInfo';

/**
 * The TaskInfo model module.
 * @module model/TaskInfo
 * @version v1
 */
class TaskInfo {
    /**
     * Constructs a new <code>TaskInfo</code>.
     * Class TaskInfo.
     * @alias module:model/TaskInfo
     */
    constructor() { 
        
        TaskInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskInfo} obj Optional instance to populate.
     * @return {module:model/TaskInfo} The populated <code>TaskInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskInfo();

            if (data.hasOwnProperty('Category')) {
                obj['Category'] = ApiClient.convertToType(data['Category'], 'String');
            }
            if (data.hasOwnProperty('CurrentProgressPercentage')) {
                obj['CurrentProgressPercentage'] = ApiClient.convertToType(data['CurrentProgressPercentage'], 'Number');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('IsHidden')) {
                obj['IsHidden'] = ApiClient.convertToType(data['IsHidden'], 'Boolean');
            }
            if (data.hasOwnProperty('Key')) {
                obj['Key'] = ApiClient.convertToType(data['Key'], 'String');
            }
            if (data.hasOwnProperty('LastExecutionResult')) {
                obj['LastExecutionResult'] = TaskResult.constructFromObject(data['LastExecutionResult']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = TaskState.constructFromObject(data['State']);
            }
            if (data.hasOwnProperty('Triggers')) {
                obj['Triggers'] = ApiClient.convertToType(data['Triggers'], [TaskTriggerInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Category'] && !(typeof data['Category'] === 'string' || data['Category'] instanceof String)) {
            throw new Error("Expected the field `Category` to be a primitive type in the JSON string but got " + data['Category']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Key'] && !(typeof data['Key'] === 'string' || data['Key'] instanceof String)) {
            throw new Error("Expected the field `Key` to be a primitive type in the JSON string but got " + data['Key']);
        }
        // validate the optional field `LastExecutionResult`
        if (data['LastExecutionResult']) { // data not null
          TaskResult.validateJSON(data['LastExecutionResult']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['Triggers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Triggers'])) {
                throw new Error("Expected the field `Triggers` to be an array in the JSON data but got " + data['Triggers']);
            }
            // validate the optional field `Triggers` (array)
            for (const item of data['Triggers']) {
                TaskTriggerInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Gets or sets the category.
 * @member {String} Category
 */
TaskInfo.prototype['Category'] = undefined;

/**
 * Gets or sets the progress.
 * @member {Number} CurrentProgressPercentage
 */
TaskInfo.prototype['CurrentProgressPercentage'] = undefined;

/**
 * Gets or sets the description.
 * @member {String} Description
 */
TaskInfo.prototype['Description'] = undefined;

/**
 * Gets or sets the id.
 * @member {String} Id
 */
TaskInfo.prototype['Id'] = undefined;

/**
 * Gets or sets a value indicating whether this instance is hidden.
 * @member {Boolean} IsHidden
 */
TaskInfo.prototype['IsHidden'] = undefined;

/**
 * Gets or sets the key.
 * @member {String} Key
 */
TaskInfo.prototype['Key'] = undefined;

/**
 * @member {module:model/TaskResult} LastExecutionResult
 */
TaskInfo.prototype['LastExecutionResult'] = undefined;

/**
 * Gets or sets the name.
 * @member {String} Name
 */
TaskInfo.prototype['Name'] = undefined;

/**
 * @member {module:model/TaskState} State
 */
TaskInfo.prototype['State'] = undefined;

/**
 * Gets or sets the triggers.
 * @member {Array.<module:model/TaskTriggerInfo>} Triggers
 */
TaskInfo.prototype['Triggers'] = undefined;






export default TaskInfo;

