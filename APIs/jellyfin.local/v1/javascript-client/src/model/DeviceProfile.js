/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodecProfile from './CodecProfile';
import ContainerProfile from './ContainerProfile';
import DeviceIdentification from './DeviceIdentification';
import DirectPlayProfile from './DirectPlayProfile';
import ResponseProfile from './ResponseProfile';
import SubtitleProfile from './SubtitleProfile';
import TranscodingProfile from './TranscodingProfile';
import XmlAttribute from './XmlAttribute';

/**
 * The DeviceProfile model module.
 * @module model/DeviceProfile
 * @version v1
 */
class DeviceProfile {
    /**
     * Constructs a new <code>DeviceProfile</code>.
     * Defines the MediaBrowser.Model.Dlna.DeviceProfile.
     * @alias module:model/DeviceProfile
     */
    constructor() { 
        
        DeviceProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceProfile} obj Optional instance to populate.
     * @return {module:model/DeviceProfile} The populated <code>DeviceProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceProfile();

            if (data.hasOwnProperty('AlbumArtPn')) {
                obj['AlbumArtPn'] = ApiClient.convertToType(data['AlbumArtPn'], 'String');
            }
            if (data.hasOwnProperty('CodecProfiles')) {
                obj['CodecProfiles'] = ApiClient.convertToType(data['CodecProfiles'], [CodecProfile]);
            }
            if (data.hasOwnProperty('ContainerProfiles')) {
                obj['ContainerProfiles'] = ApiClient.convertToType(data['ContainerProfiles'], [ContainerProfile]);
            }
            if (data.hasOwnProperty('DirectPlayProfiles')) {
                obj['DirectPlayProfiles'] = ApiClient.convertToType(data['DirectPlayProfiles'], [DirectPlayProfile]);
            }
            if (data.hasOwnProperty('EnableAlbumArtInDidl')) {
                obj['EnableAlbumArtInDidl'] = ApiClient.convertToType(data['EnableAlbumArtInDidl'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableMSMediaReceiverRegistrar')) {
                obj['EnableMSMediaReceiverRegistrar'] = ApiClient.convertToType(data['EnableMSMediaReceiverRegistrar'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableSingleAlbumArtLimit')) {
                obj['EnableSingleAlbumArtLimit'] = ApiClient.convertToType(data['EnableSingleAlbumArtLimit'], 'Boolean');
            }
            if (data.hasOwnProperty('EnableSingleSubtitleLimit')) {
                obj['EnableSingleSubtitleLimit'] = ApiClient.convertToType(data['EnableSingleSubtitleLimit'], 'Boolean');
            }
            if (data.hasOwnProperty('FriendlyName')) {
                obj['FriendlyName'] = ApiClient.convertToType(data['FriendlyName'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Identification')) {
                obj['Identification'] = DeviceIdentification.constructFromObject(data['Identification']);
            }
            if (data.hasOwnProperty('IgnoreTranscodeByteRangeRequests')) {
                obj['IgnoreTranscodeByteRangeRequests'] = ApiClient.convertToType(data['IgnoreTranscodeByteRangeRequests'], 'Boolean');
            }
            if (data.hasOwnProperty('Manufacturer')) {
                obj['Manufacturer'] = ApiClient.convertToType(data['Manufacturer'], 'String');
            }
            if (data.hasOwnProperty('ManufacturerUrl')) {
                obj['ManufacturerUrl'] = ApiClient.convertToType(data['ManufacturerUrl'], 'String');
            }
            if (data.hasOwnProperty('MaxAlbumArtHeight')) {
                obj['MaxAlbumArtHeight'] = ApiClient.convertToType(data['MaxAlbumArtHeight'], 'Number');
            }
            if (data.hasOwnProperty('MaxAlbumArtWidth')) {
                obj['MaxAlbumArtWidth'] = ApiClient.convertToType(data['MaxAlbumArtWidth'], 'Number');
            }
            if (data.hasOwnProperty('MaxIconHeight')) {
                obj['MaxIconHeight'] = ApiClient.convertToType(data['MaxIconHeight'], 'Number');
            }
            if (data.hasOwnProperty('MaxIconWidth')) {
                obj['MaxIconWidth'] = ApiClient.convertToType(data['MaxIconWidth'], 'Number');
            }
            if (data.hasOwnProperty('MaxStaticBitrate')) {
                obj['MaxStaticBitrate'] = ApiClient.convertToType(data['MaxStaticBitrate'], 'Number');
            }
            if (data.hasOwnProperty('MaxStaticMusicBitrate')) {
                obj['MaxStaticMusicBitrate'] = ApiClient.convertToType(data['MaxStaticMusicBitrate'], 'Number');
            }
            if (data.hasOwnProperty('MaxStreamingBitrate')) {
                obj['MaxStreamingBitrate'] = ApiClient.convertToType(data['MaxStreamingBitrate'], 'Number');
            }
            if (data.hasOwnProperty('ModelDescription')) {
                obj['ModelDescription'] = ApiClient.convertToType(data['ModelDescription'], 'String');
            }
            if (data.hasOwnProperty('ModelName')) {
                obj['ModelName'] = ApiClient.convertToType(data['ModelName'], 'String');
            }
            if (data.hasOwnProperty('ModelNumber')) {
                obj['ModelNumber'] = ApiClient.convertToType(data['ModelNumber'], 'String');
            }
            if (data.hasOwnProperty('ModelUrl')) {
                obj['ModelUrl'] = ApiClient.convertToType(data['ModelUrl'], 'String');
            }
            if (data.hasOwnProperty('MusicStreamingTranscodingBitrate')) {
                obj['MusicStreamingTranscodingBitrate'] = ApiClient.convertToType(data['MusicStreamingTranscodingBitrate'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ProtocolInfo')) {
                obj['ProtocolInfo'] = ApiClient.convertToType(data['ProtocolInfo'], 'String');
            }
            if (data.hasOwnProperty('RequiresPlainFolders')) {
                obj['RequiresPlainFolders'] = ApiClient.convertToType(data['RequiresPlainFolders'], 'Boolean');
            }
            if (data.hasOwnProperty('RequiresPlainVideoItems')) {
                obj['RequiresPlainVideoItems'] = ApiClient.convertToType(data['RequiresPlainVideoItems'], 'Boolean');
            }
            if (data.hasOwnProperty('ResponseProfiles')) {
                obj['ResponseProfiles'] = ApiClient.convertToType(data['ResponseProfiles'], [ResponseProfile]);
            }
            if (data.hasOwnProperty('SerialNumber')) {
                obj['SerialNumber'] = ApiClient.convertToType(data['SerialNumber'], 'String');
            }
            if (data.hasOwnProperty('SonyAggregationFlags')) {
                obj['SonyAggregationFlags'] = ApiClient.convertToType(data['SonyAggregationFlags'], 'String');
            }
            if (data.hasOwnProperty('SubtitleProfiles')) {
                obj['SubtitleProfiles'] = ApiClient.convertToType(data['SubtitleProfiles'], [SubtitleProfile]);
            }
            if (data.hasOwnProperty('SupportedMediaTypes')) {
                obj['SupportedMediaTypes'] = ApiClient.convertToType(data['SupportedMediaTypes'], 'String');
            }
            if (data.hasOwnProperty('TimelineOffsetSeconds')) {
                obj['TimelineOffsetSeconds'] = ApiClient.convertToType(data['TimelineOffsetSeconds'], 'Number');
            }
            if (data.hasOwnProperty('TranscodingProfiles')) {
                obj['TranscodingProfiles'] = ApiClient.convertToType(data['TranscodingProfiles'], [TranscodingProfile]);
            }
            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'String');
            }
            if (data.hasOwnProperty('XmlRootAttributes')) {
                obj['XmlRootAttributes'] = ApiClient.convertToType(data['XmlRootAttributes'], [XmlAttribute]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AlbumArtPn'] && !(typeof data['AlbumArtPn'] === 'string' || data['AlbumArtPn'] instanceof String)) {
            throw new Error("Expected the field `AlbumArtPn` to be a primitive type in the JSON string but got " + data['AlbumArtPn']);
        }
        if (data['CodecProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CodecProfiles'])) {
                throw new Error("Expected the field `CodecProfiles` to be an array in the JSON data but got " + data['CodecProfiles']);
            }
            // validate the optional field `CodecProfiles` (array)
            for (const item of data['CodecProfiles']) {
                CodecProfile.validateJSON(item);
            };
        }
        if (data['ContainerProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ContainerProfiles'])) {
                throw new Error("Expected the field `ContainerProfiles` to be an array in the JSON data but got " + data['ContainerProfiles']);
            }
            // validate the optional field `ContainerProfiles` (array)
            for (const item of data['ContainerProfiles']) {
                ContainerProfile.validateJSON(item);
            };
        }
        if (data['DirectPlayProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DirectPlayProfiles'])) {
                throw new Error("Expected the field `DirectPlayProfiles` to be an array in the JSON data but got " + data['DirectPlayProfiles']);
            }
            // validate the optional field `DirectPlayProfiles` (array)
            for (const item of data['DirectPlayProfiles']) {
                DirectPlayProfile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['FriendlyName'] && !(typeof data['FriendlyName'] === 'string' || data['FriendlyName'] instanceof String)) {
            throw new Error("Expected the field `FriendlyName` to be a primitive type in the JSON string but got " + data['FriendlyName']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // validate the optional field `Identification`
        if (data['Identification']) { // data not null
          DeviceIdentification.validateJSON(data['Identification']);
        }
        // ensure the json data is a string
        if (data['Manufacturer'] && !(typeof data['Manufacturer'] === 'string' || data['Manufacturer'] instanceof String)) {
            throw new Error("Expected the field `Manufacturer` to be a primitive type in the JSON string but got " + data['Manufacturer']);
        }
        // ensure the json data is a string
        if (data['ManufacturerUrl'] && !(typeof data['ManufacturerUrl'] === 'string' || data['ManufacturerUrl'] instanceof String)) {
            throw new Error("Expected the field `ManufacturerUrl` to be a primitive type in the JSON string but got " + data['ManufacturerUrl']);
        }
        // ensure the json data is a string
        if (data['ModelDescription'] && !(typeof data['ModelDescription'] === 'string' || data['ModelDescription'] instanceof String)) {
            throw new Error("Expected the field `ModelDescription` to be a primitive type in the JSON string but got " + data['ModelDescription']);
        }
        // ensure the json data is a string
        if (data['ModelName'] && !(typeof data['ModelName'] === 'string' || data['ModelName'] instanceof String)) {
            throw new Error("Expected the field `ModelName` to be a primitive type in the JSON string but got " + data['ModelName']);
        }
        // ensure the json data is a string
        if (data['ModelNumber'] && !(typeof data['ModelNumber'] === 'string' || data['ModelNumber'] instanceof String)) {
            throw new Error("Expected the field `ModelNumber` to be a primitive type in the JSON string but got " + data['ModelNumber']);
        }
        // ensure the json data is a string
        if (data['ModelUrl'] && !(typeof data['ModelUrl'] === 'string' || data['ModelUrl'] instanceof String)) {
            throw new Error("Expected the field `ModelUrl` to be a primitive type in the JSON string but got " + data['ModelUrl']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ProtocolInfo'] && !(typeof data['ProtocolInfo'] === 'string' || data['ProtocolInfo'] instanceof String)) {
            throw new Error("Expected the field `ProtocolInfo` to be a primitive type in the JSON string but got " + data['ProtocolInfo']);
        }
        if (data['ResponseProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ResponseProfiles'])) {
                throw new Error("Expected the field `ResponseProfiles` to be an array in the JSON data but got " + data['ResponseProfiles']);
            }
            // validate the optional field `ResponseProfiles` (array)
            for (const item of data['ResponseProfiles']) {
                ResponseProfile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['SerialNumber'] && !(typeof data['SerialNumber'] === 'string' || data['SerialNumber'] instanceof String)) {
            throw new Error("Expected the field `SerialNumber` to be a primitive type in the JSON string but got " + data['SerialNumber']);
        }
        // ensure the json data is a string
        if (data['SonyAggregationFlags'] && !(typeof data['SonyAggregationFlags'] === 'string' || data['SonyAggregationFlags'] instanceof String)) {
            throw new Error("Expected the field `SonyAggregationFlags` to be a primitive type in the JSON string but got " + data['SonyAggregationFlags']);
        }
        if (data['SubtitleProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SubtitleProfiles'])) {
                throw new Error("Expected the field `SubtitleProfiles` to be an array in the JSON data but got " + data['SubtitleProfiles']);
            }
            // validate the optional field `SubtitleProfiles` (array)
            for (const item of data['SubtitleProfiles']) {
                SubtitleProfile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['SupportedMediaTypes'] && !(typeof data['SupportedMediaTypes'] === 'string' || data['SupportedMediaTypes'] instanceof String)) {
            throw new Error("Expected the field `SupportedMediaTypes` to be a primitive type in the JSON string but got " + data['SupportedMediaTypes']);
        }
        if (data['TranscodingProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TranscodingProfiles'])) {
                throw new Error("Expected the field `TranscodingProfiles` to be an array in the JSON data but got " + data['TranscodingProfiles']);
            }
            // validate the optional field `TranscodingProfiles` (array)
            for (const item of data['TranscodingProfiles']) {
                TranscodingProfile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['UserId'] && !(typeof data['UserId'] === 'string' || data['UserId'] instanceof String)) {
            throw new Error("Expected the field `UserId` to be a primitive type in the JSON string but got " + data['UserId']);
        }
        if (data['XmlRootAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['XmlRootAttributes'])) {
                throw new Error("Expected the field `XmlRootAttributes` to be an array in the JSON data but got " + data['XmlRootAttributes']);
            }
            // validate the optional field `XmlRootAttributes` (array)
            for (const item of data['XmlRootAttributes']) {
                XmlAttribute.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Gets or sets the AlbumArtPn.
 * @member {String} AlbumArtPn
 */
DeviceProfile.prototype['AlbumArtPn'] = undefined;

/**
 * Gets or sets the CodecProfiles.
 * @member {Array.<module:model/CodecProfile>} CodecProfiles
 */
DeviceProfile.prototype['CodecProfiles'] = undefined;

/**
 * Gets or sets the ContainerProfiles.
 * @member {Array.<module:model/ContainerProfile>} ContainerProfiles
 */
DeviceProfile.prototype['ContainerProfiles'] = undefined;

/**
 * Gets or sets the direct play profiles.
 * @member {Array.<module:model/DirectPlayProfile>} DirectPlayProfiles
 */
DeviceProfile.prototype['DirectPlayProfiles'] = undefined;

/**
 * Gets or sets a value indicating whether EnableAlbumArtInDidl.
 * @member {Boolean} EnableAlbumArtInDidl
 */
DeviceProfile.prototype['EnableAlbumArtInDidl'] = undefined;

/**
 * Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.
 * @member {Boolean} EnableMSMediaReceiverRegistrar
 */
DeviceProfile.prototype['EnableMSMediaReceiverRegistrar'] = undefined;

/**
 * Gets or sets a value indicating whether EnableSingleAlbumArtLimit.
 * @member {Boolean} EnableSingleAlbumArtLimit
 */
DeviceProfile.prototype['EnableSingleAlbumArtLimit'] = undefined;

/**
 * Gets or sets a value indicating whether EnableSingleSubtitleLimit.
 * @member {Boolean} EnableSingleSubtitleLimit
 */
DeviceProfile.prototype['EnableSingleSubtitleLimit'] = undefined;

/**
 * Gets or sets the FriendlyName.
 * @member {String} FriendlyName
 */
DeviceProfile.prototype['FriendlyName'] = undefined;

/**
 * Gets or sets the Id.
 * @member {String} Id
 */
DeviceProfile.prototype['Id'] = undefined;

/**
 * @member {module:model/DeviceIdentification} Identification
 */
DeviceProfile.prototype['Identification'] = undefined;

/**
 * Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.
 * @member {Boolean} IgnoreTranscodeByteRangeRequests
 */
DeviceProfile.prototype['IgnoreTranscodeByteRangeRequests'] = undefined;

/**
 * Gets or sets the Manufacturer.
 * @member {String} Manufacturer
 */
DeviceProfile.prototype['Manufacturer'] = undefined;

/**
 * Gets or sets the ManufacturerUrl.
 * @member {String} ManufacturerUrl
 */
DeviceProfile.prototype['ManufacturerUrl'] = undefined;

/**
 * Gets or sets the MaxAlbumArtHeight.
 * @member {Number} MaxAlbumArtHeight
 */
DeviceProfile.prototype['MaxAlbumArtHeight'] = undefined;

/**
 * Gets or sets the MaxAlbumArtWidth.
 * @member {Number} MaxAlbumArtWidth
 */
DeviceProfile.prototype['MaxAlbumArtWidth'] = undefined;

/**
 * Gets or sets the MaxIconHeight.
 * @member {Number} MaxIconHeight
 */
DeviceProfile.prototype['MaxIconHeight'] = undefined;

/**
 * Gets or sets the MaxIconWidth.
 * @member {Number} MaxIconWidth
 */
DeviceProfile.prototype['MaxIconWidth'] = undefined;

/**
 * Gets or sets the MaxStaticBitrate.
 * @member {Number} MaxStaticBitrate
 */
DeviceProfile.prototype['MaxStaticBitrate'] = undefined;

/**
 * Gets or sets the MaxStaticMusicBitrate.
 * @member {Number} MaxStaticMusicBitrate
 */
DeviceProfile.prototype['MaxStaticMusicBitrate'] = undefined;

/**
 * Gets or sets the MaxStreamingBitrate.
 * @member {Number} MaxStreamingBitrate
 */
DeviceProfile.prototype['MaxStreamingBitrate'] = undefined;

/**
 * Gets or sets the ModelDescription.
 * @member {String} ModelDescription
 */
DeviceProfile.prototype['ModelDescription'] = undefined;

/**
 * Gets or sets the ModelName.
 * @member {String} ModelName
 */
DeviceProfile.prototype['ModelName'] = undefined;

/**
 * Gets or sets the ModelNumber.
 * @member {String} ModelNumber
 */
DeviceProfile.prototype['ModelNumber'] = undefined;

/**
 * Gets or sets the ModelUrl.
 * @member {String} ModelUrl
 */
DeviceProfile.prototype['ModelUrl'] = undefined;

/**
 * Gets or sets the MusicStreamingTranscodingBitrate.
 * @member {Number} MusicStreamingTranscodingBitrate
 */
DeviceProfile.prototype['MusicStreamingTranscodingBitrate'] = undefined;

/**
 * Gets or sets the Name.
 * @member {String} Name
 */
DeviceProfile.prototype['Name'] = undefined;

/**
 * Gets or sets the ProtocolInfo.
 * @member {String} ProtocolInfo
 */
DeviceProfile.prototype['ProtocolInfo'] = undefined;

/**
 * Gets or sets a value indicating whether RequiresPlainFolders.
 * @member {Boolean} RequiresPlainFolders
 */
DeviceProfile.prototype['RequiresPlainFolders'] = undefined;

/**
 * Gets or sets a value indicating whether RequiresPlainVideoItems.
 * @member {Boolean} RequiresPlainVideoItems
 */
DeviceProfile.prototype['RequiresPlainVideoItems'] = undefined;

/**
 * Gets or sets the ResponseProfiles.
 * @member {Array.<module:model/ResponseProfile>} ResponseProfiles
 */
DeviceProfile.prototype['ResponseProfiles'] = undefined;

/**
 * Gets or sets the SerialNumber.
 * @member {String} SerialNumber
 */
DeviceProfile.prototype['SerialNumber'] = undefined;

/**
 * Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.
 * @member {String} SonyAggregationFlags
 */
DeviceProfile.prototype['SonyAggregationFlags'] = undefined;

/**
 * Gets or sets the SubtitleProfiles.
 * @member {Array.<module:model/SubtitleProfile>} SubtitleProfiles
 */
DeviceProfile.prototype['SubtitleProfiles'] = undefined;

/**
 * Gets or sets the SupportedMediaTypes.
 * @member {String} SupportedMediaTypes
 */
DeviceProfile.prototype['SupportedMediaTypes'] = undefined;

/**
 * Gets or sets the TimelineOffsetSeconds.
 * @member {Number} TimelineOffsetSeconds
 */
DeviceProfile.prototype['TimelineOffsetSeconds'] = undefined;

/**
 * Gets or sets the transcoding profiles.
 * @member {Array.<module:model/TranscodingProfile>} TranscodingProfiles
 */
DeviceProfile.prototype['TranscodingProfiles'] = undefined;

/**
 * Gets or sets the UserId.
 * @member {String} UserId
 */
DeviceProfile.prototype['UserId'] = undefined;

/**
 * Gets or sets the XmlRootAttributes.
 * @member {Array.<module:model/XmlAttribute>} XmlRootAttributes
 */
DeviceProfile.prototype['XmlRootAttributes'] = undefined;






export default DeviceProfile;

