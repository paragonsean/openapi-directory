/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ControlResponse model module.
 * @module model/ControlResponse
 * @version v1
 */
class ControlResponse {
    /**
     * Constructs a new <code>ControlResponse</code>.
     * @alias module:model/ControlResponse
     */
    constructor() { 
        
        ControlResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ControlResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ControlResponse} obj Optional instance to populate.
     * @return {module:model/ControlResponse} The populated <code>ControlResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ControlResponse();

            if (data.hasOwnProperty('Headers')) {
                obj['Headers'] = ApiClient.convertToType(data['Headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('IsSuccessful')) {
                obj['IsSuccessful'] = ApiClient.convertToType(data['IsSuccessful'], 'Boolean');
            }
            if (data.hasOwnProperty('Xml')) {
                obj['Xml'] = ApiClient.convertToType(data['Xml'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ControlResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ControlResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Xml'] && !(typeof data['Xml'] === 'string' || data['Xml'] instanceof String)) {
            throw new Error("Expected the field `Xml` to be a primitive type in the JSON string but got " + data['Xml']);
        }

        return true;
    }


}



/**
 * @member {Object.<String, String>} Headers
 */
ControlResponse.prototype['Headers'] = undefined;

/**
 * @member {Boolean} IsSuccessful
 */
ControlResponse.prototype['IsSuccessful'] = undefined;

/**
 * @member {String} Xml
 */
ControlResponse.prototype['Xml'] = undefined;






export default ControlResponse;

