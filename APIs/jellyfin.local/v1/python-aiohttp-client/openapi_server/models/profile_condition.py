# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profile_condition_type import ProfileConditionType
from openapi_server.models.profile_condition_value import ProfileConditionValue
from openapi_server import util


class ProfileCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: ProfileConditionType=None, is_required: bool=None, _property: ProfileConditionValue=None, value: str=None):
        """ProfileCondition - a model defined in OpenAPI

        :param condition: The condition of this ProfileCondition.
        :param is_required: The is_required of this ProfileCondition.
        :param _property: The _property of this ProfileCondition.
        :param value: The value of this ProfileCondition.
        """
        self.openapi_types = {
            'condition': ProfileConditionType,
            'is_required': bool,
            '_property': ProfileConditionValue,
            'value': str
        }

        self.attribute_map = {
            'condition': 'Condition',
            'is_required': 'IsRequired',
            '_property': 'Property',
            'value': 'Value'
        }

        self._condition = condition
        self._is_required = is_required
        self.__property = _property
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileCondition of this ProfileCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this ProfileCondition.


        :return: The condition of this ProfileCondition.
        :rtype: ProfileConditionType
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ProfileCondition.


        :param condition: The condition of this ProfileCondition.
        :type condition: ProfileConditionType
        """

        self._condition = condition

    @property
    def is_required(self):
        """Gets the is_required of this ProfileCondition.


        :return: The is_required of this ProfileCondition.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this ProfileCondition.


        :param is_required: The is_required of this ProfileCondition.
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def _property(self):
        """Gets the _property of this ProfileCondition.


        :return: The _property of this ProfileCondition.
        :rtype: ProfileConditionValue
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this ProfileCondition.


        :param _property: The _property of this ProfileCondition.
        :type _property: ProfileConditionValue
        """

        self.__property = _property

    @property
    def value(self):
        """Gets the value of this ProfileCondition.


        :return: The value of this ProfileCondition.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProfileCondition.


        :param value: The value of this ProfileCondition.
        :type value: str
        """

        self._value = value
