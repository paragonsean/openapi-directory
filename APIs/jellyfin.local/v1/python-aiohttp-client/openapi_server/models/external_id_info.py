# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_id_media_type import ExternalIdMediaType
from openapi_server import util


class ExternalIdInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, name: str=None, type: ExternalIdMediaType=None, url_format_string: str=None):
        """ExternalIdInfo - a model defined in OpenAPI

        :param key: The key of this ExternalIdInfo.
        :param name: The name of this ExternalIdInfo.
        :param type: The type of this ExternalIdInfo.
        :param url_format_string: The url_format_string of this ExternalIdInfo.
        """
        self.openapi_types = {
            'key': str,
            'name': str,
            'type': ExternalIdMediaType,
            'url_format_string': str
        }

        self.attribute_map = {
            'key': 'Key',
            'name': 'Name',
            'type': 'Type',
            'url_format_string': 'UrlFormatString'
        }

        self._key = key
        self._name = name
        self._type = type
        self._url_format_string = url_format_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalIdInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalIdInfo of this ExternalIdInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this ExternalIdInfo.

        Gets or sets the unique key for this id. This key should be unique across all providers.

        :return: The key of this ExternalIdInfo.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ExternalIdInfo.

        Gets or sets the unique key for this id. This key should be unique across all providers.

        :param key: The key of this ExternalIdInfo.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this ExternalIdInfo.

        Gets or sets the display name of the external id provider (IE: IMDB, MusicBrainz, etc).

        :return: The name of this ExternalIdInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExternalIdInfo.

        Gets or sets the display name of the external id provider (IE: IMDB, MusicBrainz, etc).

        :param name: The name of this ExternalIdInfo.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ExternalIdInfo.


        :return: The type of this ExternalIdInfo.
        :rtype: ExternalIdMediaType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExternalIdInfo.


        :param type: The type of this ExternalIdInfo.
        :type type: ExternalIdMediaType
        """

        self._type = type

    @property
    def url_format_string(self):
        """Gets the url_format_string of this ExternalIdInfo.

        Gets or sets the URL format string.

        :return: The url_format_string of this ExternalIdInfo.
        :rtype: str
        """
        return self._url_format_string

    @url_format_string.setter
    def url_format_string(self, url_format_string):
        """Sets the url_format_string of this ExternalIdInfo.

        Gets or sets the URL format string.

        :param url_format_string: The url_format_string of this ExternalIdInfo.
        :type url_format_string: str
        """

        self._url_format_string = url_format_string
