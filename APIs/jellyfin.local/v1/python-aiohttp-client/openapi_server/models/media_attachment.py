# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MediaAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codec: str=None, codec_tag: str=None, comment: str=None, delivery_url: str=None, file_name: str=None, index: int=None, mime_type: str=None):
        """MediaAttachment - a model defined in OpenAPI

        :param codec: The codec of this MediaAttachment.
        :param codec_tag: The codec_tag of this MediaAttachment.
        :param comment: The comment of this MediaAttachment.
        :param delivery_url: The delivery_url of this MediaAttachment.
        :param file_name: The file_name of this MediaAttachment.
        :param index: The index of this MediaAttachment.
        :param mime_type: The mime_type of this MediaAttachment.
        """
        self.openapi_types = {
            'codec': str,
            'codec_tag': str,
            'comment': str,
            'delivery_url': str,
            'file_name': str,
            'index': int,
            'mime_type': str
        }

        self.attribute_map = {
            'codec': 'Codec',
            'codec_tag': 'CodecTag',
            'comment': 'Comment',
            'delivery_url': 'DeliveryUrl',
            'file_name': 'FileName',
            'index': 'Index',
            'mime_type': 'MimeType'
        }

        self._codec = codec
        self._codec_tag = codec_tag
        self._comment = comment
        self._delivery_url = delivery_url
        self._file_name = file_name
        self._index = index
        self._mime_type = mime_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaAttachment of this MediaAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codec(self):
        """Gets the codec of this MediaAttachment.

        Gets or sets the codec.

        :return: The codec of this MediaAttachment.
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this MediaAttachment.

        Gets or sets the codec.

        :param codec: The codec of this MediaAttachment.
        :type codec: str
        """

        self._codec = codec

    @property
    def codec_tag(self):
        """Gets the codec_tag of this MediaAttachment.

        Gets or sets the codec tag.

        :return: The codec_tag of this MediaAttachment.
        :rtype: str
        """
        return self._codec_tag

    @codec_tag.setter
    def codec_tag(self, codec_tag):
        """Sets the codec_tag of this MediaAttachment.

        Gets or sets the codec tag.

        :param codec_tag: The codec_tag of this MediaAttachment.
        :type codec_tag: str
        """

        self._codec_tag = codec_tag

    @property
    def comment(self):
        """Gets the comment of this MediaAttachment.

        Gets or sets the comment.

        :return: The comment of this MediaAttachment.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MediaAttachment.

        Gets or sets the comment.

        :param comment: The comment of this MediaAttachment.
        :type comment: str
        """

        self._comment = comment

    @property
    def delivery_url(self):
        """Gets the delivery_url of this MediaAttachment.

        Gets or sets the delivery URL.

        :return: The delivery_url of this MediaAttachment.
        :rtype: str
        """
        return self._delivery_url

    @delivery_url.setter
    def delivery_url(self, delivery_url):
        """Sets the delivery_url of this MediaAttachment.

        Gets or sets the delivery URL.

        :param delivery_url: The delivery_url of this MediaAttachment.
        :type delivery_url: str
        """

        self._delivery_url = delivery_url

    @property
    def file_name(self):
        """Gets the file_name of this MediaAttachment.

        Gets or sets the filename.

        :return: The file_name of this MediaAttachment.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this MediaAttachment.

        Gets or sets the filename.

        :param file_name: The file_name of this MediaAttachment.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def index(self):
        """Gets the index of this MediaAttachment.

        Gets or sets the index.

        :return: The index of this MediaAttachment.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this MediaAttachment.

        Gets or sets the index.

        :param index: The index of this MediaAttachment.
        :type index: int
        """

        self._index = index

    @property
    def mime_type(self):
        """Gets the mime_type of this MediaAttachment.

        Gets or sets the MIME type.

        :return: The mime_type of this MediaAttachment.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this MediaAttachment.

        Gets or sets the MIME type.

        :param mime_type: The mime_type of this MediaAttachment.
        :type mime_type: str
        """

        self._mime_type = mime_type
