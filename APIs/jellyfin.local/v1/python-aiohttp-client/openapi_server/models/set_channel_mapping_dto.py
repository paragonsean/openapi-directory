# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetChannelMappingDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provider_channel_id: str=None, provider_id: str=None, tuner_channel_id: str=None):
        """SetChannelMappingDto - a model defined in OpenAPI

        :param provider_channel_id: The provider_channel_id of this SetChannelMappingDto.
        :param provider_id: The provider_id of this SetChannelMappingDto.
        :param tuner_channel_id: The tuner_channel_id of this SetChannelMappingDto.
        """
        self.openapi_types = {
            'provider_channel_id': str,
            'provider_id': str,
            'tuner_channel_id': str
        }

        self.attribute_map = {
            'provider_channel_id': 'ProviderChannelId',
            'provider_id': 'ProviderId',
            'tuner_channel_id': 'TunerChannelId'
        }

        self._provider_channel_id = provider_channel_id
        self._provider_id = provider_id
        self._tuner_channel_id = tuner_channel_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetChannelMappingDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetChannelMappingDto of this SetChannelMappingDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provider_channel_id(self):
        """Gets the provider_channel_id of this SetChannelMappingDto.

        Gets or sets the provider channel id.

        :return: The provider_channel_id of this SetChannelMappingDto.
        :rtype: str
        """
        return self._provider_channel_id

    @provider_channel_id.setter
    def provider_channel_id(self, provider_channel_id):
        """Sets the provider_channel_id of this SetChannelMappingDto.

        Gets or sets the provider channel id.

        :param provider_channel_id: The provider_channel_id of this SetChannelMappingDto.
        :type provider_channel_id: str
        """
        if provider_channel_id is None:
            raise ValueError("Invalid value for `provider_channel_id`, must not be `None`")

        self._provider_channel_id = provider_channel_id

    @property
    def provider_id(self):
        """Gets the provider_id of this SetChannelMappingDto.

        Gets or sets the provider id.

        :return: The provider_id of this SetChannelMappingDto.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this SetChannelMappingDto.

        Gets or sets the provider id.

        :param provider_id: The provider_id of this SetChannelMappingDto.
        :type provider_id: str
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")

        self._provider_id = provider_id

    @property
    def tuner_channel_id(self):
        """Gets the tuner_channel_id of this SetChannelMappingDto.

        Gets or sets the tuner channel id.

        :return: The tuner_channel_id of this SetChannelMappingDto.
        :rtype: str
        """
        return self._tuner_channel_id

    @tuner_channel_id.setter
    def tuner_channel_id(self, tuner_channel_id):
        """Sets the tuner_channel_id of this SetChannelMappingDto.

        Gets or sets the tuner channel id.

        :param tuner_channel_id: The tuner_channel_id of this SetChannelMappingDto.
        :type tuner_channel_id: str
        """
        if tuner_channel_id is None:
            raise ValueError("Invalid value for `tuner_channel_id`, must not be `None`")

        self._tuner_channel_id = tuner_channel_id
