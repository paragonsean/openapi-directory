# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_schedule import AccessSchedule
from openapi_server.models.sync_play_user_access_type import SyncPlayUserAccessType
from openapi_server.models.unrated_item import UnratedItem
from openapi_server import util


class UserPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_schedules: List[AccessSchedule]=None, authentication_provider_id: str=None, block_unrated_items: List[UnratedItem]=None, blocked_channels: List[str]=None, blocked_media_folders: List[str]=None, blocked_tags: List[str]=None, enable_all_channels: bool=None, enable_all_devices: bool=None, enable_all_folders: bool=None, enable_audio_playback_transcoding: bool=None, enable_content_deletion: bool=None, enable_content_deletion_from_folders: List[str]=None, enable_content_downloading: bool=None, enable_live_tv_access: bool=None, enable_live_tv_management: bool=None, enable_media_conversion: bool=None, enable_media_playback: bool=None, enable_playback_remuxing: bool=None, enable_public_sharing: bool=None, enable_remote_access: bool=None, enable_remote_control_of_other_users: bool=None, enable_shared_device_control: bool=None, enable_sync_transcoding: bool=None, enable_user_preference_access: bool=None, enable_video_playback_transcoding: bool=None, enabled_channels: List[str]=None, enabled_devices: List[str]=None, enabled_folders: List[str]=None, force_remote_source_transcoding: bool=None, invalid_login_attempt_count: int=None, is_administrator: bool=None, is_disabled: bool=None, is_hidden: bool=None, login_attempts_before_lockout: int=None, max_active_sessions: int=None, max_parental_rating: int=None, password_reset_provider_id: str=None, remote_client_bitrate_limit: int=None, sync_play_access: SyncPlayUserAccessType=None):
        """UserPolicy - a model defined in OpenAPI

        :param access_schedules: The access_schedules of this UserPolicy.
        :param authentication_provider_id: The authentication_provider_id of this UserPolicy.
        :param block_unrated_items: The block_unrated_items of this UserPolicy.
        :param blocked_channels: The blocked_channels of this UserPolicy.
        :param blocked_media_folders: The blocked_media_folders of this UserPolicy.
        :param blocked_tags: The blocked_tags of this UserPolicy.
        :param enable_all_channels: The enable_all_channels of this UserPolicy.
        :param enable_all_devices: The enable_all_devices of this UserPolicy.
        :param enable_all_folders: The enable_all_folders of this UserPolicy.
        :param enable_audio_playback_transcoding: The enable_audio_playback_transcoding of this UserPolicy.
        :param enable_content_deletion: The enable_content_deletion of this UserPolicy.
        :param enable_content_deletion_from_folders: The enable_content_deletion_from_folders of this UserPolicy.
        :param enable_content_downloading: The enable_content_downloading of this UserPolicy.
        :param enable_live_tv_access: The enable_live_tv_access of this UserPolicy.
        :param enable_live_tv_management: The enable_live_tv_management of this UserPolicy.
        :param enable_media_conversion: The enable_media_conversion of this UserPolicy.
        :param enable_media_playback: The enable_media_playback of this UserPolicy.
        :param enable_playback_remuxing: The enable_playback_remuxing of this UserPolicy.
        :param enable_public_sharing: The enable_public_sharing of this UserPolicy.
        :param enable_remote_access: The enable_remote_access of this UserPolicy.
        :param enable_remote_control_of_other_users: The enable_remote_control_of_other_users of this UserPolicy.
        :param enable_shared_device_control: The enable_shared_device_control of this UserPolicy.
        :param enable_sync_transcoding: The enable_sync_transcoding of this UserPolicy.
        :param enable_user_preference_access: The enable_user_preference_access of this UserPolicy.
        :param enable_video_playback_transcoding: The enable_video_playback_transcoding of this UserPolicy.
        :param enabled_channels: The enabled_channels of this UserPolicy.
        :param enabled_devices: The enabled_devices of this UserPolicy.
        :param enabled_folders: The enabled_folders of this UserPolicy.
        :param force_remote_source_transcoding: The force_remote_source_transcoding of this UserPolicy.
        :param invalid_login_attempt_count: The invalid_login_attempt_count of this UserPolicy.
        :param is_administrator: The is_administrator of this UserPolicy.
        :param is_disabled: The is_disabled of this UserPolicy.
        :param is_hidden: The is_hidden of this UserPolicy.
        :param login_attempts_before_lockout: The login_attempts_before_lockout of this UserPolicy.
        :param max_active_sessions: The max_active_sessions of this UserPolicy.
        :param max_parental_rating: The max_parental_rating of this UserPolicy.
        :param password_reset_provider_id: The password_reset_provider_id of this UserPolicy.
        :param remote_client_bitrate_limit: The remote_client_bitrate_limit of this UserPolicy.
        :param sync_play_access: The sync_play_access of this UserPolicy.
        """
        self.openapi_types = {
            'access_schedules': List[AccessSchedule],
            'authentication_provider_id': str,
            'block_unrated_items': List[UnratedItem],
            'blocked_channels': List[str],
            'blocked_media_folders': List[str],
            'blocked_tags': List[str],
            'enable_all_channels': bool,
            'enable_all_devices': bool,
            'enable_all_folders': bool,
            'enable_audio_playback_transcoding': bool,
            'enable_content_deletion': bool,
            'enable_content_deletion_from_folders': List[str],
            'enable_content_downloading': bool,
            'enable_live_tv_access': bool,
            'enable_live_tv_management': bool,
            'enable_media_conversion': bool,
            'enable_media_playback': bool,
            'enable_playback_remuxing': bool,
            'enable_public_sharing': bool,
            'enable_remote_access': bool,
            'enable_remote_control_of_other_users': bool,
            'enable_shared_device_control': bool,
            'enable_sync_transcoding': bool,
            'enable_user_preference_access': bool,
            'enable_video_playback_transcoding': bool,
            'enabled_channels': List[str],
            'enabled_devices': List[str],
            'enabled_folders': List[str],
            'force_remote_source_transcoding': bool,
            'invalid_login_attempt_count': int,
            'is_administrator': bool,
            'is_disabled': bool,
            'is_hidden': bool,
            'login_attempts_before_lockout': int,
            'max_active_sessions': int,
            'max_parental_rating': int,
            'password_reset_provider_id': str,
            'remote_client_bitrate_limit': int,
            'sync_play_access': SyncPlayUserAccessType
        }

        self.attribute_map = {
            'access_schedules': 'AccessSchedules',
            'authentication_provider_id': 'AuthenticationProviderId',
            'block_unrated_items': 'BlockUnratedItems',
            'blocked_channels': 'BlockedChannels',
            'blocked_media_folders': 'BlockedMediaFolders',
            'blocked_tags': 'BlockedTags',
            'enable_all_channels': 'EnableAllChannels',
            'enable_all_devices': 'EnableAllDevices',
            'enable_all_folders': 'EnableAllFolders',
            'enable_audio_playback_transcoding': 'EnableAudioPlaybackTranscoding',
            'enable_content_deletion': 'EnableContentDeletion',
            'enable_content_deletion_from_folders': 'EnableContentDeletionFromFolders',
            'enable_content_downloading': 'EnableContentDownloading',
            'enable_live_tv_access': 'EnableLiveTvAccess',
            'enable_live_tv_management': 'EnableLiveTvManagement',
            'enable_media_conversion': 'EnableMediaConversion',
            'enable_media_playback': 'EnableMediaPlayback',
            'enable_playback_remuxing': 'EnablePlaybackRemuxing',
            'enable_public_sharing': 'EnablePublicSharing',
            'enable_remote_access': 'EnableRemoteAccess',
            'enable_remote_control_of_other_users': 'EnableRemoteControlOfOtherUsers',
            'enable_shared_device_control': 'EnableSharedDeviceControl',
            'enable_sync_transcoding': 'EnableSyncTranscoding',
            'enable_user_preference_access': 'EnableUserPreferenceAccess',
            'enable_video_playback_transcoding': 'EnableVideoPlaybackTranscoding',
            'enabled_channels': 'EnabledChannels',
            'enabled_devices': 'EnabledDevices',
            'enabled_folders': 'EnabledFolders',
            'force_remote_source_transcoding': 'ForceRemoteSourceTranscoding',
            'invalid_login_attempt_count': 'InvalidLoginAttemptCount',
            'is_administrator': 'IsAdministrator',
            'is_disabled': 'IsDisabled',
            'is_hidden': 'IsHidden',
            'login_attempts_before_lockout': 'LoginAttemptsBeforeLockout',
            'max_active_sessions': 'MaxActiveSessions',
            'max_parental_rating': 'MaxParentalRating',
            'password_reset_provider_id': 'PasswordResetProviderId',
            'remote_client_bitrate_limit': 'RemoteClientBitrateLimit',
            'sync_play_access': 'SyncPlayAccess'
        }

        self._access_schedules = access_schedules
        self._authentication_provider_id = authentication_provider_id
        self._block_unrated_items = block_unrated_items
        self._blocked_channels = blocked_channels
        self._blocked_media_folders = blocked_media_folders
        self._blocked_tags = blocked_tags
        self._enable_all_channels = enable_all_channels
        self._enable_all_devices = enable_all_devices
        self._enable_all_folders = enable_all_folders
        self._enable_audio_playback_transcoding = enable_audio_playback_transcoding
        self._enable_content_deletion = enable_content_deletion
        self._enable_content_deletion_from_folders = enable_content_deletion_from_folders
        self._enable_content_downloading = enable_content_downloading
        self._enable_live_tv_access = enable_live_tv_access
        self._enable_live_tv_management = enable_live_tv_management
        self._enable_media_conversion = enable_media_conversion
        self._enable_media_playback = enable_media_playback
        self._enable_playback_remuxing = enable_playback_remuxing
        self._enable_public_sharing = enable_public_sharing
        self._enable_remote_access = enable_remote_access
        self._enable_remote_control_of_other_users = enable_remote_control_of_other_users
        self._enable_shared_device_control = enable_shared_device_control
        self._enable_sync_transcoding = enable_sync_transcoding
        self._enable_user_preference_access = enable_user_preference_access
        self._enable_video_playback_transcoding = enable_video_playback_transcoding
        self._enabled_channels = enabled_channels
        self._enabled_devices = enabled_devices
        self._enabled_folders = enabled_folders
        self._force_remote_source_transcoding = force_remote_source_transcoding
        self._invalid_login_attempt_count = invalid_login_attempt_count
        self._is_administrator = is_administrator
        self._is_disabled = is_disabled
        self._is_hidden = is_hidden
        self._login_attempts_before_lockout = login_attempts_before_lockout
        self._max_active_sessions = max_active_sessions
        self._max_parental_rating = max_parental_rating
        self._password_reset_provider_id = password_reset_provider_id
        self._remote_client_bitrate_limit = remote_client_bitrate_limit
        self._sync_play_access = sync_play_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserPolicy of this UserPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_schedules(self):
        """Gets the access_schedules of this UserPolicy.


        :return: The access_schedules of this UserPolicy.
        :rtype: List[AccessSchedule]
        """
        return self._access_schedules

    @access_schedules.setter
    def access_schedules(self, access_schedules):
        """Sets the access_schedules of this UserPolicy.


        :param access_schedules: The access_schedules of this UserPolicy.
        :type access_schedules: List[AccessSchedule]
        """

        self._access_schedules = access_schedules

    @property
    def authentication_provider_id(self):
        """Gets the authentication_provider_id of this UserPolicy.


        :return: The authentication_provider_id of this UserPolicy.
        :rtype: str
        """
        return self._authentication_provider_id

    @authentication_provider_id.setter
    def authentication_provider_id(self, authentication_provider_id):
        """Sets the authentication_provider_id of this UserPolicy.


        :param authentication_provider_id: The authentication_provider_id of this UserPolicy.
        :type authentication_provider_id: str
        """

        self._authentication_provider_id = authentication_provider_id

    @property
    def block_unrated_items(self):
        """Gets the block_unrated_items of this UserPolicy.


        :return: The block_unrated_items of this UserPolicy.
        :rtype: List[UnratedItem]
        """
        return self._block_unrated_items

    @block_unrated_items.setter
    def block_unrated_items(self, block_unrated_items):
        """Sets the block_unrated_items of this UserPolicy.


        :param block_unrated_items: The block_unrated_items of this UserPolicy.
        :type block_unrated_items: List[UnratedItem]
        """

        self._block_unrated_items = block_unrated_items

    @property
    def blocked_channels(self):
        """Gets the blocked_channels of this UserPolicy.


        :return: The blocked_channels of this UserPolicy.
        :rtype: List[str]
        """
        return self._blocked_channels

    @blocked_channels.setter
    def blocked_channels(self, blocked_channels):
        """Sets the blocked_channels of this UserPolicy.


        :param blocked_channels: The blocked_channels of this UserPolicy.
        :type blocked_channels: List[str]
        """

        self._blocked_channels = blocked_channels

    @property
    def blocked_media_folders(self):
        """Gets the blocked_media_folders of this UserPolicy.


        :return: The blocked_media_folders of this UserPolicy.
        :rtype: List[str]
        """
        return self._blocked_media_folders

    @blocked_media_folders.setter
    def blocked_media_folders(self, blocked_media_folders):
        """Sets the blocked_media_folders of this UserPolicy.


        :param blocked_media_folders: The blocked_media_folders of this UserPolicy.
        :type blocked_media_folders: List[str]
        """

        self._blocked_media_folders = blocked_media_folders

    @property
    def blocked_tags(self):
        """Gets the blocked_tags of this UserPolicy.


        :return: The blocked_tags of this UserPolicy.
        :rtype: List[str]
        """
        return self._blocked_tags

    @blocked_tags.setter
    def blocked_tags(self, blocked_tags):
        """Sets the blocked_tags of this UserPolicy.


        :param blocked_tags: The blocked_tags of this UserPolicy.
        :type blocked_tags: List[str]
        """

        self._blocked_tags = blocked_tags

    @property
    def enable_all_channels(self):
        """Gets the enable_all_channels of this UserPolicy.


        :return: The enable_all_channels of this UserPolicy.
        :rtype: bool
        """
        return self._enable_all_channels

    @enable_all_channels.setter
    def enable_all_channels(self, enable_all_channels):
        """Sets the enable_all_channels of this UserPolicy.


        :param enable_all_channels: The enable_all_channels of this UserPolicy.
        :type enable_all_channels: bool
        """

        self._enable_all_channels = enable_all_channels

    @property
    def enable_all_devices(self):
        """Gets the enable_all_devices of this UserPolicy.


        :return: The enable_all_devices of this UserPolicy.
        :rtype: bool
        """
        return self._enable_all_devices

    @enable_all_devices.setter
    def enable_all_devices(self, enable_all_devices):
        """Sets the enable_all_devices of this UserPolicy.


        :param enable_all_devices: The enable_all_devices of this UserPolicy.
        :type enable_all_devices: bool
        """

        self._enable_all_devices = enable_all_devices

    @property
    def enable_all_folders(self):
        """Gets the enable_all_folders of this UserPolicy.


        :return: The enable_all_folders of this UserPolicy.
        :rtype: bool
        """
        return self._enable_all_folders

    @enable_all_folders.setter
    def enable_all_folders(self, enable_all_folders):
        """Sets the enable_all_folders of this UserPolicy.


        :param enable_all_folders: The enable_all_folders of this UserPolicy.
        :type enable_all_folders: bool
        """

        self._enable_all_folders = enable_all_folders

    @property
    def enable_audio_playback_transcoding(self):
        """Gets the enable_audio_playback_transcoding of this UserPolicy.


        :return: The enable_audio_playback_transcoding of this UserPolicy.
        :rtype: bool
        """
        return self._enable_audio_playback_transcoding

    @enable_audio_playback_transcoding.setter
    def enable_audio_playback_transcoding(self, enable_audio_playback_transcoding):
        """Sets the enable_audio_playback_transcoding of this UserPolicy.


        :param enable_audio_playback_transcoding: The enable_audio_playback_transcoding of this UserPolicy.
        :type enable_audio_playback_transcoding: bool
        """

        self._enable_audio_playback_transcoding = enable_audio_playback_transcoding

    @property
    def enable_content_deletion(self):
        """Gets the enable_content_deletion of this UserPolicy.


        :return: The enable_content_deletion of this UserPolicy.
        :rtype: bool
        """
        return self._enable_content_deletion

    @enable_content_deletion.setter
    def enable_content_deletion(self, enable_content_deletion):
        """Sets the enable_content_deletion of this UserPolicy.


        :param enable_content_deletion: The enable_content_deletion of this UserPolicy.
        :type enable_content_deletion: bool
        """

        self._enable_content_deletion = enable_content_deletion

    @property
    def enable_content_deletion_from_folders(self):
        """Gets the enable_content_deletion_from_folders of this UserPolicy.


        :return: The enable_content_deletion_from_folders of this UserPolicy.
        :rtype: List[str]
        """
        return self._enable_content_deletion_from_folders

    @enable_content_deletion_from_folders.setter
    def enable_content_deletion_from_folders(self, enable_content_deletion_from_folders):
        """Sets the enable_content_deletion_from_folders of this UserPolicy.


        :param enable_content_deletion_from_folders: The enable_content_deletion_from_folders of this UserPolicy.
        :type enable_content_deletion_from_folders: List[str]
        """

        self._enable_content_deletion_from_folders = enable_content_deletion_from_folders

    @property
    def enable_content_downloading(self):
        """Gets the enable_content_downloading of this UserPolicy.


        :return: The enable_content_downloading of this UserPolicy.
        :rtype: bool
        """
        return self._enable_content_downloading

    @enable_content_downloading.setter
    def enable_content_downloading(self, enable_content_downloading):
        """Sets the enable_content_downloading of this UserPolicy.


        :param enable_content_downloading: The enable_content_downloading of this UserPolicy.
        :type enable_content_downloading: bool
        """

        self._enable_content_downloading = enable_content_downloading

    @property
    def enable_live_tv_access(self):
        """Gets the enable_live_tv_access of this UserPolicy.


        :return: The enable_live_tv_access of this UserPolicy.
        :rtype: bool
        """
        return self._enable_live_tv_access

    @enable_live_tv_access.setter
    def enable_live_tv_access(self, enable_live_tv_access):
        """Sets the enable_live_tv_access of this UserPolicy.


        :param enable_live_tv_access: The enable_live_tv_access of this UserPolicy.
        :type enable_live_tv_access: bool
        """

        self._enable_live_tv_access = enable_live_tv_access

    @property
    def enable_live_tv_management(self):
        """Gets the enable_live_tv_management of this UserPolicy.


        :return: The enable_live_tv_management of this UserPolicy.
        :rtype: bool
        """
        return self._enable_live_tv_management

    @enable_live_tv_management.setter
    def enable_live_tv_management(self, enable_live_tv_management):
        """Sets the enable_live_tv_management of this UserPolicy.


        :param enable_live_tv_management: The enable_live_tv_management of this UserPolicy.
        :type enable_live_tv_management: bool
        """

        self._enable_live_tv_management = enable_live_tv_management

    @property
    def enable_media_conversion(self):
        """Gets the enable_media_conversion of this UserPolicy.


        :return: The enable_media_conversion of this UserPolicy.
        :rtype: bool
        """
        return self._enable_media_conversion

    @enable_media_conversion.setter
    def enable_media_conversion(self, enable_media_conversion):
        """Sets the enable_media_conversion of this UserPolicy.


        :param enable_media_conversion: The enable_media_conversion of this UserPolicy.
        :type enable_media_conversion: bool
        """

        self._enable_media_conversion = enable_media_conversion

    @property
    def enable_media_playback(self):
        """Gets the enable_media_playback of this UserPolicy.


        :return: The enable_media_playback of this UserPolicy.
        :rtype: bool
        """
        return self._enable_media_playback

    @enable_media_playback.setter
    def enable_media_playback(self, enable_media_playback):
        """Sets the enable_media_playback of this UserPolicy.


        :param enable_media_playback: The enable_media_playback of this UserPolicy.
        :type enable_media_playback: bool
        """

        self._enable_media_playback = enable_media_playback

    @property
    def enable_playback_remuxing(self):
        """Gets the enable_playback_remuxing of this UserPolicy.


        :return: The enable_playback_remuxing of this UserPolicy.
        :rtype: bool
        """
        return self._enable_playback_remuxing

    @enable_playback_remuxing.setter
    def enable_playback_remuxing(self, enable_playback_remuxing):
        """Sets the enable_playback_remuxing of this UserPolicy.


        :param enable_playback_remuxing: The enable_playback_remuxing of this UserPolicy.
        :type enable_playback_remuxing: bool
        """

        self._enable_playback_remuxing = enable_playback_remuxing

    @property
    def enable_public_sharing(self):
        """Gets the enable_public_sharing of this UserPolicy.


        :return: The enable_public_sharing of this UserPolicy.
        :rtype: bool
        """
        return self._enable_public_sharing

    @enable_public_sharing.setter
    def enable_public_sharing(self, enable_public_sharing):
        """Sets the enable_public_sharing of this UserPolicy.


        :param enable_public_sharing: The enable_public_sharing of this UserPolicy.
        :type enable_public_sharing: bool
        """

        self._enable_public_sharing = enable_public_sharing

    @property
    def enable_remote_access(self):
        """Gets the enable_remote_access of this UserPolicy.


        :return: The enable_remote_access of this UserPolicy.
        :rtype: bool
        """
        return self._enable_remote_access

    @enable_remote_access.setter
    def enable_remote_access(self, enable_remote_access):
        """Sets the enable_remote_access of this UserPolicy.


        :param enable_remote_access: The enable_remote_access of this UserPolicy.
        :type enable_remote_access: bool
        """

        self._enable_remote_access = enable_remote_access

    @property
    def enable_remote_control_of_other_users(self):
        """Gets the enable_remote_control_of_other_users of this UserPolicy.


        :return: The enable_remote_control_of_other_users of this UserPolicy.
        :rtype: bool
        """
        return self._enable_remote_control_of_other_users

    @enable_remote_control_of_other_users.setter
    def enable_remote_control_of_other_users(self, enable_remote_control_of_other_users):
        """Sets the enable_remote_control_of_other_users of this UserPolicy.


        :param enable_remote_control_of_other_users: The enable_remote_control_of_other_users of this UserPolicy.
        :type enable_remote_control_of_other_users: bool
        """

        self._enable_remote_control_of_other_users = enable_remote_control_of_other_users

    @property
    def enable_shared_device_control(self):
        """Gets the enable_shared_device_control of this UserPolicy.


        :return: The enable_shared_device_control of this UserPolicy.
        :rtype: bool
        """
        return self._enable_shared_device_control

    @enable_shared_device_control.setter
    def enable_shared_device_control(self, enable_shared_device_control):
        """Sets the enable_shared_device_control of this UserPolicy.


        :param enable_shared_device_control: The enable_shared_device_control of this UserPolicy.
        :type enable_shared_device_control: bool
        """

        self._enable_shared_device_control = enable_shared_device_control

    @property
    def enable_sync_transcoding(self):
        """Gets the enable_sync_transcoding of this UserPolicy.

        Gets or sets a value indicating whether [enable synchronize].

        :return: The enable_sync_transcoding of this UserPolicy.
        :rtype: bool
        """
        return self._enable_sync_transcoding

    @enable_sync_transcoding.setter
    def enable_sync_transcoding(self, enable_sync_transcoding):
        """Sets the enable_sync_transcoding of this UserPolicy.

        Gets or sets a value indicating whether [enable synchronize].

        :param enable_sync_transcoding: The enable_sync_transcoding of this UserPolicy.
        :type enable_sync_transcoding: bool
        """

        self._enable_sync_transcoding = enable_sync_transcoding

    @property
    def enable_user_preference_access(self):
        """Gets the enable_user_preference_access of this UserPolicy.


        :return: The enable_user_preference_access of this UserPolicy.
        :rtype: bool
        """
        return self._enable_user_preference_access

    @enable_user_preference_access.setter
    def enable_user_preference_access(self, enable_user_preference_access):
        """Sets the enable_user_preference_access of this UserPolicy.


        :param enable_user_preference_access: The enable_user_preference_access of this UserPolicy.
        :type enable_user_preference_access: bool
        """

        self._enable_user_preference_access = enable_user_preference_access

    @property
    def enable_video_playback_transcoding(self):
        """Gets the enable_video_playback_transcoding of this UserPolicy.


        :return: The enable_video_playback_transcoding of this UserPolicy.
        :rtype: bool
        """
        return self._enable_video_playback_transcoding

    @enable_video_playback_transcoding.setter
    def enable_video_playback_transcoding(self, enable_video_playback_transcoding):
        """Sets the enable_video_playback_transcoding of this UserPolicy.


        :param enable_video_playback_transcoding: The enable_video_playback_transcoding of this UserPolicy.
        :type enable_video_playback_transcoding: bool
        """

        self._enable_video_playback_transcoding = enable_video_playback_transcoding

    @property
    def enabled_channels(self):
        """Gets the enabled_channels of this UserPolicy.


        :return: The enabled_channels of this UserPolicy.
        :rtype: List[str]
        """
        return self._enabled_channels

    @enabled_channels.setter
    def enabled_channels(self, enabled_channels):
        """Sets the enabled_channels of this UserPolicy.


        :param enabled_channels: The enabled_channels of this UserPolicy.
        :type enabled_channels: List[str]
        """

        self._enabled_channels = enabled_channels

    @property
    def enabled_devices(self):
        """Gets the enabled_devices of this UserPolicy.


        :return: The enabled_devices of this UserPolicy.
        :rtype: List[str]
        """
        return self._enabled_devices

    @enabled_devices.setter
    def enabled_devices(self, enabled_devices):
        """Sets the enabled_devices of this UserPolicy.


        :param enabled_devices: The enabled_devices of this UserPolicy.
        :type enabled_devices: List[str]
        """

        self._enabled_devices = enabled_devices

    @property
    def enabled_folders(self):
        """Gets the enabled_folders of this UserPolicy.


        :return: The enabled_folders of this UserPolicy.
        :rtype: List[str]
        """
        return self._enabled_folders

    @enabled_folders.setter
    def enabled_folders(self, enabled_folders):
        """Sets the enabled_folders of this UserPolicy.


        :param enabled_folders: The enabled_folders of this UserPolicy.
        :type enabled_folders: List[str]
        """

        self._enabled_folders = enabled_folders

    @property
    def force_remote_source_transcoding(self):
        """Gets the force_remote_source_transcoding of this UserPolicy.


        :return: The force_remote_source_transcoding of this UserPolicy.
        :rtype: bool
        """
        return self._force_remote_source_transcoding

    @force_remote_source_transcoding.setter
    def force_remote_source_transcoding(self, force_remote_source_transcoding):
        """Sets the force_remote_source_transcoding of this UserPolicy.


        :param force_remote_source_transcoding: The force_remote_source_transcoding of this UserPolicy.
        :type force_remote_source_transcoding: bool
        """

        self._force_remote_source_transcoding = force_remote_source_transcoding

    @property
    def invalid_login_attempt_count(self):
        """Gets the invalid_login_attempt_count of this UserPolicy.


        :return: The invalid_login_attempt_count of this UserPolicy.
        :rtype: int
        """
        return self._invalid_login_attempt_count

    @invalid_login_attempt_count.setter
    def invalid_login_attempt_count(self, invalid_login_attempt_count):
        """Sets the invalid_login_attempt_count of this UserPolicy.


        :param invalid_login_attempt_count: The invalid_login_attempt_count of this UserPolicy.
        :type invalid_login_attempt_count: int
        """

        self._invalid_login_attempt_count = invalid_login_attempt_count

    @property
    def is_administrator(self):
        """Gets the is_administrator of this UserPolicy.

        Gets or sets a value indicating whether this instance is administrator.

        :return: The is_administrator of this UserPolicy.
        :rtype: bool
        """
        return self._is_administrator

    @is_administrator.setter
    def is_administrator(self, is_administrator):
        """Sets the is_administrator of this UserPolicy.

        Gets or sets a value indicating whether this instance is administrator.

        :param is_administrator: The is_administrator of this UserPolicy.
        :type is_administrator: bool
        """

        self._is_administrator = is_administrator

    @property
    def is_disabled(self):
        """Gets the is_disabled of this UserPolicy.

        Gets or sets a value indicating whether this instance is disabled.

        :return: The is_disabled of this UserPolicy.
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this UserPolicy.

        Gets or sets a value indicating whether this instance is disabled.

        :param is_disabled: The is_disabled of this UserPolicy.
        :type is_disabled: bool
        """

        self._is_disabled = is_disabled

    @property
    def is_hidden(self):
        """Gets the is_hidden of this UserPolicy.

        Gets or sets a value indicating whether this instance is hidden.

        :return: The is_hidden of this UserPolicy.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this UserPolicy.

        Gets or sets a value indicating whether this instance is hidden.

        :param is_hidden: The is_hidden of this UserPolicy.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def login_attempts_before_lockout(self):
        """Gets the login_attempts_before_lockout of this UserPolicy.


        :return: The login_attempts_before_lockout of this UserPolicy.
        :rtype: int
        """
        return self._login_attempts_before_lockout

    @login_attempts_before_lockout.setter
    def login_attempts_before_lockout(self, login_attempts_before_lockout):
        """Sets the login_attempts_before_lockout of this UserPolicy.


        :param login_attempts_before_lockout: The login_attempts_before_lockout of this UserPolicy.
        :type login_attempts_before_lockout: int
        """

        self._login_attempts_before_lockout = login_attempts_before_lockout

    @property
    def max_active_sessions(self):
        """Gets the max_active_sessions of this UserPolicy.


        :return: The max_active_sessions of this UserPolicy.
        :rtype: int
        """
        return self._max_active_sessions

    @max_active_sessions.setter
    def max_active_sessions(self, max_active_sessions):
        """Sets the max_active_sessions of this UserPolicy.


        :param max_active_sessions: The max_active_sessions of this UserPolicy.
        :type max_active_sessions: int
        """

        self._max_active_sessions = max_active_sessions

    @property
    def max_parental_rating(self):
        """Gets the max_parental_rating of this UserPolicy.

        Gets or sets the max parental rating.

        :return: The max_parental_rating of this UserPolicy.
        :rtype: int
        """
        return self._max_parental_rating

    @max_parental_rating.setter
    def max_parental_rating(self, max_parental_rating):
        """Sets the max_parental_rating of this UserPolicy.

        Gets or sets the max parental rating.

        :param max_parental_rating: The max_parental_rating of this UserPolicy.
        :type max_parental_rating: int
        """

        self._max_parental_rating = max_parental_rating

    @property
    def password_reset_provider_id(self):
        """Gets the password_reset_provider_id of this UserPolicy.


        :return: The password_reset_provider_id of this UserPolicy.
        :rtype: str
        """
        return self._password_reset_provider_id

    @password_reset_provider_id.setter
    def password_reset_provider_id(self, password_reset_provider_id):
        """Sets the password_reset_provider_id of this UserPolicy.


        :param password_reset_provider_id: The password_reset_provider_id of this UserPolicy.
        :type password_reset_provider_id: str
        """

        self._password_reset_provider_id = password_reset_provider_id

    @property
    def remote_client_bitrate_limit(self):
        """Gets the remote_client_bitrate_limit of this UserPolicy.


        :return: The remote_client_bitrate_limit of this UserPolicy.
        :rtype: int
        """
        return self._remote_client_bitrate_limit

    @remote_client_bitrate_limit.setter
    def remote_client_bitrate_limit(self, remote_client_bitrate_limit):
        """Sets the remote_client_bitrate_limit of this UserPolicy.


        :param remote_client_bitrate_limit: The remote_client_bitrate_limit of this UserPolicy.
        :type remote_client_bitrate_limit: int
        """

        self._remote_client_bitrate_limit = remote_client_bitrate_limit

    @property
    def sync_play_access(self):
        """Gets the sync_play_access of this UserPolicy.


        :return: The sync_play_access of this UserPolicy.
        :rtype: SyncPlayUserAccessType
        """
        return self._sync_play_access

    @sync_play_access.setter
    def sync_play_access(self, sync_play_access):
        """Sets the sync_play_access of this UserPolicy.


        :param sync_play_access: The sync_play_access of this UserPolicy.
        :type sync_play_access: SyncPlayUserAccessType
        """

        self._sync_play_access = sync_play_access
