# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_level import LogLevel
from openapi_server import util


class ActivityLogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, id: int=None, item_id: str=None, name: str=None, overview: str=None, severity: LogLevel=None, short_overview: str=None, type: str=None, user_id: str=None, user_primary_image_tag: str=None):
        """ActivityLogEntry - a model defined in OpenAPI

        :param _date: The _date of this ActivityLogEntry.
        :param id: The id of this ActivityLogEntry.
        :param item_id: The item_id of this ActivityLogEntry.
        :param name: The name of this ActivityLogEntry.
        :param overview: The overview of this ActivityLogEntry.
        :param severity: The severity of this ActivityLogEntry.
        :param short_overview: The short_overview of this ActivityLogEntry.
        :param type: The type of this ActivityLogEntry.
        :param user_id: The user_id of this ActivityLogEntry.
        :param user_primary_image_tag: The user_primary_image_tag of this ActivityLogEntry.
        """
        self.openapi_types = {
            '_date': datetime,
            'id': int,
            'item_id': str,
            'name': str,
            'overview': str,
            'severity': LogLevel,
            'short_overview': str,
            'type': str,
            'user_id': str,
            'user_primary_image_tag': str
        }

        self.attribute_map = {
            '_date': 'Date',
            'id': 'Id',
            'item_id': 'ItemId',
            'name': 'Name',
            'overview': 'Overview',
            'severity': 'Severity',
            'short_overview': 'ShortOverview',
            'type': 'Type',
            'user_id': 'UserId',
            'user_primary_image_tag': 'UserPrimaryImageTag'
        }

        self.__date = _date
        self._id = id
        self._item_id = item_id
        self._name = name
        self._overview = overview
        self._severity = severity
        self._short_overview = short_overview
        self._type = type
        self._user_id = user_id
        self._user_primary_image_tag = user_primary_image_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityLogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityLogEntry of this ActivityLogEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this ActivityLogEntry.

        Gets or sets the date.

        :return: The _date of this ActivityLogEntry.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ActivityLogEntry.

        Gets or sets the date.

        :param _date: The _date of this ActivityLogEntry.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this ActivityLogEntry.

        Gets or sets the identifier.

        :return: The id of this ActivityLogEntry.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityLogEntry.

        Gets or sets the identifier.

        :param id: The id of this ActivityLogEntry.
        :type id: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this ActivityLogEntry.

        Gets or sets the item identifier.

        :return: The item_id of this ActivityLogEntry.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ActivityLogEntry.

        Gets or sets the item identifier.

        :param item_id: The item_id of this ActivityLogEntry.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this ActivityLogEntry.

        Gets or sets the name.

        :return: The name of this ActivityLogEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityLogEntry.

        Gets or sets the name.

        :param name: The name of this ActivityLogEntry.
        :type name: str
        """

        self._name = name

    @property
    def overview(self):
        """Gets the overview of this ActivityLogEntry.

        Gets or sets the overview.

        :return: The overview of this ActivityLogEntry.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this ActivityLogEntry.

        Gets or sets the overview.

        :param overview: The overview of this ActivityLogEntry.
        :type overview: str
        """

        self._overview = overview

    @property
    def severity(self):
        """Gets the severity of this ActivityLogEntry.


        :return: The severity of this ActivityLogEntry.
        :rtype: LogLevel
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ActivityLogEntry.


        :param severity: The severity of this ActivityLogEntry.
        :type severity: LogLevel
        """

        self._severity = severity

    @property
    def short_overview(self):
        """Gets the short_overview of this ActivityLogEntry.

        Gets or sets the short overview.

        :return: The short_overview of this ActivityLogEntry.
        :rtype: str
        """
        return self._short_overview

    @short_overview.setter
    def short_overview(self, short_overview):
        """Sets the short_overview of this ActivityLogEntry.

        Gets or sets the short overview.

        :param short_overview: The short_overview of this ActivityLogEntry.
        :type short_overview: str
        """

        self._short_overview = short_overview

    @property
    def type(self):
        """Gets the type of this ActivityLogEntry.

        Gets or sets the type.

        :return: The type of this ActivityLogEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityLogEntry.

        Gets or sets the type.

        :param type: The type of this ActivityLogEntry.
        :type type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this ActivityLogEntry.

        Gets or sets the user identifier.

        :return: The user_id of this ActivityLogEntry.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ActivityLogEntry.

        Gets or sets the user identifier.

        :param user_id: The user_id of this ActivityLogEntry.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_primary_image_tag(self):
        """Gets the user_primary_image_tag of this ActivityLogEntry.

        Gets or sets the user primary image tag.

        :return: The user_primary_image_tag of this ActivityLogEntry.
        :rtype: str
        """
        return self._user_primary_image_tag

    @user_primary_image_tag.setter
    def user_primary_image_tag(self, user_primary_image_tag):
        """Sets the user_primary_image_tag of this ActivityLogEntry.

        Gets or sets the user primary image tag.

        :param user_primary_image_tag: The user_primary_image_tag of this ActivityLogEntry.
        :type user_primary_image_tag: str
        """

        self._user_primary_image_tag = user_primary_image_tag
