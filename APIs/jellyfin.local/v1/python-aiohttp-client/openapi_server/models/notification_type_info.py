# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationTypeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, enabled: bool=None, is_based_on_user_event: bool=None, name: str=None, type: str=None):
        """NotificationTypeInfo - a model defined in OpenAPI

        :param category: The category of this NotificationTypeInfo.
        :param enabled: The enabled of this NotificationTypeInfo.
        :param is_based_on_user_event: The is_based_on_user_event of this NotificationTypeInfo.
        :param name: The name of this NotificationTypeInfo.
        :param type: The type of this NotificationTypeInfo.
        """
        self.openapi_types = {
            'category': str,
            'enabled': bool,
            'is_based_on_user_event': bool,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'category': 'Category',
            'enabled': 'Enabled',
            'is_based_on_user_event': 'IsBasedOnUserEvent',
            'name': 'Name',
            'type': 'Type'
        }

        self._category = category
        self._enabled = enabled
        self._is_based_on_user_event = is_based_on_user_event
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationTypeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationTypeInfo of this NotificationTypeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this NotificationTypeInfo.


        :return: The category of this NotificationTypeInfo.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NotificationTypeInfo.


        :param category: The category of this NotificationTypeInfo.
        :type category: str
        """

        self._category = category

    @property
    def enabled(self):
        """Gets the enabled of this NotificationTypeInfo.


        :return: The enabled of this NotificationTypeInfo.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NotificationTypeInfo.


        :param enabled: The enabled of this NotificationTypeInfo.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def is_based_on_user_event(self):
        """Gets the is_based_on_user_event of this NotificationTypeInfo.


        :return: The is_based_on_user_event of this NotificationTypeInfo.
        :rtype: bool
        """
        return self._is_based_on_user_event

    @is_based_on_user_event.setter
    def is_based_on_user_event(self, is_based_on_user_event):
        """Sets the is_based_on_user_event of this NotificationTypeInfo.


        :param is_based_on_user_event: The is_based_on_user_event of this NotificationTypeInfo.
        :type is_based_on_user_event: bool
        """

        self._is_based_on_user_event = is_based_on_user_event

    @property
    def name(self):
        """Gets the name of this NotificationTypeInfo.


        :return: The name of this NotificationTypeInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationTypeInfo.


        :param name: The name of this NotificationTypeInfo.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this NotificationTypeInfo.


        :return: The type of this NotificationTypeInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationTypeInfo.


        :param type: The type of this NotificationTypeInfo.
        :type type: str
        """

        self._type = type
