# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_path_info import MediaPathInfo
from openapi_server.models.type_options import TypeOptions
from openapi_server import util


class LibraryOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_refresh_interval_days: int=None, disabled_local_metadata_readers: List[str]=None, disabled_subtitle_fetchers: List[str]=None, enable_automatic_series_grouping: bool=None, enable_chapter_image_extraction: bool=None, enable_embedded_episode_infos: bool=None, enable_embedded_titles: bool=None, enable_internet_providers: bool=None, enable_photos: bool=None, enable_realtime_monitor: bool=None, extract_chapter_images_during_library_scan: bool=None, local_metadata_reader_order: List[str]=None, metadata_country_code: str=None, metadata_savers: List[str]=None, path_infos: List[MediaPathInfo]=None, preferred_metadata_language: str=None, require_perfect_subtitle_match: bool=None, save_local_metadata: bool=None, save_subtitles_with_media: bool=None, season_zero_display_name: str=None, skip_subtitles_if_audio_track_matches: bool=None, skip_subtitles_if_embedded_subtitles_present: bool=None, subtitle_download_languages: List[str]=None, subtitle_fetcher_order: List[str]=None, type_options: List[TypeOptions]=None):
        """LibraryOptions - a model defined in OpenAPI

        :param automatic_refresh_interval_days: The automatic_refresh_interval_days of this LibraryOptions.
        :param disabled_local_metadata_readers: The disabled_local_metadata_readers of this LibraryOptions.
        :param disabled_subtitle_fetchers: The disabled_subtitle_fetchers of this LibraryOptions.
        :param enable_automatic_series_grouping: The enable_automatic_series_grouping of this LibraryOptions.
        :param enable_chapter_image_extraction: The enable_chapter_image_extraction of this LibraryOptions.
        :param enable_embedded_episode_infos: The enable_embedded_episode_infos of this LibraryOptions.
        :param enable_embedded_titles: The enable_embedded_titles of this LibraryOptions.
        :param enable_internet_providers: The enable_internet_providers of this LibraryOptions.
        :param enable_photos: The enable_photos of this LibraryOptions.
        :param enable_realtime_monitor: The enable_realtime_monitor of this LibraryOptions.
        :param extract_chapter_images_during_library_scan: The extract_chapter_images_during_library_scan of this LibraryOptions.
        :param local_metadata_reader_order: The local_metadata_reader_order of this LibraryOptions.
        :param metadata_country_code: The metadata_country_code of this LibraryOptions.
        :param metadata_savers: The metadata_savers of this LibraryOptions.
        :param path_infos: The path_infos of this LibraryOptions.
        :param preferred_metadata_language: The preferred_metadata_language of this LibraryOptions.
        :param require_perfect_subtitle_match: The require_perfect_subtitle_match of this LibraryOptions.
        :param save_local_metadata: The save_local_metadata of this LibraryOptions.
        :param save_subtitles_with_media: The save_subtitles_with_media of this LibraryOptions.
        :param season_zero_display_name: The season_zero_display_name of this LibraryOptions.
        :param skip_subtitles_if_audio_track_matches: The skip_subtitles_if_audio_track_matches of this LibraryOptions.
        :param skip_subtitles_if_embedded_subtitles_present: The skip_subtitles_if_embedded_subtitles_present of this LibraryOptions.
        :param subtitle_download_languages: The subtitle_download_languages of this LibraryOptions.
        :param subtitle_fetcher_order: The subtitle_fetcher_order of this LibraryOptions.
        :param type_options: The type_options of this LibraryOptions.
        """
        self.openapi_types = {
            'automatic_refresh_interval_days': int,
            'disabled_local_metadata_readers': List[str],
            'disabled_subtitle_fetchers': List[str],
            'enable_automatic_series_grouping': bool,
            'enable_chapter_image_extraction': bool,
            'enable_embedded_episode_infos': bool,
            'enable_embedded_titles': bool,
            'enable_internet_providers': bool,
            'enable_photos': bool,
            'enable_realtime_monitor': bool,
            'extract_chapter_images_during_library_scan': bool,
            'local_metadata_reader_order': List[str],
            'metadata_country_code': str,
            'metadata_savers': List[str],
            'path_infos': List[MediaPathInfo],
            'preferred_metadata_language': str,
            'require_perfect_subtitle_match': bool,
            'save_local_metadata': bool,
            'save_subtitles_with_media': bool,
            'season_zero_display_name': str,
            'skip_subtitles_if_audio_track_matches': bool,
            'skip_subtitles_if_embedded_subtitles_present': bool,
            'subtitle_download_languages': List[str],
            'subtitle_fetcher_order': List[str],
            'type_options': List[TypeOptions]
        }

        self.attribute_map = {
            'automatic_refresh_interval_days': 'AutomaticRefreshIntervalDays',
            'disabled_local_metadata_readers': 'DisabledLocalMetadataReaders',
            'disabled_subtitle_fetchers': 'DisabledSubtitleFetchers',
            'enable_automatic_series_grouping': 'EnableAutomaticSeriesGrouping',
            'enable_chapter_image_extraction': 'EnableChapterImageExtraction',
            'enable_embedded_episode_infos': 'EnableEmbeddedEpisodeInfos',
            'enable_embedded_titles': 'EnableEmbeddedTitles',
            'enable_internet_providers': 'EnableInternetProviders',
            'enable_photos': 'EnablePhotos',
            'enable_realtime_monitor': 'EnableRealtimeMonitor',
            'extract_chapter_images_during_library_scan': 'ExtractChapterImagesDuringLibraryScan',
            'local_metadata_reader_order': 'LocalMetadataReaderOrder',
            'metadata_country_code': 'MetadataCountryCode',
            'metadata_savers': 'MetadataSavers',
            'path_infos': 'PathInfos',
            'preferred_metadata_language': 'PreferredMetadataLanguage',
            'require_perfect_subtitle_match': 'RequirePerfectSubtitleMatch',
            'save_local_metadata': 'SaveLocalMetadata',
            'save_subtitles_with_media': 'SaveSubtitlesWithMedia',
            'season_zero_display_name': 'SeasonZeroDisplayName',
            'skip_subtitles_if_audio_track_matches': 'SkipSubtitlesIfAudioTrackMatches',
            'skip_subtitles_if_embedded_subtitles_present': 'SkipSubtitlesIfEmbeddedSubtitlesPresent',
            'subtitle_download_languages': 'SubtitleDownloadLanguages',
            'subtitle_fetcher_order': 'SubtitleFetcherOrder',
            'type_options': 'TypeOptions'
        }

        self._automatic_refresh_interval_days = automatic_refresh_interval_days
        self._disabled_local_metadata_readers = disabled_local_metadata_readers
        self._disabled_subtitle_fetchers = disabled_subtitle_fetchers
        self._enable_automatic_series_grouping = enable_automatic_series_grouping
        self._enable_chapter_image_extraction = enable_chapter_image_extraction
        self._enable_embedded_episode_infos = enable_embedded_episode_infos
        self._enable_embedded_titles = enable_embedded_titles
        self._enable_internet_providers = enable_internet_providers
        self._enable_photos = enable_photos
        self._enable_realtime_monitor = enable_realtime_monitor
        self._extract_chapter_images_during_library_scan = extract_chapter_images_during_library_scan
        self._local_metadata_reader_order = local_metadata_reader_order
        self._metadata_country_code = metadata_country_code
        self._metadata_savers = metadata_savers
        self._path_infos = path_infos
        self._preferred_metadata_language = preferred_metadata_language
        self._require_perfect_subtitle_match = require_perfect_subtitle_match
        self._save_local_metadata = save_local_metadata
        self._save_subtitles_with_media = save_subtitles_with_media
        self._season_zero_display_name = season_zero_display_name
        self._skip_subtitles_if_audio_track_matches = skip_subtitles_if_audio_track_matches
        self._skip_subtitles_if_embedded_subtitles_present = skip_subtitles_if_embedded_subtitles_present
        self._subtitle_download_languages = subtitle_download_languages
        self._subtitle_fetcher_order = subtitle_fetcher_order
        self._type_options = type_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LibraryOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LibraryOptions of this LibraryOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_refresh_interval_days(self):
        """Gets the automatic_refresh_interval_days of this LibraryOptions.


        :return: The automatic_refresh_interval_days of this LibraryOptions.
        :rtype: int
        """
        return self._automatic_refresh_interval_days

    @automatic_refresh_interval_days.setter
    def automatic_refresh_interval_days(self, automatic_refresh_interval_days):
        """Sets the automatic_refresh_interval_days of this LibraryOptions.


        :param automatic_refresh_interval_days: The automatic_refresh_interval_days of this LibraryOptions.
        :type automatic_refresh_interval_days: int
        """

        self._automatic_refresh_interval_days = automatic_refresh_interval_days

    @property
    def disabled_local_metadata_readers(self):
        """Gets the disabled_local_metadata_readers of this LibraryOptions.


        :return: The disabled_local_metadata_readers of this LibraryOptions.
        :rtype: List[str]
        """
        return self._disabled_local_metadata_readers

    @disabled_local_metadata_readers.setter
    def disabled_local_metadata_readers(self, disabled_local_metadata_readers):
        """Sets the disabled_local_metadata_readers of this LibraryOptions.


        :param disabled_local_metadata_readers: The disabled_local_metadata_readers of this LibraryOptions.
        :type disabled_local_metadata_readers: List[str]
        """

        self._disabled_local_metadata_readers = disabled_local_metadata_readers

    @property
    def disabled_subtitle_fetchers(self):
        """Gets the disabled_subtitle_fetchers of this LibraryOptions.


        :return: The disabled_subtitle_fetchers of this LibraryOptions.
        :rtype: List[str]
        """
        return self._disabled_subtitle_fetchers

    @disabled_subtitle_fetchers.setter
    def disabled_subtitle_fetchers(self, disabled_subtitle_fetchers):
        """Sets the disabled_subtitle_fetchers of this LibraryOptions.


        :param disabled_subtitle_fetchers: The disabled_subtitle_fetchers of this LibraryOptions.
        :type disabled_subtitle_fetchers: List[str]
        """

        self._disabled_subtitle_fetchers = disabled_subtitle_fetchers

    @property
    def enable_automatic_series_grouping(self):
        """Gets the enable_automatic_series_grouping of this LibraryOptions.


        :return: The enable_automatic_series_grouping of this LibraryOptions.
        :rtype: bool
        """
        return self._enable_automatic_series_grouping

    @enable_automatic_series_grouping.setter
    def enable_automatic_series_grouping(self, enable_automatic_series_grouping):
        """Sets the enable_automatic_series_grouping of this LibraryOptions.


        :param enable_automatic_series_grouping: The enable_automatic_series_grouping of this LibraryOptions.
        :type enable_automatic_series_grouping: bool
        """

        self._enable_automatic_series_grouping = enable_automatic_series_grouping

    @property
    def enable_chapter_image_extraction(self):
        """Gets the enable_chapter_image_extraction of this LibraryOptions.


        :return: The enable_chapter_image_extraction of this LibraryOptions.
        :rtype: bool
        """
        return self._enable_chapter_image_extraction

    @enable_chapter_image_extraction.setter
    def enable_chapter_image_extraction(self, enable_chapter_image_extraction):
        """Sets the enable_chapter_image_extraction of this LibraryOptions.


        :param enable_chapter_image_extraction: The enable_chapter_image_extraction of this LibraryOptions.
        :type enable_chapter_image_extraction: bool
        """

        self._enable_chapter_image_extraction = enable_chapter_image_extraction

    @property
    def enable_embedded_episode_infos(self):
        """Gets the enable_embedded_episode_infos of this LibraryOptions.


        :return: The enable_embedded_episode_infos of this LibraryOptions.
        :rtype: bool
        """
        return self._enable_embedded_episode_infos

    @enable_embedded_episode_infos.setter
    def enable_embedded_episode_infos(self, enable_embedded_episode_infos):
        """Sets the enable_embedded_episode_infos of this LibraryOptions.


        :param enable_embedded_episode_infos: The enable_embedded_episode_infos of this LibraryOptions.
        :type enable_embedded_episode_infos: bool
        """

        self._enable_embedded_episode_infos = enable_embedded_episode_infos

    @property
    def enable_embedded_titles(self):
        """Gets the enable_embedded_titles of this LibraryOptions.


        :return: The enable_embedded_titles of this LibraryOptions.
        :rtype: bool
        """
        return self._enable_embedded_titles

    @enable_embedded_titles.setter
    def enable_embedded_titles(self, enable_embedded_titles):
        """Sets the enable_embedded_titles of this LibraryOptions.


        :param enable_embedded_titles: The enable_embedded_titles of this LibraryOptions.
        :type enable_embedded_titles: bool
        """

        self._enable_embedded_titles = enable_embedded_titles

    @property
    def enable_internet_providers(self):
        """Gets the enable_internet_providers of this LibraryOptions.


        :return: The enable_internet_providers of this LibraryOptions.
        :rtype: bool
        """
        return self._enable_internet_providers

    @enable_internet_providers.setter
    def enable_internet_providers(self, enable_internet_providers):
        """Sets the enable_internet_providers of this LibraryOptions.


        :param enable_internet_providers: The enable_internet_providers of this LibraryOptions.
        :type enable_internet_providers: bool
        """

        self._enable_internet_providers = enable_internet_providers

    @property
    def enable_photos(self):
        """Gets the enable_photos of this LibraryOptions.


        :return: The enable_photos of this LibraryOptions.
        :rtype: bool
        """
        return self._enable_photos

    @enable_photos.setter
    def enable_photos(self, enable_photos):
        """Sets the enable_photos of this LibraryOptions.


        :param enable_photos: The enable_photos of this LibraryOptions.
        :type enable_photos: bool
        """

        self._enable_photos = enable_photos

    @property
    def enable_realtime_monitor(self):
        """Gets the enable_realtime_monitor of this LibraryOptions.


        :return: The enable_realtime_monitor of this LibraryOptions.
        :rtype: bool
        """
        return self._enable_realtime_monitor

    @enable_realtime_monitor.setter
    def enable_realtime_monitor(self, enable_realtime_monitor):
        """Sets the enable_realtime_monitor of this LibraryOptions.


        :param enable_realtime_monitor: The enable_realtime_monitor of this LibraryOptions.
        :type enable_realtime_monitor: bool
        """

        self._enable_realtime_monitor = enable_realtime_monitor

    @property
    def extract_chapter_images_during_library_scan(self):
        """Gets the extract_chapter_images_during_library_scan of this LibraryOptions.


        :return: The extract_chapter_images_during_library_scan of this LibraryOptions.
        :rtype: bool
        """
        return self._extract_chapter_images_during_library_scan

    @extract_chapter_images_during_library_scan.setter
    def extract_chapter_images_during_library_scan(self, extract_chapter_images_during_library_scan):
        """Sets the extract_chapter_images_during_library_scan of this LibraryOptions.


        :param extract_chapter_images_during_library_scan: The extract_chapter_images_during_library_scan of this LibraryOptions.
        :type extract_chapter_images_during_library_scan: bool
        """

        self._extract_chapter_images_during_library_scan = extract_chapter_images_during_library_scan

    @property
    def local_metadata_reader_order(self):
        """Gets the local_metadata_reader_order of this LibraryOptions.


        :return: The local_metadata_reader_order of this LibraryOptions.
        :rtype: List[str]
        """
        return self._local_metadata_reader_order

    @local_metadata_reader_order.setter
    def local_metadata_reader_order(self, local_metadata_reader_order):
        """Sets the local_metadata_reader_order of this LibraryOptions.


        :param local_metadata_reader_order: The local_metadata_reader_order of this LibraryOptions.
        :type local_metadata_reader_order: List[str]
        """

        self._local_metadata_reader_order = local_metadata_reader_order

    @property
    def metadata_country_code(self):
        """Gets the metadata_country_code of this LibraryOptions.

        Gets or sets the metadata country code.

        :return: The metadata_country_code of this LibraryOptions.
        :rtype: str
        """
        return self._metadata_country_code

    @metadata_country_code.setter
    def metadata_country_code(self, metadata_country_code):
        """Sets the metadata_country_code of this LibraryOptions.

        Gets or sets the metadata country code.

        :param metadata_country_code: The metadata_country_code of this LibraryOptions.
        :type metadata_country_code: str
        """

        self._metadata_country_code = metadata_country_code

    @property
    def metadata_savers(self):
        """Gets the metadata_savers of this LibraryOptions.


        :return: The metadata_savers of this LibraryOptions.
        :rtype: List[str]
        """
        return self._metadata_savers

    @metadata_savers.setter
    def metadata_savers(self, metadata_savers):
        """Sets the metadata_savers of this LibraryOptions.


        :param metadata_savers: The metadata_savers of this LibraryOptions.
        :type metadata_savers: List[str]
        """

        self._metadata_savers = metadata_savers

    @property
    def path_infos(self):
        """Gets the path_infos of this LibraryOptions.


        :return: The path_infos of this LibraryOptions.
        :rtype: List[MediaPathInfo]
        """
        return self._path_infos

    @path_infos.setter
    def path_infos(self, path_infos):
        """Sets the path_infos of this LibraryOptions.


        :param path_infos: The path_infos of this LibraryOptions.
        :type path_infos: List[MediaPathInfo]
        """

        self._path_infos = path_infos

    @property
    def preferred_metadata_language(self):
        """Gets the preferred_metadata_language of this LibraryOptions.

        Gets or sets the preferred metadata language.

        :return: The preferred_metadata_language of this LibraryOptions.
        :rtype: str
        """
        return self._preferred_metadata_language

    @preferred_metadata_language.setter
    def preferred_metadata_language(self, preferred_metadata_language):
        """Sets the preferred_metadata_language of this LibraryOptions.

        Gets or sets the preferred metadata language.

        :param preferred_metadata_language: The preferred_metadata_language of this LibraryOptions.
        :type preferred_metadata_language: str
        """

        self._preferred_metadata_language = preferred_metadata_language

    @property
    def require_perfect_subtitle_match(self):
        """Gets the require_perfect_subtitle_match of this LibraryOptions.


        :return: The require_perfect_subtitle_match of this LibraryOptions.
        :rtype: bool
        """
        return self._require_perfect_subtitle_match

    @require_perfect_subtitle_match.setter
    def require_perfect_subtitle_match(self, require_perfect_subtitle_match):
        """Sets the require_perfect_subtitle_match of this LibraryOptions.


        :param require_perfect_subtitle_match: The require_perfect_subtitle_match of this LibraryOptions.
        :type require_perfect_subtitle_match: bool
        """

        self._require_perfect_subtitle_match = require_perfect_subtitle_match

    @property
    def save_local_metadata(self):
        """Gets the save_local_metadata of this LibraryOptions.


        :return: The save_local_metadata of this LibraryOptions.
        :rtype: bool
        """
        return self._save_local_metadata

    @save_local_metadata.setter
    def save_local_metadata(self, save_local_metadata):
        """Sets the save_local_metadata of this LibraryOptions.


        :param save_local_metadata: The save_local_metadata of this LibraryOptions.
        :type save_local_metadata: bool
        """

        self._save_local_metadata = save_local_metadata

    @property
    def save_subtitles_with_media(self):
        """Gets the save_subtitles_with_media of this LibraryOptions.


        :return: The save_subtitles_with_media of this LibraryOptions.
        :rtype: bool
        """
        return self._save_subtitles_with_media

    @save_subtitles_with_media.setter
    def save_subtitles_with_media(self, save_subtitles_with_media):
        """Sets the save_subtitles_with_media of this LibraryOptions.


        :param save_subtitles_with_media: The save_subtitles_with_media of this LibraryOptions.
        :type save_subtitles_with_media: bool
        """

        self._save_subtitles_with_media = save_subtitles_with_media

    @property
    def season_zero_display_name(self):
        """Gets the season_zero_display_name of this LibraryOptions.


        :return: The season_zero_display_name of this LibraryOptions.
        :rtype: str
        """
        return self._season_zero_display_name

    @season_zero_display_name.setter
    def season_zero_display_name(self, season_zero_display_name):
        """Sets the season_zero_display_name of this LibraryOptions.


        :param season_zero_display_name: The season_zero_display_name of this LibraryOptions.
        :type season_zero_display_name: str
        """

        self._season_zero_display_name = season_zero_display_name

    @property
    def skip_subtitles_if_audio_track_matches(self):
        """Gets the skip_subtitles_if_audio_track_matches of this LibraryOptions.


        :return: The skip_subtitles_if_audio_track_matches of this LibraryOptions.
        :rtype: bool
        """
        return self._skip_subtitles_if_audio_track_matches

    @skip_subtitles_if_audio_track_matches.setter
    def skip_subtitles_if_audio_track_matches(self, skip_subtitles_if_audio_track_matches):
        """Sets the skip_subtitles_if_audio_track_matches of this LibraryOptions.


        :param skip_subtitles_if_audio_track_matches: The skip_subtitles_if_audio_track_matches of this LibraryOptions.
        :type skip_subtitles_if_audio_track_matches: bool
        """

        self._skip_subtitles_if_audio_track_matches = skip_subtitles_if_audio_track_matches

    @property
    def skip_subtitles_if_embedded_subtitles_present(self):
        """Gets the skip_subtitles_if_embedded_subtitles_present of this LibraryOptions.


        :return: The skip_subtitles_if_embedded_subtitles_present of this LibraryOptions.
        :rtype: bool
        """
        return self._skip_subtitles_if_embedded_subtitles_present

    @skip_subtitles_if_embedded_subtitles_present.setter
    def skip_subtitles_if_embedded_subtitles_present(self, skip_subtitles_if_embedded_subtitles_present):
        """Sets the skip_subtitles_if_embedded_subtitles_present of this LibraryOptions.


        :param skip_subtitles_if_embedded_subtitles_present: The skip_subtitles_if_embedded_subtitles_present of this LibraryOptions.
        :type skip_subtitles_if_embedded_subtitles_present: bool
        """

        self._skip_subtitles_if_embedded_subtitles_present = skip_subtitles_if_embedded_subtitles_present

    @property
    def subtitle_download_languages(self):
        """Gets the subtitle_download_languages of this LibraryOptions.


        :return: The subtitle_download_languages of this LibraryOptions.
        :rtype: List[str]
        """
        return self._subtitle_download_languages

    @subtitle_download_languages.setter
    def subtitle_download_languages(self, subtitle_download_languages):
        """Sets the subtitle_download_languages of this LibraryOptions.


        :param subtitle_download_languages: The subtitle_download_languages of this LibraryOptions.
        :type subtitle_download_languages: List[str]
        """

        self._subtitle_download_languages = subtitle_download_languages

    @property
    def subtitle_fetcher_order(self):
        """Gets the subtitle_fetcher_order of this LibraryOptions.


        :return: The subtitle_fetcher_order of this LibraryOptions.
        :rtype: List[str]
        """
        return self._subtitle_fetcher_order

    @subtitle_fetcher_order.setter
    def subtitle_fetcher_order(self, subtitle_fetcher_order):
        """Sets the subtitle_fetcher_order of this LibraryOptions.


        :param subtitle_fetcher_order: The subtitle_fetcher_order of this LibraryOptions.
        :type subtitle_fetcher_order: List[str]
        """

        self._subtitle_fetcher_order = subtitle_fetcher_order

    @property
    def type_options(self):
        """Gets the type_options of this LibraryOptions.


        :return: The type_options of this LibraryOptions.
        :rtype: List[TypeOptions]
        """
        return self._type_options

    @type_options.setter
    def type_options(self, type_options):
        """Sets the type_options of this LibraryOptions.


        :param type_options: The type_options of this LibraryOptions.
        :type type_options: List[TypeOptions]
        """

        self._type_options = type_options
