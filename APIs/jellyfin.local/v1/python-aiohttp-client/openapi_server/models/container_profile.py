# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dlna_profile_type import DlnaProfileType
from openapi_server.models.profile_condition import ProfileCondition
from openapi_server import util


class ContainerProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: List[ProfileCondition]=None, container: str=None, type: DlnaProfileType=None):
        """ContainerProfile - a model defined in OpenAPI

        :param conditions: The conditions of this ContainerProfile.
        :param container: The container of this ContainerProfile.
        :param type: The type of this ContainerProfile.
        """
        self.openapi_types = {
            'conditions': List[ProfileCondition],
            'container': str,
            'type': DlnaProfileType
        }

        self.attribute_map = {
            'conditions': 'Conditions',
            'container': 'Container',
            'type': 'Type'
        }

        self._conditions = conditions
        self._container = container
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerProfile of this ContainerProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this ContainerProfile.


        :return: The conditions of this ContainerProfile.
        :rtype: List[ProfileCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ContainerProfile.


        :param conditions: The conditions of this ContainerProfile.
        :type conditions: List[ProfileCondition]
        """

        self._conditions = conditions

    @property
    def container(self):
        """Gets the container of this ContainerProfile.


        :return: The container of this ContainerProfile.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ContainerProfile.


        :param container: The container of this ContainerProfile.
        :type container: str
        """

        self._container = container

    @property
    def type(self):
        """Gets the type of this ContainerProfile.


        :return: The type of this ContainerProfile.
        :rtype: DlnaProfileType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContainerProfile.


        :param type: The type of this ContainerProfile.
        :type type: DlnaProfileType
        """

        self._type = type
