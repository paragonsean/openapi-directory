# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.codec_type import CodecType
from openapi_server.models.profile_condition import ProfileCondition
from openapi_server import util


class CodecProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_conditions: List[ProfileCondition]=None, codec: str=None, conditions: List[ProfileCondition]=None, container: str=None, type: CodecType=None):
        """CodecProfile - a model defined in OpenAPI

        :param apply_conditions: The apply_conditions of this CodecProfile.
        :param codec: The codec of this CodecProfile.
        :param conditions: The conditions of this CodecProfile.
        :param container: The container of this CodecProfile.
        :param type: The type of this CodecProfile.
        """
        self.openapi_types = {
            'apply_conditions': List[ProfileCondition],
            'codec': str,
            'conditions': List[ProfileCondition],
            'container': str,
            'type': CodecType
        }

        self.attribute_map = {
            'apply_conditions': 'ApplyConditions',
            'codec': 'Codec',
            'conditions': 'Conditions',
            'container': 'Container',
            'type': 'Type'
        }

        self._apply_conditions = apply_conditions
        self._codec = codec
        self._conditions = conditions
        self._container = container
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodecProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodecProfile of this CodecProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_conditions(self):
        """Gets the apply_conditions of this CodecProfile.


        :return: The apply_conditions of this CodecProfile.
        :rtype: List[ProfileCondition]
        """
        return self._apply_conditions

    @apply_conditions.setter
    def apply_conditions(self, apply_conditions):
        """Sets the apply_conditions of this CodecProfile.


        :param apply_conditions: The apply_conditions of this CodecProfile.
        :type apply_conditions: List[ProfileCondition]
        """

        self._apply_conditions = apply_conditions

    @property
    def codec(self):
        """Gets the codec of this CodecProfile.


        :return: The codec of this CodecProfile.
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this CodecProfile.


        :param codec: The codec of this CodecProfile.
        :type codec: str
        """

        self._codec = codec

    @property
    def conditions(self):
        """Gets the conditions of this CodecProfile.


        :return: The conditions of this CodecProfile.
        :rtype: List[ProfileCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this CodecProfile.


        :param conditions: The conditions of this CodecProfile.
        :type conditions: List[ProfileCondition]
        """

        self._conditions = conditions

    @property
    def container(self):
        """Gets the container of this CodecProfile.


        :return: The container of this CodecProfile.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this CodecProfile.


        :param container: The container of this CodecProfile.
        :type container: str
        """

        self._container = container

    @property
    def type(self):
        """Gets the type of this CodecProfile.


        :return: The type of this CodecProfile.
        :rtype: CodecType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodecProfile.


        :param type: The type of this CodecProfile.
        :type type: CodecType
        """

        self._type = type
