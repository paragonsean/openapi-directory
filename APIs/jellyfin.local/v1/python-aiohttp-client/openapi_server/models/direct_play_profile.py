# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dlna_profile_type import DlnaProfileType
from openapi_server import util


class DirectPlayProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_codec: str=None, container: str=None, type: DlnaProfileType=None, video_codec: str=None):
        """DirectPlayProfile - a model defined in OpenAPI

        :param audio_codec: The audio_codec of this DirectPlayProfile.
        :param container: The container of this DirectPlayProfile.
        :param type: The type of this DirectPlayProfile.
        :param video_codec: The video_codec of this DirectPlayProfile.
        """
        self.openapi_types = {
            'audio_codec': str,
            'container': str,
            'type': DlnaProfileType,
            'video_codec': str
        }

        self.attribute_map = {
            'audio_codec': 'AudioCodec',
            'container': 'Container',
            'type': 'Type',
            'video_codec': 'VideoCodec'
        }

        self._audio_codec = audio_codec
        self._container = container
        self._type = type
        self._video_codec = video_codec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectPlayProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DirectPlayProfile of this DirectPlayProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_codec(self):
        """Gets the audio_codec of this DirectPlayProfile.


        :return: The audio_codec of this DirectPlayProfile.
        :rtype: str
        """
        return self._audio_codec

    @audio_codec.setter
    def audio_codec(self, audio_codec):
        """Sets the audio_codec of this DirectPlayProfile.


        :param audio_codec: The audio_codec of this DirectPlayProfile.
        :type audio_codec: str
        """

        self._audio_codec = audio_codec

    @property
    def container(self):
        """Gets the container of this DirectPlayProfile.


        :return: The container of this DirectPlayProfile.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this DirectPlayProfile.


        :param container: The container of this DirectPlayProfile.
        :type container: str
        """

        self._container = container

    @property
    def type(self):
        """Gets the type of this DirectPlayProfile.


        :return: The type of this DirectPlayProfile.
        :rtype: DlnaProfileType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DirectPlayProfile.


        :param type: The type of this DirectPlayProfile.
        :type type: DlnaProfileType
        """

        self._type = type

    @property
    def video_codec(self):
        """Gets the video_codec of this DirectPlayProfile.


        :return: The video_codec of this DirectPlayProfile.
        :rtype: str
        """
        return self._video_codec

    @video_codec.setter
    def video_codec(self, video_codec):
        """Sets the video_codec of this DirectPlayProfile.


        :param video_codec: The video_codec of this DirectPlayProfile.
        :type video_codec: str
        """

        self._video_codec = video_codec
