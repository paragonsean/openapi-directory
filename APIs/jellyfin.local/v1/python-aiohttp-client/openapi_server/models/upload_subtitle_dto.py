# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadSubtitleDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, format: str=None, is_forced: bool=None, language: str=None):
        """UploadSubtitleDto - a model defined in OpenAPI

        :param data: The data of this UploadSubtitleDto.
        :param format: The format of this UploadSubtitleDto.
        :param is_forced: The is_forced of this UploadSubtitleDto.
        :param language: The language of this UploadSubtitleDto.
        """
        self.openapi_types = {
            'data': str,
            'format': str,
            'is_forced': bool,
            'language': str
        }

        self.attribute_map = {
            'data': 'Data',
            'format': 'Format',
            'is_forced': 'IsForced',
            'language': 'Language'
        }

        self._data = data
        self._format = format
        self._is_forced = is_forced
        self._language = language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadSubtitleDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadSubtitleDto of this UploadSubtitleDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this UploadSubtitleDto.

        Gets or sets the subtitle data.

        :return: The data of this UploadSubtitleDto.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UploadSubtitleDto.

        Gets or sets the subtitle data.

        :param data: The data of this UploadSubtitleDto.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def format(self):
        """Gets the format of this UploadSubtitleDto.

        Gets or sets the subtitle format.

        :return: The format of this UploadSubtitleDto.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this UploadSubtitleDto.

        Gets or sets the subtitle format.

        :param format: The format of this UploadSubtitleDto.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def is_forced(self):
        """Gets the is_forced of this UploadSubtitleDto.

        Gets or sets a value indicating whether the subtitle is forced.

        :return: The is_forced of this UploadSubtitleDto.
        :rtype: bool
        """
        return self._is_forced

    @is_forced.setter
    def is_forced(self, is_forced):
        """Sets the is_forced of this UploadSubtitleDto.

        Gets or sets a value indicating whether the subtitle is forced.

        :param is_forced: The is_forced of this UploadSubtitleDto.
        :type is_forced: bool
        """
        if is_forced is None:
            raise ValueError("Invalid value for `is_forced`, must not be `None`")

        self._is_forced = is_forced

    @property
    def language(self):
        """Gets the language of this UploadSubtitleDto.

        Gets or sets the subtitle language.

        :return: The language of this UploadSubtitleDto.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UploadSubtitleDto.

        Gets or sets the subtitle language.

        :param language: The language of this UploadSubtitleDto.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language
