# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageByNameInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, file_length: int=None, format: str=None, name: str=None, theme: str=None):
        """ImageByNameInfo - a model defined in OpenAPI

        :param context: The context of this ImageByNameInfo.
        :param file_length: The file_length of this ImageByNameInfo.
        :param format: The format of this ImageByNameInfo.
        :param name: The name of this ImageByNameInfo.
        :param theme: The theme of this ImageByNameInfo.
        """
        self.openapi_types = {
            'context': str,
            'file_length': int,
            'format': str,
            'name': str,
            'theme': str
        }

        self.attribute_map = {
            'context': 'Context',
            'file_length': 'FileLength',
            'format': 'Format',
            'name': 'Name',
            'theme': 'Theme'
        }

        self._context = context
        self._file_length = file_length
        self._format = format
        self._name = name
        self._theme = theme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageByNameInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageByNameInfo of this ImageByNameInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this ImageByNameInfo.

        Gets or sets the context.

        :return: The context of this ImageByNameInfo.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ImageByNameInfo.

        Gets or sets the context.

        :param context: The context of this ImageByNameInfo.
        :type context: str
        """

        self._context = context

    @property
    def file_length(self):
        """Gets the file_length of this ImageByNameInfo.

        Gets or sets the length of the file.

        :return: The file_length of this ImageByNameInfo.
        :rtype: int
        """
        return self._file_length

    @file_length.setter
    def file_length(self, file_length):
        """Sets the file_length of this ImageByNameInfo.

        Gets or sets the length of the file.

        :param file_length: The file_length of this ImageByNameInfo.
        :type file_length: int
        """

        self._file_length = file_length

    @property
    def format(self):
        """Gets the format of this ImageByNameInfo.

        Gets or sets the format.

        :return: The format of this ImageByNameInfo.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ImageByNameInfo.

        Gets or sets the format.

        :param format: The format of this ImageByNameInfo.
        :type format: str
        """

        self._format = format

    @property
    def name(self):
        """Gets the name of this ImageByNameInfo.

        Gets or sets the name.

        :return: The name of this ImageByNameInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageByNameInfo.

        Gets or sets the name.

        :param name: The name of this ImageByNameInfo.
        :type name: str
        """

        self._name = name

    @property
    def theme(self):
        """Gets the theme of this ImageByNameInfo.

        Gets or sets the theme.

        :return: The theme of this ImageByNameInfo.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this ImageByNameInfo.

        Gets or sets the theme.

        :param theme: The theme of this ImageByNameInfo.
        :type theme: str
        """

        self._theme = theme
