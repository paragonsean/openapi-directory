# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.general_command_type import GeneralCommandType
from openapi_server import util


class GeneralCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: Dict[str, str]=None, controlling_user_id: str=None, name: GeneralCommandType=None):
        """GeneralCommand - a model defined in OpenAPI

        :param arguments: The arguments of this GeneralCommand.
        :param controlling_user_id: The controlling_user_id of this GeneralCommand.
        :param name: The name of this GeneralCommand.
        """
        self.openapi_types = {
            'arguments': Dict[str, str],
            'controlling_user_id': str,
            'name': GeneralCommandType
        }

        self.attribute_map = {
            'arguments': 'Arguments',
            'controlling_user_id': 'ControllingUserId',
            'name': 'Name'
        }

        self._arguments = arguments
        self._controlling_user_id = controlling_user_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeneralCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeneralCommand of this GeneralCommand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this GeneralCommand.


        :return: The arguments of this GeneralCommand.
        :rtype: Dict[str, str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this GeneralCommand.


        :param arguments: The arguments of this GeneralCommand.
        :type arguments: Dict[str, str]
        """

        self._arguments = arguments

    @property
    def controlling_user_id(self):
        """Gets the controlling_user_id of this GeneralCommand.


        :return: The controlling_user_id of this GeneralCommand.
        :rtype: str
        """
        return self._controlling_user_id

    @controlling_user_id.setter
    def controlling_user_id(self, controlling_user_id):
        """Sets the controlling_user_id of this GeneralCommand.


        :param controlling_user_id: The controlling_user_id of this GeneralCommand.
        :type controlling_user_id: str
        """

        self._controlling_user_id = controlling_user_id

    @property
    def name(self):
        """Gets the name of this GeneralCommand.


        :return: The name of this GeneralCommand.
        :rtype: GeneralCommandType
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeneralCommand.


        :param name: The name of this GeneralCommand.
        :type name: GeneralCommandType
        """

        self._name = name
