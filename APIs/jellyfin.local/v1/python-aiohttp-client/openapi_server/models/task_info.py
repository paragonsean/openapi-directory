# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_result import TaskResult
from openapi_server.models.task_state import TaskState
from openapi_server.models.task_trigger_info import TaskTriggerInfo
from openapi_server import util


class TaskInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, current_progress_percentage: float=None, description: str=None, id: str=None, is_hidden: bool=None, key: str=None, last_execution_result: TaskResult=None, name: str=None, state: TaskState=None, triggers: List[TaskTriggerInfo]=None):
        """TaskInfo - a model defined in OpenAPI

        :param category: The category of this TaskInfo.
        :param current_progress_percentage: The current_progress_percentage of this TaskInfo.
        :param description: The description of this TaskInfo.
        :param id: The id of this TaskInfo.
        :param is_hidden: The is_hidden of this TaskInfo.
        :param key: The key of this TaskInfo.
        :param last_execution_result: The last_execution_result of this TaskInfo.
        :param name: The name of this TaskInfo.
        :param state: The state of this TaskInfo.
        :param triggers: The triggers of this TaskInfo.
        """
        self.openapi_types = {
            'category': str,
            'current_progress_percentage': float,
            'description': str,
            'id': str,
            'is_hidden': bool,
            'key': str,
            'last_execution_result': TaskResult,
            'name': str,
            'state': TaskState,
            'triggers': List[TaskTriggerInfo]
        }

        self.attribute_map = {
            'category': 'Category',
            'current_progress_percentage': 'CurrentProgressPercentage',
            'description': 'Description',
            'id': 'Id',
            'is_hidden': 'IsHidden',
            'key': 'Key',
            'last_execution_result': 'LastExecutionResult',
            'name': 'Name',
            'state': 'State',
            'triggers': 'Triggers'
        }

        self._category = category
        self._current_progress_percentage = current_progress_percentage
        self._description = description
        self._id = id
        self._is_hidden = is_hidden
        self._key = key
        self._last_execution_result = last_execution_result
        self._name = name
        self._state = state
        self._triggers = triggers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskInfo of this TaskInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this TaskInfo.

        Gets or sets the category.

        :return: The category of this TaskInfo.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TaskInfo.

        Gets or sets the category.

        :param category: The category of this TaskInfo.
        :type category: str
        """

        self._category = category

    @property
    def current_progress_percentage(self):
        """Gets the current_progress_percentage of this TaskInfo.

        Gets or sets the progress.

        :return: The current_progress_percentage of this TaskInfo.
        :rtype: float
        """
        return self._current_progress_percentage

    @current_progress_percentage.setter
    def current_progress_percentage(self, current_progress_percentage):
        """Sets the current_progress_percentage of this TaskInfo.

        Gets or sets the progress.

        :param current_progress_percentage: The current_progress_percentage of this TaskInfo.
        :type current_progress_percentage: float
        """

        self._current_progress_percentage = current_progress_percentage

    @property
    def description(self):
        """Gets the description of this TaskInfo.

        Gets or sets the description.

        :return: The description of this TaskInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskInfo.

        Gets or sets the description.

        :param description: The description of this TaskInfo.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this TaskInfo.

        Gets or sets the id.

        :return: The id of this TaskInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskInfo.

        Gets or sets the id.

        :param id: The id of this TaskInfo.
        :type id: str
        """

        self._id = id

    @property
    def is_hidden(self):
        """Gets the is_hidden of this TaskInfo.

        Gets or sets a value indicating whether this instance is hidden.

        :return: The is_hidden of this TaskInfo.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this TaskInfo.

        Gets or sets a value indicating whether this instance is hidden.

        :param is_hidden: The is_hidden of this TaskInfo.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def key(self):
        """Gets the key of this TaskInfo.

        Gets or sets the key.

        :return: The key of this TaskInfo.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TaskInfo.

        Gets or sets the key.

        :param key: The key of this TaskInfo.
        :type key: str
        """

        self._key = key

    @property
    def last_execution_result(self):
        """Gets the last_execution_result of this TaskInfo.


        :return: The last_execution_result of this TaskInfo.
        :rtype: TaskResult
        """
        return self._last_execution_result

    @last_execution_result.setter
    def last_execution_result(self, last_execution_result):
        """Sets the last_execution_result of this TaskInfo.


        :param last_execution_result: The last_execution_result of this TaskInfo.
        :type last_execution_result: TaskResult
        """

        self._last_execution_result = last_execution_result

    @property
    def name(self):
        """Gets the name of this TaskInfo.

        Gets or sets the name.

        :return: The name of this TaskInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskInfo.

        Gets or sets the name.

        :param name: The name of this TaskInfo.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this TaskInfo.


        :return: The state of this TaskInfo.
        :rtype: TaskState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskInfo.


        :param state: The state of this TaskInfo.
        :type state: TaskState
        """

        self._state = state

    @property
    def triggers(self):
        """Gets the triggers of this TaskInfo.

        Gets or sets the triggers.

        :return: The triggers of this TaskInfo.
        :rtype: List[TaskTriggerInfo]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this TaskInfo.

        Gets or sets the triggers.

        :param triggers: The triggers of this TaskInfo.
        :type triggers: List[TaskTriggerInfo]
        """

        self._triggers = triggers
