# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_level import NotificationLevel
from openapi_server import util


class NotificationDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, description: str=None, id: str=None, is_read: bool=None, level: NotificationLevel=None, name: str=None, url: str=None, user_id: str=None):
        """NotificationDto - a model defined in OpenAPI

        :param _date: The _date of this NotificationDto.
        :param description: The description of this NotificationDto.
        :param id: The id of this NotificationDto.
        :param is_read: The is_read of this NotificationDto.
        :param level: The level of this NotificationDto.
        :param name: The name of this NotificationDto.
        :param url: The url of this NotificationDto.
        :param user_id: The user_id of this NotificationDto.
        """
        self.openapi_types = {
            '_date': datetime,
            'description': str,
            'id': str,
            'is_read': bool,
            'level': NotificationLevel,
            'name': str,
            'url': str,
            'user_id': str
        }

        self.attribute_map = {
            '_date': 'Date',
            'description': 'Description',
            'id': 'Id',
            'is_read': 'IsRead',
            'level': 'Level',
            'name': 'Name',
            'url': 'Url',
            'user_id': 'UserId'
        }

        self.__date = _date
        self._description = description
        self._id = id
        self._is_read = is_read
        self._level = level
        self._name = name
        self._url = url
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationDto of this NotificationDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this NotificationDto.

        Gets or sets the notification date.

        :return: The _date of this NotificationDto.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this NotificationDto.

        Gets or sets the notification date.

        :param _date: The _date of this NotificationDto.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this NotificationDto.

        Gets or sets the notification's description. Defaults to an empty string.

        :return: The description of this NotificationDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationDto.

        Gets or sets the notification's description. Defaults to an empty string.

        :param description: The description of this NotificationDto.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this NotificationDto.

        Gets or sets the notification ID. Defaults to an empty string.

        :return: The id of this NotificationDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationDto.

        Gets or sets the notification ID. Defaults to an empty string.

        :param id: The id of this NotificationDto.
        :type id: str
        """

        self._id = id

    @property
    def is_read(self):
        """Gets the is_read of this NotificationDto.

        Gets or sets a value indicating whether the notification has been read. Defaults to false.

        :return: The is_read of this NotificationDto.
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this NotificationDto.

        Gets or sets a value indicating whether the notification has been read. Defaults to false.

        :param is_read: The is_read of this NotificationDto.
        :type is_read: bool
        """

        self._is_read = is_read

    @property
    def level(self):
        """Gets the level of this NotificationDto.


        :return: The level of this NotificationDto.
        :rtype: NotificationLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this NotificationDto.


        :param level: The level of this NotificationDto.
        :type level: NotificationLevel
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this NotificationDto.

        Gets or sets the notification's name. Defaults to an empty string.

        :return: The name of this NotificationDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationDto.

        Gets or sets the notification's name. Defaults to an empty string.

        :param name: The name of this NotificationDto.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this NotificationDto.

        Gets or sets the notification's URL. Defaults to an empty string.

        :return: The url of this NotificationDto.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NotificationDto.

        Gets or sets the notification's URL. Defaults to an empty string.

        :param url: The url of this NotificationDto.
        :type url: str
        """

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this NotificationDto.

        Gets or sets the notification's user ID. Defaults to an empty string.

        :return: The user_id of this NotificationDto.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NotificationDto.

        Gets or sets the notification's user ID. Defaults to an empty string.

        :param user_id: The user_id of this NotificationDto.
        :type user_id: str
        """

        self._user_id = user_id
