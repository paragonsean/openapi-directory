# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_profile import DeviceProfile
from openapi_server.models.media_protocol import MediaProtocol
from openapi_server import util


class OpenLiveStreamDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_stream_index: int=None, device_profile: DeviceProfile=None, direct_play_protocols: List[MediaProtocol]=None, enable_direct_play: bool=None, enable_direct_stream: bool=None, item_id: str=None, max_audio_channels: int=None, max_streaming_bitrate: int=None, open_token: str=None, play_session_id: str=None, start_time_ticks: int=None, subtitle_stream_index: int=None, user_id: str=None):
        """OpenLiveStreamDto - a model defined in OpenAPI

        :param audio_stream_index: The audio_stream_index of this OpenLiveStreamDto.
        :param device_profile: The device_profile of this OpenLiveStreamDto.
        :param direct_play_protocols: The direct_play_protocols of this OpenLiveStreamDto.
        :param enable_direct_play: The enable_direct_play of this OpenLiveStreamDto.
        :param enable_direct_stream: The enable_direct_stream of this OpenLiveStreamDto.
        :param item_id: The item_id of this OpenLiveStreamDto.
        :param max_audio_channels: The max_audio_channels of this OpenLiveStreamDto.
        :param max_streaming_bitrate: The max_streaming_bitrate of this OpenLiveStreamDto.
        :param open_token: The open_token of this OpenLiveStreamDto.
        :param play_session_id: The play_session_id of this OpenLiveStreamDto.
        :param start_time_ticks: The start_time_ticks of this OpenLiveStreamDto.
        :param subtitle_stream_index: The subtitle_stream_index of this OpenLiveStreamDto.
        :param user_id: The user_id of this OpenLiveStreamDto.
        """
        self.openapi_types = {
            'audio_stream_index': int,
            'device_profile': DeviceProfile,
            'direct_play_protocols': List[MediaProtocol],
            'enable_direct_play': bool,
            'enable_direct_stream': bool,
            'item_id': str,
            'max_audio_channels': int,
            'max_streaming_bitrate': int,
            'open_token': str,
            'play_session_id': str,
            'start_time_ticks': int,
            'subtitle_stream_index': int,
            'user_id': str
        }

        self.attribute_map = {
            'audio_stream_index': 'AudioStreamIndex',
            'device_profile': 'DeviceProfile',
            'direct_play_protocols': 'DirectPlayProtocols',
            'enable_direct_play': 'EnableDirectPlay',
            'enable_direct_stream': 'EnableDirectStream',
            'item_id': 'ItemId',
            'max_audio_channels': 'MaxAudioChannels',
            'max_streaming_bitrate': 'MaxStreamingBitrate',
            'open_token': 'OpenToken',
            'play_session_id': 'PlaySessionId',
            'start_time_ticks': 'StartTimeTicks',
            'subtitle_stream_index': 'SubtitleStreamIndex',
            'user_id': 'UserId'
        }

        self._audio_stream_index = audio_stream_index
        self._device_profile = device_profile
        self._direct_play_protocols = direct_play_protocols
        self._enable_direct_play = enable_direct_play
        self._enable_direct_stream = enable_direct_stream
        self._item_id = item_id
        self._max_audio_channels = max_audio_channels
        self._max_streaming_bitrate = max_streaming_bitrate
        self._open_token = open_token
        self._play_session_id = play_session_id
        self._start_time_ticks = start_time_ticks
        self._subtitle_stream_index = subtitle_stream_index
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenLiveStreamDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenLiveStreamDto of this OpenLiveStreamDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_stream_index(self):
        """Gets the audio_stream_index of this OpenLiveStreamDto.

        Gets or sets the audio stream index.

        :return: The audio_stream_index of this OpenLiveStreamDto.
        :rtype: int
        """
        return self._audio_stream_index

    @audio_stream_index.setter
    def audio_stream_index(self, audio_stream_index):
        """Sets the audio_stream_index of this OpenLiveStreamDto.

        Gets or sets the audio stream index.

        :param audio_stream_index: The audio_stream_index of this OpenLiveStreamDto.
        :type audio_stream_index: int
        """

        self._audio_stream_index = audio_stream_index

    @property
    def device_profile(self):
        """Gets the device_profile of this OpenLiveStreamDto.


        :return: The device_profile of this OpenLiveStreamDto.
        :rtype: DeviceProfile
        """
        return self._device_profile

    @device_profile.setter
    def device_profile(self, device_profile):
        """Sets the device_profile of this OpenLiveStreamDto.


        :param device_profile: The device_profile of this OpenLiveStreamDto.
        :type device_profile: DeviceProfile
        """

        self._device_profile = device_profile

    @property
    def direct_play_protocols(self):
        """Gets the direct_play_protocols of this OpenLiveStreamDto.

        Gets or sets the device play protocols.

        :return: The direct_play_protocols of this OpenLiveStreamDto.
        :rtype: List[MediaProtocol]
        """
        return self._direct_play_protocols

    @direct_play_protocols.setter
    def direct_play_protocols(self, direct_play_protocols):
        """Sets the direct_play_protocols of this OpenLiveStreamDto.

        Gets or sets the device play protocols.

        :param direct_play_protocols: The direct_play_protocols of this OpenLiveStreamDto.
        :type direct_play_protocols: List[MediaProtocol]
        """

        self._direct_play_protocols = direct_play_protocols

    @property
    def enable_direct_play(self):
        """Gets the enable_direct_play of this OpenLiveStreamDto.

        Gets or sets a value indicating whether to enable direct play.

        :return: The enable_direct_play of this OpenLiveStreamDto.
        :rtype: bool
        """
        return self._enable_direct_play

    @enable_direct_play.setter
    def enable_direct_play(self, enable_direct_play):
        """Sets the enable_direct_play of this OpenLiveStreamDto.

        Gets or sets a value indicating whether to enable direct play.

        :param enable_direct_play: The enable_direct_play of this OpenLiveStreamDto.
        :type enable_direct_play: bool
        """

        self._enable_direct_play = enable_direct_play

    @property
    def enable_direct_stream(self):
        """Gets the enable_direct_stream of this OpenLiveStreamDto.

        Gets or sets a value indicating whether to enale direct stream.

        :return: The enable_direct_stream of this OpenLiveStreamDto.
        :rtype: bool
        """
        return self._enable_direct_stream

    @enable_direct_stream.setter
    def enable_direct_stream(self, enable_direct_stream):
        """Sets the enable_direct_stream of this OpenLiveStreamDto.

        Gets or sets a value indicating whether to enale direct stream.

        :param enable_direct_stream: The enable_direct_stream of this OpenLiveStreamDto.
        :type enable_direct_stream: bool
        """

        self._enable_direct_stream = enable_direct_stream

    @property
    def item_id(self):
        """Gets the item_id of this OpenLiveStreamDto.

        Gets or sets the item id.

        :return: The item_id of this OpenLiveStreamDto.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this OpenLiveStreamDto.

        Gets or sets the item id.

        :param item_id: The item_id of this OpenLiveStreamDto.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def max_audio_channels(self):
        """Gets the max_audio_channels of this OpenLiveStreamDto.

        Gets or sets the max audio channels.

        :return: The max_audio_channels of this OpenLiveStreamDto.
        :rtype: int
        """
        return self._max_audio_channels

    @max_audio_channels.setter
    def max_audio_channels(self, max_audio_channels):
        """Sets the max_audio_channels of this OpenLiveStreamDto.

        Gets or sets the max audio channels.

        :param max_audio_channels: The max_audio_channels of this OpenLiveStreamDto.
        :type max_audio_channels: int
        """

        self._max_audio_channels = max_audio_channels

    @property
    def max_streaming_bitrate(self):
        """Gets the max_streaming_bitrate of this OpenLiveStreamDto.

        Gets or sets the max streaming bitrate.

        :return: The max_streaming_bitrate of this OpenLiveStreamDto.
        :rtype: int
        """
        return self._max_streaming_bitrate

    @max_streaming_bitrate.setter
    def max_streaming_bitrate(self, max_streaming_bitrate):
        """Sets the max_streaming_bitrate of this OpenLiveStreamDto.

        Gets or sets the max streaming bitrate.

        :param max_streaming_bitrate: The max_streaming_bitrate of this OpenLiveStreamDto.
        :type max_streaming_bitrate: int
        """

        self._max_streaming_bitrate = max_streaming_bitrate

    @property
    def open_token(self):
        """Gets the open_token of this OpenLiveStreamDto.

        Gets or sets the open token.

        :return: The open_token of this OpenLiveStreamDto.
        :rtype: str
        """
        return self._open_token

    @open_token.setter
    def open_token(self, open_token):
        """Sets the open_token of this OpenLiveStreamDto.

        Gets or sets the open token.

        :param open_token: The open_token of this OpenLiveStreamDto.
        :type open_token: str
        """

        self._open_token = open_token

    @property
    def play_session_id(self):
        """Gets the play_session_id of this OpenLiveStreamDto.

        Gets or sets the play session id.

        :return: The play_session_id of this OpenLiveStreamDto.
        :rtype: str
        """
        return self._play_session_id

    @play_session_id.setter
    def play_session_id(self, play_session_id):
        """Sets the play_session_id of this OpenLiveStreamDto.

        Gets or sets the play session id.

        :param play_session_id: The play_session_id of this OpenLiveStreamDto.
        :type play_session_id: str
        """

        self._play_session_id = play_session_id

    @property
    def start_time_ticks(self):
        """Gets the start_time_ticks of this OpenLiveStreamDto.

        Gets or sets the start time in ticks.

        :return: The start_time_ticks of this OpenLiveStreamDto.
        :rtype: int
        """
        return self._start_time_ticks

    @start_time_ticks.setter
    def start_time_ticks(self, start_time_ticks):
        """Sets the start_time_ticks of this OpenLiveStreamDto.

        Gets or sets the start time in ticks.

        :param start_time_ticks: The start_time_ticks of this OpenLiveStreamDto.
        :type start_time_ticks: int
        """

        self._start_time_ticks = start_time_ticks

    @property
    def subtitle_stream_index(self):
        """Gets the subtitle_stream_index of this OpenLiveStreamDto.

        Gets or sets the subtitle stream index.

        :return: The subtitle_stream_index of this OpenLiveStreamDto.
        :rtype: int
        """
        return self._subtitle_stream_index

    @subtitle_stream_index.setter
    def subtitle_stream_index(self, subtitle_stream_index):
        """Sets the subtitle_stream_index of this OpenLiveStreamDto.

        Gets or sets the subtitle stream index.

        :param subtitle_stream_index: The subtitle_stream_index of this OpenLiveStreamDto.
        :type subtitle_stream_index: int
        """

        self._subtitle_stream_index = subtitle_stream_index

    @property
    def user_id(self):
        """Gets the user_id of this OpenLiveStreamDto.

        Gets or sets the user id.

        :return: The user_id of this OpenLiveStreamDto.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OpenLiveStreamDto.

        Gets or sets the user id.

        :param user_id: The user_id of this OpenLiveStreamDto.
        :type user_id: str
        """

        self._user_id = user_id
