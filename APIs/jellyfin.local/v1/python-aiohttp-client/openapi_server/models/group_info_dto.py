# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_state_type import GroupStateType
from openapi_server import util


class GroupInfoDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: str=None, group_name: str=None, last_updated_at: datetime=None, participants: List[str]=None, state: GroupStateType=None):
        """GroupInfoDto - a model defined in OpenAPI

        :param group_id: The group_id of this GroupInfoDto.
        :param group_name: The group_name of this GroupInfoDto.
        :param last_updated_at: The last_updated_at of this GroupInfoDto.
        :param participants: The participants of this GroupInfoDto.
        :param state: The state of this GroupInfoDto.
        """
        self.openapi_types = {
            'group_id': str,
            'group_name': str,
            'last_updated_at': datetime,
            'participants': List[str],
            'state': GroupStateType
        }

        self.attribute_map = {
            'group_id': 'GroupId',
            'group_name': 'GroupName',
            'last_updated_at': 'LastUpdatedAt',
            'participants': 'Participants',
            'state': 'State'
        }

        self._group_id = group_id
        self._group_name = group_name
        self._last_updated_at = last_updated_at
        self._participants = participants
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupInfoDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupInfoDto of this GroupInfoDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this GroupInfoDto.

        Gets the group identifier.

        :return: The group_id of this GroupInfoDto.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GroupInfoDto.

        Gets the group identifier.

        :param group_id: The group_id of this GroupInfoDto.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this GroupInfoDto.

        Gets the group name.

        :return: The group_name of this GroupInfoDto.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupInfoDto.

        Gets the group name.

        :param group_name: The group_name of this GroupInfoDto.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this GroupInfoDto.

        Gets the date when this DTO has been created.

        :return: The last_updated_at of this GroupInfoDto.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this GroupInfoDto.

        Gets the date when this DTO has been created.

        :param last_updated_at: The last_updated_at of this GroupInfoDto.
        :type last_updated_at: datetime
        """

        self._last_updated_at = last_updated_at

    @property
    def participants(self):
        """Gets the participants of this GroupInfoDto.

        Gets the participants.

        :return: The participants of this GroupInfoDto.
        :rtype: List[str]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this GroupInfoDto.

        Gets the participants.

        :param participants: The participants of this GroupInfoDto.
        :type participants: List[str]
        """

        self._participants = participants

    @property
    def state(self):
        """Gets the state of this GroupInfoDto.


        :return: The state of this GroupInfoDto.
        :rtype: GroupStateType
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GroupInfoDto.


        :param state: The state of this GroupInfoDto.
        :type state: GroupStateType
        """

        self._state = state
