# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.codec_profile import CodecProfile
from openapi_server.models.container_profile import ContainerProfile
from openapi_server.models.device_identification import DeviceIdentification
from openapi_server.models.direct_play_profile import DirectPlayProfile
from openapi_server.models.response_profile import ResponseProfile
from openapi_server.models.subtitle_profile import SubtitleProfile
from openapi_server.models.transcoding_profile import TranscodingProfile
from openapi_server.models.xml_attribute import XmlAttribute
from openapi_server import util


class DeviceProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album_art_pn: str=None, codec_profiles: List[CodecProfile]=None, container_profiles: List[ContainerProfile]=None, direct_play_profiles: List[DirectPlayProfile]=None, enable_album_art_in_didl: bool=None, enable_ms_media_receiver_registrar: bool=None, enable_single_album_art_limit: bool=None, enable_single_subtitle_limit: bool=None, friendly_name: str=None, id: str=None, identification: DeviceIdentification=None, ignore_transcode_byte_range_requests: bool=None, manufacturer: str=None, manufacturer_url: str=None, max_album_art_height: int=None, max_album_art_width: int=None, max_icon_height: int=None, max_icon_width: int=None, max_static_bitrate: int=None, max_static_music_bitrate: int=None, max_streaming_bitrate: int=None, model_description: str=None, model_name: str=None, model_number: str=None, model_url: str=None, music_streaming_transcoding_bitrate: int=None, name: str=None, protocol_info: str=None, requires_plain_folders: bool=None, requires_plain_video_items: bool=None, response_profiles: List[ResponseProfile]=None, serial_number: str=None, sony_aggregation_flags: str=None, subtitle_profiles: List[SubtitleProfile]=None, supported_media_types: str=None, timeline_offset_seconds: int=None, transcoding_profiles: List[TranscodingProfile]=None, user_id: str=None, xml_root_attributes: List[XmlAttribute]=None):
        """DeviceProfile - a model defined in OpenAPI

        :param album_art_pn: The album_art_pn of this DeviceProfile.
        :param codec_profiles: The codec_profiles of this DeviceProfile.
        :param container_profiles: The container_profiles of this DeviceProfile.
        :param direct_play_profiles: The direct_play_profiles of this DeviceProfile.
        :param enable_album_art_in_didl: The enable_album_art_in_didl of this DeviceProfile.
        :param enable_ms_media_receiver_registrar: The enable_ms_media_receiver_registrar of this DeviceProfile.
        :param enable_single_album_art_limit: The enable_single_album_art_limit of this DeviceProfile.
        :param enable_single_subtitle_limit: The enable_single_subtitle_limit of this DeviceProfile.
        :param friendly_name: The friendly_name of this DeviceProfile.
        :param id: The id of this DeviceProfile.
        :param identification: The identification of this DeviceProfile.
        :param ignore_transcode_byte_range_requests: The ignore_transcode_byte_range_requests of this DeviceProfile.
        :param manufacturer: The manufacturer of this DeviceProfile.
        :param manufacturer_url: The manufacturer_url of this DeviceProfile.
        :param max_album_art_height: The max_album_art_height of this DeviceProfile.
        :param max_album_art_width: The max_album_art_width of this DeviceProfile.
        :param max_icon_height: The max_icon_height of this DeviceProfile.
        :param max_icon_width: The max_icon_width of this DeviceProfile.
        :param max_static_bitrate: The max_static_bitrate of this DeviceProfile.
        :param max_static_music_bitrate: The max_static_music_bitrate of this DeviceProfile.
        :param max_streaming_bitrate: The max_streaming_bitrate of this DeviceProfile.
        :param model_description: The model_description of this DeviceProfile.
        :param model_name: The model_name of this DeviceProfile.
        :param model_number: The model_number of this DeviceProfile.
        :param model_url: The model_url of this DeviceProfile.
        :param music_streaming_transcoding_bitrate: The music_streaming_transcoding_bitrate of this DeviceProfile.
        :param name: The name of this DeviceProfile.
        :param protocol_info: The protocol_info of this DeviceProfile.
        :param requires_plain_folders: The requires_plain_folders of this DeviceProfile.
        :param requires_plain_video_items: The requires_plain_video_items of this DeviceProfile.
        :param response_profiles: The response_profiles of this DeviceProfile.
        :param serial_number: The serial_number of this DeviceProfile.
        :param sony_aggregation_flags: The sony_aggregation_flags of this DeviceProfile.
        :param subtitle_profiles: The subtitle_profiles of this DeviceProfile.
        :param supported_media_types: The supported_media_types of this DeviceProfile.
        :param timeline_offset_seconds: The timeline_offset_seconds of this DeviceProfile.
        :param transcoding_profiles: The transcoding_profiles of this DeviceProfile.
        :param user_id: The user_id of this DeviceProfile.
        :param xml_root_attributes: The xml_root_attributes of this DeviceProfile.
        """
        self.openapi_types = {
            'album_art_pn': str,
            'codec_profiles': List[CodecProfile],
            'container_profiles': List[ContainerProfile],
            'direct_play_profiles': List[DirectPlayProfile],
            'enable_album_art_in_didl': bool,
            'enable_ms_media_receiver_registrar': bool,
            'enable_single_album_art_limit': bool,
            'enable_single_subtitle_limit': bool,
            'friendly_name': str,
            'id': str,
            'identification': DeviceIdentification,
            'ignore_transcode_byte_range_requests': bool,
            'manufacturer': str,
            'manufacturer_url': str,
            'max_album_art_height': int,
            'max_album_art_width': int,
            'max_icon_height': int,
            'max_icon_width': int,
            'max_static_bitrate': int,
            'max_static_music_bitrate': int,
            'max_streaming_bitrate': int,
            'model_description': str,
            'model_name': str,
            'model_number': str,
            'model_url': str,
            'music_streaming_transcoding_bitrate': int,
            'name': str,
            'protocol_info': str,
            'requires_plain_folders': bool,
            'requires_plain_video_items': bool,
            'response_profiles': List[ResponseProfile],
            'serial_number': str,
            'sony_aggregation_flags': str,
            'subtitle_profiles': List[SubtitleProfile],
            'supported_media_types': str,
            'timeline_offset_seconds': int,
            'transcoding_profiles': List[TranscodingProfile],
            'user_id': str,
            'xml_root_attributes': List[XmlAttribute]
        }

        self.attribute_map = {
            'album_art_pn': 'AlbumArtPn',
            'codec_profiles': 'CodecProfiles',
            'container_profiles': 'ContainerProfiles',
            'direct_play_profiles': 'DirectPlayProfiles',
            'enable_album_art_in_didl': 'EnableAlbumArtInDidl',
            'enable_ms_media_receiver_registrar': 'EnableMSMediaReceiverRegistrar',
            'enable_single_album_art_limit': 'EnableSingleAlbumArtLimit',
            'enable_single_subtitle_limit': 'EnableSingleSubtitleLimit',
            'friendly_name': 'FriendlyName',
            'id': 'Id',
            'identification': 'Identification',
            'ignore_transcode_byte_range_requests': 'IgnoreTranscodeByteRangeRequests',
            'manufacturer': 'Manufacturer',
            'manufacturer_url': 'ManufacturerUrl',
            'max_album_art_height': 'MaxAlbumArtHeight',
            'max_album_art_width': 'MaxAlbumArtWidth',
            'max_icon_height': 'MaxIconHeight',
            'max_icon_width': 'MaxIconWidth',
            'max_static_bitrate': 'MaxStaticBitrate',
            'max_static_music_bitrate': 'MaxStaticMusicBitrate',
            'max_streaming_bitrate': 'MaxStreamingBitrate',
            'model_description': 'ModelDescription',
            'model_name': 'ModelName',
            'model_number': 'ModelNumber',
            'model_url': 'ModelUrl',
            'music_streaming_transcoding_bitrate': 'MusicStreamingTranscodingBitrate',
            'name': 'Name',
            'protocol_info': 'ProtocolInfo',
            'requires_plain_folders': 'RequiresPlainFolders',
            'requires_plain_video_items': 'RequiresPlainVideoItems',
            'response_profiles': 'ResponseProfiles',
            'serial_number': 'SerialNumber',
            'sony_aggregation_flags': 'SonyAggregationFlags',
            'subtitle_profiles': 'SubtitleProfiles',
            'supported_media_types': 'SupportedMediaTypes',
            'timeline_offset_seconds': 'TimelineOffsetSeconds',
            'transcoding_profiles': 'TranscodingProfiles',
            'user_id': 'UserId',
            'xml_root_attributes': 'XmlRootAttributes'
        }

        self._album_art_pn = album_art_pn
        self._codec_profiles = codec_profiles
        self._container_profiles = container_profiles
        self._direct_play_profiles = direct_play_profiles
        self._enable_album_art_in_didl = enable_album_art_in_didl
        self._enable_ms_media_receiver_registrar = enable_ms_media_receiver_registrar
        self._enable_single_album_art_limit = enable_single_album_art_limit
        self._enable_single_subtitle_limit = enable_single_subtitle_limit
        self._friendly_name = friendly_name
        self._id = id
        self._identification = identification
        self._ignore_transcode_byte_range_requests = ignore_transcode_byte_range_requests
        self._manufacturer = manufacturer
        self._manufacturer_url = manufacturer_url
        self._max_album_art_height = max_album_art_height
        self._max_album_art_width = max_album_art_width
        self._max_icon_height = max_icon_height
        self._max_icon_width = max_icon_width
        self._max_static_bitrate = max_static_bitrate
        self._max_static_music_bitrate = max_static_music_bitrate
        self._max_streaming_bitrate = max_streaming_bitrate
        self._model_description = model_description
        self._model_name = model_name
        self._model_number = model_number
        self._model_url = model_url
        self._music_streaming_transcoding_bitrate = music_streaming_transcoding_bitrate
        self._name = name
        self._protocol_info = protocol_info
        self._requires_plain_folders = requires_plain_folders
        self._requires_plain_video_items = requires_plain_video_items
        self._response_profiles = response_profiles
        self._serial_number = serial_number
        self._sony_aggregation_flags = sony_aggregation_flags
        self._subtitle_profiles = subtitle_profiles
        self._supported_media_types = supported_media_types
        self._timeline_offset_seconds = timeline_offset_seconds
        self._transcoding_profiles = transcoding_profiles
        self._user_id = user_id
        self._xml_root_attributes = xml_root_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceProfile of this DeviceProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album_art_pn(self):
        """Gets the album_art_pn of this DeviceProfile.

        Gets or sets the AlbumArtPn.

        :return: The album_art_pn of this DeviceProfile.
        :rtype: str
        """
        return self._album_art_pn

    @album_art_pn.setter
    def album_art_pn(self, album_art_pn):
        """Sets the album_art_pn of this DeviceProfile.

        Gets or sets the AlbumArtPn.

        :param album_art_pn: The album_art_pn of this DeviceProfile.
        :type album_art_pn: str
        """

        self._album_art_pn = album_art_pn

    @property
    def codec_profiles(self):
        """Gets the codec_profiles of this DeviceProfile.

        Gets or sets the CodecProfiles.

        :return: The codec_profiles of this DeviceProfile.
        :rtype: List[CodecProfile]
        """
        return self._codec_profiles

    @codec_profiles.setter
    def codec_profiles(self, codec_profiles):
        """Sets the codec_profiles of this DeviceProfile.

        Gets or sets the CodecProfiles.

        :param codec_profiles: The codec_profiles of this DeviceProfile.
        :type codec_profiles: List[CodecProfile]
        """

        self._codec_profiles = codec_profiles

    @property
    def container_profiles(self):
        """Gets the container_profiles of this DeviceProfile.

        Gets or sets the ContainerProfiles.

        :return: The container_profiles of this DeviceProfile.
        :rtype: List[ContainerProfile]
        """
        return self._container_profiles

    @container_profiles.setter
    def container_profiles(self, container_profiles):
        """Sets the container_profiles of this DeviceProfile.

        Gets or sets the ContainerProfiles.

        :param container_profiles: The container_profiles of this DeviceProfile.
        :type container_profiles: List[ContainerProfile]
        """

        self._container_profiles = container_profiles

    @property
    def direct_play_profiles(self):
        """Gets the direct_play_profiles of this DeviceProfile.

        Gets or sets the direct play profiles.

        :return: The direct_play_profiles of this DeviceProfile.
        :rtype: List[DirectPlayProfile]
        """
        return self._direct_play_profiles

    @direct_play_profiles.setter
    def direct_play_profiles(self, direct_play_profiles):
        """Sets the direct_play_profiles of this DeviceProfile.

        Gets or sets the direct play profiles.

        :param direct_play_profiles: The direct_play_profiles of this DeviceProfile.
        :type direct_play_profiles: List[DirectPlayProfile]
        """

        self._direct_play_profiles = direct_play_profiles

    @property
    def enable_album_art_in_didl(self):
        """Gets the enable_album_art_in_didl of this DeviceProfile.

        Gets or sets a value indicating whether EnableAlbumArtInDidl.

        :return: The enable_album_art_in_didl of this DeviceProfile.
        :rtype: bool
        """
        return self._enable_album_art_in_didl

    @enable_album_art_in_didl.setter
    def enable_album_art_in_didl(self, enable_album_art_in_didl):
        """Sets the enable_album_art_in_didl of this DeviceProfile.

        Gets or sets a value indicating whether EnableAlbumArtInDidl.

        :param enable_album_art_in_didl: The enable_album_art_in_didl of this DeviceProfile.
        :type enable_album_art_in_didl: bool
        """

        self._enable_album_art_in_didl = enable_album_art_in_didl

    @property
    def enable_ms_media_receiver_registrar(self):
        """Gets the enable_ms_media_receiver_registrar of this DeviceProfile.

        Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.

        :return: The enable_ms_media_receiver_registrar of this DeviceProfile.
        :rtype: bool
        """
        return self._enable_ms_media_receiver_registrar

    @enable_ms_media_receiver_registrar.setter
    def enable_ms_media_receiver_registrar(self, enable_ms_media_receiver_registrar):
        """Sets the enable_ms_media_receiver_registrar of this DeviceProfile.

        Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.

        :param enable_ms_media_receiver_registrar: The enable_ms_media_receiver_registrar of this DeviceProfile.
        :type enable_ms_media_receiver_registrar: bool
        """

        self._enable_ms_media_receiver_registrar = enable_ms_media_receiver_registrar

    @property
    def enable_single_album_art_limit(self):
        """Gets the enable_single_album_art_limit of this DeviceProfile.

        Gets or sets a value indicating whether EnableSingleAlbumArtLimit.

        :return: The enable_single_album_art_limit of this DeviceProfile.
        :rtype: bool
        """
        return self._enable_single_album_art_limit

    @enable_single_album_art_limit.setter
    def enable_single_album_art_limit(self, enable_single_album_art_limit):
        """Sets the enable_single_album_art_limit of this DeviceProfile.

        Gets or sets a value indicating whether EnableSingleAlbumArtLimit.

        :param enable_single_album_art_limit: The enable_single_album_art_limit of this DeviceProfile.
        :type enable_single_album_art_limit: bool
        """

        self._enable_single_album_art_limit = enable_single_album_art_limit

    @property
    def enable_single_subtitle_limit(self):
        """Gets the enable_single_subtitle_limit of this DeviceProfile.

        Gets or sets a value indicating whether EnableSingleSubtitleLimit.

        :return: The enable_single_subtitle_limit of this DeviceProfile.
        :rtype: bool
        """
        return self._enable_single_subtitle_limit

    @enable_single_subtitle_limit.setter
    def enable_single_subtitle_limit(self, enable_single_subtitle_limit):
        """Sets the enable_single_subtitle_limit of this DeviceProfile.

        Gets or sets a value indicating whether EnableSingleSubtitleLimit.

        :param enable_single_subtitle_limit: The enable_single_subtitle_limit of this DeviceProfile.
        :type enable_single_subtitle_limit: bool
        """

        self._enable_single_subtitle_limit = enable_single_subtitle_limit

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DeviceProfile.

        Gets or sets the FriendlyName.

        :return: The friendly_name of this DeviceProfile.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DeviceProfile.

        Gets or sets the FriendlyName.

        :param friendly_name: The friendly_name of this DeviceProfile.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def id(self):
        """Gets the id of this DeviceProfile.

        Gets or sets the Id.

        :return: The id of this DeviceProfile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceProfile.

        Gets or sets the Id.

        :param id: The id of this DeviceProfile.
        :type id: str
        """

        self._id = id

    @property
    def identification(self):
        """Gets the identification of this DeviceProfile.


        :return: The identification of this DeviceProfile.
        :rtype: DeviceIdentification
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this DeviceProfile.


        :param identification: The identification of this DeviceProfile.
        :type identification: DeviceIdentification
        """

        self._identification = identification

    @property
    def ignore_transcode_byte_range_requests(self):
        """Gets the ignore_transcode_byte_range_requests of this DeviceProfile.

        Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.

        :return: The ignore_transcode_byte_range_requests of this DeviceProfile.
        :rtype: bool
        """
        return self._ignore_transcode_byte_range_requests

    @ignore_transcode_byte_range_requests.setter
    def ignore_transcode_byte_range_requests(self, ignore_transcode_byte_range_requests):
        """Sets the ignore_transcode_byte_range_requests of this DeviceProfile.

        Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.

        :param ignore_transcode_byte_range_requests: The ignore_transcode_byte_range_requests of this DeviceProfile.
        :type ignore_transcode_byte_range_requests: bool
        """

        self._ignore_transcode_byte_range_requests = ignore_transcode_byte_range_requests

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DeviceProfile.

        Gets or sets the Manufacturer.

        :return: The manufacturer of this DeviceProfile.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DeviceProfile.

        Gets or sets the Manufacturer.

        :param manufacturer: The manufacturer of this DeviceProfile.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def manufacturer_url(self):
        """Gets the manufacturer_url of this DeviceProfile.

        Gets or sets the ManufacturerUrl.

        :return: The manufacturer_url of this DeviceProfile.
        :rtype: str
        """
        return self._manufacturer_url

    @manufacturer_url.setter
    def manufacturer_url(self, manufacturer_url):
        """Sets the manufacturer_url of this DeviceProfile.

        Gets or sets the ManufacturerUrl.

        :param manufacturer_url: The manufacturer_url of this DeviceProfile.
        :type manufacturer_url: str
        """

        self._manufacturer_url = manufacturer_url

    @property
    def max_album_art_height(self):
        """Gets the max_album_art_height of this DeviceProfile.

        Gets or sets the MaxAlbumArtHeight.

        :return: The max_album_art_height of this DeviceProfile.
        :rtype: int
        """
        return self._max_album_art_height

    @max_album_art_height.setter
    def max_album_art_height(self, max_album_art_height):
        """Sets the max_album_art_height of this DeviceProfile.

        Gets or sets the MaxAlbumArtHeight.

        :param max_album_art_height: The max_album_art_height of this DeviceProfile.
        :type max_album_art_height: int
        """

        self._max_album_art_height = max_album_art_height

    @property
    def max_album_art_width(self):
        """Gets the max_album_art_width of this DeviceProfile.

        Gets or sets the MaxAlbumArtWidth.

        :return: The max_album_art_width of this DeviceProfile.
        :rtype: int
        """
        return self._max_album_art_width

    @max_album_art_width.setter
    def max_album_art_width(self, max_album_art_width):
        """Sets the max_album_art_width of this DeviceProfile.

        Gets or sets the MaxAlbumArtWidth.

        :param max_album_art_width: The max_album_art_width of this DeviceProfile.
        :type max_album_art_width: int
        """

        self._max_album_art_width = max_album_art_width

    @property
    def max_icon_height(self):
        """Gets the max_icon_height of this DeviceProfile.

        Gets or sets the MaxIconHeight.

        :return: The max_icon_height of this DeviceProfile.
        :rtype: int
        """
        return self._max_icon_height

    @max_icon_height.setter
    def max_icon_height(self, max_icon_height):
        """Sets the max_icon_height of this DeviceProfile.

        Gets or sets the MaxIconHeight.

        :param max_icon_height: The max_icon_height of this DeviceProfile.
        :type max_icon_height: int
        """

        self._max_icon_height = max_icon_height

    @property
    def max_icon_width(self):
        """Gets the max_icon_width of this DeviceProfile.

        Gets or sets the MaxIconWidth.

        :return: The max_icon_width of this DeviceProfile.
        :rtype: int
        """
        return self._max_icon_width

    @max_icon_width.setter
    def max_icon_width(self, max_icon_width):
        """Sets the max_icon_width of this DeviceProfile.

        Gets or sets the MaxIconWidth.

        :param max_icon_width: The max_icon_width of this DeviceProfile.
        :type max_icon_width: int
        """

        self._max_icon_width = max_icon_width

    @property
    def max_static_bitrate(self):
        """Gets the max_static_bitrate of this DeviceProfile.

        Gets or sets the MaxStaticBitrate.

        :return: The max_static_bitrate of this DeviceProfile.
        :rtype: int
        """
        return self._max_static_bitrate

    @max_static_bitrate.setter
    def max_static_bitrate(self, max_static_bitrate):
        """Sets the max_static_bitrate of this DeviceProfile.

        Gets or sets the MaxStaticBitrate.

        :param max_static_bitrate: The max_static_bitrate of this DeviceProfile.
        :type max_static_bitrate: int
        """

        self._max_static_bitrate = max_static_bitrate

    @property
    def max_static_music_bitrate(self):
        """Gets the max_static_music_bitrate of this DeviceProfile.

        Gets or sets the MaxStaticMusicBitrate.

        :return: The max_static_music_bitrate of this DeviceProfile.
        :rtype: int
        """
        return self._max_static_music_bitrate

    @max_static_music_bitrate.setter
    def max_static_music_bitrate(self, max_static_music_bitrate):
        """Sets the max_static_music_bitrate of this DeviceProfile.

        Gets or sets the MaxStaticMusicBitrate.

        :param max_static_music_bitrate: The max_static_music_bitrate of this DeviceProfile.
        :type max_static_music_bitrate: int
        """

        self._max_static_music_bitrate = max_static_music_bitrate

    @property
    def max_streaming_bitrate(self):
        """Gets the max_streaming_bitrate of this DeviceProfile.

        Gets or sets the MaxStreamingBitrate.

        :return: The max_streaming_bitrate of this DeviceProfile.
        :rtype: int
        """
        return self._max_streaming_bitrate

    @max_streaming_bitrate.setter
    def max_streaming_bitrate(self, max_streaming_bitrate):
        """Sets the max_streaming_bitrate of this DeviceProfile.

        Gets or sets the MaxStreamingBitrate.

        :param max_streaming_bitrate: The max_streaming_bitrate of this DeviceProfile.
        :type max_streaming_bitrate: int
        """

        self._max_streaming_bitrate = max_streaming_bitrate

    @property
    def model_description(self):
        """Gets the model_description of this DeviceProfile.

        Gets or sets the ModelDescription.

        :return: The model_description of this DeviceProfile.
        :rtype: str
        """
        return self._model_description

    @model_description.setter
    def model_description(self, model_description):
        """Sets the model_description of this DeviceProfile.

        Gets or sets the ModelDescription.

        :param model_description: The model_description of this DeviceProfile.
        :type model_description: str
        """

        self._model_description = model_description

    @property
    def model_name(self):
        """Gets the model_name of this DeviceProfile.

        Gets or sets the ModelName.

        :return: The model_name of this DeviceProfile.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DeviceProfile.

        Gets or sets the ModelName.

        :param model_name: The model_name of this DeviceProfile.
        :type model_name: str
        """

        self._model_name = model_name

    @property
    def model_number(self):
        """Gets the model_number of this DeviceProfile.

        Gets or sets the ModelNumber.

        :return: The model_number of this DeviceProfile.
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this DeviceProfile.

        Gets or sets the ModelNumber.

        :param model_number: The model_number of this DeviceProfile.
        :type model_number: str
        """

        self._model_number = model_number

    @property
    def model_url(self):
        """Gets the model_url of this DeviceProfile.

        Gets or sets the ModelUrl.

        :return: The model_url of this DeviceProfile.
        :rtype: str
        """
        return self._model_url

    @model_url.setter
    def model_url(self, model_url):
        """Sets the model_url of this DeviceProfile.

        Gets or sets the ModelUrl.

        :param model_url: The model_url of this DeviceProfile.
        :type model_url: str
        """

        self._model_url = model_url

    @property
    def music_streaming_transcoding_bitrate(self):
        """Gets the music_streaming_transcoding_bitrate of this DeviceProfile.

        Gets or sets the MusicStreamingTranscodingBitrate.

        :return: The music_streaming_transcoding_bitrate of this DeviceProfile.
        :rtype: int
        """
        return self._music_streaming_transcoding_bitrate

    @music_streaming_transcoding_bitrate.setter
    def music_streaming_transcoding_bitrate(self, music_streaming_transcoding_bitrate):
        """Sets the music_streaming_transcoding_bitrate of this DeviceProfile.

        Gets or sets the MusicStreamingTranscodingBitrate.

        :param music_streaming_transcoding_bitrate: The music_streaming_transcoding_bitrate of this DeviceProfile.
        :type music_streaming_transcoding_bitrate: int
        """

        self._music_streaming_transcoding_bitrate = music_streaming_transcoding_bitrate

    @property
    def name(self):
        """Gets the name of this DeviceProfile.

        Gets or sets the Name.

        :return: The name of this DeviceProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceProfile.

        Gets or sets the Name.

        :param name: The name of this DeviceProfile.
        :type name: str
        """

        self._name = name

    @property
    def protocol_info(self):
        """Gets the protocol_info of this DeviceProfile.

        Gets or sets the ProtocolInfo.

        :return: The protocol_info of this DeviceProfile.
        :rtype: str
        """
        return self._protocol_info

    @protocol_info.setter
    def protocol_info(self, protocol_info):
        """Sets the protocol_info of this DeviceProfile.

        Gets or sets the ProtocolInfo.

        :param protocol_info: The protocol_info of this DeviceProfile.
        :type protocol_info: str
        """

        self._protocol_info = protocol_info

    @property
    def requires_plain_folders(self):
        """Gets the requires_plain_folders of this DeviceProfile.

        Gets or sets a value indicating whether RequiresPlainFolders.

        :return: The requires_plain_folders of this DeviceProfile.
        :rtype: bool
        """
        return self._requires_plain_folders

    @requires_plain_folders.setter
    def requires_plain_folders(self, requires_plain_folders):
        """Sets the requires_plain_folders of this DeviceProfile.

        Gets or sets a value indicating whether RequiresPlainFolders.

        :param requires_plain_folders: The requires_plain_folders of this DeviceProfile.
        :type requires_plain_folders: bool
        """

        self._requires_plain_folders = requires_plain_folders

    @property
    def requires_plain_video_items(self):
        """Gets the requires_plain_video_items of this DeviceProfile.

        Gets or sets a value indicating whether RequiresPlainVideoItems.

        :return: The requires_plain_video_items of this DeviceProfile.
        :rtype: bool
        """
        return self._requires_plain_video_items

    @requires_plain_video_items.setter
    def requires_plain_video_items(self, requires_plain_video_items):
        """Sets the requires_plain_video_items of this DeviceProfile.

        Gets or sets a value indicating whether RequiresPlainVideoItems.

        :param requires_plain_video_items: The requires_plain_video_items of this DeviceProfile.
        :type requires_plain_video_items: bool
        """

        self._requires_plain_video_items = requires_plain_video_items

    @property
    def response_profiles(self):
        """Gets the response_profiles of this DeviceProfile.

        Gets or sets the ResponseProfiles.

        :return: The response_profiles of this DeviceProfile.
        :rtype: List[ResponseProfile]
        """
        return self._response_profiles

    @response_profiles.setter
    def response_profiles(self, response_profiles):
        """Sets the response_profiles of this DeviceProfile.

        Gets or sets the ResponseProfiles.

        :param response_profiles: The response_profiles of this DeviceProfile.
        :type response_profiles: List[ResponseProfile]
        """

        self._response_profiles = response_profiles

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceProfile.

        Gets or sets the SerialNumber.

        :return: The serial_number of this DeviceProfile.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceProfile.

        Gets or sets the SerialNumber.

        :param serial_number: The serial_number of this DeviceProfile.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def sony_aggregation_flags(self):
        """Gets the sony_aggregation_flags of this DeviceProfile.

        Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.

        :return: The sony_aggregation_flags of this DeviceProfile.
        :rtype: str
        """
        return self._sony_aggregation_flags

    @sony_aggregation_flags.setter
    def sony_aggregation_flags(self, sony_aggregation_flags):
        """Sets the sony_aggregation_flags of this DeviceProfile.

        Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.

        :param sony_aggregation_flags: The sony_aggregation_flags of this DeviceProfile.
        :type sony_aggregation_flags: str
        """

        self._sony_aggregation_flags = sony_aggregation_flags

    @property
    def subtitle_profiles(self):
        """Gets the subtitle_profiles of this DeviceProfile.

        Gets or sets the SubtitleProfiles.

        :return: The subtitle_profiles of this DeviceProfile.
        :rtype: List[SubtitleProfile]
        """
        return self._subtitle_profiles

    @subtitle_profiles.setter
    def subtitle_profiles(self, subtitle_profiles):
        """Sets the subtitle_profiles of this DeviceProfile.

        Gets or sets the SubtitleProfiles.

        :param subtitle_profiles: The subtitle_profiles of this DeviceProfile.
        :type subtitle_profiles: List[SubtitleProfile]
        """

        self._subtitle_profiles = subtitle_profiles

    @property
    def supported_media_types(self):
        """Gets the supported_media_types of this DeviceProfile.

        Gets or sets the SupportedMediaTypes.

        :return: The supported_media_types of this DeviceProfile.
        :rtype: str
        """
        return self._supported_media_types

    @supported_media_types.setter
    def supported_media_types(self, supported_media_types):
        """Sets the supported_media_types of this DeviceProfile.

        Gets or sets the SupportedMediaTypes.

        :param supported_media_types: The supported_media_types of this DeviceProfile.
        :type supported_media_types: str
        """

        self._supported_media_types = supported_media_types

    @property
    def timeline_offset_seconds(self):
        """Gets the timeline_offset_seconds of this DeviceProfile.

        Gets or sets the TimelineOffsetSeconds.

        :return: The timeline_offset_seconds of this DeviceProfile.
        :rtype: int
        """
        return self._timeline_offset_seconds

    @timeline_offset_seconds.setter
    def timeline_offset_seconds(self, timeline_offset_seconds):
        """Sets the timeline_offset_seconds of this DeviceProfile.

        Gets or sets the TimelineOffsetSeconds.

        :param timeline_offset_seconds: The timeline_offset_seconds of this DeviceProfile.
        :type timeline_offset_seconds: int
        """

        self._timeline_offset_seconds = timeline_offset_seconds

    @property
    def transcoding_profiles(self):
        """Gets the transcoding_profiles of this DeviceProfile.

        Gets or sets the transcoding profiles.

        :return: The transcoding_profiles of this DeviceProfile.
        :rtype: List[TranscodingProfile]
        """
        return self._transcoding_profiles

    @transcoding_profiles.setter
    def transcoding_profiles(self, transcoding_profiles):
        """Sets the transcoding_profiles of this DeviceProfile.

        Gets or sets the transcoding profiles.

        :param transcoding_profiles: The transcoding_profiles of this DeviceProfile.
        :type transcoding_profiles: List[TranscodingProfile]
        """

        self._transcoding_profiles = transcoding_profiles

    @property
    def user_id(self):
        """Gets the user_id of this DeviceProfile.

        Gets or sets the UserId.

        :return: The user_id of this DeviceProfile.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DeviceProfile.

        Gets or sets the UserId.

        :param user_id: The user_id of this DeviceProfile.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def xml_root_attributes(self):
        """Gets the xml_root_attributes of this DeviceProfile.

        Gets or sets the XmlRootAttributes.

        :return: The xml_root_attributes of this DeviceProfile.
        :rtype: List[XmlAttribute]
        """
        return self._xml_root_attributes

    @xml_root_attributes.setter
    def xml_root_attributes(self, xml_root_attributes):
        """Sets the xml_root_attributes of this DeviceProfile.

        Gets or sets the XmlRootAttributes.

        :param xml_root_attributes: The xml_root_attributes of this DeviceProfile.
        :type xml_root_attributes: List[XmlAttribute]
        """

        self._xml_root_attributes = xml_root_attributes
