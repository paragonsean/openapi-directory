# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateUserEasyPassword(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_password: str=None, new_pw: str=None, reset_password: bool=None):
        """UpdateUserEasyPassword - a model defined in OpenAPI

        :param new_password: The new_password of this UpdateUserEasyPassword.
        :param new_pw: The new_pw of this UpdateUserEasyPassword.
        :param reset_password: The reset_password of this UpdateUserEasyPassword.
        """
        self.openapi_types = {
            'new_password': str,
            'new_pw': str,
            'reset_password': bool
        }

        self.attribute_map = {
            'new_password': 'NewPassword',
            'new_pw': 'NewPw',
            'reset_password': 'ResetPassword'
        }

        self._new_password = new_password
        self._new_pw = new_pw
        self._reset_password = reset_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUserEasyPassword':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUserEasyPassword of this UpdateUserEasyPassword.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_password(self):
        """Gets the new_password of this UpdateUserEasyPassword.

        Gets or sets the new sha1-hashed password.

        :return: The new_password of this UpdateUserEasyPassword.
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this UpdateUserEasyPassword.

        Gets or sets the new sha1-hashed password.

        :param new_password: The new_password of this UpdateUserEasyPassword.
        :type new_password: str
        """

        self._new_password = new_password

    @property
    def new_pw(self):
        """Gets the new_pw of this UpdateUserEasyPassword.

        Gets or sets the new password.

        :return: The new_pw of this UpdateUserEasyPassword.
        :rtype: str
        """
        return self._new_pw

    @new_pw.setter
    def new_pw(self, new_pw):
        """Sets the new_pw of this UpdateUserEasyPassword.

        Gets or sets the new password.

        :param new_pw: The new_pw of this UpdateUserEasyPassword.
        :type new_pw: str
        """

        self._new_pw = new_pw

    @property
    def reset_password(self):
        """Gets the reset_password of this UpdateUserEasyPassword.

        Gets or sets a value indicating whether to reset the password.

        :return: The reset_password of this UpdateUserEasyPassword.
        :rtype: bool
        """
        return self._reset_password

    @reset_password.setter
    def reset_password(self, reset_password):
        """Sets the reset_password of this UpdateUserEasyPassword.

        Gets or sets a value indicating whether to reset the password.

        :param reset_password: The reset_password of this UpdateUserEasyPassword.
        :type reset_password: bool
        """

        self._reset_password = reset_password
