# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dynamic_day_of_week import DynamicDayOfWeek
from openapi_server import util


class AccessSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_week: DynamicDayOfWeek=None, end_hour: float=None, id: int=None, start_hour: float=None, user_id: str=None):
        """AccessSchedule - a model defined in OpenAPI

        :param day_of_week: The day_of_week of this AccessSchedule.
        :param end_hour: The end_hour of this AccessSchedule.
        :param id: The id of this AccessSchedule.
        :param start_hour: The start_hour of this AccessSchedule.
        :param user_id: The user_id of this AccessSchedule.
        """
        self.openapi_types = {
            'day_of_week': DynamicDayOfWeek,
            'end_hour': float,
            'id': int,
            'start_hour': float,
            'user_id': str
        }

        self.attribute_map = {
            'day_of_week': 'DayOfWeek',
            'end_hour': 'EndHour',
            'id': 'Id',
            'start_hour': 'StartHour',
            'user_id': 'UserId'
        }

        self._day_of_week = day_of_week
        self._end_hour = end_hour
        self._id = id
        self._start_hour = start_hour
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessSchedule of this AccessSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_week(self):
        """Gets the day_of_week of this AccessSchedule.


        :return: The day_of_week of this AccessSchedule.
        :rtype: DynamicDayOfWeek
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this AccessSchedule.


        :param day_of_week: The day_of_week of this AccessSchedule.
        :type day_of_week: DynamicDayOfWeek
        """
        if day_of_week is None:
            raise ValueError("Invalid value for `day_of_week`, must not be `None`")

        self._day_of_week = day_of_week

    @property
    def end_hour(self):
        """Gets the end_hour of this AccessSchedule.

        Gets or sets the end hour.

        :return: The end_hour of this AccessSchedule.
        :rtype: float
        """
        return self._end_hour

    @end_hour.setter
    def end_hour(self, end_hour):
        """Sets the end_hour of this AccessSchedule.

        Gets or sets the end hour.

        :param end_hour: The end_hour of this AccessSchedule.
        :type end_hour: float
        """
        if end_hour is None:
            raise ValueError("Invalid value for `end_hour`, must not be `None`")

        self._end_hour = end_hour

    @property
    def id(self):
        """Gets the id of this AccessSchedule.

        Gets or sets the id of this instance.

        :return: The id of this AccessSchedule.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccessSchedule.

        Gets or sets the id of this instance.

        :param id: The id of this AccessSchedule.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def start_hour(self):
        """Gets the start_hour of this AccessSchedule.

        Gets or sets the start hour.

        :return: The start_hour of this AccessSchedule.
        :rtype: float
        """
        return self._start_hour

    @start_hour.setter
    def start_hour(self, start_hour):
        """Sets the start_hour of this AccessSchedule.

        Gets or sets the start hour.

        :param start_hour: The start_hour of this AccessSchedule.
        :type start_hour: float
        """
        if start_hour is None:
            raise ValueError("Invalid value for `start_hour`, must not be `None`")

        self._start_hour = start_hour

    @property
    def user_id(self):
        """Gets the user_id of this AccessSchedule.

        Gets or sets the id of the associated user.

        :return: The user_id of this AccessSchedule.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccessSchedule.

        Gets or sets the id of the associated user.

        :param user_id: The user_id of this AccessSchedule.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
