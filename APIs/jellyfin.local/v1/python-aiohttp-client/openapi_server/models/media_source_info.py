# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iso_type import IsoType
from openapi_server.models.media_attachment import MediaAttachment
from openapi_server.models.media_protocol import MediaProtocol
from openapi_server.models.media_source_type import MediaSourceType
from openapi_server.models.media_stream import MediaStream
from openapi_server.models.transport_stream_timestamp import TransportStreamTimestamp
from openapi_server.models.video3_d_format import Video3DFormat
from openapi_server.models.video_type import VideoType
from openapi_server import util


class MediaSourceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyze_duration_ms: int=None, bitrate: int=None, buffer_ms: int=None, container: str=None, default_audio_stream_index: int=None, default_subtitle_stream_index: int=None, e_tag: str=None, encoder_path: str=None, encoder_protocol: MediaProtocol=None, formats: List[str]=None, gen_pts_input: bool=None, id: str=None, ignore_dts: bool=None, ignore_index: bool=None, is_infinite_stream: bool=None, is_remote: bool=None, iso_type: IsoType=None, live_stream_id: str=None, media_attachments: List[MediaAttachment]=None, media_streams: List[MediaStream]=None, name: str=None, open_token: str=None, path: str=None, protocol: MediaProtocol=None, read_at_native_framerate: bool=None, required_http_headers: Dict[str, str]=None, requires_closing: bool=None, requires_looping: bool=None, requires_opening: bool=None, run_time_ticks: int=None, size: int=None, supports_direct_play: bool=None, supports_direct_stream: bool=None, supports_probing: bool=None, supports_transcoding: bool=None, timestamp: TransportStreamTimestamp=None, transcoding_container: str=None, transcoding_sub_protocol: str=None, transcoding_url: str=None, type: MediaSourceType=None, video3_d_format: Video3DFormat=None, video_type: VideoType=None):
        """MediaSourceInfo - a model defined in OpenAPI

        :param analyze_duration_ms: The analyze_duration_ms of this MediaSourceInfo.
        :param bitrate: The bitrate of this MediaSourceInfo.
        :param buffer_ms: The buffer_ms of this MediaSourceInfo.
        :param container: The container of this MediaSourceInfo.
        :param default_audio_stream_index: The default_audio_stream_index of this MediaSourceInfo.
        :param default_subtitle_stream_index: The default_subtitle_stream_index of this MediaSourceInfo.
        :param e_tag: The e_tag of this MediaSourceInfo.
        :param encoder_path: The encoder_path of this MediaSourceInfo.
        :param encoder_protocol: The encoder_protocol of this MediaSourceInfo.
        :param formats: The formats of this MediaSourceInfo.
        :param gen_pts_input: The gen_pts_input of this MediaSourceInfo.
        :param id: The id of this MediaSourceInfo.
        :param ignore_dts: The ignore_dts of this MediaSourceInfo.
        :param ignore_index: The ignore_index of this MediaSourceInfo.
        :param is_infinite_stream: The is_infinite_stream of this MediaSourceInfo.
        :param is_remote: The is_remote of this MediaSourceInfo.
        :param iso_type: The iso_type of this MediaSourceInfo.
        :param live_stream_id: The live_stream_id of this MediaSourceInfo.
        :param media_attachments: The media_attachments of this MediaSourceInfo.
        :param media_streams: The media_streams of this MediaSourceInfo.
        :param name: The name of this MediaSourceInfo.
        :param open_token: The open_token of this MediaSourceInfo.
        :param path: The path of this MediaSourceInfo.
        :param protocol: The protocol of this MediaSourceInfo.
        :param read_at_native_framerate: The read_at_native_framerate of this MediaSourceInfo.
        :param required_http_headers: The required_http_headers of this MediaSourceInfo.
        :param requires_closing: The requires_closing of this MediaSourceInfo.
        :param requires_looping: The requires_looping of this MediaSourceInfo.
        :param requires_opening: The requires_opening of this MediaSourceInfo.
        :param run_time_ticks: The run_time_ticks of this MediaSourceInfo.
        :param size: The size of this MediaSourceInfo.
        :param supports_direct_play: The supports_direct_play of this MediaSourceInfo.
        :param supports_direct_stream: The supports_direct_stream of this MediaSourceInfo.
        :param supports_probing: The supports_probing of this MediaSourceInfo.
        :param supports_transcoding: The supports_transcoding of this MediaSourceInfo.
        :param timestamp: The timestamp of this MediaSourceInfo.
        :param transcoding_container: The transcoding_container of this MediaSourceInfo.
        :param transcoding_sub_protocol: The transcoding_sub_protocol of this MediaSourceInfo.
        :param transcoding_url: The transcoding_url of this MediaSourceInfo.
        :param type: The type of this MediaSourceInfo.
        :param video3_d_format: The video3_d_format of this MediaSourceInfo.
        :param video_type: The video_type of this MediaSourceInfo.
        """
        self.openapi_types = {
            'analyze_duration_ms': int,
            'bitrate': int,
            'buffer_ms': int,
            'container': str,
            'default_audio_stream_index': int,
            'default_subtitle_stream_index': int,
            'e_tag': str,
            'encoder_path': str,
            'encoder_protocol': MediaProtocol,
            'formats': List[str],
            'gen_pts_input': bool,
            'id': str,
            'ignore_dts': bool,
            'ignore_index': bool,
            'is_infinite_stream': bool,
            'is_remote': bool,
            'iso_type': IsoType,
            'live_stream_id': str,
            'media_attachments': List[MediaAttachment],
            'media_streams': List[MediaStream],
            'name': str,
            'open_token': str,
            'path': str,
            'protocol': MediaProtocol,
            'read_at_native_framerate': bool,
            'required_http_headers': Dict[str, str],
            'requires_closing': bool,
            'requires_looping': bool,
            'requires_opening': bool,
            'run_time_ticks': int,
            'size': int,
            'supports_direct_play': bool,
            'supports_direct_stream': bool,
            'supports_probing': bool,
            'supports_transcoding': bool,
            'timestamp': TransportStreamTimestamp,
            'transcoding_container': str,
            'transcoding_sub_protocol': str,
            'transcoding_url': str,
            'type': MediaSourceType,
            'video3_d_format': Video3DFormat,
            'video_type': VideoType
        }

        self.attribute_map = {
            'analyze_duration_ms': 'AnalyzeDurationMs',
            'bitrate': 'Bitrate',
            'buffer_ms': 'BufferMs',
            'container': 'Container',
            'default_audio_stream_index': 'DefaultAudioStreamIndex',
            'default_subtitle_stream_index': 'DefaultSubtitleStreamIndex',
            'e_tag': 'ETag',
            'encoder_path': 'EncoderPath',
            'encoder_protocol': 'EncoderProtocol',
            'formats': 'Formats',
            'gen_pts_input': 'GenPtsInput',
            'id': 'Id',
            'ignore_dts': 'IgnoreDts',
            'ignore_index': 'IgnoreIndex',
            'is_infinite_stream': 'IsInfiniteStream',
            'is_remote': 'IsRemote',
            'iso_type': 'IsoType',
            'live_stream_id': 'LiveStreamId',
            'media_attachments': 'MediaAttachments',
            'media_streams': 'MediaStreams',
            'name': 'Name',
            'open_token': 'OpenToken',
            'path': 'Path',
            'protocol': 'Protocol',
            'read_at_native_framerate': 'ReadAtNativeFramerate',
            'required_http_headers': 'RequiredHttpHeaders',
            'requires_closing': 'RequiresClosing',
            'requires_looping': 'RequiresLooping',
            'requires_opening': 'RequiresOpening',
            'run_time_ticks': 'RunTimeTicks',
            'size': 'Size',
            'supports_direct_play': 'SupportsDirectPlay',
            'supports_direct_stream': 'SupportsDirectStream',
            'supports_probing': 'SupportsProbing',
            'supports_transcoding': 'SupportsTranscoding',
            'timestamp': 'Timestamp',
            'transcoding_container': 'TranscodingContainer',
            'transcoding_sub_protocol': 'TranscodingSubProtocol',
            'transcoding_url': 'TranscodingUrl',
            'type': 'Type',
            'video3_d_format': 'Video3DFormat',
            'video_type': 'VideoType'
        }

        self._analyze_duration_ms = analyze_duration_ms
        self._bitrate = bitrate
        self._buffer_ms = buffer_ms
        self._container = container
        self._default_audio_stream_index = default_audio_stream_index
        self._default_subtitle_stream_index = default_subtitle_stream_index
        self._e_tag = e_tag
        self._encoder_path = encoder_path
        self._encoder_protocol = encoder_protocol
        self._formats = formats
        self._gen_pts_input = gen_pts_input
        self._id = id
        self._ignore_dts = ignore_dts
        self._ignore_index = ignore_index
        self._is_infinite_stream = is_infinite_stream
        self._is_remote = is_remote
        self._iso_type = iso_type
        self._live_stream_id = live_stream_id
        self._media_attachments = media_attachments
        self._media_streams = media_streams
        self._name = name
        self._open_token = open_token
        self._path = path
        self._protocol = protocol
        self._read_at_native_framerate = read_at_native_framerate
        self._required_http_headers = required_http_headers
        self._requires_closing = requires_closing
        self._requires_looping = requires_looping
        self._requires_opening = requires_opening
        self._run_time_ticks = run_time_ticks
        self._size = size
        self._supports_direct_play = supports_direct_play
        self._supports_direct_stream = supports_direct_stream
        self._supports_probing = supports_probing
        self._supports_transcoding = supports_transcoding
        self._timestamp = timestamp
        self._transcoding_container = transcoding_container
        self._transcoding_sub_protocol = transcoding_sub_protocol
        self._transcoding_url = transcoding_url
        self._type = type
        self._video3_d_format = video3_d_format
        self._video_type = video_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaSourceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaSourceInfo of this MediaSourceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyze_duration_ms(self):
        """Gets the analyze_duration_ms of this MediaSourceInfo.


        :return: The analyze_duration_ms of this MediaSourceInfo.
        :rtype: int
        """
        return self._analyze_duration_ms

    @analyze_duration_ms.setter
    def analyze_duration_ms(self, analyze_duration_ms):
        """Sets the analyze_duration_ms of this MediaSourceInfo.


        :param analyze_duration_ms: The analyze_duration_ms of this MediaSourceInfo.
        :type analyze_duration_ms: int
        """

        self._analyze_duration_ms = analyze_duration_ms

    @property
    def bitrate(self):
        """Gets the bitrate of this MediaSourceInfo.


        :return: The bitrate of this MediaSourceInfo.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this MediaSourceInfo.


        :param bitrate: The bitrate of this MediaSourceInfo.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def buffer_ms(self):
        """Gets the buffer_ms of this MediaSourceInfo.


        :return: The buffer_ms of this MediaSourceInfo.
        :rtype: int
        """
        return self._buffer_ms

    @buffer_ms.setter
    def buffer_ms(self, buffer_ms):
        """Sets the buffer_ms of this MediaSourceInfo.


        :param buffer_ms: The buffer_ms of this MediaSourceInfo.
        :type buffer_ms: int
        """

        self._buffer_ms = buffer_ms

    @property
    def container(self):
        """Gets the container of this MediaSourceInfo.


        :return: The container of this MediaSourceInfo.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this MediaSourceInfo.


        :param container: The container of this MediaSourceInfo.
        :type container: str
        """

        self._container = container

    @property
    def default_audio_stream_index(self):
        """Gets the default_audio_stream_index of this MediaSourceInfo.


        :return: The default_audio_stream_index of this MediaSourceInfo.
        :rtype: int
        """
        return self._default_audio_stream_index

    @default_audio_stream_index.setter
    def default_audio_stream_index(self, default_audio_stream_index):
        """Sets the default_audio_stream_index of this MediaSourceInfo.


        :param default_audio_stream_index: The default_audio_stream_index of this MediaSourceInfo.
        :type default_audio_stream_index: int
        """

        self._default_audio_stream_index = default_audio_stream_index

    @property
    def default_subtitle_stream_index(self):
        """Gets the default_subtitle_stream_index of this MediaSourceInfo.


        :return: The default_subtitle_stream_index of this MediaSourceInfo.
        :rtype: int
        """
        return self._default_subtitle_stream_index

    @default_subtitle_stream_index.setter
    def default_subtitle_stream_index(self, default_subtitle_stream_index):
        """Sets the default_subtitle_stream_index of this MediaSourceInfo.


        :param default_subtitle_stream_index: The default_subtitle_stream_index of this MediaSourceInfo.
        :type default_subtitle_stream_index: int
        """

        self._default_subtitle_stream_index = default_subtitle_stream_index

    @property
    def e_tag(self):
        """Gets the e_tag of this MediaSourceInfo.


        :return: The e_tag of this MediaSourceInfo.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this MediaSourceInfo.


        :param e_tag: The e_tag of this MediaSourceInfo.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def encoder_path(self):
        """Gets the encoder_path of this MediaSourceInfo.


        :return: The encoder_path of this MediaSourceInfo.
        :rtype: str
        """
        return self._encoder_path

    @encoder_path.setter
    def encoder_path(self, encoder_path):
        """Sets the encoder_path of this MediaSourceInfo.


        :param encoder_path: The encoder_path of this MediaSourceInfo.
        :type encoder_path: str
        """

        self._encoder_path = encoder_path

    @property
    def encoder_protocol(self):
        """Gets the encoder_protocol of this MediaSourceInfo.


        :return: The encoder_protocol of this MediaSourceInfo.
        :rtype: MediaProtocol
        """
        return self._encoder_protocol

    @encoder_protocol.setter
    def encoder_protocol(self, encoder_protocol):
        """Sets the encoder_protocol of this MediaSourceInfo.


        :param encoder_protocol: The encoder_protocol of this MediaSourceInfo.
        :type encoder_protocol: MediaProtocol
        """

        self._encoder_protocol = encoder_protocol

    @property
    def formats(self):
        """Gets the formats of this MediaSourceInfo.


        :return: The formats of this MediaSourceInfo.
        :rtype: List[str]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this MediaSourceInfo.


        :param formats: The formats of this MediaSourceInfo.
        :type formats: List[str]
        """

        self._formats = formats

    @property
    def gen_pts_input(self):
        """Gets the gen_pts_input of this MediaSourceInfo.


        :return: The gen_pts_input of this MediaSourceInfo.
        :rtype: bool
        """
        return self._gen_pts_input

    @gen_pts_input.setter
    def gen_pts_input(self, gen_pts_input):
        """Sets the gen_pts_input of this MediaSourceInfo.


        :param gen_pts_input: The gen_pts_input of this MediaSourceInfo.
        :type gen_pts_input: bool
        """

        self._gen_pts_input = gen_pts_input

    @property
    def id(self):
        """Gets the id of this MediaSourceInfo.


        :return: The id of this MediaSourceInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MediaSourceInfo.


        :param id: The id of this MediaSourceInfo.
        :type id: str
        """

        self._id = id

    @property
    def ignore_dts(self):
        """Gets the ignore_dts of this MediaSourceInfo.


        :return: The ignore_dts of this MediaSourceInfo.
        :rtype: bool
        """
        return self._ignore_dts

    @ignore_dts.setter
    def ignore_dts(self, ignore_dts):
        """Sets the ignore_dts of this MediaSourceInfo.


        :param ignore_dts: The ignore_dts of this MediaSourceInfo.
        :type ignore_dts: bool
        """

        self._ignore_dts = ignore_dts

    @property
    def ignore_index(self):
        """Gets the ignore_index of this MediaSourceInfo.


        :return: The ignore_index of this MediaSourceInfo.
        :rtype: bool
        """
        return self._ignore_index

    @ignore_index.setter
    def ignore_index(self, ignore_index):
        """Sets the ignore_index of this MediaSourceInfo.


        :param ignore_index: The ignore_index of this MediaSourceInfo.
        :type ignore_index: bool
        """

        self._ignore_index = ignore_index

    @property
    def is_infinite_stream(self):
        """Gets the is_infinite_stream of this MediaSourceInfo.


        :return: The is_infinite_stream of this MediaSourceInfo.
        :rtype: bool
        """
        return self._is_infinite_stream

    @is_infinite_stream.setter
    def is_infinite_stream(self, is_infinite_stream):
        """Sets the is_infinite_stream of this MediaSourceInfo.


        :param is_infinite_stream: The is_infinite_stream of this MediaSourceInfo.
        :type is_infinite_stream: bool
        """

        self._is_infinite_stream = is_infinite_stream

    @property
    def is_remote(self):
        """Gets the is_remote of this MediaSourceInfo.

        Differentiate internet url vs local network.

        :return: The is_remote of this MediaSourceInfo.
        :rtype: bool
        """
        return self._is_remote

    @is_remote.setter
    def is_remote(self, is_remote):
        """Sets the is_remote of this MediaSourceInfo.

        Differentiate internet url vs local network.

        :param is_remote: The is_remote of this MediaSourceInfo.
        :type is_remote: bool
        """

        self._is_remote = is_remote

    @property
    def iso_type(self):
        """Gets the iso_type of this MediaSourceInfo.


        :return: The iso_type of this MediaSourceInfo.
        :rtype: IsoType
        """
        return self._iso_type

    @iso_type.setter
    def iso_type(self, iso_type):
        """Sets the iso_type of this MediaSourceInfo.


        :param iso_type: The iso_type of this MediaSourceInfo.
        :type iso_type: IsoType
        """

        self._iso_type = iso_type

    @property
    def live_stream_id(self):
        """Gets the live_stream_id of this MediaSourceInfo.


        :return: The live_stream_id of this MediaSourceInfo.
        :rtype: str
        """
        return self._live_stream_id

    @live_stream_id.setter
    def live_stream_id(self, live_stream_id):
        """Sets the live_stream_id of this MediaSourceInfo.


        :param live_stream_id: The live_stream_id of this MediaSourceInfo.
        :type live_stream_id: str
        """

        self._live_stream_id = live_stream_id

    @property
    def media_attachments(self):
        """Gets the media_attachments of this MediaSourceInfo.


        :return: The media_attachments of this MediaSourceInfo.
        :rtype: List[MediaAttachment]
        """
        return self._media_attachments

    @media_attachments.setter
    def media_attachments(self, media_attachments):
        """Sets the media_attachments of this MediaSourceInfo.


        :param media_attachments: The media_attachments of this MediaSourceInfo.
        :type media_attachments: List[MediaAttachment]
        """

        self._media_attachments = media_attachments

    @property
    def media_streams(self):
        """Gets the media_streams of this MediaSourceInfo.


        :return: The media_streams of this MediaSourceInfo.
        :rtype: List[MediaStream]
        """
        return self._media_streams

    @media_streams.setter
    def media_streams(self, media_streams):
        """Sets the media_streams of this MediaSourceInfo.


        :param media_streams: The media_streams of this MediaSourceInfo.
        :type media_streams: List[MediaStream]
        """

        self._media_streams = media_streams

    @property
    def name(self):
        """Gets the name of this MediaSourceInfo.


        :return: The name of this MediaSourceInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediaSourceInfo.


        :param name: The name of this MediaSourceInfo.
        :type name: str
        """

        self._name = name

    @property
    def open_token(self):
        """Gets the open_token of this MediaSourceInfo.


        :return: The open_token of this MediaSourceInfo.
        :rtype: str
        """
        return self._open_token

    @open_token.setter
    def open_token(self, open_token):
        """Sets the open_token of this MediaSourceInfo.


        :param open_token: The open_token of this MediaSourceInfo.
        :type open_token: str
        """

        self._open_token = open_token

    @property
    def path(self):
        """Gets the path of this MediaSourceInfo.


        :return: The path of this MediaSourceInfo.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MediaSourceInfo.


        :param path: The path of this MediaSourceInfo.
        :type path: str
        """

        self._path = path

    @property
    def protocol(self):
        """Gets the protocol of this MediaSourceInfo.


        :return: The protocol of this MediaSourceInfo.
        :rtype: MediaProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this MediaSourceInfo.


        :param protocol: The protocol of this MediaSourceInfo.
        :type protocol: MediaProtocol
        """

        self._protocol = protocol

    @property
    def read_at_native_framerate(self):
        """Gets the read_at_native_framerate of this MediaSourceInfo.


        :return: The read_at_native_framerate of this MediaSourceInfo.
        :rtype: bool
        """
        return self._read_at_native_framerate

    @read_at_native_framerate.setter
    def read_at_native_framerate(self, read_at_native_framerate):
        """Sets the read_at_native_framerate of this MediaSourceInfo.


        :param read_at_native_framerate: The read_at_native_framerate of this MediaSourceInfo.
        :type read_at_native_framerate: bool
        """

        self._read_at_native_framerate = read_at_native_framerate

    @property
    def required_http_headers(self):
        """Gets the required_http_headers of this MediaSourceInfo.


        :return: The required_http_headers of this MediaSourceInfo.
        :rtype: Dict[str, str]
        """
        return self._required_http_headers

    @required_http_headers.setter
    def required_http_headers(self, required_http_headers):
        """Sets the required_http_headers of this MediaSourceInfo.


        :param required_http_headers: The required_http_headers of this MediaSourceInfo.
        :type required_http_headers: Dict[str, str]
        """

        self._required_http_headers = required_http_headers

    @property
    def requires_closing(self):
        """Gets the requires_closing of this MediaSourceInfo.


        :return: The requires_closing of this MediaSourceInfo.
        :rtype: bool
        """
        return self._requires_closing

    @requires_closing.setter
    def requires_closing(self, requires_closing):
        """Sets the requires_closing of this MediaSourceInfo.


        :param requires_closing: The requires_closing of this MediaSourceInfo.
        :type requires_closing: bool
        """

        self._requires_closing = requires_closing

    @property
    def requires_looping(self):
        """Gets the requires_looping of this MediaSourceInfo.


        :return: The requires_looping of this MediaSourceInfo.
        :rtype: bool
        """
        return self._requires_looping

    @requires_looping.setter
    def requires_looping(self, requires_looping):
        """Sets the requires_looping of this MediaSourceInfo.


        :param requires_looping: The requires_looping of this MediaSourceInfo.
        :type requires_looping: bool
        """

        self._requires_looping = requires_looping

    @property
    def requires_opening(self):
        """Gets the requires_opening of this MediaSourceInfo.


        :return: The requires_opening of this MediaSourceInfo.
        :rtype: bool
        """
        return self._requires_opening

    @requires_opening.setter
    def requires_opening(self, requires_opening):
        """Sets the requires_opening of this MediaSourceInfo.


        :param requires_opening: The requires_opening of this MediaSourceInfo.
        :type requires_opening: bool
        """

        self._requires_opening = requires_opening

    @property
    def run_time_ticks(self):
        """Gets the run_time_ticks of this MediaSourceInfo.


        :return: The run_time_ticks of this MediaSourceInfo.
        :rtype: int
        """
        return self._run_time_ticks

    @run_time_ticks.setter
    def run_time_ticks(self, run_time_ticks):
        """Sets the run_time_ticks of this MediaSourceInfo.


        :param run_time_ticks: The run_time_ticks of this MediaSourceInfo.
        :type run_time_ticks: int
        """

        self._run_time_ticks = run_time_ticks

    @property
    def size(self):
        """Gets the size of this MediaSourceInfo.


        :return: The size of this MediaSourceInfo.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MediaSourceInfo.


        :param size: The size of this MediaSourceInfo.
        :type size: int
        """

        self._size = size

    @property
    def supports_direct_play(self):
        """Gets the supports_direct_play of this MediaSourceInfo.


        :return: The supports_direct_play of this MediaSourceInfo.
        :rtype: bool
        """
        return self._supports_direct_play

    @supports_direct_play.setter
    def supports_direct_play(self, supports_direct_play):
        """Sets the supports_direct_play of this MediaSourceInfo.


        :param supports_direct_play: The supports_direct_play of this MediaSourceInfo.
        :type supports_direct_play: bool
        """

        self._supports_direct_play = supports_direct_play

    @property
    def supports_direct_stream(self):
        """Gets the supports_direct_stream of this MediaSourceInfo.


        :return: The supports_direct_stream of this MediaSourceInfo.
        :rtype: bool
        """
        return self._supports_direct_stream

    @supports_direct_stream.setter
    def supports_direct_stream(self, supports_direct_stream):
        """Sets the supports_direct_stream of this MediaSourceInfo.


        :param supports_direct_stream: The supports_direct_stream of this MediaSourceInfo.
        :type supports_direct_stream: bool
        """

        self._supports_direct_stream = supports_direct_stream

    @property
    def supports_probing(self):
        """Gets the supports_probing of this MediaSourceInfo.


        :return: The supports_probing of this MediaSourceInfo.
        :rtype: bool
        """
        return self._supports_probing

    @supports_probing.setter
    def supports_probing(self, supports_probing):
        """Sets the supports_probing of this MediaSourceInfo.


        :param supports_probing: The supports_probing of this MediaSourceInfo.
        :type supports_probing: bool
        """

        self._supports_probing = supports_probing

    @property
    def supports_transcoding(self):
        """Gets the supports_transcoding of this MediaSourceInfo.


        :return: The supports_transcoding of this MediaSourceInfo.
        :rtype: bool
        """
        return self._supports_transcoding

    @supports_transcoding.setter
    def supports_transcoding(self, supports_transcoding):
        """Sets the supports_transcoding of this MediaSourceInfo.


        :param supports_transcoding: The supports_transcoding of this MediaSourceInfo.
        :type supports_transcoding: bool
        """

        self._supports_transcoding = supports_transcoding

    @property
    def timestamp(self):
        """Gets the timestamp of this MediaSourceInfo.


        :return: The timestamp of this MediaSourceInfo.
        :rtype: TransportStreamTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MediaSourceInfo.


        :param timestamp: The timestamp of this MediaSourceInfo.
        :type timestamp: TransportStreamTimestamp
        """

        self._timestamp = timestamp

    @property
    def transcoding_container(self):
        """Gets the transcoding_container of this MediaSourceInfo.


        :return: The transcoding_container of this MediaSourceInfo.
        :rtype: str
        """
        return self._transcoding_container

    @transcoding_container.setter
    def transcoding_container(self, transcoding_container):
        """Sets the transcoding_container of this MediaSourceInfo.


        :param transcoding_container: The transcoding_container of this MediaSourceInfo.
        :type transcoding_container: str
        """

        self._transcoding_container = transcoding_container

    @property
    def transcoding_sub_protocol(self):
        """Gets the transcoding_sub_protocol of this MediaSourceInfo.


        :return: The transcoding_sub_protocol of this MediaSourceInfo.
        :rtype: str
        """
        return self._transcoding_sub_protocol

    @transcoding_sub_protocol.setter
    def transcoding_sub_protocol(self, transcoding_sub_protocol):
        """Sets the transcoding_sub_protocol of this MediaSourceInfo.


        :param transcoding_sub_protocol: The transcoding_sub_protocol of this MediaSourceInfo.
        :type transcoding_sub_protocol: str
        """

        self._transcoding_sub_protocol = transcoding_sub_protocol

    @property
    def transcoding_url(self):
        """Gets the transcoding_url of this MediaSourceInfo.


        :return: The transcoding_url of this MediaSourceInfo.
        :rtype: str
        """
        return self._transcoding_url

    @transcoding_url.setter
    def transcoding_url(self, transcoding_url):
        """Sets the transcoding_url of this MediaSourceInfo.


        :param transcoding_url: The transcoding_url of this MediaSourceInfo.
        :type transcoding_url: str
        """

        self._transcoding_url = transcoding_url

    @property
    def type(self):
        """Gets the type of this MediaSourceInfo.


        :return: The type of this MediaSourceInfo.
        :rtype: MediaSourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MediaSourceInfo.


        :param type: The type of this MediaSourceInfo.
        :type type: MediaSourceType
        """

        self._type = type

    @property
    def video3_d_format(self):
        """Gets the video3_d_format of this MediaSourceInfo.


        :return: The video3_d_format of this MediaSourceInfo.
        :rtype: Video3DFormat
        """
        return self._video3_d_format

    @video3_d_format.setter
    def video3_d_format(self, video3_d_format):
        """Sets the video3_d_format of this MediaSourceInfo.


        :param video3_d_format: The video3_d_format of this MediaSourceInfo.
        :type video3_d_format: Video3DFormat
        """

        self._video3_d_format = video3_d_format

    @property
    def video_type(self):
        """Gets the video_type of this MediaSourceInfo.


        :return: The video_type of this MediaSourceInfo.
        :rtype: VideoType
        """
        return self._video_type

    @video_type.setter
    def video_type(self, video_type):
        """Sets the video_type of this MediaSourceInfo.


        :param video_type: The video_type of this MediaSourceInfo.
        :type video_type: VideoType
        """

        self._video_type = video_type
