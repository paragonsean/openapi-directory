# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_configuration import UserConfiguration
from openapi_server.models.user_policy import UserPolicy
from openapi_server import util


class UserDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: UserConfiguration=None, enable_auto_login: bool=None, has_configured_easy_password: bool=None, has_configured_password: bool=None, has_password: bool=None, id: str=None, last_activity_date: datetime=None, last_login_date: datetime=None, name: str=None, policy: UserPolicy=None, primary_image_aspect_ratio: float=None, primary_image_tag: str=None, server_id: str=None, server_name: str=None):
        """UserDto - a model defined in OpenAPI

        :param configuration: The configuration of this UserDto.
        :param enable_auto_login: The enable_auto_login of this UserDto.
        :param has_configured_easy_password: The has_configured_easy_password of this UserDto.
        :param has_configured_password: The has_configured_password of this UserDto.
        :param has_password: The has_password of this UserDto.
        :param id: The id of this UserDto.
        :param last_activity_date: The last_activity_date of this UserDto.
        :param last_login_date: The last_login_date of this UserDto.
        :param name: The name of this UserDto.
        :param policy: The policy of this UserDto.
        :param primary_image_aspect_ratio: The primary_image_aspect_ratio of this UserDto.
        :param primary_image_tag: The primary_image_tag of this UserDto.
        :param server_id: The server_id of this UserDto.
        :param server_name: The server_name of this UserDto.
        """
        self.openapi_types = {
            'configuration': UserConfiguration,
            'enable_auto_login': bool,
            'has_configured_easy_password': bool,
            'has_configured_password': bool,
            'has_password': bool,
            'id': str,
            'last_activity_date': datetime,
            'last_login_date': datetime,
            'name': str,
            'policy': UserPolicy,
            'primary_image_aspect_ratio': float,
            'primary_image_tag': str,
            'server_id': str,
            'server_name': str
        }

        self.attribute_map = {
            'configuration': 'Configuration',
            'enable_auto_login': 'EnableAutoLogin',
            'has_configured_easy_password': 'HasConfiguredEasyPassword',
            'has_configured_password': 'HasConfiguredPassword',
            'has_password': 'HasPassword',
            'id': 'Id',
            'last_activity_date': 'LastActivityDate',
            'last_login_date': 'LastLoginDate',
            'name': 'Name',
            'policy': 'Policy',
            'primary_image_aspect_ratio': 'PrimaryImageAspectRatio',
            'primary_image_tag': 'PrimaryImageTag',
            'server_id': 'ServerId',
            'server_name': 'ServerName'
        }

        self._configuration = configuration
        self._enable_auto_login = enable_auto_login
        self._has_configured_easy_password = has_configured_easy_password
        self._has_configured_password = has_configured_password
        self._has_password = has_password
        self._id = id
        self._last_activity_date = last_activity_date
        self._last_login_date = last_login_date
        self._name = name
        self._policy = policy
        self._primary_image_aspect_ratio = primary_image_aspect_ratio
        self._primary_image_tag = primary_image_tag
        self._server_id = server_id
        self._server_name = server_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDto of this UserDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this UserDto.


        :return: The configuration of this UserDto.
        :rtype: UserConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this UserDto.


        :param configuration: The configuration of this UserDto.
        :type configuration: UserConfiguration
        """

        self._configuration = configuration

    @property
    def enable_auto_login(self):
        """Gets the enable_auto_login of this UserDto.

        Gets or sets whether async login is enabled or not.

        :return: The enable_auto_login of this UserDto.
        :rtype: bool
        """
        return self._enable_auto_login

    @enable_auto_login.setter
    def enable_auto_login(self, enable_auto_login):
        """Sets the enable_auto_login of this UserDto.

        Gets or sets whether async login is enabled or not.

        :param enable_auto_login: The enable_auto_login of this UserDto.
        :type enable_auto_login: bool
        """

        self._enable_auto_login = enable_auto_login

    @property
    def has_configured_easy_password(self):
        """Gets the has_configured_easy_password of this UserDto.

        Gets or sets a value indicating whether this instance has configured easy password.

        :return: The has_configured_easy_password of this UserDto.
        :rtype: bool
        """
        return self._has_configured_easy_password

    @has_configured_easy_password.setter
    def has_configured_easy_password(self, has_configured_easy_password):
        """Sets the has_configured_easy_password of this UserDto.

        Gets or sets a value indicating whether this instance has configured easy password.

        :param has_configured_easy_password: The has_configured_easy_password of this UserDto.
        :type has_configured_easy_password: bool
        """

        self._has_configured_easy_password = has_configured_easy_password

    @property
    def has_configured_password(self):
        """Gets the has_configured_password of this UserDto.

        Gets or sets a value indicating whether this instance has configured password.

        :return: The has_configured_password of this UserDto.
        :rtype: bool
        """
        return self._has_configured_password

    @has_configured_password.setter
    def has_configured_password(self, has_configured_password):
        """Sets the has_configured_password of this UserDto.

        Gets or sets a value indicating whether this instance has configured password.

        :param has_configured_password: The has_configured_password of this UserDto.
        :type has_configured_password: bool
        """

        self._has_configured_password = has_configured_password

    @property
    def has_password(self):
        """Gets the has_password of this UserDto.

        Gets or sets a value indicating whether this instance has password.

        :return: The has_password of this UserDto.
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this UserDto.

        Gets or sets a value indicating whether this instance has password.

        :param has_password: The has_password of this UserDto.
        :type has_password: bool
        """

        self._has_password = has_password

    @property
    def id(self):
        """Gets the id of this UserDto.

        Gets or sets the id.

        :return: The id of this UserDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDto.

        Gets or sets the id.

        :param id: The id of this UserDto.
        :type id: str
        """

        self._id = id

    @property
    def last_activity_date(self):
        """Gets the last_activity_date of this UserDto.

        Gets or sets the last activity date.

        :return: The last_activity_date of this UserDto.
        :rtype: datetime
        """
        return self._last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, last_activity_date):
        """Sets the last_activity_date of this UserDto.

        Gets or sets the last activity date.

        :param last_activity_date: The last_activity_date of this UserDto.
        :type last_activity_date: datetime
        """

        self._last_activity_date = last_activity_date

    @property
    def last_login_date(self):
        """Gets the last_login_date of this UserDto.

        Gets or sets the last login date.

        :return: The last_login_date of this UserDto.
        :rtype: datetime
        """
        return self._last_login_date

    @last_login_date.setter
    def last_login_date(self, last_login_date):
        """Sets the last_login_date of this UserDto.

        Gets or sets the last login date.

        :param last_login_date: The last_login_date of this UserDto.
        :type last_login_date: datetime
        """

        self._last_login_date = last_login_date

    @property
    def name(self):
        """Gets the name of this UserDto.

        Gets or sets the name.

        :return: The name of this UserDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserDto.

        Gets or sets the name.

        :param name: The name of this UserDto.
        :type name: str
        """

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this UserDto.


        :return: The policy of this UserDto.
        :rtype: UserPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this UserDto.


        :param policy: The policy of this UserDto.
        :type policy: UserPolicy
        """

        self._policy = policy

    @property
    def primary_image_aspect_ratio(self):
        """Gets the primary_image_aspect_ratio of this UserDto.

        Gets or sets the primary image aspect ratio.

        :return: The primary_image_aspect_ratio of this UserDto.
        :rtype: float
        """
        return self._primary_image_aspect_ratio

    @primary_image_aspect_ratio.setter
    def primary_image_aspect_ratio(self, primary_image_aspect_ratio):
        """Sets the primary_image_aspect_ratio of this UserDto.

        Gets or sets the primary image aspect ratio.

        :param primary_image_aspect_ratio: The primary_image_aspect_ratio of this UserDto.
        :type primary_image_aspect_ratio: float
        """

        self._primary_image_aspect_ratio = primary_image_aspect_ratio

    @property
    def primary_image_tag(self):
        """Gets the primary_image_tag of this UserDto.

        Gets or sets the primary image tag.

        :return: The primary_image_tag of this UserDto.
        :rtype: str
        """
        return self._primary_image_tag

    @primary_image_tag.setter
    def primary_image_tag(self, primary_image_tag):
        """Sets the primary_image_tag of this UserDto.

        Gets or sets the primary image tag.

        :param primary_image_tag: The primary_image_tag of this UserDto.
        :type primary_image_tag: str
        """

        self._primary_image_tag = primary_image_tag

    @property
    def server_id(self):
        """Gets the server_id of this UserDto.

        Gets or sets the server identifier.

        :return: The server_id of this UserDto.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this UserDto.

        Gets or sets the server identifier.

        :param server_id: The server_id of this UserDto.
        :type server_id: str
        """

        self._server_id = server_id

    @property
    def server_name(self):
        """Gets the server_name of this UserDto.

        Gets or sets the name of the server.  This is not used by the server and is for client-side usage only.

        :return: The server_name of this UserDto.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this UserDto.

        Gets or sets the name of the server.  This is not used by the server and is for client-side usage only.

        :param server_name: The server_name of this UserDto.
        :type server_name: str
        """

        self._server_name = server_name
