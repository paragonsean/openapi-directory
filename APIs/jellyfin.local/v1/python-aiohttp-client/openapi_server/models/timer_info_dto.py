# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_item_dto import BaseItemDto
from openapi_server.models.keep_until import KeepUntil
from openapi_server.models.recording_status import RecordingStatus
from openapi_server import util


class TimerInfoDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_name: str=None, channel_primary_image_tag: str=None, end_date: datetime=None, external_channel_id: str=None, external_id: str=None, external_program_id: str=None, external_series_timer_id: str=None, id: str=None, is_post_padding_required: bool=None, is_pre_padding_required: bool=None, keep_until: KeepUntil=None, name: str=None, overview: str=None, parent_backdrop_image_tags: List[str]=None, parent_backdrop_item_id: str=None, post_padding_seconds: int=None, pre_padding_seconds: int=None, priority: int=None, program_id: str=None, program_info: BaseItemDto=None, run_time_ticks: int=None, series_timer_id: str=None, server_id: str=None, service_name: str=None, start_date: datetime=None, status: RecordingStatus=None, type: str=None):
        """TimerInfoDto - a model defined in OpenAPI

        :param channel_id: The channel_id of this TimerInfoDto.
        :param channel_name: The channel_name of this TimerInfoDto.
        :param channel_primary_image_tag: The channel_primary_image_tag of this TimerInfoDto.
        :param end_date: The end_date of this TimerInfoDto.
        :param external_channel_id: The external_channel_id of this TimerInfoDto.
        :param external_id: The external_id of this TimerInfoDto.
        :param external_program_id: The external_program_id of this TimerInfoDto.
        :param external_series_timer_id: The external_series_timer_id of this TimerInfoDto.
        :param id: The id of this TimerInfoDto.
        :param is_post_padding_required: The is_post_padding_required of this TimerInfoDto.
        :param is_pre_padding_required: The is_pre_padding_required of this TimerInfoDto.
        :param keep_until: The keep_until of this TimerInfoDto.
        :param name: The name of this TimerInfoDto.
        :param overview: The overview of this TimerInfoDto.
        :param parent_backdrop_image_tags: The parent_backdrop_image_tags of this TimerInfoDto.
        :param parent_backdrop_item_id: The parent_backdrop_item_id of this TimerInfoDto.
        :param post_padding_seconds: The post_padding_seconds of this TimerInfoDto.
        :param pre_padding_seconds: The pre_padding_seconds of this TimerInfoDto.
        :param priority: The priority of this TimerInfoDto.
        :param program_id: The program_id of this TimerInfoDto.
        :param program_info: The program_info of this TimerInfoDto.
        :param run_time_ticks: The run_time_ticks of this TimerInfoDto.
        :param series_timer_id: The series_timer_id of this TimerInfoDto.
        :param server_id: The server_id of this TimerInfoDto.
        :param service_name: The service_name of this TimerInfoDto.
        :param start_date: The start_date of this TimerInfoDto.
        :param status: The status of this TimerInfoDto.
        :param type: The type of this TimerInfoDto.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_name': str,
            'channel_primary_image_tag': str,
            'end_date': datetime,
            'external_channel_id': str,
            'external_id': str,
            'external_program_id': str,
            'external_series_timer_id': str,
            'id': str,
            'is_post_padding_required': bool,
            'is_pre_padding_required': bool,
            'keep_until': KeepUntil,
            'name': str,
            'overview': str,
            'parent_backdrop_image_tags': List[str],
            'parent_backdrop_item_id': str,
            'post_padding_seconds': int,
            'pre_padding_seconds': int,
            'priority': int,
            'program_id': str,
            'program_info': BaseItemDto,
            'run_time_ticks': int,
            'series_timer_id': str,
            'server_id': str,
            'service_name': str,
            'start_date': datetime,
            'status': RecordingStatus,
            'type': str
        }

        self.attribute_map = {
            'channel_id': 'ChannelId',
            'channel_name': 'ChannelName',
            'channel_primary_image_tag': 'ChannelPrimaryImageTag',
            'end_date': 'EndDate',
            'external_channel_id': 'ExternalChannelId',
            'external_id': 'ExternalId',
            'external_program_id': 'ExternalProgramId',
            'external_series_timer_id': 'ExternalSeriesTimerId',
            'id': 'Id',
            'is_post_padding_required': 'IsPostPaddingRequired',
            'is_pre_padding_required': 'IsPrePaddingRequired',
            'keep_until': 'KeepUntil',
            'name': 'Name',
            'overview': 'Overview',
            'parent_backdrop_image_tags': 'ParentBackdropImageTags',
            'parent_backdrop_item_id': 'ParentBackdropItemId',
            'post_padding_seconds': 'PostPaddingSeconds',
            'pre_padding_seconds': 'PrePaddingSeconds',
            'priority': 'Priority',
            'program_id': 'ProgramId',
            'program_info': 'ProgramInfo',
            'run_time_ticks': 'RunTimeTicks',
            'series_timer_id': 'SeriesTimerId',
            'server_id': 'ServerId',
            'service_name': 'ServiceName',
            'start_date': 'StartDate',
            'status': 'Status',
            'type': 'Type'
        }

        self._channel_id = channel_id
        self._channel_name = channel_name
        self._channel_primary_image_tag = channel_primary_image_tag
        self._end_date = end_date
        self._external_channel_id = external_channel_id
        self._external_id = external_id
        self._external_program_id = external_program_id
        self._external_series_timer_id = external_series_timer_id
        self._id = id
        self._is_post_padding_required = is_post_padding_required
        self._is_pre_padding_required = is_pre_padding_required
        self._keep_until = keep_until
        self._name = name
        self._overview = overview
        self._parent_backdrop_image_tags = parent_backdrop_image_tags
        self._parent_backdrop_item_id = parent_backdrop_item_id
        self._post_padding_seconds = post_padding_seconds
        self._pre_padding_seconds = pre_padding_seconds
        self._priority = priority
        self._program_id = program_id
        self._program_info = program_info
        self._run_time_ticks = run_time_ticks
        self._series_timer_id = series_timer_id
        self._server_id = server_id
        self._service_name = service_name
        self._start_date = start_date
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimerInfoDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimerInfoDto of this TimerInfoDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this TimerInfoDto.

        ChannelId of the recording.

        :return: The channel_id of this TimerInfoDto.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this TimerInfoDto.

        ChannelId of the recording.

        :param channel_id: The channel_id of this TimerInfoDto.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def channel_name(self):
        """Gets the channel_name of this TimerInfoDto.

        ChannelName of the recording.

        :return: The channel_name of this TimerInfoDto.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this TimerInfoDto.

        ChannelName of the recording.

        :param channel_name: The channel_name of this TimerInfoDto.
        :type channel_name: str
        """

        self._channel_name = channel_name

    @property
    def channel_primary_image_tag(self):
        """Gets the channel_primary_image_tag of this TimerInfoDto.


        :return: The channel_primary_image_tag of this TimerInfoDto.
        :rtype: str
        """
        return self._channel_primary_image_tag

    @channel_primary_image_tag.setter
    def channel_primary_image_tag(self, channel_primary_image_tag):
        """Sets the channel_primary_image_tag of this TimerInfoDto.


        :param channel_primary_image_tag: The channel_primary_image_tag of this TimerInfoDto.
        :type channel_primary_image_tag: str
        """

        self._channel_primary_image_tag = channel_primary_image_tag

    @property
    def end_date(self):
        """Gets the end_date of this TimerInfoDto.

        The end date of the recording, in UTC.

        :return: The end_date of this TimerInfoDto.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TimerInfoDto.

        The end date of the recording, in UTC.

        :param end_date: The end_date of this TimerInfoDto.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def external_channel_id(self):
        """Gets the external_channel_id of this TimerInfoDto.

        Gets or sets the external channel identifier.

        :return: The external_channel_id of this TimerInfoDto.
        :rtype: str
        """
        return self._external_channel_id

    @external_channel_id.setter
    def external_channel_id(self, external_channel_id):
        """Sets the external_channel_id of this TimerInfoDto.

        Gets or sets the external channel identifier.

        :param external_channel_id: The external_channel_id of this TimerInfoDto.
        :type external_channel_id: str
        """

        self._external_channel_id = external_channel_id

    @property
    def external_id(self):
        """Gets the external_id of this TimerInfoDto.

        Gets or sets the external identifier.

        :return: The external_id of this TimerInfoDto.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this TimerInfoDto.

        Gets or sets the external identifier.

        :param external_id: The external_id of this TimerInfoDto.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def external_program_id(self):
        """Gets the external_program_id of this TimerInfoDto.

        Gets or sets the external program identifier.

        :return: The external_program_id of this TimerInfoDto.
        :rtype: str
        """
        return self._external_program_id

    @external_program_id.setter
    def external_program_id(self, external_program_id):
        """Sets the external_program_id of this TimerInfoDto.

        Gets or sets the external program identifier.

        :param external_program_id: The external_program_id of this TimerInfoDto.
        :type external_program_id: str
        """

        self._external_program_id = external_program_id

    @property
    def external_series_timer_id(self):
        """Gets the external_series_timer_id of this TimerInfoDto.

        Gets or sets the external series timer identifier.

        :return: The external_series_timer_id of this TimerInfoDto.
        :rtype: str
        """
        return self._external_series_timer_id

    @external_series_timer_id.setter
    def external_series_timer_id(self, external_series_timer_id):
        """Sets the external_series_timer_id of this TimerInfoDto.

        Gets or sets the external series timer identifier.

        :param external_series_timer_id: The external_series_timer_id of this TimerInfoDto.
        :type external_series_timer_id: str
        """

        self._external_series_timer_id = external_series_timer_id

    @property
    def id(self):
        """Gets the id of this TimerInfoDto.

        Id of the recording.

        :return: The id of this TimerInfoDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimerInfoDto.

        Id of the recording.

        :param id: The id of this TimerInfoDto.
        :type id: str
        """

        self._id = id

    @property
    def is_post_padding_required(self):
        """Gets the is_post_padding_required of this TimerInfoDto.

        Gets or sets a value indicating whether this instance is post padding required.

        :return: The is_post_padding_required of this TimerInfoDto.
        :rtype: bool
        """
        return self._is_post_padding_required

    @is_post_padding_required.setter
    def is_post_padding_required(self, is_post_padding_required):
        """Sets the is_post_padding_required of this TimerInfoDto.

        Gets or sets a value indicating whether this instance is post padding required.

        :param is_post_padding_required: The is_post_padding_required of this TimerInfoDto.
        :type is_post_padding_required: bool
        """

        self._is_post_padding_required = is_post_padding_required

    @property
    def is_pre_padding_required(self):
        """Gets the is_pre_padding_required of this TimerInfoDto.

        Gets or sets a value indicating whether this instance is pre padding required.

        :return: The is_pre_padding_required of this TimerInfoDto.
        :rtype: bool
        """
        return self._is_pre_padding_required

    @is_pre_padding_required.setter
    def is_pre_padding_required(self, is_pre_padding_required):
        """Sets the is_pre_padding_required of this TimerInfoDto.

        Gets or sets a value indicating whether this instance is pre padding required.

        :param is_pre_padding_required: The is_pre_padding_required of this TimerInfoDto.
        :type is_pre_padding_required: bool
        """

        self._is_pre_padding_required = is_pre_padding_required

    @property
    def keep_until(self):
        """Gets the keep_until of this TimerInfoDto.


        :return: The keep_until of this TimerInfoDto.
        :rtype: KeepUntil
        """
        return self._keep_until

    @keep_until.setter
    def keep_until(self, keep_until):
        """Sets the keep_until of this TimerInfoDto.


        :param keep_until: The keep_until of this TimerInfoDto.
        :type keep_until: KeepUntil
        """

        self._keep_until = keep_until

    @property
    def name(self):
        """Gets the name of this TimerInfoDto.

        Name of the recording.

        :return: The name of this TimerInfoDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimerInfoDto.

        Name of the recording.

        :param name: The name of this TimerInfoDto.
        :type name: str
        """

        self._name = name

    @property
    def overview(self):
        """Gets the overview of this TimerInfoDto.

        Description of the recording.

        :return: The overview of this TimerInfoDto.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this TimerInfoDto.

        Description of the recording.

        :param overview: The overview of this TimerInfoDto.
        :type overview: str
        """

        self._overview = overview

    @property
    def parent_backdrop_image_tags(self):
        """Gets the parent_backdrop_image_tags of this TimerInfoDto.

        Gets or sets the parent backdrop image tags.

        :return: The parent_backdrop_image_tags of this TimerInfoDto.
        :rtype: List[str]
        """
        return self._parent_backdrop_image_tags

    @parent_backdrop_image_tags.setter
    def parent_backdrop_image_tags(self, parent_backdrop_image_tags):
        """Sets the parent_backdrop_image_tags of this TimerInfoDto.

        Gets or sets the parent backdrop image tags.

        :param parent_backdrop_image_tags: The parent_backdrop_image_tags of this TimerInfoDto.
        :type parent_backdrop_image_tags: List[str]
        """

        self._parent_backdrop_image_tags = parent_backdrop_image_tags

    @property
    def parent_backdrop_item_id(self):
        """Gets the parent_backdrop_item_id of this TimerInfoDto.

        If the item does not have any backdrops, this will hold the Id of the Parent that has one.

        :return: The parent_backdrop_item_id of this TimerInfoDto.
        :rtype: str
        """
        return self._parent_backdrop_item_id

    @parent_backdrop_item_id.setter
    def parent_backdrop_item_id(self, parent_backdrop_item_id):
        """Sets the parent_backdrop_item_id of this TimerInfoDto.

        If the item does not have any backdrops, this will hold the Id of the Parent that has one.

        :param parent_backdrop_item_id: The parent_backdrop_item_id of this TimerInfoDto.
        :type parent_backdrop_item_id: str
        """

        self._parent_backdrop_item_id = parent_backdrop_item_id

    @property
    def post_padding_seconds(self):
        """Gets the post_padding_seconds of this TimerInfoDto.

        Gets or sets the post padding seconds.

        :return: The post_padding_seconds of this TimerInfoDto.
        :rtype: int
        """
        return self._post_padding_seconds

    @post_padding_seconds.setter
    def post_padding_seconds(self, post_padding_seconds):
        """Sets the post_padding_seconds of this TimerInfoDto.

        Gets or sets the post padding seconds.

        :param post_padding_seconds: The post_padding_seconds of this TimerInfoDto.
        :type post_padding_seconds: int
        """

        self._post_padding_seconds = post_padding_seconds

    @property
    def pre_padding_seconds(self):
        """Gets the pre_padding_seconds of this TimerInfoDto.

        Gets or sets the pre padding seconds.

        :return: The pre_padding_seconds of this TimerInfoDto.
        :rtype: int
        """
        return self._pre_padding_seconds

    @pre_padding_seconds.setter
    def pre_padding_seconds(self, pre_padding_seconds):
        """Sets the pre_padding_seconds of this TimerInfoDto.

        Gets or sets the pre padding seconds.

        :param pre_padding_seconds: The pre_padding_seconds of this TimerInfoDto.
        :type pre_padding_seconds: int
        """

        self._pre_padding_seconds = pre_padding_seconds

    @property
    def priority(self):
        """Gets the priority of this TimerInfoDto.

        Gets or sets the priority.

        :return: The priority of this TimerInfoDto.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TimerInfoDto.

        Gets or sets the priority.

        :param priority: The priority of this TimerInfoDto.
        :type priority: int
        """

        self._priority = priority

    @property
    def program_id(self):
        """Gets the program_id of this TimerInfoDto.

        Gets or sets the program identifier.

        :return: The program_id of this TimerInfoDto.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this TimerInfoDto.

        Gets or sets the program identifier.

        :param program_id: The program_id of this TimerInfoDto.
        :type program_id: str
        """

        self._program_id = program_id

    @property
    def program_info(self):
        """Gets the program_info of this TimerInfoDto.


        :return: The program_info of this TimerInfoDto.
        :rtype: BaseItemDto
        """
        return self._program_info

    @program_info.setter
    def program_info(self, program_info):
        """Sets the program_info of this TimerInfoDto.


        :param program_info: The program_info of this TimerInfoDto.
        :type program_info: BaseItemDto
        """

        self._program_info = program_info

    @property
    def run_time_ticks(self):
        """Gets the run_time_ticks of this TimerInfoDto.

        Gets or sets the run time ticks.

        :return: The run_time_ticks of this TimerInfoDto.
        :rtype: int
        """
        return self._run_time_ticks

    @run_time_ticks.setter
    def run_time_ticks(self, run_time_ticks):
        """Sets the run_time_ticks of this TimerInfoDto.

        Gets or sets the run time ticks.

        :param run_time_ticks: The run_time_ticks of this TimerInfoDto.
        :type run_time_ticks: int
        """

        self._run_time_ticks = run_time_ticks

    @property
    def series_timer_id(self):
        """Gets the series_timer_id of this TimerInfoDto.

        Gets or sets the series timer identifier.

        :return: The series_timer_id of this TimerInfoDto.
        :rtype: str
        """
        return self._series_timer_id

    @series_timer_id.setter
    def series_timer_id(self, series_timer_id):
        """Sets the series_timer_id of this TimerInfoDto.

        Gets or sets the series timer identifier.

        :param series_timer_id: The series_timer_id of this TimerInfoDto.
        :type series_timer_id: str
        """

        self._series_timer_id = series_timer_id

    @property
    def server_id(self):
        """Gets the server_id of this TimerInfoDto.

        Gets or sets the server identifier.

        :return: The server_id of this TimerInfoDto.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this TimerInfoDto.

        Gets or sets the server identifier.

        :param server_id: The server_id of this TimerInfoDto.
        :type server_id: str
        """

        self._server_id = server_id

    @property
    def service_name(self):
        """Gets the service_name of this TimerInfoDto.

        Gets or sets the name of the service.

        :return: The service_name of this TimerInfoDto.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this TimerInfoDto.

        Gets or sets the name of the service.

        :param service_name: The service_name of this TimerInfoDto.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def start_date(self):
        """Gets the start_date of this TimerInfoDto.

        The start date of the recording, in UTC.

        :return: The start_date of this TimerInfoDto.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TimerInfoDto.

        The start date of the recording, in UTC.

        :param start_date: The start_date of this TimerInfoDto.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this TimerInfoDto.


        :return: The status of this TimerInfoDto.
        :rtype: RecordingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TimerInfoDto.


        :param status: The status of this TimerInfoDto.
        :type status: RecordingStatus
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this TimerInfoDto.


        :return: The type of this TimerInfoDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimerInfoDto.


        :param type: The type of this TimerInfoDto.
        :type type: str
        """

        self._type = type
