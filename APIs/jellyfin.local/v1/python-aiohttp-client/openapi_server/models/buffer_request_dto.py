# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BufferRequestDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_playing: bool=None, playlist_item_id: str=None, position_ticks: int=None, when: datetime=None):
        """BufferRequestDto - a model defined in OpenAPI

        :param is_playing: The is_playing of this BufferRequestDto.
        :param playlist_item_id: The playlist_item_id of this BufferRequestDto.
        :param position_ticks: The position_ticks of this BufferRequestDto.
        :param when: The when of this BufferRequestDto.
        """
        self.openapi_types = {
            'is_playing': bool,
            'playlist_item_id': str,
            'position_ticks': int,
            'when': datetime
        }

        self.attribute_map = {
            'is_playing': 'IsPlaying',
            'playlist_item_id': 'PlaylistItemId',
            'position_ticks': 'PositionTicks',
            'when': 'When'
        }

        self._is_playing = is_playing
        self._playlist_item_id = playlist_item_id
        self._position_ticks = position_ticks
        self._when = when

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BufferRequestDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BufferRequestDto of this BufferRequestDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_playing(self):
        """Gets the is_playing of this BufferRequestDto.

        Gets or sets a value indicating whether the client playback is unpaused.

        :return: The is_playing of this BufferRequestDto.
        :rtype: bool
        """
        return self._is_playing

    @is_playing.setter
    def is_playing(self, is_playing):
        """Sets the is_playing of this BufferRequestDto.

        Gets or sets a value indicating whether the client playback is unpaused.

        :param is_playing: The is_playing of this BufferRequestDto.
        :type is_playing: bool
        """

        self._is_playing = is_playing

    @property
    def playlist_item_id(self):
        """Gets the playlist_item_id of this BufferRequestDto.

        Gets or sets the playlist item identifier of the playing item.

        :return: The playlist_item_id of this BufferRequestDto.
        :rtype: str
        """
        return self._playlist_item_id

    @playlist_item_id.setter
    def playlist_item_id(self, playlist_item_id):
        """Sets the playlist_item_id of this BufferRequestDto.

        Gets or sets the playlist item identifier of the playing item.

        :param playlist_item_id: The playlist_item_id of this BufferRequestDto.
        :type playlist_item_id: str
        """

        self._playlist_item_id = playlist_item_id

    @property
    def position_ticks(self):
        """Gets the position_ticks of this BufferRequestDto.

        Gets or sets the position ticks.

        :return: The position_ticks of this BufferRequestDto.
        :rtype: int
        """
        return self._position_ticks

    @position_ticks.setter
    def position_ticks(self, position_ticks):
        """Sets the position_ticks of this BufferRequestDto.

        Gets or sets the position ticks.

        :param position_ticks: The position_ticks of this BufferRequestDto.
        :type position_ticks: int
        """

        self._position_ticks = position_ticks

    @property
    def when(self):
        """Gets the when of this BufferRequestDto.

        Gets or sets when the request has been made by the client.

        :return: The when of this BufferRequestDto.
        :rtype: datetime
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this BufferRequestDto.

        Gets or sets when the request has been made by the client.

        :param when: The when of this BufferRequestDto.
        :type when: datetime
        """

        self._when = when
