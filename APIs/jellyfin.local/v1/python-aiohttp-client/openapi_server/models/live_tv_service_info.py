# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_tv_service_status import LiveTvServiceStatus
from openapi_server import util


class LiveTvServiceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_update_available: bool=None, home_page_url: str=None, is_visible: bool=None, name: str=None, status: LiveTvServiceStatus=None, status_message: str=None, tuners: List[str]=None, version: str=None):
        """LiveTvServiceInfo - a model defined in OpenAPI

        :param has_update_available: The has_update_available of this LiveTvServiceInfo.
        :param home_page_url: The home_page_url of this LiveTvServiceInfo.
        :param is_visible: The is_visible of this LiveTvServiceInfo.
        :param name: The name of this LiveTvServiceInfo.
        :param status: The status of this LiveTvServiceInfo.
        :param status_message: The status_message of this LiveTvServiceInfo.
        :param tuners: The tuners of this LiveTvServiceInfo.
        :param version: The version of this LiveTvServiceInfo.
        """
        self.openapi_types = {
            'has_update_available': bool,
            'home_page_url': str,
            'is_visible': bool,
            'name': str,
            'status': LiveTvServiceStatus,
            'status_message': str,
            'tuners': List[str],
            'version': str
        }

        self.attribute_map = {
            'has_update_available': 'HasUpdateAvailable',
            'home_page_url': 'HomePageUrl',
            'is_visible': 'IsVisible',
            'name': 'Name',
            'status': 'Status',
            'status_message': 'StatusMessage',
            'tuners': 'Tuners',
            'version': 'Version'
        }

        self._has_update_available = has_update_available
        self._home_page_url = home_page_url
        self._is_visible = is_visible
        self._name = name
        self._status = status
        self._status_message = status_message
        self._tuners = tuners
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveTvServiceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveTvServiceInfo of this LiveTvServiceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_update_available(self):
        """Gets the has_update_available of this LiveTvServiceInfo.

        Gets or sets a value indicating whether this instance has update available.

        :return: The has_update_available of this LiveTvServiceInfo.
        :rtype: bool
        """
        return self._has_update_available

    @has_update_available.setter
    def has_update_available(self, has_update_available):
        """Sets the has_update_available of this LiveTvServiceInfo.

        Gets or sets a value indicating whether this instance has update available.

        :param has_update_available: The has_update_available of this LiveTvServiceInfo.
        :type has_update_available: bool
        """

        self._has_update_available = has_update_available

    @property
    def home_page_url(self):
        """Gets the home_page_url of this LiveTvServiceInfo.

        Gets or sets the home page URL.

        :return: The home_page_url of this LiveTvServiceInfo.
        :rtype: str
        """
        return self._home_page_url

    @home_page_url.setter
    def home_page_url(self, home_page_url):
        """Sets the home_page_url of this LiveTvServiceInfo.

        Gets or sets the home page URL.

        :param home_page_url: The home_page_url of this LiveTvServiceInfo.
        :type home_page_url: str
        """

        self._home_page_url = home_page_url

    @property
    def is_visible(self):
        """Gets the is_visible of this LiveTvServiceInfo.

        Gets or sets a value indicating whether this instance is visible.

        :return: The is_visible of this LiveTvServiceInfo.
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this LiveTvServiceInfo.

        Gets or sets a value indicating whether this instance is visible.

        :param is_visible: The is_visible of this LiveTvServiceInfo.
        :type is_visible: bool
        """

        self._is_visible = is_visible

    @property
    def name(self):
        """Gets the name of this LiveTvServiceInfo.

        Gets or sets the name.

        :return: The name of this LiveTvServiceInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LiveTvServiceInfo.

        Gets or sets the name.

        :param name: The name of this LiveTvServiceInfo.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this LiveTvServiceInfo.


        :return: The status of this LiveTvServiceInfo.
        :rtype: LiveTvServiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LiveTvServiceInfo.


        :param status: The status of this LiveTvServiceInfo.
        :type status: LiveTvServiceStatus
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this LiveTvServiceInfo.

        Gets or sets the status message.

        :return: The status_message of this LiveTvServiceInfo.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this LiveTvServiceInfo.

        Gets or sets the status message.

        :param status_message: The status_message of this LiveTvServiceInfo.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def tuners(self):
        """Gets the tuners of this LiveTvServiceInfo.


        :return: The tuners of this LiveTvServiceInfo.
        :rtype: List[str]
        """
        return self._tuners

    @tuners.setter
    def tuners(self, tuners):
        """Sets the tuners of this LiveTvServiceInfo.


        :param tuners: The tuners of this LiveTvServiceInfo.
        :type tuners: List[str]
        """

        self._tuners = tuners

    @property
    def version(self):
        """Gets the version of this LiveTvServiceInfo.

        Gets or sets the version.

        :return: The version of this LiveTvServiceInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LiveTvServiceInfo.

        Gets or sets the version.

        :param version: The version of this LiveTvServiceInfo.
        :type version: str
        """

        self._version = version
