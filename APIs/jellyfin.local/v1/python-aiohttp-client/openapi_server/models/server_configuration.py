# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_saving_convention import ImageSavingConvention
from openapi_server.models.metadata_options import MetadataOptions
from openapi_server.models.name_value_pair import NameValuePair
from openapi_server.models.path_substitution import PathSubstitution
from openapi_server.models.repository_info import RepositoryInfo
from openapi_server.models.version import Version
from openapi_server import util


class ServerConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_log_retention_days: int=None, auto_discovery: bool=None, auto_discovery_tracing: bool=None, base_url: str=None, cache_path: str=None, certificate_password: str=None, certificate_path: str=None, codecs_used: List[str]=None, content_types: List[NameValuePair]=None, cors_hosts: List[str]=None, disable_live_tv_channel_user_data_name: bool=None, disable_plugin_images: bool=None, display_specials_within_seasons: bool=None, enable_case_sensitive_item_ids: bool=None, enable_dashboard_response_caching: bool=None, enable_external_content_in_suggestions: bool=None, enable_folder_view: bool=None, enable_grouping_into_collections: bool=None, enable_https: bool=None, enable_ipv4: bool=None, enable_ipv6: bool=None, enable_metrics: bool=None, enable_multi_socket_binding: bool=None, enable_new_omdb_support: bool=None, enable_normalized_item_by_name_ids: bool=None, enable_remote_access: bool=None, enable_ssdp_tracing: bool=None, enable_simple_artist_detection: bool=None, enable_slow_response_warning: bool=None, enable_upn_p: bool=None, gateway_monitor_period: int=None, hd_homerun_port_range: str=None, http_server_port_number: int=None, https_port_number: int=None, ignore_virtual_interfaces: bool=None, image_extraction_timeout_ms: int=None, image_saving_convention: ImageSavingConvention=None, is_port_authorized: bool=None, is_remote_ip_filter_blacklist: bool=None, is_startup_wizard_completed: bool=None, known_proxies: List[str]=None, library_metadata_refresh_concurrency: int=None, library_monitor_delay: int=None, library_scan_fanout_concurrency: int=None, local_network_addresses: List[str]=None, local_network_subnets: List[str]=None, log_file_retention_days: int=None, max_audiobook_resume: int=None, max_resume_pct: int=None, metadata_country_code: str=None, metadata_network_path: str=None, metadata_options: List[MetadataOptions]=None, metadata_path: str=None, min_audiobook_resume: int=None, min_resume_duration_seconds: int=None, min_resume_pct: int=None, path_substitutions: List[PathSubstitution]=None, plugin_repositories: List[RepositoryInfo]=None, preferred_metadata_language: str=None, previous_version: Version=None, previous_version_str: str=None, public_https_port: int=None, public_port: int=None, published_server_uri_by_subnet: List[str]=None, quick_connect_available: bool=None, remote_client_bitrate_limit: int=None, remote_ip_filter: List[str]=None, remove_old_plugins: bool=None, require_https: bool=None, ssdp_tracing_filter: str=None, save_metadata_hidden: bool=None, server_name: str=None, skip_deserialization_for_basic_types: bool=None, slow_response_threshold_ms: int=None, sort_remove_characters: List[str]=None, sort_remove_words: List[str]=None, sort_replace_characters: List[str]=None, trust_all_ip6_interfaces: bool=None, udp_port_range: str=None, udp_send_count: int=None, udp_send_delay: int=None, ui_culture: str=None, upn_p_create_http_port_map: bool=None, uninstalled_plugins: List[str]=None, virtual_interface_names: str=None):
        """ServerConfiguration - a model defined in OpenAPI

        :param activity_log_retention_days: The activity_log_retention_days of this ServerConfiguration.
        :param auto_discovery: The auto_discovery of this ServerConfiguration.
        :param auto_discovery_tracing: The auto_discovery_tracing of this ServerConfiguration.
        :param base_url: The base_url of this ServerConfiguration.
        :param cache_path: The cache_path of this ServerConfiguration.
        :param certificate_password: The certificate_password of this ServerConfiguration.
        :param certificate_path: The certificate_path of this ServerConfiguration.
        :param codecs_used: The codecs_used of this ServerConfiguration.
        :param content_types: The content_types of this ServerConfiguration.
        :param cors_hosts: The cors_hosts of this ServerConfiguration.
        :param disable_live_tv_channel_user_data_name: The disable_live_tv_channel_user_data_name of this ServerConfiguration.
        :param disable_plugin_images: The disable_plugin_images of this ServerConfiguration.
        :param display_specials_within_seasons: The display_specials_within_seasons of this ServerConfiguration.
        :param enable_case_sensitive_item_ids: The enable_case_sensitive_item_ids of this ServerConfiguration.
        :param enable_dashboard_response_caching: The enable_dashboard_response_caching of this ServerConfiguration.
        :param enable_external_content_in_suggestions: The enable_external_content_in_suggestions of this ServerConfiguration.
        :param enable_folder_view: The enable_folder_view of this ServerConfiguration.
        :param enable_grouping_into_collections: The enable_grouping_into_collections of this ServerConfiguration.
        :param enable_https: The enable_https of this ServerConfiguration.
        :param enable_ipv4: The enable_ipv4 of this ServerConfiguration.
        :param enable_ipv6: The enable_ipv6 of this ServerConfiguration.
        :param enable_metrics: The enable_metrics of this ServerConfiguration.
        :param enable_multi_socket_binding: The enable_multi_socket_binding of this ServerConfiguration.
        :param enable_new_omdb_support: The enable_new_omdb_support of this ServerConfiguration.
        :param enable_normalized_item_by_name_ids: The enable_normalized_item_by_name_ids of this ServerConfiguration.
        :param enable_remote_access: The enable_remote_access of this ServerConfiguration.
        :param enable_ssdp_tracing: The enable_ssdp_tracing of this ServerConfiguration.
        :param enable_simple_artist_detection: The enable_simple_artist_detection of this ServerConfiguration.
        :param enable_slow_response_warning: The enable_slow_response_warning of this ServerConfiguration.
        :param enable_upn_p: The enable_upn_p of this ServerConfiguration.
        :param gateway_monitor_period: The gateway_monitor_period of this ServerConfiguration.
        :param hd_homerun_port_range: The hd_homerun_port_range of this ServerConfiguration.
        :param http_server_port_number: The http_server_port_number of this ServerConfiguration.
        :param https_port_number: The https_port_number of this ServerConfiguration.
        :param ignore_virtual_interfaces: The ignore_virtual_interfaces of this ServerConfiguration.
        :param image_extraction_timeout_ms: The image_extraction_timeout_ms of this ServerConfiguration.
        :param image_saving_convention: The image_saving_convention of this ServerConfiguration.
        :param is_port_authorized: The is_port_authorized of this ServerConfiguration.
        :param is_remote_ip_filter_blacklist: The is_remote_ip_filter_blacklist of this ServerConfiguration.
        :param is_startup_wizard_completed: The is_startup_wizard_completed of this ServerConfiguration.
        :param known_proxies: The known_proxies of this ServerConfiguration.
        :param library_metadata_refresh_concurrency: The library_metadata_refresh_concurrency of this ServerConfiguration.
        :param library_monitor_delay: The library_monitor_delay of this ServerConfiguration.
        :param library_scan_fanout_concurrency: The library_scan_fanout_concurrency of this ServerConfiguration.
        :param local_network_addresses: The local_network_addresses of this ServerConfiguration.
        :param local_network_subnets: The local_network_subnets of this ServerConfiguration.
        :param log_file_retention_days: The log_file_retention_days of this ServerConfiguration.
        :param max_audiobook_resume: The max_audiobook_resume of this ServerConfiguration.
        :param max_resume_pct: The max_resume_pct of this ServerConfiguration.
        :param metadata_country_code: The metadata_country_code of this ServerConfiguration.
        :param metadata_network_path: The metadata_network_path of this ServerConfiguration.
        :param metadata_options: The metadata_options of this ServerConfiguration.
        :param metadata_path: The metadata_path of this ServerConfiguration.
        :param min_audiobook_resume: The min_audiobook_resume of this ServerConfiguration.
        :param min_resume_duration_seconds: The min_resume_duration_seconds of this ServerConfiguration.
        :param min_resume_pct: The min_resume_pct of this ServerConfiguration.
        :param path_substitutions: The path_substitutions of this ServerConfiguration.
        :param plugin_repositories: The plugin_repositories of this ServerConfiguration.
        :param preferred_metadata_language: The preferred_metadata_language of this ServerConfiguration.
        :param previous_version: The previous_version of this ServerConfiguration.
        :param previous_version_str: The previous_version_str of this ServerConfiguration.
        :param public_https_port: The public_https_port of this ServerConfiguration.
        :param public_port: The public_port of this ServerConfiguration.
        :param published_server_uri_by_subnet: The published_server_uri_by_subnet of this ServerConfiguration.
        :param quick_connect_available: The quick_connect_available of this ServerConfiguration.
        :param remote_client_bitrate_limit: The remote_client_bitrate_limit of this ServerConfiguration.
        :param remote_ip_filter: The remote_ip_filter of this ServerConfiguration.
        :param remove_old_plugins: The remove_old_plugins of this ServerConfiguration.
        :param require_https: The require_https of this ServerConfiguration.
        :param ssdp_tracing_filter: The ssdp_tracing_filter of this ServerConfiguration.
        :param save_metadata_hidden: The save_metadata_hidden of this ServerConfiguration.
        :param server_name: The server_name of this ServerConfiguration.
        :param skip_deserialization_for_basic_types: The skip_deserialization_for_basic_types of this ServerConfiguration.
        :param slow_response_threshold_ms: The slow_response_threshold_ms of this ServerConfiguration.
        :param sort_remove_characters: The sort_remove_characters of this ServerConfiguration.
        :param sort_remove_words: The sort_remove_words of this ServerConfiguration.
        :param sort_replace_characters: The sort_replace_characters of this ServerConfiguration.
        :param trust_all_ip6_interfaces: The trust_all_ip6_interfaces of this ServerConfiguration.
        :param udp_port_range: The udp_port_range of this ServerConfiguration.
        :param udp_send_count: The udp_send_count of this ServerConfiguration.
        :param udp_send_delay: The udp_send_delay of this ServerConfiguration.
        :param ui_culture: The ui_culture of this ServerConfiguration.
        :param upn_p_create_http_port_map: The upn_p_create_http_port_map of this ServerConfiguration.
        :param uninstalled_plugins: The uninstalled_plugins of this ServerConfiguration.
        :param virtual_interface_names: The virtual_interface_names of this ServerConfiguration.
        """
        self.openapi_types = {
            'activity_log_retention_days': int,
            'auto_discovery': bool,
            'auto_discovery_tracing': bool,
            'base_url': str,
            'cache_path': str,
            'certificate_password': str,
            'certificate_path': str,
            'codecs_used': List[str],
            'content_types': List[NameValuePair],
            'cors_hosts': List[str],
            'disable_live_tv_channel_user_data_name': bool,
            'disable_plugin_images': bool,
            'display_specials_within_seasons': bool,
            'enable_case_sensitive_item_ids': bool,
            'enable_dashboard_response_caching': bool,
            'enable_external_content_in_suggestions': bool,
            'enable_folder_view': bool,
            'enable_grouping_into_collections': bool,
            'enable_https': bool,
            'enable_ipv4': bool,
            'enable_ipv6': bool,
            'enable_metrics': bool,
            'enable_multi_socket_binding': bool,
            'enable_new_omdb_support': bool,
            'enable_normalized_item_by_name_ids': bool,
            'enable_remote_access': bool,
            'enable_ssdp_tracing': bool,
            'enable_simple_artist_detection': bool,
            'enable_slow_response_warning': bool,
            'enable_upn_p': bool,
            'gateway_monitor_period': int,
            'hd_homerun_port_range': str,
            'http_server_port_number': int,
            'https_port_number': int,
            'ignore_virtual_interfaces': bool,
            'image_extraction_timeout_ms': int,
            'image_saving_convention': ImageSavingConvention,
            'is_port_authorized': bool,
            'is_remote_ip_filter_blacklist': bool,
            'is_startup_wizard_completed': bool,
            'known_proxies': List[str],
            'library_metadata_refresh_concurrency': int,
            'library_monitor_delay': int,
            'library_scan_fanout_concurrency': int,
            'local_network_addresses': List[str],
            'local_network_subnets': List[str],
            'log_file_retention_days': int,
            'max_audiobook_resume': int,
            'max_resume_pct': int,
            'metadata_country_code': str,
            'metadata_network_path': str,
            'metadata_options': List[MetadataOptions],
            'metadata_path': str,
            'min_audiobook_resume': int,
            'min_resume_duration_seconds': int,
            'min_resume_pct': int,
            'path_substitutions': List[PathSubstitution],
            'plugin_repositories': List[RepositoryInfo],
            'preferred_metadata_language': str,
            'previous_version': Version,
            'previous_version_str': str,
            'public_https_port': int,
            'public_port': int,
            'published_server_uri_by_subnet': List[str],
            'quick_connect_available': bool,
            'remote_client_bitrate_limit': int,
            'remote_ip_filter': List[str],
            'remove_old_plugins': bool,
            'require_https': bool,
            'ssdp_tracing_filter': str,
            'save_metadata_hidden': bool,
            'server_name': str,
            'skip_deserialization_for_basic_types': bool,
            'slow_response_threshold_ms': int,
            'sort_remove_characters': List[str],
            'sort_remove_words': List[str],
            'sort_replace_characters': List[str],
            'trust_all_ip6_interfaces': bool,
            'udp_port_range': str,
            'udp_send_count': int,
            'udp_send_delay': int,
            'ui_culture': str,
            'upn_p_create_http_port_map': bool,
            'uninstalled_plugins': List[str],
            'virtual_interface_names': str
        }

        self.attribute_map = {
            'activity_log_retention_days': 'ActivityLogRetentionDays',
            'auto_discovery': 'AutoDiscovery',
            'auto_discovery_tracing': 'AutoDiscoveryTracing',
            'base_url': 'BaseUrl',
            'cache_path': 'CachePath',
            'certificate_password': 'CertificatePassword',
            'certificate_path': 'CertificatePath',
            'codecs_used': 'CodecsUsed',
            'content_types': 'ContentTypes',
            'cors_hosts': 'CorsHosts',
            'disable_live_tv_channel_user_data_name': 'DisableLiveTvChannelUserDataName',
            'disable_plugin_images': 'DisablePluginImages',
            'display_specials_within_seasons': 'DisplaySpecialsWithinSeasons',
            'enable_case_sensitive_item_ids': 'EnableCaseSensitiveItemIds',
            'enable_dashboard_response_caching': 'EnableDashboardResponseCaching',
            'enable_external_content_in_suggestions': 'EnableExternalContentInSuggestions',
            'enable_folder_view': 'EnableFolderView',
            'enable_grouping_into_collections': 'EnableGroupingIntoCollections',
            'enable_https': 'EnableHttps',
            'enable_ipv4': 'EnableIPV4',
            'enable_ipv6': 'EnableIPV6',
            'enable_metrics': 'EnableMetrics',
            'enable_multi_socket_binding': 'EnableMultiSocketBinding',
            'enable_new_omdb_support': 'EnableNewOmdbSupport',
            'enable_normalized_item_by_name_ids': 'EnableNormalizedItemByNameIds',
            'enable_remote_access': 'EnableRemoteAccess',
            'enable_ssdp_tracing': 'EnableSSDPTracing',
            'enable_simple_artist_detection': 'EnableSimpleArtistDetection',
            'enable_slow_response_warning': 'EnableSlowResponseWarning',
            'enable_upn_p': 'EnableUPnP',
            'gateway_monitor_period': 'GatewayMonitorPeriod',
            'hd_homerun_port_range': 'HDHomerunPortRange',
            'http_server_port_number': 'HttpServerPortNumber',
            'https_port_number': 'HttpsPortNumber',
            'ignore_virtual_interfaces': 'IgnoreVirtualInterfaces',
            'image_extraction_timeout_ms': 'ImageExtractionTimeoutMs',
            'image_saving_convention': 'ImageSavingConvention',
            'is_port_authorized': 'IsPortAuthorized',
            'is_remote_ip_filter_blacklist': 'IsRemoteIPFilterBlacklist',
            'is_startup_wizard_completed': 'IsStartupWizardCompleted',
            'known_proxies': 'KnownProxies',
            'library_metadata_refresh_concurrency': 'LibraryMetadataRefreshConcurrency',
            'library_monitor_delay': 'LibraryMonitorDelay',
            'library_scan_fanout_concurrency': 'LibraryScanFanoutConcurrency',
            'local_network_addresses': 'LocalNetworkAddresses',
            'local_network_subnets': 'LocalNetworkSubnets',
            'log_file_retention_days': 'LogFileRetentionDays',
            'max_audiobook_resume': 'MaxAudiobookResume',
            'max_resume_pct': 'MaxResumePct',
            'metadata_country_code': 'MetadataCountryCode',
            'metadata_network_path': 'MetadataNetworkPath',
            'metadata_options': 'MetadataOptions',
            'metadata_path': 'MetadataPath',
            'min_audiobook_resume': 'MinAudiobookResume',
            'min_resume_duration_seconds': 'MinResumeDurationSeconds',
            'min_resume_pct': 'MinResumePct',
            'path_substitutions': 'PathSubstitutions',
            'plugin_repositories': 'PluginRepositories',
            'preferred_metadata_language': 'PreferredMetadataLanguage',
            'previous_version': 'PreviousVersion',
            'previous_version_str': 'PreviousVersionStr',
            'public_https_port': 'PublicHttpsPort',
            'public_port': 'PublicPort',
            'published_server_uri_by_subnet': 'PublishedServerUriBySubnet',
            'quick_connect_available': 'QuickConnectAvailable',
            'remote_client_bitrate_limit': 'RemoteClientBitrateLimit',
            'remote_ip_filter': 'RemoteIPFilter',
            'remove_old_plugins': 'RemoveOldPlugins',
            'require_https': 'RequireHttps',
            'ssdp_tracing_filter': 'SSDPTracingFilter',
            'save_metadata_hidden': 'SaveMetadataHidden',
            'server_name': 'ServerName',
            'skip_deserialization_for_basic_types': 'SkipDeserializationForBasicTypes',
            'slow_response_threshold_ms': 'SlowResponseThresholdMs',
            'sort_remove_characters': 'SortRemoveCharacters',
            'sort_remove_words': 'SortRemoveWords',
            'sort_replace_characters': 'SortReplaceCharacters',
            'trust_all_ip6_interfaces': 'TrustAllIP6Interfaces',
            'udp_port_range': 'UDPPortRange',
            'udp_send_count': 'UDPSendCount',
            'udp_send_delay': 'UDPSendDelay',
            'ui_culture': 'UICulture',
            'upn_p_create_http_port_map': 'UPnPCreateHttpPortMap',
            'uninstalled_plugins': 'UninstalledPlugins',
            'virtual_interface_names': 'VirtualInterfaceNames'
        }

        self._activity_log_retention_days = activity_log_retention_days
        self._auto_discovery = auto_discovery
        self._auto_discovery_tracing = auto_discovery_tracing
        self._base_url = base_url
        self._cache_path = cache_path
        self._certificate_password = certificate_password
        self._certificate_path = certificate_path
        self._codecs_used = codecs_used
        self._content_types = content_types
        self._cors_hosts = cors_hosts
        self._disable_live_tv_channel_user_data_name = disable_live_tv_channel_user_data_name
        self._disable_plugin_images = disable_plugin_images
        self._display_specials_within_seasons = display_specials_within_seasons
        self._enable_case_sensitive_item_ids = enable_case_sensitive_item_ids
        self._enable_dashboard_response_caching = enable_dashboard_response_caching
        self._enable_external_content_in_suggestions = enable_external_content_in_suggestions
        self._enable_folder_view = enable_folder_view
        self._enable_grouping_into_collections = enable_grouping_into_collections
        self._enable_https = enable_https
        self._enable_ipv4 = enable_ipv4
        self._enable_ipv6 = enable_ipv6
        self._enable_metrics = enable_metrics
        self._enable_multi_socket_binding = enable_multi_socket_binding
        self._enable_new_omdb_support = enable_new_omdb_support
        self._enable_normalized_item_by_name_ids = enable_normalized_item_by_name_ids
        self._enable_remote_access = enable_remote_access
        self._enable_ssdp_tracing = enable_ssdp_tracing
        self._enable_simple_artist_detection = enable_simple_artist_detection
        self._enable_slow_response_warning = enable_slow_response_warning
        self._enable_upn_p = enable_upn_p
        self._gateway_monitor_period = gateway_monitor_period
        self._hd_homerun_port_range = hd_homerun_port_range
        self._http_server_port_number = http_server_port_number
        self._https_port_number = https_port_number
        self._ignore_virtual_interfaces = ignore_virtual_interfaces
        self._image_extraction_timeout_ms = image_extraction_timeout_ms
        self._image_saving_convention = image_saving_convention
        self._is_port_authorized = is_port_authorized
        self._is_remote_ip_filter_blacklist = is_remote_ip_filter_blacklist
        self._is_startup_wizard_completed = is_startup_wizard_completed
        self._known_proxies = known_proxies
        self._library_metadata_refresh_concurrency = library_metadata_refresh_concurrency
        self._library_monitor_delay = library_monitor_delay
        self._library_scan_fanout_concurrency = library_scan_fanout_concurrency
        self._local_network_addresses = local_network_addresses
        self._local_network_subnets = local_network_subnets
        self._log_file_retention_days = log_file_retention_days
        self._max_audiobook_resume = max_audiobook_resume
        self._max_resume_pct = max_resume_pct
        self._metadata_country_code = metadata_country_code
        self._metadata_network_path = metadata_network_path
        self._metadata_options = metadata_options
        self._metadata_path = metadata_path
        self._min_audiobook_resume = min_audiobook_resume
        self._min_resume_duration_seconds = min_resume_duration_seconds
        self._min_resume_pct = min_resume_pct
        self._path_substitutions = path_substitutions
        self._plugin_repositories = plugin_repositories
        self._preferred_metadata_language = preferred_metadata_language
        self._previous_version = previous_version
        self._previous_version_str = previous_version_str
        self._public_https_port = public_https_port
        self._public_port = public_port
        self._published_server_uri_by_subnet = published_server_uri_by_subnet
        self._quick_connect_available = quick_connect_available
        self._remote_client_bitrate_limit = remote_client_bitrate_limit
        self._remote_ip_filter = remote_ip_filter
        self._remove_old_plugins = remove_old_plugins
        self._require_https = require_https
        self._ssdp_tracing_filter = ssdp_tracing_filter
        self._save_metadata_hidden = save_metadata_hidden
        self._server_name = server_name
        self._skip_deserialization_for_basic_types = skip_deserialization_for_basic_types
        self._slow_response_threshold_ms = slow_response_threshold_ms
        self._sort_remove_characters = sort_remove_characters
        self._sort_remove_words = sort_remove_words
        self._sort_replace_characters = sort_replace_characters
        self._trust_all_ip6_interfaces = trust_all_ip6_interfaces
        self._udp_port_range = udp_port_range
        self._udp_send_count = udp_send_count
        self._udp_send_delay = udp_send_delay
        self._ui_culture = ui_culture
        self._upn_p_create_http_port_map = upn_p_create_http_port_map
        self._uninstalled_plugins = uninstalled_plugins
        self._virtual_interface_names = virtual_interface_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerConfiguration of this ServerConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_log_retention_days(self):
        """Gets the activity_log_retention_days of this ServerConfiguration.

        Gets or sets the number of days we should retain activity logs.

        :return: The activity_log_retention_days of this ServerConfiguration.
        :rtype: int
        """
        return self._activity_log_retention_days

    @activity_log_retention_days.setter
    def activity_log_retention_days(self, activity_log_retention_days):
        """Sets the activity_log_retention_days of this ServerConfiguration.

        Gets or sets the number of days we should retain activity logs.

        :param activity_log_retention_days: The activity_log_retention_days of this ServerConfiguration.
        :type activity_log_retention_days: int
        """

        self._activity_log_retention_days = activity_log_retention_days

    @property
    def auto_discovery(self):
        """Gets the auto_discovery of this ServerConfiguration.

        Gets or sets a value indicating whether Autodiscovery is enabled.

        :return: The auto_discovery of this ServerConfiguration.
        :rtype: bool
        """
        return self._auto_discovery

    @auto_discovery.setter
    def auto_discovery(self, auto_discovery):
        """Sets the auto_discovery of this ServerConfiguration.

        Gets or sets a value indicating whether Autodiscovery is enabled.

        :param auto_discovery: The auto_discovery of this ServerConfiguration.
        :type auto_discovery: bool
        """

        self._auto_discovery = auto_discovery

    @property
    def auto_discovery_tracing(self):
        """Gets the auto_discovery_tracing of this ServerConfiguration.

        Gets or sets a value indicating whether Autodiscovery tracing is enabled.

        :return: The auto_discovery_tracing of this ServerConfiguration.
        :rtype: bool
        """
        return self._auto_discovery_tracing

    @auto_discovery_tracing.setter
    def auto_discovery_tracing(self, auto_discovery_tracing):
        """Sets the auto_discovery_tracing of this ServerConfiguration.

        Gets or sets a value indicating whether Autodiscovery tracing is enabled.

        :param auto_discovery_tracing: The auto_discovery_tracing of this ServerConfiguration.
        :type auto_discovery_tracing: bool
        """

        self._auto_discovery_tracing = auto_discovery_tracing

    @property
    def base_url(self):
        """Gets the base_url of this ServerConfiguration.


        :return: The base_url of this ServerConfiguration.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ServerConfiguration.


        :param base_url: The base_url of this ServerConfiguration.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def cache_path(self):
        """Gets the cache_path of this ServerConfiguration.

        Gets or sets the cache path.

        :return: The cache_path of this ServerConfiguration.
        :rtype: str
        """
        return self._cache_path

    @cache_path.setter
    def cache_path(self, cache_path):
        """Sets the cache_path of this ServerConfiguration.

        Gets or sets the cache path.

        :param cache_path: The cache_path of this ServerConfiguration.
        :type cache_path: str
        """

        self._cache_path = cache_path

    @property
    def certificate_password(self):
        """Gets the certificate_password of this ServerConfiguration.

        Gets or sets the password required to access the X.509 certificate data in the file specified by MediaBrowser.Model.Configuration.ServerConfiguration.CertificatePath.

        :return: The certificate_password of this ServerConfiguration.
        :rtype: str
        """
        return self._certificate_password

    @certificate_password.setter
    def certificate_password(self, certificate_password):
        """Sets the certificate_password of this ServerConfiguration.

        Gets or sets the password required to access the X.509 certificate data in the file specified by MediaBrowser.Model.Configuration.ServerConfiguration.CertificatePath.

        :param certificate_password: The certificate_password of this ServerConfiguration.
        :type certificate_password: str
        """

        self._certificate_password = certificate_password

    @property
    def certificate_path(self):
        """Gets the certificate_path of this ServerConfiguration.

        Gets or sets the filesystem path of an X.509 certificate to use for SSL.

        :return: The certificate_path of this ServerConfiguration.
        :rtype: str
        """
        return self._certificate_path

    @certificate_path.setter
    def certificate_path(self, certificate_path):
        """Sets the certificate_path of this ServerConfiguration.

        Gets or sets the filesystem path of an X.509 certificate to use for SSL.

        :param certificate_path: The certificate_path of this ServerConfiguration.
        :type certificate_path: str
        """

        self._certificate_path = certificate_path

    @property
    def codecs_used(self):
        """Gets the codecs_used of this ServerConfiguration.


        :return: The codecs_used of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._codecs_used

    @codecs_used.setter
    def codecs_used(self, codecs_used):
        """Sets the codecs_used of this ServerConfiguration.


        :param codecs_used: The codecs_used of this ServerConfiguration.
        :type codecs_used: List[str]
        """

        self._codecs_used = codecs_used

    @property
    def content_types(self):
        """Gets the content_types of this ServerConfiguration.


        :return: The content_types of this ServerConfiguration.
        :rtype: List[NameValuePair]
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this ServerConfiguration.


        :param content_types: The content_types of this ServerConfiguration.
        :type content_types: List[NameValuePair]
        """

        self._content_types = content_types

    @property
    def cors_hosts(self):
        """Gets the cors_hosts of this ServerConfiguration.

        Gets or sets the cors hosts.

        :return: The cors_hosts of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._cors_hosts

    @cors_hosts.setter
    def cors_hosts(self, cors_hosts):
        """Sets the cors_hosts of this ServerConfiguration.

        Gets or sets the cors hosts.

        :param cors_hosts: The cors_hosts of this ServerConfiguration.
        :type cors_hosts: List[str]
        """

        self._cors_hosts = cors_hosts

    @property
    def disable_live_tv_channel_user_data_name(self):
        """Gets the disable_live_tv_channel_user_data_name of this ServerConfiguration.


        :return: The disable_live_tv_channel_user_data_name of this ServerConfiguration.
        :rtype: bool
        """
        return self._disable_live_tv_channel_user_data_name

    @disable_live_tv_channel_user_data_name.setter
    def disable_live_tv_channel_user_data_name(self, disable_live_tv_channel_user_data_name):
        """Sets the disable_live_tv_channel_user_data_name of this ServerConfiguration.


        :param disable_live_tv_channel_user_data_name: The disable_live_tv_channel_user_data_name of this ServerConfiguration.
        :type disable_live_tv_channel_user_data_name: bool
        """

        self._disable_live_tv_channel_user_data_name = disable_live_tv_channel_user_data_name

    @property
    def disable_plugin_images(self):
        """Gets the disable_plugin_images of this ServerConfiguration.

        Gets or sets a value indicating whether plugin image should be disabled.

        :return: The disable_plugin_images of this ServerConfiguration.
        :rtype: bool
        """
        return self._disable_plugin_images

    @disable_plugin_images.setter
    def disable_plugin_images(self, disable_plugin_images):
        """Sets the disable_plugin_images of this ServerConfiguration.

        Gets or sets a value indicating whether plugin image should be disabled.

        :param disable_plugin_images: The disable_plugin_images of this ServerConfiguration.
        :type disable_plugin_images: bool
        """

        self._disable_plugin_images = disable_plugin_images

    @property
    def display_specials_within_seasons(self):
        """Gets the display_specials_within_seasons of this ServerConfiguration.


        :return: The display_specials_within_seasons of this ServerConfiguration.
        :rtype: bool
        """
        return self._display_specials_within_seasons

    @display_specials_within_seasons.setter
    def display_specials_within_seasons(self, display_specials_within_seasons):
        """Sets the display_specials_within_seasons of this ServerConfiguration.


        :param display_specials_within_seasons: The display_specials_within_seasons of this ServerConfiguration.
        :type display_specials_within_seasons: bool
        """

        self._display_specials_within_seasons = display_specials_within_seasons

    @property
    def enable_case_sensitive_item_ids(self):
        """Gets the enable_case_sensitive_item_ids of this ServerConfiguration.

        Gets or sets a value indicating whether [enable case sensitive item ids].

        :return: The enable_case_sensitive_item_ids of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_case_sensitive_item_ids

    @enable_case_sensitive_item_ids.setter
    def enable_case_sensitive_item_ids(self, enable_case_sensitive_item_ids):
        """Sets the enable_case_sensitive_item_ids of this ServerConfiguration.

        Gets or sets a value indicating whether [enable case sensitive item ids].

        :param enable_case_sensitive_item_ids: The enable_case_sensitive_item_ids of this ServerConfiguration.
        :type enable_case_sensitive_item_ids: bool
        """

        self._enable_case_sensitive_item_ids = enable_case_sensitive_item_ids

    @property
    def enable_dashboard_response_caching(self):
        """Gets the enable_dashboard_response_caching of this ServerConfiguration.

        Gets or sets a value indicating whether [enable dashboard response caching].  Allows potential contributors without visual studio to modify production dashboard code and test changes.

        :return: The enable_dashboard_response_caching of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_dashboard_response_caching

    @enable_dashboard_response_caching.setter
    def enable_dashboard_response_caching(self, enable_dashboard_response_caching):
        """Sets the enable_dashboard_response_caching of this ServerConfiguration.

        Gets or sets a value indicating whether [enable dashboard response caching].  Allows potential contributors without visual studio to modify production dashboard code and test changes.

        :param enable_dashboard_response_caching: The enable_dashboard_response_caching of this ServerConfiguration.
        :type enable_dashboard_response_caching: bool
        """

        self._enable_dashboard_response_caching = enable_dashboard_response_caching

    @property
    def enable_external_content_in_suggestions(self):
        """Gets the enable_external_content_in_suggestions of this ServerConfiguration.


        :return: The enable_external_content_in_suggestions of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_external_content_in_suggestions

    @enable_external_content_in_suggestions.setter
    def enable_external_content_in_suggestions(self, enable_external_content_in_suggestions):
        """Sets the enable_external_content_in_suggestions of this ServerConfiguration.


        :param enable_external_content_in_suggestions: The enable_external_content_in_suggestions of this ServerConfiguration.
        :type enable_external_content_in_suggestions: bool
        """

        self._enable_external_content_in_suggestions = enable_external_content_in_suggestions

    @property
    def enable_folder_view(self):
        """Gets the enable_folder_view of this ServerConfiguration.


        :return: The enable_folder_view of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_folder_view

    @enable_folder_view.setter
    def enable_folder_view(self, enable_folder_view):
        """Sets the enable_folder_view of this ServerConfiguration.


        :param enable_folder_view: The enable_folder_view of this ServerConfiguration.
        :type enable_folder_view: bool
        """

        self._enable_folder_view = enable_folder_view

    @property
    def enable_grouping_into_collections(self):
        """Gets the enable_grouping_into_collections of this ServerConfiguration.


        :return: The enable_grouping_into_collections of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_grouping_into_collections

    @enable_grouping_into_collections.setter
    def enable_grouping_into_collections(self, enable_grouping_into_collections):
        """Sets the enable_grouping_into_collections of this ServerConfiguration.


        :param enable_grouping_into_collections: The enable_grouping_into_collections of this ServerConfiguration.
        :type enable_grouping_into_collections: bool
        """

        self._enable_grouping_into_collections = enable_grouping_into_collections

    @property
    def enable_https(self):
        """Gets the enable_https of this ServerConfiguration.

        Gets or sets a value indicating whether to use HTTPS.

        :return: The enable_https of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_https

    @enable_https.setter
    def enable_https(self, enable_https):
        """Sets the enable_https of this ServerConfiguration.

        Gets or sets a value indicating whether to use HTTPS.

        :param enable_https: The enable_https of this ServerConfiguration.
        :type enable_https: bool
        """

        self._enable_https = enable_https

    @property
    def enable_ipv4(self):
        """Gets the enable_ipv4 of this ServerConfiguration.

        Gets or sets a value indicating whether IPV4 capability is enabled.

        :return: The enable_ipv4 of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_ipv4

    @enable_ipv4.setter
    def enable_ipv4(self, enable_ipv4):
        """Sets the enable_ipv4 of this ServerConfiguration.

        Gets or sets a value indicating whether IPV4 capability is enabled.

        :param enable_ipv4: The enable_ipv4 of this ServerConfiguration.
        :type enable_ipv4: bool
        """

        self._enable_ipv4 = enable_ipv4

    @property
    def enable_ipv6(self):
        """Gets the enable_ipv6 of this ServerConfiguration.

        Gets or sets a value indicating whether IPV6 capability is enabled.

        :return: The enable_ipv6 of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_ipv6

    @enable_ipv6.setter
    def enable_ipv6(self, enable_ipv6):
        """Sets the enable_ipv6 of this ServerConfiguration.

        Gets or sets a value indicating whether IPV6 capability is enabled.

        :param enable_ipv6: The enable_ipv6 of this ServerConfiguration.
        :type enable_ipv6: bool
        """

        self._enable_ipv6 = enable_ipv6

    @property
    def enable_metrics(self):
        """Gets the enable_metrics of this ServerConfiguration.

        Gets or sets a value indicating whether to enable prometheus metrics exporting.

        :return: The enable_metrics of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_metrics

    @enable_metrics.setter
    def enable_metrics(self, enable_metrics):
        """Sets the enable_metrics of this ServerConfiguration.

        Gets or sets a value indicating whether to enable prometheus metrics exporting.

        :param enable_metrics: The enable_metrics of this ServerConfiguration.
        :type enable_metrics: bool
        """

        self._enable_metrics = enable_metrics

    @property
    def enable_multi_socket_binding(self):
        """Gets the enable_multi_socket_binding of this ServerConfiguration.

        Gets a value indicating whether multi-socket binding is available.

        :return: The enable_multi_socket_binding of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_multi_socket_binding

    @enable_multi_socket_binding.setter
    def enable_multi_socket_binding(self, enable_multi_socket_binding):
        """Sets the enable_multi_socket_binding of this ServerConfiguration.

        Gets a value indicating whether multi-socket binding is available.

        :param enable_multi_socket_binding: The enable_multi_socket_binding of this ServerConfiguration.
        :type enable_multi_socket_binding: bool
        """

        self._enable_multi_socket_binding = enable_multi_socket_binding

    @property
    def enable_new_omdb_support(self):
        """Gets the enable_new_omdb_support of this ServerConfiguration.


        :return: The enable_new_omdb_support of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_new_omdb_support

    @enable_new_omdb_support.setter
    def enable_new_omdb_support(self, enable_new_omdb_support):
        """Sets the enable_new_omdb_support of this ServerConfiguration.


        :param enable_new_omdb_support: The enable_new_omdb_support of this ServerConfiguration.
        :type enable_new_omdb_support: bool
        """

        self._enable_new_omdb_support = enable_new_omdb_support

    @property
    def enable_normalized_item_by_name_ids(self):
        """Gets the enable_normalized_item_by_name_ids of this ServerConfiguration.


        :return: The enable_normalized_item_by_name_ids of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_normalized_item_by_name_ids

    @enable_normalized_item_by_name_ids.setter
    def enable_normalized_item_by_name_ids(self, enable_normalized_item_by_name_ids):
        """Sets the enable_normalized_item_by_name_ids of this ServerConfiguration.


        :param enable_normalized_item_by_name_ids: The enable_normalized_item_by_name_ids of this ServerConfiguration.
        :type enable_normalized_item_by_name_ids: bool
        """

        self._enable_normalized_item_by_name_ids = enable_normalized_item_by_name_ids

    @property
    def enable_remote_access(self):
        """Gets the enable_remote_access of this ServerConfiguration.

        Gets or sets a value indicating whether access outside of the LAN is permitted.

        :return: The enable_remote_access of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_remote_access

    @enable_remote_access.setter
    def enable_remote_access(self, enable_remote_access):
        """Sets the enable_remote_access of this ServerConfiguration.

        Gets or sets a value indicating whether access outside of the LAN is permitted.

        :param enable_remote_access: The enable_remote_access of this ServerConfiguration.
        :type enable_remote_access: bool
        """

        self._enable_remote_access = enable_remote_access

    @property
    def enable_ssdp_tracing(self):
        """Gets the enable_ssdp_tracing of this ServerConfiguration.

        Gets or sets a value indicating whether detailed ssdp logs are sent to the console/log.  \"Emby.Dlna\": \"Debug\" must be set in logging.default.json for this property to work.

        :return: The enable_ssdp_tracing of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_ssdp_tracing

    @enable_ssdp_tracing.setter
    def enable_ssdp_tracing(self, enable_ssdp_tracing):
        """Sets the enable_ssdp_tracing of this ServerConfiguration.

        Gets or sets a value indicating whether detailed ssdp logs are sent to the console/log.  \"Emby.Dlna\": \"Debug\" must be set in logging.default.json for this property to work.

        :param enable_ssdp_tracing: The enable_ssdp_tracing of this ServerConfiguration.
        :type enable_ssdp_tracing: bool
        """

        self._enable_ssdp_tracing = enable_ssdp_tracing

    @property
    def enable_simple_artist_detection(self):
        """Gets the enable_simple_artist_detection of this ServerConfiguration.


        :return: The enable_simple_artist_detection of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_simple_artist_detection

    @enable_simple_artist_detection.setter
    def enable_simple_artist_detection(self, enable_simple_artist_detection):
        """Sets the enable_simple_artist_detection of this ServerConfiguration.


        :param enable_simple_artist_detection: The enable_simple_artist_detection of this ServerConfiguration.
        :type enable_simple_artist_detection: bool
        """

        self._enable_simple_artist_detection = enable_simple_artist_detection

    @property
    def enable_slow_response_warning(self):
        """Gets the enable_slow_response_warning of this ServerConfiguration.

        Gets or sets a value indicating whether slow server responses should be logged as a warning.

        :return: The enable_slow_response_warning of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_slow_response_warning

    @enable_slow_response_warning.setter
    def enable_slow_response_warning(self, enable_slow_response_warning):
        """Sets the enable_slow_response_warning of this ServerConfiguration.

        Gets or sets a value indicating whether slow server responses should be logged as a warning.

        :param enable_slow_response_warning: The enable_slow_response_warning of this ServerConfiguration.
        :type enable_slow_response_warning: bool
        """

        self._enable_slow_response_warning = enable_slow_response_warning

    @property
    def enable_upn_p(self):
        """Gets the enable_upn_p of this ServerConfiguration.

        Gets or sets a value indicating whether to enable automatic port forwarding.

        :return: The enable_upn_p of this ServerConfiguration.
        :rtype: bool
        """
        return self._enable_upn_p

    @enable_upn_p.setter
    def enable_upn_p(self, enable_upn_p):
        """Sets the enable_upn_p of this ServerConfiguration.

        Gets or sets a value indicating whether to enable automatic port forwarding.

        :param enable_upn_p: The enable_upn_p of this ServerConfiguration.
        :type enable_upn_p: bool
        """

        self._enable_upn_p = enable_upn_p

    @property
    def gateway_monitor_period(self):
        """Gets the gateway_monitor_period of this ServerConfiguration.

        Gets or sets the time (in seconds) between the pings of SSDP gateway monitor.

        :return: The gateway_monitor_period of this ServerConfiguration.
        :rtype: int
        """
        return self._gateway_monitor_period

    @gateway_monitor_period.setter
    def gateway_monitor_period(self, gateway_monitor_period):
        """Sets the gateway_monitor_period of this ServerConfiguration.

        Gets or sets the time (in seconds) between the pings of SSDP gateway monitor.

        :param gateway_monitor_period: The gateway_monitor_period of this ServerConfiguration.
        :type gateway_monitor_period: int
        """

        self._gateway_monitor_period = gateway_monitor_period

    @property
    def hd_homerun_port_range(self):
        """Gets the hd_homerun_port_range of this ServerConfiguration.

        Gets or sets the ports that HDHomerun uses.

        :return: The hd_homerun_port_range of this ServerConfiguration.
        :rtype: str
        """
        return self._hd_homerun_port_range

    @hd_homerun_port_range.setter
    def hd_homerun_port_range(self, hd_homerun_port_range):
        """Sets the hd_homerun_port_range of this ServerConfiguration.

        Gets or sets the ports that HDHomerun uses.

        :param hd_homerun_port_range: The hd_homerun_port_range of this ServerConfiguration.
        :type hd_homerun_port_range: str
        """

        self._hd_homerun_port_range = hd_homerun_port_range

    @property
    def http_server_port_number(self):
        """Gets the http_server_port_number of this ServerConfiguration.

        Gets or sets the HTTP server port number.

        :return: The http_server_port_number of this ServerConfiguration.
        :rtype: int
        """
        return self._http_server_port_number

    @http_server_port_number.setter
    def http_server_port_number(self, http_server_port_number):
        """Sets the http_server_port_number of this ServerConfiguration.

        Gets or sets the HTTP server port number.

        :param http_server_port_number: The http_server_port_number of this ServerConfiguration.
        :type http_server_port_number: int
        """

        self._http_server_port_number = http_server_port_number

    @property
    def https_port_number(self):
        """Gets the https_port_number of this ServerConfiguration.

        Gets or sets the HTTPS server port number.

        :return: The https_port_number of this ServerConfiguration.
        :rtype: int
        """
        return self._https_port_number

    @https_port_number.setter
    def https_port_number(self, https_port_number):
        """Sets the https_port_number of this ServerConfiguration.

        Gets or sets the HTTPS server port number.

        :param https_port_number: The https_port_number of this ServerConfiguration.
        :type https_port_number: int
        """

        self._https_port_number = https_port_number

    @property
    def ignore_virtual_interfaces(self):
        """Gets the ignore_virtual_interfaces of this ServerConfiguration.

        Gets or sets a value indicating whether address names that match MediaBrowser.Model.Configuration.ServerConfiguration.VirtualInterfaceNames should be Ignore for the purposes of binding.

        :return: The ignore_virtual_interfaces of this ServerConfiguration.
        :rtype: bool
        """
        return self._ignore_virtual_interfaces

    @ignore_virtual_interfaces.setter
    def ignore_virtual_interfaces(self, ignore_virtual_interfaces):
        """Sets the ignore_virtual_interfaces of this ServerConfiguration.

        Gets or sets a value indicating whether address names that match MediaBrowser.Model.Configuration.ServerConfiguration.VirtualInterfaceNames should be Ignore for the purposes of binding.

        :param ignore_virtual_interfaces: The ignore_virtual_interfaces of this ServerConfiguration.
        :type ignore_virtual_interfaces: bool
        """

        self._ignore_virtual_interfaces = ignore_virtual_interfaces

    @property
    def image_extraction_timeout_ms(self):
        """Gets the image_extraction_timeout_ms of this ServerConfiguration.


        :return: The image_extraction_timeout_ms of this ServerConfiguration.
        :rtype: int
        """
        return self._image_extraction_timeout_ms

    @image_extraction_timeout_ms.setter
    def image_extraction_timeout_ms(self, image_extraction_timeout_ms):
        """Sets the image_extraction_timeout_ms of this ServerConfiguration.


        :param image_extraction_timeout_ms: The image_extraction_timeout_ms of this ServerConfiguration.
        :type image_extraction_timeout_ms: int
        """

        self._image_extraction_timeout_ms = image_extraction_timeout_ms

    @property
    def image_saving_convention(self):
        """Gets the image_saving_convention of this ServerConfiguration.


        :return: The image_saving_convention of this ServerConfiguration.
        :rtype: ImageSavingConvention
        """
        return self._image_saving_convention

    @image_saving_convention.setter
    def image_saving_convention(self, image_saving_convention):
        """Sets the image_saving_convention of this ServerConfiguration.


        :param image_saving_convention: The image_saving_convention of this ServerConfiguration.
        :type image_saving_convention: ImageSavingConvention
        """

        self._image_saving_convention = image_saving_convention

    @property
    def is_port_authorized(self):
        """Gets the is_port_authorized of this ServerConfiguration.

        Gets or sets a value indicating whether this instance is port authorized.

        :return: The is_port_authorized of this ServerConfiguration.
        :rtype: bool
        """
        return self._is_port_authorized

    @is_port_authorized.setter
    def is_port_authorized(self, is_port_authorized):
        """Sets the is_port_authorized of this ServerConfiguration.

        Gets or sets a value indicating whether this instance is port authorized.

        :param is_port_authorized: The is_port_authorized of this ServerConfiguration.
        :type is_port_authorized: bool
        """

        self._is_port_authorized = is_port_authorized

    @property
    def is_remote_ip_filter_blacklist(self):
        """Gets the is_remote_ip_filter_blacklist of this ServerConfiguration.

        Gets or sets a value indicating whether <seealso cref=\"P:MediaBrowser.Model.Configuration.ServerConfiguration.RemoteIPFilter\" /> contains a blacklist or a whitelist. Default is a whitelist.

        :return: The is_remote_ip_filter_blacklist of this ServerConfiguration.
        :rtype: bool
        """
        return self._is_remote_ip_filter_blacklist

    @is_remote_ip_filter_blacklist.setter
    def is_remote_ip_filter_blacklist(self, is_remote_ip_filter_blacklist):
        """Sets the is_remote_ip_filter_blacklist of this ServerConfiguration.

        Gets or sets a value indicating whether <seealso cref=\"P:MediaBrowser.Model.Configuration.ServerConfiguration.RemoteIPFilter\" /> contains a blacklist or a whitelist. Default is a whitelist.

        :param is_remote_ip_filter_blacklist: The is_remote_ip_filter_blacklist of this ServerConfiguration.
        :type is_remote_ip_filter_blacklist: bool
        """

        self._is_remote_ip_filter_blacklist = is_remote_ip_filter_blacklist

    @property
    def is_startup_wizard_completed(self):
        """Gets the is_startup_wizard_completed of this ServerConfiguration.

        Gets or sets a value indicating whether this instance is first run.

        :return: The is_startup_wizard_completed of this ServerConfiguration.
        :rtype: bool
        """
        return self._is_startup_wizard_completed

    @is_startup_wizard_completed.setter
    def is_startup_wizard_completed(self, is_startup_wizard_completed):
        """Sets the is_startup_wizard_completed of this ServerConfiguration.

        Gets or sets a value indicating whether this instance is first run.

        :param is_startup_wizard_completed: The is_startup_wizard_completed of this ServerConfiguration.
        :type is_startup_wizard_completed: bool
        """

        self._is_startup_wizard_completed = is_startup_wizard_completed

    @property
    def known_proxies(self):
        """Gets the known_proxies of this ServerConfiguration.

        Gets or sets the known proxies.

        :return: The known_proxies of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._known_proxies

    @known_proxies.setter
    def known_proxies(self, known_proxies):
        """Sets the known_proxies of this ServerConfiguration.

        Gets or sets the known proxies.

        :param known_proxies: The known_proxies of this ServerConfiguration.
        :type known_proxies: List[str]
        """

        self._known_proxies = known_proxies

    @property
    def library_metadata_refresh_concurrency(self):
        """Gets the library_metadata_refresh_concurrency of this ServerConfiguration.

        Gets or sets the how many metadata refreshes can run concurrently.

        :return: The library_metadata_refresh_concurrency of this ServerConfiguration.
        :rtype: int
        """
        return self._library_metadata_refresh_concurrency

    @library_metadata_refresh_concurrency.setter
    def library_metadata_refresh_concurrency(self, library_metadata_refresh_concurrency):
        """Sets the library_metadata_refresh_concurrency of this ServerConfiguration.

        Gets or sets the how many metadata refreshes can run concurrently.

        :param library_metadata_refresh_concurrency: The library_metadata_refresh_concurrency of this ServerConfiguration.
        :type library_metadata_refresh_concurrency: int
        """

        self._library_metadata_refresh_concurrency = library_metadata_refresh_concurrency

    @property
    def library_monitor_delay(self):
        """Gets the library_monitor_delay of this ServerConfiguration.

        Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removed  Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several  different directories and files.

        :return: The library_monitor_delay of this ServerConfiguration.
        :rtype: int
        """
        return self._library_monitor_delay

    @library_monitor_delay.setter
    def library_monitor_delay(self, library_monitor_delay):
        """Sets the library_monitor_delay of this ServerConfiguration.

        Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removed  Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several  different directories and files.

        :param library_monitor_delay: The library_monitor_delay of this ServerConfiguration.
        :type library_monitor_delay: int
        """

        self._library_monitor_delay = library_monitor_delay

    @property
    def library_scan_fanout_concurrency(self):
        """Gets the library_scan_fanout_concurrency of this ServerConfiguration.

        Gets or sets the how the library scan fans out.

        :return: The library_scan_fanout_concurrency of this ServerConfiguration.
        :rtype: int
        """
        return self._library_scan_fanout_concurrency

    @library_scan_fanout_concurrency.setter
    def library_scan_fanout_concurrency(self, library_scan_fanout_concurrency):
        """Sets the library_scan_fanout_concurrency of this ServerConfiguration.

        Gets or sets the how the library scan fans out.

        :param library_scan_fanout_concurrency: The library_scan_fanout_concurrency of this ServerConfiguration.
        :type library_scan_fanout_concurrency: int
        """

        self._library_scan_fanout_concurrency = library_scan_fanout_concurrency

    @property
    def local_network_addresses(self):
        """Gets the local_network_addresses of this ServerConfiguration.

        Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.

        :return: The local_network_addresses of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._local_network_addresses

    @local_network_addresses.setter
    def local_network_addresses(self, local_network_addresses):
        """Sets the local_network_addresses of this ServerConfiguration.

        Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.

        :param local_network_addresses: The local_network_addresses of this ServerConfiguration.
        :type local_network_addresses: List[str]
        """

        self._local_network_addresses = local_network_addresses

    @property
    def local_network_subnets(self):
        """Gets the local_network_subnets of this ServerConfiguration.

        Gets or sets the subnets that are deemed to make up the LAN.

        :return: The local_network_subnets of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._local_network_subnets

    @local_network_subnets.setter
    def local_network_subnets(self, local_network_subnets):
        """Sets the local_network_subnets of this ServerConfiguration.

        Gets or sets the subnets that are deemed to make up the LAN.

        :param local_network_subnets: The local_network_subnets of this ServerConfiguration.
        :type local_network_subnets: List[str]
        """

        self._local_network_subnets = local_network_subnets

    @property
    def log_file_retention_days(self):
        """Gets the log_file_retention_days of this ServerConfiguration.

        Gets or sets the number of days we should retain log files.

        :return: The log_file_retention_days of this ServerConfiguration.
        :rtype: int
        """
        return self._log_file_retention_days

    @log_file_retention_days.setter
    def log_file_retention_days(self, log_file_retention_days):
        """Sets the log_file_retention_days of this ServerConfiguration.

        Gets or sets the number of days we should retain log files.

        :param log_file_retention_days: The log_file_retention_days of this ServerConfiguration.
        :type log_file_retention_days: int
        """

        self._log_file_retention_days = log_file_retention_days

    @property
    def max_audiobook_resume(self):
        """Gets the max_audiobook_resume of this ServerConfiguration.

        Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.

        :return: The max_audiobook_resume of this ServerConfiguration.
        :rtype: int
        """
        return self._max_audiobook_resume

    @max_audiobook_resume.setter
    def max_audiobook_resume(self, max_audiobook_resume):
        """Sets the max_audiobook_resume of this ServerConfiguration.

        Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.

        :param max_audiobook_resume: The max_audiobook_resume of this ServerConfiguration.
        :type max_audiobook_resume: int
        """

        self._max_audiobook_resume = max_audiobook_resume

    @property
    def max_resume_pct(self):
        """Gets the max_resume_pct of this ServerConfiguration.

        Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.

        :return: The max_resume_pct of this ServerConfiguration.
        :rtype: int
        """
        return self._max_resume_pct

    @max_resume_pct.setter
    def max_resume_pct(self, max_resume_pct):
        """Sets the max_resume_pct of this ServerConfiguration.

        Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.

        :param max_resume_pct: The max_resume_pct of this ServerConfiguration.
        :type max_resume_pct: int
        """

        self._max_resume_pct = max_resume_pct

    @property
    def metadata_country_code(self):
        """Gets the metadata_country_code of this ServerConfiguration.

        Gets or sets the metadata country code.

        :return: The metadata_country_code of this ServerConfiguration.
        :rtype: str
        """
        return self._metadata_country_code

    @metadata_country_code.setter
    def metadata_country_code(self, metadata_country_code):
        """Sets the metadata_country_code of this ServerConfiguration.

        Gets or sets the metadata country code.

        :param metadata_country_code: The metadata_country_code of this ServerConfiguration.
        :type metadata_country_code: str
        """

        self._metadata_country_code = metadata_country_code

    @property
    def metadata_network_path(self):
        """Gets the metadata_network_path of this ServerConfiguration.


        :return: The metadata_network_path of this ServerConfiguration.
        :rtype: str
        """
        return self._metadata_network_path

    @metadata_network_path.setter
    def metadata_network_path(self, metadata_network_path):
        """Sets the metadata_network_path of this ServerConfiguration.


        :param metadata_network_path: The metadata_network_path of this ServerConfiguration.
        :type metadata_network_path: str
        """

        self._metadata_network_path = metadata_network_path

    @property
    def metadata_options(self):
        """Gets the metadata_options of this ServerConfiguration.


        :return: The metadata_options of this ServerConfiguration.
        :rtype: List[MetadataOptions]
        """
        return self._metadata_options

    @metadata_options.setter
    def metadata_options(self, metadata_options):
        """Sets the metadata_options of this ServerConfiguration.


        :param metadata_options: The metadata_options of this ServerConfiguration.
        :type metadata_options: List[MetadataOptions]
        """

        self._metadata_options = metadata_options

    @property
    def metadata_path(self):
        """Gets the metadata_path of this ServerConfiguration.

        Gets or sets the metadata path.

        :return: The metadata_path of this ServerConfiguration.
        :rtype: str
        """
        return self._metadata_path

    @metadata_path.setter
    def metadata_path(self, metadata_path):
        """Sets the metadata_path of this ServerConfiguration.

        Gets or sets the metadata path.

        :param metadata_path: The metadata_path of this ServerConfiguration.
        :type metadata_path: str
        """

        self._metadata_path = metadata_path

    @property
    def min_audiobook_resume(self):
        """Gets the min_audiobook_resume of this ServerConfiguration.

        Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated.

        :return: The min_audiobook_resume of this ServerConfiguration.
        :rtype: int
        """
        return self._min_audiobook_resume

    @min_audiobook_resume.setter
    def min_audiobook_resume(self, min_audiobook_resume):
        """Sets the min_audiobook_resume of this ServerConfiguration.

        Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated.

        :param min_audiobook_resume: The min_audiobook_resume of this ServerConfiguration.
        :type min_audiobook_resume: int
        """

        self._min_audiobook_resume = min_audiobook_resume

    @property
    def min_resume_duration_seconds(self):
        """Gets the min_resume_duration_seconds of this ServerConfiguration.

        Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates..

        :return: The min_resume_duration_seconds of this ServerConfiguration.
        :rtype: int
        """
        return self._min_resume_duration_seconds

    @min_resume_duration_seconds.setter
    def min_resume_duration_seconds(self, min_resume_duration_seconds):
        """Sets the min_resume_duration_seconds of this ServerConfiguration.

        Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates..

        :param min_resume_duration_seconds: The min_resume_duration_seconds of this ServerConfiguration.
        :type min_resume_duration_seconds: int
        """

        self._min_resume_duration_seconds = min_resume_duration_seconds

    @property
    def min_resume_pct(self):
        """Gets the min_resume_pct of this ServerConfiguration.

        Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.

        :return: The min_resume_pct of this ServerConfiguration.
        :rtype: int
        """
        return self._min_resume_pct

    @min_resume_pct.setter
    def min_resume_pct(self, min_resume_pct):
        """Sets the min_resume_pct of this ServerConfiguration.

        Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.

        :param min_resume_pct: The min_resume_pct of this ServerConfiguration.
        :type min_resume_pct: int
        """

        self._min_resume_pct = min_resume_pct

    @property
    def path_substitutions(self):
        """Gets the path_substitutions of this ServerConfiguration.


        :return: The path_substitutions of this ServerConfiguration.
        :rtype: List[PathSubstitution]
        """
        return self._path_substitutions

    @path_substitutions.setter
    def path_substitutions(self, path_substitutions):
        """Sets the path_substitutions of this ServerConfiguration.


        :param path_substitutions: The path_substitutions of this ServerConfiguration.
        :type path_substitutions: List[PathSubstitution]
        """

        self._path_substitutions = path_substitutions

    @property
    def plugin_repositories(self):
        """Gets the plugin_repositories of this ServerConfiguration.


        :return: The plugin_repositories of this ServerConfiguration.
        :rtype: List[RepositoryInfo]
        """
        return self._plugin_repositories

    @plugin_repositories.setter
    def plugin_repositories(self, plugin_repositories):
        """Sets the plugin_repositories of this ServerConfiguration.


        :param plugin_repositories: The plugin_repositories of this ServerConfiguration.
        :type plugin_repositories: List[RepositoryInfo]
        """

        self._plugin_repositories = plugin_repositories

    @property
    def preferred_metadata_language(self):
        """Gets the preferred_metadata_language of this ServerConfiguration.

        Gets or sets the preferred metadata language.

        :return: The preferred_metadata_language of this ServerConfiguration.
        :rtype: str
        """
        return self._preferred_metadata_language

    @preferred_metadata_language.setter
    def preferred_metadata_language(self, preferred_metadata_language):
        """Sets the preferred_metadata_language of this ServerConfiguration.

        Gets or sets the preferred metadata language.

        :param preferred_metadata_language: The preferred_metadata_language of this ServerConfiguration.
        :type preferred_metadata_language: str
        """

        self._preferred_metadata_language = preferred_metadata_language

    @property
    def previous_version(self):
        """Gets the previous_version of this ServerConfiguration.


        :return: The previous_version of this ServerConfiguration.
        :rtype: Version
        """
        return self._previous_version

    @previous_version.setter
    def previous_version(self, previous_version):
        """Sets the previous_version of this ServerConfiguration.


        :param previous_version: The previous_version of this ServerConfiguration.
        :type previous_version: Version
        """

        self._previous_version = previous_version

    @property
    def previous_version_str(self):
        """Gets the previous_version_str of this ServerConfiguration.

        Gets or sets the stringified PreviousVersion to be stored/loaded,  because System.Version itself isn't xml-serializable.

        :return: The previous_version_str of this ServerConfiguration.
        :rtype: str
        """
        return self._previous_version_str

    @previous_version_str.setter
    def previous_version_str(self, previous_version_str):
        """Sets the previous_version_str of this ServerConfiguration.

        Gets or sets the stringified PreviousVersion to be stored/loaded,  because System.Version itself isn't xml-serializable.

        :param previous_version_str: The previous_version_str of this ServerConfiguration.
        :type previous_version_str: str
        """

        self._previous_version_str = previous_version_str

    @property
    def public_https_port(self):
        """Gets the public_https_port of this ServerConfiguration.

        Gets or sets the public HTTPS port.

        :return: The public_https_port of this ServerConfiguration.
        :rtype: int
        """
        return self._public_https_port

    @public_https_port.setter
    def public_https_port(self, public_https_port):
        """Sets the public_https_port of this ServerConfiguration.

        Gets or sets the public HTTPS port.

        :param public_https_port: The public_https_port of this ServerConfiguration.
        :type public_https_port: int
        """

        self._public_https_port = public_https_port

    @property
    def public_port(self):
        """Gets the public_port of this ServerConfiguration.

        Gets or sets the public mapped port.

        :return: The public_port of this ServerConfiguration.
        :rtype: int
        """
        return self._public_port

    @public_port.setter
    def public_port(self, public_port):
        """Sets the public_port of this ServerConfiguration.

        Gets or sets the public mapped port.

        :param public_port: The public_port of this ServerConfiguration.
        :type public_port: int
        """

        self._public_port = public_port

    @property
    def published_server_uri_by_subnet(self):
        """Gets the published_server_uri_by_subnet of this ServerConfiguration.

        Gets or sets PublishedServerUri to advertise for specific subnets.

        :return: The published_server_uri_by_subnet of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._published_server_uri_by_subnet

    @published_server_uri_by_subnet.setter
    def published_server_uri_by_subnet(self, published_server_uri_by_subnet):
        """Sets the published_server_uri_by_subnet of this ServerConfiguration.

        Gets or sets PublishedServerUri to advertise for specific subnets.

        :param published_server_uri_by_subnet: The published_server_uri_by_subnet of this ServerConfiguration.
        :type published_server_uri_by_subnet: List[str]
        """

        self._published_server_uri_by_subnet = published_server_uri_by_subnet

    @property
    def quick_connect_available(self):
        """Gets the quick_connect_available of this ServerConfiguration.

        Gets or sets a value indicating whether quick connect is available for use on this server.

        :return: The quick_connect_available of this ServerConfiguration.
        :rtype: bool
        """
        return self._quick_connect_available

    @quick_connect_available.setter
    def quick_connect_available(self, quick_connect_available):
        """Sets the quick_connect_available of this ServerConfiguration.

        Gets or sets a value indicating whether quick connect is available for use on this server.

        :param quick_connect_available: The quick_connect_available of this ServerConfiguration.
        :type quick_connect_available: bool
        """

        self._quick_connect_available = quick_connect_available

    @property
    def remote_client_bitrate_limit(self):
        """Gets the remote_client_bitrate_limit of this ServerConfiguration.


        :return: The remote_client_bitrate_limit of this ServerConfiguration.
        :rtype: int
        """
        return self._remote_client_bitrate_limit

    @remote_client_bitrate_limit.setter
    def remote_client_bitrate_limit(self, remote_client_bitrate_limit):
        """Sets the remote_client_bitrate_limit of this ServerConfiguration.


        :param remote_client_bitrate_limit: The remote_client_bitrate_limit of this ServerConfiguration.
        :type remote_client_bitrate_limit: int
        """

        self._remote_client_bitrate_limit = remote_client_bitrate_limit

    @property
    def remote_ip_filter(self):
        """Gets the remote_ip_filter of this ServerConfiguration.

        Gets or sets the filter for remote IP connectivity. Used in conjuntion with <seealso cref=\"P:MediaBrowser.Model.Configuration.ServerConfiguration.IsRemoteIPFilterBlacklist\" />.

        :return: The remote_ip_filter of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._remote_ip_filter

    @remote_ip_filter.setter
    def remote_ip_filter(self, remote_ip_filter):
        """Sets the remote_ip_filter of this ServerConfiguration.

        Gets or sets the filter for remote IP connectivity. Used in conjuntion with <seealso cref=\"P:MediaBrowser.Model.Configuration.ServerConfiguration.IsRemoteIPFilterBlacklist\" />.

        :param remote_ip_filter: The remote_ip_filter of this ServerConfiguration.
        :type remote_ip_filter: List[str]
        """

        self._remote_ip_filter = remote_ip_filter

    @property
    def remove_old_plugins(self):
        """Gets the remove_old_plugins of this ServerConfiguration.

        Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder.

        :return: The remove_old_plugins of this ServerConfiguration.
        :rtype: bool
        """
        return self._remove_old_plugins

    @remove_old_plugins.setter
    def remove_old_plugins(self, remove_old_plugins):
        """Sets the remove_old_plugins of this ServerConfiguration.

        Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder.

        :param remove_old_plugins: The remove_old_plugins of this ServerConfiguration.
        :type remove_old_plugins: bool
        """

        self._remove_old_plugins = remove_old_plugins

    @property
    def require_https(self):
        """Gets the require_https of this ServerConfiguration.

        Gets or sets a value indicating whether the server should force connections over HTTPS.

        :return: The require_https of this ServerConfiguration.
        :rtype: bool
        """
        return self._require_https

    @require_https.setter
    def require_https(self, require_https):
        """Sets the require_https of this ServerConfiguration.

        Gets or sets a value indicating whether the server should force connections over HTTPS.

        :param require_https: The require_https of this ServerConfiguration.
        :type require_https: bool
        """

        self._require_https = require_https

    @property
    def ssdp_tracing_filter(self):
        """Gets the ssdp_tracing_filter of this ServerConfiguration.

        Gets or sets a value indicating whether an IP address is to be used to filter the detailed ssdp logs that are being sent to the console/log.  If the setting \"Emby.Dlna\": \"Debug\" msut be set in logging.default.json for this property to work.

        :return: The ssdp_tracing_filter of this ServerConfiguration.
        :rtype: str
        """
        return self._ssdp_tracing_filter

    @ssdp_tracing_filter.setter
    def ssdp_tracing_filter(self, ssdp_tracing_filter):
        """Sets the ssdp_tracing_filter of this ServerConfiguration.

        Gets or sets a value indicating whether an IP address is to be used to filter the detailed ssdp logs that are being sent to the console/log.  If the setting \"Emby.Dlna\": \"Debug\" msut be set in logging.default.json for this property to work.

        :param ssdp_tracing_filter: The ssdp_tracing_filter of this ServerConfiguration.
        :type ssdp_tracing_filter: str
        """

        self._ssdp_tracing_filter = ssdp_tracing_filter

    @property
    def save_metadata_hidden(self):
        """Gets the save_metadata_hidden of this ServerConfiguration.


        :return: The save_metadata_hidden of this ServerConfiguration.
        :rtype: bool
        """
        return self._save_metadata_hidden

    @save_metadata_hidden.setter
    def save_metadata_hidden(self, save_metadata_hidden):
        """Sets the save_metadata_hidden of this ServerConfiguration.


        :param save_metadata_hidden: The save_metadata_hidden of this ServerConfiguration.
        :type save_metadata_hidden: bool
        """

        self._save_metadata_hidden = save_metadata_hidden

    @property
    def server_name(self):
        """Gets the server_name of this ServerConfiguration.


        :return: The server_name of this ServerConfiguration.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this ServerConfiguration.


        :param server_name: The server_name of this ServerConfiguration.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def skip_deserialization_for_basic_types(self):
        """Gets the skip_deserialization_for_basic_types of this ServerConfiguration.


        :return: The skip_deserialization_for_basic_types of this ServerConfiguration.
        :rtype: bool
        """
        return self._skip_deserialization_for_basic_types

    @skip_deserialization_for_basic_types.setter
    def skip_deserialization_for_basic_types(self, skip_deserialization_for_basic_types):
        """Sets the skip_deserialization_for_basic_types of this ServerConfiguration.


        :param skip_deserialization_for_basic_types: The skip_deserialization_for_basic_types of this ServerConfiguration.
        :type skip_deserialization_for_basic_types: bool
        """

        self._skip_deserialization_for_basic_types = skip_deserialization_for_basic_types

    @property
    def slow_response_threshold_ms(self):
        """Gets the slow_response_threshold_ms of this ServerConfiguration.

        Gets or sets the threshold for the slow response time warning in ms.

        :return: The slow_response_threshold_ms of this ServerConfiguration.
        :rtype: int
        """
        return self._slow_response_threshold_ms

    @slow_response_threshold_ms.setter
    def slow_response_threshold_ms(self, slow_response_threshold_ms):
        """Sets the slow_response_threshold_ms of this ServerConfiguration.

        Gets or sets the threshold for the slow response time warning in ms.

        :param slow_response_threshold_ms: The slow_response_threshold_ms of this ServerConfiguration.
        :type slow_response_threshold_ms: int
        """

        self._slow_response_threshold_ms = slow_response_threshold_ms

    @property
    def sort_remove_characters(self):
        """Gets the sort_remove_characters of this ServerConfiguration.

        Gets or sets characters to be removed from strings to create a sort name.

        :return: The sort_remove_characters of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._sort_remove_characters

    @sort_remove_characters.setter
    def sort_remove_characters(self, sort_remove_characters):
        """Sets the sort_remove_characters of this ServerConfiguration.

        Gets or sets characters to be removed from strings to create a sort name.

        :param sort_remove_characters: The sort_remove_characters of this ServerConfiguration.
        :type sort_remove_characters: List[str]
        """

        self._sort_remove_characters = sort_remove_characters

    @property
    def sort_remove_words(self):
        """Gets the sort_remove_words of this ServerConfiguration.

        Gets or sets words to be removed from strings to create a sort name.

        :return: The sort_remove_words of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._sort_remove_words

    @sort_remove_words.setter
    def sort_remove_words(self, sort_remove_words):
        """Sets the sort_remove_words of this ServerConfiguration.

        Gets or sets words to be removed from strings to create a sort name.

        :param sort_remove_words: The sort_remove_words of this ServerConfiguration.
        :type sort_remove_words: List[str]
        """

        self._sort_remove_words = sort_remove_words

    @property
    def sort_replace_characters(self):
        """Gets the sort_replace_characters of this ServerConfiguration.

        Gets or sets characters to be replaced with a ' ' in strings to create a sort name.

        :return: The sort_replace_characters of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._sort_replace_characters

    @sort_replace_characters.setter
    def sort_replace_characters(self, sort_replace_characters):
        """Sets the sort_replace_characters of this ServerConfiguration.

        Gets or sets characters to be replaced with a ' ' in strings to create a sort name.

        :param sort_replace_characters: The sort_replace_characters of this ServerConfiguration.
        :type sort_replace_characters: List[str]
        """

        self._sort_replace_characters = sort_replace_characters

    @property
    def trust_all_ip6_interfaces(self):
        """Gets the trust_all_ip6_interfaces of this ServerConfiguration.

        Gets or sets a value indicating whether all IPv6 interfaces should be treated as on the internal network.  Depending on the address range implemented ULA ranges might not be used.

        :return: The trust_all_ip6_interfaces of this ServerConfiguration.
        :rtype: bool
        """
        return self._trust_all_ip6_interfaces

    @trust_all_ip6_interfaces.setter
    def trust_all_ip6_interfaces(self, trust_all_ip6_interfaces):
        """Sets the trust_all_ip6_interfaces of this ServerConfiguration.

        Gets or sets a value indicating whether all IPv6 interfaces should be treated as on the internal network.  Depending on the address range implemented ULA ranges might not be used.

        :param trust_all_ip6_interfaces: The trust_all_ip6_interfaces of this ServerConfiguration.
        :type trust_all_ip6_interfaces: bool
        """

        self._trust_all_ip6_interfaces = trust_all_ip6_interfaces

    @property
    def udp_port_range(self):
        """Gets the udp_port_range of this ServerConfiguration.

        Gets or sets client udp port range.

        :return: The udp_port_range of this ServerConfiguration.
        :rtype: str
        """
        return self._udp_port_range

    @udp_port_range.setter
    def udp_port_range(self, udp_port_range):
        """Sets the udp_port_range of this ServerConfiguration.

        Gets or sets client udp port range.

        :param udp_port_range: The udp_port_range of this ServerConfiguration.
        :type udp_port_range: str
        """

        self._udp_port_range = udp_port_range

    @property
    def udp_send_count(self):
        """Gets the udp_send_count of this ServerConfiguration.

        Gets or sets the number of times SSDP UDP messages are sent.

        :return: The udp_send_count of this ServerConfiguration.
        :rtype: int
        """
        return self._udp_send_count

    @udp_send_count.setter
    def udp_send_count(self, udp_send_count):
        """Sets the udp_send_count of this ServerConfiguration.

        Gets or sets the number of times SSDP UDP messages are sent.

        :param udp_send_count: The udp_send_count of this ServerConfiguration.
        :type udp_send_count: int
        """

        self._udp_send_count = udp_send_count

    @property
    def udp_send_delay(self):
        """Gets the udp_send_delay of this ServerConfiguration.

        Gets or sets the delay between each groups of SSDP messages (in ms).

        :return: The udp_send_delay of this ServerConfiguration.
        :rtype: int
        """
        return self._udp_send_delay

    @udp_send_delay.setter
    def udp_send_delay(self, udp_send_delay):
        """Sets the udp_send_delay of this ServerConfiguration.

        Gets or sets the delay between each groups of SSDP messages (in ms).

        :param udp_send_delay: The udp_send_delay of this ServerConfiguration.
        :type udp_send_delay: int
        """

        self._udp_send_delay = udp_send_delay

    @property
    def ui_culture(self):
        """Gets the ui_culture of this ServerConfiguration.


        :return: The ui_culture of this ServerConfiguration.
        :rtype: str
        """
        return self._ui_culture

    @ui_culture.setter
    def ui_culture(self, ui_culture):
        """Sets the ui_culture of this ServerConfiguration.


        :param ui_culture: The ui_culture of this ServerConfiguration.
        :type ui_culture: str
        """

        self._ui_culture = ui_culture

    @property
    def upn_p_create_http_port_map(self):
        """Gets the upn_p_create_http_port_map of this ServerConfiguration.

        Gets or sets a value indicating whether the http port should be mapped as part of UPnP automatic port forwarding.

        :return: The upn_p_create_http_port_map of this ServerConfiguration.
        :rtype: bool
        """
        return self._upn_p_create_http_port_map

    @upn_p_create_http_port_map.setter
    def upn_p_create_http_port_map(self, upn_p_create_http_port_map):
        """Sets the upn_p_create_http_port_map of this ServerConfiguration.

        Gets or sets a value indicating whether the http port should be mapped as part of UPnP automatic port forwarding.

        :param upn_p_create_http_port_map: The upn_p_create_http_port_map of this ServerConfiguration.
        :type upn_p_create_http_port_map: bool
        """

        self._upn_p_create_http_port_map = upn_p_create_http_port_map

    @property
    def uninstalled_plugins(self):
        """Gets the uninstalled_plugins of this ServerConfiguration.


        :return: The uninstalled_plugins of this ServerConfiguration.
        :rtype: List[str]
        """
        return self._uninstalled_plugins

    @uninstalled_plugins.setter
    def uninstalled_plugins(self, uninstalled_plugins):
        """Sets the uninstalled_plugins of this ServerConfiguration.


        :param uninstalled_plugins: The uninstalled_plugins of this ServerConfiguration.
        :type uninstalled_plugins: List[str]
        """

        self._uninstalled_plugins = uninstalled_plugins

    @property
    def virtual_interface_names(self):
        """Gets the virtual_interface_names of this ServerConfiguration.

        Gets or sets a value indicating the interfaces that should be ignored. The list can be comma separated. <seealso cref=\"P:MediaBrowser.Model.Configuration.ServerConfiguration.IgnoreVirtualInterfaces\" />.

        :return: The virtual_interface_names of this ServerConfiguration.
        :rtype: str
        """
        return self._virtual_interface_names

    @virtual_interface_names.setter
    def virtual_interface_names(self, virtual_interface_names):
        """Sets the virtual_interface_names of this ServerConfiguration.

        Gets or sets a value indicating the interfaces that should be ignored. The list can be comma separated. <seealso cref=\"P:MediaBrowser.Model.Configuration.ServerConfiguration.IgnoreVirtualInterfaces\" />.

        :param virtual_interface_names: The virtual_interface_names of this ServerConfiguration.
        :type virtual_interface_names: str
        """

        self._virtual_interface_names = virtual_interface_names
