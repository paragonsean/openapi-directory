# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.name_value_pair import NameValuePair
from openapi_server import util


class ListingsProviderInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_mappings: List[NameValuePair]=None, country: str=None, enable_all_tuners: bool=None, enabled_tuners: List[str]=None, id: str=None, kids_categories: List[str]=None, listings_id: str=None, movie_categories: List[str]=None, movie_prefix: str=None, news_categories: List[str]=None, password: str=None, path: str=None, preferred_language: str=None, sports_categories: List[str]=None, type: str=None, user_agent: str=None, username: str=None, zip_code: str=None):
        """ListingsProviderInfo - a model defined in OpenAPI

        :param channel_mappings: The channel_mappings of this ListingsProviderInfo.
        :param country: The country of this ListingsProviderInfo.
        :param enable_all_tuners: The enable_all_tuners of this ListingsProviderInfo.
        :param enabled_tuners: The enabled_tuners of this ListingsProviderInfo.
        :param id: The id of this ListingsProviderInfo.
        :param kids_categories: The kids_categories of this ListingsProviderInfo.
        :param listings_id: The listings_id of this ListingsProviderInfo.
        :param movie_categories: The movie_categories of this ListingsProviderInfo.
        :param movie_prefix: The movie_prefix of this ListingsProviderInfo.
        :param news_categories: The news_categories of this ListingsProviderInfo.
        :param password: The password of this ListingsProviderInfo.
        :param path: The path of this ListingsProviderInfo.
        :param preferred_language: The preferred_language of this ListingsProviderInfo.
        :param sports_categories: The sports_categories of this ListingsProviderInfo.
        :param type: The type of this ListingsProviderInfo.
        :param user_agent: The user_agent of this ListingsProviderInfo.
        :param username: The username of this ListingsProviderInfo.
        :param zip_code: The zip_code of this ListingsProviderInfo.
        """
        self.openapi_types = {
            'channel_mappings': List[NameValuePair],
            'country': str,
            'enable_all_tuners': bool,
            'enabled_tuners': List[str],
            'id': str,
            'kids_categories': List[str],
            'listings_id': str,
            'movie_categories': List[str],
            'movie_prefix': str,
            'news_categories': List[str],
            'password': str,
            'path': str,
            'preferred_language': str,
            'sports_categories': List[str],
            'type': str,
            'user_agent': str,
            'username': str,
            'zip_code': str
        }

        self.attribute_map = {
            'channel_mappings': 'ChannelMappings',
            'country': 'Country',
            'enable_all_tuners': 'EnableAllTuners',
            'enabled_tuners': 'EnabledTuners',
            'id': 'Id',
            'kids_categories': 'KidsCategories',
            'listings_id': 'ListingsId',
            'movie_categories': 'MovieCategories',
            'movie_prefix': 'MoviePrefix',
            'news_categories': 'NewsCategories',
            'password': 'Password',
            'path': 'Path',
            'preferred_language': 'PreferredLanguage',
            'sports_categories': 'SportsCategories',
            'type': 'Type',
            'user_agent': 'UserAgent',
            'username': 'Username',
            'zip_code': 'ZipCode'
        }

        self._channel_mappings = channel_mappings
        self._country = country
        self._enable_all_tuners = enable_all_tuners
        self._enabled_tuners = enabled_tuners
        self._id = id
        self._kids_categories = kids_categories
        self._listings_id = listings_id
        self._movie_categories = movie_categories
        self._movie_prefix = movie_prefix
        self._news_categories = news_categories
        self._password = password
        self._path = path
        self._preferred_language = preferred_language
        self._sports_categories = sports_categories
        self._type = type
        self._user_agent = user_agent
        self._username = username
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListingsProviderInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListingsProviderInfo of this ListingsProviderInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_mappings(self):
        """Gets the channel_mappings of this ListingsProviderInfo.


        :return: The channel_mappings of this ListingsProviderInfo.
        :rtype: List[NameValuePair]
        """
        return self._channel_mappings

    @channel_mappings.setter
    def channel_mappings(self, channel_mappings):
        """Sets the channel_mappings of this ListingsProviderInfo.


        :param channel_mappings: The channel_mappings of this ListingsProviderInfo.
        :type channel_mappings: List[NameValuePair]
        """

        self._channel_mappings = channel_mappings

    @property
    def country(self):
        """Gets the country of this ListingsProviderInfo.


        :return: The country of this ListingsProviderInfo.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ListingsProviderInfo.


        :param country: The country of this ListingsProviderInfo.
        :type country: str
        """

        self._country = country

    @property
    def enable_all_tuners(self):
        """Gets the enable_all_tuners of this ListingsProviderInfo.


        :return: The enable_all_tuners of this ListingsProviderInfo.
        :rtype: bool
        """
        return self._enable_all_tuners

    @enable_all_tuners.setter
    def enable_all_tuners(self, enable_all_tuners):
        """Sets the enable_all_tuners of this ListingsProviderInfo.


        :param enable_all_tuners: The enable_all_tuners of this ListingsProviderInfo.
        :type enable_all_tuners: bool
        """

        self._enable_all_tuners = enable_all_tuners

    @property
    def enabled_tuners(self):
        """Gets the enabled_tuners of this ListingsProviderInfo.


        :return: The enabled_tuners of this ListingsProviderInfo.
        :rtype: List[str]
        """
        return self._enabled_tuners

    @enabled_tuners.setter
    def enabled_tuners(self, enabled_tuners):
        """Sets the enabled_tuners of this ListingsProviderInfo.


        :param enabled_tuners: The enabled_tuners of this ListingsProviderInfo.
        :type enabled_tuners: List[str]
        """

        self._enabled_tuners = enabled_tuners

    @property
    def id(self):
        """Gets the id of this ListingsProviderInfo.


        :return: The id of this ListingsProviderInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListingsProviderInfo.


        :param id: The id of this ListingsProviderInfo.
        :type id: str
        """

        self._id = id

    @property
    def kids_categories(self):
        """Gets the kids_categories of this ListingsProviderInfo.


        :return: The kids_categories of this ListingsProviderInfo.
        :rtype: List[str]
        """
        return self._kids_categories

    @kids_categories.setter
    def kids_categories(self, kids_categories):
        """Sets the kids_categories of this ListingsProviderInfo.


        :param kids_categories: The kids_categories of this ListingsProviderInfo.
        :type kids_categories: List[str]
        """

        self._kids_categories = kids_categories

    @property
    def listings_id(self):
        """Gets the listings_id of this ListingsProviderInfo.


        :return: The listings_id of this ListingsProviderInfo.
        :rtype: str
        """
        return self._listings_id

    @listings_id.setter
    def listings_id(self, listings_id):
        """Sets the listings_id of this ListingsProviderInfo.


        :param listings_id: The listings_id of this ListingsProviderInfo.
        :type listings_id: str
        """

        self._listings_id = listings_id

    @property
    def movie_categories(self):
        """Gets the movie_categories of this ListingsProviderInfo.


        :return: The movie_categories of this ListingsProviderInfo.
        :rtype: List[str]
        """
        return self._movie_categories

    @movie_categories.setter
    def movie_categories(self, movie_categories):
        """Sets the movie_categories of this ListingsProviderInfo.


        :param movie_categories: The movie_categories of this ListingsProviderInfo.
        :type movie_categories: List[str]
        """

        self._movie_categories = movie_categories

    @property
    def movie_prefix(self):
        """Gets the movie_prefix of this ListingsProviderInfo.


        :return: The movie_prefix of this ListingsProviderInfo.
        :rtype: str
        """
        return self._movie_prefix

    @movie_prefix.setter
    def movie_prefix(self, movie_prefix):
        """Sets the movie_prefix of this ListingsProviderInfo.


        :param movie_prefix: The movie_prefix of this ListingsProviderInfo.
        :type movie_prefix: str
        """

        self._movie_prefix = movie_prefix

    @property
    def news_categories(self):
        """Gets the news_categories of this ListingsProviderInfo.


        :return: The news_categories of this ListingsProviderInfo.
        :rtype: List[str]
        """
        return self._news_categories

    @news_categories.setter
    def news_categories(self, news_categories):
        """Sets the news_categories of this ListingsProviderInfo.


        :param news_categories: The news_categories of this ListingsProviderInfo.
        :type news_categories: List[str]
        """

        self._news_categories = news_categories

    @property
    def password(self):
        """Gets the password of this ListingsProviderInfo.


        :return: The password of this ListingsProviderInfo.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ListingsProviderInfo.


        :param password: The password of this ListingsProviderInfo.
        :type password: str
        """

        self._password = password

    @property
    def path(self):
        """Gets the path of this ListingsProviderInfo.


        :return: The path of this ListingsProviderInfo.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ListingsProviderInfo.


        :param path: The path of this ListingsProviderInfo.
        :type path: str
        """

        self._path = path

    @property
    def preferred_language(self):
        """Gets the preferred_language of this ListingsProviderInfo.


        :return: The preferred_language of this ListingsProviderInfo.
        :rtype: str
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """Sets the preferred_language of this ListingsProviderInfo.


        :param preferred_language: The preferred_language of this ListingsProviderInfo.
        :type preferred_language: str
        """

        self._preferred_language = preferred_language

    @property
    def sports_categories(self):
        """Gets the sports_categories of this ListingsProviderInfo.


        :return: The sports_categories of this ListingsProviderInfo.
        :rtype: List[str]
        """
        return self._sports_categories

    @sports_categories.setter
    def sports_categories(self, sports_categories):
        """Sets the sports_categories of this ListingsProviderInfo.


        :param sports_categories: The sports_categories of this ListingsProviderInfo.
        :type sports_categories: List[str]
        """

        self._sports_categories = sports_categories

    @property
    def type(self):
        """Gets the type of this ListingsProviderInfo.


        :return: The type of this ListingsProviderInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListingsProviderInfo.


        :param type: The type of this ListingsProviderInfo.
        :type type: str
        """

        self._type = type

    @property
    def user_agent(self):
        """Gets the user_agent of this ListingsProviderInfo.


        :return: The user_agent of this ListingsProviderInfo.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this ListingsProviderInfo.


        :param user_agent: The user_agent of this ListingsProviderInfo.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def username(self):
        """Gets the username of this ListingsProviderInfo.


        :return: The username of this ListingsProviderInfo.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ListingsProviderInfo.


        :param username: The username of this ListingsProviderInfo.
        :type username: str
        """

        self._username = username

    @property
    def zip_code(self):
        """Gets the zip_code of this ListingsProviderInfo.


        :return: The zip_code of this ListingsProviderInfo.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this ListingsProviderInfo.


        :param zip_code: The zip_code of this ListingsProviderInfo.
        :type zip_code: str
        """

        self._zip_code = zip_code
