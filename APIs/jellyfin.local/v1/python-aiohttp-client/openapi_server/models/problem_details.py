# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProblemDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, instance: str=None, status: int=None, title: str=None, type: str=None):
        """ProblemDetails - a model defined in OpenAPI

        :param detail: The detail of this ProblemDetails.
        :param instance: The instance of this ProblemDetails.
        :param status: The status of this ProblemDetails.
        :param title: The title of this ProblemDetails.
        :param type: The type of this ProblemDetails.
        """
        self.openapi_types = {
            'detail': str,
            'instance': str,
            'status': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'instance': 'instance',
            'status': 'status',
            'title': 'title',
            'type': 'type'
        }

        self._detail = detail
        self._instance = instance
        self._status = status
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProblemDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProblemDetails of this ProblemDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this ProblemDetails.


        :return: The detail of this ProblemDetails.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ProblemDetails.


        :param detail: The detail of this ProblemDetails.
        :type detail: str
        """

        self._detail = detail

    @property
    def instance(self):
        """Gets the instance of this ProblemDetails.


        :return: The instance of this ProblemDetails.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ProblemDetails.


        :param instance: The instance of this ProblemDetails.
        :type instance: str
        """

        self._instance = instance

    @property
    def status(self):
        """Gets the status of this ProblemDetails.


        :return: The status of this ProblemDetails.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProblemDetails.


        :param status: The status of this ProblemDetails.
        :type status: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this ProblemDetails.


        :return: The title of this ProblemDetails.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProblemDetails.


        :param title: The title of this ProblemDetails.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this ProblemDetails.


        :return: The type of this ProblemDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProblemDetails.


        :param type: The type of this ProblemDetails.
        :type type: str
        """

        self._type = type
