# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_number: int=None, is_automated: bool=None, metadata_country_code: str=None, metadata_language: str=None, name: str=None, parent_index_number: int=None, path: str=None, premiere_date: datetime=None, provider_ids: Dict[str, str]=None, series_name: str=None, year: int=None):
        """BookInfo - a model defined in OpenAPI

        :param index_number: The index_number of this BookInfo.
        :param is_automated: The is_automated of this BookInfo.
        :param metadata_country_code: The metadata_country_code of this BookInfo.
        :param metadata_language: The metadata_language of this BookInfo.
        :param name: The name of this BookInfo.
        :param parent_index_number: The parent_index_number of this BookInfo.
        :param path: The path of this BookInfo.
        :param premiere_date: The premiere_date of this BookInfo.
        :param provider_ids: The provider_ids of this BookInfo.
        :param series_name: The series_name of this BookInfo.
        :param year: The year of this BookInfo.
        """
        self.openapi_types = {
            'index_number': int,
            'is_automated': bool,
            'metadata_country_code': str,
            'metadata_language': str,
            'name': str,
            'parent_index_number': int,
            'path': str,
            'premiere_date': datetime,
            'provider_ids': Dict[str, str],
            'series_name': str,
            'year': int
        }

        self.attribute_map = {
            'index_number': 'IndexNumber',
            'is_automated': 'IsAutomated',
            'metadata_country_code': 'MetadataCountryCode',
            'metadata_language': 'MetadataLanguage',
            'name': 'Name',
            'parent_index_number': 'ParentIndexNumber',
            'path': 'Path',
            'premiere_date': 'PremiereDate',
            'provider_ids': 'ProviderIds',
            'series_name': 'SeriesName',
            'year': 'Year'
        }

        self._index_number = index_number
        self._is_automated = is_automated
        self._metadata_country_code = metadata_country_code
        self._metadata_language = metadata_language
        self._name = name
        self._parent_index_number = parent_index_number
        self._path = path
        self._premiere_date = premiere_date
        self._provider_ids = provider_ids
        self._series_name = series_name
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BookInfo of this BookInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_number(self):
        """Gets the index_number of this BookInfo.


        :return: The index_number of this BookInfo.
        :rtype: int
        """
        return self._index_number

    @index_number.setter
    def index_number(self, index_number):
        """Sets the index_number of this BookInfo.


        :param index_number: The index_number of this BookInfo.
        :type index_number: int
        """

        self._index_number = index_number

    @property
    def is_automated(self):
        """Gets the is_automated of this BookInfo.


        :return: The is_automated of this BookInfo.
        :rtype: bool
        """
        return self._is_automated

    @is_automated.setter
    def is_automated(self, is_automated):
        """Sets the is_automated of this BookInfo.


        :param is_automated: The is_automated of this BookInfo.
        :type is_automated: bool
        """

        self._is_automated = is_automated

    @property
    def metadata_country_code(self):
        """Gets the metadata_country_code of this BookInfo.

        Gets or sets the metadata country code.

        :return: The metadata_country_code of this BookInfo.
        :rtype: str
        """
        return self._metadata_country_code

    @metadata_country_code.setter
    def metadata_country_code(self, metadata_country_code):
        """Sets the metadata_country_code of this BookInfo.

        Gets or sets the metadata country code.

        :param metadata_country_code: The metadata_country_code of this BookInfo.
        :type metadata_country_code: str
        """

        self._metadata_country_code = metadata_country_code

    @property
    def metadata_language(self):
        """Gets the metadata_language of this BookInfo.

        Gets or sets the metadata language.

        :return: The metadata_language of this BookInfo.
        :rtype: str
        """
        return self._metadata_language

    @metadata_language.setter
    def metadata_language(self, metadata_language):
        """Sets the metadata_language of this BookInfo.

        Gets or sets the metadata language.

        :param metadata_language: The metadata_language of this BookInfo.
        :type metadata_language: str
        """

        self._metadata_language = metadata_language

    @property
    def name(self):
        """Gets the name of this BookInfo.

        Gets or sets the name.

        :return: The name of this BookInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BookInfo.

        Gets or sets the name.

        :param name: The name of this BookInfo.
        :type name: str
        """

        self._name = name

    @property
    def parent_index_number(self):
        """Gets the parent_index_number of this BookInfo.


        :return: The parent_index_number of this BookInfo.
        :rtype: int
        """
        return self._parent_index_number

    @parent_index_number.setter
    def parent_index_number(self, parent_index_number):
        """Sets the parent_index_number of this BookInfo.


        :param parent_index_number: The parent_index_number of this BookInfo.
        :type parent_index_number: int
        """

        self._parent_index_number = parent_index_number

    @property
    def path(self):
        """Gets the path of this BookInfo.

        Gets or sets the path.

        :return: The path of this BookInfo.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BookInfo.

        Gets or sets the path.

        :param path: The path of this BookInfo.
        :type path: str
        """

        self._path = path

    @property
    def premiere_date(self):
        """Gets the premiere_date of this BookInfo.


        :return: The premiere_date of this BookInfo.
        :rtype: datetime
        """
        return self._premiere_date

    @premiere_date.setter
    def premiere_date(self, premiere_date):
        """Sets the premiere_date of this BookInfo.


        :param premiere_date: The premiere_date of this BookInfo.
        :type premiere_date: datetime
        """

        self._premiere_date = premiere_date

    @property
    def provider_ids(self):
        """Gets the provider_ids of this BookInfo.

        Gets or sets the provider ids.

        :return: The provider_ids of this BookInfo.
        :rtype: Dict[str, str]
        """
        return self._provider_ids

    @provider_ids.setter
    def provider_ids(self, provider_ids):
        """Sets the provider_ids of this BookInfo.

        Gets or sets the provider ids.

        :param provider_ids: The provider_ids of this BookInfo.
        :type provider_ids: Dict[str, str]
        """

        self._provider_ids = provider_ids

    @property
    def series_name(self):
        """Gets the series_name of this BookInfo.


        :return: The series_name of this BookInfo.
        :rtype: str
        """
        return self._series_name

    @series_name.setter
    def series_name(self, series_name):
        """Sets the series_name of this BookInfo.


        :param series_name: The series_name of this BookInfo.
        :type series_name: str
        """

        self._series_name = series_name

    @property
    def year(self):
        """Gets the year of this BookInfo.

        Gets or sets the year.

        :return: The year of this BookInfo.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this BookInfo.

        Gets or sets the year.

        :param year: The year of this BookInfo.
        :type year: int
        """

        self._year = year
