# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_item_sort_field import ChannelItemSortField
from openapi_server.models.channel_media_content_type import ChannelMediaContentType
from openapi_server.models.channel_media_type import ChannelMediaType
from openapi_server import util


class ChannelFeatures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_refresh_levels: int=None, can_filter: bool=None, can_search: bool=None, content_types: List[ChannelMediaContentType]=None, default_sort_fields: List[ChannelItemSortField]=None, id: str=None, max_page_size: int=None, media_types: List[ChannelMediaType]=None, name: str=None, supports_content_downloading: bool=None, supports_latest_media: bool=None, supports_sort_order_toggle: bool=None):
        """ChannelFeatures - a model defined in OpenAPI

        :param auto_refresh_levels: The auto_refresh_levels of this ChannelFeatures.
        :param can_filter: The can_filter of this ChannelFeatures.
        :param can_search: The can_search of this ChannelFeatures.
        :param content_types: The content_types of this ChannelFeatures.
        :param default_sort_fields: The default_sort_fields of this ChannelFeatures.
        :param id: The id of this ChannelFeatures.
        :param max_page_size: The max_page_size of this ChannelFeatures.
        :param media_types: The media_types of this ChannelFeatures.
        :param name: The name of this ChannelFeatures.
        :param supports_content_downloading: The supports_content_downloading of this ChannelFeatures.
        :param supports_latest_media: The supports_latest_media of this ChannelFeatures.
        :param supports_sort_order_toggle: The supports_sort_order_toggle of this ChannelFeatures.
        """
        self.openapi_types = {
            'auto_refresh_levels': int,
            'can_filter': bool,
            'can_search': bool,
            'content_types': List[ChannelMediaContentType],
            'default_sort_fields': List[ChannelItemSortField],
            'id': str,
            'max_page_size': int,
            'media_types': List[ChannelMediaType],
            'name': str,
            'supports_content_downloading': bool,
            'supports_latest_media': bool,
            'supports_sort_order_toggle': bool
        }

        self.attribute_map = {
            'auto_refresh_levels': 'AutoRefreshLevels',
            'can_filter': 'CanFilter',
            'can_search': 'CanSearch',
            'content_types': 'ContentTypes',
            'default_sort_fields': 'DefaultSortFields',
            'id': 'Id',
            'max_page_size': 'MaxPageSize',
            'media_types': 'MediaTypes',
            'name': 'Name',
            'supports_content_downloading': 'SupportsContentDownloading',
            'supports_latest_media': 'SupportsLatestMedia',
            'supports_sort_order_toggle': 'SupportsSortOrderToggle'
        }

        self._auto_refresh_levels = auto_refresh_levels
        self._can_filter = can_filter
        self._can_search = can_search
        self._content_types = content_types
        self._default_sort_fields = default_sort_fields
        self._id = id
        self._max_page_size = max_page_size
        self._media_types = media_types
        self._name = name
        self._supports_content_downloading = supports_content_downloading
        self._supports_latest_media = supports_latest_media
        self._supports_sort_order_toggle = supports_sort_order_toggle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelFeatures of this ChannelFeatures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_refresh_levels(self):
        """Gets the auto_refresh_levels of this ChannelFeatures.

        Gets or sets the automatic refresh levels.

        :return: The auto_refresh_levels of this ChannelFeatures.
        :rtype: int
        """
        return self._auto_refresh_levels

    @auto_refresh_levels.setter
    def auto_refresh_levels(self, auto_refresh_levels):
        """Sets the auto_refresh_levels of this ChannelFeatures.

        Gets or sets the automatic refresh levels.

        :param auto_refresh_levels: The auto_refresh_levels of this ChannelFeatures.
        :type auto_refresh_levels: int
        """

        self._auto_refresh_levels = auto_refresh_levels

    @property
    def can_filter(self):
        """Gets the can_filter of this ChannelFeatures.

        Gets or sets a value indicating whether this instance can filter.

        :return: The can_filter of this ChannelFeatures.
        :rtype: bool
        """
        return self._can_filter

    @can_filter.setter
    def can_filter(self, can_filter):
        """Sets the can_filter of this ChannelFeatures.

        Gets or sets a value indicating whether this instance can filter.

        :param can_filter: The can_filter of this ChannelFeatures.
        :type can_filter: bool
        """

        self._can_filter = can_filter

    @property
    def can_search(self):
        """Gets the can_search of this ChannelFeatures.

        Gets or sets a value indicating whether this instance can search.

        :return: The can_search of this ChannelFeatures.
        :rtype: bool
        """
        return self._can_search

    @can_search.setter
    def can_search(self, can_search):
        """Sets the can_search of this ChannelFeatures.

        Gets or sets a value indicating whether this instance can search.

        :param can_search: The can_search of this ChannelFeatures.
        :type can_search: bool
        """

        self._can_search = can_search

    @property
    def content_types(self):
        """Gets the content_types of this ChannelFeatures.

        Gets or sets the content types.

        :return: The content_types of this ChannelFeatures.
        :rtype: List[ChannelMediaContentType]
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this ChannelFeatures.

        Gets or sets the content types.

        :param content_types: The content_types of this ChannelFeatures.
        :type content_types: List[ChannelMediaContentType]
        """

        self._content_types = content_types

    @property
    def default_sort_fields(self):
        """Gets the default_sort_fields of this ChannelFeatures.

        Gets or sets the default sort orders.

        :return: The default_sort_fields of this ChannelFeatures.
        :rtype: List[ChannelItemSortField]
        """
        return self._default_sort_fields

    @default_sort_fields.setter
    def default_sort_fields(self, default_sort_fields):
        """Sets the default_sort_fields of this ChannelFeatures.

        Gets or sets the default sort orders.

        :param default_sort_fields: The default_sort_fields of this ChannelFeatures.
        :type default_sort_fields: List[ChannelItemSortField]
        """

        self._default_sort_fields = default_sort_fields

    @property
    def id(self):
        """Gets the id of this ChannelFeatures.

        Gets or sets the identifier.

        :return: The id of this ChannelFeatures.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChannelFeatures.

        Gets or sets the identifier.

        :param id: The id of this ChannelFeatures.
        :type id: str
        """

        self._id = id

    @property
    def max_page_size(self):
        """Gets the max_page_size of this ChannelFeatures.

        Represents the maximum number of records the channel allows retrieving at a time.

        :return: The max_page_size of this ChannelFeatures.
        :rtype: int
        """
        return self._max_page_size

    @max_page_size.setter
    def max_page_size(self, max_page_size):
        """Sets the max_page_size of this ChannelFeatures.

        Represents the maximum number of records the channel allows retrieving at a time.

        :param max_page_size: The max_page_size of this ChannelFeatures.
        :type max_page_size: int
        """

        self._max_page_size = max_page_size

    @property
    def media_types(self):
        """Gets the media_types of this ChannelFeatures.

        Gets or sets the media types.

        :return: The media_types of this ChannelFeatures.
        :rtype: List[ChannelMediaType]
        """
        return self._media_types

    @media_types.setter
    def media_types(self, media_types):
        """Sets the media_types of this ChannelFeatures.

        Gets or sets the media types.

        :param media_types: The media_types of this ChannelFeatures.
        :type media_types: List[ChannelMediaType]
        """

        self._media_types = media_types

    @property
    def name(self):
        """Gets the name of this ChannelFeatures.

        Gets or sets the name.

        :return: The name of this ChannelFeatures.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChannelFeatures.

        Gets or sets the name.

        :param name: The name of this ChannelFeatures.
        :type name: str
        """

        self._name = name

    @property
    def supports_content_downloading(self):
        """Gets the supports_content_downloading of this ChannelFeatures.

        Gets or sets a value indicating whether [supports content downloading].

        :return: The supports_content_downloading of this ChannelFeatures.
        :rtype: bool
        """
        return self._supports_content_downloading

    @supports_content_downloading.setter
    def supports_content_downloading(self, supports_content_downloading):
        """Sets the supports_content_downloading of this ChannelFeatures.

        Gets or sets a value indicating whether [supports content downloading].

        :param supports_content_downloading: The supports_content_downloading of this ChannelFeatures.
        :type supports_content_downloading: bool
        """

        self._supports_content_downloading = supports_content_downloading

    @property
    def supports_latest_media(self):
        """Gets the supports_latest_media of this ChannelFeatures.

        Gets or sets a value indicating whether [supports latest media].

        :return: The supports_latest_media of this ChannelFeatures.
        :rtype: bool
        """
        return self._supports_latest_media

    @supports_latest_media.setter
    def supports_latest_media(self, supports_latest_media):
        """Sets the supports_latest_media of this ChannelFeatures.

        Gets or sets a value indicating whether [supports latest media].

        :param supports_latest_media: The supports_latest_media of this ChannelFeatures.
        :type supports_latest_media: bool
        """

        self._supports_latest_media = supports_latest_media

    @property
    def supports_sort_order_toggle(self):
        """Gets the supports_sort_order_toggle of this ChannelFeatures.

        Indicates if a sort ascending/descending toggle is supported or not.

        :return: The supports_sort_order_toggle of this ChannelFeatures.
        :rtype: bool
        """
        return self._supports_sort_order_toggle

    @supports_sort_order_toggle.setter
    def supports_sort_order_toggle(self, supports_sort_order_toggle):
        """Sets the supports_sort_order_toggle of this ChannelFeatures.

        Indicates if a sort ascending/descending toggle is supported or not.

        :param supports_sort_order_toggle: The supports_sort_order_toggle of this ChannelFeatures.
        :type supports_sort_order_toggle: bool
        """

        self._supports_sort_order_toggle = supports_sort_order_toggle
