# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_tv_service_info import LiveTvServiceInfo
from openapi_server import util


class LiveTvInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled_users: List[str]=None, is_enabled: bool=None, services: List[LiveTvServiceInfo]=None):
        """LiveTvInfo - a model defined in OpenAPI

        :param enabled_users: The enabled_users of this LiveTvInfo.
        :param is_enabled: The is_enabled of this LiveTvInfo.
        :param services: The services of this LiveTvInfo.
        """
        self.openapi_types = {
            'enabled_users': List[str],
            'is_enabled': bool,
            'services': List[LiveTvServiceInfo]
        }

        self.attribute_map = {
            'enabled_users': 'EnabledUsers',
            'is_enabled': 'IsEnabled',
            'services': 'Services'
        }

        self._enabled_users = enabled_users
        self._is_enabled = is_enabled
        self._services = services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveTvInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveTvInfo of this LiveTvInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled_users(self):
        """Gets the enabled_users of this LiveTvInfo.

        Gets or sets the enabled users.

        :return: The enabled_users of this LiveTvInfo.
        :rtype: List[str]
        """
        return self._enabled_users

    @enabled_users.setter
    def enabled_users(self, enabled_users):
        """Sets the enabled_users of this LiveTvInfo.

        Gets or sets the enabled users.

        :param enabled_users: The enabled_users of this LiveTvInfo.
        :type enabled_users: List[str]
        """

        self._enabled_users = enabled_users

    @property
    def is_enabled(self):
        """Gets the is_enabled of this LiveTvInfo.

        Gets or sets a value indicating whether this instance is enabled.

        :return: The is_enabled of this LiveTvInfo.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this LiveTvInfo.

        Gets or sets a value indicating whether this instance is enabled.

        :param is_enabled: The is_enabled of this LiveTvInfo.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def services(self):
        """Gets the services of this LiveTvInfo.

        Gets or sets the services.

        :return: The services of this LiveTvInfo.
        :rtype: List[LiveTvServiceInfo]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this LiveTvInfo.

        Gets or sets the services.

        :param services: The services of this LiveTvInfo.
        :type services: List[LiveTvServiceInfo]
        """

        self._services = services
