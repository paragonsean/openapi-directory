# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_profile import DeviceProfile
from openapi_server import util


class PlaybackInfoDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_audio_stream_copy: bool=None, allow_video_stream_copy: bool=None, audio_stream_index: int=None, auto_open_live_stream: bool=None, device_profile: DeviceProfile=None, enable_direct_play: bool=None, enable_direct_stream: bool=None, enable_transcoding: bool=None, live_stream_id: str=None, max_audio_channels: int=None, max_streaming_bitrate: int=None, media_source_id: str=None, start_time_ticks: int=None, subtitle_stream_index: int=None, user_id: str=None):
        """PlaybackInfoDto - a model defined in OpenAPI

        :param allow_audio_stream_copy: The allow_audio_stream_copy of this PlaybackInfoDto.
        :param allow_video_stream_copy: The allow_video_stream_copy of this PlaybackInfoDto.
        :param audio_stream_index: The audio_stream_index of this PlaybackInfoDto.
        :param auto_open_live_stream: The auto_open_live_stream of this PlaybackInfoDto.
        :param device_profile: The device_profile of this PlaybackInfoDto.
        :param enable_direct_play: The enable_direct_play of this PlaybackInfoDto.
        :param enable_direct_stream: The enable_direct_stream of this PlaybackInfoDto.
        :param enable_transcoding: The enable_transcoding of this PlaybackInfoDto.
        :param live_stream_id: The live_stream_id of this PlaybackInfoDto.
        :param max_audio_channels: The max_audio_channels of this PlaybackInfoDto.
        :param max_streaming_bitrate: The max_streaming_bitrate of this PlaybackInfoDto.
        :param media_source_id: The media_source_id of this PlaybackInfoDto.
        :param start_time_ticks: The start_time_ticks of this PlaybackInfoDto.
        :param subtitle_stream_index: The subtitle_stream_index of this PlaybackInfoDto.
        :param user_id: The user_id of this PlaybackInfoDto.
        """
        self.openapi_types = {
            'allow_audio_stream_copy': bool,
            'allow_video_stream_copy': bool,
            'audio_stream_index': int,
            'auto_open_live_stream': bool,
            'device_profile': DeviceProfile,
            'enable_direct_play': bool,
            'enable_direct_stream': bool,
            'enable_transcoding': bool,
            'live_stream_id': str,
            'max_audio_channels': int,
            'max_streaming_bitrate': int,
            'media_source_id': str,
            'start_time_ticks': int,
            'subtitle_stream_index': int,
            'user_id': str
        }

        self.attribute_map = {
            'allow_audio_stream_copy': 'AllowAudioStreamCopy',
            'allow_video_stream_copy': 'AllowVideoStreamCopy',
            'audio_stream_index': 'AudioStreamIndex',
            'auto_open_live_stream': 'AutoOpenLiveStream',
            'device_profile': 'DeviceProfile',
            'enable_direct_play': 'EnableDirectPlay',
            'enable_direct_stream': 'EnableDirectStream',
            'enable_transcoding': 'EnableTranscoding',
            'live_stream_id': 'LiveStreamId',
            'max_audio_channels': 'MaxAudioChannels',
            'max_streaming_bitrate': 'MaxStreamingBitrate',
            'media_source_id': 'MediaSourceId',
            'start_time_ticks': 'StartTimeTicks',
            'subtitle_stream_index': 'SubtitleStreamIndex',
            'user_id': 'UserId'
        }

        self._allow_audio_stream_copy = allow_audio_stream_copy
        self._allow_video_stream_copy = allow_video_stream_copy
        self._audio_stream_index = audio_stream_index
        self._auto_open_live_stream = auto_open_live_stream
        self._device_profile = device_profile
        self._enable_direct_play = enable_direct_play
        self._enable_direct_stream = enable_direct_stream
        self._enable_transcoding = enable_transcoding
        self._live_stream_id = live_stream_id
        self._max_audio_channels = max_audio_channels
        self._max_streaming_bitrate = max_streaming_bitrate
        self._media_source_id = media_source_id
        self._start_time_ticks = start_time_ticks
        self._subtitle_stream_index = subtitle_stream_index
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaybackInfoDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaybackInfoDto of this PlaybackInfoDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_audio_stream_copy(self):
        """Gets the allow_audio_stream_copy of this PlaybackInfoDto.

        Gets or sets a value indicating whether to allow audio stream copy.

        :return: The allow_audio_stream_copy of this PlaybackInfoDto.
        :rtype: bool
        """
        return self._allow_audio_stream_copy

    @allow_audio_stream_copy.setter
    def allow_audio_stream_copy(self, allow_audio_stream_copy):
        """Sets the allow_audio_stream_copy of this PlaybackInfoDto.

        Gets or sets a value indicating whether to allow audio stream copy.

        :param allow_audio_stream_copy: The allow_audio_stream_copy of this PlaybackInfoDto.
        :type allow_audio_stream_copy: bool
        """

        self._allow_audio_stream_copy = allow_audio_stream_copy

    @property
    def allow_video_stream_copy(self):
        """Gets the allow_video_stream_copy of this PlaybackInfoDto.

        Gets or sets a value indicating whether to enable video stream copy.

        :return: The allow_video_stream_copy of this PlaybackInfoDto.
        :rtype: bool
        """
        return self._allow_video_stream_copy

    @allow_video_stream_copy.setter
    def allow_video_stream_copy(self, allow_video_stream_copy):
        """Sets the allow_video_stream_copy of this PlaybackInfoDto.

        Gets or sets a value indicating whether to enable video stream copy.

        :param allow_video_stream_copy: The allow_video_stream_copy of this PlaybackInfoDto.
        :type allow_video_stream_copy: bool
        """

        self._allow_video_stream_copy = allow_video_stream_copy

    @property
    def audio_stream_index(self):
        """Gets the audio_stream_index of this PlaybackInfoDto.

        Gets or sets the audio stream index.

        :return: The audio_stream_index of this PlaybackInfoDto.
        :rtype: int
        """
        return self._audio_stream_index

    @audio_stream_index.setter
    def audio_stream_index(self, audio_stream_index):
        """Sets the audio_stream_index of this PlaybackInfoDto.

        Gets or sets the audio stream index.

        :param audio_stream_index: The audio_stream_index of this PlaybackInfoDto.
        :type audio_stream_index: int
        """

        self._audio_stream_index = audio_stream_index

    @property
    def auto_open_live_stream(self):
        """Gets the auto_open_live_stream of this PlaybackInfoDto.

        Gets or sets a value indicating whether to auto open the live stream.

        :return: The auto_open_live_stream of this PlaybackInfoDto.
        :rtype: bool
        """
        return self._auto_open_live_stream

    @auto_open_live_stream.setter
    def auto_open_live_stream(self, auto_open_live_stream):
        """Sets the auto_open_live_stream of this PlaybackInfoDto.

        Gets or sets a value indicating whether to auto open the live stream.

        :param auto_open_live_stream: The auto_open_live_stream of this PlaybackInfoDto.
        :type auto_open_live_stream: bool
        """

        self._auto_open_live_stream = auto_open_live_stream

    @property
    def device_profile(self):
        """Gets the device_profile of this PlaybackInfoDto.


        :return: The device_profile of this PlaybackInfoDto.
        :rtype: DeviceProfile
        """
        return self._device_profile

    @device_profile.setter
    def device_profile(self, device_profile):
        """Sets the device_profile of this PlaybackInfoDto.


        :param device_profile: The device_profile of this PlaybackInfoDto.
        :type device_profile: DeviceProfile
        """

        self._device_profile = device_profile

    @property
    def enable_direct_play(self):
        """Gets the enable_direct_play of this PlaybackInfoDto.

        Gets or sets a value indicating whether to enable direct play.

        :return: The enable_direct_play of this PlaybackInfoDto.
        :rtype: bool
        """
        return self._enable_direct_play

    @enable_direct_play.setter
    def enable_direct_play(self, enable_direct_play):
        """Sets the enable_direct_play of this PlaybackInfoDto.

        Gets or sets a value indicating whether to enable direct play.

        :param enable_direct_play: The enable_direct_play of this PlaybackInfoDto.
        :type enable_direct_play: bool
        """

        self._enable_direct_play = enable_direct_play

    @property
    def enable_direct_stream(self):
        """Gets the enable_direct_stream of this PlaybackInfoDto.

        Gets or sets a value indicating whether to enable direct stream.

        :return: The enable_direct_stream of this PlaybackInfoDto.
        :rtype: bool
        """
        return self._enable_direct_stream

    @enable_direct_stream.setter
    def enable_direct_stream(self, enable_direct_stream):
        """Sets the enable_direct_stream of this PlaybackInfoDto.

        Gets or sets a value indicating whether to enable direct stream.

        :param enable_direct_stream: The enable_direct_stream of this PlaybackInfoDto.
        :type enable_direct_stream: bool
        """

        self._enable_direct_stream = enable_direct_stream

    @property
    def enable_transcoding(self):
        """Gets the enable_transcoding of this PlaybackInfoDto.

        Gets or sets a value indicating whether to enable transcoding.

        :return: The enable_transcoding of this PlaybackInfoDto.
        :rtype: bool
        """
        return self._enable_transcoding

    @enable_transcoding.setter
    def enable_transcoding(self, enable_transcoding):
        """Sets the enable_transcoding of this PlaybackInfoDto.

        Gets or sets a value indicating whether to enable transcoding.

        :param enable_transcoding: The enable_transcoding of this PlaybackInfoDto.
        :type enable_transcoding: bool
        """

        self._enable_transcoding = enable_transcoding

    @property
    def live_stream_id(self):
        """Gets the live_stream_id of this PlaybackInfoDto.

        Gets or sets the live stream id.

        :return: The live_stream_id of this PlaybackInfoDto.
        :rtype: str
        """
        return self._live_stream_id

    @live_stream_id.setter
    def live_stream_id(self, live_stream_id):
        """Sets the live_stream_id of this PlaybackInfoDto.

        Gets or sets the live stream id.

        :param live_stream_id: The live_stream_id of this PlaybackInfoDto.
        :type live_stream_id: str
        """

        self._live_stream_id = live_stream_id

    @property
    def max_audio_channels(self):
        """Gets the max_audio_channels of this PlaybackInfoDto.

        Gets or sets the max audio channels.

        :return: The max_audio_channels of this PlaybackInfoDto.
        :rtype: int
        """
        return self._max_audio_channels

    @max_audio_channels.setter
    def max_audio_channels(self, max_audio_channels):
        """Sets the max_audio_channels of this PlaybackInfoDto.

        Gets or sets the max audio channels.

        :param max_audio_channels: The max_audio_channels of this PlaybackInfoDto.
        :type max_audio_channels: int
        """

        self._max_audio_channels = max_audio_channels

    @property
    def max_streaming_bitrate(self):
        """Gets the max_streaming_bitrate of this PlaybackInfoDto.

        Gets or sets the max streaming bitrate.

        :return: The max_streaming_bitrate of this PlaybackInfoDto.
        :rtype: int
        """
        return self._max_streaming_bitrate

    @max_streaming_bitrate.setter
    def max_streaming_bitrate(self, max_streaming_bitrate):
        """Sets the max_streaming_bitrate of this PlaybackInfoDto.

        Gets or sets the max streaming bitrate.

        :param max_streaming_bitrate: The max_streaming_bitrate of this PlaybackInfoDto.
        :type max_streaming_bitrate: int
        """

        self._max_streaming_bitrate = max_streaming_bitrate

    @property
    def media_source_id(self):
        """Gets the media_source_id of this PlaybackInfoDto.

        Gets or sets the media source id.

        :return: The media_source_id of this PlaybackInfoDto.
        :rtype: str
        """
        return self._media_source_id

    @media_source_id.setter
    def media_source_id(self, media_source_id):
        """Sets the media_source_id of this PlaybackInfoDto.

        Gets or sets the media source id.

        :param media_source_id: The media_source_id of this PlaybackInfoDto.
        :type media_source_id: str
        """

        self._media_source_id = media_source_id

    @property
    def start_time_ticks(self):
        """Gets the start_time_ticks of this PlaybackInfoDto.

        Gets or sets the start time in ticks.

        :return: The start_time_ticks of this PlaybackInfoDto.
        :rtype: int
        """
        return self._start_time_ticks

    @start_time_ticks.setter
    def start_time_ticks(self, start_time_ticks):
        """Sets the start_time_ticks of this PlaybackInfoDto.

        Gets or sets the start time in ticks.

        :param start_time_ticks: The start_time_ticks of this PlaybackInfoDto.
        :type start_time_ticks: int
        """

        self._start_time_ticks = start_time_ticks

    @property
    def subtitle_stream_index(self):
        """Gets the subtitle_stream_index of this PlaybackInfoDto.

        Gets or sets the subtitle stream index.

        :return: The subtitle_stream_index of this PlaybackInfoDto.
        :rtype: int
        """
        return self._subtitle_stream_index

    @subtitle_stream_index.setter
    def subtitle_stream_index(self, subtitle_stream_index):
        """Sets the subtitle_stream_index of this PlaybackInfoDto.

        Gets or sets the subtitle stream index.

        :param subtitle_stream_index: The subtitle_stream_index of this PlaybackInfoDto.
        :type subtitle_stream_index: int
        """

        self._subtitle_stream_index = subtitle_stream_index

    @property
    def user_id(self):
        """Gets the user_id of this PlaybackInfoDto.

        Gets or sets the playback userId.

        :return: The user_id of this PlaybackInfoDto.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PlaybackInfoDto.

        Gets or sets the playback userId.

        :param user_id: The user_id of this PlaybackInfoDto.
        :type user_id: str
        """

        self._user_id = user_id
