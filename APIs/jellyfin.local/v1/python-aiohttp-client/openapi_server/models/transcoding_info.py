# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transcode_reason import TranscodeReason
from openapi_server import util


class TranscodingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_channels: int=None, audio_codec: str=None, bitrate: int=None, completion_percentage: float=None, container: str=None, framerate: float=None, height: int=None, is_audio_direct: bool=None, is_video_direct: bool=None, transcode_reasons: List[TranscodeReason]=None, video_codec: str=None, width: int=None):
        """TranscodingInfo - a model defined in OpenAPI

        :param audio_channels: The audio_channels of this TranscodingInfo.
        :param audio_codec: The audio_codec of this TranscodingInfo.
        :param bitrate: The bitrate of this TranscodingInfo.
        :param completion_percentage: The completion_percentage of this TranscodingInfo.
        :param container: The container of this TranscodingInfo.
        :param framerate: The framerate of this TranscodingInfo.
        :param height: The height of this TranscodingInfo.
        :param is_audio_direct: The is_audio_direct of this TranscodingInfo.
        :param is_video_direct: The is_video_direct of this TranscodingInfo.
        :param transcode_reasons: The transcode_reasons of this TranscodingInfo.
        :param video_codec: The video_codec of this TranscodingInfo.
        :param width: The width of this TranscodingInfo.
        """
        self.openapi_types = {
            'audio_channels': int,
            'audio_codec': str,
            'bitrate': int,
            'completion_percentage': float,
            'container': str,
            'framerate': float,
            'height': int,
            'is_audio_direct': bool,
            'is_video_direct': bool,
            'transcode_reasons': List[TranscodeReason],
            'video_codec': str,
            'width': int
        }

        self.attribute_map = {
            'audio_channels': 'AudioChannels',
            'audio_codec': 'AudioCodec',
            'bitrate': 'Bitrate',
            'completion_percentage': 'CompletionPercentage',
            'container': 'Container',
            'framerate': 'Framerate',
            'height': 'Height',
            'is_audio_direct': 'IsAudioDirect',
            'is_video_direct': 'IsVideoDirect',
            'transcode_reasons': 'TranscodeReasons',
            'video_codec': 'VideoCodec',
            'width': 'Width'
        }

        self._audio_channels = audio_channels
        self._audio_codec = audio_codec
        self._bitrate = bitrate
        self._completion_percentage = completion_percentage
        self._container = container
        self._framerate = framerate
        self._height = height
        self._is_audio_direct = is_audio_direct
        self._is_video_direct = is_video_direct
        self._transcode_reasons = transcode_reasons
        self._video_codec = video_codec
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TranscodingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TranscodingInfo of this TranscodingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_channels(self):
        """Gets the audio_channels of this TranscodingInfo.


        :return: The audio_channels of this TranscodingInfo.
        :rtype: int
        """
        return self._audio_channels

    @audio_channels.setter
    def audio_channels(self, audio_channels):
        """Sets the audio_channels of this TranscodingInfo.


        :param audio_channels: The audio_channels of this TranscodingInfo.
        :type audio_channels: int
        """

        self._audio_channels = audio_channels

    @property
    def audio_codec(self):
        """Gets the audio_codec of this TranscodingInfo.


        :return: The audio_codec of this TranscodingInfo.
        :rtype: str
        """
        return self._audio_codec

    @audio_codec.setter
    def audio_codec(self, audio_codec):
        """Sets the audio_codec of this TranscodingInfo.


        :param audio_codec: The audio_codec of this TranscodingInfo.
        :type audio_codec: str
        """

        self._audio_codec = audio_codec

    @property
    def bitrate(self):
        """Gets the bitrate of this TranscodingInfo.


        :return: The bitrate of this TranscodingInfo.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this TranscodingInfo.


        :param bitrate: The bitrate of this TranscodingInfo.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def completion_percentage(self):
        """Gets the completion_percentage of this TranscodingInfo.


        :return: The completion_percentage of this TranscodingInfo.
        :rtype: float
        """
        return self._completion_percentage

    @completion_percentage.setter
    def completion_percentage(self, completion_percentage):
        """Sets the completion_percentage of this TranscodingInfo.


        :param completion_percentage: The completion_percentage of this TranscodingInfo.
        :type completion_percentage: float
        """

        self._completion_percentage = completion_percentage

    @property
    def container(self):
        """Gets the container of this TranscodingInfo.


        :return: The container of this TranscodingInfo.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this TranscodingInfo.


        :param container: The container of this TranscodingInfo.
        :type container: str
        """

        self._container = container

    @property
    def framerate(self):
        """Gets the framerate of this TranscodingInfo.


        :return: The framerate of this TranscodingInfo.
        :rtype: float
        """
        return self._framerate

    @framerate.setter
    def framerate(self, framerate):
        """Sets the framerate of this TranscodingInfo.


        :param framerate: The framerate of this TranscodingInfo.
        :type framerate: float
        """

        self._framerate = framerate

    @property
    def height(self):
        """Gets the height of this TranscodingInfo.


        :return: The height of this TranscodingInfo.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TranscodingInfo.


        :param height: The height of this TranscodingInfo.
        :type height: int
        """

        self._height = height

    @property
    def is_audio_direct(self):
        """Gets the is_audio_direct of this TranscodingInfo.


        :return: The is_audio_direct of this TranscodingInfo.
        :rtype: bool
        """
        return self._is_audio_direct

    @is_audio_direct.setter
    def is_audio_direct(self, is_audio_direct):
        """Sets the is_audio_direct of this TranscodingInfo.


        :param is_audio_direct: The is_audio_direct of this TranscodingInfo.
        :type is_audio_direct: bool
        """

        self._is_audio_direct = is_audio_direct

    @property
    def is_video_direct(self):
        """Gets the is_video_direct of this TranscodingInfo.


        :return: The is_video_direct of this TranscodingInfo.
        :rtype: bool
        """
        return self._is_video_direct

    @is_video_direct.setter
    def is_video_direct(self, is_video_direct):
        """Sets the is_video_direct of this TranscodingInfo.


        :param is_video_direct: The is_video_direct of this TranscodingInfo.
        :type is_video_direct: bool
        """

        self._is_video_direct = is_video_direct

    @property
    def transcode_reasons(self):
        """Gets the transcode_reasons of this TranscodingInfo.


        :return: The transcode_reasons of this TranscodingInfo.
        :rtype: List[TranscodeReason]
        """
        return self._transcode_reasons

    @transcode_reasons.setter
    def transcode_reasons(self, transcode_reasons):
        """Sets the transcode_reasons of this TranscodingInfo.


        :param transcode_reasons: The transcode_reasons of this TranscodingInfo.
        :type transcode_reasons: List[TranscodeReason]
        """

        self._transcode_reasons = transcode_reasons

    @property
    def video_codec(self):
        """Gets the video_codec of this TranscodingInfo.


        :return: The video_codec of this TranscodingInfo.
        :rtype: str
        """
        return self._video_codec

    @video_codec.setter
    def video_codec(self, video_codec):
        """Sets the video_codec of this TranscodingInfo.


        :param video_codec: The video_codec of this TranscodingInfo.
        :type video_codec: str
        """

        self._video_codec = video_codec

    @property
    def width(self):
        """Gets the width of this TranscodingInfo.


        :return: The width of this TranscodingInfo.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this TranscodingInfo.


        :param width: The width of this TranscodingInfo.
        :type width: int
        """

        self._width = width
