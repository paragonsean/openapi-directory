/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SongInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SongInfo {
  public static final String SERIALIZED_NAME_ALBUM = "Album";
  @SerializedName(SERIALIZED_NAME_ALBUM)
  private String album;

  public static final String SERIALIZED_NAME_ALBUM_ARTISTS = "AlbumArtists";
  @SerializedName(SERIALIZED_NAME_ALBUM_ARTISTS)
  private List<String> albumArtists;

  public static final String SERIALIZED_NAME_ARTISTS = "Artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<String> artists;

  public static final String SERIALIZED_NAME_INDEX_NUMBER = "IndexNumber";
  @SerializedName(SERIALIZED_NAME_INDEX_NUMBER)
  private Integer indexNumber;

  public static final String SERIALIZED_NAME_IS_AUTOMATED = "IsAutomated";
  @SerializedName(SERIALIZED_NAME_IS_AUTOMATED)
  private Boolean isAutomated;

  public static final String SERIALIZED_NAME_METADATA_COUNTRY_CODE = "MetadataCountryCode";
  @SerializedName(SERIALIZED_NAME_METADATA_COUNTRY_CODE)
  private String metadataCountryCode;

  public static final String SERIALIZED_NAME_METADATA_LANGUAGE = "MetadataLanguage";
  @SerializedName(SERIALIZED_NAME_METADATA_LANGUAGE)
  private String metadataLanguage;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_INDEX_NUMBER = "ParentIndexNumber";
  @SerializedName(SERIALIZED_NAME_PARENT_INDEX_NUMBER)
  private Integer parentIndexNumber;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PREMIERE_DATE = "PremiereDate";
  @SerializedName(SERIALIZED_NAME_PREMIERE_DATE)
  private OffsetDateTime premiereDate;

  public static final String SERIALIZED_NAME_PROVIDER_IDS = "ProviderIds";
  @SerializedName(SERIALIZED_NAME_PROVIDER_IDS)
  private Map<String, String> providerIds;

  public static final String SERIALIZED_NAME_YEAR = "Year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public SongInfo() {
  }

  public SongInfo album(String album) {
    this.album = album;
    return this;
  }

  /**
   * Get album
   * @return album
   */
  @javax.annotation.Nullable
  public String getAlbum() {
    return album;
  }

  public void setAlbum(String album) {
    this.album = album;
  }


  public SongInfo albumArtists(List<String> albumArtists) {
    this.albumArtists = albumArtists;
    return this;
  }

  public SongInfo addAlbumArtistsItem(String albumArtistsItem) {
    if (this.albumArtists == null) {
      this.albumArtists = new ArrayList<>();
    }
    this.albumArtists.add(albumArtistsItem);
    return this;
  }

  /**
   * Get albumArtists
   * @return albumArtists
   */
  @javax.annotation.Nullable
  public List<String> getAlbumArtists() {
    return albumArtists;
  }

  public void setAlbumArtists(List<String> albumArtists) {
    this.albumArtists = albumArtists;
  }


  public SongInfo artists(List<String> artists) {
    this.artists = artists;
    return this;
  }

  public SongInfo addArtistsItem(String artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

  /**
   * Get artists
   * @return artists
   */
  @javax.annotation.Nullable
  public List<String> getArtists() {
    return artists;
  }

  public void setArtists(List<String> artists) {
    this.artists = artists;
  }


  public SongInfo indexNumber(Integer indexNumber) {
    this.indexNumber = indexNumber;
    return this;
  }

  /**
   * Get indexNumber
   * @return indexNumber
   */
  @javax.annotation.Nullable
  public Integer getIndexNumber() {
    return indexNumber;
  }

  public void setIndexNumber(Integer indexNumber) {
    this.indexNumber = indexNumber;
  }


  public SongInfo isAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
    return this;
  }

  /**
   * Get isAutomated
   * @return isAutomated
   */
  @javax.annotation.Nullable
  public Boolean getIsAutomated() {
    return isAutomated;
  }

  public void setIsAutomated(Boolean isAutomated) {
    this.isAutomated = isAutomated;
  }


  public SongInfo metadataCountryCode(String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
    return this;
  }

  /**
   * Gets or sets the metadata country code.
   * @return metadataCountryCode
   */
  @javax.annotation.Nullable
  public String getMetadataCountryCode() {
    return metadataCountryCode;
  }

  public void setMetadataCountryCode(String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
  }


  public SongInfo metadataLanguage(String metadataLanguage) {
    this.metadataLanguage = metadataLanguage;
    return this;
  }

  /**
   * Gets or sets the metadata language.
   * @return metadataLanguage
   */
  @javax.annotation.Nullable
  public String getMetadataLanguage() {
    return metadataLanguage;
  }

  public void setMetadataLanguage(String metadataLanguage) {
    this.metadataLanguage = metadataLanguage;
  }


  public SongInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SongInfo parentIndexNumber(Integer parentIndexNumber) {
    this.parentIndexNumber = parentIndexNumber;
    return this;
  }

  /**
   * Get parentIndexNumber
   * @return parentIndexNumber
   */
  @javax.annotation.Nullable
  public Integer getParentIndexNumber() {
    return parentIndexNumber;
  }

  public void setParentIndexNumber(Integer parentIndexNumber) {
    this.parentIndexNumber = parentIndexNumber;
  }


  public SongInfo path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Gets or sets the path.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public SongInfo premiereDate(OffsetDateTime premiereDate) {
    this.premiereDate = premiereDate;
    return this;
  }

  /**
   * Get premiereDate
   * @return premiereDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPremiereDate() {
    return premiereDate;
  }

  public void setPremiereDate(OffsetDateTime premiereDate) {
    this.premiereDate = premiereDate;
  }


  public SongInfo providerIds(Map<String, String> providerIds) {
    this.providerIds = providerIds;
    return this;
  }

  public SongInfo putProviderIdsItem(String key, String providerIdsItem) {
    if (this.providerIds == null) {
      this.providerIds = new HashMap<>();
    }
    this.providerIds.put(key, providerIdsItem);
    return this;
  }

  /**
   * Gets or sets the provider ids.
   * @return providerIds
   */
  @javax.annotation.Nullable
  public Map<String, String> getProviderIds() {
    return providerIds;
  }

  public void setProviderIds(Map<String, String> providerIds) {
    this.providerIds = providerIds;
  }


  public SongInfo year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Gets or sets the year.
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SongInfo songInfo = (SongInfo) o;
    return Objects.equals(this.album, songInfo.album) &&
        Objects.equals(this.albumArtists, songInfo.albumArtists) &&
        Objects.equals(this.artists, songInfo.artists) &&
        Objects.equals(this.indexNumber, songInfo.indexNumber) &&
        Objects.equals(this.isAutomated, songInfo.isAutomated) &&
        Objects.equals(this.metadataCountryCode, songInfo.metadataCountryCode) &&
        Objects.equals(this.metadataLanguage, songInfo.metadataLanguage) &&
        Objects.equals(this.name, songInfo.name) &&
        Objects.equals(this.parentIndexNumber, songInfo.parentIndexNumber) &&
        Objects.equals(this.path, songInfo.path) &&
        Objects.equals(this.premiereDate, songInfo.premiereDate) &&
        Objects.equals(this.providerIds, songInfo.providerIds) &&
        Objects.equals(this.year, songInfo.year);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(album, albumArtists, artists, indexNumber, isAutomated, metadataCountryCode, metadataLanguage, name, parentIndexNumber, path, premiereDate, providerIds, year);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SongInfo {\n");
    sb.append("    album: ").append(toIndentedString(album)).append("\n");
    sb.append("    albumArtists: ").append(toIndentedString(albumArtists)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    indexNumber: ").append(toIndentedString(indexNumber)).append("\n");
    sb.append("    isAutomated: ").append(toIndentedString(isAutomated)).append("\n");
    sb.append("    metadataCountryCode: ").append(toIndentedString(metadataCountryCode)).append("\n");
    sb.append("    metadataLanguage: ").append(toIndentedString(metadataLanguage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentIndexNumber: ").append(toIndentedString(parentIndexNumber)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    premiereDate: ").append(toIndentedString(premiereDate)).append("\n");
    sb.append("    providerIds: ").append(toIndentedString(providerIds)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Album");
    openapiFields.add("AlbumArtists");
    openapiFields.add("Artists");
    openapiFields.add("IndexNumber");
    openapiFields.add("IsAutomated");
    openapiFields.add("MetadataCountryCode");
    openapiFields.add("MetadataLanguage");
    openapiFields.add("Name");
    openapiFields.add("ParentIndexNumber");
    openapiFields.add("Path");
    openapiFields.add("PremiereDate");
    openapiFields.add("ProviderIds");
    openapiFields.add("Year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SongInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SongInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SongInfo is not found in the empty JSON string", SongInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SongInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SongInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Album") != null && !jsonObj.get("Album").isJsonNull()) && !jsonObj.get("Album").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Album` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Album").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AlbumArtists") != null && !jsonObj.get("AlbumArtists").isJsonNull() && !jsonObj.get("AlbumArtists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlbumArtists` to be an array in the JSON string but got `%s`", jsonObj.get("AlbumArtists").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Artists") != null && !jsonObj.get("Artists").isJsonNull() && !jsonObj.get("Artists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Artists` to be an array in the JSON string but got `%s`", jsonObj.get("Artists").toString()));
      }
      if ((jsonObj.get("MetadataCountryCode") != null && !jsonObj.get("MetadataCountryCode").isJsonNull()) && !jsonObj.get("MetadataCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataCountryCode").toString()));
      }
      if ((jsonObj.get("MetadataLanguage") != null && !jsonObj.get("MetadataLanguage").isJsonNull()) && !jsonObj.get("MetadataLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataLanguage").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SongInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SongInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SongInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SongInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SongInfo>() {
           @Override
           public void write(JsonWriter out, SongInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SongInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SongInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SongInfo
   * @throws IOException if the JSON string is invalid with respect to SongInfo
   */
  public static SongInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SongInfo.class);
  }

  /**
   * Convert an instance of SongInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

