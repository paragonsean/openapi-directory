/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IsoType;
import org.openapitools.client.model.MediaAttachment;
import org.openapitools.client.model.MediaProtocol;
import org.openapitools.client.model.MediaSourceType;
import org.openapitools.client.model.MediaStream;
import org.openapitools.client.model.TransportStreamTimestamp;
import org.openapitools.client.model.Video3DFormat;
import org.openapitools.client.model.VideoType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MediaSourceInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaSourceInfo {
  public static final String SERIALIZED_NAME_ANALYZE_DURATION_MS = "AnalyzeDurationMs";
  @SerializedName(SERIALIZED_NAME_ANALYZE_DURATION_MS)
  private Integer analyzeDurationMs;

  public static final String SERIALIZED_NAME_BITRATE = "Bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Integer bitrate;

  public static final String SERIALIZED_NAME_BUFFER_MS = "BufferMs";
  @SerializedName(SERIALIZED_NAME_BUFFER_MS)
  private Integer bufferMs;

  public static final String SERIALIZED_NAME_CONTAINER = "Container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_DEFAULT_AUDIO_STREAM_INDEX = "DefaultAudioStreamIndex";
  @SerializedName(SERIALIZED_NAME_DEFAULT_AUDIO_STREAM_INDEX)
  private Integer defaultAudioStreamIndex;

  public static final String SERIALIZED_NAME_DEFAULT_SUBTITLE_STREAM_INDEX = "DefaultSubtitleStreamIndex";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SUBTITLE_STREAM_INDEX)
  private Integer defaultSubtitleStreamIndex;

  public static final String SERIALIZED_NAME_ETAG = "ETag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ENCODER_PATH = "EncoderPath";
  @SerializedName(SERIALIZED_NAME_ENCODER_PATH)
  private String encoderPath;

  public static final String SERIALIZED_NAME_ENCODER_PROTOCOL = "EncoderProtocol";
  @SerializedName(SERIALIZED_NAME_ENCODER_PROTOCOL)
  private MediaProtocol encoderProtocol;

  public static final String SERIALIZED_NAME_FORMATS = "Formats";
  @SerializedName(SERIALIZED_NAME_FORMATS)
  private List<String> formats;

  public static final String SERIALIZED_NAME_GEN_PTS_INPUT = "GenPtsInput";
  @SerializedName(SERIALIZED_NAME_GEN_PTS_INPUT)
  private Boolean genPtsInput;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IGNORE_DTS = "IgnoreDts";
  @SerializedName(SERIALIZED_NAME_IGNORE_DTS)
  private Boolean ignoreDts;

  public static final String SERIALIZED_NAME_IGNORE_INDEX = "IgnoreIndex";
  @SerializedName(SERIALIZED_NAME_IGNORE_INDEX)
  private Boolean ignoreIndex;

  public static final String SERIALIZED_NAME_IS_INFINITE_STREAM = "IsInfiniteStream";
  @SerializedName(SERIALIZED_NAME_IS_INFINITE_STREAM)
  private Boolean isInfiniteStream;

  public static final String SERIALIZED_NAME_IS_REMOTE = "IsRemote";
  @SerializedName(SERIALIZED_NAME_IS_REMOTE)
  private Boolean isRemote;

  public static final String SERIALIZED_NAME_ISO_TYPE = "IsoType";
  @SerializedName(SERIALIZED_NAME_ISO_TYPE)
  private IsoType isoType;

  public static final String SERIALIZED_NAME_LIVE_STREAM_ID = "LiveStreamId";
  @SerializedName(SERIALIZED_NAME_LIVE_STREAM_ID)
  private String liveStreamId;

  public static final String SERIALIZED_NAME_MEDIA_ATTACHMENTS = "MediaAttachments";
  @SerializedName(SERIALIZED_NAME_MEDIA_ATTACHMENTS)
  private List<MediaAttachment> mediaAttachments;

  public static final String SERIALIZED_NAME_MEDIA_STREAMS = "MediaStreams";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAMS)
  private List<MediaStream> mediaStreams;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_TOKEN = "OpenToken";
  @SerializedName(SERIALIZED_NAME_OPEN_TOKEN)
  private String openToken;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PROTOCOL = "Protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private MediaProtocol protocol;

  public static final String SERIALIZED_NAME_READ_AT_NATIVE_FRAMERATE = "ReadAtNativeFramerate";
  @SerializedName(SERIALIZED_NAME_READ_AT_NATIVE_FRAMERATE)
  private Boolean readAtNativeFramerate;

  public static final String SERIALIZED_NAME_REQUIRED_HTTP_HEADERS = "RequiredHttpHeaders";
  @SerializedName(SERIALIZED_NAME_REQUIRED_HTTP_HEADERS)
  private Map<String, String> requiredHttpHeaders;

  public static final String SERIALIZED_NAME_REQUIRES_CLOSING = "RequiresClosing";
  @SerializedName(SERIALIZED_NAME_REQUIRES_CLOSING)
  private Boolean requiresClosing;

  public static final String SERIALIZED_NAME_REQUIRES_LOOPING = "RequiresLooping";
  @SerializedName(SERIALIZED_NAME_REQUIRES_LOOPING)
  private Boolean requiresLooping;

  public static final String SERIALIZED_NAME_REQUIRES_OPENING = "RequiresOpening";
  @SerializedName(SERIALIZED_NAME_REQUIRES_OPENING)
  private Boolean requiresOpening;

  public static final String SERIALIZED_NAME_RUN_TIME_TICKS = "RunTimeTicks";
  @SerializedName(SERIALIZED_NAME_RUN_TIME_TICKS)
  private Long runTimeTicks;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_SUPPORTS_DIRECT_PLAY = "SupportsDirectPlay";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_DIRECT_PLAY)
  private Boolean supportsDirectPlay;

  public static final String SERIALIZED_NAME_SUPPORTS_DIRECT_STREAM = "SupportsDirectStream";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_DIRECT_STREAM)
  private Boolean supportsDirectStream;

  public static final String SERIALIZED_NAME_SUPPORTS_PROBING = "SupportsProbing";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_PROBING)
  private Boolean supportsProbing;

  public static final String SERIALIZED_NAME_SUPPORTS_TRANSCODING = "SupportsTranscoding";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_TRANSCODING)
  private Boolean supportsTranscoding;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private TransportStreamTimestamp timestamp;

  public static final String SERIALIZED_NAME_TRANSCODING_CONTAINER = "TranscodingContainer";
  @SerializedName(SERIALIZED_NAME_TRANSCODING_CONTAINER)
  private String transcodingContainer;

  public static final String SERIALIZED_NAME_TRANSCODING_SUB_PROTOCOL = "TranscodingSubProtocol";
  @SerializedName(SERIALIZED_NAME_TRANSCODING_SUB_PROTOCOL)
  private String transcodingSubProtocol;

  public static final String SERIALIZED_NAME_TRANSCODING_URL = "TranscodingUrl";
  @SerializedName(SERIALIZED_NAME_TRANSCODING_URL)
  private String transcodingUrl;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private MediaSourceType type;

  public static final String SERIALIZED_NAME_VIDEO3_D_FORMAT = "Video3DFormat";
  @SerializedName(SERIALIZED_NAME_VIDEO3_D_FORMAT)
  private Video3DFormat video3DFormat;

  public static final String SERIALIZED_NAME_VIDEO_TYPE = "VideoType";
  @SerializedName(SERIALIZED_NAME_VIDEO_TYPE)
  private VideoType videoType;

  public MediaSourceInfo() {
  }

  public MediaSourceInfo analyzeDurationMs(Integer analyzeDurationMs) {
    this.analyzeDurationMs = analyzeDurationMs;
    return this;
  }

  /**
   * Get analyzeDurationMs
   * @return analyzeDurationMs
   */
  @javax.annotation.Nullable
  public Integer getAnalyzeDurationMs() {
    return analyzeDurationMs;
  }

  public void setAnalyzeDurationMs(Integer analyzeDurationMs) {
    this.analyzeDurationMs = analyzeDurationMs;
  }


  public MediaSourceInfo bitrate(Integer bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Integer getBitrate() {
    return bitrate;
  }

  public void setBitrate(Integer bitrate) {
    this.bitrate = bitrate;
  }


  public MediaSourceInfo bufferMs(Integer bufferMs) {
    this.bufferMs = bufferMs;
    return this;
  }

  /**
   * Get bufferMs
   * @return bufferMs
   */
  @javax.annotation.Nullable
  public Integer getBufferMs() {
    return bufferMs;
  }

  public void setBufferMs(Integer bufferMs) {
    this.bufferMs = bufferMs;
  }


  public MediaSourceInfo container(String container) {
    this.container = container;
    return this;
  }

  /**
   * Get container
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }


  public MediaSourceInfo defaultAudioStreamIndex(Integer defaultAudioStreamIndex) {
    this.defaultAudioStreamIndex = defaultAudioStreamIndex;
    return this;
  }

  /**
   * Get defaultAudioStreamIndex
   * @return defaultAudioStreamIndex
   */
  @javax.annotation.Nullable
  public Integer getDefaultAudioStreamIndex() {
    return defaultAudioStreamIndex;
  }

  public void setDefaultAudioStreamIndex(Integer defaultAudioStreamIndex) {
    this.defaultAudioStreamIndex = defaultAudioStreamIndex;
  }


  public MediaSourceInfo defaultSubtitleStreamIndex(Integer defaultSubtitleStreamIndex) {
    this.defaultSubtitleStreamIndex = defaultSubtitleStreamIndex;
    return this;
  }

  /**
   * Get defaultSubtitleStreamIndex
   * @return defaultSubtitleStreamIndex
   */
  @javax.annotation.Nullable
  public Integer getDefaultSubtitleStreamIndex() {
    return defaultSubtitleStreamIndex;
  }

  public void setDefaultSubtitleStreamIndex(Integer defaultSubtitleStreamIndex) {
    this.defaultSubtitleStreamIndex = defaultSubtitleStreamIndex;
  }


  public MediaSourceInfo etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Get etag
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public MediaSourceInfo encoderPath(String encoderPath) {
    this.encoderPath = encoderPath;
    return this;
  }

  /**
   * Get encoderPath
   * @return encoderPath
   */
  @javax.annotation.Nullable
  public String getEncoderPath() {
    return encoderPath;
  }

  public void setEncoderPath(String encoderPath) {
    this.encoderPath = encoderPath;
  }


  public MediaSourceInfo encoderProtocol(MediaProtocol encoderProtocol) {
    this.encoderProtocol = encoderProtocol;
    return this;
  }

  /**
   * Get encoderProtocol
   * @return encoderProtocol
   */
  @javax.annotation.Nullable
  public MediaProtocol getEncoderProtocol() {
    return encoderProtocol;
  }

  public void setEncoderProtocol(MediaProtocol encoderProtocol) {
    this.encoderProtocol = encoderProtocol;
  }


  public MediaSourceInfo formats(List<String> formats) {
    this.formats = formats;
    return this;
  }

  public MediaSourceInfo addFormatsItem(String formatsItem) {
    if (this.formats == null) {
      this.formats = new ArrayList<>();
    }
    this.formats.add(formatsItem);
    return this;
  }

  /**
   * Get formats
   * @return formats
   */
  @javax.annotation.Nullable
  public List<String> getFormats() {
    return formats;
  }

  public void setFormats(List<String> formats) {
    this.formats = formats;
  }


  public MediaSourceInfo genPtsInput(Boolean genPtsInput) {
    this.genPtsInput = genPtsInput;
    return this;
  }

  /**
   * Get genPtsInput
   * @return genPtsInput
   */
  @javax.annotation.Nullable
  public Boolean getGenPtsInput() {
    return genPtsInput;
  }

  public void setGenPtsInput(Boolean genPtsInput) {
    this.genPtsInput = genPtsInput;
  }


  public MediaSourceInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MediaSourceInfo ignoreDts(Boolean ignoreDts) {
    this.ignoreDts = ignoreDts;
    return this;
  }

  /**
   * Get ignoreDts
   * @return ignoreDts
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreDts() {
    return ignoreDts;
  }

  public void setIgnoreDts(Boolean ignoreDts) {
    this.ignoreDts = ignoreDts;
  }


  public MediaSourceInfo ignoreIndex(Boolean ignoreIndex) {
    this.ignoreIndex = ignoreIndex;
    return this;
  }

  /**
   * Get ignoreIndex
   * @return ignoreIndex
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreIndex() {
    return ignoreIndex;
  }

  public void setIgnoreIndex(Boolean ignoreIndex) {
    this.ignoreIndex = ignoreIndex;
  }


  public MediaSourceInfo isInfiniteStream(Boolean isInfiniteStream) {
    this.isInfiniteStream = isInfiniteStream;
    return this;
  }

  /**
   * Get isInfiniteStream
   * @return isInfiniteStream
   */
  @javax.annotation.Nullable
  public Boolean getIsInfiniteStream() {
    return isInfiniteStream;
  }

  public void setIsInfiniteStream(Boolean isInfiniteStream) {
    this.isInfiniteStream = isInfiniteStream;
  }


  public MediaSourceInfo isRemote(Boolean isRemote) {
    this.isRemote = isRemote;
    return this;
  }

  /**
   * Differentiate internet url vs local network.
   * @return isRemote
   */
  @javax.annotation.Nullable
  public Boolean getIsRemote() {
    return isRemote;
  }

  public void setIsRemote(Boolean isRemote) {
    this.isRemote = isRemote;
  }


  public MediaSourceInfo isoType(IsoType isoType) {
    this.isoType = isoType;
    return this;
  }

  /**
   * Get isoType
   * @return isoType
   */
  @javax.annotation.Nullable
  public IsoType getIsoType() {
    return isoType;
  }

  public void setIsoType(IsoType isoType) {
    this.isoType = isoType;
  }


  public MediaSourceInfo liveStreamId(String liveStreamId) {
    this.liveStreamId = liveStreamId;
    return this;
  }

  /**
   * Get liveStreamId
   * @return liveStreamId
   */
  @javax.annotation.Nullable
  public String getLiveStreamId() {
    return liveStreamId;
  }

  public void setLiveStreamId(String liveStreamId) {
    this.liveStreamId = liveStreamId;
  }


  public MediaSourceInfo mediaAttachments(List<MediaAttachment> mediaAttachments) {
    this.mediaAttachments = mediaAttachments;
    return this;
  }

  public MediaSourceInfo addMediaAttachmentsItem(MediaAttachment mediaAttachmentsItem) {
    if (this.mediaAttachments == null) {
      this.mediaAttachments = new ArrayList<>();
    }
    this.mediaAttachments.add(mediaAttachmentsItem);
    return this;
  }

  /**
   * Get mediaAttachments
   * @return mediaAttachments
   */
  @javax.annotation.Nullable
  public List<MediaAttachment> getMediaAttachments() {
    return mediaAttachments;
  }

  public void setMediaAttachments(List<MediaAttachment> mediaAttachments) {
    this.mediaAttachments = mediaAttachments;
  }


  public MediaSourceInfo mediaStreams(List<MediaStream> mediaStreams) {
    this.mediaStreams = mediaStreams;
    return this;
  }

  public MediaSourceInfo addMediaStreamsItem(MediaStream mediaStreamsItem) {
    if (this.mediaStreams == null) {
      this.mediaStreams = new ArrayList<>();
    }
    this.mediaStreams.add(mediaStreamsItem);
    return this;
  }

  /**
   * Get mediaStreams
   * @return mediaStreams
   */
  @javax.annotation.Nullable
  public List<MediaStream> getMediaStreams() {
    return mediaStreams;
  }

  public void setMediaStreams(List<MediaStream> mediaStreams) {
    this.mediaStreams = mediaStreams;
  }


  public MediaSourceInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MediaSourceInfo openToken(String openToken) {
    this.openToken = openToken;
    return this;
  }

  /**
   * Get openToken
   * @return openToken
   */
  @javax.annotation.Nullable
  public String getOpenToken() {
    return openToken;
  }

  public void setOpenToken(String openToken) {
    this.openToken = openToken;
  }


  public MediaSourceInfo path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public MediaSourceInfo protocol(MediaProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public MediaProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(MediaProtocol protocol) {
    this.protocol = protocol;
  }


  public MediaSourceInfo readAtNativeFramerate(Boolean readAtNativeFramerate) {
    this.readAtNativeFramerate = readAtNativeFramerate;
    return this;
  }

  /**
   * Get readAtNativeFramerate
   * @return readAtNativeFramerate
   */
  @javax.annotation.Nullable
  public Boolean getReadAtNativeFramerate() {
    return readAtNativeFramerate;
  }

  public void setReadAtNativeFramerate(Boolean readAtNativeFramerate) {
    this.readAtNativeFramerate = readAtNativeFramerate;
  }


  public MediaSourceInfo requiredHttpHeaders(Map<String, String> requiredHttpHeaders) {
    this.requiredHttpHeaders = requiredHttpHeaders;
    return this;
  }

  public MediaSourceInfo putRequiredHttpHeadersItem(String key, String requiredHttpHeadersItem) {
    if (this.requiredHttpHeaders == null) {
      this.requiredHttpHeaders = new HashMap<>();
    }
    this.requiredHttpHeaders.put(key, requiredHttpHeadersItem);
    return this;
  }

  /**
   * Get requiredHttpHeaders
   * @return requiredHttpHeaders
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequiredHttpHeaders() {
    return requiredHttpHeaders;
  }

  public void setRequiredHttpHeaders(Map<String, String> requiredHttpHeaders) {
    this.requiredHttpHeaders = requiredHttpHeaders;
  }


  public MediaSourceInfo requiresClosing(Boolean requiresClosing) {
    this.requiresClosing = requiresClosing;
    return this;
  }

  /**
   * Get requiresClosing
   * @return requiresClosing
   */
  @javax.annotation.Nullable
  public Boolean getRequiresClosing() {
    return requiresClosing;
  }

  public void setRequiresClosing(Boolean requiresClosing) {
    this.requiresClosing = requiresClosing;
  }


  public MediaSourceInfo requiresLooping(Boolean requiresLooping) {
    this.requiresLooping = requiresLooping;
    return this;
  }

  /**
   * Get requiresLooping
   * @return requiresLooping
   */
  @javax.annotation.Nullable
  public Boolean getRequiresLooping() {
    return requiresLooping;
  }

  public void setRequiresLooping(Boolean requiresLooping) {
    this.requiresLooping = requiresLooping;
  }


  public MediaSourceInfo requiresOpening(Boolean requiresOpening) {
    this.requiresOpening = requiresOpening;
    return this;
  }

  /**
   * Get requiresOpening
   * @return requiresOpening
   */
  @javax.annotation.Nullable
  public Boolean getRequiresOpening() {
    return requiresOpening;
  }

  public void setRequiresOpening(Boolean requiresOpening) {
    this.requiresOpening = requiresOpening;
  }


  public MediaSourceInfo runTimeTicks(Long runTimeTicks) {
    this.runTimeTicks = runTimeTicks;
    return this;
  }

  /**
   * Get runTimeTicks
   * @return runTimeTicks
   */
  @javax.annotation.Nullable
  public Long getRunTimeTicks() {
    return runTimeTicks;
  }

  public void setRunTimeTicks(Long runTimeTicks) {
    this.runTimeTicks = runTimeTicks;
  }


  public MediaSourceInfo size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public MediaSourceInfo supportsDirectPlay(Boolean supportsDirectPlay) {
    this.supportsDirectPlay = supportsDirectPlay;
    return this;
  }

  /**
   * Get supportsDirectPlay
   * @return supportsDirectPlay
   */
  @javax.annotation.Nullable
  public Boolean getSupportsDirectPlay() {
    return supportsDirectPlay;
  }

  public void setSupportsDirectPlay(Boolean supportsDirectPlay) {
    this.supportsDirectPlay = supportsDirectPlay;
  }


  public MediaSourceInfo supportsDirectStream(Boolean supportsDirectStream) {
    this.supportsDirectStream = supportsDirectStream;
    return this;
  }

  /**
   * Get supportsDirectStream
   * @return supportsDirectStream
   */
  @javax.annotation.Nullable
  public Boolean getSupportsDirectStream() {
    return supportsDirectStream;
  }

  public void setSupportsDirectStream(Boolean supportsDirectStream) {
    this.supportsDirectStream = supportsDirectStream;
  }


  public MediaSourceInfo supportsProbing(Boolean supportsProbing) {
    this.supportsProbing = supportsProbing;
    return this;
  }

  /**
   * Get supportsProbing
   * @return supportsProbing
   */
  @javax.annotation.Nullable
  public Boolean getSupportsProbing() {
    return supportsProbing;
  }

  public void setSupportsProbing(Boolean supportsProbing) {
    this.supportsProbing = supportsProbing;
  }


  public MediaSourceInfo supportsTranscoding(Boolean supportsTranscoding) {
    this.supportsTranscoding = supportsTranscoding;
    return this;
  }

  /**
   * Get supportsTranscoding
   * @return supportsTranscoding
   */
  @javax.annotation.Nullable
  public Boolean getSupportsTranscoding() {
    return supportsTranscoding;
  }

  public void setSupportsTranscoding(Boolean supportsTranscoding) {
    this.supportsTranscoding = supportsTranscoding;
  }


  public MediaSourceInfo timestamp(TransportStreamTimestamp timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public TransportStreamTimestamp getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(TransportStreamTimestamp timestamp) {
    this.timestamp = timestamp;
  }


  public MediaSourceInfo transcodingContainer(String transcodingContainer) {
    this.transcodingContainer = transcodingContainer;
    return this;
  }

  /**
   * Get transcodingContainer
   * @return transcodingContainer
   */
  @javax.annotation.Nullable
  public String getTranscodingContainer() {
    return transcodingContainer;
  }

  public void setTranscodingContainer(String transcodingContainer) {
    this.transcodingContainer = transcodingContainer;
  }


  public MediaSourceInfo transcodingSubProtocol(String transcodingSubProtocol) {
    this.transcodingSubProtocol = transcodingSubProtocol;
    return this;
  }

  /**
   * Get transcodingSubProtocol
   * @return transcodingSubProtocol
   */
  @javax.annotation.Nullable
  public String getTranscodingSubProtocol() {
    return transcodingSubProtocol;
  }

  public void setTranscodingSubProtocol(String transcodingSubProtocol) {
    this.transcodingSubProtocol = transcodingSubProtocol;
  }


  public MediaSourceInfo transcodingUrl(String transcodingUrl) {
    this.transcodingUrl = transcodingUrl;
    return this;
  }

  /**
   * Get transcodingUrl
   * @return transcodingUrl
   */
  @javax.annotation.Nullable
  public String getTranscodingUrl() {
    return transcodingUrl;
  }

  public void setTranscodingUrl(String transcodingUrl) {
    this.transcodingUrl = transcodingUrl;
  }


  public MediaSourceInfo type(MediaSourceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public MediaSourceType getType() {
    return type;
  }

  public void setType(MediaSourceType type) {
    this.type = type;
  }


  public MediaSourceInfo video3DFormat(Video3DFormat video3DFormat) {
    this.video3DFormat = video3DFormat;
    return this;
  }

  /**
   * Get video3DFormat
   * @return video3DFormat
   */
  @javax.annotation.Nullable
  public Video3DFormat getVideo3DFormat() {
    return video3DFormat;
  }

  public void setVideo3DFormat(Video3DFormat video3DFormat) {
    this.video3DFormat = video3DFormat;
  }


  public MediaSourceInfo videoType(VideoType videoType) {
    this.videoType = videoType;
    return this;
  }

  /**
   * Get videoType
   * @return videoType
   */
  @javax.annotation.Nullable
  public VideoType getVideoType() {
    return videoType;
  }

  public void setVideoType(VideoType videoType) {
    this.videoType = videoType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaSourceInfo mediaSourceInfo = (MediaSourceInfo) o;
    return Objects.equals(this.analyzeDurationMs, mediaSourceInfo.analyzeDurationMs) &&
        Objects.equals(this.bitrate, mediaSourceInfo.bitrate) &&
        Objects.equals(this.bufferMs, mediaSourceInfo.bufferMs) &&
        Objects.equals(this.container, mediaSourceInfo.container) &&
        Objects.equals(this.defaultAudioStreamIndex, mediaSourceInfo.defaultAudioStreamIndex) &&
        Objects.equals(this.defaultSubtitleStreamIndex, mediaSourceInfo.defaultSubtitleStreamIndex) &&
        Objects.equals(this.etag, mediaSourceInfo.etag) &&
        Objects.equals(this.encoderPath, mediaSourceInfo.encoderPath) &&
        Objects.equals(this.encoderProtocol, mediaSourceInfo.encoderProtocol) &&
        Objects.equals(this.formats, mediaSourceInfo.formats) &&
        Objects.equals(this.genPtsInput, mediaSourceInfo.genPtsInput) &&
        Objects.equals(this.id, mediaSourceInfo.id) &&
        Objects.equals(this.ignoreDts, mediaSourceInfo.ignoreDts) &&
        Objects.equals(this.ignoreIndex, mediaSourceInfo.ignoreIndex) &&
        Objects.equals(this.isInfiniteStream, mediaSourceInfo.isInfiniteStream) &&
        Objects.equals(this.isRemote, mediaSourceInfo.isRemote) &&
        Objects.equals(this.isoType, mediaSourceInfo.isoType) &&
        Objects.equals(this.liveStreamId, mediaSourceInfo.liveStreamId) &&
        Objects.equals(this.mediaAttachments, mediaSourceInfo.mediaAttachments) &&
        Objects.equals(this.mediaStreams, mediaSourceInfo.mediaStreams) &&
        Objects.equals(this.name, mediaSourceInfo.name) &&
        Objects.equals(this.openToken, mediaSourceInfo.openToken) &&
        Objects.equals(this.path, mediaSourceInfo.path) &&
        Objects.equals(this.protocol, mediaSourceInfo.protocol) &&
        Objects.equals(this.readAtNativeFramerate, mediaSourceInfo.readAtNativeFramerate) &&
        Objects.equals(this.requiredHttpHeaders, mediaSourceInfo.requiredHttpHeaders) &&
        Objects.equals(this.requiresClosing, mediaSourceInfo.requiresClosing) &&
        Objects.equals(this.requiresLooping, mediaSourceInfo.requiresLooping) &&
        Objects.equals(this.requiresOpening, mediaSourceInfo.requiresOpening) &&
        Objects.equals(this.runTimeTicks, mediaSourceInfo.runTimeTicks) &&
        Objects.equals(this.size, mediaSourceInfo.size) &&
        Objects.equals(this.supportsDirectPlay, mediaSourceInfo.supportsDirectPlay) &&
        Objects.equals(this.supportsDirectStream, mediaSourceInfo.supportsDirectStream) &&
        Objects.equals(this.supportsProbing, mediaSourceInfo.supportsProbing) &&
        Objects.equals(this.supportsTranscoding, mediaSourceInfo.supportsTranscoding) &&
        Objects.equals(this.timestamp, mediaSourceInfo.timestamp) &&
        Objects.equals(this.transcodingContainer, mediaSourceInfo.transcodingContainer) &&
        Objects.equals(this.transcodingSubProtocol, mediaSourceInfo.transcodingSubProtocol) &&
        Objects.equals(this.transcodingUrl, mediaSourceInfo.transcodingUrl) &&
        Objects.equals(this.type, mediaSourceInfo.type) &&
        Objects.equals(this.video3DFormat, mediaSourceInfo.video3DFormat) &&
        Objects.equals(this.videoType, mediaSourceInfo.videoType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzeDurationMs, bitrate, bufferMs, container, defaultAudioStreamIndex, defaultSubtitleStreamIndex, etag, encoderPath, encoderProtocol, formats, genPtsInput, id, ignoreDts, ignoreIndex, isInfiniteStream, isRemote, isoType, liveStreamId, mediaAttachments, mediaStreams, name, openToken, path, protocol, readAtNativeFramerate, requiredHttpHeaders, requiresClosing, requiresLooping, requiresOpening, runTimeTicks, size, supportsDirectPlay, supportsDirectStream, supportsProbing, supportsTranscoding, timestamp, transcodingContainer, transcodingSubProtocol, transcodingUrl, type, video3DFormat, videoType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaSourceInfo {\n");
    sb.append("    analyzeDurationMs: ").append(toIndentedString(analyzeDurationMs)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    bufferMs: ").append(toIndentedString(bufferMs)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    defaultAudioStreamIndex: ").append(toIndentedString(defaultAudioStreamIndex)).append("\n");
    sb.append("    defaultSubtitleStreamIndex: ").append(toIndentedString(defaultSubtitleStreamIndex)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    encoderPath: ").append(toIndentedString(encoderPath)).append("\n");
    sb.append("    encoderProtocol: ").append(toIndentedString(encoderProtocol)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    genPtsInput: ").append(toIndentedString(genPtsInput)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ignoreDts: ").append(toIndentedString(ignoreDts)).append("\n");
    sb.append("    ignoreIndex: ").append(toIndentedString(ignoreIndex)).append("\n");
    sb.append("    isInfiniteStream: ").append(toIndentedString(isInfiniteStream)).append("\n");
    sb.append("    isRemote: ").append(toIndentedString(isRemote)).append("\n");
    sb.append("    isoType: ").append(toIndentedString(isoType)).append("\n");
    sb.append("    liveStreamId: ").append(toIndentedString(liveStreamId)).append("\n");
    sb.append("    mediaAttachments: ").append(toIndentedString(mediaAttachments)).append("\n");
    sb.append("    mediaStreams: ").append(toIndentedString(mediaStreams)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openToken: ").append(toIndentedString(openToken)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    readAtNativeFramerate: ").append(toIndentedString(readAtNativeFramerate)).append("\n");
    sb.append("    requiredHttpHeaders: ").append(toIndentedString(requiredHttpHeaders)).append("\n");
    sb.append("    requiresClosing: ").append(toIndentedString(requiresClosing)).append("\n");
    sb.append("    requiresLooping: ").append(toIndentedString(requiresLooping)).append("\n");
    sb.append("    requiresOpening: ").append(toIndentedString(requiresOpening)).append("\n");
    sb.append("    runTimeTicks: ").append(toIndentedString(runTimeTicks)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    supportsDirectPlay: ").append(toIndentedString(supportsDirectPlay)).append("\n");
    sb.append("    supportsDirectStream: ").append(toIndentedString(supportsDirectStream)).append("\n");
    sb.append("    supportsProbing: ").append(toIndentedString(supportsProbing)).append("\n");
    sb.append("    supportsTranscoding: ").append(toIndentedString(supportsTranscoding)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transcodingContainer: ").append(toIndentedString(transcodingContainer)).append("\n");
    sb.append("    transcodingSubProtocol: ").append(toIndentedString(transcodingSubProtocol)).append("\n");
    sb.append("    transcodingUrl: ").append(toIndentedString(transcodingUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    video3DFormat: ").append(toIndentedString(video3DFormat)).append("\n");
    sb.append("    videoType: ").append(toIndentedString(videoType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnalyzeDurationMs");
    openapiFields.add("Bitrate");
    openapiFields.add("BufferMs");
    openapiFields.add("Container");
    openapiFields.add("DefaultAudioStreamIndex");
    openapiFields.add("DefaultSubtitleStreamIndex");
    openapiFields.add("ETag");
    openapiFields.add("EncoderPath");
    openapiFields.add("EncoderProtocol");
    openapiFields.add("Formats");
    openapiFields.add("GenPtsInput");
    openapiFields.add("Id");
    openapiFields.add("IgnoreDts");
    openapiFields.add("IgnoreIndex");
    openapiFields.add("IsInfiniteStream");
    openapiFields.add("IsRemote");
    openapiFields.add("IsoType");
    openapiFields.add("LiveStreamId");
    openapiFields.add("MediaAttachments");
    openapiFields.add("MediaStreams");
    openapiFields.add("Name");
    openapiFields.add("OpenToken");
    openapiFields.add("Path");
    openapiFields.add("Protocol");
    openapiFields.add("ReadAtNativeFramerate");
    openapiFields.add("RequiredHttpHeaders");
    openapiFields.add("RequiresClosing");
    openapiFields.add("RequiresLooping");
    openapiFields.add("RequiresOpening");
    openapiFields.add("RunTimeTicks");
    openapiFields.add("Size");
    openapiFields.add("SupportsDirectPlay");
    openapiFields.add("SupportsDirectStream");
    openapiFields.add("SupportsProbing");
    openapiFields.add("SupportsTranscoding");
    openapiFields.add("Timestamp");
    openapiFields.add("TranscodingContainer");
    openapiFields.add("TranscodingSubProtocol");
    openapiFields.add("TranscodingUrl");
    openapiFields.add("Type");
    openapiFields.add("Video3DFormat");
    openapiFields.add("VideoType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaSourceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaSourceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaSourceInfo is not found in the empty JSON string", MediaSourceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaSourceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaSourceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Container") != null && !jsonObj.get("Container").isJsonNull()) && !jsonObj.get("Container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Container").toString()));
      }
      if ((jsonObj.get("ETag") != null && !jsonObj.get("ETag").isJsonNull()) && !jsonObj.get("ETag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ETag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ETag").toString()));
      }
      if ((jsonObj.get("EncoderPath") != null && !jsonObj.get("EncoderPath").isJsonNull()) && !jsonObj.get("EncoderPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EncoderPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EncoderPath").toString()));
      }
      // validate the optional field `EncoderProtocol`
      if (jsonObj.get("EncoderProtocol") != null && !jsonObj.get("EncoderProtocol").isJsonNull()) {
        MediaProtocol.validateJsonElement(jsonObj.get("EncoderProtocol"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Formats") != null && !jsonObj.get("Formats").isJsonNull() && !jsonObj.get("Formats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Formats` to be an array in the JSON string but got `%s`", jsonObj.get("Formats").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `IsoType`
      if (jsonObj.get("IsoType") != null && !jsonObj.get("IsoType").isJsonNull()) {
        IsoType.validateJsonElement(jsonObj.get("IsoType"));
      }
      if ((jsonObj.get("LiveStreamId") != null && !jsonObj.get("LiveStreamId").isJsonNull()) && !jsonObj.get("LiveStreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveStreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveStreamId").toString()));
      }
      if (jsonObj.get("MediaAttachments") != null && !jsonObj.get("MediaAttachments").isJsonNull()) {
        JsonArray jsonArraymediaAttachments = jsonObj.getAsJsonArray("MediaAttachments");
        if (jsonArraymediaAttachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MediaAttachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MediaAttachments` to be an array in the JSON string but got `%s`", jsonObj.get("MediaAttachments").toString()));
          }

          // validate the optional field `MediaAttachments` (array)
          for (int i = 0; i < jsonArraymediaAttachments.size(); i++) {
            MediaAttachment.validateJsonElement(jsonArraymediaAttachments.get(i));
          };
        }
      }
      if (jsonObj.get("MediaStreams") != null && !jsonObj.get("MediaStreams").isJsonNull()) {
        JsonArray jsonArraymediaStreams = jsonObj.getAsJsonArray("MediaStreams");
        if (jsonArraymediaStreams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MediaStreams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MediaStreams` to be an array in the JSON string but got `%s`", jsonObj.get("MediaStreams").toString()));
          }

          // validate the optional field `MediaStreams` (array)
          for (int i = 0; i < jsonArraymediaStreams.size(); i++) {
            MediaStream.validateJsonElement(jsonArraymediaStreams.get(i));
          };
        }
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OpenToken") != null && !jsonObj.get("OpenToken").isJsonNull()) && !jsonObj.get("OpenToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OpenToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OpenToken").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      // validate the optional field `Protocol`
      if (jsonObj.get("Protocol") != null && !jsonObj.get("Protocol").isJsonNull()) {
        MediaProtocol.validateJsonElement(jsonObj.get("Protocol"));
      }
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        TransportStreamTimestamp.validateJsonElement(jsonObj.get("Timestamp"));
      }
      if ((jsonObj.get("TranscodingContainer") != null && !jsonObj.get("TranscodingContainer").isJsonNull()) && !jsonObj.get("TranscodingContainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TranscodingContainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TranscodingContainer").toString()));
      }
      if ((jsonObj.get("TranscodingSubProtocol") != null && !jsonObj.get("TranscodingSubProtocol").isJsonNull()) && !jsonObj.get("TranscodingSubProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TranscodingSubProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TranscodingSubProtocol").toString()));
      }
      if ((jsonObj.get("TranscodingUrl") != null && !jsonObj.get("TranscodingUrl").isJsonNull()) && !jsonObj.get("TranscodingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TranscodingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TranscodingUrl").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        MediaSourceType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Video3DFormat`
      if (jsonObj.get("Video3DFormat") != null && !jsonObj.get("Video3DFormat").isJsonNull()) {
        Video3DFormat.validateJsonElement(jsonObj.get("Video3DFormat"));
      }
      // validate the optional field `VideoType`
      if (jsonObj.get("VideoType") != null && !jsonObj.get("VideoType").isJsonNull()) {
        VideoType.validateJsonElement(jsonObj.get("VideoType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaSourceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaSourceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaSourceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaSourceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaSourceInfo>() {
           @Override
           public void write(JsonWriter out, MediaSourceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaSourceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaSourceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaSourceInfo
   * @throws IOException if the JSON string is invalid with respect to MediaSourceInfo
   */
  public static MediaSourceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaSourceInfo.class);
  }

  /**
   * Convert an instance of MediaSourceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

