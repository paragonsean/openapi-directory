/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageSavingConvention;
import org.openapitools.client.model.MetadataOptions;
import org.openapitools.client.model.NameValuePair;
import org.openapitools.client.model.PathSubstitution;
import org.openapitools.client.model.RepositoryInfo;
import org.openapitools.client.model.Version;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the server configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerConfiguration {
  public static final String SERIALIZED_NAME_ACTIVITY_LOG_RETENTION_DAYS = "ActivityLogRetentionDays";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_LOG_RETENTION_DAYS)
  private Integer activityLogRetentionDays;

  public static final String SERIALIZED_NAME_AUTO_DISCOVERY = "AutoDiscovery";
  @SerializedName(SERIALIZED_NAME_AUTO_DISCOVERY)
  private Boolean autoDiscovery;

  public static final String SERIALIZED_NAME_AUTO_DISCOVERY_TRACING = "AutoDiscoveryTracing";
  @SerializedName(SERIALIZED_NAME_AUTO_DISCOVERY_TRACING)
  private Boolean autoDiscoveryTracing;

  public static final String SERIALIZED_NAME_BASE_URL = "BaseUrl";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private String baseUrl;

  public static final String SERIALIZED_NAME_CACHE_PATH = "CachePath";
  @SerializedName(SERIALIZED_NAME_CACHE_PATH)
  private String cachePath;

  public static final String SERIALIZED_NAME_CERTIFICATE_PASSWORD = "CertificatePassword";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PASSWORD)
  private String certificatePassword;

  public static final String SERIALIZED_NAME_CERTIFICATE_PATH = "CertificatePath";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PATH)
  private String certificatePath;

  public static final String SERIALIZED_NAME_CODECS_USED = "CodecsUsed";
  @SerializedName(SERIALIZED_NAME_CODECS_USED)
  private List<String> codecsUsed;

  public static final String SERIALIZED_NAME_CONTENT_TYPES = "ContentTypes";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPES)
  private List<NameValuePair> contentTypes;

  public static final String SERIALIZED_NAME_CORS_HOSTS = "CorsHosts";
  @SerializedName(SERIALIZED_NAME_CORS_HOSTS)
  private List<String> corsHosts;

  public static final String SERIALIZED_NAME_DISABLE_LIVE_TV_CHANNEL_USER_DATA_NAME = "DisableLiveTvChannelUserDataName";
  @SerializedName(SERIALIZED_NAME_DISABLE_LIVE_TV_CHANNEL_USER_DATA_NAME)
  private Boolean disableLiveTvChannelUserDataName;

  public static final String SERIALIZED_NAME_DISABLE_PLUGIN_IMAGES = "DisablePluginImages";
  @SerializedName(SERIALIZED_NAME_DISABLE_PLUGIN_IMAGES)
  private Boolean disablePluginImages;

  public static final String SERIALIZED_NAME_DISPLAY_SPECIALS_WITHIN_SEASONS = "DisplaySpecialsWithinSeasons";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SPECIALS_WITHIN_SEASONS)
  private Boolean displaySpecialsWithinSeasons;

  public static final String SERIALIZED_NAME_ENABLE_CASE_SENSITIVE_ITEM_IDS = "EnableCaseSensitiveItemIds";
  @SerializedName(SERIALIZED_NAME_ENABLE_CASE_SENSITIVE_ITEM_IDS)
  private Boolean enableCaseSensitiveItemIds;

  public static final String SERIALIZED_NAME_ENABLE_DASHBOARD_RESPONSE_CACHING = "EnableDashboardResponseCaching";
  @SerializedName(SERIALIZED_NAME_ENABLE_DASHBOARD_RESPONSE_CACHING)
  private Boolean enableDashboardResponseCaching;

  public static final String SERIALIZED_NAME_ENABLE_EXTERNAL_CONTENT_IN_SUGGESTIONS = "EnableExternalContentInSuggestions";
  @SerializedName(SERIALIZED_NAME_ENABLE_EXTERNAL_CONTENT_IN_SUGGESTIONS)
  private Boolean enableExternalContentInSuggestions;

  public static final String SERIALIZED_NAME_ENABLE_FOLDER_VIEW = "EnableFolderView";
  @SerializedName(SERIALIZED_NAME_ENABLE_FOLDER_VIEW)
  private Boolean enableFolderView;

  public static final String SERIALIZED_NAME_ENABLE_GROUPING_INTO_COLLECTIONS = "EnableGroupingIntoCollections";
  @SerializedName(SERIALIZED_NAME_ENABLE_GROUPING_INTO_COLLECTIONS)
  private Boolean enableGroupingIntoCollections;

  public static final String SERIALIZED_NAME_ENABLE_HTTPS = "EnableHttps";
  @SerializedName(SERIALIZED_NAME_ENABLE_HTTPS)
  private Boolean enableHttps;

  public static final String SERIALIZED_NAME_ENABLE_I_P_V4 = "EnableIPV4";
  @SerializedName(SERIALIZED_NAME_ENABLE_I_P_V4)
  private Boolean enableIPV4;

  public static final String SERIALIZED_NAME_ENABLE_I_P_V6 = "EnableIPV6";
  @SerializedName(SERIALIZED_NAME_ENABLE_I_P_V6)
  private Boolean enableIPV6;

  public static final String SERIALIZED_NAME_ENABLE_METRICS = "EnableMetrics";
  @SerializedName(SERIALIZED_NAME_ENABLE_METRICS)
  private Boolean enableMetrics;

  public static final String SERIALIZED_NAME_ENABLE_MULTI_SOCKET_BINDING = "EnableMultiSocketBinding";
  @SerializedName(SERIALIZED_NAME_ENABLE_MULTI_SOCKET_BINDING)
  private Boolean enableMultiSocketBinding;

  public static final String SERIALIZED_NAME_ENABLE_NEW_OMDB_SUPPORT = "EnableNewOmdbSupport";
  @SerializedName(SERIALIZED_NAME_ENABLE_NEW_OMDB_SUPPORT)
  private Boolean enableNewOmdbSupport;

  public static final String SERIALIZED_NAME_ENABLE_NORMALIZED_ITEM_BY_NAME_IDS = "EnableNormalizedItemByNameIds";
  @SerializedName(SERIALIZED_NAME_ENABLE_NORMALIZED_ITEM_BY_NAME_IDS)
  private Boolean enableNormalizedItemByNameIds;

  public static final String SERIALIZED_NAME_ENABLE_REMOTE_ACCESS = "EnableRemoteAccess";
  @SerializedName(SERIALIZED_NAME_ENABLE_REMOTE_ACCESS)
  private Boolean enableRemoteAccess;

  public static final String SERIALIZED_NAME_ENABLE_S_S_D_P_TRACING = "EnableSSDPTracing";
  @SerializedName(SERIALIZED_NAME_ENABLE_S_S_D_P_TRACING)
  private Boolean enableSSDPTracing;

  public static final String SERIALIZED_NAME_ENABLE_SIMPLE_ARTIST_DETECTION = "EnableSimpleArtistDetection";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIMPLE_ARTIST_DETECTION)
  private Boolean enableSimpleArtistDetection;

  public static final String SERIALIZED_NAME_ENABLE_SLOW_RESPONSE_WARNING = "EnableSlowResponseWarning";
  @SerializedName(SERIALIZED_NAME_ENABLE_SLOW_RESPONSE_WARNING)
  private Boolean enableSlowResponseWarning;

  public static final String SERIALIZED_NAME_ENABLE_U_PN_P = "EnableUPnP";
  @SerializedName(SERIALIZED_NAME_ENABLE_U_PN_P)
  private Boolean enableUPnP;

  public static final String SERIALIZED_NAME_GATEWAY_MONITOR_PERIOD = "GatewayMonitorPeriod";
  @SerializedName(SERIALIZED_NAME_GATEWAY_MONITOR_PERIOD)
  private Integer gatewayMonitorPeriod;

  public static final String SERIALIZED_NAME_HD_HOMERUN_PORT_RANGE = "HDHomerunPortRange";
  @SerializedName(SERIALIZED_NAME_HD_HOMERUN_PORT_RANGE)
  private String hdHomerunPortRange;

  public static final String SERIALIZED_NAME_HTTP_SERVER_PORT_NUMBER = "HttpServerPortNumber";
  @SerializedName(SERIALIZED_NAME_HTTP_SERVER_PORT_NUMBER)
  private Integer httpServerPortNumber;

  public static final String SERIALIZED_NAME_HTTPS_PORT_NUMBER = "HttpsPortNumber";
  @SerializedName(SERIALIZED_NAME_HTTPS_PORT_NUMBER)
  private Integer httpsPortNumber;

  public static final String SERIALIZED_NAME_IGNORE_VIRTUAL_INTERFACES = "IgnoreVirtualInterfaces";
  @SerializedName(SERIALIZED_NAME_IGNORE_VIRTUAL_INTERFACES)
  private Boolean ignoreVirtualInterfaces;

  public static final String SERIALIZED_NAME_IMAGE_EXTRACTION_TIMEOUT_MS = "ImageExtractionTimeoutMs";
  @SerializedName(SERIALIZED_NAME_IMAGE_EXTRACTION_TIMEOUT_MS)
  private Integer imageExtractionTimeoutMs;

  public static final String SERIALIZED_NAME_IMAGE_SAVING_CONVENTION = "ImageSavingConvention";
  @SerializedName(SERIALIZED_NAME_IMAGE_SAVING_CONVENTION)
  private ImageSavingConvention imageSavingConvention;

  public static final String SERIALIZED_NAME_IS_PORT_AUTHORIZED = "IsPortAuthorized";
  @SerializedName(SERIALIZED_NAME_IS_PORT_AUTHORIZED)
  private Boolean isPortAuthorized;

  public static final String SERIALIZED_NAME_IS_REMOTE_I_P_FILTER_BLACKLIST = "IsRemoteIPFilterBlacklist";
  @SerializedName(SERIALIZED_NAME_IS_REMOTE_I_P_FILTER_BLACKLIST)
  private Boolean isRemoteIPFilterBlacklist;

  public static final String SERIALIZED_NAME_IS_STARTUP_WIZARD_COMPLETED = "IsStartupWizardCompleted";
  @SerializedName(SERIALIZED_NAME_IS_STARTUP_WIZARD_COMPLETED)
  private Boolean isStartupWizardCompleted;

  public static final String SERIALIZED_NAME_KNOWN_PROXIES = "KnownProxies";
  @SerializedName(SERIALIZED_NAME_KNOWN_PROXIES)
  private List<String> knownProxies;

  public static final String SERIALIZED_NAME_LIBRARY_METADATA_REFRESH_CONCURRENCY = "LibraryMetadataRefreshConcurrency";
  @SerializedName(SERIALIZED_NAME_LIBRARY_METADATA_REFRESH_CONCURRENCY)
  private Integer libraryMetadataRefreshConcurrency;

  public static final String SERIALIZED_NAME_LIBRARY_MONITOR_DELAY = "LibraryMonitorDelay";
  @SerializedName(SERIALIZED_NAME_LIBRARY_MONITOR_DELAY)
  private Integer libraryMonitorDelay;

  public static final String SERIALIZED_NAME_LIBRARY_SCAN_FANOUT_CONCURRENCY = "LibraryScanFanoutConcurrency";
  @SerializedName(SERIALIZED_NAME_LIBRARY_SCAN_FANOUT_CONCURRENCY)
  private Integer libraryScanFanoutConcurrency;

  public static final String SERIALIZED_NAME_LOCAL_NETWORK_ADDRESSES = "LocalNetworkAddresses";
  @SerializedName(SERIALIZED_NAME_LOCAL_NETWORK_ADDRESSES)
  private List<String> localNetworkAddresses;

  public static final String SERIALIZED_NAME_LOCAL_NETWORK_SUBNETS = "LocalNetworkSubnets";
  @SerializedName(SERIALIZED_NAME_LOCAL_NETWORK_SUBNETS)
  private List<String> localNetworkSubnets;

  public static final String SERIALIZED_NAME_LOG_FILE_RETENTION_DAYS = "LogFileRetentionDays";
  @SerializedName(SERIALIZED_NAME_LOG_FILE_RETENTION_DAYS)
  private Integer logFileRetentionDays;

  public static final String SERIALIZED_NAME_MAX_AUDIOBOOK_RESUME = "MaxAudiobookResume";
  @SerializedName(SERIALIZED_NAME_MAX_AUDIOBOOK_RESUME)
  private Integer maxAudiobookResume;

  public static final String SERIALIZED_NAME_MAX_RESUME_PCT = "MaxResumePct";
  @SerializedName(SERIALIZED_NAME_MAX_RESUME_PCT)
  private Integer maxResumePct;

  public static final String SERIALIZED_NAME_METADATA_COUNTRY_CODE = "MetadataCountryCode";
  @SerializedName(SERIALIZED_NAME_METADATA_COUNTRY_CODE)
  private String metadataCountryCode;

  public static final String SERIALIZED_NAME_METADATA_NETWORK_PATH = "MetadataNetworkPath";
  @SerializedName(SERIALIZED_NAME_METADATA_NETWORK_PATH)
  private String metadataNetworkPath;

  public static final String SERIALIZED_NAME_METADATA_OPTIONS = "MetadataOptions";
  @SerializedName(SERIALIZED_NAME_METADATA_OPTIONS)
  private List<MetadataOptions> metadataOptions;

  public static final String SERIALIZED_NAME_METADATA_PATH = "MetadataPath";
  @SerializedName(SERIALIZED_NAME_METADATA_PATH)
  private String metadataPath;

  public static final String SERIALIZED_NAME_MIN_AUDIOBOOK_RESUME = "MinAudiobookResume";
  @SerializedName(SERIALIZED_NAME_MIN_AUDIOBOOK_RESUME)
  private Integer minAudiobookResume;

  public static final String SERIALIZED_NAME_MIN_RESUME_DURATION_SECONDS = "MinResumeDurationSeconds";
  @SerializedName(SERIALIZED_NAME_MIN_RESUME_DURATION_SECONDS)
  private Integer minResumeDurationSeconds;

  public static final String SERIALIZED_NAME_MIN_RESUME_PCT = "MinResumePct";
  @SerializedName(SERIALIZED_NAME_MIN_RESUME_PCT)
  private Integer minResumePct;

  public static final String SERIALIZED_NAME_PATH_SUBSTITUTIONS = "PathSubstitutions";
  @SerializedName(SERIALIZED_NAME_PATH_SUBSTITUTIONS)
  private List<PathSubstitution> pathSubstitutions;

  public static final String SERIALIZED_NAME_PLUGIN_REPOSITORIES = "PluginRepositories";
  @SerializedName(SERIALIZED_NAME_PLUGIN_REPOSITORIES)
  private List<RepositoryInfo> pluginRepositories;

  public static final String SERIALIZED_NAME_PREFERRED_METADATA_LANGUAGE = "PreferredMetadataLanguage";
  @SerializedName(SERIALIZED_NAME_PREFERRED_METADATA_LANGUAGE)
  private String preferredMetadataLanguage;

  public static final String SERIALIZED_NAME_PREVIOUS_VERSION = "PreviousVersion";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VERSION)
  private Version previousVersion;

  public static final String SERIALIZED_NAME_PREVIOUS_VERSION_STR = "PreviousVersionStr";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VERSION_STR)
  private String previousVersionStr;

  public static final String SERIALIZED_NAME_PUBLIC_HTTPS_PORT = "PublicHttpsPort";
  @SerializedName(SERIALIZED_NAME_PUBLIC_HTTPS_PORT)
  private Integer publicHttpsPort;

  public static final String SERIALIZED_NAME_PUBLIC_PORT = "PublicPort";
  @SerializedName(SERIALIZED_NAME_PUBLIC_PORT)
  private Integer publicPort;

  public static final String SERIALIZED_NAME_PUBLISHED_SERVER_URI_BY_SUBNET = "PublishedServerUriBySubnet";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_SERVER_URI_BY_SUBNET)
  private List<String> publishedServerUriBySubnet;

  public static final String SERIALIZED_NAME_QUICK_CONNECT_AVAILABLE = "QuickConnectAvailable";
  @SerializedName(SERIALIZED_NAME_QUICK_CONNECT_AVAILABLE)
  private Boolean quickConnectAvailable;

  public static final String SERIALIZED_NAME_REMOTE_CLIENT_BITRATE_LIMIT = "RemoteClientBitrateLimit";
  @SerializedName(SERIALIZED_NAME_REMOTE_CLIENT_BITRATE_LIMIT)
  private Integer remoteClientBitrateLimit;

  public static final String SERIALIZED_NAME_REMOTE_I_P_FILTER = "RemoteIPFilter";
  @SerializedName(SERIALIZED_NAME_REMOTE_I_P_FILTER)
  private List<String> remoteIPFilter;

  public static final String SERIALIZED_NAME_REMOVE_OLD_PLUGINS = "RemoveOldPlugins";
  @SerializedName(SERIALIZED_NAME_REMOVE_OLD_PLUGINS)
  private Boolean removeOldPlugins;

  public static final String SERIALIZED_NAME_REQUIRE_HTTPS = "RequireHttps";
  @SerializedName(SERIALIZED_NAME_REQUIRE_HTTPS)
  private Boolean requireHttps;

  public static final String SERIALIZED_NAME_SS_D_P_TRACING_FILTER = "SSDPTracingFilter";
  @SerializedName(SERIALIZED_NAME_SS_D_P_TRACING_FILTER)
  private String ssDPTracingFilter;

  public static final String SERIALIZED_NAME_SAVE_METADATA_HIDDEN = "SaveMetadataHidden";
  @SerializedName(SERIALIZED_NAME_SAVE_METADATA_HIDDEN)
  private Boolean saveMetadataHidden;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_SKIP_DESERIALIZATION_FOR_BASIC_TYPES = "SkipDeserializationForBasicTypes";
  @SerializedName(SERIALIZED_NAME_SKIP_DESERIALIZATION_FOR_BASIC_TYPES)
  private Boolean skipDeserializationForBasicTypes;

  public static final String SERIALIZED_NAME_SLOW_RESPONSE_THRESHOLD_MS = "SlowResponseThresholdMs";
  @SerializedName(SERIALIZED_NAME_SLOW_RESPONSE_THRESHOLD_MS)
  private Long slowResponseThresholdMs;

  public static final String SERIALIZED_NAME_SORT_REMOVE_CHARACTERS = "SortRemoveCharacters";
  @SerializedName(SERIALIZED_NAME_SORT_REMOVE_CHARACTERS)
  private List<String> sortRemoveCharacters;

  public static final String SERIALIZED_NAME_SORT_REMOVE_WORDS = "SortRemoveWords";
  @SerializedName(SERIALIZED_NAME_SORT_REMOVE_WORDS)
  private List<String> sortRemoveWords;

  public static final String SERIALIZED_NAME_SORT_REPLACE_CHARACTERS = "SortReplaceCharacters";
  @SerializedName(SERIALIZED_NAME_SORT_REPLACE_CHARACTERS)
  private List<String> sortReplaceCharacters;

  public static final String SERIALIZED_NAME_TRUST_ALL_I_P6_INTERFACES = "TrustAllIP6Interfaces";
  @SerializedName(SERIALIZED_NAME_TRUST_ALL_I_P6_INTERFACES)
  private Boolean trustAllIP6Interfaces;

  public static final String SERIALIZED_NAME_UD_P_PORT_RANGE = "UDPPortRange";
  @SerializedName(SERIALIZED_NAME_UD_P_PORT_RANGE)
  private String udPPortRange;

  public static final String SERIALIZED_NAME_UD_P_SEND_COUNT = "UDPSendCount";
  @SerializedName(SERIALIZED_NAME_UD_P_SEND_COUNT)
  private Integer udPSendCount;

  public static final String SERIALIZED_NAME_UD_P_SEND_DELAY = "UDPSendDelay";
  @SerializedName(SERIALIZED_NAME_UD_P_SEND_DELAY)
  private Integer udPSendDelay;

  public static final String SERIALIZED_NAME_UI_CULTURE = "UICulture";
  @SerializedName(SERIALIZED_NAME_UI_CULTURE)
  private String uiCulture;

  public static final String SERIALIZED_NAME_UPN_P_CREATE_HTTP_PORT_MAP = "UPnPCreateHttpPortMap";
  @SerializedName(SERIALIZED_NAME_UPN_P_CREATE_HTTP_PORT_MAP)
  private Boolean upnPCreateHttpPortMap;

  public static final String SERIALIZED_NAME_UNINSTALLED_PLUGINS = "UninstalledPlugins";
  @SerializedName(SERIALIZED_NAME_UNINSTALLED_PLUGINS)
  private List<String> uninstalledPlugins;

  public static final String SERIALIZED_NAME_VIRTUAL_INTERFACE_NAMES = "VirtualInterfaceNames";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_INTERFACE_NAMES)
  private String virtualInterfaceNames;

  public ServerConfiguration() {
  }

  public ServerConfiguration(
     Boolean enableMultiSocketBinding
  ) {
    this();
    this.enableMultiSocketBinding = enableMultiSocketBinding;
  }

  public ServerConfiguration activityLogRetentionDays(Integer activityLogRetentionDays) {
    this.activityLogRetentionDays = activityLogRetentionDays;
    return this;
  }

  /**
   * Gets or sets the number of days we should retain activity logs.
   * @return activityLogRetentionDays
   */
  @javax.annotation.Nullable
  public Integer getActivityLogRetentionDays() {
    return activityLogRetentionDays;
  }

  public void setActivityLogRetentionDays(Integer activityLogRetentionDays) {
    this.activityLogRetentionDays = activityLogRetentionDays;
  }


  public ServerConfiguration autoDiscovery(Boolean autoDiscovery) {
    this.autoDiscovery = autoDiscovery;
    return this;
  }

  /**
   * Gets or sets a value indicating whether Autodiscovery is enabled.
   * @return autoDiscovery
   */
  @javax.annotation.Nullable
  public Boolean getAutoDiscovery() {
    return autoDiscovery;
  }

  public void setAutoDiscovery(Boolean autoDiscovery) {
    this.autoDiscovery = autoDiscovery;
  }


  public ServerConfiguration autoDiscoveryTracing(Boolean autoDiscoveryTracing) {
    this.autoDiscoveryTracing = autoDiscoveryTracing;
    return this;
  }

  /**
   * Gets or sets a value indicating whether Autodiscovery tracing is enabled.
   * @return autoDiscoveryTracing
   */
  @javax.annotation.Nullable
  public Boolean getAutoDiscoveryTracing() {
    return autoDiscoveryTracing;
  }

  public void setAutoDiscoveryTracing(Boolean autoDiscoveryTracing) {
    this.autoDiscoveryTracing = autoDiscoveryTracing;
  }


  public ServerConfiguration baseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * Get baseUrl
   * @return baseUrl
   */
  @javax.annotation.Nullable
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public ServerConfiguration cachePath(String cachePath) {
    this.cachePath = cachePath;
    return this;
  }

  /**
   * Gets or sets the cache path.
   * @return cachePath
   */
  @javax.annotation.Nullable
  public String getCachePath() {
    return cachePath;
  }

  public void setCachePath(String cachePath) {
    this.cachePath = cachePath;
  }


  public ServerConfiguration certificatePassword(String certificatePassword) {
    this.certificatePassword = certificatePassword;
    return this;
  }

  /**
   * Gets or sets the password required to access the X.509 certificate data in the file specified by MediaBrowser.Model.Configuration.ServerConfiguration.CertificatePath.
   * @return certificatePassword
   */
  @javax.annotation.Nullable
  public String getCertificatePassword() {
    return certificatePassword;
  }

  public void setCertificatePassword(String certificatePassword) {
    this.certificatePassword = certificatePassword;
  }


  public ServerConfiguration certificatePath(String certificatePath) {
    this.certificatePath = certificatePath;
    return this;
  }

  /**
   * Gets or sets the filesystem path of an X.509 certificate to use for SSL.
   * @return certificatePath
   */
  @javax.annotation.Nullable
  public String getCertificatePath() {
    return certificatePath;
  }

  public void setCertificatePath(String certificatePath) {
    this.certificatePath = certificatePath;
  }


  public ServerConfiguration codecsUsed(List<String> codecsUsed) {
    this.codecsUsed = codecsUsed;
    return this;
  }

  public ServerConfiguration addCodecsUsedItem(String codecsUsedItem) {
    if (this.codecsUsed == null) {
      this.codecsUsed = new ArrayList<>();
    }
    this.codecsUsed.add(codecsUsedItem);
    return this;
  }

  /**
   * Get codecsUsed
   * @return codecsUsed
   */
  @javax.annotation.Nullable
  public List<String> getCodecsUsed() {
    return codecsUsed;
  }

  public void setCodecsUsed(List<String> codecsUsed) {
    this.codecsUsed = codecsUsed;
  }


  public ServerConfiguration contentTypes(List<NameValuePair> contentTypes) {
    this.contentTypes = contentTypes;
    return this;
  }

  public ServerConfiguration addContentTypesItem(NameValuePair contentTypesItem) {
    if (this.contentTypes == null) {
      this.contentTypes = new ArrayList<>();
    }
    this.contentTypes.add(contentTypesItem);
    return this;
  }

  /**
   * Get contentTypes
   * @return contentTypes
   */
  @javax.annotation.Nullable
  public List<NameValuePair> getContentTypes() {
    return contentTypes;
  }

  public void setContentTypes(List<NameValuePair> contentTypes) {
    this.contentTypes = contentTypes;
  }


  public ServerConfiguration corsHosts(List<String> corsHosts) {
    this.corsHosts = corsHosts;
    return this;
  }

  public ServerConfiguration addCorsHostsItem(String corsHostsItem) {
    if (this.corsHosts == null) {
      this.corsHosts = new ArrayList<>();
    }
    this.corsHosts.add(corsHostsItem);
    return this;
  }

  /**
   * Gets or sets the cors hosts.
   * @return corsHosts
   */
  @javax.annotation.Nullable
  public List<String> getCorsHosts() {
    return corsHosts;
  }

  public void setCorsHosts(List<String> corsHosts) {
    this.corsHosts = corsHosts;
  }


  public ServerConfiguration disableLiveTvChannelUserDataName(Boolean disableLiveTvChannelUserDataName) {
    this.disableLiveTvChannelUserDataName = disableLiveTvChannelUserDataName;
    return this;
  }

  /**
   * Get disableLiveTvChannelUserDataName
   * @return disableLiveTvChannelUserDataName
   */
  @javax.annotation.Nullable
  public Boolean getDisableLiveTvChannelUserDataName() {
    return disableLiveTvChannelUserDataName;
  }

  public void setDisableLiveTvChannelUserDataName(Boolean disableLiveTvChannelUserDataName) {
    this.disableLiveTvChannelUserDataName = disableLiveTvChannelUserDataName;
  }


  public ServerConfiguration disablePluginImages(Boolean disablePluginImages) {
    this.disablePluginImages = disablePluginImages;
    return this;
  }

  /**
   * Gets or sets a value indicating whether plugin image should be disabled.
   * @return disablePluginImages
   */
  @javax.annotation.Nullable
  public Boolean getDisablePluginImages() {
    return disablePluginImages;
  }

  public void setDisablePluginImages(Boolean disablePluginImages) {
    this.disablePluginImages = disablePluginImages;
  }


  public ServerConfiguration displaySpecialsWithinSeasons(Boolean displaySpecialsWithinSeasons) {
    this.displaySpecialsWithinSeasons = displaySpecialsWithinSeasons;
    return this;
  }

  /**
   * Get displaySpecialsWithinSeasons
   * @return displaySpecialsWithinSeasons
   */
  @javax.annotation.Nullable
  public Boolean getDisplaySpecialsWithinSeasons() {
    return displaySpecialsWithinSeasons;
  }

  public void setDisplaySpecialsWithinSeasons(Boolean displaySpecialsWithinSeasons) {
    this.displaySpecialsWithinSeasons = displaySpecialsWithinSeasons;
  }


  public ServerConfiguration enableCaseSensitiveItemIds(Boolean enableCaseSensitiveItemIds) {
    this.enableCaseSensitiveItemIds = enableCaseSensitiveItemIds;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [enable case sensitive item ids].
   * @return enableCaseSensitiveItemIds
   */
  @javax.annotation.Nullable
  public Boolean getEnableCaseSensitiveItemIds() {
    return enableCaseSensitiveItemIds;
  }

  public void setEnableCaseSensitiveItemIds(Boolean enableCaseSensitiveItemIds) {
    this.enableCaseSensitiveItemIds = enableCaseSensitiveItemIds;
  }


  public ServerConfiguration enableDashboardResponseCaching(Boolean enableDashboardResponseCaching) {
    this.enableDashboardResponseCaching = enableDashboardResponseCaching;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [enable dashboard response caching].  Allows potential contributors without visual studio to modify production dashboard code and test changes.
   * @return enableDashboardResponseCaching
   */
  @javax.annotation.Nullable
  public Boolean getEnableDashboardResponseCaching() {
    return enableDashboardResponseCaching;
  }

  public void setEnableDashboardResponseCaching(Boolean enableDashboardResponseCaching) {
    this.enableDashboardResponseCaching = enableDashboardResponseCaching;
  }


  public ServerConfiguration enableExternalContentInSuggestions(Boolean enableExternalContentInSuggestions) {
    this.enableExternalContentInSuggestions = enableExternalContentInSuggestions;
    return this;
  }

  /**
   * Get enableExternalContentInSuggestions
   * @return enableExternalContentInSuggestions
   */
  @javax.annotation.Nullable
  public Boolean getEnableExternalContentInSuggestions() {
    return enableExternalContentInSuggestions;
  }

  public void setEnableExternalContentInSuggestions(Boolean enableExternalContentInSuggestions) {
    this.enableExternalContentInSuggestions = enableExternalContentInSuggestions;
  }


  public ServerConfiguration enableFolderView(Boolean enableFolderView) {
    this.enableFolderView = enableFolderView;
    return this;
  }

  /**
   * Get enableFolderView
   * @return enableFolderView
   */
  @javax.annotation.Nullable
  public Boolean getEnableFolderView() {
    return enableFolderView;
  }

  public void setEnableFolderView(Boolean enableFolderView) {
    this.enableFolderView = enableFolderView;
  }


  public ServerConfiguration enableGroupingIntoCollections(Boolean enableGroupingIntoCollections) {
    this.enableGroupingIntoCollections = enableGroupingIntoCollections;
    return this;
  }

  /**
   * Get enableGroupingIntoCollections
   * @return enableGroupingIntoCollections
   */
  @javax.annotation.Nullable
  public Boolean getEnableGroupingIntoCollections() {
    return enableGroupingIntoCollections;
  }

  public void setEnableGroupingIntoCollections(Boolean enableGroupingIntoCollections) {
    this.enableGroupingIntoCollections = enableGroupingIntoCollections;
  }


  public ServerConfiguration enableHttps(Boolean enableHttps) {
    this.enableHttps = enableHttps;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to use HTTPS.
   * @return enableHttps
   */
  @javax.annotation.Nullable
  public Boolean getEnableHttps() {
    return enableHttps;
  }

  public void setEnableHttps(Boolean enableHttps) {
    this.enableHttps = enableHttps;
  }


  public ServerConfiguration enableIPV4(Boolean enableIPV4) {
    this.enableIPV4 = enableIPV4;
    return this;
  }

  /**
   * Gets or sets a value indicating whether IPV4 capability is enabled.
   * @return enableIPV4
   */
  @javax.annotation.Nullable
  public Boolean getEnableIPV4() {
    return enableIPV4;
  }

  public void setEnableIPV4(Boolean enableIPV4) {
    this.enableIPV4 = enableIPV4;
  }


  public ServerConfiguration enableIPV6(Boolean enableIPV6) {
    this.enableIPV6 = enableIPV6;
    return this;
  }

  /**
   * Gets or sets a value indicating whether IPV6 capability is enabled.
   * @return enableIPV6
   */
  @javax.annotation.Nullable
  public Boolean getEnableIPV6() {
    return enableIPV6;
  }

  public void setEnableIPV6(Boolean enableIPV6) {
    this.enableIPV6 = enableIPV6;
  }


  public ServerConfiguration enableMetrics(Boolean enableMetrics) {
    this.enableMetrics = enableMetrics;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable prometheus metrics exporting.
   * @return enableMetrics
   */
  @javax.annotation.Nullable
  public Boolean getEnableMetrics() {
    return enableMetrics;
  }

  public void setEnableMetrics(Boolean enableMetrics) {
    this.enableMetrics = enableMetrics;
  }


  /**
   * Gets a value indicating whether multi-socket binding is available.
   * @return enableMultiSocketBinding
   */
  @javax.annotation.Nullable
  public Boolean getEnableMultiSocketBinding() {
    return enableMultiSocketBinding;
  }



  public ServerConfiguration enableNewOmdbSupport(Boolean enableNewOmdbSupport) {
    this.enableNewOmdbSupport = enableNewOmdbSupport;
    return this;
  }

  /**
   * Get enableNewOmdbSupport
   * @return enableNewOmdbSupport
   */
  @javax.annotation.Nullable
  public Boolean getEnableNewOmdbSupport() {
    return enableNewOmdbSupport;
  }

  public void setEnableNewOmdbSupport(Boolean enableNewOmdbSupport) {
    this.enableNewOmdbSupport = enableNewOmdbSupport;
  }


  public ServerConfiguration enableNormalizedItemByNameIds(Boolean enableNormalizedItemByNameIds) {
    this.enableNormalizedItemByNameIds = enableNormalizedItemByNameIds;
    return this;
  }

  /**
   * Get enableNormalizedItemByNameIds
   * @return enableNormalizedItemByNameIds
   */
  @javax.annotation.Nullable
  public Boolean getEnableNormalizedItemByNameIds() {
    return enableNormalizedItemByNameIds;
  }

  public void setEnableNormalizedItemByNameIds(Boolean enableNormalizedItemByNameIds) {
    this.enableNormalizedItemByNameIds = enableNormalizedItemByNameIds;
  }


  public ServerConfiguration enableRemoteAccess(Boolean enableRemoteAccess) {
    this.enableRemoteAccess = enableRemoteAccess;
    return this;
  }

  /**
   * Gets or sets a value indicating whether access outside of the LAN is permitted.
   * @return enableRemoteAccess
   */
  @javax.annotation.Nullable
  public Boolean getEnableRemoteAccess() {
    return enableRemoteAccess;
  }

  public void setEnableRemoteAccess(Boolean enableRemoteAccess) {
    this.enableRemoteAccess = enableRemoteAccess;
  }


  public ServerConfiguration enableSSDPTracing(Boolean enableSSDPTracing) {
    this.enableSSDPTracing = enableSSDPTracing;
    return this;
  }

  /**
   * Gets or sets a value indicating whether detailed ssdp logs are sent to the console/log.  \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; must be set in logging.default.json for this property to work.
   * @return enableSSDPTracing
   */
  @javax.annotation.Nullable
  public Boolean getEnableSSDPTracing() {
    return enableSSDPTracing;
  }

  public void setEnableSSDPTracing(Boolean enableSSDPTracing) {
    this.enableSSDPTracing = enableSSDPTracing;
  }


  public ServerConfiguration enableSimpleArtistDetection(Boolean enableSimpleArtistDetection) {
    this.enableSimpleArtistDetection = enableSimpleArtistDetection;
    return this;
  }

  /**
   * Get enableSimpleArtistDetection
   * @return enableSimpleArtistDetection
   */
  @javax.annotation.Nullable
  public Boolean getEnableSimpleArtistDetection() {
    return enableSimpleArtistDetection;
  }

  public void setEnableSimpleArtistDetection(Boolean enableSimpleArtistDetection) {
    this.enableSimpleArtistDetection = enableSimpleArtistDetection;
  }


  public ServerConfiguration enableSlowResponseWarning(Boolean enableSlowResponseWarning) {
    this.enableSlowResponseWarning = enableSlowResponseWarning;
    return this;
  }

  /**
   * Gets or sets a value indicating whether slow server responses should be logged as a warning.
   * @return enableSlowResponseWarning
   */
  @javax.annotation.Nullable
  public Boolean getEnableSlowResponseWarning() {
    return enableSlowResponseWarning;
  }

  public void setEnableSlowResponseWarning(Boolean enableSlowResponseWarning) {
    this.enableSlowResponseWarning = enableSlowResponseWarning;
  }


  public ServerConfiguration enableUPnP(Boolean enableUPnP) {
    this.enableUPnP = enableUPnP;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to enable automatic port forwarding.
   * @return enableUPnP
   */
  @javax.annotation.Nullable
  public Boolean getEnableUPnP() {
    return enableUPnP;
  }

  public void setEnableUPnP(Boolean enableUPnP) {
    this.enableUPnP = enableUPnP;
  }


  public ServerConfiguration gatewayMonitorPeriod(Integer gatewayMonitorPeriod) {
    this.gatewayMonitorPeriod = gatewayMonitorPeriod;
    return this;
  }

  /**
   * Gets or sets the time (in seconds) between the pings of SSDP gateway monitor.
   * @return gatewayMonitorPeriod
   */
  @javax.annotation.Nullable
  public Integer getGatewayMonitorPeriod() {
    return gatewayMonitorPeriod;
  }

  public void setGatewayMonitorPeriod(Integer gatewayMonitorPeriod) {
    this.gatewayMonitorPeriod = gatewayMonitorPeriod;
  }


  public ServerConfiguration hdHomerunPortRange(String hdHomerunPortRange) {
    this.hdHomerunPortRange = hdHomerunPortRange;
    return this;
  }

  /**
   * Gets or sets the ports that HDHomerun uses.
   * @return hdHomerunPortRange
   */
  @javax.annotation.Nullable
  public String getHdHomerunPortRange() {
    return hdHomerunPortRange;
  }

  public void setHdHomerunPortRange(String hdHomerunPortRange) {
    this.hdHomerunPortRange = hdHomerunPortRange;
  }


  public ServerConfiguration httpServerPortNumber(Integer httpServerPortNumber) {
    this.httpServerPortNumber = httpServerPortNumber;
    return this;
  }

  /**
   * Gets or sets the HTTP server port number.
   * @return httpServerPortNumber
   */
  @javax.annotation.Nullable
  public Integer getHttpServerPortNumber() {
    return httpServerPortNumber;
  }

  public void setHttpServerPortNumber(Integer httpServerPortNumber) {
    this.httpServerPortNumber = httpServerPortNumber;
  }


  public ServerConfiguration httpsPortNumber(Integer httpsPortNumber) {
    this.httpsPortNumber = httpsPortNumber;
    return this;
  }

  /**
   * Gets or sets the HTTPS server port number.
   * @return httpsPortNumber
   */
  @javax.annotation.Nullable
  public Integer getHttpsPortNumber() {
    return httpsPortNumber;
  }

  public void setHttpsPortNumber(Integer httpsPortNumber) {
    this.httpsPortNumber = httpsPortNumber;
  }


  public ServerConfiguration ignoreVirtualInterfaces(Boolean ignoreVirtualInterfaces) {
    this.ignoreVirtualInterfaces = ignoreVirtualInterfaces;
    return this;
  }

  /**
   * Gets or sets a value indicating whether address names that match MediaBrowser.Model.Configuration.ServerConfiguration.VirtualInterfaceNames should be Ignore for the purposes of binding.
   * @return ignoreVirtualInterfaces
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreVirtualInterfaces() {
    return ignoreVirtualInterfaces;
  }

  public void setIgnoreVirtualInterfaces(Boolean ignoreVirtualInterfaces) {
    this.ignoreVirtualInterfaces = ignoreVirtualInterfaces;
  }


  public ServerConfiguration imageExtractionTimeoutMs(Integer imageExtractionTimeoutMs) {
    this.imageExtractionTimeoutMs = imageExtractionTimeoutMs;
    return this;
  }

  /**
   * Get imageExtractionTimeoutMs
   * @return imageExtractionTimeoutMs
   */
  @javax.annotation.Nullable
  public Integer getImageExtractionTimeoutMs() {
    return imageExtractionTimeoutMs;
  }

  public void setImageExtractionTimeoutMs(Integer imageExtractionTimeoutMs) {
    this.imageExtractionTimeoutMs = imageExtractionTimeoutMs;
  }


  public ServerConfiguration imageSavingConvention(ImageSavingConvention imageSavingConvention) {
    this.imageSavingConvention = imageSavingConvention;
    return this;
  }

  /**
   * Get imageSavingConvention
   * @return imageSavingConvention
   */
  @javax.annotation.Nullable
  public ImageSavingConvention getImageSavingConvention() {
    return imageSavingConvention;
  }

  public void setImageSavingConvention(ImageSavingConvention imageSavingConvention) {
    this.imageSavingConvention = imageSavingConvention;
  }


  public ServerConfiguration isPortAuthorized(Boolean isPortAuthorized) {
    this.isPortAuthorized = isPortAuthorized;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is port authorized.
   * @return isPortAuthorized
   */
  @javax.annotation.Nullable
  public Boolean getIsPortAuthorized() {
    return isPortAuthorized;
  }

  public void setIsPortAuthorized(Boolean isPortAuthorized) {
    this.isPortAuthorized = isPortAuthorized;
  }


  public ServerConfiguration isRemoteIPFilterBlacklist(Boolean isRemoteIPFilterBlacklist) {
    this.isRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist;
    return this;
  }

  /**
   * Gets or sets a value indicating whether &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.RemoteIPFilter\&quot; /&gt; contains a blacklist or a whitelist. Default is a whitelist.
   * @return isRemoteIPFilterBlacklist
   */
  @javax.annotation.Nullable
  public Boolean getIsRemoteIPFilterBlacklist() {
    return isRemoteIPFilterBlacklist;
  }

  public void setIsRemoteIPFilterBlacklist(Boolean isRemoteIPFilterBlacklist) {
    this.isRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist;
  }


  public ServerConfiguration isStartupWizardCompleted(Boolean isStartupWizardCompleted) {
    this.isStartupWizardCompleted = isStartupWizardCompleted;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is first run.
   * @return isStartupWizardCompleted
   */
  @javax.annotation.Nullable
  public Boolean getIsStartupWizardCompleted() {
    return isStartupWizardCompleted;
  }

  public void setIsStartupWizardCompleted(Boolean isStartupWizardCompleted) {
    this.isStartupWizardCompleted = isStartupWizardCompleted;
  }


  public ServerConfiguration knownProxies(List<String> knownProxies) {
    this.knownProxies = knownProxies;
    return this;
  }

  public ServerConfiguration addKnownProxiesItem(String knownProxiesItem) {
    if (this.knownProxies == null) {
      this.knownProxies = new ArrayList<>();
    }
    this.knownProxies.add(knownProxiesItem);
    return this;
  }

  /**
   * Gets or sets the known proxies.
   * @return knownProxies
   */
  @javax.annotation.Nullable
  public List<String> getKnownProxies() {
    return knownProxies;
  }

  public void setKnownProxies(List<String> knownProxies) {
    this.knownProxies = knownProxies;
  }


  public ServerConfiguration libraryMetadataRefreshConcurrency(Integer libraryMetadataRefreshConcurrency) {
    this.libraryMetadataRefreshConcurrency = libraryMetadataRefreshConcurrency;
    return this;
  }

  /**
   * Gets or sets the how many metadata refreshes can run concurrently.
   * @return libraryMetadataRefreshConcurrency
   */
  @javax.annotation.Nullable
  public Integer getLibraryMetadataRefreshConcurrency() {
    return libraryMetadataRefreshConcurrency;
  }

  public void setLibraryMetadataRefreshConcurrency(Integer libraryMetadataRefreshConcurrency) {
    this.libraryMetadataRefreshConcurrency = libraryMetadataRefreshConcurrency;
  }


  public ServerConfiguration libraryMonitorDelay(Integer libraryMonitorDelay) {
    this.libraryMonitorDelay = libraryMonitorDelay;
    return this;
  }

  /**
   * Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removed  Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several  different directories and files.
   * @return libraryMonitorDelay
   */
  @javax.annotation.Nullable
  public Integer getLibraryMonitorDelay() {
    return libraryMonitorDelay;
  }

  public void setLibraryMonitorDelay(Integer libraryMonitorDelay) {
    this.libraryMonitorDelay = libraryMonitorDelay;
  }


  public ServerConfiguration libraryScanFanoutConcurrency(Integer libraryScanFanoutConcurrency) {
    this.libraryScanFanoutConcurrency = libraryScanFanoutConcurrency;
    return this;
  }

  /**
   * Gets or sets the how the library scan fans out.
   * @return libraryScanFanoutConcurrency
   */
  @javax.annotation.Nullable
  public Integer getLibraryScanFanoutConcurrency() {
    return libraryScanFanoutConcurrency;
  }

  public void setLibraryScanFanoutConcurrency(Integer libraryScanFanoutConcurrency) {
    this.libraryScanFanoutConcurrency = libraryScanFanoutConcurrency;
  }


  public ServerConfiguration localNetworkAddresses(List<String> localNetworkAddresses) {
    this.localNetworkAddresses = localNetworkAddresses;
    return this;
  }

  public ServerConfiguration addLocalNetworkAddressesItem(String localNetworkAddressesItem) {
    if (this.localNetworkAddresses == null) {
      this.localNetworkAddresses = new ArrayList<>();
    }
    this.localNetworkAddresses.add(localNetworkAddressesItem);
    return this;
  }

  /**
   * Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.
   * @return localNetworkAddresses
   */
  @javax.annotation.Nullable
  public List<String> getLocalNetworkAddresses() {
    return localNetworkAddresses;
  }

  public void setLocalNetworkAddresses(List<String> localNetworkAddresses) {
    this.localNetworkAddresses = localNetworkAddresses;
  }


  public ServerConfiguration localNetworkSubnets(List<String> localNetworkSubnets) {
    this.localNetworkSubnets = localNetworkSubnets;
    return this;
  }

  public ServerConfiguration addLocalNetworkSubnetsItem(String localNetworkSubnetsItem) {
    if (this.localNetworkSubnets == null) {
      this.localNetworkSubnets = new ArrayList<>();
    }
    this.localNetworkSubnets.add(localNetworkSubnetsItem);
    return this;
  }

  /**
   * Gets or sets the subnets that are deemed to make up the LAN.
   * @return localNetworkSubnets
   */
  @javax.annotation.Nullable
  public List<String> getLocalNetworkSubnets() {
    return localNetworkSubnets;
  }

  public void setLocalNetworkSubnets(List<String> localNetworkSubnets) {
    this.localNetworkSubnets = localNetworkSubnets;
  }


  public ServerConfiguration logFileRetentionDays(Integer logFileRetentionDays) {
    this.logFileRetentionDays = logFileRetentionDays;
    return this;
  }

  /**
   * Gets or sets the number of days we should retain log files.
   * @return logFileRetentionDays
   */
  @javax.annotation.Nullable
  public Integer getLogFileRetentionDays() {
    return logFileRetentionDays;
  }

  public void setLogFileRetentionDays(Integer logFileRetentionDays) {
    this.logFileRetentionDays = logFileRetentionDays;
  }


  public ServerConfiguration maxAudiobookResume(Integer maxAudiobookResume) {
    this.maxAudiobookResume = maxAudiobookResume;
    return this;
  }

  /**
   * Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
   * @return maxAudiobookResume
   */
  @javax.annotation.Nullable
  public Integer getMaxAudiobookResume() {
    return maxAudiobookResume;
  }

  public void setMaxAudiobookResume(Integer maxAudiobookResume) {
    this.maxAudiobookResume = maxAudiobookResume;
  }


  public ServerConfiguration maxResumePct(Integer maxResumePct) {
    this.maxResumePct = maxResumePct;
    return this;
  }

  /**
   * Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
   * @return maxResumePct
   */
  @javax.annotation.Nullable
  public Integer getMaxResumePct() {
    return maxResumePct;
  }

  public void setMaxResumePct(Integer maxResumePct) {
    this.maxResumePct = maxResumePct;
  }


  public ServerConfiguration metadataCountryCode(String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
    return this;
  }

  /**
   * Gets or sets the metadata country code.
   * @return metadataCountryCode
   */
  @javax.annotation.Nullable
  public String getMetadataCountryCode() {
    return metadataCountryCode;
  }

  public void setMetadataCountryCode(String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
  }


  public ServerConfiguration metadataNetworkPath(String metadataNetworkPath) {
    this.metadataNetworkPath = metadataNetworkPath;
    return this;
  }

  /**
   * Get metadataNetworkPath
   * @return metadataNetworkPath
   */
  @javax.annotation.Nullable
  public String getMetadataNetworkPath() {
    return metadataNetworkPath;
  }

  public void setMetadataNetworkPath(String metadataNetworkPath) {
    this.metadataNetworkPath = metadataNetworkPath;
  }


  public ServerConfiguration metadataOptions(List<MetadataOptions> metadataOptions) {
    this.metadataOptions = metadataOptions;
    return this;
  }

  public ServerConfiguration addMetadataOptionsItem(MetadataOptions metadataOptionsItem) {
    if (this.metadataOptions == null) {
      this.metadataOptions = new ArrayList<>();
    }
    this.metadataOptions.add(metadataOptionsItem);
    return this;
  }

  /**
   * Get metadataOptions
   * @return metadataOptions
   */
  @javax.annotation.Nullable
  public List<MetadataOptions> getMetadataOptions() {
    return metadataOptions;
  }

  public void setMetadataOptions(List<MetadataOptions> metadataOptions) {
    this.metadataOptions = metadataOptions;
  }


  public ServerConfiguration metadataPath(String metadataPath) {
    this.metadataPath = metadataPath;
    return this;
  }

  /**
   * Gets or sets the metadata path.
   * @return metadataPath
   */
  @javax.annotation.Nullable
  public String getMetadataPath() {
    return metadataPath;
  }

  public void setMetadataPath(String metadataPath) {
    this.metadataPath = metadataPath;
  }


  public ServerConfiguration minAudiobookResume(Integer minAudiobookResume) {
    this.minAudiobookResume = minAudiobookResume;
    return this;
  }

  /**
   * Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated.
   * @return minAudiobookResume
   */
  @javax.annotation.Nullable
  public Integer getMinAudiobookResume() {
    return minAudiobookResume;
  }

  public void setMinAudiobookResume(Integer minAudiobookResume) {
    this.minAudiobookResume = minAudiobookResume;
  }


  public ServerConfiguration minResumeDurationSeconds(Integer minResumeDurationSeconds) {
    this.minResumeDurationSeconds = minResumeDurationSeconds;
    return this;
  }

  /**
   * Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates..
   * @return minResumeDurationSeconds
   */
  @javax.annotation.Nullable
  public Integer getMinResumeDurationSeconds() {
    return minResumeDurationSeconds;
  }

  public void setMinResumeDurationSeconds(Integer minResumeDurationSeconds) {
    this.minResumeDurationSeconds = minResumeDurationSeconds;
  }


  public ServerConfiguration minResumePct(Integer minResumePct) {
    this.minResumePct = minResumePct;
    return this;
  }

  /**
   * Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.
   * @return minResumePct
   */
  @javax.annotation.Nullable
  public Integer getMinResumePct() {
    return minResumePct;
  }

  public void setMinResumePct(Integer minResumePct) {
    this.minResumePct = minResumePct;
  }


  public ServerConfiguration pathSubstitutions(List<PathSubstitution> pathSubstitutions) {
    this.pathSubstitutions = pathSubstitutions;
    return this;
  }

  public ServerConfiguration addPathSubstitutionsItem(PathSubstitution pathSubstitutionsItem) {
    if (this.pathSubstitutions == null) {
      this.pathSubstitutions = new ArrayList<>();
    }
    this.pathSubstitutions.add(pathSubstitutionsItem);
    return this;
  }

  /**
   * Get pathSubstitutions
   * @return pathSubstitutions
   */
  @javax.annotation.Nullable
  public List<PathSubstitution> getPathSubstitutions() {
    return pathSubstitutions;
  }

  public void setPathSubstitutions(List<PathSubstitution> pathSubstitutions) {
    this.pathSubstitutions = pathSubstitutions;
  }


  public ServerConfiguration pluginRepositories(List<RepositoryInfo> pluginRepositories) {
    this.pluginRepositories = pluginRepositories;
    return this;
  }

  public ServerConfiguration addPluginRepositoriesItem(RepositoryInfo pluginRepositoriesItem) {
    if (this.pluginRepositories == null) {
      this.pluginRepositories = new ArrayList<>();
    }
    this.pluginRepositories.add(pluginRepositoriesItem);
    return this;
  }

  /**
   * Get pluginRepositories
   * @return pluginRepositories
   */
  @javax.annotation.Nullable
  public List<RepositoryInfo> getPluginRepositories() {
    return pluginRepositories;
  }

  public void setPluginRepositories(List<RepositoryInfo> pluginRepositories) {
    this.pluginRepositories = pluginRepositories;
  }


  public ServerConfiguration preferredMetadataLanguage(String preferredMetadataLanguage) {
    this.preferredMetadataLanguage = preferredMetadataLanguage;
    return this;
  }

  /**
   * Gets or sets the preferred metadata language.
   * @return preferredMetadataLanguage
   */
  @javax.annotation.Nullable
  public String getPreferredMetadataLanguage() {
    return preferredMetadataLanguage;
  }

  public void setPreferredMetadataLanguage(String preferredMetadataLanguage) {
    this.preferredMetadataLanguage = preferredMetadataLanguage;
  }


  public ServerConfiguration previousVersion(Version previousVersion) {
    this.previousVersion = previousVersion;
    return this;
  }

  /**
   * Get previousVersion
   * @return previousVersion
   */
  @javax.annotation.Nullable
  public Version getPreviousVersion() {
    return previousVersion;
  }

  public void setPreviousVersion(Version previousVersion) {
    this.previousVersion = previousVersion;
  }


  public ServerConfiguration previousVersionStr(String previousVersionStr) {
    this.previousVersionStr = previousVersionStr;
    return this;
  }

  /**
   * Gets or sets the stringified PreviousVersion to be stored/loaded,  because System.Version itself isn&#39;t xml-serializable.
   * @return previousVersionStr
   */
  @javax.annotation.Nullable
  public String getPreviousVersionStr() {
    return previousVersionStr;
  }

  public void setPreviousVersionStr(String previousVersionStr) {
    this.previousVersionStr = previousVersionStr;
  }


  public ServerConfiguration publicHttpsPort(Integer publicHttpsPort) {
    this.publicHttpsPort = publicHttpsPort;
    return this;
  }

  /**
   * Gets or sets the public HTTPS port.
   * @return publicHttpsPort
   */
  @javax.annotation.Nullable
  public Integer getPublicHttpsPort() {
    return publicHttpsPort;
  }

  public void setPublicHttpsPort(Integer publicHttpsPort) {
    this.publicHttpsPort = publicHttpsPort;
  }


  public ServerConfiguration publicPort(Integer publicPort) {
    this.publicPort = publicPort;
    return this;
  }

  /**
   * Gets or sets the public mapped port.
   * @return publicPort
   */
  @javax.annotation.Nullable
  public Integer getPublicPort() {
    return publicPort;
  }

  public void setPublicPort(Integer publicPort) {
    this.publicPort = publicPort;
  }


  public ServerConfiguration publishedServerUriBySubnet(List<String> publishedServerUriBySubnet) {
    this.publishedServerUriBySubnet = publishedServerUriBySubnet;
    return this;
  }

  public ServerConfiguration addPublishedServerUriBySubnetItem(String publishedServerUriBySubnetItem) {
    if (this.publishedServerUriBySubnet == null) {
      this.publishedServerUriBySubnet = new ArrayList<>();
    }
    this.publishedServerUriBySubnet.add(publishedServerUriBySubnetItem);
    return this;
  }

  /**
   * Gets or sets PublishedServerUri to advertise for specific subnets.
   * @return publishedServerUriBySubnet
   */
  @javax.annotation.Nullable
  public List<String> getPublishedServerUriBySubnet() {
    return publishedServerUriBySubnet;
  }

  public void setPublishedServerUriBySubnet(List<String> publishedServerUriBySubnet) {
    this.publishedServerUriBySubnet = publishedServerUriBySubnet;
  }


  public ServerConfiguration quickConnectAvailable(Boolean quickConnectAvailable) {
    this.quickConnectAvailable = quickConnectAvailable;
    return this;
  }

  /**
   * Gets or sets a value indicating whether quick connect is available for use on this server.
   * @return quickConnectAvailable
   */
  @javax.annotation.Nullable
  public Boolean getQuickConnectAvailable() {
    return quickConnectAvailable;
  }

  public void setQuickConnectAvailable(Boolean quickConnectAvailable) {
    this.quickConnectAvailable = quickConnectAvailable;
  }


  public ServerConfiguration remoteClientBitrateLimit(Integer remoteClientBitrateLimit) {
    this.remoteClientBitrateLimit = remoteClientBitrateLimit;
    return this;
  }

  /**
   * Get remoteClientBitrateLimit
   * @return remoteClientBitrateLimit
   */
  @javax.annotation.Nullable
  public Integer getRemoteClientBitrateLimit() {
    return remoteClientBitrateLimit;
  }

  public void setRemoteClientBitrateLimit(Integer remoteClientBitrateLimit) {
    this.remoteClientBitrateLimit = remoteClientBitrateLimit;
  }


  public ServerConfiguration remoteIPFilter(List<String> remoteIPFilter) {
    this.remoteIPFilter = remoteIPFilter;
    return this;
  }

  public ServerConfiguration addRemoteIPFilterItem(String remoteIPFilterItem) {
    if (this.remoteIPFilter == null) {
      this.remoteIPFilter = new ArrayList<>();
    }
    this.remoteIPFilter.add(remoteIPFilterItem);
    return this;
  }

  /**
   * Gets or sets the filter for remote IP connectivity. Used in conjuntion with &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.IsRemoteIPFilterBlacklist\&quot; /&gt;.
   * @return remoteIPFilter
   */
  @javax.annotation.Nullable
  public List<String> getRemoteIPFilter() {
    return remoteIPFilter;
  }

  public void setRemoteIPFilter(List<String> remoteIPFilter) {
    this.remoteIPFilter = remoteIPFilter;
  }


  public ServerConfiguration removeOldPlugins(Boolean removeOldPlugins) {
    this.removeOldPlugins = removeOldPlugins;
    return this;
  }

  /**
   * Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder.
   * @return removeOldPlugins
   */
  @javax.annotation.Nullable
  public Boolean getRemoveOldPlugins() {
    return removeOldPlugins;
  }

  public void setRemoveOldPlugins(Boolean removeOldPlugins) {
    this.removeOldPlugins = removeOldPlugins;
  }


  public ServerConfiguration requireHttps(Boolean requireHttps) {
    this.requireHttps = requireHttps;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the server should force connections over HTTPS.
   * @return requireHttps
   */
  @javax.annotation.Nullable
  public Boolean getRequireHttps() {
    return requireHttps;
  }

  public void setRequireHttps(Boolean requireHttps) {
    this.requireHttps = requireHttps;
  }


  public ServerConfiguration ssDPTracingFilter(String ssDPTracingFilter) {
    this.ssDPTracingFilter = ssDPTracingFilter;
    return this;
  }

  /**
   * Gets or sets a value indicating whether an IP address is to be used to filter the detailed ssdp logs that are being sent to the console/log.  If the setting \&quot;Emby.Dlna\&quot;: \&quot;Debug\&quot; msut be set in logging.default.json for this property to work.
   * @return ssDPTracingFilter
   */
  @javax.annotation.Nullable
  public String getSsDPTracingFilter() {
    return ssDPTracingFilter;
  }

  public void setSsDPTracingFilter(String ssDPTracingFilter) {
    this.ssDPTracingFilter = ssDPTracingFilter;
  }


  public ServerConfiguration saveMetadataHidden(Boolean saveMetadataHidden) {
    this.saveMetadataHidden = saveMetadataHidden;
    return this;
  }

  /**
   * Get saveMetadataHidden
   * @return saveMetadataHidden
   */
  @javax.annotation.Nullable
  public Boolean getSaveMetadataHidden() {
    return saveMetadataHidden;
  }

  public void setSaveMetadataHidden(Boolean saveMetadataHidden) {
    this.saveMetadataHidden = saveMetadataHidden;
  }


  public ServerConfiguration serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Get serverName
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public ServerConfiguration skipDeserializationForBasicTypes(Boolean skipDeserializationForBasicTypes) {
    this.skipDeserializationForBasicTypes = skipDeserializationForBasicTypes;
    return this;
  }

  /**
   * Get skipDeserializationForBasicTypes
   * @return skipDeserializationForBasicTypes
   */
  @javax.annotation.Nullable
  public Boolean getSkipDeserializationForBasicTypes() {
    return skipDeserializationForBasicTypes;
  }

  public void setSkipDeserializationForBasicTypes(Boolean skipDeserializationForBasicTypes) {
    this.skipDeserializationForBasicTypes = skipDeserializationForBasicTypes;
  }


  public ServerConfiguration slowResponseThresholdMs(Long slowResponseThresholdMs) {
    this.slowResponseThresholdMs = slowResponseThresholdMs;
    return this;
  }

  /**
   * Gets or sets the threshold for the slow response time warning in ms.
   * @return slowResponseThresholdMs
   */
  @javax.annotation.Nullable
  public Long getSlowResponseThresholdMs() {
    return slowResponseThresholdMs;
  }

  public void setSlowResponseThresholdMs(Long slowResponseThresholdMs) {
    this.slowResponseThresholdMs = slowResponseThresholdMs;
  }


  public ServerConfiguration sortRemoveCharacters(List<String> sortRemoveCharacters) {
    this.sortRemoveCharacters = sortRemoveCharacters;
    return this;
  }

  public ServerConfiguration addSortRemoveCharactersItem(String sortRemoveCharactersItem) {
    if (this.sortRemoveCharacters == null) {
      this.sortRemoveCharacters = new ArrayList<>();
    }
    this.sortRemoveCharacters.add(sortRemoveCharactersItem);
    return this;
  }

  /**
   * Gets or sets characters to be removed from strings to create a sort name.
   * @return sortRemoveCharacters
   */
  @javax.annotation.Nullable
  public List<String> getSortRemoveCharacters() {
    return sortRemoveCharacters;
  }

  public void setSortRemoveCharacters(List<String> sortRemoveCharacters) {
    this.sortRemoveCharacters = sortRemoveCharacters;
  }


  public ServerConfiguration sortRemoveWords(List<String> sortRemoveWords) {
    this.sortRemoveWords = sortRemoveWords;
    return this;
  }

  public ServerConfiguration addSortRemoveWordsItem(String sortRemoveWordsItem) {
    if (this.sortRemoveWords == null) {
      this.sortRemoveWords = new ArrayList<>();
    }
    this.sortRemoveWords.add(sortRemoveWordsItem);
    return this;
  }

  /**
   * Gets or sets words to be removed from strings to create a sort name.
   * @return sortRemoveWords
   */
  @javax.annotation.Nullable
  public List<String> getSortRemoveWords() {
    return sortRemoveWords;
  }

  public void setSortRemoveWords(List<String> sortRemoveWords) {
    this.sortRemoveWords = sortRemoveWords;
  }


  public ServerConfiguration sortReplaceCharacters(List<String> sortReplaceCharacters) {
    this.sortReplaceCharacters = sortReplaceCharacters;
    return this;
  }

  public ServerConfiguration addSortReplaceCharactersItem(String sortReplaceCharactersItem) {
    if (this.sortReplaceCharacters == null) {
      this.sortReplaceCharacters = new ArrayList<>();
    }
    this.sortReplaceCharacters.add(sortReplaceCharactersItem);
    return this;
  }

  /**
   * Gets or sets characters to be replaced with a &#39; &#39; in strings to create a sort name.
   * @return sortReplaceCharacters
   */
  @javax.annotation.Nullable
  public List<String> getSortReplaceCharacters() {
    return sortReplaceCharacters;
  }

  public void setSortReplaceCharacters(List<String> sortReplaceCharacters) {
    this.sortReplaceCharacters = sortReplaceCharacters;
  }


  public ServerConfiguration trustAllIP6Interfaces(Boolean trustAllIP6Interfaces) {
    this.trustAllIP6Interfaces = trustAllIP6Interfaces;
    return this;
  }

  /**
   * Gets or sets a value indicating whether all IPv6 interfaces should be treated as on the internal network.  Depending on the address range implemented ULA ranges might not be used.
   * @return trustAllIP6Interfaces
   */
  @javax.annotation.Nullable
  public Boolean getTrustAllIP6Interfaces() {
    return trustAllIP6Interfaces;
  }

  public void setTrustAllIP6Interfaces(Boolean trustAllIP6Interfaces) {
    this.trustAllIP6Interfaces = trustAllIP6Interfaces;
  }


  public ServerConfiguration udPPortRange(String udPPortRange) {
    this.udPPortRange = udPPortRange;
    return this;
  }

  /**
   * Gets or sets client udp port range.
   * @return udPPortRange
   */
  @javax.annotation.Nullable
  public String getUdPPortRange() {
    return udPPortRange;
  }

  public void setUdPPortRange(String udPPortRange) {
    this.udPPortRange = udPPortRange;
  }


  public ServerConfiguration udPSendCount(Integer udPSendCount) {
    this.udPSendCount = udPSendCount;
    return this;
  }

  /**
   * Gets or sets the number of times SSDP UDP messages are sent.
   * @return udPSendCount
   */
  @javax.annotation.Nullable
  public Integer getUdPSendCount() {
    return udPSendCount;
  }

  public void setUdPSendCount(Integer udPSendCount) {
    this.udPSendCount = udPSendCount;
  }


  public ServerConfiguration udPSendDelay(Integer udPSendDelay) {
    this.udPSendDelay = udPSendDelay;
    return this;
  }

  /**
   * Gets or sets the delay between each groups of SSDP messages (in ms).
   * @return udPSendDelay
   */
  @javax.annotation.Nullable
  public Integer getUdPSendDelay() {
    return udPSendDelay;
  }

  public void setUdPSendDelay(Integer udPSendDelay) {
    this.udPSendDelay = udPSendDelay;
  }


  public ServerConfiguration uiCulture(String uiCulture) {
    this.uiCulture = uiCulture;
    return this;
  }

  /**
   * Get uiCulture
   * @return uiCulture
   */
  @javax.annotation.Nullable
  public String getUiCulture() {
    return uiCulture;
  }

  public void setUiCulture(String uiCulture) {
    this.uiCulture = uiCulture;
  }


  public ServerConfiguration upnPCreateHttpPortMap(Boolean upnPCreateHttpPortMap) {
    this.upnPCreateHttpPortMap = upnPCreateHttpPortMap;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the http port should be mapped as part of UPnP automatic port forwarding.
   * @return upnPCreateHttpPortMap
   */
  @javax.annotation.Nullable
  public Boolean getUpnPCreateHttpPortMap() {
    return upnPCreateHttpPortMap;
  }

  public void setUpnPCreateHttpPortMap(Boolean upnPCreateHttpPortMap) {
    this.upnPCreateHttpPortMap = upnPCreateHttpPortMap;
  }


  public ServerConfiguration uninstalledPlugins(List<String> uninstalledPlugins) {
    this.uninstalledPlugins = uninstalledPlugins;
    return this;
  }

  public ServerConfiguration addUninstalledPluginsItem(String uninstalledPluginsItem) {
    if (this.uninstalledPlugins == null) {
      this.uninstalledPlugins = new ArrayList<>();
    }
    this.uninstalledPlugins.add(uninstalledPluginsItem);
    return this;
  }

  /**
   * Get uninstalledPlugins
   * @return uninstalledPlugins
   */
  @javax.annotation.Nullable
  public List<String> getUninstalledPlugins() {
    return uninstalledPlugins;
  }

  public void setUninstalledPlugins(List<String> uninstalledPlugins) {
    this.uninstalledPlugins = uninstalledPlugins;
  }


  public ServerConfiguration virtualInterfaceNames(String virtualInterfaceNames) {
    this.virtualInterfaceNames = virtualInterfaceNames;
    return this;
  }

  /**
   * Gets or sets a value indicating the interfaces that should be ignored. The list can be comma separated. &lt;seealso cref&#x3D;\&quot;P:MediaBrowser.Model.Configuration.ServerConfiguration.IgnoreVirtualInterfaces\&quot; /&gt;.
   * @return virtualInterfaceNames
   */
  @javax.annotation.Nullable
  public String getVirtualInterfaceNames() {
    return virtualInterfaceNames;
  }

  public void setVirtualInterfaceNames(String virtualInterfaceNames) {
    this.virtualInterfaceNames = virtualInterfaceNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerConfiguration serverConfiguration = (ServerConfiguration) o;
    return Objects.equals(this.activityLogRetentionDays, serverConfiguration.activityLogRetentionDays) &&
        Objects.equals(this.autoDiscovery, serverConfiguration.autoDiscovery) &&
        Objects.equals(this.autoDiscoveryTracing, serverConfiguration.autoDiscoveryTracing) &&
        Objects.equals(this.baseUrl, serverConfiguration.baseUrl) &&
        Objects.equals(this.cachePath, serverConfiguration.cachePath) &&
        Objects.equals(this.certificatePassword, serverConfiguration.certificatePassword) &&
        Objects.equals(this.certificatePath, serverConfiguration.certificatePath) &&
        Objects.equals(this.codecsUsed, serverConfiguration.codecsUsed) &&
        Objects.equals(this.contentTypes, serverConfiguration.contentTypes) &&
        Objects.equals(this.corsHosts, serverConfiguration.corsHosts) &&
        Objects.equals(this.disableLiveTvChannelUserDataName, serverConfiguration.disableLiveTvChannelUserDataName) &&
        Objects.equals(this.disablePluginImages, serverConfiguration.disablePluginImages) &&
        Objects.equals(this.displaySpecialsWithinSeasons, serverConfiguration.displaySpecialsWithinSeasons) &&
        Objects.equals(this.enableCaseSensitiveItemIds, serverConfiguration.enableCaseSensitiveItemIds) &&
        Objects.equals(this.enableDashboardResponseCaching, serverConfiguration.enableDashboardResponseCaching) &&
        Objects.equals(this.enableExternalContentInSuggestions, serverConfiguration.enableExternalContentInSuggestions) &&
        Objects.equals(this.enableFolderView, serverConfiguration.enableFolderView) &&
        Objects.equals(this.enableGroupingIntoCollections, serverConfiguration.enableGroupingIntoCollections) &&
        Objects.equals(this.enableHttps, serverConfiguration.enableHttps) &&
        Objects.equals(this.enableIPV4, serverConfiguration.enableIPV4) &&
        Objects.equals(this.enableIPV6, serverConfiguration.enableIPV6) &&
        Objects.equals(this.enableMetrics, serverConfiguration.enableMetrics) &&
        Objects.equals(this.enableMultiSocketBinding, serverConfiguration.enableMultiSocketBinding) &&
        Objects.equals(this.enableNewOmdbSupport, serverConfiguration.enableNewOmdbSupport) &&
        Objects.equals(this.enableNormalizedItemByNameIds, serverConfiguration.enableNormalizedItemByNameIds) &&
        Objects.equals(this.enableRemoteAccess, serverConfiguration.enableRemoteAccess) &&
        Objects.equals(this.enableSSDPTracing, serverConfiguration.enableSSDPTracing) &&
        Objects.equals(this.enableSimpleArtistDetection, serverConfiguration.enableSimpleArtistDetection) &&
        Objects.equals(this.enableSlowResponseWarning, serverConfiguration.enableSlowResponseWarning) &&
        Objects.equals(this.enableUPnP, serverConfiguration.enableUPnP) &&
        Objects.equals(this.gatewayMonitorPeriod, serverConfiguration.gatewayMonitorPeriod) &&
        Objects.equals(this.hdHomerunPortRange, serverConfiguration.hdHomerunPortRange) &&
        Objects.equals(this.httpServerPortNumber, serverConfiguration.httpServerPortNumber) &&
        Objects.equals(this.httpsPortNumber, serverConfiguration.httpsPortNumber) &&
        Objects.equals(this.ignoreVirtualInterfaces, serverConfiguration.ignoreVirtualInterfaces) &&
        Objects.equals(this.imageExtractionTimeoutMs, serverConfiguration.imageExtractionTimeoutMs) &&
        Objects.equals(this.imageSavingConvention, serverConfiguration.imageSavingConvention) &&
        Objects.equals(this.isPortAuthorized, serverConfiguration.isPortAuthorized) &&
        Objects.equals(this.isRemoteIPFilterBlacklist, serverConfiguration.isRemoteIPFilterBlacklist) &&
        Objects.equals(this.isStartupWizardCompleted, serverConfiguration.isStartupWizardCompleted) &&
        Objects.equals(this.knownProxies, serverConfiguration.knownProxies) &&
        Objects.equals(this.libraryMetadataRefreshConcurrency, serverConfiguration.libraryMetadataRefreshConcurrency) &&
        Objects.equals(this.libraryMonitorDelay, serverConfiguration.libraryMonitorDelay) &&
        Objects.equals(this.libraryScanFanoutConcurrency, serverConfiguration.libraryScanFanoutConcurrency) &&
        Objects.equals(this.localNetworkAddresses, serverConfiguration.localNetworkAddresses) &&
        Objects.equals(this.localNetworkSubnets, serverConfiguration.localNetworkSubnets) &&
        Objects.equals(this.logFileRetentionDays, serverConfiguration.logFileRetentionDays) &&
        Objects.equals(this.maxAudiobookResume, serverConfiguration.maxAudiobookResume) &&
        Objects.equals(this.maxResumePct, serverConfiguration.maxResumePct) &&
        Objects.equals(this.metadataCountryCode, serverConfiguration.metadataCountryCode) &&
        Objects.equals(this.metadataNetworkPath, serverConfiguration.metadataNetworkPath) &&
        Objects.equals(this.metadataOptions, serverConfiguration.metadataOptions) &&
        Objects.equals(this.metadataPath, serverConfiguration.metadataPath) &&
        Objects.equals(this.minAudiobookResume, serverConfiguration.minAudiobookResume) &&
        Objects.equals(this.minResumeDurationSeconds, serverConfiguration.minResumeDurationSeconds) &&
        Objects.equals(this.minResumePct, serverConfiguration.minResumePct) &&
        Objects.equals(this.pathSubstitutions, serverConfiguration.pathSubstitutions) &&
        Objects.equals(this.pluginRepositories, serverConfiguration.pluginRepositories) &&
        Objects.equals(this.preferredMetadataLanguage, serverConfiguration.preferredMetadataLanguage) &&
        Objects.equals(this.previousVersion, serverConfiguration.previousVersion) &&
        Objects.equals(this.previousVersionStr, serverConfiguration.previousVersionStr) &&
        Objects.equals(this.publicHttpsPort, serverConfiguration.publicHttpsPort) &&
        Objects.equals(this.publicPort, serverConfiguration.publicPort) &&
        Objects.equals(this.publishedServerUriBySubnet, serverConfiguration.publishedServerUriBySubnet) &&
        Objects.equals(this.quickConnectAvailable, serverConfiguration.quickConnectAvailable) &&
        Objects.equals(this.remoteClientBitrateLimit, serverConfiguration.remoteClientBitrateLimit) &&
        Objects.equals(this.remoteIPFilter, serverConfiguration.remoteIPFilter) &&
        Objects.equals(this.removeOldPlugins, serverConfiguration.removeOldPlugins) &&
        Objects.equals(this.requireHttps, serverConfiguration.requireHttps) &&
        Objects.equals(this.ssDPTracingFilter, serverConfiguration.ssDPTracingFilter) &&
        Objects.equals(this.saveMetadataHidden, serverConfiguration.saveMetadataHidden) &&
        Objects.equals(this.serverName, serverConfiguration.serverName) &&
        Objects.equals(this.skipDeserializationForBasicTypes, serverConfiguration.skipDeserializationForBasicTypes) &&
        Objects.equals(this.slowResponseThresholdMs, serverConfiguration.slowResponseThresholdMs) &&
        Objects.equals(this.sortRemoveCharacters, serverConfiguration.sortRemoveCharacters) &&
        Objects.equals(this.sortRemoveWords, serverConfiguration.sortRemoveWords) &&
        Objects.equals(this.sortReplaceCharacters, serverConfiguration.sortReplaceCharacters) &&
        Objects.equals(this.trustAllIP6Interfaces, serverConfiguration.trustAllIP6Interfaces) &&
        Objects.equals(this.udPPortRange, serverConfiguration.udPPortRange) &&
        Objects.equals(this.udPSendCount, serverConfiguration.udPSendCount) &&
        Objects.equals(this.udPSendDelay, serverConfiguration.udPSendDelay) &&
        Objects.equals(this.uiCulture, serverConfiguration.uiCulture) &&
        Objects.equals(this.upnPCreateHttpPortMap, serverConfiguration.upnPCreateHttpPortMap) &&
        Objects.equals(this.uninstalledPlugins, serverConfiguration.uninstalledPlugins) &&
        Objects.equals(this.virtualInterfaceNames, serverConfiguration.virtualInterfaceNames);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityLogRetentionDays, autoDiscovery, autoDiscoveryTracing, baseUrl, cachePath, certificatePassword, certificatePath, codecsUsed, contentTypes, corsHosts, disableLiveTvChannelUserDataName, disablePluginImages, displaySpecialsWithinSeasons, enableCaseSensitiveItemIds, enableDashboardResponseCaching, enableExternalContentInSuggestions, enableFolderView, enableGroupingIntoCollections, enableHttps, enableIPV4, enableIPV6, enableMetrics, enableMultiSocketBinding, enableNewOmdbSupport, enableNormalizedItemByNameIds, enableRemoteAccess, enableSSDPTracing, enableSimpleArtistDetection, enableSlowResponseWarning, enableUPnP, gatewayMonitorPeriod, hdHomerunPortRange, httpServerPortNumber, httpsPortNumber, ignoreVirtualInterfaces, imageExtractionTimeoutMs, imageSavingConvention, isPortAuthorized, isRemoteIPFilterBlacklist, isStartupWizardCompleted, knownProxies, libraryMetadataRefreshConcurrency, libraryMonitorDelay, libraryScanFanoutConcurrency, localNetworkAddresses, localNetworkSubnets, logFileRetentionDays, maxAudiobookResume, maxResumePct, metadataCountryCode, metadataNetworkPath, metadataOptions, metadataPath, minAudiobookResume, minResumeDurationSeconds, minResumePct, pathSubstitutions, pluginRepositories, preferredMetadataLanguage, previousVersion, previousVersionStr, publicHttpsPort, publicPort, publishedServerUriBySubnet, quickConnectAvailable, remoteClientBitrateLimit, remoteIPFilter, removeOldPlugins, requireHttps, ssDPTracingFilter, saveMetadataHidden, serverName, skipDeserializationForBasicTypes, slowResponseThresholdMs, sortRemoveCharacters, sortRemoveWords, sortReplaceCharacters, trustAllIP6Interfaces, udPPortRange, udPSendCount, udPSendDelay, uiCulture, upnPCreateHttpPortMap, uninstalledPlugins, virtualInterfaceNames);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerConfiguration {\n");
    sb.append("    activityLogRetentionDays: ").append(toIndentedString(activityLogRetentionDays)).append("\n");
    sb.append("    autoDiscovery: ").append(toIndentedString(autoDiscovery)).append("\n");
    sb.append("    autoDiscoveryTracing: ").append(toIndentedString(autoDiscoveryTracing)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    cachePath: ").append(toIndentedString(cachePath)).append("\n");
    sb.append("    certificatePassword: ").append(toIndentedString(certificatePassword)).append("\n");
    sb.append("    certificatePath: ").append(toIndentedString(certificatePath)).append("\n");
    sb.append("    codecsUsed: ").append(toIndentedString(codecsUsed)).append("\n");
    sb.append("    contentTypes: ").append(toIndentedString(contentTypes)).append("\n");
    sb.append("    corsHosts: ").append(toIndentedString(corsHosts)).append("\n");
    sb.append("    disableLiveTvChannelUserDataName: ").append(toIndentedString(disableLiveTvChannelUserDataName)).append("\n");
    sb.append("    disablePluginImages: ").append(toIndentedString(disablePluginImages)).append("\n");
    sb.append("    displaySpecialsWithinSeasons: ").append(toIndentedString(displaySpecialsWithinSeasons)).append("\n");
    sb.append("    enableCaseSensitiveItemIds: ").append(toIndentedString(enableCaseSensitiveItemIds)).append("\n");
    sb.append("    enableDashboardResponseCaching: ").append(toIndentedString(enableDashboardResponseCaching)).append("\n");
    sb.append("    enableExternalContentInSuggestions: ").append(toIndentedString(enableExternalContentInSuggestions)).append("\n");
    sb.append("    enableFolderView: ").append(toIndentedString(enableFolderView)).append("\n");
    sb.append("    enableGroupingIntoCollections: ").append(toIndentedString(enableGroupingIntoCollections)).append("\n");
    sb.append("    enableHttps: ").append(toIndentedString(enableHttps)).append("\n");
    sb.append("    enableIPV4: ").append(toIndentedString(enableIPV4)).append("\n");
    sb.append("    enableIPV6: ").append(toIndentedString(enableIPV6)).append("\n");
    sb.append("    enableMetrics: ").append(toIndentedString(enableMetrics)).append("\n");
    sb.append("    enableMultiSocketBinding: ").append(toIndentedString(enableMultiSocketBinding)).append("\n");
    sb.append("    enableNewOmdbSupport: ").append(toIndentedString(enableNewOmdbSupport)).append("\n");
    sb.append("    enableNormalizedItemByNameIds: ").append(toIndentedString(enableNormalizedItemByNameIds)).append("\n");
    sb.append("    enableRemoteAccess: ").append(toIndentedString(enableRemoteAccess)).append("\n");
    sb.append("    enableSSDPTracing: ").append(toIndentedString(enableSSDPTracing)).append("\n");
    sb.append("    enableSimpleArtistDetection: ").append(toIndentedString(enableSimpleArtistDetection)).append("\n");
    sb.append("    enableSlowResponseWarning: ").append(toIndentedString(enableSlowResponseWarning)).append("\n");
    sb.append("    enableUPnP: ").append(toIndentedString(enableUPnP)).append("\n");
    sb.append("    gatewayMonitorPeriod: ").append(toIndentedString(gatewayMonitorPeriod)).append("\n");
    sb.append("    hdHomerunPortRange: ").append(toIndentedString(hdHomerunPortRange)).append("\n");
    sb.append("    httpServerPortNumber: ").append(toIndentedString(httpServerPortNumber)).append("\n");
    sb.append("    httpsPortNumber: ").append(toIndentedString(httpsPortNumber)).append("\n");
    sb.append("    ignoreVirtualInterfaces: ").append(toIndentedString(ignoreVirtualInterfaces)).append("\n");
    sb.append("    imageExtractionTimeoutMs: ").append(toIndentedString(imageExtractionTimeoutMs)).append("\n");
    sb.append("    imageSavingConvention: ").append(toIndentedString(imageSavingConvention)).append("\n");
    sb.append("    isPortAuthorized: ").append(toIndentedString(isPortAuthorized)).append("\n");
    sb.append("    isRemoteIPFilterBlacklist: ").append(toIndentedString(isRemoteIPFilterBlacklist)).append("\n");
    sb.append("    isStartupWizardCompleted: ").append(toIndentedString(isStartupWizardCompleted)).append("\n");
    sb.append("    knownProxies: ").append(toIndentedString(knownProxies)).append("\n");
    sb.append("    libraryMetadataRefreshConcurrency: ").append(toIndentedString(libraryMetadataRefreshConcurrency)).append("\n");
    sb.append("    libraryMonitorDelay: ").append(toIndentedString(libraryMonitorDelay)).append("\n");
    sb.append("    libraryScanFanoutConcurrency: ").append(toIndentedString(libraryScanFanoutConcurrency)).append("\n");
    sb.append("    localNetworkAddresses: ").append(toIndentedString(localNetworkAddresses)).append("\n");
    sb.append("    localNetworkSubnets: ").append(toIndentedString(localNetworkSubnets)).append("\n");
    sb.append("    logFileRetentionDays: ").append(toIndentedString(logFileRetentionDays)).append("\n");
    sb.append("    maxAudiobookResume: ").append(toIndentedString(maxAudiobookResume)).append("\n");
    sb.append("    maxResumePct: ").append(toIndentedString(maxResumePct)).append("\n");
    sb.append("    metadataCountryCode: ").append(toIndentedString(metadataCountryCode)).append("\n");
    sb.append("    metadataNetworkPath: ").append(toIndentedString(metadataNetworkPath)).append("\n");
    sb.append("    metadataOptions: ").append(toIndentedString(metadataOptions)).append("\n");
    sb.append("    metadataPath: ").append(toIndentedString(metadataPath)).append("\n");
    sb.append("    minAudiobookResume: ").append(toIndentedString(minAudiobookResume)).append("\n");
    sb.append("    minResumeDurationSeconds: ").append(toIndentedString(minResumeDurationSeconds)).append("\n");
    sb.append("    minResumePct: ").append(toIndentedString(minResumePct)).append("\n");
    sb.append("    pathSubstitutions: ").append(toIndentedString(pathSubstitutions)).append("\n");
    sb.append("    pluginRepositories: ").append(toIndentedString(pluginRepositories)).append("\n");
    sb.append("    preferredMetadataLanguage: ").append(toIndentedString(preferredMetadataLanguage)).append("\n");
    sb.append("    previousVersion: ").append(toIndentedString(previousVersion)).append("\n");
    sb.append("    previousVersionStr: ").append(toIndentedString(previousVersionStr)).append("\n");
    sb.append("    publicHttpsPort: ").append(toIndentedString(publicHttpsPort)).append("\n");
    sb.append("    publicPort: ").append(toIndentedString(publicPort)).append("\n");
    sb.append("    publishedServerUriBySubnet: ").append(toIndentedString(publishedServerUriBySubnet)).append("\n");
    sb.append("    quickConnectAvailable: ").append(toIndentedString(quickConnectAvailable)).append("\n");
    sb.append("    remoteClientBitrateLimit: ").append(toIndentedString(remoteClientBitrateLimit)).append("\n");
    sb.append("    remoteIPFilter: ").append(toIndentedString(remoteIPFilter)).append("\n");
    sb.append("    removeOldPlugins: ").append(toIndentedString(removeOldPlugins)).append("\n");
    sb.append("    requireHttps: ").append(toIndentedString(requireHttps)).append("\n");
    sb.append("    ssDPTracingFilter: ").append(toIndentedString(ssDPTracingFilter)).append("\n");
    sb.append("    saveMetadataHidden: ").append(toIndentedString(saveMetadataHidden)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    skipDeserializationForBasicTypes: ").append(toIndentedString(skipDeserializationForBasicTypes)).append("\n");
    sb.append("    slowResponseThresholdMs: ").append(toIndentedString(slowResponseThresholdMs)).append("\n");
    sb.append("    sortRemoveCharacters: ").append(toIndentedString(sortRemoveCharacters)).append("\n");
    sb.append("    sortRemoveWords: ").append(toIndentedString(sortRemoveWords)).append("\n");
    sb.append("    sortReplaceCharacters: ").append(toIndentedString(sortReplaceCharacters)).append("\n");
    sb.append("    trustAllIP6Interfaces: ").append(toIndentedString(trustAllIP6Interfaces)).append("\n");
    sb.append("    udPPortRange: ").append(toIndentedString(udPPortRange)).append("\n");
    sb.append("    udPSendCount: ").append(toIndentedString(udPSendCount)).append("\n");
    sb.append("    udPSendDelay: ").append(toIndentedString(udPSendDelay)).append("\n");
    sb.append("    uiCulture: ").append(toIndentedString(uiCulture)).append("\n");
    sb.append("    upnPCreateHttpPortMap: ").append(toIndentedString(upnPCreateHttpPortMap)).append("\n");
    sb.append("    uninstalledPlugins: ").append(toIndentedString(uninstalledPlugins)).append("\n");
    sb.append("    virtualInterfaceNames: ").append(toIndentedString(virtualInterfaceNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityLogRetentionDays");
    openapiFields.add("AutoDiscovery");
    openapiFields.add("AutoDiscoveryTracing");
    openapiFields.add("BaseUrl");
    openapiFields.add("CachePath");
    openapiFields.add("CertificatePassword");
    openapiFields.add("CertificatePath");
    openapiFields.add("CodecsUsed");
    openapiFields.add("ContentTypes");
    openapiFields.add("CorsHosts");
    openapiFields.add("DisableLiveTvChannelUserDataName");
    openapiFields.add("DisablePluginImages");
    openapiFields.add("DisplaySpecialsWithinSeasons");
    openapiFields.add("EnableCaseSensitiveItemIds");
    openapiFields.add("EnableDashboardResponseCaching");
    openapiFields.add("EnableExternalContentInSuggestions");
    openapiFields.add("EnableFolderView");
    openapiFields.add("EnableGroupingIntoCollections");
    openapiFields.add("EnableHttps");
    openapiFields.add("EnableIPV4");
    openapiFields.add("EnableIPV6");
    openapiFields.add("EnableMetrics");
    openapiFields.add("EnableMultiSocketBinding");
    openapiFields.add("EnableNewOmdbSupport");
    openapiFields.add("EnableNormalizedItemByNameIds");
    openapiFields.add("EnableRemoteAccess");
    openapiFields.add("EnableSSDPTracing");
    openapiFields.add("EnableSimpleArtistDetection");
    openapiFields.add("EnableSlowResponseWarning");
    openapiFields.add("EnableUPnP");
    openapiFields.add("GatewayMonitorPeriod");
    openapiFields.add("HDHomerunPortRange");
    openapiFields.add("HttpServerPortNumber");
    openapiFields.add("HttpsPortNumber");
    openapiFields.add("IgnoreVirtualInterfaces");
    openapiFields.add("ImageExtractionTimeoutMs");
    openapiFields.add("ImageSavingConvention");
    openapiFields.add("IsPortAuthorized");
    openapiFields.add("IsRemoteIPFilterBlacklist");
    openapiFields.add("IsStartupWizardCompleted");
    openapiFields.add("KnownProxies");
    openapiFields.add("LibraryMetadataRefreshConcurrency");
    openapiFields.add("LibraryMonitorDelay");
    openapiFields.add("LibraryScanFanoutConcurrency");
    openapiFields.add("LocalNetworkAddresses");
    openapiFields.add("LocalNetworkSubnets");
    openapiFields.add("LogFileRetentionDays");
    openapiFields.add("MaxAudiobookResume");
    openapiFields.add("MaxResumePct");
    openapiFields.add("MetadataCountryCode");
    openapiFields.add("MetadataNetworkPath");
    openapiFields.add("MetadataOptions");
    openapiFields.add("MetadataPath");
    openapiFields.add("MinAudiobookResume");
    openapiFields.add("MinResumeDurationSeconds");
    openapiFields.add("MinResumePct");
    openapiFields.add("PathSubstitutions");
    openapiFields.add("PluginRepositories");
    openapiFields.add("PreferredMetadataLanguage");
    openapiFields.add("PreviousVersion");
    openapiFields.add("PreviousVersionStr");
    openapiFields.add("PublicHttpsPort");
    openapiFields.add("PublicPort");
    openapiFields.add("PublishedServerUriBySubnet");
    openapiFields.add("QuickConnectAvailable");
    openapiFields.add("RemoteClientBitrateLimit");
    openapiFields.add("RemoteIPFilter");
    openapiFields.add("RemoveOldPlugins");
    openapiFields.add("RequireHttps");
    openapiFields.add("SSDPTracingFilter");
    openapiFields.add("SaveMetadataHidden");
    openapiFields.add("ServerName");
    openapiFields.add("SkipDeserializationForBasicTypes");
    openapiFields.add("SlowResponseThresholdMs");
    openapiFields.add("SortRemoveCharacters");
    openapiFields.add("SortRemoveWords");
    openapiFields.add("SortReplaceCharacters");
    openapiFields.add("TrustAllIP6Interfaces");
    openapiFields.add("UDPPortRange");
    openapiFields.add("UDPSendCount");
    openapiFields.add("UDPSendDelay");
    openapiFields.add("UICulture");
    openapiFields.add("UPnPCreateHttpPortMap");
    openapiFields.add("UninstalledPlugins");
    openapiFields.add("VirtualInterfaceNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerConfiguration is not found in the empty JSON string", ServerConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BaseUrl") != null && !jsonObj.get("BaseUrl").isJsonNull()) && !jsonObj.get("BaseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BaseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BaseUrl").toString()));
      }
      if ((jsonObj.get("CachePath") != null && !jsonObj.get("CachePath").isJsonNull()) && !jsonObj.get("CachePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CachePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CachePath").toString()));
      }
      if ((jsonObj.get("CertificatePassword") != null && !jsonObj.get("CertificatePassword").isJsonNull()) && !jsonObj.get("CertificatePassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificatePassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificatePassword").toString()));
      }
      if ((jsonObj.get("CertificatePath") != null && !jsonObj.get("CertificatePath").isJsonNull()) && !jsonObj.get("CertificatePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificatePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificatePath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CodecsUsed") != null && !jsonObj.get("CodecsUsed").isJsonNull() && !jsonObj.get("CodecsUsed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodecsUsed` to be an array in the JSON string but got `%s`", jsonObj.get("CodecsUsed").toString()));
      }
      if (jsonObj.get("ContentTypes") != null && !jsonObj.get("ContentTypes").isJsonNull()) {
        JsonArray jsonArraycontentTypes = jsonObj.getAsJsonArray("ContentTypes");
        if (jsonArraycontentTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ContentTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ContentTypes` to be an array in the JSON string but got `%s`", jsonObj.get("ContentTypes").toString()));
          }

          // validate the optional field `ContentTypes` (array)
          for (int i = 0; i < jsonArraycontentTypes.size(); i++) {
            NameValuePair.validateJsonElement(jsonArraycontentTypes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CorsHosts") != null && !jsonObj.get("CorsHosts").isJsonNull() && !jsonObj.get("CorsHosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CorsHosts` to be an array in the JSON string but got `%s`", jsonObj.get("CorsHosts").toString()));
      }
      if ((jsonObj.get("HDHomerunPortRange") != null && !jsonObj.get("HDHomerunPortRange").isJsonNull()) && !jsonObj.get("HDHomerunPortRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HDHomerunPortRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HDHomerunPortRange").toString()));
      }
      // validate the optional field `ImageSavingConvention`
      if (jsonObj.get("ImageSavingConvention") != null && !jsonObj.get("ImageSavingConvention").isJsonNull()) {
        ImageSavingConvention.validateJsonElement(jsonObj.get("ImageSavingConvention"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("KnownProxies") != null && !jsonObj.get("KnownProxies").isJsonNull() && !jsonObj.get("KnownProxies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `KnownProxies` to be an array in the JSON string but got `%s`", jsonObj.get("KnownProxies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LocalNetworkAddresses") != null && !jsonObj.get("LocalNetworkAddresses").isJsonNull() && !jsonObj.get("LocalNetworkAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalNetworkAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("LocalNetworkAddresses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LocalNetworkSubnets") != null && !jsonObj.get("LocalNetworkSubnets").isJsonNull() && !jsonObj.get("LocalNetworkSubnets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalNetworkSubnets` to be an array in the JSON string but got `%s`", jsonObj.get("LocalNetworkSubnets").toString()));
      }
      if ((jsonObj.get("MetadataCountryCode") != null && !jsonObj.get("MetadataCountryCode").isJsonNull()) && !jsonObj.get("MetadataCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataCountryCode").toString()));
      }
      if ((jsonObj.get("MetadataNetworkPath") != null && !jsonObj.get("MetadataNetworkPath").isJsonNull()) && !jsonObj.get("MetadataNetworkPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataNetworkPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataNetworkPath").toString()));
      }
      if (jsonObj.get("MetadataOptions") != null && !jsonObj.get("MetadataOptions").isJsonNull()) {
        JsonArray jsonArraymetadataOptions = jsonObj.getAsJsonArray("MetadataOptions");
        if (jsonArraymetadataOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MetadataOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MetadataOptions` to be an array in the JSON string but got `%s`", jsonObj.get("MetadataOptions").toString()));
          }

          // validate the optional field `MetadataOptions` (array)
          for (int i = 0; i < jsonArraymetadataOptions.size(); i++) {
            MetadataOptions.validateJsonElement(jsonArraymetadataOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("MetadataPath") != null && !jsonObj.get("MetadataPath").isJsonNull()) && !jsonObj.get("MetadataPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataPath").toString()));
      }
      if (jsonObj.get("PathSubstitutions") != null && !jsonObj.get("PathSubstitutions").isJsonNull()) {
        JsonArray jsonArraypathSubstitutions = jsonObj.getAsJsonArray("PathSubstitutions");
        if (jsonArraypathSubstitutions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PathSubstitutions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PathSubstitutions` to be an array in the JSON string but got `%s`", jsonObj.get("PathSubstitutions").toString()));
          }

          // validate the optional field `PathSubstitutions` (array)
          for (int i = 0; i < jsonArraypathSubstitutions.size(); i++) {
            PathSubstitution.validateJsonElement(jsonArraypathSubstitutions.get(i));
          };
        }
      }
      if (jsonObj.get("PluginRepositories") != null && !jsonObj.get("PluginRepositories").isJsonNull()) {
        JsonArray jsonArraypluginRepositories = jsonObj.getAsJsonArray("PluginRepositories");
        if (jsonArraypluginRepositories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PluginRepositories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PluginRepositories` to be an array in the JSON string but got `%s`", jsonObj.get("PluginRepositories").toString()));
          }

          // validate the optional field `PluginRepositories` (array)
          for (int i = 0; i < jsonArraypluginRepositories.size(); i++) {
            RepositoryInfo.validateJsonElement(jsonArraypluginRepositories.get(i));
          };
        }
      }
      if ((jsonObj.get("PreferredMetadataLanguage") != null && !jsonObj.get("PreferredMetadataLanguage").isJsonNull()) && !jsonObj.get("PreferredMetadataLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreferredMetadataLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreferredMetadataLanguage").toString()));
      }
      // validate the optional field `PreviousVersion`
      if (jsonObj.get("PreviousVersion") != null && !jsonObj.get("PreviousVersion").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("PreviousVersion"));
      }
      if ((jsonObj.get("PreviousVersionStr") != null && !jsonObj.get("PreviousVersionStr").isJsonNull()) && !jsonObj.get("PreviousVersionStr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreviousVersionStr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreviousVersionStr").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PublishedServerUriBySubnet") != null && !jsonObj.get("PublishedServerUriBySubnet").isJsonNull() && !jsonObj.get("PublishedServerUriBySubnet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PublishedServerUriBySubnet` to be an array in the JSON string but got `%s`", jsonObj.get("PublishedServerUriBySubnet").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("RemoteIPFilter") != null && !jsonObj.get("RemoteIPFilter").isJsonNull() && !jsonObj.get("RemoteIPFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RemoteIPFilter` to be an array in the JSON string but got `%s`", jsonObj.get("RemoteIPFilter").toString()));
      }
      if ((jsonObj.get("SSDPTracingFilter") != null && !jsonObj.get("SSDPTracingFilter").isJsonNull()) && !jsonObj.get("SSDPTracingFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SSDPTracingFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SSDPTracingFilter").toString()));
      }
      if ((jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) && !jsonObj.get("ServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SortRemoveCharacters") != null && !jsonObj.get("SortRemoveCharacters").isJsonNull() && !jsonObj.get("SortRemoveCharacters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortRemoveCharacters` to be an array in the JSON string but got `%s`", jsonObj.get("SortRemoveCharacters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SortRemoveWords") != null && !jsonObj.get("SortRemoveWords").isJsonNull() && !jsonObj.get("SortRemoveWords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortRemoveWords` to be an array in the JSON string but got `%s`", jsonObj.get("SortRemoveWords").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SortReplaceCharacters") != null && !jsonObj.get("SortReplaceCharacters").isJsonNull() && !jsonObj.get("SortReplaceCharacters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortReplaceCharacters` to be an array in the JSON string but got `%s`", jsonObj.get("SortReplaceCharacters").toString()));
      }
      if ((jsonObj.get("UDPPortRange") != null && !jsonObj.get("UDPPortRange").isJsonNull()) && !jsonObj.get("UDPPortRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDPPortRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UDPPortRange").toString()));
      }
      if ((jsonObj.get("UICulture") != null && !jsonObj.get("UICulture").isJsonNull()) && !jsonObj.get("UICulture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UICulture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UICulture").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("UninstalledPlugins") != null && !jsonObj.get("UninstalledPlugins").isJsonNull() && !jsonObj.get("UninstalledPlugins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `UninstalledPlugins` to be an array in the JSON string but got `%s`", jsonObj.get("UninstalledPlugins").toString()));
      }
      if ((jsonObj.get("VirtualInterfaceNames") != null && !jsonObj.get("VirtualInterfaceNames").isJsonNull()) && !jsonObj.get("VirtualInterfaceNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VirtualInterfaceNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VirtualInterfaceNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerConfiguration>() {
           @Override
           public void write(JsonWriter out, ServerConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerConfiguration
   * @throws IOException if the JSON string is invalid with respect to ServerConfiguration
   */
  public static ServerConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerConfiguration.class);
  }

  /**
   * Convert an instance of ServerConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

