/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MediaStreamType;
import org.openapitools.client.model.SubtitleDeliveryMethod;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class MediaStream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaStream {
  public static final String SERIALIZED_NAME_ASPECT_RATIO = "AspectRatio";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO)
  private String aspectRatio;

  public static final String SERIALIZED_NAME_AVERAGE_FRAME_RATE = "AverageFrameRate";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FRAME_RATE)
  private Float averageFrameRate;

  public static final String SERIALIZED_NAME_BIT_DEPTH = "BitDepth";
  @SerializedName(SERIALIZED_NAME_BIT_DEPTH)
  private Integer bitDepth;

  public static final String SERIALIZED_NAME_BIT_RATE = "BitRate";
  @SerializedName(SERIALIZED_NAME_BIT_RATE)
  private Integer bitRate;

  public static final String SERIALIZED_NAME_CHANNEL_LAYOUT = "ChannelLayout";
  @SerializedName(SERIALIZED_NAME_CHANNEL_LAYOUT)
  private String channelLayout;

  public static final String SERIALIZED_NAME_CHANNELS = "Channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private Integer channels;

  public static final String SERIALIZED_NAME_CODEC = "Codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private String codec;

  public static final String SERIALIZED_NAME_CODEC_TAG = "CodecTag";
  @SerializedName(SERIALIZED_NAME_CODEC_TAG)
  private String codecTag;

  public static final String SERIALIZED_NAME_CODEC_TIME_BASE = "CodecTimeBase";
  @SerializedName(SERIALIZED_NAME_CODEC_TIME_BASE)
  private String codecTimeBase;

  public static final String SERIALIZED_NAME_COLOR_PRIMARIES = "ColorPrimaries";
  @SerializedName(SERIALIZED_NAME_COLOR_PRIMARIES)
  private String colorPrimaries;

  public static final String SERIALIZED_NAME_COLOR_RANGE = "ColorRange";
  @SerializedName(SERIALIZED_NAME_COLOR_RANGE)
  private String colorRange;

  public static final String SERIALIZED_NAME_COLOR_SPACE = "ColorSpace";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE)
  private String colorSpace;

  public static final String SERIALIZED_NAME_COLOR_TRANSFER = "ColorTransfer";
  @SerializedName(SERIALIZED_NAME_COLOR_TRANSFER)
  private String colorTransfer;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "DeliveryMethod";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  private SubtitleDeliveryMethod deliveryMethod;

  public static final String SERIALIZED_NAME_DELIVERY_URL = "DeliveryUrl";
  @SerializedName(SERIALIZED_NAME_DELIVERY_URL)
  private String deliveryUrl;

  public static final String SERIALIZED_NAME_DISPLAY_TITLE = "DisplayTitle";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TITLE)
  private String displayTitle;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_INDEX = "Index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_IS_A_V_C = "IsAVC";
  @SerializedName(SERIALIZED_NAME_IS_A_V_C)
  private Boolean isAVC;

  public static final String SERIALIZED_NAME_IS_ANAMORPHIC = "IsAnamorphic";
  @SerializedName(SERIALIZED_NAME_IS_ANAMORPHIC)
  private Boolean isAnamorphic;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "IsDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_IS_EXTERNAL = "IsExternal";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL)
  private Boolean isExternal;

  public static final String SERIALIZED_NAME_IS_EXTERNAL_URL = "IsExternalUrl";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL_URL)
  private Boolean isExternalUrl;

  public static final String SERIALIZED_NAME_IS_FORCED = "IsForced";
  @SerializedName(SERIALIZED_NAME_IS_FORCED)
  private Boolean isForced;

  public static final String SERIALIZED_NAME_IS_INTERLACED = "IsInterlaced";
  @SerializedName(SERIALIZED_NAME_IS_INTERLACED)
  private Boolean isInterlaced;

  public static final String SERIALIZED_NAME_IS_TEXT_SUBTITLE_STREAM = "IsTextSubtitleStream";
  @SerializedName(SERIALIZED_NAME_IS_TEXT_SUBTITLE_STREAM)
  private Boolean isTextSubtitleStream;

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LEVEL = "Level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Double level;

  public static final String SERIALIZED_NAME_NAL_LENGTH_SIZE = "NalLengthSize";
  @SerializedName(SERIALIZED_NAME_NAL_LENGTH_SIZE)
  private String nalLengthSize;

  public static final String SERIALIZED_NAME_PACKET_LENGTH = "PacketLength";
  @SerializedName(SERIALIZED_NAME_PACKET_LENGTH)
  private Integer packetLength;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PIXEL_FORMAT = "PixelFormat";
  @SerializedName(SERIALIZED_NAME_PIXEL_FORMAT)
  private String pixelFormat;

  public static final String SERIALIZED_NAME_PROFILE = "Profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private String profile;

  public static final String SERIALIZED_NAME_REAL_FRAME_RATE = "RealFrameRate";
  @SerializedName(SERIALIZED_NAME_REAL_FRAME_RATE)
  private Float realFrameRate;

  public static final String SERIALIZED_NAME_REF_FRAMES = "RefFrames";
  @SerializedName(SERIALIZED_NAME_REF_FRAMES)
  private Integer refFrames;

  public static final String SERIALIZED_NAME_SAMPLE_RATE = "SampleRate";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE)
  private Integer sampleRate;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_SUPPORTS_EXTERNAL_STREAM = "SupportsExternalStream";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_EXTERNAL_STREAM)
  private Boolean supportsExternalStream;

  public static final String SERIALIZED_NAME_TIME_BASE = "TimeBase";
  @SerializedName(SERIALIZED_NAME_TIME_BASE)
  private String timeBase;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private MediaStreamType type;

  public static final String SERIALIZED_NAME_VIDEO_RANGE = "VideoRange";
  @SerializedName(SERIALIZED_NAME_VIDEO_RANGE)
  private String videoRange;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_LOCALIZED_DEFAULT = "localizedDefault";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_DEFAULT)
  private String localizedDefault;

  public static final String SERIALIZED_NAME_LOCALIZED_FORCED = "localizedForced";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_FORCED)
  private String localizedForced;

  public static final String SERIALIZED_NAME_LOCALIZED_UNDEFINED = "localizedUndefined";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_UNDEFINED)
  private String localizedUndefined;

  public MediaStream() {
  }

  public MediaStream(
     String displayTitle, 
     Boolean isTextSubtitleStream, 
     String videoRange
  ) {
    this();
    this.displayTitle = displayTitle;
    this.isTextSubtitleStream = isTextSubtitleStream;
    this.videoRange = videoRange;
  }

  public MediaStream aspectRatio(String aspectRatio) {
    this.aspectRatio = aspectRatio;
    return this;
  }

  /**
   * Gets or sets the aspect ratio.
   * @return aspectRatio
   */
  @javax.annotation.Nullable
  public String getAspectRatio() {
    return aspectRatio;
  }

  public void setAspectRatio(String aspectRatio) {
    this.aspectRatio = aspectRatio;
  }


  public MediaStream averageFrameRate(Float averageFrameRate) {
    this.averageFrameRate = averageFrameRate;
    return this;
  }

  /**
   * Gets or sets the average frame rate.
   * @return averageFrameRate
   */
  @javax.annotation.Nullable
  public Float getAverageFrameRate() {
    return averageFrameRate;
  }

  public void setAverageFrameRate(Float averageFrameRate) {
    this.averageFrameRate = averageFrameRate;
  }


  public MediaStream bitDepth(Integer bitDepth) {
    this.bitDepth = bitDepth;
    return this;
  }

  /**
   * Gets or sets the bit depth.
   * @return bitDepth
   */
  @javax.annotation.Nullable
  public Integer getBitDepth() {
    return bitDepth;
  }

  public void setBitDepth(Integer bitDepth) {
    this.bitDepth = bitDepth;
  }


  public MediaStream bitRate(Integer bitRate) {
    this.bitRate = bitRate;
    return this;
  }

  /**
   * Gets or sets the bit rate.
   * @return bitRate
   */
  @javax.annotation.Nullable
  public Integer getBitRate() {
    return bitRate;
  }

  public void setBitRate(Integer bitRate) {
    this.bitRate = bitRate;
  }


  public MediaStream channelLayout(String channelLayout) {
    this.channelLayout = channelLayout;
    return this;
  }

  /**
   * Gets or sets the channel layout.
   * @return channelLayout
   */
  @javax.annotation.Nullable
  public String getChannelLayout() {
    return channelLayout;
  }

  public void setChannelLayout(String channelLayout) {
    this.channelLayout = channelLayout;
  }


  public MediaStream channels(Integer channels) {
    this.channels = channels;
    return this;
  }

  /**
   * Gets or sets the channels.
   * @return channels
   */
  @javax.annotation.Nullable
  public Integer getChannels() {
    return channels;
  }

  public void setChannels(Integer channels) {
    this.channels = channels;
  }


  public MediaStream codec(String codec) {
    this.codec = codec;
    return this;
  }

  /**
   * Gets or sets the codec.
   * @return codec
   */
  @javax.annotation.Nullable
  public String getCodec() {
    return codec;
  }

  public void setCodec(String codec) {
    this.codec = codec;
  }


  public MediaStream codecTag(String codecTag) {
    this.codecTag = codecTag;
    return this;
  }

  /**
   * Gets or sets the codec tag.
   * @return codecTag
   */
  @javax.annotation.Nullable
  public String getCodecTag() {
    return codecTag;
  }

  public void setCodecTag(String codecTag) {
    this.codecTag = codecTag;
  }


  public MediaStream codecTimeBase(String codecTimeBase) {
    this.codecTimeBase = codecTimeBase;
    return this;
  }

  /**
   * Gets or sets the codec time base.
   * @return codecTimeBase
   */
  @javax.annotation.Nullable
  public String getCodecTimeBase() {
    return codecTimeBase;
  }

  public void setCodecTimeBase(String codecTimeBase) {
    this.codecTimeBase = codecTimeBase;
  }


  public MediaStream colorPrimaries(String colorPrimaries) {
    this.colorPrimaries = colorPrimaries;
    return this;
  }

  /**
   * Gets or sets the color primaries.
   * @return colorPrimaries
   */
  @javax.annotation.Nullable
  public String getColorPrimaries() {
    return colorPrimaries;
  }

  public void setColorPrimaries(String colorPrimaries) {
    this.colorPrimaries = colorPrimaries;
  }


  public MediaStream colorRange(String colorRange) {
    this.colorRange = colorRange;
    return this;
  }

  /**
   * Gets or sets the color range.
   * @return colorRange
   */
  @javax.annotation.Nullable
  public String getColorRange() {
    return colorRange;
  }

  public void setColorRange(String colorRange) {
    this.colorRange = colorRange;
  }


  public MediaStream colorSpace(String colorSpace) {
    this.colorSpace = colorSpace;
    return this;
  }

  /**
   * Gets or sets the color space.
   * @return colorSpace
   */
  @javax.annotation.Nullable
  public String getColorSpace() {
    return colorSpace;
  }

  public void setColorSpace(String colorSpace) {
    this.colorSpace = colorSpace;
  }


  public MediaStream colorTransfer(String colorTransfer) {
    this.colorTransfer = colorTransfer;
    return this;
  }

  /**
   * Gets or sets the color transfer.
   * @return colorTransfer
   */
  @javax.annotation.Nullable
  public String getColorTransfer() {
    return colorTransfer;
  }

  public void setColorTransfer(String colorTransfer) {
    this.colorTransfer = colorTransfer;
  }


  public MediaStream comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Gets or sets the comment.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public MediaStream deliveryMethod(SubtitleDeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

  /**
   * Get deliveryMethod
   * @return deliveryMethod
   */
  @javax.annotation.Nullable
  public SubtitleDeliveryMethod getDeliveryMethod() {
    return deliveryMethod;
  }

  public void setDeliveryMethod(SubtitleDeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  public MediaStream deliveryUrl(String deliveryUrl) {
    this.deliveryUrl = deliveryUrl;
    return this;
  }

  /**
   * Gets or sets the delivery URL.
   * @return deliveryUrl
   */
  @javax.annotation.Nullable
  public String getDeliveryUrl() {
    return deliveryUrl;
  }

  public void setDeliveryUrl(String deliveryUrl) {
    this.deliveryUrl = deliveryUrl;
  }


  /**
   * Get displayTitle
   * @return displayTitle
   */
  @javax.annotation.Nullable
  public String getDisplayTitle() {
    return displayTitle;
  }



  public MediaStream height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Gets or sets the height.
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public MediaStream index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Gets or sets the index.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public MediaStream isAVC(Boolean isAVC) {
    this.isAVC = isAVC;
    return this;
  }

  /**
   * Get isAVC
   * @return isAVC
   */
  @javax.annotation.Nullable
  public Boolean getIsAVC() {
    return isAVC;
  }

  public void setIsAVC(Boolean isAVC) {
    this.isAVC = isAVC;
  }


  public MediaStream isAnamorphic(Boolean isAnamorphic) {
    this.isAnamorphic = isAnamorphic;
    return this;
  }

  /**
   * Gets a value indicating whether this instance is anamorphic.
   * @return isAnamorphic
   */
  @javax.annotation.Nullable
  public Boolean getIsAnamorphic() {
    return isAnamorphic;
  }

  public void setIsAnamorphic(Boolean isAnamorphic) {
    this.isAnamorphic = isAnamorphic;
  }


  public MediaStream isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is default.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public MediaStream isExternal(Boolean isExternal) {
    this.isExternal = isExternal;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is external.
   * @return isExternal
   */
  @javax.annotation.Nullable
  public Boolean getIsExternal() {
    return isExternal;
  }

  public void setIsExternal(Boolean isExternal) {
    this.isExternal = isExternal;
  }


  public MediaStream isExternalUrl(Boolean isExternalUrl) {
    this.isExternalUrl = isExternalUrl;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is external URL.
   * @return isExternalUrl
   */
  @javax.annotation.Nullable
  public Boolean getIsExternalUrl() {
    return isExternalUrl;
  }

  public void setIsExternalUrl(Boolean isExternalUrl) {
    this.isExternalUrl = isExternalUrl;
  }


  public MediaStream isForced(Boolean isForced) {
    this.isForced = isForced;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is forced.
   * @return isForced
   */
  @javax.annotation.Nullable
  public Boolean getIsForced() {
    return isForced;
  }

  public void setIsForced(Boolean isForced) {
    this.isForced = isForced;
  }


  public MediaStream isInterlaced(Boolean isInterlaced) {
    this.isInterlaced = isInterlaced;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is interlaced.
   * @return isInterlaced
   */
  @javax.annotation.Nullable
  public Boolean getIsInterlaced() {
    return isInterlaced;
  }

  public void setIsInterlaced(Boolean isInterlaced) {
    this.isInterlaced = isInterlaced;
  }


  /**
   * Get isTextSubtitleStream
   * @return isTextSubtitleStream
   */
  @javax.annotation.Nullable
  public Boolean getIsTextSubtitleStream() {
    return isTextSubtitleStream;
  }



  public MediaStream language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Gets or sets the language.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public MediaStream level(Double level) {
    this.level = level;
    return this;
  }

  /**
   * Gets or sets the level.
   * @return level
   */
  @javax.annotation.Nullable
  public Double getLevel() {
    return level;
  }

  public void setLevel(Double level) {
    this.level = level;
  }


  public MediaStream nalLengthSize(String nalLengthSize) {
    this.nalLengthSize = nalLengthSize;
    return this;
  }

  /**
   * Get nalLengthSize
   * @return nalLengthSize
   */
  @javax.annotation.Nullable
  public String getNalLengthSize() {
    return nalLengthSize;
  }

  public void setNalLengthSize(String nalLengthSize) {
    this.nalLengthSize = nalLengthSize;
  }


  public MediaStream packetLength(Integer packetLength) {
    this.packetLength = packetLength;
    return this;
  }

  /**
   * Gets or sets the length of the packet.
   * @return packetLength
   */
  @javax.annotation.Nullable
  public Integer getPacketLength() {
    return packetLength;
  }

  public void setPacketLength(Integer packetLength) {
    this.packetLength = packetLength;
  }


  public MediaStream path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Gets or sets the filename.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public MediaStream pixelFormat(String pixelFormat) {
    this.pixelFormat = pixelFormat;
    return this;
  }

  /**
   * Gets or sets the pixel format.
   * @return pixelFormat
   */
  @javax.annotation.Nullable
  public String getPixelFormat() {
    return pixelFormat;
  }

  public void setPixelFormat(String pixelFormat) {
    this.pixelFormat = pixelFormat;
  }


  public MediaStream profile(String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Gets or sets the profile.
   * @return profile
   */
  @javax.annotation.Nullable
  public String getProfile() {
    return profile;
  }

  public void setProfile(String profile) {
    this.profile = profile;
  }


  public MediaStream realFrameRate(Float realFrameRate) {
    this.realFrameRate = realFrameRate;
    return this;
  }

  /**
   * Gets or sets the real frame rate.
   * @return realFrameRate
   */
  @javax.annotation.Nullable
  public Float getRealFrameRate() {
    return realFrameRate;
  }

  public void setRealFrameRate(Float realFrameRate) {
    this.realFrameRate = realFrameRate;
  }


  public MediaStream refFrames(Integer refFrames) {
    this.refFrames = refFrames;
    return this;
  }

  /**
   * Gets or sets the reference frames.
   * @return refFrames
   */
  @javax.annotation.Nullable
  public Integer getRefFrames() {
    return refFrames;
  }

  public void setRefFrames(Integer refFrames) {
    this.refFrames = refFrames;
  }


  public MediaStream sampleRate(Integer sampleRate) {
    this.sampleRate = sampleRate;
    return this;
  }

  /**
   * Gets or sets the sample rate.
   * @return sampleRate
   */
  @javax.annotation.Nullable
  public Integer getSampleRate() {
    return sampleRate;
  }

  public void setSampleRate(Integer sampleRate) {
    this.sampleRate = sampleRate;
  }


  public MediaStream score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Gets or sets the score.
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public MediaStream supportsExternalStream(Boolean supportsExternalStream) {
    this.supportsExternalStream = supportsExternalStream;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [supports external stream].
   * @return supportsExternalStream
   */
  @javax.annotation.Nullable
  public Boolean getSupportsExternalStream() {
    return supportsExternalStream;
  }

  public void setSupportsExternalStream(Boolean supportsExternalStream) {
    this.supportsExternalStream = supportsExternalStream;
  }


  public MediaStream timeBase(String timeBase) {
    this.timeBase = timeBase;
    return this;
  }

  /**
   * Gets or sets the time base.
   * @return timeBase
   */
  @javax.annotation.Nullable
  public String getTimeBase() {
    return timeBase;
  }

  public void setTimeBase(String timeBase) {
    this.timeBase = timeBase;
  }


  public MediaStream title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Gets or sets the title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MediaStream type(MediaStreamType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public MediaStreamType getType() {
    return type;
  }

  public void setType(MediaStreamType type) {
    this.type = type;
  }


  /**
   * Gets or sets the video range.
   * @return videoRange
   */
  @javax.annotation.Nullable
  public String getVideoRange() {
    return videoRange;
  }



  public MediaStream width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Gets or sets the width.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }


  public MediaStream localizedDefault(String localizedDefault) {
    this.localizedDefault = localizedDefault;
    return this;
  }

  /**
   * Get localizedDefault
   * @return localizedDefault
   */
  @javax.annotation.Nullable
  public String getLocalizedDefault() {
    return localizedDefault;
  }

  public void setLocalizedDefault(String localizedDefault) {
    this.localizedDefault = localizedDefault;
  }


  public MediaStream localizedForced(String localizedForced) {
    this.localizedForced = localizedForced;
    return this;
  }

  /**
   * Get localizedForced
   * @return localizedForced
   */
  @javax.annotation.Nullable
  public String getLocalizedForced() {
    return localizedForced;
  }

  public void setLocalizedForced(String localizedForced) {
    this.localizedForced = localizedForced;
  }


  public MediaStream localizedUndefined(String localizedUndefined) {
    this.localizedUndefined = localizedUndefined;
    return this;
  }

  /**
   * Get localizedUndefined
   * @return localizedUndefined
   */
  @javax.annotation.Nullable
  public String getLocalizedUndefined() {
    return localizedUndefined;
  }

  public void setLocalizedUndefined(String localizedUndefined) {
    this.localizedUndefined = localizedUndefined;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaStream mediaStream = (MediaStream) o;
    return Objects.equals(this.aspectRatio, mediaStream.aspectRatio) &&
        Objects.equals(this.averageFrameRate, mediaStream.averageFrameRate) &&
        Objects.equals(this.bitDepth, mediaStream.bitDepth) &&
        Objects.equals(this.bitRate, mediaStream.bitRate) &&
        Objects.equals(this.channelLayout, mediaStream.channelLayout) &&
        Objects.equals(this.channels, mediaStream.channels) &&
        Objects.equals(this.codec, mediaStream.codec) &&
        Objects.equals(this.codecTag, mediaStream.codecTag) &&
        Objects.equals(this.codecTimeBase, mediaStream.codecTimeBase) &&
        Objects.equals(this.colorPrimaries, mediaStream.colorPrimaries) &&
        Objects.equals(this.colorRange, mediaStream.colorRange) &&
        Objects.equals(this.colorSpace, mediaStream.colorSpace) &&
        Objects.equals(this.colorTransfer, mediaStream.colorTransfer) &&
        Objects.equals(this.comment, mediaStream.comment) &&
        Objects.equals(this.deliveryMethod, mediaStream.deliveryMethod) &&
        Objects.equals(this.deliveryUrl, mediaStream.deliveryUrl) &&
        Objects.equals(this.displayTitle, mediaStream.displayTitle) &&
        Objects.equals(this.height, mediaStream.height) &&
        Objects.equals(this.index, mediaStream.index) &&
        Objects.equals(this.isAVC, mediaStream.isAVC) &&
        Objects.equals(this.isAnamorphic, mediaStream.isAnamorphic) &&
        Objects.equals(this.isDefault, mediaStream.isDefault) &&
        Objects.equals(this.isExternal, mediaStream.isExternal) &&
        Objects.equals(this.isExternalUrl, mediaStream.isExternalUrl) &&
        Objects.equals(this.isForced, mediaStream.isForced) &&
        Objects.equals(this.isInterlaced, mediaStream.isInterlaced) &&
        Objects.equals(this.isTextSubtitleStream, mediaStream.isTextSubtitleStream) &&
        Objects.equals(this.language, mediaStream.language) &&
        Objects.equals(this.level, mediaStream.level) &&
        Objects.equals(this.nalLengthSize, mediaStream.nalLengthSize) &&
        Objects.equals(this.packetLength, mediaStream.packetLength) &&
        Objects.equals(this.path, mediaStream.path) &&
        Objects.equals(this.pixelFormat, mediaStream.pixelFormat) &&
        Objects.equals(this.profile, mediaStream.profile) &&
        Objects.equals(this.realFrameRate, mediaStream.realFrameRate) &&
        Objects.equals(this.refFrames, mediaStream.refFrames) &&
        Objects.equals(this.sampleRate, mediaStream.sampleRate) &&
        Objects.equals(this.score, mediaStream.score) &&
        Objects.equals(this.supportsExternalStream, mediaStream.supportsExternalStream) &&
        Objects.equals(this.timeBase, mediaStream.timeBase) &&
        Objects.equals(this.title, mediaStream.title) &&
        Objects.equals(this.type, mediaStream.type) &&
        Objects.equals(this.videoRange, mediaStream.videoRange) &&
        Objects.equals(this.width, mediaStream.width) &&
        Objects.equals(this.localizedDefault, mediaStream.localizedDefault) &&
        Objects.equals(this.localizedForced, mediaStream.localizedForced) &&
        Objects.equals(this.localizedUndefined, mediaStream.localizedUndefined);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectRatio, averageFrameRate, bitDepth, bitRate, channelLayout, channels, codec, codecTag, codecTimeBase, colorPrimaries, colorRange, colorSpace, colorTransfer, comment, deliveryMethod, deliveryUrl, displayTitle, height, index, isAVC, isAnamorphic, isDefault, isExternal, isExternalUrl, isForced, isInterlaced, isTextSubtitleStream, language, level, nalLengthSize, packetLength, path, pixelFormat, profile, realFrameRate, refFrames, sampleRate, score, supportsExternalStream, timeBase, title, type, videoRange, width, localizedDefault, localizedForced, localizedUndefined);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaStream {\n");
    sb.append("    aspectRatio: ").append(toIndentedString(aspectRatio)).append("\n");
    sb.append("    averageFrameRate: ").append(toIndentedString(averageFrameRate)).append("\n");
    sb.append("    bitDepth: ").append(toIndentedString(bitDepth)).append("\n");
    sb.append("    bitRate: ").append(toIndentedString(bitRate)).append("\n");
    sb.append("    channelLayout: ").append(toIndentedString(channelLayout)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    codecTag: ").append(toIndentedString(codecTag)).append("\n");
    sb.append("    codecTimeBase: ").append(toIndentedString(codecTimeBase)).append("\n");
    sb.append("    colorPrimaries: ").append(toIndentedString(colorPrimaries)).append("\n");
    sb.append("    colorRange: ").append(toIndentedString(colorRange)).append("\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    colorTransfer: ").append(toIndentedString(colorTransfer)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    deliveryUrl: ").append(toIndentedString(deliveryUrl)).append("\n");
    sb.append("    displayTitle: ").append(toIndentedString(displayTitle)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    isAVC: ").append(toIndentedString(isAVC)).append("\n");
    sb.append("    isAnamorphic: ").append(toIndentedString(isAnamorphic)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    isExternal: ").append(toIndentedString(isExternal)).append("\n");
    sb.append("    isExternalUrl: ").append(toIndentedString(isExternalUrl)).append("\n");
    sb.append("    isForced: ").append(toIndentedString(isForced)).append("\n");
    sb.append("    isInterlaced: ").append(toIndentedString(isInterlaced)).append("\n");
    sb.append("    isTextSubtitleStream: ").append(toIndentedString(isTextSubtitleStream)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    nalLengthSize: ").append(toIndentedString(nalLengthSize)).append("\n");
    sb.append("    packetLength: ").append(toIndentedString(packetLength)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pixelFormat: ").append(toIndentedString(pixelFormat)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    realFrameRate: ").append(toIndentedString(realFrameRate)).append("\n");
    sb.append("    refFrames: ").append(toIndentedString(refFrames)).append("\n");
    sb.append("    sampleRate: ").append(toIndentedString(sampleRate)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    supportsExternalStream: ").append(toIndentedString(supportsExternalStream)).append("\n");
    sb.append("    timeBase: ").append(toIndentedString(timeBase)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    videoRange: ").append(toIndentedString(videoRange)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    localizedDefault: ").append(toIndentedString(localizedDefault)).append("\n");
    sb.append("    localizedForced: ").append(toIndentedString(localizedForced)).append("\n");
    sb.append("    localizedUndefined: ").append(toIndentedString(localizedUndefined)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AspectRatio");
    openapiFields.add("AverageFrameRate");
    openapiFields.add("BitDepth");
    openapiFields.add("BitRate");
    openapiFields.add("ChannelLayout");
    openapiFields.add("Channels");
    openapiFields.add("Codec");
    openapiFields.add("CodecTag");
    openapiFields.add("CodecTimeBase");
    openapiFields.add("ColorPrimaries");
    openapiFields.add("ColorRange");
    openapiFields.add("ColorSpace");
    openapiFields.add("ColorTransfer");
    openapiFields.add("Comment");
    openapiFields.add("DeliveryMethod");
    openapiFields.add("DeliveryUrl");
    openapiFields.add("DisplayTitle");
    openapiFields.add("Height");
    openapiFields.add("Index");
    openapiFields.add("IsAVC");
    openapiFields.add("IsAnamorphic");
    openapiFields.add("IsDefault");
    openapiFields.add("IsExternal");
    openapiFields.add("IsExternalUrl");
    openapiFields.add("IsForced");
    openapiFields.add("IsInterlaced");
    openapiFields.add("IsTextSubtitleStream");
    openapiFields.add("Language");
    openapiFields.add("Level");
    openapiFields.add("NalLengthSize");
    openapiFields.add("PacketLength");
    openapiFields.add("Path");
    openapiFields.add("PixelFormat");
    openapiFields.add("Profile");
    openapiFields.add("RealFrameRate");
    openapiFields.add("RefFrames");
    openapiFields.add("SampleRate");
    openapiFields.add("Score");
    openapiFields.add("SupportsExternalStream");
    openapiFields.add("TimeBase");
    openapiFields.add("Title");
    openapiFields.add("Type");
    openapiFields.add("VideoRange");
    openapiFields.add("Width");
    openapiFields.add("localizedDefault");
    openapiFields.add("localizedForced");
    openapiFields.add("localizedUndefined");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaStream is not found in the empty JSON string", MediaStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AspectRatio") != null && !jsonObj.get("AspectRatio").isJsonNull()) && !jsonObj.get("AspectRatio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AspectRatio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AspectRatio").toString()));
      }
      if ((jsonObj.get("ChannelLayout") != null && !jsonObj.get("ChannelLayout").isJsonNull()) && !jsonObj.get("ChannelLayout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelLayout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelLayout").toString()));
      }
      if ((jsonObj.get("Codec") != null && !jsonObj.get("Codec").isJsonNull()) && !jsonObj.get("Codec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Codec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Codec").toString()));
      }
      if ((jsonObj.get("CodecTag") != null && !jsonObj.get("CodecTag").isJsonNull()) && !jsonObj.get("CodecTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodecTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodecTag").toString()));
      }
      if ((jsonObj.get("CodecTimeBase") != null && !jsonObj.get("CodecTimeBase").isJsonNull()) && !jsonObj.get("CodecTimeBase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodecTimeBase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodecTimeBase").toString()));
      }
      if ((jsonObj.get("ColorPrimaries") != null && !jsonObj.get("ColorPrimaries").isJsonNull()) && !jsonObj.get("ColorPrimaries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColorPrimaries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColorPrimaries").toString()));
      }
      if ((jsonObj.get("ColorRange") != null && !jsonObj.get("ColorRange").isJsonNull()) && !jsonObj.get("ColorRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColorRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColorRange").toString()));
      }
      if ((jsonObj.get("ColorSpace") != null && !jsonObj.get("ColorSpace").isJsonNull()) && !jsonObj.get("ColorSpace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColorSpace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColorSpace").toString()));
      }
      if ((jsonObj.get("ColorTransfer") != null && !jsonObj.get("ColorTransfer").isJsonNull()) && !jsonObj.get("ColorTransfer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ColorTransfer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ColorTransfer").toString()));
      }
      if ((jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) && !jsonObj.get("Comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Comment").toString()));
      }
      // validate the optional field `DeliveryMethod`
      if (jsonObj.get("DeliveryMethod") != null && !jsonObj.get("DeliveryMethod").isJsonNull()) {
        SubtitleDeliveryMethod.validateJsonElement(jsonObj.get("DeliveryMethod"));
      }
      if ((jsonObj.get("DeliveryUrl") != null && !jsonObj.get("DeliveryUrl").isJsonNull()) && !jsonObj.get("DeliveryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliveryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeliveryUrl").toString()));
      }
      if ((jsonObj.get("DisplayTitle") != null && !jsonObj.get("DisplayTitle").isJsonNull()) && !jsonObj.get("DisplayTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayTitle").toString()));
      }
      if ((jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) && !jsonObj.get("Language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Language").toString()));
      }
      if ((jsonObj.get("NalLengthSize") != null && !jsonObj.get("NalLengthSize").isJsonNull()) && !jsonObj.get("NalLengthSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NalLengthSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NalLengthSize").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("PixelFormat") != null && !jsonObj.get("PixelFormat").isJsonNull()) && !jsonObj.get("PixelFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PixelFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PixelFormat").toString()));
      }
      if ((jsonObj.get("Profile") != null && !jsonObj.get("Profile").isJsonNull()) && !jsonObj.get("Profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Profile").toString()));
      }
      if ((jsonObj.get("TimeBase") != null && !jsonObj.get("TimeBase").isJsonNull()) && !jsonObj.get("TimeBase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeBase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeBase").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        MediaStreamType.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("VideoRange") != null && !jsonObj.get("VideoRange").isJsonNull()) && !jsonObj.get("VideoRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VideoRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VideoRange").toString()));
      }
      if ((jsonObj.get("localizedDefault") != null && !jsonObj.get("localizedDefault").isJsonNull()) && !jsonObj.get("localizedDefault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedDefault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizedDefault").toString()));
      }
      if ((jsonObj.get("localizedForced") != null && !jsonObj.get("localizedForced").isJsonNull()) && !jsonObj.get("localizedForced").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedForced` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizedForced").toString()));
      }
      if ((jsonObj.get("localizedUndefined") != null && !jsonObj.get("localizedUndefined").isJsonNull()) && !jsonObj.get("localizedUndefined").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedUndefined` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizedUndefined").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaStream.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaStream>() {
           @Override
           public void write(JsonWriter out, MediaStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaStream
   * @throws IOException if the JSON string is invalid with respect to MediaStream
   */
  public static MediaStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaStream.class);
  }

  /**
   * Convert an instance of MediaStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

