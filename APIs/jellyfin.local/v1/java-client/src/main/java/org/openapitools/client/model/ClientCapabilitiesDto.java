/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeviceProfile;
import org.openapitools.client.model.GeneralCommandType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Client capabilities dto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientCapabilitiesDto {
  public static final String SERIALIZED_NAME_APP_STORE_URL = "AppStoreUrl";
  @SerializedName(SERIALIZED_NAME_APP_STORE_URL)
  private String appStoreUrl;

  public static final String SERIALIZED_NAME_DEVICE_PROFILE = "DeviceProfile";
  @SerializedName(SERIALIZED_NAME_DEVICE_PROFILE)
  private DeviceProfile deviceProfile;

  public static final String SERIALIZED_NAME_ICON_URL = "IconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_MESSAGE_CALLBACK_URL = "MessageCallbackUrl";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CALLBACK_URL)
  private String messageCallbackUrl;

  public static final String SERIALIZED_NAME_PLAYABLE_MEDIA_TYPES = "PlayableMediaTypes";
  @SerializedName(SERIALIZED_NAME_PLAYABLE_MEDIA_TYPES)
  private List<String> playableMediaTypes;

  public static final String SERIALIZED_NAME_SUPPORTED_COMMANDS = "SupportedCommands";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_COMMANDS)
  private List<GeneralCommandType> supportedCommands;

  public static final String SERIALIZED_NAME_SUPPORTS_CONTENT_UPLOADING = "SupportsContentUploading";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_CONTENT_UPLOADING)
  private Boolean supportsContentUploading;

  public static final String SERIALIZED_NAME_SUPPORTS_MEDIA_CONTROL = "SupportsMediaControl";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_MEDIA_CONTROL)
  private Boolean supportsMediaControl;

  public static final String SERIALIZED_NAME_SUPPORTS_PERSISTENT_IDENTIFIER = "SupportsPersistentIdentifier";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_PERSISTENT_IDENTIFIER)
  private Boolean supportsPersistentIdentifier;

  public static final String SERIALIZED_NAME_SUPPORTS_SYNC = "SupportsSync";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_SYNC)
  private Boolean supportsSync;

  public ClientCapabilitiesDto() {
  }

  public ClientCapabilitiesDto appStoreUrl(String appStoreUrl) {
    this.appStoreUrl = appStoreUrl;
    return this;
  }

  /**
   * Gets or sets the app store url.
   * @return appStoreUrl
   */
  @javax.annotation.Nullable
  public String getAppStoreUrl() {
    return appStoreUrl;
  }

  public void setAppStoreUrl(String appStoreUrl) {
    this.appStoreUrl = appStoreUrl;
  }


  public ClientCapabilitiesDto deviceProfile(DeviceProfile deviceProfile) {
    this.deviceProfile = deviceProfile;
    return this;
  }

  /**
   * Get deviceProfile
   * @return deviceProfile
   */
  @javax.annotation.Nullable
  public DeviceProfile getDeviceProfile() {
    return deviceProfile;
  }

  public void setDeviceProfile(DeviceProfile deviceProfile) {
    this.deviceProfile = deviceProfile;
  }


  public ClientCapabilitiesDto iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * Gets or sets the icon url.
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public ClientCapabilitiesDto messageCallbackUrl(String messageCallbackUrl) {
    this.messageCallbackUrl = messageCallbackUrl;
    return this;
  }

  /**
   * Gets or sets the message callback url.
   * @return messageCallbackUrl
   */
  @javax.annotation.Nullable
  public String getMessageCallbackUrl() {
    return messageCallbackUrl;
  }

  public void setMessageCallbackUrl(String messageCallbackUrl) {
    this.messageCallbackUrl = messageCallbackUrl;
  }


  public ClientCapabilitiesDto playableMediaTypes(List<String> playableMediaTypes) {
    this.playableMediaTypes = playableMediaTypes;
    return this;
  }

  public ClientCapabilitiesDto addPlayableMediaTypesItem(String playableMediaTypesItem) {
    if (this.playableMediaTypes == null) {
      this.playableMediaTypes = new ArrayList<>();
    }
    this.playableMediaTypes.add(playableMediaTypesItem);
    return this;
  }

  /**
   * Gets or sets the list of playable media types.
   * @return playableMediaTypes
   */
  @javax.annotation.Nullable
  public List<String> getPlayableMediaTypes() {
    return playableMediaTypes;
  }

  public void setPlayableMediaTypes(List<String> playableMediaTypes) {
    this.playableMediaTypes = playableMediaTypes;
  }


  public ClientCapabilitiesDto supportedCommands(List<GeneralCommandType> supportedCommands) {
    this.supportedCommands = supportedCommands;
    return this;
  }

  public ClientCapabilitiesDto addSupportedCommandsItem(GeneralCommandType supportedCommandsItem) {
    if (this.supportedCommands == null) {
      this.supportedCommands = new ArrayList<>();
    }
    this.supportedCommands.add(supportedCommandsItem);
    return this;
  }

  /**
   * Gets or sets the list of supported commands.
   * @return supportedCommands
   */
  @javax.annotation.Nullable
  public List<GeneralCommandType> getSupportedCommands() {
    return supportedCommands;
  }

  public void setSupportedCommands(List<GeneralCommandType> supportedCommands) {
    this.supportedCommands = supportedCommands;
  }


  public ClientCapabilitiesDto supportsContentUploading(Boolean supportsContentUploading) {
    this.supportsContentUploading = supportsContentUploading;
    return this;
  }

  /**
   * Gets or sets a value indicating whether session supports content uploading.
   * @return supportsContentUploading
   */
  @javax.annotation.Nullable
  public Boolean getSupportsContentUploading() {
    return supportsContentUploading;
  }

  public void setSupportsContentUploading(Boolean supportsContentUploading) {
    this.supportsContentUploading = supportsContentUploading;
  }


  public ClientCapabilitiesDto supportsMediaControl(Boolean supportsMediaControl) {
    this.supportsMediaControl = supportsMediaControl;
    return this;
  }

  /**
   * Gets or sets a value indicating whether session supports media control.
   * @return supportsMediaControl
   */
  @javax.annotation.Nullable
  public Boolean getSupportsMediaControl() {
    return supportsMediaControl;
  }

  public void setSupportsMediaControl(Boolean supportsMediaControl) {
    this.supportsMediaControl = supportsMediaControl;
  }


  public ClientCapabilitiesDto supportsPersistentIdentifier(Boolean supportsPersistentIdentifier) {
    this.supportsPersistentIdentifier = supportsPersistentIdentifier;
    return this;
  }

  /**
   * Gets or sets a value indicating whether session supports a persistent identifier.
   * @return supportsPersistentIdentifier
   */
  @javax.annotation.Nullable
  public Boolean getSupportsPersistentIdentifier() {
    return supportsPersistentIdentifier;
  }

  public void setSupportsPersistentIdentifier(Boolean supportsPersistentIdentifier) {
    this.supportsPersistentIdentifier = supportsPersistentIdentifier;
  }


  public ClientCapabilitiesDto supportsSync(Boolean supportsSync) {
    this.supportsSync = supportsSync;
    return this;
  }

  /**
   * Gets or sets a value indicating whether session supports sync.
   * @return supportsSync
   */
  @javax.annotation.Nullable
  public Boolean getSupportsSync() {
    return supportsSync;
  }

  public void setSupportsSync(Boolean supportsSync) {
    this.supportsSync = supportsSync;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientCapabilitiesDto clientCapabilitiesDto = (ClientCapabilitiesDto) o;
    return Objects.equals(this.appStoreUrl, clientCapabilitiesDto.appStoreUrl) &&
        Objects.equals(this.deviceProfile, clientCapabilitiesDto.deviceProfile) &&
        Objects.equals(this.iconUrl, clientCapabilitiesDto.iconUrl) &&
        Objects.equals(this.messageCallbackUrl, clientCapabilitiesDto.messageCallbackUrl) &&
        Objects.equals(this.playableMediaTypes, clientCapabilitiesDto.playableMediaTypes) &&
        Objects.equals(this.supportedCommands, clientCapabilitiesDto.supportedCommands) &&
        Objects.equals(this.supportsContentUploading, clientCapabilitiesDto.supportsContentUploading) &&
        Objects.equals(this.supportsMediaControl, clientCapabilitiesDto.supportsMediaControl) &&
        Objects.equals(this.supportsPersistentIdentifier, clientCapabilitiesDto.supportsPersistentIdentifier) &&
        Objects.equals(this.supportsSync, clientCapabilitiesDto.supportsSync);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(appStoreUrl, deviceProfile, iconUrl, messageCallbackUrl, playableMediaTypes, supportedCommands, supportsContentUploading, supportsMediaControl, supportsPersistentIdentifier, supportsSync);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientCapabilitiesDto {\n");
    sb.append("    appStoreUrl: ").append(toIndentedString(appStoreUrl)).append("\n");
    sb.append("    deviceProfile: ").append(toIndentedString(deviceProfile)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    messageCallbackUrl: ").append(toIndentedString(messageCallbackUrl)).append("\n");
    sb.append("    playableMediaTypes: ").append(toIndentedString(playableMediaTypes)).append("\n");
    sb.append("    supportedCommands: ").append(toIndentedString(supportedCommands)).append("\n");
    sb.append("    supportsContentUploading: ").append(toIndentedString(supportsContentUploading)).append("\n");
    sb.append("    supportsMediaControl: ").append(toIndentedString(supportsMediaControl)).append("\n");
    sb.append("    supportsPersistentIdentifier: ").append(toIndentedString(supportsPersistentIdentifier)).append("\n");
    sb.append("    supportsSync: ").append(toIndentedString(supportsSync)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppStoreUrl");
    openapiFields.add("DeviceProfile");
    openapiFields.add("IconUrl");
    openapiFields.add("MessageCallbackUrl");
    openapiFields.add("PlayableMediaTypes");
    openapiFields.add("SupportedCommands");
    openapiFields.add("SupportsContentUploading");
    openapiFields.add("SupportsMediaControl");
    openapiFields.add("SupportsPersistentIdentifier");
    openapiFields.add("SupportsSync");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientCapabilitiesDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientCapabilitiesDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientCapabilitiesDto is not found in the empty JSON string", ClientCapabilitiesDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientCapabilitiesDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientCapabilitiesDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AppStoreUrl") != null && !jsonObj.get("AppStoreUrl").isJsonNull()) && !jsonObj.get("AppStoreUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AppStoreUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AppStoreUrl").toString()));
      }
      // validate the optional field `DeviceProfile`
      if (jsonObj.get("DeviceProfile") != null && !jsonObj.get("DeviceProfile").isJsonNull()) {
        DeviceProfile.validateJsonElement(jsonObj.get("DeviceProfile"));
      }
      if ((jsonObj.get("IconUrl") != null && !jsonObj.get("IconUrl").isJsonNull()) && !jsonObj.get("IconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IconUrl").toString()));
      }
      if ((jsonObj.get("MessageCallbackUrl") != null && !jsonObj.get("MessageCallbackUrl").isJsonNull()) && !jsonObj.get("MessageCallbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageCallbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MessageCallbackUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PlayableMediaTypes") != null && !jsonObj.get("PlayableMediaTypes").isJsonNull() && !jsonObj.get("PlayableMediaTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayableMediaTypes` to be an array in the JSON string but got `%s`", jsonObj.get("PlayableMediaTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SupportedCommands") != null && !jsonObj.get("SupportedCommands").isJsonNull() && !jsonObj.get("SupportedCommands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedCommands` to be an array in the JSON string but got `%s`", jsonObj.get("SupportedCommands").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientCapabilitiesDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientCapabilitiesDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientCapabilitiesDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientCapabilitiesDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientCapabilitiesDto>() {
           @Override
           public void write(JsonWriter out, ClientCapabilitiesDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientCapabilitiesDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientCapabilitiesDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientCapabilitiesDto
   * @throws IOException if the JSON string is invalid with respect to ClientCapabilitiesDto
   */
  public static ClientCapabilitiesDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientCapabilitiesDto.class);
  }

  /**
   * Convert an instance of ClientCapabilitiesDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

