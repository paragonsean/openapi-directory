/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.DayOfWeek;
import org.openapitools.client.model.DayPattern;
import org.openapitools.client.model.KeepUntil;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class SeriesTimerInfoDto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SeriesTimerInfoDto {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "ChannelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private UUID channelId;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "ChannelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_CHANNEL_PRIMARY_IMAGE_TAG = "ChannelPrimaryImageTag";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PRIMARY_IMAGE_TAG)
  private String channelPrimaryImageTag;

  public static final String SERIALIZED_NAME_DAY_PATTERN = "DayPattern";
  @SerializedName(SERIALIZED_NAME_DAY_PATTERN)
  private DayPattern dayPattern;

  public static final String SERIALIZED_NAME_DAYS = "Days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private List<DayOfWeek> days;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_EXTERNAL_CHANNEL_ID = "ExternalChannelId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CHANNEL_ID)
  private String externalChannelId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "ExternalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_EXTERNAL_PROGRAM_ID = "ExternalProgramId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PROGRAM_ID)
  private String externalProgramId;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_TAGS = "ImageTags";
  @SerializedName(SERIALIZED_NAME_IMAGE_TAGS)
  private Map<String, String> imageTags;

  public static final String SERIALIZED_NAME_IS_POST_PADDING_REQUIRED = "IsPostPaddingRequired";
  @SerializedName(SERIALIZED_NAME_IS_POST_PADDING_REQUIRED)
  private Boolean isPostPaddingRequired;

  public static final String SERIALIZED_NAME_IS_PRE_PADDING_REQUIRED = "IsPrePaddingRequired";
  @SerializedName(SERIALIZED_NAME_IS_PRE_PADDING_REQUIRED)
  private Boolean isPrePaddingRequired;

  public static final String SERIALIZED_NAME_KEEP_UNTIL = "KeepUntil";
  @SerializedName(SERIALIZED_NAME_KEEP_UNTIL)
  private KeepUntil keepUntil;

  public static final String SERIALIZED_NAME_KEEP_UP_TO = "KeepUpTo";
  @SerializedName(SERIALIZED_NAME_KEEP_UP_TO)
  private Integer keepUpTo;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERVIEW = "Overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  private String overview;

  public static final String SERIALIZED_NAME_PARENT_BACKDROP_IMAGE_TAGS = "ParentBackdropImageTags";
  @SerializedName(SERIALIZED_NAME_PARENT_BACKDROP_IMAGE_TAGS)
  private List<String> parentBackdropImageTags;

  public static final String SERIALIZED_NAME_PARENT_BACKDROP_ITEM_ID = "ParentBackdropItemId";
  @SerializedName(SERIALIZED_NAME_PARENT_BACKDROP_ITEM_ID)
  private String parentBackdropItemId;

  public static final String SERIALIZED_NAME_PARENT_PRIMARY_IMAGE_ITEM_ID = "ParentPrimaryImageItemId";
  @SerializedName(SERIALIZED_NAME_PARENT_PRIMARY_IMAGE_ITEM_ID)
  private String parentPrimaryImageItemId;

  public static final String SERIALIZED_NAME_PARENT_PRIMARY_IMAGE_TAG = "ParentPrimaryImageTag";
  @SerializedName(SERIALIZED_NAME_PARENT_PRIMARY_IMAGE_TAG)
  private String parentPrimaryImageTag;

  public static final String SERIALIZED_NAME_PARENT_THUMB_IMAGE_TAG = "ParentThumbImageTag";
  @SerializedName(SERIALIZED_NAME_PARENT_THUMB_IMAGE_TAG)
  private String parentThumbImageTag;

  public static final String SERIALIZED_NAME_PARENT_THUMB_ITEM_ID = "ParentThumbItemId";
  @SerializedName(SERIALIZED_NAME_PARENT_THUMB_ITEM_ID)
  private String parentThumbItemId;

  public static final String SERIALIZED_NAME_POST_PADDING_SECONDS = "PostPaddingSeconds";
  @SerializedName(SERIALIZED_NAME_POST_PADDING_SECONDS)
  private Integer postPaddingSeconds;

  public static final String SERIALIZED_NAME_PRE_PADDING_SECONDS = "PrePaddingSeconds";
  @SerializedName(SERIALIZED_NAME_PRE_PADDING_SECONDS)
  private Integer prePaddingSeconds;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_PROGRAM_ID = "ProgramId";
  @SerializedName(SERIALIZED_NAME_PROGRAM_ID)
  private String programId;

  public static final String SERIALIZED_NAME_RECORD_ANY_CHANNEL = "RecordAnyChannel";
  @SerializedName(SERIALIZED_NAME_RECORD_ANY_CHANNEL)
  private Boolean recordAnyChannel;

  public static final String SERIALIZED_NAME_RECORD_ANY_TIME = "RecordAnyTime";
  @SerializedName(SERIALIZED_NAME_RECORD_ANY_TIME)
  private Boolean recordAnyTime;

  public static final String SERIALIZED_NAME_RECORD_NEW_ONLY = "RecordNewOnly";
  @SerializedName(SERIALIZED_NAME_RECORD_NEW_ONLY)
  private Boolean recordNewOnly;

  public static final String SERIALIZED_NAME_SERVER_ID = "ServerId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  private String serverId;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SKIP_EPISODES_IN_LIBRARY = "SkipEpisodesInLibrary";
  @SerializedName(SERIALIZED_NAME_SKIP_EPISODES_IN_LIBRARY)
  private Boolean skipEpisodesInLibrary;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SeriesTimerInfoDto() {
  }

  public SeriesTimerInfoDto channelId(UUID channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * ChannelId of the recording.
   * @return channelId
   */
  @javax.annotation.Nullable
  public UUID getChannelId() {
    return channelId;
  }

  public void setChannelId(UUID channelId) {
    this.channelId = channelId;
  }


  public SeriesTimerInfoDto channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * ChannelName of the recording.
   * @return channelName
   */
  @javax.annotation.Nullable
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public SeriesTimerInfoDto channelPrimaryImageTag(String channelPrimaryImageTag) {
    this.channelPrimaryImageTag = channelPrimaryImageTag;
    return this;
  }

  /**
   * Get channelPrimaryImageTag
   * @return channelPrimaryImageTag
   */
  @javax.annotation.Nullable
  public String getChannelPrimaryImageTag() {
    return channelPrimaryImageTag;
  }

  public void setChannelPrimaryImageTag(String channelPrimaryImageTag) {
    this.channelPrimaryImageTag = channelPrimaryImageTag;
  }


  public SeriesTimerInfoDto dayPattern(DayPattern dayPattern) {
    this.dayPattern = dayPattern;
    return this;
  }

  /**
   * Get dayPattern
   * @return dayPattern
   */
  @javax.annotation.Nullable
  public DayPattern getDayPattern() {
    return dayPattern;
  }

  public void setDayPattern(DayPattern dayPattern) {
    this.dayPattern = dayPattern;
  }


  public SeriesTimerInfoDto days(List<DayOfWeek> days) {
    this.days = days;
    return this;
  }

  public SeriesTimerInfoDto addDaysItem(DayOfWeek daysItem) {
    if (this.days == null) {
      this.days = new ArrayList<>();
    }
    this.days.add(daysItem);
    return this;
  }

  /**
   * Gets or sets the days.
   * @return days
   */
  @javax.annotation.Nullable
  public List<DayOfWeek> getDays() {
    return days;
  }

  public void setDays(List<DayOfWeek> days) {
    this.days = days;
  }


  public SeriesTimerInfoDto endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The end date of the recording, in UTC.
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public SeriesTimerInfoDto externalChannelId(String externalChannelId) {
    this.externalChannelId = externalChannelId;
    return this;
  }

  /**
   * Gets or sets the external channel identifier.
   * @return externalChannelId
   */
  @javax.annotation.Nullable
  public String getExternalChannelId() {
    return externalChannelId;
  }

  public void setExternalChannelId(String externalChannelId) {
    this.externalChannelId = externalChannelId;
  }


  public SeriesTimerInfoDto externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Gets or sets the external identifier.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public SeriesTimerInfoDto externalProgramId(String externalProgramId) {
    this.externalProgramId = externalProgramId;
    return this;
  }

  /**
   * Gets or sets the external program identifier.
   * @return externalProgramId
   */
  @javax.annotation.Nullable
  public String getExternalProgramId() {
    return externalProgramId;
  }

  public void setExternalProgramId(String externalProgramId) {
    this.externalProgramId = externalProgramId;
  }


  public SeriesTimerInfoDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the recording.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SeriesTimerInfoDto imageTags(Map<String, String> imageTags) {
    this.imageTags = imageTags;
    return this;
  }

  public SeriesTimerInfoDto putImageTagsItem(String key, String imageTagsItem) {
    if (this.imageTags == null) {
      this.imageTags = new HashMap<>();
    }
    this.imageTags.put(key, imageTagsItem);
    return this;
  }

  /**
   * Gets or sets the image tags.
   * @return imageTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getImageTags() {
    return imageTags;
  }

  public void setImageTags(Map<String, String> imageTags) {
    this.imageTags = imageTags;
  }


  public SeriesTimerInfoDto isPostPaddingRequired(Boolean isPostPaddingRequired) {
    this.isPostPaddingRequired = isPostPaddingRequired;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is post padding required.
   * @return isPostPaddingRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsPostPaddingRequired() {
    return isPostPaddingRequired;
  }

  public void setIsPostPaddingRequired(Boolean isPostPaddingRequired) {
    this.isPostPaddingRequired = isPostPaddingRequired;
  }


  public SeriesTimerInfoDto isPrePaddingRequired(Boolean isPrePaddingRequired) {
    this.isPrePaddingRequired = isPrePaddingRequired;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is pre padding required.
   * @return isPrePaddingRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsPrePaddingRequired() {
    return isPrePaddingRequired;
  }

  public void setIsPrePaddingRequired(Boolean isPrePaddingRequired) {
    this.isPrePaddingRequired = isPrePaddingRequired;
  }


  public SeriesTimerInfoDto keepUntil(KeepUntil keepUntil) {
    this.keepUntil = keepUntil;
    return this;
  }

  /**
   * Get keepUntil
   * @return keepUntil
   */
  @javax.annotation.Nullable
  public KeepUntil getKeepUntil() {
    return keepUntil;
  }

  public void setKeepUntil(KeepUntil keepUntil) {
    this.keepUntil = keepUntil;
  }


  public SeriesTimerInfoDto keepUpTo(Integer keepUpTo) {
    this.keepUpTo = keepUpTo;
    return this;
  }

  /**
   * Get keepUpTo
   * @return keepUpTo
   */
  @javax.annotation.Nullable
  public Integer getKeepUpTo() {
    return keepUpTo;
  }

  public void setKeepUpTo(Integer keepUpTo) {
    this.keepUpTo = keepUpTo;
  }


  public SeriesTimerInfoDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the recording.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SeriesTimerInfoDto overview(String overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Description of the recording.
   * @return overview
   */
  @javax.annotation.Nullable
  public String getOverview() {
    return overview;
  }

  public void setOverview(String overview) {
    this.overview = overview;
  }


  public SeriesTimerInfoDto parentBackdropImageTags(List<String> parentBackdropImageTags) {
    this.parentBackdropImageTags = parentBackdropImageTags;
    return this;
  }

  public SeriesTimerInfoDto addParentBackdropImageTagsItem(String parentBackdropImageTagsItem) {
    if (this.parentBackdropImageTags == null) {
      this.parentBackdropImageTags = new ArrayList<>();
    }
    this.parentBackdropImageTags.add(parentBackdropImageTagsItem);
    return this;
  }

  /**
   * Gets or sets the parent backdrop image tags.
   * @return parentBackdropImageTags
   */
  @javax.annotation.Nullable
  public List<String> getParentBackdropImageTags() {
    return parentBackdropImageTags;
  }

  public void setParentBackdropImageTags(List<String> parentBackdropImageTags) {
    this.parentBackdropImageTags = parentBackdropImageTags;
  }


  public SeriesTimerInfoDto parentBackdropItemId(String parentBackdropItemId) {
    this.parentBackdropItemId = parentBackdropItemId;
    return this;
  }

  /**
   * If the item does not have any backdrops, this will hold the Id of the Parent that has one.
   * @return parentBackdropItemId
   */
  @javax.annotation.Nullable
  public String getParentBackdropItemId() {
    return parentBackdropItemId;
  }

  public void setParentBackdropItemId(String parentBackdropItemId) {
    this.parentBackdropItemId = parentBackdropItemId;
  }


  public SeriesTimerInfoDto parentPrimaryImageItemId(String parentPrimaryImageItemId) {
    this.parentPrimaryImageItemId = parentPrimaryImageItemId;
    return this;
  }

  /**
   * Gets or sets the parent primary image item identifier.
   * @return parentPrimaryImageItemId
   */
  @javax.annotation.Nullable
  public String getParentPrimaryImageItemId() {
    return parentPrimaryImageItemId;
  }

  public void setParentPrimaryImageItemId(String parentPrimaryImageItemId) {
    this.parentPrimaryImageItemId = parentPrimaryImageItemId;
  }


  public SeriesTimerInfoDto parentPrimaryImageTag(String parentPrimaryImageTag) {
    this.parentPrimaryImageTag = parentPrimaryImageTag;
    return this;
  }

  /**
   * Gets or sets the parent primary image tag.
   * @return parentPrimaryImageTag
   */
  @javax.annotation.Nullable
  public String getParentPrimaryImageTag() {
    return parentPrimaryImageTag;
  }

  public void setParentPrimaryImageTag(String parentPrimaryImageTag) {
    this.parentPrimaryImageTag = parentPrimaryImageTag;
  }


  public SeriesTimerInfoDto parentThumbImageTag(String parentThumbImageTag) {
    this.parentThumbImageTag = parentThumbImageTag;
    return this;
  }

  /**
   * Gets or sets the parent thumb image tag.
   * @return parentThumbImageTag
   */
  @javax.annotation.Nullable
  public String getParentThumbImageTag() {
    return parentThumbImageTag;
  }

  public void setParentThumbImageTag(String parentThumbImageTag) {
    this.parentThumbImageTag = parentThumbImageTag;
  }


  public SeriesTimerInfoDto parentThumbItemId(String parentThumbItemId) {
    this.parentThumbItemId = parentThumbItemId;
    return this;
  }

  /**
   * Gets or sets the parent thumb item id.
   * @return parentThumbItemId
   */
  @javax.annotation.Nullable
  public String getParentThumbItemId() {
    return parentThumbItemId;
  }

  public void setParentThumbItemId(String parentThumbItemId) {
    this.parentThumbItemId = parentThumbItemId;
  }


  public SeriesTimerInfoDto postPaddingSeconds(Integer postPaddingSeconds) {
    this.postPaddingSeconds = postPaddingSeconds;
    return this;
  }

  /**
   * Gets or sets the post padding seconds.
   * @return postPaddingSeconds
   */
  @javax.annotation.Nullable
  public Integer getPostPaddingSeconds() {
    return postPaddingSeconds;
  }

  public void setPostPaddingSeconds(Integer postPaddingSeconds) {
    this.postPaddingSeconds = postPaddingSeconds;
  }


  public SeriesTimerInfoDto prePaddingSeconds(Integer prePaddingSeconds) {
    this.prePaddingSeconds = prePaddingSeconds;
    return this;
  }

  /**
   * Gets or sets the pre padding seconds.
   * @return prePaddingSeconds
   */
  @javax.annotation.Nullable
  public Integer getPrePaddingSeconds() {
    return prePaddingSeconds;
  }

  public void setPrePaddingSeconds(Integer prePaddingSeconds) {
    this.prePaddingSeconds = prePaddingSeconds;
  }


  public SeriesTimerInfoDto priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Gets or sets the priority.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public SeriesTimerInfoDto programId(String programId) {
    this.programId = programId;
    return this;
  }

  /**
   * Gets or sets the program identifier.
   * @return programId
   */
  @javax.annotation.Nullable
  public String getProgramId() {
    return programId;
  }

  public void setProgramId(String programId) {
    this.programId = programId;
  }


  public SeriesTimerInfoDto recordAnyChannel(Boolean recordAnyChannel) {
    this.recordAnyChannel = recordAnyChannel;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [record any channel].
   * @return recordAnyChannel
   */
  @javax.annotation.Nullable
  public Boolean getRecordAnyChannel() {
    return recordAnyChannel;
  }

  public void setRecordAnyChannel(Boolean recordAnyChannel) {
    this.recordAnyChannel = recordAnyChannel;
  }


  public SeriesTimerInfoDto recordAnyTime(Boolean recordAnyTime) {
    this.recordAnyTime = recordAnyTime;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [record any time].
   * @return recordAnyTime
   */
  @javax.annotation.Nullable
  public Boolean getRecordAnyTime() {
    return recordAnyTime;
  }

  public void setRecordAnyTime(Boolean recordAnyTime) {
    this.recordAnyTime = recordAnyTime;
  }


  public SeriesTimerInfoDto recordNewOnly(Boolean recordNewOnly) {
    this.recordNewOnly = recordNewOnly;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [record new only].
   * @return recordNewOnly
   */
  @javax.annotation.Nullable
  public Boolean getRecordNewOnly() {
    return recordNewOnly;
  }

  public void setRecordNewOnly(Boolean recordNewOnly) {
    this.recordNewOnly = recordNewOnly;
  }


  public SeriesTimerInfoDto serverId(String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   * Gets or sets the server identifier.
   * @return serverId
   */
  @javax.annotation.Nullable
  public String getServerId() {
    return serverId;
  }

  public void setServerId(String serverId) {
    this.serverId = serverId;
  }


  public SeriesTimerInfoDto serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Gets or sets the name of the service.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public SeriesTimerInfoDto skipEpisodesInLibrary(Boolean skipEpisodesInLibrary) {
    this.skipEpisodesInLibrary = skipEpisodesInLibrary;
    return this;
  }

  /**
   * Get skipEpisodesInLibrary
   * @return skipEpisodesInLibrary
   */
  @javax.annotation.Nullable
  public Boolean getSkipEpisodesInLibrary() {
    return skipEpisodesInLibrary;
  }

  public void setSkipEpisodesInLibrary(Boolean skipEpisodesInLibrary) {
    this.skipEpisodesInLibrary = skipEpisodesInLibrary;
  }


  public SeriesTimerInfoDto startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date of the recording, in UTC.
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public SeriesTimerInfoDto type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeriesTimerInfoDto seriesTimerInfoDto = (SeriesTimerInfoDto) o;
    return Objects.equals(this.channelId, seriesTimerInfoDto.channelId) &&
        Objects.equals(this.channelName, seriesTimerInfoDto.channelName) &&
        Objects.equals(this.channelPrimaryImageTag, seriesTimerInfoDto.channelPrimaryImageTag) &&
        Objects.equals(this.dayPattern, seriesTimerInfoDto.dayPattern) &&
        Objects.equals(this.days, seriesTimerInfoDto.days) &&
        Objects.equals(this.endDate, seriesTimerInfoDto.endDate) &&
        Objects.equals(this.externalChannelId, seriesTimerInfoDto.externalChannelId) &&
        Objects.equals(this.externalId, seriesTimerInfoDto.externalId) &&
        Objects.equals(this.externalProgramId, seriesTimerInfoDto.externalProgramId) &&
        Objects.equals(this.id, seriesTimerInfoDto.id) &&
        Objects.equals(this.imageTags, seriesTimerInfoDto.imageTags) &&
        Objects.equals(this.isPostPaddingRequired, seriesTimerInfoDto.isPostPaddingRequired) &&
        Objects.equals(this.isPrePaddingRequired, seriesTimerInfoDto.isPrePaddingRequired) &&
        Objects.equals(this.keepUntil, seriesTimerInfoDto.keepUntil) &&
        Objects.equals(this.keepUpTo, seriesTimerInfoDto.keepUpTo) &&
        Objects.equals(this.name, seriesTimerInfoDto.name) &&
        Objects.equals(this.overview, seriesTimerInfoDto.overview) &&
        Objects.equals(this.parentBackdropImageTags, seriesTimerInfoDto.parentBackdropImageTags) &&
        Objects.equals(this.parentBackdropItemId, seriesTimerInfoDto.parentBackdropItemId) &&
        Objects.equals(this.parentPrimaryImageItemId, seriesTimerInfoDto.parentPrimaryImageItemId) &&
        Objects.equals(this.parentPrimaryImageTag, seriesTimerInfoDto.parentPrimaryImageTag) &&
        Objects.equals(this.parentThumbImageTag, seriesTimerInfoDto.parentThumbImageTag) &&
        Objects.equals(this.parentThumbItemId, seriesTimerInfoDto.parentThumbItemId) &&
        Objects.equals(this.postPaddingSeconds, seriesTimerInfoDto.postPaddingSeconds) &&
        Objects.equals(this.prePaddingSeconds, seriesTimerInfoDto.prePaddingSeconds) &&
        Objects.equals(this.priority, seriesTimerInfoDto.priority) &&
        Objects.equals(this.programId, seriesTimerInfoDto.programId) &&
        Objects.equals(this.recordAnyChannel, seriesTimerInfoDto.recordAnyChannel) &&
        Objects.equals(this.recordAnyTime, seriesTimerInfoDto.recordAnyTime) &&
        Objects.equals(this.recordNewOnly, seriesTimerInfoDto.recordNewOnly) &&
        Objects.equals(this.serverId, seriesTimerInfoDto.serverId) &&
        Objects.equals(this.serviceName, seriesTimerInfoDto.serviceName) &&
        Objects.equals(this.skipEpisodesInLibrary, seriesTimerInfoDto.skipEpisodesInLibrary) &&
        Objects.equals(this.startDate, seriesTimerInfoDto.startDate) &&
        Objects.equals(this.type, seriesTimerInfoDto.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, channelName, channelPrimaryImageTag, dayPattern, days, endDate, externalChannelId, externalId, externalProgramId, id, imageTags, isPostPaddingRequired, isPrePaddingRequired, keepUntil, keepUpTo, name, overview, parentBackdropImageTags, parentBackdropItemId, parentPrimaryImageItemId, parentPrimaryImageTag, parentThumbImageTag, parentThumbItemId, postPaddingSeconds, prePaddingSeconds, priority, programId, recordAnyChannel, recordAnyTime, recordNewOnly, serverId, serviceName, skipEpisodesInLibrary, startDate, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeriesTimerInfoDto {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    channelPrimaryImageTag: ").append(toIndentedString(channelPrimaryImageTag)).append("\n");
    sb.append("    dayPattern: ").append(toIndentedString(dayPattern)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    externalChannelId: ").append(toIndentedString(externalChannelId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    externalProgramId: ").append(toIndentedString(externalProgramId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageTags: ").append(toIndentedString(imageTags)).append("\n");
    sb.append("    isPostPaddingRequired: ").append(toIndentedString(isPostPaddingRequired)).append("\n");
    sb.append("    isPrePaddingRequired: ").append(toIndentedString(isPrePaddingRequired)).append("\n");
    sb.append("    keepUntil: ").append(toIndentedString(keepUntil)).append("\n");
    sb.append("    keepUpTo: ").append(toIndentedString(keepUpTo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    parentBackdropImageTags: ").append(toIndentedString(parentBackdropImageTags)).append("\n");
    sb.append("    parentBackdropItemId: ").append(toIndentedString(parentBackdropItemId)).append("\n");
    sb.append("    parentPrimaryImageItemId: ").append(toIndentedString(parentPrimaryImageItemId)).append("\n");
    sb.append("    parentPrimaryImageTag: ").append(toIndentedString(parentPrimaryImageTag)).append("\n");
    sb.append("    parentThumbImageTag: ").append(toIndentedString(parentThumbImageTag)).append("\n");
    sb.append("    parentThumbItemId: ").append(toIndentedString(parentThumbItemId)).append("\n");
    sb.append("    postPaddingSeconds: ").append(toIndentedString(postPaddingSeconds)).append("\n");
    sb.append("    prePaddingSeconds: ").append(toIndentedString(prePaddingSeconds)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("    recordAnyChannel: ").append(toIndentedString(recordAnyChannel)).append("\n");
    sb.append("    recordAnyTime: ").append(toIndentedString(recordAnyTime)).append("\n");
    sb.append("    recordNewOnly: ").append(toIndentedString(recordNewOnly)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    skipEpisodesInLibrary: ").append(toIndentedString(skipEpisodesInLibrary)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelId");
    openapiFields.add("ChannelName");
    openapiFields.add("ChannelPrimaryImageTag");
    openapiFields.add("DayPattern");
    openapiFields.add("Days");
    openapiFields.add("EndDate");
    openapiFields.add("ExternalChannelId");
    openapiFields.add("ExternalId");
    openapiFields.add("ExternalProgramId");
    openapiFields.add("Id");
    openapiFields.add("ImageTags");
    openapiFields.add("IsPostPaddingRequired");
    openapiFields.add("IsPrePaddingRequired");
    openapiFields.add("KeepUntil");
    openapiFields.add("KeepUpTo");
    openapiFields.add("Name");
    openapiFields.add("Overview");
    openapiFields.add("ParentBackdropImageTags");
    openapiFields.add("ParentBackdropItemId");
    openapiFields.add("ParentPrimaryImageItemId");
    openapiFields.add("ParentPrimaryImageTag");
    openapiFields.add("ParentThumbImageTag");
    openapiFields.add("ParentThumbItemId");
    openapiFields.add("PostPaddingSeconds");
    openapiFields.add("PrePaddingSeconds");
    openapiFields.add("Priority");
    openapiFields.add("ProgramId");
    openapiFields.add("RecordAnyChannel");
    openapiFields.add("RecordAnyTime");
    openapiFields.add("RecordNewOnly");
    openapiFields.add("ServerId");
    openapiFields.add("ServiceName");
    openapiFields.add("SkipEpisodesInLibrary");
    openapiFields.add("StartDate");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SeriesTimerInfoDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SeriesTimerInfoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeriesTimerInfoDto is not found in the empty JSON string", SeriesTimerInfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SeriesTimerInfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SeriesTimerInfoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ChannelId") != null && !jsonObj.get("ChannelId").isJsonNull()) && !jsonObj.get("ChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelId").toString()));
      }
      if ((jsonObj.get("ChannelName") != null && !jsonObj.get("ChannelName").isJsonNull()) && !jsonObj.get("ChannelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelName").toString()));
      }
      if ((jsonObj.get("ChannelPrimaryImageTag") != null && !jsonObj.get("ChannelPrimaryImageTag").isJsonNull()) && !jsonObj.get("ChannelPrimaryImageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelPrimaryImageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelPrimaryImageTag").toString()));
      }
      // validate the optional field `DayPattern`
      if (jsonObj.get("DayPattern") != null && !jsonObj.get("DayPattern").isJsonNull()) {
        DayPattern.validateJsonElement(jsonObj.get("DayPattern"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Days") != null && !jsonObj.get("Days").isJsonNull() && !jsonObj.get("Days").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Days` to be an array in the JSON string but got `%s`", jsonObj.get("Days").toString()));
      }
      if ((jsonObj.get("ExternalChannelId") != null && !jsonObj.get("ExternalChannelId").isJsonNull()) && !jsonObj.get("ExternalChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExternalChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExternalChannelId").toString()));
      }
      if ((jsonObj.get("ExternalId") != null && !jsonObj.get("ExternalId").isJsonNull()) && !jsonObj.get("ExternalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExternalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExternalId").toString()));
      }
      if ((jsonObj.get("ExternalProgramId") != null && !jsonObj.get("ExternalProgramId").isJsonNull()) && !jsonObj.get("ExternalProgramId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExternalProgramId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExternalProgramId").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `KeepUntil`
      if (jsonObj.get("KeepUntil") != null && !jsonObj.get("KeepUntil").isJsonNull()) {
        KeepUntil.validateJsonElement(jsonObj.get("KeepUntil"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Overview") != null && !jsonObj.get("Overview").isJsonNull()) && !jsonObj.get("Overview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Overview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Overview").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ParentBackdropImageTags") != null && !jsonObj.get("ParentBackdropImageTags").isJsonNull() && !jsonObj.get("ParentBackdropImageTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentBackdropImageTags` to be an array in the JSON string but got `%s`", jsonObj.get("ParentBackdropImageTags").toString()));
      }
      if ((jsonObj.get("ParentBackdropItemId") != null && !jsonObj.get("ParentBackdropItemId").isJsonNull()) && !jsonObj.get("ParentBackdropItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentBackdropItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentBackdropItemId").toString()));
      }
      if ((jsonObj.get("ParentPrimaryImageItemId") != null && !jsonObj.get("ParentPrimaryImageItemId").isJsonNull()) && !jsonObj.get("ParentPrimaryImageItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentPrimaryImageItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentPrimaryImageItemId").toString()));
      }
      if ((jsonObj.get("ParentPrimaryImageTag") != null && !jsonObj.get("ParentPrimaryImageTag").isJsonNull()) && !jsonObj.get("ParentPrimaryImageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentPrimaryImageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentPrimaryImageTag").toString()));
      }
      if ((jsonObj.get("ParentThumbImageTag") != null && !jsonObj.get("ParentThumbImageTag").isJsonNull()) && !jsonObj.get("ParentThumbImageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentThumbImageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentThumbImageTag").toString()));
      }
      if ((jsonObj.get("ParentThumbItemId") != null && !jsonObj.get("ParentThumbItemId").isJsonNull()) && !jsonObj.get("ParentThumbItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentThumbItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentThumbItemId").toString()));
      }
      if ((jsonObj.get("ProgramId") != null && !jsonObj.get("ProgramId").isJsonNull()) && !jsonObj.get("ProgramId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProgramId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProgramId").toString()));
      }
      if ((jsonObj.get("ServerId") != null && !jsonObj.get("ServerId").isJsonNull()) && !jsonObj.get("ServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerId").toString()));
      }
      if ((jsonObj.get("ServiceName") != null && !jsonObj.get("ServiceName").isJsonNull()) && !jsonObj.get("ServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceName").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeriesTimerInfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeriesTimerInfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeriesTimerInfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeriesTimerInfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SeriesTimerInfoDto>() {
           @Override
           public void write(JsonWriter out, SeriesTimerInfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SeriesTimerInfoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SeriesTimerInfoDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SeriesTimerInfoDto
   * @throws IOException if the JSON string is invalid with respect to SeriesTimerInfoDto
   */
  public static SeriesTimerInfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeriesTimerInfoDto.class);
  }

  /**
   * Convert an instance of SeriesTimerInfoDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

