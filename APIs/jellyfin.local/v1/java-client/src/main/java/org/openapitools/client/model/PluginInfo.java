/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.PluginStatus;
import org.openapitools.client.model.Version;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is a serializable stub class that is used by the api to provide information about installed plugins.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PluginInfo {
  public static final String SERIALIZED_NAME_CAN_UNINSTALL = "CanUninstall";
  @SerializedName(SERIALIZED_NAME_CAN_UNINSTALL)
  private Boolean canUninstall;

  public static final String SERIALIZED_NAME_CONFIGURATION_FILE_NAME = "ConfigurationFileName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_FILE_NAME)
  private String configurationFileName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HAS_IMAGE = "HasImage";
  @SerializedName(SERIALIZED_NAME_HAS_IMAGE)
  private Boolean hasImage;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PluginStatus status;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Version version;

  public PluginInfo() {
  }

  public PluginInfo canUninstall(Boolean canUninstall) {
    this.canUninstall = canUninstall;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the plugin can be uninstalled.
   * @return canUninstall
   */
  @javax.annotation.Nullable
  public Boolean getCanUninstall() {
    return canUninstall;
  }

  public void setCanUninstall(Boolean canUninstall) {
    this.canUninstall = canUninstall;
  }


  public PluginInfo configurationFileName(String configurationFileName) {
    this.configurationFileName = configurationFileName;
    return this;
  }

  /**
   * Gets or sets the name of the configuration file.
   * @return configurationFileName
   */
  @javax.annotation.Nullable
  public String getConfigurationFileName() {
    return configurationFileName;
  }

  public void setConfigurationFileName(String configurationFileName) {
    this.configurationFileName = configurationFileName;
  }


  public PluginInfo description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PluginInfo hasImage(Boolean hasImage) {
    this.hasImage = hasImage;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this plugin has a valid image.
   * @return hasImage
   */
  @javax.annotation.Nullable
  public Boolean getHasImage() {
    return hasImage;
  }

  public void setHasImage(Boolean hasImage) {
    this.hasImage = hasImage;
  }


  public PluginInfo id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the unique id.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public PluginInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PluginInfo status(PluginStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public PluginStatus getStatus() {
    return status;
  }

  public void setStatus(PluginStatus status) {
    this.status = status;
  }


  public PluginInfo version(Version version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Version getVersion() {
    return version;
  }

  public void setVersion(Version version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginInfo pluginInfo = (PluginInfo) o;
    return Objects.equals(this.canUninstall, pluginInfo.canUninstall) &&
        Objects.equals(this.configurationFileName, pluginInfo.configurationFileName) &&
        Objects.equals(this.description, pluginInfo.description) &&
        Objects.equals(this.hasImage, pluginInfo.hasImage) &&
        Objects.equals(this.id, pluginInfo.id) &&
        Objects.equals(this.name, pluginInfo.name) &&
        Objects.equals(this.status, pluginInfo.status) &&
        Objects.equals(this.version, pluginInfo.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(canUninstall, configurationFileName, description, hasImage, id, name, status, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginInfo {\n");
    sb.append("    canUninstall: ").append(toIndentedString(canUninstall)).append("\n");
    sb.append("    configurationFileName: ").append(toIndentedString(configurationFileName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hasImage: ").append(toIndentedString(hasImage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CanUninstall");
    openapiFields.add("ConfigurationFileName");
    openapiFields.add("Description");
    openapiFields.add("HasImage");
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("Status");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PluginInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PluginInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PluginInfo is not found in the empty JSON string", PluginInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PluginInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PluginInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ConfigurationFileName") != null && !jsonObj.get("ConfigurationFileName").isJsonNull()) && !jsonObj.get("ConfigurationFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigurationFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigurationFileName").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        PluginStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("Version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PluginInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PluginInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PluginInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PluginInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PluginInfo>() {
           @Override
           public void write(JsonWriter out, PluginInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PluginInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PluginInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PluginInfo
   * @throws IOException if the JSON string is invalid with respect to PluginInfo
   */
  public static PluginInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PluginInfo.class);
  }

  /**
   * Convert an instance of PluginInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

