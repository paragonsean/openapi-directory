/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TaskResult;
import org.openapitools.client.model.TaskState;
import org.openapitools.client.model.TaskTriggerInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class TaskInfo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskInfo {
  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CURRENT_PROGRESS_PERCENTAGE = "CurrentProgressPercentage";
  @SerializedName(SERIALIZED_NAME_CURRENT_PROGRESS_PERCENTAGE)
  private Double currentProgressPercentage;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_HIDDEN = "IsHidden";
  @SerializedName(SERIALIZED_NAME_IS_HIDDEN)
  private Boolean isHidden;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_RESULT = "LastExecutionResult";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_RESULT)
  private TaskResult lastExecutionResult;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private TaskState state;

  public static final String SERIALIZED_NAME_TRIGGERS = "Triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private List<TaskTriggerInfo> triggers;

  public TaskInfo() {
  }

  public TaskInfo category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Gets or sets the category.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public TaskInfo currentProgressPercentage(Double currentProgressPercentage) {
    this.currentProgressPercentage = currentProgressPercentage;
    return this;
  }

  /**
   * Gets or sets the progress.
   * @return currentProgressPercentage
   */
  @javax.annotation.Nullable
  public Double getCurrentProgressPercentage() {
    return currentProgressPercentage;
  }

  public void setCurrentProgressPercentage(Double currentProgressPercentage) {
    this.currentProgressPercentage = currentProgressPercentage;
  }


  public TaskInfo description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TaskInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TaskInfo isHidden(Boolean isHidden) {
    this.isHidden = isHidden;
    return this;
  }

  /**
   * Gets or sets a value indicating whether this instance is hidden.
   * @return isHidden
   */
  @javax.annotation.Nullable
  public Boolean getIsHidden() {
    return isHidden;
  }

  public void setIsHidden(Boolean isHidden) {
    this.isHidden = isHidden;
  }


  public TaskInfo key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Gets or sets the key.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public TaskInfo lastExecutionResult(TaskResult lastExecutionResult) {
    this.lastExecutionResult = lastExecutionResult;
    return this;
  }

  /**
   * Get lastExecutionResult
   * @return lastExecutionResult
   */
  @javax.annotation.Nullable
  public TaskResult getLastExecutionResult() {
    return lastExecutionResult;
  }

  public void setLastExecutionResult(TaskResult lastExecutionResult) {
    this.lastExecutionResult = lastExecutionResult;
  }


  public TaskInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TaskInfo state(TaskState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public TaskState getState() {
    return state;
  }

  public void setState(TaskState state) {
    this.state = state;
  }


  public TaskInfo triggers(List<TaskTriggerInfo> triggers) {
    this.triggers = triggers;
    return this;
  }

  public TaskInfo addTriggersItem(TaskTriggerInfo triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

  /**
   * Gets or sets the triggers.
   * @return triggers
   */
  @javax.annotation.Nullable
  public List<TaskTriggerInfo> getTriggers() {
    return triggers;
  }

  public void setTriggers(List<TaskTriggerInfo> triggers) {
    this.triggers = triggers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskInfo taskInfo = (TaskInfo) o;
    return Objects.equals(this.category, taskInfo.category) &&
        Objects.equals(this.currentProgressPercentage, taskInfo.currentProgressPercentage) &&
        Objects.equals(this.description, taskInfo.description) &&
        Objects.equals(this.id, taskInfo.id) &&
        Objects.equals(this.isHidden, taskInfo.isHidden) &&
        Objects.equals(this.key, taskInfo.key) &&
        Objects.equals(this.lastExecutionResult, taskInfo.lastExecutionResult) &&
        Objects.equals(this.name, taskInfo.name) &&
        Objects.equals(this.state, taskInfo.state) &&
        Objects.equals(this.triggers, taskInfo.triggers);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, currentProgressPercentage, description, id, isHidden, key, lastExecutionResult, name, state, triggers);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskInfo {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    currentProgressPercentage: ").append(toIndentedString(currentProgressPercentage)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isHidden: ").append(toIndentedString(isHidden)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lastExecutionResult: ").append(toIndentedString(lastExecutionResult)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Category");
    openapiFields.add("CurrentProgressPercentage");
    openapiFields.add("Description");
    openapiFields.add("Id");
    openapiFields.add("IsHidden");
    openapiFields.add("Key");
    openapiFields.add("LastExecutionResult");
    openapiFields.add("Name");
    openapiFields.add("State");
    openapiFields.add("Triggers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskInfo is not found in the empty JSON string", TaskInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("Key") != null && !jsonObj.get("Key").isJsonNull()) && !jsonObj.get("Key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Key").toString()));
      }
      // validate the optional field `LastExecutionResult`
      if (jsonObj.get("LastExecutionResult") != null && !jsonObj.get("LastExecutionResult").isJsonNull()) {
        TaskResult.validateJsonElement(jsonObj.get("LastExecutionResult"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        TaskState.validateJsonElement(jsonObj.get("State"));
      }
      if (jsonObj.get("Triggers") != null && !jsonObj.get("Triggers").isJsonNull()) {
        JsonArray jsonArraytriggers = jsonObj.getAsJsonArray("Triggers");
        if (jsonArraytriggers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Triggers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Triggers` to be an array in the JSON string but got `%s`", jsonObj.get("Triggers").toString()));
          }

          // validate the optional field `Triggers` (array)
          for (int i = 0; i < jsonArraytriggers.size(); i++) {
            TaskTriggerInfo.validateJsonElement(jsonArraytriggers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskInfo>() {
           @Override
           public void write(JsonWriter out, TaskInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskInfo
   * @throws IOException if the JSON string is invalid with respect to TaskInfo
   */
  public static TaskInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskInfo.class);
  }

  /**
   * Convert an instance of TaskInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

