/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ScrollDirection;
import org.openapitools.client.model.SortOrder;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the display preferences for any item that supports them (usually Folders).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisplayPreferencesDto {
  public static final String SERIALIZED_NAME_CLIENT = "Client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  public static final String SERIALIZED_NAME_CUSTOM_PREFS = "CustomPrefs";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PREFS)
  private Map<String, String> customPrefs;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDEX_BY = "IndexBy";
  @SerializedName(SERIALIZED_NAME_INDEX_BY)
  private String indexBy;

  public static final String SERIALIZED_NAME_PRIMARY_IMAGE_HEIGHT = "PrimaryImageHeight";
  @SerializedName(SERIALIZED_NAME_PRIMARY_IMAGE_HEIGHT)
  private Integer primaryImageHeight;

  public static final String SERIALIZED_NAME_PRIMARY_IMAGE_WIDTH = "PrimaryImageWidth";
  @SerializedName(SERIALIZED_NAME_PRIMARY_IMAGE_WIDTH)
  private Integer primaryImageWidth;

  public static final String SERIALIZED_NAME_REMEMBER_INDEXING = "RememberIndexing";
  @SerializedName(SERIALIZED_NAME_REMEMBER_INDEXING)
  private Boolean rememberIndexing;

  public static final String SERIALIZED_NAME_REMEMBER_SORTING = "RememberSorting";
  @SerializedName(SERIALIZED_NAME_REMEMBER_SORTING)
  private Boolean rememberSorting;

  public static final String SERIALIZED_NAME_SCROLL_DIRECTION = "ScrollDirection";
  @SerializedName(SERIALIZED_NAME_SCROLL_DIRECTION)
  private ScrollDirection scrollDirection;

  public static final String SERIALIZED_NAME_SHOW_BACKDROP = "ShowBackdrop";
  @SerializedName(SERIALIZED_NAME_SHOW_BACKDROP)
  private Boolean showBackdrop;

  public static final String SERIALIZED_NAME_SHOW_SIDEBAR = "ShowSidebar";
  @SerializedName(SERIALIZED_NAME_SHOW_SIDEBAR)
  private Boolean showSidebar;

  public static final String SERIALIZED_NAME_SORT_BY = "SortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private String sortBy;

  public static final String SERIALIZED_NAME_SORT_ORDER = "SortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private SortOrder sortOrder;

  public static final String SERIALIZED_NAME_VIEW_TYPE = "ViewType";
  @SerializedName(SERIALIZED_NAME_VIEW_TYPE)
  private String viewType;

  public DisplayPreferencesDto() {
  }

  public DisplayPreferencesDto client(String client) {
    this.client = client;
    return this;
  }

  /**
   * Gets or sets the client.
   * @return client
   */
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }

  public void setClient(String client) {
    this.client = client;
  }


  public DisplayPreferencesDto customPrefs(Map<String, String> customPrefs) {
    this.customPrefs = customPrefs;
    return this;
  }

  public DisplayPreferencesDto putCustomPrefsItem(String key, String customPrefsItem) {
    if (this.customPrefs == null) {
      this.customPrefs = new HashMap<>();
    }
    this.customPrefs.put(key, customPrefsItem);
    return this;
  }

  /**
   * Gets or sets the custom prefs.
   * @return customPrefs
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomPrefs() {
    return customPrefs;
  }

  public void setCustomPrefs(Map<String, String> customPrefs) {
    this.customPrefs = customPrefs;
  }


  public DisplayPreferencesDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the user id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DisplayPreferencesDto indexBy(String indexBy) {
    this.indexBy = indexBy;
    return this;
  }

  /**
   * Gets or sets the index by.
   * @return indexBy
   */
  @javax.annotation.Nullable
  public String getIndexBy() {
    return indexBy;
  }

  public void setIndexBy(String indexBy) {
    this.indexBy = indexBy;
  }


  public DisplayPreferencesDto primaryImageHeight(Integer primaryImageHeight) {
    this.primaryImageHeight = primaryImageHeight;
    return this;
  }

  /**
   * Gets or sets the height of the primary image.
   * @return primaryImageHeight
   */
  @javax.annotation.Nullable
  public Integer getPrimaryImageHeight() {
    return primaryImageHeight;
  }

  public void setPrimaryImageHeight(Integer primaryImageHeight) {
    this.primaryImageHeight = primaryImageHeight;
  }


  public DisplayPreferencesDto primaryImageWidth(Integer primaryImageWidth) {
    this.primaryImageWidth = primaryImageWidth;
    return this;
  }

  /**
   * Gets or sets the width of the primary image.
   * @return primaryImageWidth
   */
  @javax.annotation.Nullable
  public Integer getPrimaryImageWidth() {
    return primaryImageWidth;
  }

  public void setPrimaryImageWidth(Integer primaryImageWidth) {
    this.primaryImageWidth = primaryImageWidth;
  }


  public DisplayPreferencesDto rememberIndexing(Boolean rememberIndexing) {
    this.rememberIndexing = rememberIndexing;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [remember indexing].
   * @return rememberIndexing
   */
  @javax.annotation.Nullable
  public Boolean getRememberIndexing() {
    return rememberIndexing;
  }

  public void setRememberIndexing(Boolean rememberIndexing) {
    this.rememberIndexing = rememberIndexing;
  }


  public DisplayPreferencesDto rememberSorting(Boolean rememberSorting) {
    this.rememberSorting = rememberSorting;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [remember sorting].
   * @return rememberSorting
   */
  @javax.annotation.Nullable
  public Boolean getRememberSorting() {
    return rememberSorting;
  }

  public void setRememberSorting(Boolean rememberSorting) {
    this.rememberSorting = rememberSorting;
  }


  public DisplayPreferencesDto scrollDirection(ScrollDirection scrollDirection) {
    this.scrollDirection = scrollDirection;
    return this;
  }

  /**
   * Get scrollDirection
   * @return scrollDirection
   */
  @javax.annotation.Nullable
  public ScrollDirection getScrollDirection() {
    return scrollDirection;
  }

  public void setScrollDirection(ScrollDirection scrollDirection) {
    this.scrollDirection = scrollDirection;
  }


  public DisplayPreferencesDto showBackdrop(Boolean showBackdrop) {
    this.showBackdrop = showBackdrop;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to show backdrops on this item.
   * @return showBackdrop
   */
  @javax.annotation.Nullable
  public Boolean getShowBackdrop() {
    return showBackdrop;
  }

  public void setShowBackdrop(Boolean showBackdrop) {
    this.showBackdrop = showBackdrop;
  }


  public DisplayPreferencesDto showSidebar(Boolean showSidebar) {
    this.showSidebar = showSidebar;
    return this;
  }

  /**
   * Gets or sets a value indicating whether [show sidebar].
   * @return showSidebar
   */
  @javax.annotation.Nullable
  public Boolean getShowSidebar() {
    return showSidebar;
  }

  public void setShowSidebar(Boolean showSidebar) {
    this.showSidebar = showSidebar;
  }


  public DisplayPreferencesDto sortBy(String sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Gets or sets the sort by.
   * @return sortBy
   */
  @javax.annotation.Nullable
  public String getSortBy() {
    return sortBy;
  }

  public void setSortBy(String sortBy) {
    this.sortBy = sortBy;
  }


  public DisplayPreferencesDto sortOrder(SortOrder sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public SortOrder getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrder sortOrder) {
    this.sortOrder = sortOrder;
  }


  public DisplayPreferencesDto viewType(String viewType) {
    this.viewType = viewType;
    return this;
  }

  /**
   * Gets or sets the type of the view.
   * @return viewType
   */
  @javax.annotation.Nullable
  public String getViewType() {
    return viewType;
  }

  public void setViewType(String viewType) {
    this.viewType = viewType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisplayPreferencesDto displayPreferencesDto = (DisplayPreferencesDto) o;
    return Objects.equals(this.client, displayPreferencesDto.client) &&
        Objects.equals(this.customPrefs, displayPreferencesDto.customPrefs) &&
        Objects.equals(this.id, displayPreferencesDto.id) &&
        Objects.equals(this.indexBy, displayPreferencesDto.indexBy) &&
        Objects.equals(this.primaryImageHeight, displayPreferencesDto.primaryImageHeight) &&
        Objects.equals(this.primaryImageWidth, displayPreferencesDto.primaryImageWidth) &&
        Objects.equals(this.rememberIndexing, displayPreferencesDto.rememberIndexing) &&
        Objects.equals(this.rememberSorting, displayPreferencesDto.rememberSorting) &&
        Objects.equals(this.scrollDirection, displayPreferencesDto.scrollDirection) &&
        Objects.equals(this.showBackdrop, displayPreferencesDto.showBackdrop) &&
        Objects.equals(this.showSidebar, displayPreferencesDto.showSidebar) &&
        Objects.equals(this.sortBy, displayPreferencesDto.sortBy) &&
        Objects.equals(this.sortOrder, displayPreferencesDto.sortOrder) &&
        Objects.equals(this.viewType, displayPreferencesDto.viewType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(client, customPrefs, id, indexBy, primaryImageHeight, primaryImageWidth, rememberIndexing, rememberSorting, scrollDirection, showBackdrop, showSidebar, sortBy, sortOrder, viewType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisplayPreferencesDto {\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    customPrefs: ").append(toIndentedString(customPrefs)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    indexBy: ").append(toIndentedString(indexBy)).append("\n");
    sb.append("    primaryImageHeight: ").append(toIndentedString(primaryImageHeight)).append("\n");
    sb.append("    primaryImageWidth: ").append(toIndentedString(primaryImageWidth)).append("\n");
    sb.append("    rememberIndexing: ").append(toIndentedString(rememberIndexing)).append("\n");
    sb.append("    rememberSorting: ").append(toIndentedString(rememberSorting)).append("\n");
    sb.append("    scrollDirection: ").append(toIndentedString(scrollDirection)).append("\n");
    sb.append("    showBackdrop: ").append(toIndentedString(showBackdrop)).append("\n");
    sb.append("    showSidebar: ").append(toIndentedString(showSidebar)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    viewType: ").append(toIndentedString(viewType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Client");
    openapiFields.add("CustomPrefs");
    openapiFields.add("Id");
    openapiFields.add("IndexBy");
    openapiFields.add("PrimaryImageHeight");
    openapiFields.add("PrimaryImageWidth");
    openapiFields.add("RememberIndexing");
    openapiFields.add("RememberSorting");
    openapiFields.add("ScrollDirection");
    openapiFields.add("ShowBackdrop");
    openapiFields.add("ShowSidebar");
    openapiFields.add("SortBy");
    openapiFields.add("SortOrder");
    openapiFields.add("ViewType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisplayPreferencesDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisplayPreferencesDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisplayPreferencesDto is not found in the empty JSON string", DisplayPreferencesDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisplayPreferencesDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisplayPreferencesDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Client") != null && !jsonObj.get("Client").isJsonNull()) && !jsonObj.get("Client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Client").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("IndexBy") != null && !jsonObj.get("IndexBy").isJsonNull()) && !jsonObj.get("IndexBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndexBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndexBy").toString()));
      }
      // validate the optional field `ScrollDirection`
      if (jsonObj.get("ScrollDirection") != null && !jsonObj.get("ScrollDirection").isJsonNull()) {
        ScrollDirection.validateJsonElement(jsonObj.get("ScrollDirection"));
      }
      if ((jsonObj.get("SortBy") != null && !jsonObj.get("SortBy").isJsonNull()) && !jsonObj.get("SortBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SortBy").toString()));
      }
      // validate the optional field `SortOrder`
      if (jsonObj.get("SortOrder") != null && !jsonObj.get("SortOrder").isJsonNull()) {
        SortOrder.validateJsonElement(jsonObj.get("SortOrder"));
      }
      if ((jsonObj.get("ViewType") != null && !jsonObj.get("ViewType").isJsonNull()) && !jsonObj.get("ViewType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViewType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViewType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisplayPreferencesDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisplayPreferencesDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisplayPreferencesDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisplayPreferencesDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DisplayPreferencesDto>() {
           @Override
           public void write(JsonWriter out, DisplayPreferencesDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisplayPreferencesDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisplayPreferencesDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisplayPreferencesDto
   * @throws IOException if the JSON string is invalid with respect to DisplayPreferencesDto
   */
  public static DisplayPreferencesDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisplayPreferencesDto.class);
  }

  /**
   * Convert an instance of DisplayPreferencesDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

