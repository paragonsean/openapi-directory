/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stores the result of an incoming quick connect request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuickConnectResult {
  public static final String SERIALIZED_NAME_AUTHENTICATED = "Authenticated";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATED)
  private Boolean authenticated;

  public static final String SERIALIZED_NAME_AUTHENTICATION = "Authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private String authentication;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DATE_ADDED = "DateAdded";
  @SerializedName(SERIALIZED_NAME_DATE_ADDED)
  private OffsetDateTime dateAdded;

  public static final String SERIALIZED_NAME_ERROR = "Error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_SECRET = "Secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public QuickConnectResult() {
  }

  public QuickConnectResult(
     Boolean authenticated
  ) {
    this();
    this.authenticated = authenticated;
  }

  /**
   * Gets a value indicating whether this request is authorized.
   * @return authenticated
   */
  @javax.annotation.Nullable
  public Boolean getAuthenticated() {
    return authenticated;
  }



  public QuickConnectResult authentication(String authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Gets or sets the private access token.
   * @return authentication
   */
  @javax.annotation.Nullable
  public String getAuthentication() {
    return authentication;
  }

  public void setAuthentication(String authentication) {
    this.authentication = authentication;
  }


  public QuickConnectResult code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Gets or sets the user facing code used so the user can quickly differentiate this request from others.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public QuickConnectResult dateAdded(OffsetDateTime dateAdded) {
    this.dateAdded = dateAdded;
    return this;
  }

  /**
   * Gets or sets the DateTime that this request was created.
   * @return dateAdded
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateAdded() {
    return dateAdded;
  }

  public void setDateAdded(OffsetDateTime dateAdded) {
    this.dateAdded = dateAdded;
  }


  public QuickConnectResult error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Gets or sets an error message.
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public QuickConnectResult secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Gets or sets the secret value used to uniquely identify this request. Can be used to retrieve authentication information.
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuickConnectResult quickConnectResult = (QuickConnectResult) o;
    return Objects.equals(this.authenticated, quickConnectResult.authenticated) &&
        Objects.equals(this.authentication, quickConnectResult.authentication) &&
        Objects.equals(this.code, quickConnectResult.code) &&
        Objects.equals(this.dateAdded, quickConnectResult.dateAdded) &&
        Objects.equals(this.error, quickConnectResult.error) &&
        Objects.equals(this.secret, quickConnectResult.secret);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticated, authentication, code, dateAdded, error, secret);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuickConnectResult {\n");
    sb.append("    authenticated: ").append(toIndentedString(authenticated)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    dateAdded: ").append(toIndentedString(dateAdded)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Authenticated");
    openapiFields.add("Authentication");
    openapiFields.add("Code");
    openapiFields.add("DateAdded");
    openapiFields.add("Error");
    openapiFields.add("Secret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuickConnectResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuickConnectResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuickConnectResult is not found in the empty JSON string", QuickConnectResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuickConnectResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuickConnectResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Authentication") != null && !jsonObj.get("Authentication").isJsonNull()) && !jsonObj.get("Authentication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Authentication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Authentication").toString()));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Error") != null && !jsonObj.get("Error").isJsonNull()) && !jsonObj.get("Error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Error").toString()));
      }
      if ((jsonObj.get("Secret") != null && !jsonObj.get("Secret").isJsonNull()) && !jsonObj.get("Secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Secret").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuickConnectResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuickConnectResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuickConnectResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuickConnectResult.class));

       return (TypeAdapter<T>) new TypeAdapter<QuickConnectResult>() {
           @Override
           public void write(JsonWriter out, QuickConnectResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuickConnectResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuickConnectResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuickConnectResult
   * @throws IOException if the JSON string is invalid with respect to QuickConnectResult
   */
  public static QuickConnectResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuickConnectResult.class);
  }

  /**
   * Convert an instance of QuickConnectResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

