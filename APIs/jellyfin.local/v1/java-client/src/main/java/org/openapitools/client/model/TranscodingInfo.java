/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TranscodeReason;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TranscodingInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TranscodingInfo {
  public static final String SERIALIZED_NAME_AUDIO_CHANNELS = "AudioChannels";
  @SerializedName(SERIALIZED_NAME_AUDIO_CHANNELS)
  private Integer audioChannels;

  public static final String SERIALIZED_NAME_AUDIO_CODEC = "AudioCodec";
  @SerializedName(SERIALIZED_NAME_AUDIO_CODEC)
  private String audioCodec;

  public static final String SERIALIZED_NAME_BITRATE = "Bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Integer bitrate;

  public static final String SERIALIZED_NAME_COMPLETION_PERCENTAGE = "CompletionPercentage";
  @SerializedName(SERIALIZED_NAME_COMPLETION_PERCENTAGE)
  private Double completionPercentage;

  public static final String SERIALIZED_NAME_CONTAINER = "Container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_FRAMERATE = "Framerate";
  @SerializedName(SERIALIZED_NAME_FRAMERATE)
  private Float framerate;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_IS_AUDIO_DIRECT = "IsAudioDirect";
  @SerializedName(SERIALIZED_NAME_IS_AUDIO_DIRECT)
  private Boolean isAudioDirect;

  public static final String SERIALIZED_NAME_IS_VIDEO_DIRECT = "IsVideoDirect";
  @SerializedName(SERIALIZED_NAME_IS_VIDEO_DIRECT)
  private Boolean isVideoDirect;

  public static final String SERIALIZED_NAME_TRANSCODE_REASONS = "TranscodeReasons";
  @SerializedName(SERIALIZED_NAME_TRANSCODE_REASONS)
  private List<TranscodeReason> transcodeReasons;

  public static final String SERIALIZED_NAME_VIDEO_CODEC = "VideoCodec";
  @SerializedName(SERIALIZED_NAME_VIDEO_CODEC)
  private String videoCodec;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public TranscodingInfo() {
  }

  public TranscodingInfo audioChannels(Integer audioChannels) {
    this.audioChannels = audioChannels;
    return this;
  }

  /**
   * Get audioChannels
   * @return audioChannels
   */
  @javax.annotation.Nullable
  public Integer getAudioChannels() {
    return audioChannels;
  }

  public void setAudioChannels(Integer audioChannels) {
    this.audioChannels = audioChannels;
  }


  public TranscodingInfo audioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
    return this;
  }

  /**
   * Get audioCodec
   * @return audioCodec
   */
  @javax.annotation.Nullable
  public String getAudioCodec() {
    return audioCodec;
  }

  public void setAudioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
  }


  public TranscodingInfo bitrate(Integer bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Integer getBitrate() {
    return bitrate;
  }

  public void setBitrate(Integer bitrate) {
    this.bitrate = bitrate;
  }


  public TranscodingInfo completionPercentage(Double completionPercentage) {
    this.completionPercentage = completionPercentage;
    return this;
  }

  /**
   * Get completionPercentage
   * @return completionPercentage
   */
  @javax.annotation.Nullable
  public Double getCompletionPercentage() {
    return completionPercentage;
  }

  public void setCompletionPercentage(Double completionPercentage) {
    this.completionPercentage = completionPercentage;
  }


  public TranscodingInfo container(String container) {
    this.container = container;
    return this;
  }

  /**
   * Get container
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }


  public TranscodingInfo framerate(Float framerate) {
    this.framerate = framerate;
    return this;
  }

  /**
   * Get framerate
   * @return framerate
   */
  @javax.annotation.Nullable
  public Float getFramerate() {
    return framerate;
  }

  public void setFramerate(Float framerate) {
    this.framerate = framerate;
  }


  public TranscodingInfo height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public TranscodingInfo isAudioDirect(Boolean isAudioDirect) {
    this.isAudioDirect = isAudioDirect;
    return this;
  }

  /**
   * Get isAudioDirect
   * @return isAudioDirect
   */
  @javax.annotation.Nullable
  public Boolean getIsAudioDirect() {
    return isAudioDirect;
  }

  public void setIsAudioDirect(Boolean isAudioDirect) {
    this.isAudioDirect = isAudioDirect;
  }


  public TranscodingInfo isVideoDirect(Boolean isVideoDirect) {
    this.isVideoDirect = isVideoDirect;
    return this;
  }

  /**
   * Get isVideoDirect
   * @return isVideoDirect
   */
  @javax.annotation.Nullable
  public Boolean getIsVideoDirect() {
    return isVideoDirect;
  }

  public void setIsVideoDirect(Boolean isVideoDirect) {
    this.isVideoDirect = isVideoDirect;
  }


  public TranscodingInfo transcodeReasons(List<TranscodeReason> transcodeReasons) {
    this.transcodeReasons = transcodeReasons;
    return this;
  }

  public TranscodingInfo addTranscodeReasonsItem(TranscodeReason transcodeReasonsItem) {
    if (this.transcodeReasons == null) {
      this.transcodeReasons = new ArrayList<>();
    }
    this.transcodeReasons.add(transcodeReasonsItem);
    return this;
  }

  /**
   * Get transcodeReasons
   * @return transcodeReasons
   */
  @javax.annotation.Nullable
  public List<TranscodeReason> getTranscodeReasons() {
    return transcodeReasons;
  }

  public void setTranscodeReasons(List<TranscodeReason> transcodeReasons) {
    this.transcodeReasons = transcodeReasons;
  }


  public TranscodingInfo videoCodec(String videoCodec) {
    this.videoCodec = videoCodec;
    return this;
  }

  /**
   * Get videoCodec
   * @return videoCodec
   */
  @javax.annotation.Nullable
  public String getVideoCodec() {
    return videoCodec;
  }

  public void setVideoCodec(String videoCodec) {
    this.videoCodec = videoCodec;
  }


  public TranscodingInfo width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscodingInfo transcodingInfo = (TranscodingInfo) o;
    return Objects.equals(this.audioChannels, transcodingInfo.audioChannels) &&
        Objects.equals(this.audioCodec, transcodingInfo.audioCodec) &&
        Objects.equals(this.bitrate, transcodingInfo.bitrate) &&
        Objects.equals(this.completionPercentage, transcodingInfo.completionPercentage) &&
        Objects.equals(this.container, transcodingInfo.container) &&
        Objects.equals(this.framerate, transcodingInfo.framerate) &&
        Objects.equals(this.height, transcodingInfo.height) &&
        Objects.equals(this.isAudioDirect, transcodingInfo.isAudioDirect) &&
        Objects.equals(this.isVideoDirect, transcodingInfo.isVideoDirect) &&
        Objects.equals(this.transcodeReasons, transcodingInfo.transcodeReasons) &&
        Objects.equals(this.videoCodec, transcodingInfo.videoCodec) &&
        Objects.equals(this.width, transcodingInfo.width);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioChannels, audioCodec, bitrate, completionPercentage, container, framerate, height, isAudioDirect, isVideoDirect, transcodeReasons, videoCodec, width);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscodingInfo {\n");
    sb.append("    audioChannels: ").append(toIndentedString(audioChannels)).append("\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    completionPercentage: ").append(toIndentedString(completionPercentage)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    framerate: ").append(toIndentedString(framerate)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    isAudioDirect: ").append(toIndentedString(isAudioDirect)).append("\n");
    sb.append("    isVideoDirect: ").append(toIndentedString(isVideoDirect)).append("\n");
    sb.append("    transcodeReasons: ").append(toIndentedString(transcodeReasons)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioChannels");
    openapiFields.add("AudioCodec");
    openapiFields.add("Bitrate");
    openapiFields.add("CompletionPercentage");
    openapiFields.add("Container");
    openapiFields.add("Framerate");
    openapiFields.add("Height");
    openapiFields.add("IsAudioDirect");
    openapiFields.add("IsVideoDirect");
    openapiFields.add("TranscodeReasons");
    openapiFields.add("VideoCodec");
    openapiFields.add("Width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TranscodingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TranscodingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TranscodingInfo is not found in the empty JSON string", TranscodingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TranscodingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TranscodingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AudioCodec") != null && !jsonObj.get("AudioCodec").isJsonNull()) && !jsonObj.get("AudioCodec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AudioCodec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AudioCodec").toString()));
      }
      if ((jsonObj.get("Container") != null && !jsonObj.get("Container").isJsonNull()) && !jsonObj.get("Container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Container").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("TranscodeReasons") != null && !jsonObj.get("TranscodeReasons").isJsonNull() && !jsonObj.get("TranscodeReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TranscodeReasons` to be an array in the JSON string but got `%s`", jsonObj.get("TranscodeReasons").toString()));
      }
      if ((jsonObj.get("VideoCodec") != null && !jsonObj.get("VideoCodec").isJsonNull()) && !jsonObj.get("VideoCodec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VideoCodec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VideoCodec").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TranscodingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TranscodingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TranscodingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TranscodingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TranscodingInfo>() {
           @Override
           public void write(JsonWriter out, TranscodingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TranscodingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TranscodingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TranscodingInfo
   * @throws IOException if the JSON string is invalid with respect to TranscodingInfo
   */
  public static TranscodingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TranscodingInfo.class);
  }

  /**
   * Convert an instance of TranscodingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

