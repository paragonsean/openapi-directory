/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ConfigurationPageType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration page info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigurationPageInfo {
  public static final String SERIALIZED_NAME_CONFIGURATION_PAGE_TYPE = "ConfigurationPageType";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_PAGE_TYPE)
  private ConfigurationPageType configurationPageType;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLE_IN_MAIN_MENU = "EnableInMainMenu";
  @SerializedName(SERIALIZED_NAME_ENABLE_IN_MAIN_MENU)
  private Boolean enableInMainMenu;

  public static final String SERIALIZED_NAME_MENU_ICON = "MenuIcon";
  @SerializedName(SERIALIZED_NAME_MENU_ICON)
  private String menuIcon;

  public static final String SERIALIZED_NAME_MENU_SECTION = "MenuSection";
  @SerializedName(SERIALIZED_NAME_MENU_SECTION)
  private String menuSection;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLUGIN_ID = "PluginId";
  @SerializedName(SERIALIZED_NAME_PLUGIN_ID)
  private UUID pluginId;

  public ConfigurationPageInfo() {
  }

  public ConfigurationPageInfo configurationPageType(ConfigurationPageType configurationPageType) {
    this.configurationPageType = configurationPageType;
    return this;
  }

  /**
   * Get configurationPageType
   * @return configurationPageType
   */
  @javax.annotation.Nullable
  public ConfigurationPageType getConfigurationPageType() {
    return configurationPageType;
  }

  public void setConfigurationPageType(ConfigurationPageType configurationPageType) {
    this.configurationPageType = configurationPageType;
  }


  public ConfigurationPageInfo displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Gets or sets the display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ConfigurationPageInfo enableInMainMenu(Boolean enableInMainMenu) {
    this.enableInMainMenu = enableInMainMenu;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the configurations page is enabled in the main menu.
   * @return enableInMainMenu
   */
  @javax.annotation.Nullable
  public Boolean getEnableInMainMenu() {
    return enableInMainMenu;
  }

  public void setEnableInMainMenu(Boolean enableInMainMenu) {
    this.enableInMainMenu = enableInMainMenu;
  }


  public ConfigurationPageInfo menuIcon(String menuIcon) {
    this.menuIcon = menuIcon;
    return this;
  }

  /**
   * Gets or sets the menu icon.
   * @return menuIcon
   */
  @javax.annotation.Nullable
  public String getMenuIcon() {
    return menuIcon;
  }

  public void setMenuIcon(String menuIcon) {
    this.menuIcon = menuIcon;
  }


  public ConfigurationPageInfo menuSection(String menuSection) {
    this.menuSection = menuSection;
    return this;
  }

  /**
   * Gets or sets the menu section.
   * @return menuSection
   */
  @javax.annotation.Nullable
  public String getMenuSection() {
    return menuSection;
  }

  public void setMenuSection(String menuSection) {
    this.menuSection = menuSection;
  }


  public ConfigurationPageInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConfigurationPageInfo pluginId(UUID pluginId) {
    this.pluginId = pluginId;
    return this;
  }

  /**
   * Gets or sets the plugin id.
   * @return pluginId
   */
  @javax.annotation.Nullable
  public UUID getPluginId() {
    return pluginId;
  }

  public void setPluginId(UUID pluginId) {
    this.pluginId = pluginId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationPageInfo configurationPageInfo = (ConfigurationPageInfo) o;
    return Objects.equals(this.configurationPageType, configurationPageInfo.configurationPageType) &&
        Objects.equals(this.displayName, configurationPageInfo.displayName) &&
        Objects.equals(this.enableInMainMenu, configurationPageInfo.enableInMainMenu) &&
        Objects.equals(this.menuIcon, configurationPageInfo.menuIcon) &&
        Objects.equals(this.menuSection, configurationPageInfo.menuSection) &&
        Objects.equals(this.name, configurationPageInfo.name) &&
        Objects.equals(this.pluginId, configurationPageInfo.pluginId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationPageType, displayName, enableInMainMenu, menuIcon, menuSection, name, pluginId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationPageInfo {\n");
    sb.append("    configurationPageType: ").append(toIndentedString(configurationPageType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enableInMainMenu: ").append(toIndentedString(enableInMainMenu)).append("\n");
    sb.append("    menuIcon: ").append(toIndentedString(menuIcon)).append("\n");
    sb.append("    menuSection: ").append(toIndentedString(menuSection)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pluginId: ").append(toIndentedString(pluginId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigurationPageType");
    openapiFields.add("DisplayName");
    openapiFields.add("EnableInMainMenu");
    openapiFields.add("MenuIcon");
    openapiFields.add("MenuSection");
    openapiFields.add("Name");
    openapiFields.add("PluginId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationPageInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationPageInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationPageInfo is not found in the empty JSON string", ConfigurationPageInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationPageInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationPageInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConfigurationPageType`
      if (jsonObj.get("ConfigurationPageType") != null && !jsonObj.get("ConfigurationPageType").isJsonNull()) {
        ConfigurationPageType.validateJsonElement(jsonObj.get("ConfigurationPageType"));
      }
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("MenuIcon") != null && !jsonObj.get("MenuIcon").isJsonNull()) && !jsonObj.get("MenuIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MenuIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MenuIcon").toString()));
      }
      if ((jsonObj.get("MenuSection") != null && !jsonObj.get("MenuSection").isJsonNull()) && !jsonObj.get("MenuSection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MenuSection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MenuSection").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("PluginId") != null && !jsonObj.get("PluginId").isJsonNull()) && !jsonObj.get("PluginId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PluginId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PluginId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationPageInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationPageInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationPageInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationPageInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationPageInfo>() {
           @Override
           public void write(JsonWriter out, ConfigurationPageInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationPageInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationPageInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationPageInfo
   * @throws IOException if the JSON string is invalid with respect to ConfigurationPageInfo
   */
  public static ConfigurationPageInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationPageInfo.class);
  }

  /**
   * Convert an instance of ConfigurationPageInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

