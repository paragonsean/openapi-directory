/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TunerHostInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TunerHostInfo {
  public static final String SERIALIZED_NAME_ALLOW_H_W_TRANSCODING = "AllowHWTranscoding";
  @SerializedName(SERIALIZED_NAME_ALLOW_H_W_TRANSCODING)
  private Boolean allowHWTranscoding;

  public static final String SERIALIZED_NAME_DEVICE_ID = "DeviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_ENABLE_STREAM_LOOPING = "EnableStreamLooping";
  @SerializedName(SERIALIZED_NAME_ENABLE_STREAM_LOOPING)
  private Boolean enableStreamLooping;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "FriendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMPORT_FAVORITES_ONLY = "ImportFavoritesOnly";
  @SerializedName(SERIALIZED_NAME_IMPORT_FAVORITES_ONLY)
  private Boolean importFavoritesOnly;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TUNER_COUNT = "TunerCount";
  @SerializedName(SERIALIZED_NAME_TUNER_COUNT)
  private Integer tunerCount;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_AGENT = "UserAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public TunerHostInfo() {
  }

  public TunerHostInfo allowHWTranscoding(Boolean allowHWTranscoding) {
    this.allowHWTranscoding = allowHWTranscoding;
    return this;
  }

  /**
   * Get allowHWTranscoding
   * @return allowHWTranscoding
   */
  @javax.annotation.Nullable
  public Boolean getAllowHWTranscoding() {
    return allowHWTranscoding;
  }

  public void setAllowHWTranscoding(Boolean allowHWTranscoding) {
    this.allowHWTranscoding = allowHWTranscoding;
  }


  public TunerHostInfo deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Get deviceId
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public TunerHostInfo enableStreamLooping(Boolean enableStreamLooping) {
    this.enableStreamLooping = enableStreamLooping;
    return this;
  }

  /**
   * Get enableStreamLooping
   * @return enableStreamLooping
   */
  @javax.annotation.Nullable
  public Boolean getEnableStreamLooping() {
    return enableStreamLooping;
  }

  public void setEnableStreamLooping(Boolean enableStreamLooping) {
    this.enableStreamLooping = enableStreamLooping;
  }


  public TunerHostInfo friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Get friendlyName
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public TunerHostInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TunerHostInfo importFavoritesOnly(Boolean importFavoritesOnly) {
    this.importFavoritesOnly = importFavoritesOnly;
    return this;
  }

  /**
   * Get importFavoritesOnly
   * @return importFavoritesOnly
   */
  @javax.annotation.Nullable
  public Boolean getImportFavoritesOnly() {
    return importFavoritesOnly;
  }

  public void setImportFavoritesOnly(Boolean importFavoritesOnly) {
    this.importFavoritesOnly = importFavoritesOnly;
  }


  public TunerHostInfo source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public TunerHostInfo tunerCount(Integer tunerCount) {
    this.tunerCount = tunerCount;
    return this;
  }

  /**
   * Get tunerCount
   * @return tunerCount
   */
  @javax.annotation.Nullable
  public Integer getTunerCount() {
    return tunerCount;
  }

  public void setTunerCount(Integer tunerCount) {
    this.tunerCount = tunerCount;
  }


  public TunerHostInfo type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public TunerHostInfo url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public TunerHostInfo userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TunerHostInfo tunerHostInfo = (TunerHostInfo) o;
    return Objects.equals(this.allowHWTranscoding, tunerHostInfo.allowHWTranscoding) &&
        Objects.equals(this.deviceId, tunerHostInfo.deviceId) &&
        Objects.equals(this.enableStreamLooping, tunerHostInfo.enableStreamLooping) &&
        Objects.equals(this.friendlyName, tunerHostInfo.friendlyName) &&
        Objects.equals(this.id, tunerHostInfo.id) &&
        Objects.equals(this.importFavoritesOnly, tunerHostInfo.importFavoritesOnly) &&
        Objects.equals(this.source, tunerHostInfo.source) &&
        Objects.equals(this.tunerCount, tunerHostInfo.tunerCount) &&
        Objects.equals(this.type, tunerHostInfo.type) &&
        Objects.equals(this.url, tunerHostInfo.url) &&
        Objects.equals(this.userAgent, tunerHostInfo.userAgent);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowHWTranscoding, deviceId, enableStreamLooping, friendlyName, id, importFavoritesOnly, source, tunerCount, type, url, userAgent);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TunerHostInfo {\n");
    sb.append("    allowHWTranscoding: ").append(toIndentedString(allowHWTranscoding)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    enableStreamLooping: ").append(toIndentedString(enableStreamLooping)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    importFavoritesOnly: ").append(toIndentedString(importFavoritesOnly)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    tunerCount: ").append(toIndentedString(tunerCount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllowHWTranscoding");
    openapiFields.add("DeviceId");
    openapiFields.add("EnableStreamLooping");
    openapiFields.add("FriendlyName");
    openapiFields.add("Id");
    openapiFields.add("ImportFavoritesOnly");
    openapiFields.add("Source");
    openapiFields.add("TunerCount");
    openapiFields.add("Type");
    openapiFields.add("Url");
    openapiFields.add("UserAgent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TunerHostInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TunerHostInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TunerHostInfo is not found in the empty JSON string", TunerHostInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TunerHostInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TunerHostInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DeviceId") != null && !jsonObj.get("DeviceId").isJsonNull()) && !jsonObj.get("DeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceId").toString()));
      }
      if ((jsonObj.get("FriendlyName") != null && !jsonObj.get("FriendlyName").isJsonNull()) && !jsonObj.get("FriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FriendlyName").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) && !jsonObj.get("Source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Source").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) && !jsonObj.get("Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Url").toString()));
      }
      if ((jsonObj.get("UserAgent") != null && !jsonObj.get("UserAgent").isJsonNull()) && !jsonObj.get("UserAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserAgent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TunerHostInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TunerHostInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TunerHostInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TunerHostInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TunerHostInfo>() {
           @Override
           public void write(JsonWriter out, TunerHostInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TunerHostInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TunerHostInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TunerHostInfo
   * @throws IOException if the JSON string is invalid with respect to TunerHostInfo
   */
  public static TunerHostInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TunerHostInfo.class);
  }

  /**
   * Convert an instance of TunerHostInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

