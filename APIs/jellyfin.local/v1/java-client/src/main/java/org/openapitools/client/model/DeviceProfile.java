/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CodecProfile;
import org.openapitools.client.model.ContainerProfile;
import org.openapitools.client.model.DeviceIdentification;
import org.openapitools.client.model.DirectPlayProfile;
import org.openapitools.client.model.ResponseProfile;
import org.openapitools.client.model.SubtitleProfile;
import org.openapitools.client.model.TranscodingProfile;
import org.openapitools.client.model.XmlAttribute;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the MediaBrowser.Model.Dlna.DeviceProfile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceProfile {
  public static final String SERIALIZED_NAME_ALBUM_ART_PN = "AlbumArtPn";
  @SerializedName(SERIALIZED_NAME_ALBUM_ART_PN)
  private String albumArtPn;

  public static final String SERIALIZED_NAME_CODEC_PROFILES = "CodecProfiles";
  @SerializedName(SERIALIZED_NAME_CODEC_PROFILES)
  private List<CodecProfile> codecProfiles;

  public static final String SERIALIZED_NAME_CONTAINER_PROFILES = "ContainerProfiles";
  @SerializedName(SERIALIZED_NAME_CONTAINER_PROFILES)
  private List<ContainerProfile> containerProfiles;

  public static final String SERIALIZED_NAME_DIRECT_PLAY_PROFILES = "DirectPlayProfiles";
  @SerializedName(SERIALIZED_NAME_DIRECT_PLAY_PROFILES)
  private List<DirectPlayProfile> directPlayProfiles;

  public static final String SERIALIZED_NAME_ENABLE_ALBUM_ART_IN_DIDL = "EnableAlbumArtInDidl";
  @SerializedName(SERIALIZED_NAME_ENABLE_ALBUM_ART_IN_DIDL)
  private Boolean enableAlbumArtInDidl;

  public static final String SERIALIZED_NAME_ENABLE_M_S_MEDIA_RECEIVER_REGISTRAR = "EnableMSMediaReceiverRegistrar";
  @SerializedName(SERIALIZED_NAME_ENABLE_M_S_MEDIA_RECEIVER_REGISTRAR)
  private Boolean enableMSMediaReceiverRegistrar;

  public static final String SERIALIZED_NAME_ENABLE_SINGLE_ALBUM_ART_LIMIT = "EnableSingleAlbumArtLimit";
  @SerializedName(SERIALIZED_NAME_ENABLE_SINGLE_ALBUM_ART_LIMIT)
  private Boolean enableSingleAlbumArtLimit;

  public static final String SERIALIZED_NAME_ENABLE_SINGLE_SUBTITLE_LIMIT = "EnableSingleSubtitleLimit";
  @SerializedName(SERIALIZED_NAME_ENABLE_SINGLE_SUBTITLE_LIMIT)
  private Boolean enableSingleSubtitleLimit;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "FriendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private DeviceIdentification identification;

  public static final String SERIALIZED_NAME_IGNORE_TRANSCODE_BYTE_RANGE_REQUESTS = "IgnoreTranscodeByteRangeRequests";
  @SerializedName(SERIALIZED_NAME_IGNORE_TRANSCODE_BYTE_RANGE_REQUESTS)
  private Boolean ignoreTranscodeByteRangeRequests;

  public static final String SERIALIZED_NAME_MANUFACTURER = "Manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_MANUFACTURER_URL = "ManufacturerUrl";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_URL)
  private String manufacturerUrl;

  public static final String SERIALIZED_NAME_MAX_ALBUM_ART_HEIGHT = "MaxAlbumArtHeight";
  @SerializedName(SERIALIZED_NAME_MAX_ALBUM_ART_HEIGHT)
  private Integer maxAlbumArtHeight;

  public static final String SERIALIZED_NAME_MAX_ALBUM_ART_WIDTH = "MaxAlbumArtWidth";
  @SerializedName(SERIALIZED_NAME_MAX_ALBUM_ART_WIDTH)
  private Integer maxAlbumArtWidth;

  public static final String SERIALIZED_NAME_MAX_ICON_HEIGHT = "MaxIconHeight";
  @SerializedName(SERIALIZED_NAME_MAX_ICON_HEIGHT)
  private Integer maxIconHeight;

  public static final String SERIALIZED_NAME_MAX_ICON_WIDTH = "MaxIconWidth";
  @SerializedName(SERIALIZED_NAME_MAX_ICON_WIDTH)
  private Integer maxIconWidth;

  public static final String SERIALIZED_NAME_MAX_STATIC_BITRATE = "MaxStaticBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STATIC_BITRATE)
  private Integer maxStaticBitrate;

  public static final String SERIALIZED_NAME_MAX_STATIC_MUSIC_BITRATE = "MaxStaticMusicBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STATIC_MUSIC_BITRATE)
  private Integer maxStaticMusicBitrate;

  public static final String SERIALIZED_NAME_MAX_STREAMING_BITRATE = "MaxStreamingBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_STREAMING_BITRATE)
  private Integer maxStreamingBitrate;

  public static final String SERIALIZED_NAME_MODEL_DESCRIPTION = "ModelDescription";
  @SerializedName(SERIALIZED_NAME_MODEL_DESCRIPTION)
  private String modelDescription;

  public static final String SERIALIZED_NAME_MODEL_NAME = "ModelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_MODEL_NUMBER = "ModelNumber";
  @SerializedName(SERIALIZED_NAME_MODEL_NUMBER)
  private String modelNumber;

  public static final String SERIALIZED_NAME_MODEL_URL = "ModelUrl";
  @SerializedName(SERIALIZED_NAME_MODEL_URL)
  private String modelUrl;

  public static final String SERIALIZED_NAME_MUSIC_STREAMING_TRANSCODING_BITRATE = "MusicStreamingTranscodingBitrate";
  @SerializedName(SERIALIZED_NAME_MUSIC_STREAMING_TRANSCODING_BITRATE)
  private Integer musicStreamingTranscodingBitrate;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTOCOL_INFO = "ProtocolInfo";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_INFO)
  private String protocolInfo;

  public static final String SERIALIZED_NAME_REQUIRES_PLAIN_FOLDERS = "RequiresPlainFolders";
  @SerializedName(SERIALIZED_NAME_REQUIRES_PLAIN_FOLDERS)
  private Boolean requiresPlainFolders;

  public static final String SERIALIZED_NAME_REQUIRES_PLAIN_VIDEO_ITEMS = "RequiresPlainVideoItems";
  @SerializedName(SERIALIZED_NAME_REQUIRES_PLAIN_VIDEO_ITEMS)
  private Boolean requiresPlainVideoItems;

  public static final String SERIALIZED_NAME_RESPONSE_PROFILES = "ResponseProfiles";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PROFILES)
  private List<ResponseProfile> responseProfiles;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SONY_AGGREGATION_FLAGS = "SonyAggregationFlags";
  @SerializedName(SERIALIZED_NAME_SONY_AGGREGATION_FLAGS)
  private String sonyAggregationFlags;

  public static final String SERIALIZED_NAME_SUBTITLE_PROFILES = "SubtitleProfiles";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_PROFILES)
  private List<SubtitleProfile> subtitleProfiles;

  public static final String SERIALIZED_NAME_SUPPORTED_MEDIA_TYPES = "SupportedMediaTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_MEDIA_TYPES)
  private String supportedMediaTypes;

  public static final String SERIALIZED_NAME_TIMELINE_OFFSET_SECONDS = "TimelineOffsetSeconds";
  @SerializedName(SERIALIZED_NAME_TIMELINE_OFFSET_SECONDS)
  private Integer timelineOffsetSeconds;

  public static final String SERIALIZED_NAME_TRANSCODING_PROFILES = "TranscodingProfiles";
  @SerializedName(SERIALIZED_NAME_TRANSCODING_PROFILES)
  private List<TranscodingProfile> transcodingProfiles;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_XML_ROOT_ATTRIBUTES = "XmlRootAttributes";
  @SerializedName(SERIALIZED_NAME_XML_ROOT_ATTRIBUTES)
  private List<XmlAttribute> xmlRootAttributes;

  public DeviceProfile() {
  }

  public DeviceProfile albumArtPn(String albumArtPn) {
    this.albumArtPn = albumArtPn;
    return this;
  }

  /**
   * Gets or sets the AlbumArtPn.
   * @return albumArtPn
   */
  @javax.annotation.Nullable
  public String getAlbumArtPn() {
    return albumArtPn;
  }

  public void setAlbumArtPn(String albumArtPn) {
    this.albumArtPn = albumArtPn;
  }


  public DeviceProfile codecProfiles(List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
    return this;
  }

  public DeviceProfile addCodecProfilesItem(CodecProfile codecProfilesItem) {
    if (this.codecProfiles == null) {
      this.codecProfiles = new ArrayList<>();
    }
    this.codecProfiles.add(codecProfilesItem);
    return this;
  }

  /**
   * Gets or sets the CodecProfiles.
   * @return codecProfiles
   */
  @javax.annotation.Nullable
  public List<CodecProfile> getCodecProfiles() {
    return codecProfiles;
  }

  public void setCodecProfiles(List<CodecProfile> codecProfiles) {
    this.codecProfiles = codecProfiles;
  }


  public DeviceProfile containerProfiles(List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
    return this;
  }

  public DeviceProfile addContainerProfilesItem(ContainerProfile containerProfilesItem) {
    if (this.containerProfiles == null) {
      this.containerProfiles = new ArrayList<>();
    }
    this.containerProfiles.add(containerProfilesItem);
    return this;
  }

  /**
   * Gets or sets the ContainerProfiles.
   * @return containerProfiles
   */
  @javax.annotation.Nullable
  public List<ContainerProfile> getContainerProfiles() {
    return containerProfiles;
  }

  public void setContainerProfiles(List<ContainerProfile> containerProfiles) {
    this.containerProfiles = containerProfiles;
  }


  public DeviceProfile directPlayProfiles(List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
    return this;
  }

  public DeviceProfile addDirectPlayProfilesItem(DirectPlayProfile directPlayProfilesItem) {
    if (this.directPlayProfiles == null) {
      this.directPlayProfiles = new ArrayList<>();
    }
    this.directPlayProfiles.add(directPlayProfilesItem);
    return this;
  }

  /**
   * Gets or sets the direct play profiles.
   * @return directPlayProfiles
   */
  @javax.annotation.Nullable
  public List<DirectPlayProfile> getDirectPlayProfiles() {
    return directPlayProfiles;
  }

  public void setDirectPlayProfiles(List<DirectPlayProfile> directPlayProfiles) {
    this.directPlayProfiles = directPlayProfiles;
  }


  public DeviceProfile enableAlbumArtInDidl(Boolean enableAlbumArtInDidl) {
    this.enableAlbumArtInDidl = enableAlbumArtInDidl;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableAlbumArtInDidl.
   * @return enableAlbumArtInDidl
   */
  @javax.annotation.Nullable
  public Boolean getEnableAlbumArtInDidl() {
    return enableAlbumArtInDidl;
  }

  public void setEnableAlbumArtInDidl(Boolean enableAlbumArtInDidl) {
    this.enableAlbumArtInDidl = enableAlbumArtInDidl;
  }


  public DeviceProfile enableMSMediaReceiverRegistrar(Boolean enableMSMediaReceiverRegistrar) {
    this.enableMSMediaReceiverRegistrar = enableMSMediaReceiverRegistrar;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.
   * @return enableMSMediaReceiverRegistrar
   */
  @javax.annotation.Nullable
  public Boolean getEnableMSMediaReceiverRegistrar() {
    return enableMSMediaReceiverRegistrar;
  }

  public void setEnableMSMediaReceiverRegistrar(Boolean enableMSMediaReceiverRegistrar) {
    this.enableMSMediaReceiverRegistrar = enableMSMediaReceiverRegistrar;
  }


  public DeviceProfile enableSingleAlbumArtLimit(Boolean enableSingleAlbumArtLimit) {
    this.enableSingleAlbumArtLimit = enableSingleAlbumArtLimit;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableSingleAlbumArtLimit.
   * @return enableSingleAlbumArtLimit
   */
  @javax.annotation.Nullable
  public Boolean getEnableSingleAlbumArtLimit() {
    return enableSingleAlbumArtLimit;
  }

  public void setEnableSingleAlbumArtLimit(Boolean enableSingleAlbumArtLimit) {
    this.enableSingleAlbumArtLimit = enableSingleAlbumArtLimit;
  }


  public DeviceProfile enableSingleSubtitleLimit(Boolean enableSingleSubtitleLimit) {
    this.enableSingleSubtitleLimit = enableSingleSubtitleLimit;
    return this;
  }

  /**
   * Gets or sets a value indicating whether EnableSingleSubtitleLimit.
   * @return enableSingleSubtitleLimit
   */
  @javax.annotation.Nullable
  public Boolean getEnableSingleSubtitleLimit() {
    return enableSingleSubtitleLimit;
  }

  public void setEnableSingleSubtitleLimit(Boolean enableSingleSubtitleLimit) {
    this.enableSingleSubtitleLimit = enableSingleSubtitleLimit;
  }


  public DeviceProfile friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Gets or sets the FriendlyName.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public DeviceProfile id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeviceProfile identification(DeviceIdentification identification) {
    this.identification = identification;
    return this;
  }

  /**
   * Get identification
   * @return identification
   */
  @javax.annotation.Nullable
  public DeviceIdentification getIdentification() {
    return identification;
  }

  public void setIdentification(DeviceIdentification identification) {
    this.identification = identification;
  }


  public DeviceProfile ignoreTranscodeByteRangeRequests(Boolean ignoreTranscodeByteRangeRequests) {
    this.ignoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests;
    return this;
  }

  /**
   * Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.
   * @return ignoreTranscodeByteRangeRequests
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreTranscodeByteRangeRequests() {
    return ignoreTranscodeByteRangeRequests;
  }

  public void setIgnoreTranscodeByteRangeRequests(Boolean ignoreTranscodeByteRangeRequests) {
    this.ignoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests;
  }


  public DeviceProfile manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Gets or sets the Manufacturer.
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DeviceProfile manufacturerUrl(String manufacturerUrl) {
    this.manufacturerUrl = manufacturerUrl;
    return this;
  }

  /**
   * Gets or sets the ManufacturerUrl.
   * @return manufacturerUrl
   */
  @javax.annotation.Nullable
  public String getManufacturerUrl() {
    return manufacturerUrl;
  }

  public void setManufacturerUrl(String manufacturerUrl) {
    this.manufacturerUrl = manufacturerUrl;
  }


  public DeviceProfile maxAlbumArtHeight(Integer maxAlbumArtHeight) {
    this.maxAlbumArtHeight = maxAlbumArtHeight;
    return this;
  }

  /**
   * Gets or sets the MaxAlbumArtHeight.
   * @return maxAlbumArtHeight
   */
  @javax.annotation.Nullable
  public Integer getMaxAlbumArtHeight() {
    return maxAlbumArtHeight;
  }

  public void setMaxAlbumArtHeight(Integer maxAlbumArtHeight) {
    this.maxAlbumArtHeight = maxAlbumArtHeight;
  }


  public DeviceProfile maxAlbumArtWidth(Integer maxAlbumArtWidth) {
    this.maxAlbumArtWidth = maxAlbumArtWidth;
    return this;
  }

  /**
   * Gets or sets the MaxAlbumArtWidth.
   * @return maxAlbumArtWidth
   */
  @javax.annotation.Nullable
  public Integer getMaxAlbumArtWidth() {
    return maxAlbumArtWidth;
  }

  public void setMaxAlbumArtWidth(Integer maxAlbumArtWidth) {
    this.maxAlbumArtWidth = maxAlbumArtWidth;
  }


  public DeviceProfile maxIconHeight(Integer maxIconHeight) {
    this.maxIconHeight = maxIconHeight;
    return this;
  }

  /**
   * Gets or sets the MaxIconHeight.
   * @return maxIconHeight
   */
  @javax.annotation.Nullable
  public Integer getMaxIconHeight() {
    return maxIconHeight;
  }

  public void setMaxIconHeight(Integer maxIconHeight) {
    this.maxIconHeight = maxIconHeight;
  }


  public DeviceProfile maxIconWidth(Integer maxIconWidth) {
    this.maxIconWidth = maxIconWidth;
    return this;
  }

  /**
   * Gets or sets the MaxIconWidth.
   * @return maxIconWidth
   */
  @javax.annotation.Nullable
  public Integer getMaxIconWidth() {
    return maxIconWidth;
  }

  public void setMaxIconWidth(Integer maxIconWidth) {
    this.maxIconWidth = maxIconWidth;
  }


  public DeviceProfile maxStaticBitrate(Integer maxStaticBitrate) {
    this.maxStaticBitrate = maxStaticBitrate;
    return this;
  }

  /**
   * Gets or sets the MaxStaticBitrate.
   * @return maxStaticBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStaticBitrate() {
    return maxStaticBitrate;
  }

  public void setMaxStaticBitrate(Integer maxStaticBitrate) {
    this.maxStaticBitrate = maxStaticBitrate;
  }


  public DeviceProfile maxStaticMusicBitrate(Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = maxStaticMusicBitrate;
    return this;
  }

  /**
   * Gets or sets the MaxStaticMusicBitrate.
   * @return maxStaticMusicBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStaticMusicBitrate() {
    return maxStaticMusicBitrate;
  }

  public void setMaxStaticMusicBitrate(Integer maxStaticMusicBitrate) {
    this.maxStaticMusicBitrate = maxStaticMusicBitrate;
  }


  public DeviceProfile maxStreamingBitrate(Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
    return this;
  }

  /**
   * Gets or sets the MaxStreamingBitrate.
   * @return maxStreamingBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxStreamingBitrate() {
    return maxStreamingBitrate;
  }

  public void setMaxStreamingBitrate(Integer maxStreamingBitrate) {
    this.maxStreamingBitrate = maxStreamingBitrate;
  }


  public DeviceProfile modelDescription(String modelDescription) {
    this.modelDescription = modelDescription;
    return this;
  }

  /**
   * Gets or sets the ModelDescription.
   * @return modelDescription
   */
  @javax.annotation.Nullable
  public String getModelDescription() {
    return modelDescription;
  }

  public void setModelDescription(String modelDescription) {
    this.modelDescription = modelDescription;
  }


  public DeviceProfile modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Gets or sets the ModelName.
   * @return modelName
   */
  @javax.annotation.Nullable
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public DeviceProfile modelNumber(String modelNumber) {
    this.modelNumber = modelNumber;
    return this;
  }

  /**
   * Gets or sets the ModelNumber.
   * @return modelNumber
   */
  @javax.annotation.Nullable
  public String getModelNumber() {
    return modelNumber;
  }

  public void setModelNumber(String modelNumber) {
    this.modelNumber = modelNumber;
  }


  public DeviceProfile modelUrl(String modelUrl) {
    this.modelUrl = modelUrl;
    return this;
  }

  /**
   * Gets or sets the ModelUrl.
   * @return modelUrl
   */
  @javax.annotation.Nullable
  public String getModelUrl() {
    return modelUrl;
  }

  public void setModelUrl(String modelUrl) {
    this.modelUrl = modelUrl;
  }


  public DeviceProfile musicStreamingTranscodingBitrate(Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
    return this;
  }

  /**
   * Gets or sets the MusicStreamingTranscodingBitrate.
   * @return musicStreamingTranscodingBitrate
   */
  @javax.annotation.Nullable
  public Integer getMusicStreamingTranscodingBitrate() {
    return musicStreamingTranscodingBitrate;
  }

  public void setMusicStreamingTranscodingBitrate(Integer musicStreamingTranscodingBitrate) {
    this.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
  }


  public DeviceProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the Name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeviceProfile protocolInfo(String protocolInfo) {
    this.protocolInfo = protocolInfo;
    return this;
  }

  /**
   * Gets or sets the ProtocolInfo.
   * @return protocolInfo
   */
  @javax.annotation.Nullable
  public String getProtocolInfo() {
    return protocolInfo;
  }

  public void setProtocolInfo(String protocolInfo) {
    this.protocolInfo = protocolInfo;
  }


  public DeviceProfile requiresPlainFolders(Boolean requiresPlainFolders) {
    this.requiresPlainFolders = requiresPlainFolders;
    return this;
  }

  /**
   * Gets or sets a value indicating whether RequiresPlainFolders.
   * @return requiresPlainFolders
   */
  @javax.annotation.Nullable
  public Boolean getRequiresPlainFolders() {
    return requiresPlainFolders;
  }

  public void setRequiresPlainFolders(Boolean requiresPlainFolders) {
    this.requiresPlainFolders = requiresPlainFolders;
  }


  public DeviceProfile requiresPlainVideoItems(Boolean requiresPlainVideoItems) {
    this.requiresPlainVideoItems = requiresPlainVideoItems;
    return this;
  }

  /**
   * Gets or sets a value indicating whether RequiresPlainVideoItems.
   * @return requiresPlainVideoItems
   */
  @javax.annotation.Nullable
  public Boolean getRequiresPlainVideoItems() {
    return requiresPlainVideoItems;
  }

  public void setRequiresPlainVideoItems(Boolean requiresPlainVideoItems) {
    this.requiresPlainVideoItems = requiresPlainVideoItems;
  }


  public DeviceProfile responseProfiles(List<ResponseProfile> responseProfiles) {
    this.responseProfiles = responseProfiles;
    return this;
  }

  public DeviceProfile addResponseProfilesItem(ResponseProfile responseProfilesItem) {
    if (this.responseProfiles == null) {
      this.responseProfiles = new ArrayList<>();
    }
    this.responseProfiles.add(responseProfilesItem);
    return this;
  }

  /**
   * Gets or sets the ResponseProfiles.
   * @return responseProfiles
   */
  @javax.annotation.Nullable
  public List<ResponseProfile> getResponseProfiles() {
    return responseProfiles;
  }

  public void setResponseProfiles(List<ResponseProfile> responseProfiles) {
    this.responseProfiles = responseProfiles;
  }


  public DeviceProfile serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Gets or sets the SerialNumber.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public DeviceProfile sonyAggregationFlags(String sonyAggregationFlags) {
    this.sonyAggregationFlags = sonyAggregationFlags;
    return this;
  }

  /**
   * Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.
   * @return sonyAggregationFlags
   */
  @javax.annotation.Nullable
  public String getSonyAggregationFlags() {
    return sonyAggregationFlags;
  }

  public void setSonyAggregationFlags(String sonyAggregationFlags) {
    this.sonyAggregationFlags = sonyAggregationFlags;
  }


  public DeviceProfile subtitleProfiles(List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
    return this;
  }

  public DeviceProfile addSubtitleProfilesItem(SubtitleProfile subtitleProfilesItem) {
    if (this.subtitleProfiles == null) {
      this.subtitleProfiles = new ArrayList<>();
    }
    this.subtitleProfiles.add(subtitleProfilesItem);
    return this;
  }

  /**
   * Gets or sets the SubtitleProfiles.
   * @return subtitleProfiles
   */
  @javax.annotation.Nullable
  public List<SubtitleProfile> getSubtitleProfiles() {
    return subtitleProfiles;
  }

  public void setSubtitleProfiles(List<SubtitleProfile> subtitleProfiles) {
    this.subtitleProfiles = subtitleProfiles;
  }


  public DeviceProfile supportedMediaTypes(String supportedMediaTypes) {
    this.supportedMediaTypes = supportedMediaTypes;
    return this;
  }

  /**
   * Gets or sets the SupportedMediaTypes.
   * @return supportedMediaTypes
   */
  @javax.annotation.Nullable
  public String getSupportedMediaTypes() {
    return supportedMediaTypes;
  }

  public void setSupportedMediaTypes(String supportedMediaTypes) {
    this.supportedMediaTypes = supportedMediaTypes;
  }


  public DeviceProfile timelineOffsetSeconds(Integer timelineOffsetSeconds) {
    this.timelineOffsetSeconds = timelineOffsetSeconds;
    return this;
  }

  /**
   * Gets or sets the TimelineOffsetSeconds.
   * @return timelineOffsetSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimelineOffsetSeconds() {
    return timelineOffsetSeconds;
  }

  public void setTimelineOffsetSeconds(Integer timelineOffsetSeconds) {
    this.timelineOffsetSeconds = timelineOffsetSeconds;
  }


  public DeviceProfile transcodingProfiles(List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
    return this;
  }

  public DeviceProfile addTranscodingProfilesItem(TranscodingProfile transcodingProfilesItem) {
    if (this.transcodingProfiles == null) {
      this.transcodingProfiles = new ArrayList<>();
    }
    this.transcodingProfiles.add(transcodingProfilesItem);
    return this;
  }

  /**
   * Gets or sets the transcoding profiles.
   * @return transcodingProfiles
   */
  @javax.annotation.Nullable
  public List<TranscodingProfile> getTranscodingProfiles() {
    return transcodingProfiles;
  }

  public void setTranscodingProfiles(List<TranscodingProfile> transcodingProfiles) {
    this.transcodingProfiles = transcodingProfiles;
  }


  public DeviceProfile userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Gets or sets the UserId.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public DeviceProfile xmlRootAttributes(List<XmlAttribute> xmlRootAttributes) {
    this.xmlRootAttributes = xmlRootAttributes;
    return this;
  }

  public DeviceProfile addXmlRootAttributesItem(XmlAttribute xmlRootAttributesItem) {
    if (this.xmlRootAttributes == null) {
      this.xmlRootAttributes = new ArrayList<>();
    }
    this.xmlRootAttributes.add(xmlRootAttributesItem);
    return this;
  }

  /**
   * Gets or sets the XmlRootAttributes.
   * @return xmlRootAttributes
   */
  @javax.annotation.Nullable
  public List<XmlAttribute> getXmlRootAttributes() {
    return xmlRootAttributes;
  }

  public void setXmlRootAttributes(List<XmlAttribute> xmlRootAttributes) {
    this.xmlRootAttributes = xmlRootAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceProfile deviceProfile = (DeviceProfile) o;
    return Objects.equals(this.albumArtPn, deviceProfile.albumArtPn) &&
        Objects.equals(this.codecProfiles, deviceProfile.codecProfiles) &&
        Objects.equals(this.containerProfiles, deviceProfile.containerProfiles) &&
        Objects.equals(this.directPlayProfiles, deviceProfile.directPlayProfiles) &&
        Objects.equals(this.enableAlbumArtInDidl, deviceProfile.enableAlbumArtInDidl) &&
        Objects.equals(this.enableMSMediaReceiverRegistrar, deviceProfile.enableMSMediaReceiverRegistrar) &&
        Objects.equals(this.enableSingleAlbumArtLimit, deviceProfile.enableSingleAlbumArtLimit) &&
        Objects.equals(this.enableSingleSubtitleLimit, deviceProfile.enableSingleSubtitleLimit) &&
        Objects.equals(this.friendlyName, deviceProfile.friendlyName) &&
        Objects.equals(this.id, deviceProfile.id) &&
        Objects.equals(this.identification, deviceProfile.identification) &&
        Objects.equals(this.ignoreTranscodeByteRangeRequests, deviceProfile.ignoreTranscodeByteRangeRequests) &&
        Objects.equals(this.manufacturer, deviceProfile.manufacturer) &&
        Objects.equals(this.manufacturerUrl, deviceProfile.manufacturerUrl) &&
        Objects.equals(this.maxAlbumArtHeight, deviceProfile.maxAlbumArtHeight) &&
        Objects.equals(this.maxAlbumArtWidth, deviceProfile.maxAlbumArtWidth) &&
        Objects.equals(this.maxIconHeight, deviceProfile.maxIconHeight) &&
        Objects.equals(this.maxIconWidth, deviceProfile.maxIconWidth) &&
        Objects.equals(this.maxStaticBitrate, deviceProfile.maxStaticBitrate) &&
        Objects.equals(this.maxStaticMusicBitrate, deviceProfile.maxStaticMusicBitrate) &&
        Objects.equals(this.maxStreamingBitrate, deviceProfile.maxStreamingBitrate) &&
        Objects.equals(this.modelDescription, deviceProfile.modelDescription) &&
        Objects.equals(this.modelName, deviceProfile.modelName) &&
        Objects.equals(this.modelNumber, deviceProfile.modelNumber) &&
        Objects.equals(this.modelUrl, deviceProfile.modelUrl) &&
        Objects.equals(this.musicStreamingTranscodingBitrate, deviceProfile.musicStreamingTranscodingBitrate) &&
        Objects.equals(this.name, deviceProfile.name) &&
        Objects.equals(this.protocolInfo, deviceProfile.protocolInfo) &&
        Objects.equals(this.requiresPlainFolders, deviceProfile.requiresPlainFolders) &&
        Objects.equals(this.requiresPlainVideoItems, deviceProfile.requiresPlainVideoItems) &&
        Objects.equals(this.responseProfiles, deviceProfile.responseProfiles) &&
        Objects.equals(this.serialNumber, deviceProfile.serialNumber) &&
        Objects.equals(this.sonyAggregationFlags, deviceProfile.sonyAggregationFlags) &&
        Objects.equals(this.subtitleProfiles, deviceProfile.subtitleProfiles) &&
        Objects.equals(this.supportedMediaTypes, deviceProfile.supportedMediaTypes) &&
        Objects.equals(this.timelineOffsetSeconds, deviceProfile.timelineOffsetSeconds) &&
        Objects.equals(this.transcodingProfiles, deviceProfile.transcodingProfiles) &&
        Objects.equals(this.userId, deviceProfile.userId) &&
        Objects.equals(this.xmlRootAttributes, deviceProfile.xmlRootAttributes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumArtPn, codecProfiles, containerProfiles, directPlayProfiles, enableAlbumArtInDidl, enableMSMediaReceiverRegistrar, enableSingleAlbumArtLimit, enableSingleSubtitleLimit, friendlyName, id, identification, ignoreTranscodeByteRangeRequests, manufacturer, manufacturerUrl, maxAlbumArtHeight, maxAlbumArtWidth, maxIconHeight, maxIconWidth, maxStaticBitrate, maxStaticMusicBitrate, maxStreamingBitrate, modelDescription, modelName, modelNumber, modelUrl, musicStreamingTranscodingBitrate, name, protocolInfo, requiresPlainFolders, requiresPlainVideoItems, responseProfiles, serialNumber, sonyAggregationFlags, subtitleProfiles, supportedMediaTypes, timelineOffsetSeconds, transcodingProfiles, userId, xmlRootAttributes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceProfile {\n");
    sb.append("    albumArtPn: ").append(toIndentedString(albumArtPn)).append("\n");
    sb.append("    codecProfiles: ").append(toIndentedString(codecProfiles)).append("\n");
    sb.append("    containerProfiles: ").append(toIndentedString(containerProfiles)).append("\n");
    sb.append("    directPlayProfiles: ").append(toIndentedString(directPlayProfiles)).append("\n");
    sb.append("    enableAlbumArtInDidl: ").append(toIndentedString(enableAlbumArtInDidl)).append("\n");
    sb.append("    enableMSMediaReceiverRegistrar: ").append(toIndentedString(enableMSMediaReceiverRegistrar)).append("\n");
    sb.append("    enableSingleAlbumArtLimit: ").append(toIndentedString(enableSingleAlbumArtLimit)).append("\n");
    sb.append("    enableSingleSubtitleLimit: ").append(toIndentedString(enableSingleSubtitleLimit)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    ignoreTranscodeByteRangeRequests: ").append(toIndentedString(ignoreTranscodeByteRangeRequests)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    manufacturerUrl: ").append(toIndentedString(manufacturerUrl)).append("\n");
    sb.append("    maxAlbumArtHeight: ").append(toIndentedString(maxAlbumArtHeight)).append("\n");
    sb.append("    maxAlbumArtWidth: ").append(toIndentedString(maxAlbumArtWidth)).append("\n");
    sb.append("    maxIconHeight: ").append(toIndentedString(maxIconHeight)).append("\n");
    sb.append("    maxIconWidth: ").append(toIndentedString(maxIconWidth)).append("\n");
    sb.append("    maxStaticBitrate: ").append(toIndentedString(maxStaticBitrate)).append("\n");
    sb.append("    maxStaticMusicBitrate: ").append(toIndentedString(maxStaticMusicBitrate)).append("\n");
    sb.append("    maxStreamingBitrate: ").append(toIndentedString(maxStreamingBitrate)).append("\n");
    sb.append("    modelDescription: ").append(toIndentedString(modelDescription)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    modelNumber: ").append(toIndentedString(modelNumber)).append("\n");
    sb.append("    modelUrl: ").append(toIndentedString(modelUrl)).append("\n");
    sb.append("    musicStreamingTranscodingBitrate: ").append(toIndentedString(musicStreamingTranscodingBitrate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocolInfo: ").append(toIndentedString(protocolInfo)).append("\n");
    sb.append("    requiresPlainFolders: ").append(toIndentedString(requiresPlainFolders)).append("\n");
    sb.append("    requiresPlainVideoItems: ").append(toIndentedString(requiresPlainVideoItems)).append("\n");
    sb.append("    responseProfiles: ").append(toIndentedString(responseProfiles)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    sonyAggregationFlags: ").append(toIndentedString(sonyAggregationFlags)).append("\n");
    sb.append("    subtitleProfiles: ").append(toIndentedString(subtitleProfiles)).append("\n");
    sb.append("    supportedMediaTypes: ").append(toIndentedString(supportedMediaTypes)).append("\n");
    sb.append("    timelineOffsetSeconds: ").append(toIndentedString(timelineOffsetSeconds)).append("\n");
    sb.append("    transcodingProfiles: ").append(toIndentedString(transcodingProfiles)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    xmlRootAttributes: ").append(toIndentedString(xmlRootAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlbumArtPn");
    openapiFields.add("CodecProfiles");
    openapiFields.add("ContainerProfiles");
    openapiFields.add("DirectPlayProfiles");
    openapiFields.add("EnableAlbumArtInDidl");
    openapiFields.add("EnableMSMediaReceiverRegistrar");
    openapiFields.add("EnableSingleAlbumArtLimit");
    openapiFields.add("EnableSingleSubtitleLimit");
    openapiFields.add("FriendlyName");
    openapiFields.add("Id");
    openapiFields.add("Identification");
    openapiFields.add("IgnoreTranscodeByteRangeRequests");
    openapiFields.add("Manufacturer");
    openapiFields.add("ManufacturerUrl");
    openapiFields.add("MaxAlbumArtHeight");
    openapiFields.add("MaxAlbumArtWidth");
    openapiFields.add("MaxIconHeight");
    openapiFields.add("MaxIconWidth");
    openapiFields.add("MaxStaticBitrate");
    openapiFields.add("MaxStaticMusicBitrate");
    openapiFields.add("MaxStreamingBitrate");
    openapiFields.add("ModelDescription");
    openapiFields.add("ModelName");
    openapiFields.add("ModelNumber");
    openapiFields.add("ModelUrl");
    openapiFields.add("MusicStreamingTranscodingBitrate");
    openapiFields.add("Name");
    openapiFields.add("ProtocolInfo");
    openapiFields.add("RequiresPlainFolders");
    openapiFields.add("RequiresPlainVideoItems");
    openapiFields.add("ResponseProfiles");
    openapiFields.add("SerialNumber");
    openapiFields.add("SonyAggregationFlags");
    openapiFields.add("SubtitleProfiles");
    openapiFields.add("SupportedMediaTypes");
    openapiFields.add("TimelineOffsetSeconds");
    openapiFields.add("TranscodingProfiles");
    openapiFields.add("UserId");
    openapiFields.add("XmlRootAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceProfile is not found in the empty JSON string", DeviceProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AlbumArtPn") != null && !jsonObj.get("AlbumArtPn").isJsonNull()) && !jsonObj.get("AlbumArtPn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlbumArtPn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlbumArtPn").toString()));
      }
      if (jsonObj.get("CodecProfiles") != null && !jsonObj.get("CodecProfiles").isJsonNull()) {
        JsonArray jsonArraycodecProfiles = jsonObj.getAsJsonArray("CodecProfiles");
        if (jsonArraycodecProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CodecProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CodecProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("CodecProfiles").toString()));
          }

          // validate the optional field `CodecProfiles` (array)
          for (int i = 0; i < jsonArraycodecProfiles.size(); i++) {
            CodecProfile.validateJsonElement(jsonArraycodecProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("ContainerProfiles") != null && !jsonObj.get("ContainerProfiles").isJsonNull()) {
        JsonArray jsonArraycontainerProfiles = jsonObj.getAsJsonArray("ContainerProfiles");
        if (jsonArraycontainerProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ContainerProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ContainerProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("ContainerProfiles").toString()));
          }

          // validate the optional field `ContainerProfiles` (array)
          for (int i = 0; i < jsonArraycontainerProfiles.size(); i++) {
            ContainerProfile.validateJsonElement(jsonArraycontainerProfiles.get(i));
          };
        }
      }
      if (jsonObj.get("DirectPlayProfiles") != null && !jsonObj.get("DirectPlayProfiles").isJsonNull()) {
        JsonArray jsonArraydirectPlayProfiles = jsonObj.getAsJsonArray("DirectPlayProfiles");
        if (jsonArraydirectPlayProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DirectPlayProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DirectPlayProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("DirectPlayProfiles").toString()));
          }

          // validate the optional field `DirectPlayProfiles` (array)
          for (int i = 0; i < jsonArraydirectPlayProfiles.size(); i++) {
            DirectPlayProfile.validateJsonElement(jsonArraydirectPlayProfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("FriendlyName") != null && !jsonObj.get("FriendlyName").isJsonNull()) && !jsonObj.get("FriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FriendlyName").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `Identification`
      if (jsonObj.get("Identification") != null && !jsonObj.get("Identification").isJsonNull()) {
        DeviceIdentification.validateJsonElement(jsonObj.get("Identification"));
      }
      if ((jsonObj.get("Manufacturer") != null && !jsonObj.get("Manufacturer").isJsonNull()) && !jsonObj.get("Manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Manufacturer").toString()));
      }
      if ((jsonObj.get("ManufacturerUrl") != null && !jsonObj.get("ManufacturerUrl").isJsonNull()) && !jsonObj.get("ManufacturerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ManufacturerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ManufacturerUrl").toString()));
      }
      if ((jsonObj.get("ModelDescription") != null && !jsonObj.get("ModelDescription").isJsonNull()) && !jsonObj.get("ModelDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelDescription").toString()));
      }
      if ((jsonObj.get("ModelName") != null && !jsonObj.get("ModelName").isJsonNull()) && !jsonObj.get("ModelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelName").toString()));
      }
      if ((jsonObj.get("ModelNumber") != null && !jsonObj.get("ModelNumber").isJsonNull()) && !jsonObj.get("ModelNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelNumber").toString()));
      }
      if ((jsonObj.get("ModelUrl") != null && !jsonObj.get("ModelUrl").isJsonNull()) && !jsonObj.get("ModelUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelUrl").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ProtocolInfo") != null && !jsonObj.get("ProtocolInfo").isJsonNull()) && !jsonObj.get("ProtocolInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProtocolInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProtocolInfo").toString()));
      }
      if (jsonObj.get("ResponseProfiles") != null && !jsonObj.get("ResponseProfiles").isJsonNull()) {
        JsonArray jsonArrayresponseProfiles = jsonObj.getAsJsonArray("ResponseProfiles");
        if (jsonArrayresponseProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ResponseProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ResponseProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("ResponseProfiles").toString()));
          }

          // validate the optional field `ResponseProfiles` (array)
          for (int i = 0; i < jsonArrayresponseProfiles.size(); i++) {
            ResponseProfile.validateJsonElement(jsonArrayresponseProfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("SerialNumber") != null && !jsonObj.get("SerialNumber").isJsonNull()) && !jsonObj.get("SerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SerialNumber").toString()));
      }
      if ((jsonObj.get("SonyAggregationFlags") != null && !jsonObj.get("SonyAggregationFlags").isJsonNull()) && !jsonObj.get("SonyAggregationFlags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SonyAggregationFlags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SonyAggregationFlags").toString()));
      }
      if (jsonObj.get("SubtitleProfiles") != null && !jsonObj.get("SubtitleProfiles").isJsonNull()) {
        JsonArray jsonArraysubtitleProfiles = jsonObj.getAsJsonArray("SubtitleProfiles");
        if (jsonArraysubtitleProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SubtitleProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SubtitleProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("SubtitleProfiles").toString()));
          }

          // validate the optional field `SubtitleProfiles` (array)
          for (int i = 0; i < jsonArraysubtitleProfiles.size(); i++) {
            SubtitleProfile.validateJsonElement(jsonArraysubtitleProfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("SupportedMediaTypes") != null && !jsonObj.get("SupportedMediaTypes").isJsonNull()) && !jsonObj.get("SupportedMediaTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedMediaTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SupportedMediaTypes").toString()));
      }
      if (jsonObj.get("TranscodingProfiles") != null && !jsonObj.get("TranscodingProfiles").isJsonNull()) {
        JsonArray jsonArraytranscodingProfiles = jsonObj.getAsJsonArray("TranscodingProfiles");
        if (jsonArraytranscodingProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TranscodingProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TranscodingProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("TranscodingProfiles").toString()));
          }

          // validate the optional field `TranscodingProfiles` (array)
          for (int i = 0; i < jsonArraytranscodingProfiles.size(); i++) {
            TranscodingProfile.validateJsonElement(jsonArraytranscodingProfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) && !jsonObj.get("UserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserId").toString()));
      }
      if (jsonObj.get("XmlRootAttributes") != null && !jsonObj.get("XmlRootAttributes").isJsonNull()) {
        JsonArray jsonArrayxmlRootAttributes = jsonObj.getAsJsonArray("XmlRootAttributes");
        if (jsonArrayxmlRootAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("XmlRootAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `XmlRootAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("XmlRootAttributes").toString()));
          }

          // validate the optional field `XmlRootAttributes` (array)
          for (int i = 0; i < jsonArrayxmlRootAttributes.size(); i++) {
            XmlAttribute.validateJsonElement(jsonArrayxmlRootAttributes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceProfile>() {
           @Override
           public void write(JsonWriter out, DeviceProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceProfile
   * @throws IOException if the JSON string is invalid with respect to DeviceProfile
   */
  public static DeviceProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceProfile.class);
  }

  /**
   * Convert an instance of DeviceProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

