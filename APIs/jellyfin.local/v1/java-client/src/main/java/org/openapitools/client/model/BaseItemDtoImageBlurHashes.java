/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gets or sets the blurhashes for the image tags.  Maps image type to dictionary mapping image tag to blurhash value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseItemDtoImageBlurHashes {
  public static final String SERIALIZED_NAME_ART = "Art";
  @SerializedName(SERIALIZED_NAME_ART)
  private Map<String, String> art = new HashMap<>();

  public static final String SERIALIZED_NAME_BACKDROP = "Backdrop";
  @SerializedName(SERIALIZED_NAME_BACKDROP)
  private Map<String, String> backdrop = new HashMap<>();

  public static final String SERIALIZED_NAME_BANNER = "Banner";
  @SerializedName(SERIALIZED_NAME_BANNER)
  private Map<String, String> banner = new HashMap<>();

  public static final String SERIALIZED_NAME_BOX = "Box";
  @SerializedName(SERIALIZED_NAME_BOX)
  private Map<String, String> box = new HashMap<>();

  public static final String SERIALIZED_NAME_BOX_REAR = "BoxRear";
  @SerializedName(SERIALIZED_NAME_BOX_REAR)
  private Map<String, String> boxRear = new HashMap<>();

  public static final String SERIALIZED_NAME_CHAPTER = "Chapter";
  @SerializedName(SERIALIZED_NAME_CHAPTER)
  private Map<String, String> chapter = new HashMap<>();

  public static final String SERIALIZED_NAME_DISC = "Disc";
  @SerializedName(SERIALIZED_NAME_DISC)
  private Map<String, String> disc = new HashMap<>();

  public static final String SERIALIZED_NAME_LOGO = "Logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private Map<String, String> logo = new HashMap<>();

  public static final String SERIALIZED_NAME_MENU = "Menu";
  @SerializedName(SERIALIZED_NAME_MENU)
  private Map<String, String> menu = new HashMap<>();

  public static final String SERIALIZED_NAME_PRIMARY = "Primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Map<String, String> primary = new HashMap<>();

  public static final String SERIALIZED_NAME_PROFILE = "Profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private Map<String, String> profile = new HashMap<>();

  public static final String SERIALIZED_NAME_SCREENSHOT = "Screenshot";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT)
  private Map<String, String> screenshot = new HashMap<>();

  public static final String SERIALIZED_NAME_THUMB = "Thumb";
  @SerializedName(SERIALIZED_NAME_THUMB)
  private Map<String, String> thumb = new HashMap<>();

  public BaseItemDtoImageBlurHashes() {
  }

  public BaseItemDtoImageBlurHashes art(Map<String, String> art) {
    this.art = art;
    return this;
  }

  public BaseItemDtoImageBlurHashes putArtItem(String key, String artItem) {
    if (this.art == null) {
      this.art = new HashMap<>();
    }
    this.art.put(key, artItem);
    return this;
  }

  /**
   * Get art
   * @return art
   */
  @javax.annotation.Nullable
  public Map<String, String> getArt() {
    return art;
  }

  public void setArt(Map<String, String> art) {
    this.art = art;
  }


  public BaseItemDtoImageBlurHashes backdrop(Map<String, String> backdrop) {
    this.backdrop = backdrop;
    return this;
  }

  public BaseItemDtoImageBlurHashes putBackdropItem(String key, String backdropItem) {
    if (this.backdrop == null) {
      this.backdrop = new HashMap<>();
    }
    this.backdrop.put(key, backdropItem);
    return this;
  }

  /**
   * Get backdrop
   * @return backdrop
   */
  @javax.annotation.Nullable
  public Map<String, String> getBackdrop() {
    return backdrop;
  }

  public void setBackdrop(Map<String, String> backdrop) {
    this.backdrop = backdrop;
  }


  public BaseItemDtoImageBlurHashes banner(Map<String, String> banner) {
    this.banner = banner;
    return this;
  }

  public BaseItemDtoImageBlurHashes putBannerItem(String key, String bannerItem) {
    if (this.banner == null) {
      this.banner = new HashMap<>();
    }
    this.banner.put(key, bannerItem);
    return this;
  }

  /**
   * Get banner
   * @return banner
   */
  @javax.annotation.Nullable
  public Map<String, String> getBanner() {
    return banner;
  }

  public void setBanner(Map<String, String> banner) {
    this.banner = banner;
  }


  public BaseItemDtoImageBlurHashes box(Map<String, String> box) {
    this.box = box;
    return this;
  }

  public BaseItemDtoImageBlurHashes putBoxItem(String key, String boxItem) {
    if (this.box == null) {
      this.box = new HashMap<>();
    }
    this.box.put(key, boxItem);
    return this;
  }

  /**
   * Get box
   * @return box
   */
  @javax.annotation.Nullable
  public Map<String, String> getBox() {
    return box;
  }

  public void setBox(Map<String, String> box) {
    this.box = box;
  }


  public BaseItemDtoImageBlurHashes boxRear(Map<String, String> boxRear) {
    this.boxRear = boxRear;
    return this;
  }

  public BaseItemDtoImageBlurHashes putBoxRearItem(String key, String boxRearItem) {
    if (this.boxRear == null) {
      this.boxRear = new HashMap<>();
    }
    this.boxRear.put(key, boxRearItem);
    return this;
  }

  /**
   * Get boxRear
   * @return boxRear
   */
  @javax.annotation.Nullable
  public Map<String, String> getBoxRear() {
    return boxRear;
  }

  public void setBoxRear(Map<String, String> boxRear) {
    this.boxRear = boxRear;
  }


  public BaseItemDtoImageBlurHashes chapter(Map<String, String> chapter) {
    this.chapter = chapter;
    return this;
  }

  public BaseItemDtoImageBlurHashes putChapterItem(String key, String chapterItem) {
    if (this.chapter == null) {
      this.chapter = new HashMap<>();
    }
    this.chapter.put(key, chapterItem);
    return this;
  }

  /**
   * Get chapter
   * @return chapter
   */
  @javax.annotation.Nullable
  public Map<String, String> getChapter() {
    return chapter;
  }

  public void setChapter(Map<String, String> chapter) {
    this.chapter = chapter;
  }


  public BaseItemDtoImageBlurHashes disc(Map<String, String> disc) {
    this.disc = disc;
    return this;
  }

  public BaseItemDtoImageBlurHashes putDiscItem(String key, String discItem) {
    if (this.disc == null) {
      this.disc = new HashMap<>();
    }
    this.disc.put(key, discItem);
    return this;
  }

  /**
   * Get disc
   * @return disc
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisc() {
    return disc;
  }

  public void setDisc(Map<String, String> disc) {
    this.disc = disc;
  }


  public BaseItemDtoImageBlurHashes logo(Map<String, String> logo) {
    this.logo = logo;
    return this;
  }

  public BaseItemDtoImageBlurHashes putLogoItem(String key, String logoItem) {
    if (this.logo == null) {
      this.logo = new HashMap<>();
    }
    this.logo.put(key, logoItem);
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public Map<String, String> getLogo() {
    return logo;
  }

  public void setLogo(Map<String, String> logo) {
    this.logo = logo;
  }


  public BaseItemDtoImageBlurHashes menu(Map<String, String> menu) {
    this.menu = menu;
    return this;
  }

  public BaseItemDtoImageBlurHashes putMenuItem(String key, String menuItem) {
    if (this.menu == null) {
      this.menu = new HashMap<>();
    }
    this.menu.put(key, menuItem);
    return this;
  }

  /**
   * Get menu
   * @return menu
   */
  @javax.annotation.Nullable
  public Map<String, String> getMenu() {
    return menu;
  }

  public void setMenu(Map<String, String> menu) {
    this.menu = menu;
  }


  public BaseItemDtoImageBlurHashes primary(Map<String, String> primary) {
    this.primary = primary;
    return this;
  }

  public BaseItemDtoImageBlurHashes putPrimaryItem(String key, String primaryItem) {
    if (this.primary == null) {
      this.primary = new HashMap<>();
    }
    this.primary.put(key, primaryItem);
    return this;
  }

  /**
   * Get primary
   * @return primary
   */
  @javax.annotation.Nullable
  public Map<String, String> getPrimary() {
    return primary;
  }

  public void setPrimary(Map<String, String> primary) {
    this.primary = primary;
  }


  public BaseItemDtoImageBlurHashes profile(Map<String, String> profile) {
    this.profile = profile;
    return this;
  }

  public BaseItemDtoImageBlurHashes putProfileItem(String key, String profileItem) {
    if (this.profile == null) {
      this.profile = new HashMap<>();
    }
    this.profile.put(key, profileItem);
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public Map<String, String> getProfile() {
    return profile;
  }

  public void setProfile(Map<String, String> profile) {
    this.profile = profile;
  }


  public BaseItemDtoImageBlurHashes screenshot(Map<String, String> screenshot) {
    this.screenshot = screenshot;
    return this;
  }

  public BaseItemDtoImageBlurHashes putScreenshotItem(String key, String screenshotItem) {
    if (this.screenshot == null) {
      this.screenshot = new HashMap<>();
    }
    this.screenshot.put(key, screenshotItem);
    return this;
  }

  /**
   * Get screenshot
   * @return screenshot
   */
  @javax.annotation.Nullable
  public Map<String, String> getScreenshot() {
    return screenshot;
  }

  public void setScreenshot(Map<String, String> screenshot) {
    this.screenshot = screenshot;
  }


  public BaseItemDtoImageBlurHashes thumb(Map<String, String> thumb) {
    this.thumb = thumb;
    return this;
  }

  public BaseItemDtoImageBlurHashes putThumbItem(String key, String thumbItem) {
    if (this.thumb == null) {
      this.thumb = new HashMap<>();
    }
    this.thumb.put(key, thumbItem);
    return this;
  }

  /**
   * Get thumb
   * @return thumb
   */
  @javax.annotation.Nullable
  public Map<String, String> getThumb() {
    return thumb;
  }

  public void setThumb(Map<String, String> thumb) {
    this.thumb = thumb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseItemDtoImageBlurHashes baseItemDtoImageBlurHashes = (BaseItemDtoImageBlurHashes) o;
    return Objects.equals(this.art, baseItemDtoImageBlurHashes.art) &&
        Objects.equals(this.backdrop, baseItemDtoImageBlurHashes.backdrop) &&
        Objects.equals(this.banner, baseItemDtoImageBlurHashes.banner) &&
        Objects.equals(this.box, baseItemDtoImageBlurHashes.box) &&
        Objects.equals(this.boxRear, baseItemDtoImageBlurHashes.boxRear) &&
        Objects.equals(this.chapter, baseItemDtoImageBlurHashes.chapter) &&
        Objects.equals(this.disc, baseItemDtoImageBlurHashes.disc) &&
        Objects.equals(this.logo, baseItemDtoImageBlurHashes.logo) &&
        Objects.equals(this.menu, baseItemDtoImageBlurHashes.menu) &&
        Objects.equals(this.primary, baseItemDtoImageBlurHashes.primary) &&
        Objects.equals(this.profile, baseItemDtoImageBlurHashes.profile) &&
        Objects.equals(this.screenshot, baseItemDtoImageBlurHashes.screenshot) &&
        Objects.equals(this.thumb, baseItemDtoImageBlurHashes.thumb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(art, backdrop, banner, box, boxRear, chapter, disc, logo, menu, primary, profile, screenshot, thumb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseItemDtoImageBlurHashes {\n");
    sb.append("    art: ").append(toIndentedString(art)).append("\n");
    sb.append("    backdrop: ").append(toIndentedString(backdrop)).append("\n");
    sb.append("    banner: ").append(toIndentedString(banner)).append("\n");
    sb.append("    box: ").append(toIndentedString(box)).append("\n");
    sb.append("    boxRear: ").append(toIndentedString(boxRear)).append("\n");
    sb.append("    chapter: ").append(toIndentedString(chapter)).append("\n");
    sb.append("    disc: ").append(toIndentedString(disc)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    menu: ").append(toIndentedString(menu)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    screenshot: ").append(toIndentedString(screenshot)).append("\n");
    sb.append("    thumb: ").append(toIndentedString(thumb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Art");
    openapiFields.add("Backdrop");
    openapiFields.add("Banner");
    openapiFields.add("Box");
    openapiFields.add("BoxRear");
    openapiFields.add("Chapter");
    openapiFields.add("Disc");
    openapiFields.add("Logo");
    openapiFields.add("Menu");
    openapiFields.add("Primary");
    openapiFields.add("Profile");
    openapiFields.add("Screenshot");
    openapiFields.add("Thumb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseItemDtoImageBlurHashes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseItemDtoImageBlurHashes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseItemDtoImageBlurHashes is not found in the empty JSON string", BaseItemDtoImageBlurHashes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BaseItemDtoImageBlurHashes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaseItemDtoImageBlurHashes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseItemDtoImageBlurHashes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseItemDtoImageBlurHashes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseItemDtoImageBlurHashes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseItemDtoImageBlurHashes.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseItemDtoImageBlurHashes>() {
           @Override
           public void write(JsonWriter out, BaseItemDtoImageBlurHashes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseItemDtoImageBlurHashes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BaseItemDtoImageBlurHashes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseItemDtoImageBlurHashes
   * @throws IOException if the JSON string is invalid with respect to BaseItemDtoImageBlurHashes
   */
  public static BaseItemDtoImageBlurHashes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseItemDtoImageBlurHashes.class);
  }

  /**
   * Convert an instance of BaseItemDtoImageBlurHashes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

