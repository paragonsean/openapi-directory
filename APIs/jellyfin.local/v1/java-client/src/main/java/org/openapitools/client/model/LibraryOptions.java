/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MediaPathInfo;
import org.openapitools.client.model.TypeOptions;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LibraryOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:15.226132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LibraryOptions {
  public static final String SERIALIZED_NAME_AUTOMATIC_REFRESH_INTERVAL_DAYS = "AutomaticRefreshIntervalDays";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_REFRESH_INTERVAL_DAYS)
  private Integer automaticRefreshIntervalDays;

  public static final String SERIALIZED_NAME_DISABLED_LOCAL_METADATA_READERS = "DisabledLocalMetadataReaders";
  @SerializedName(SERIALIZED_NAME_DISABLED_LOCAL_METADATA_READERS)
  private List<String> disabledLocalMetadataReaders;

  public static final String SERIALIZED_NAME_DISABLED_SUBTITLE_FETCHERS = "DisabledSubtitleFetchers";
  @SerializedName(SERIALIZED_NAME_DISABLED_SUBTITLE_FETCHERS)
  private List<String> disabledSubtitleFetchers;

  public static final String SERIALIZED_NAME_ENABLE_AUTOMATIC_SERIES_GROUPING = "EnableAutomaticSeriesGrouping";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTOMATIC_SERIES_GROUPING)
  private Boolean enableAutomaticSeriesGrouping;

  public static final String SERIALIZED_NAME_ENABLE_CHAPTER_IMAGE_EXTRACTION = "EnableChapterImageExtraction";
  @SerializedName(SERIALIZED_NAME_ENABLE_CHAPTER_IMAGE_EXTRACTION)
  private Boolean enableChapterImageExtraction;

  public static final String SERIALIZED_NAME_ENABLE_EMBEDDED_EPISODE_INFOS = "EnableEmbeddedEpisodeInfos";
  @SerializedName(SERIALIZED_NAME_ENABLE_EMBEDDED_EPISODE_INFOS)
  private Boolean enableEmbeddedEpisodeInfos;

  public static final String SERIALIZED_NAME_ENABLE_EMBEDDED_TITLES = "EnableEmbeddedTitles";
  @SerializedName(SERIALIZED_NAME_ENABLE_EMBEDDED_TITLES)
  private Boolean enableEmbeddedTitles;

  public static final String SERIALIZED_NAME_ENABLE_INTERNET_PROVIDERS = "EnableInternetProviders";
  @SerializedName(SERIALIZED_NAME_ENABLE_INTERNET_PROVIDERS)
  private Boolean enableInternetProviders;

  public static final String SERIALIZED_NAME_ENABLE_PHOTOS = "EnablePhotos";
  @SerializedName(SERIALIZED_NAME_ENABLE_PHOTOS)
  private Boolean enablePhotos;

  public static final String SERIALIZED_NAME_ENABLE_REALTIME_MONITOR = "EnableRealtimeMonitor";
  @SerializedName(SERIALIZED_NAME_ENABLE_REALTIME_MONITOR)
  private Boolean enableRealtimeMonitor;

  public static final String SERIALIZED_NAME_EXTRACT_CHAPTER_IMAGES_DURING_LIBRARY_SCAN = "ExtractChapterImagesDuringLibraryScan";
  @SerializedName(SERIALIZED_NAME_EXTRACT_CHAPTER_IMAGES_DURING_LIBRARY_SCAN)
  private Boolean extractChapterImagesDuringLibraryScan;

  public static final String SERIALIZED_NAME_LOCAL_METADATA_READER_ORDER = "LocalMetadataReaderOrder";
  @SerializedName(SERIALIZED_NAME_LOCAL_METADATA_READER_ORDER)
  private List<String> localMetadataReaderOrder;

  public static final String SERIALIZED_NAME_METADATA_COUNTRY_CODE = "MetadataCountryCode";
  @SerializedName(SERIALIZED_NAME_METADATA_COUNTRY_CODE)
  private String metadataCountryCode;

  public static final String SERIALIZED_NAME_METADATA_SAVERS = "MetadataSavers";
  @SerializedName(SERIALIZED_NAME_METADATA_SAVERS)
  private List<String> metadataSavers;

  public static final String SERIALIZED_NAME_PATH_INFOS = "PathInfos";
  @SerializedName(SERIALIZED_NAME_PATH_INFOS)
  private List<MediaPathInfo> pathInfos;

  public static final String SERIALIZED_NAME_PREFERRED_METADATA_LANGUAGE = "PreferredMetadataLanguage";
  @SerializedName(SERIALIZED_NAME_PREFERRED_METADATA_LANGUAGE)
  private String preferredMetadataLanguage;

  public static final String SERIALIZED_NAME_REQUIRE_PERFECT_SUBTITLE_MATCH = "RequirePerfectSubtitleMatch";
  @SerializedName(SERIALIZED_NAME_REQUIRE_PERFECT_SUBTITLE_MATCH)
  private Boolean requirePerfectSubtitleMatch;

  public static final String SERIALIZED_NAME_SAVE_LOCAL_METADATA = "SaveLocalMetadata";
  @SerializedName(SERIALIZED_NAME_SAVE_LOCAL_METADATA)
  private Boolean saveLocalMetadata;

  public static final String SERIALIZED_NAME_SAVE_SUBTITLES_WITH_MEDIA = "SaveSubtitlesWithMedia";
  @SerializedName(SERIALIZED_NAME_SAVE_SUBTITLES_WITH_MEDIA)
  private Boolean saveSubtitlesWithMedia;

  public static final String SERIALIZED_NAME_SEASON_ZERO_DISPLAY_NAME = "SeasonZeroDisplayName";
  @SerializedName(SERIALIZED_NAME_SEASON_ZERO_DISPLAY_NAME)
  private String seasonZeroDisplayName;

  public static final String SERIALIZED_NAME_SKIP_SUBTITLES_IF_AUDIO_TRACK_MATCHES = "SkipSubtitlesIfAudioTrackMatches";
  @SerializedName(SERIALIZED_NAME_SKIP_SUBTITLES_IF_AUDIO_TRACK_MATCHES)
  private Boolean skipSubtitlesIfAudioTrackMatches;

  public static final String SERIALIZED_NAME_SKIP_SUBTITLES_IF_EMBEDDED_SUBTITLES_PRESENT = "SkipSubtitlesIfEmbeddedSubtitlesPresent";
  @SerializedName(SERIALIZED_NAME_SKIP_SUBTITLES_IF_EMBEDDED_SUBTITLES_PRESENT)
  private Boolean skipSubtitlesIfEmbeddedSubtitlesPresent;

  public static final String SERIALIZED_NAME_SUBTITLE_DOWNLOAD_LANGUAGES = "SubtitleDownloadLanguages";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_DOWNLOAD_LANGUAGES)
  private List<String> subtitleDownloadLanguages;

  public static final String SERIALIZED_NAME_SUBTITLE_FETCHER_ORDER = "SubtitleFetcherOrder";
  @SerializedName(SERIALIZED_NAME_SUBTITLE_FETCHER_ORDER)
  private List<String> subtitleFetcherOrder;

  public static final String SERIALIZED_NAME_TYPE_OPTIONS = "TypeOptions";
  @SerializedName(SERIALIZED_NAME_TYPE_OPTIONS)
  private List<TypeOptions> typeOptions;

  public LibraryOptions() {
  }

  public LibraryOptions automaticRefreshIntervalDays(Integer automaticRefreshIntervalDays) {
    this.automaticRefreshIntervalDays = automaticRefreshIntervalDays;
    return this;
  }

  /**
   * Get automaticRefreshIntervalDays
   * @return automaticRefreshIntervalDays
   */
  @javax.annotation.Nullable
  public Integer getAutomaticRefreshIntervalDays() {
    return automaticRefreshIntervalDays;
  }

  public void setAutomaticRefreshIntervalDays(Integer automaticRefreshIntervalDays) {
    this.automaticRefreshIntervalDays = automaticRefreshIntervalDays;
  }


  public LibraryOptions disabledLocalMetadataReaders(List<String> disabledLocalMetadataReaders) {
    this.disabledLocalMetadataReaders = disabledLocalMetadataReaders;
    return this;
  }

  public LibraryOptions addDisabledLocalMetadataReadersItem(String disabledLocalMetadataReadersItem) {
    if (this.disabledLocalMetadataReaders == null) {
      this.disabledLocalMetadataReaders = new ArrayList<>();
    }
    this.disabledLocalMetadataReaders.add(disabledLocalMetadataReadersItem);
    return this;
  }

  /**
   * Get disabledLocalMetadataReaders
   * @return disabledLocalMetadataReaders
   */
  @javax.annotation.Nullable
  public List<String> getDisabledLocalMetadataReaders() {
    return disabledLocalMetadataReaders;
  }

  public void setDisabledLocalMetadataReaders(List<String> disabledLocalMetadataReaders) {
    this.disabledLocalMetadataReaders = disabledLocalMetadataReaders;
  }


  public LibraryOptions disabledSubtitleFetchers(List<String> disabledSubtitleFetchers) {
    this.disabledSubtitleFetchers = disabledSubtitleFetchers;
    return this;
  }

  public LibraryOptions addDisabledSubtitleFetchersItem(String disabledSubtitleFetchersItem) {
    if (this.disabledSubtitleFetchers == null) {
      this.disabledSubtitleFetchers = new ArrayList<>();
    }
    this.disabledSubtitleFetchers.add(disabledSubtitleFetchersItem);
    return this;
  }

  /**
   * Get disabledSubtitleFetchers
   * @return disabledSubtitleFetchers
   */
  @javax.annotation.Nullable
  public List<String> getDisabledSubtitleFetchers() {
    return disabledSubtitleFetchers;
  }

  public void setDisabledSubtitleFetchers(List<String> disabledSubtitleFetchers) {
    this.disabledSubtitleFetchers = disabledSubtitleFetchers;
  }


  public LibraryOptions enableAutomaticSeriesGrouping(Boolean enableAutomaticSeriesGrouping) {
    this.enableAutomaticSeriesGrouping = enableAutomaticSeriesGrouping;
    return this;
  }

  /**
   * Get enableAutomaticSeriesGrouping
   * @return enableAutomaticSeriesGrouping
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutomaticSeriesGrouping() {
    return enableAutomaticSeriesGrouping;
  }

  public void setEnableAutomaticSeriesGrouping(Boolean enableAutomaticSeriesGrouping) {
    this.enableAutomaticSeriesGrouping = enableAutomaticSeriesGrouping;
  }


  public LibraryOptions enableChapterImageExtraction(Boolean enableChapterImageExtraction) {
    this.enableChapterImageExtraction = enableChapterImageExtraction;
    return this;
  }

  /**
   * Get enableChapterImageExtraction
   * @return enableChapterImageExtraction
   */
  @javax.annotation.Nullable
  public Boolean getEnableChapterImageExtraction() {
    return enableChapterImageExtraction;
  }

  public void setEnableChapterImageExtraction(Boolean enableChapterImageExtraction) {
    this.enableChapterImageExtraction = enableChapterImageExtraction;
  }


  public LibraryOptions enableEmbeddedEpisodeInfos(Boolean enableEmbeddedEpisodeInfos) {
    this.enableEmbeddedEpisodeInfos = enableEmbeddedEpisodeInfos;
    return this;
  }

  /**
   * Get enableEmbeddedEpisodeInfos
   * @return enableEmbeddedEpisodeInfos
   */
  @javax.annotation.Nullable
  public Boolean getEnableEmbeddedEpisodeInfos() {
    return enableEmbeddedEpisodeInfos;
  }

  public void setEnableEmbeddedEpisodeInfos(Boolean enableEmbeddedEpisodeInfos) {
    this.enableEmbeddedEpisodeInfos = enableEmbeddedEpisodeInfos;
  }


  public LibraryOptions enableEmbeddedTitles(Boolean enableEmbeddedTitles) {
    this.enableEmbeddedTitles = enableEmbeddedTitles;
    return this;
  }

  /**
   * Get enableEmbeddedTitles
   * @return enableEmbeddedTitles
   */
  @javax.annotation.Nullable
  public Boolean getEnableEmbeddedTitles() {
    return enableEmbeddedTitles;
  }

  public void setEnableEmbeddedTitles(Boolean enableEmbeddedTitles) {
    this.enableEmbeddedTitles = enableEmbeddedTitles;
  }


  public LibraryOptions enableInternetProviders(Boolean enableInternetProviders) {
    this.enableInternetProviders = enableInternetProviders;
    return this;
  }

  /**
   * Get enableInternetProviders
   * @return enableInternetProviders
   */
  @javax.annotation.Nullable
  public Boolean getEnableInternetProviders() {
    return enableInternetProviders;
  }

  public void setEnableInternetProviders(Boolean enableInternetProviders) {
    this.enableInternetProviders = enableInternetProviders;
  }


  public LibraryOptions enablePhotos(Boolean enablePhotos) {
    this.enablePhotos = enablePhotos;
    return this;
  }

  /**
   * Get enablePhotos
   * @return enablePhotos
   */
  @javax.annotation.Nullable
  public Boolean getEnablePhotos() {
    return enablePhotos;
  }

  public void setEnablePhotos(Boolean enablePhotos) {
    this.enablePhotos = enablePhotos;
  }


  public LibraryOptions enableRealtimeMonitor(Boolean enableRealtimeMonitor) {
    this.enableRealtimeMonitor = enableRealtimeMonitor;
    return this;
  }

  /**
   * Get enableRealtimeMonitor
   * @return enableRealtimeMonitor
   */
  @javax.annotation.Nullable
  public Boolean getEnableRealtimeMonitor() {
    return enableRealtimeMonitor;
  }

  public void setEnableRealtimeMonitor(Boolean enableRealtimeMonitor) {
    this.enableRealtimeMonitor = enableRealtimeMonitor;
  }


  public LibraryOptions extractChapterImagesDuringLibraryScan(Boolean extractChapterImagesDuringLibraryScan) {
    this.extractChapterImagesDuringLibraryScan = extractChapterImagesDuringLibraryScan;
    return this;
  }

  /**
   * Get extractChapterImagesDuringLibraryScan
   * @return extractChapterImagesDuringLibraryScan
   */
  @javax.annotation.Nullable
  public Boolean getExtractChapterImagesDuringLibraryScan() {
    return extractChapterImagesDuringLibraryScan;
  }

  public void setExtractChapterImagesDuringLibraryScan(Boolean extractChapterImagesDuringLibraryScan) {
    this.extractChapterImagesDuringLibraryScan = extractChapterImagesDuringLibraryScan;
  }


  public LibraryOptions localMetadataReaderOrder(List<String> localMetadataReaderOrder) {
    this.localMetadataReaderOrder = localMetadataReaderOrder;
    return this;
  }

  public LibraryOptions addLocalMetadataReaderOrderItem(String localMetadataReaderOrderItem) {
    if (this.localMetadataReaderOrder == null) {
      this.localMetadataReaderOrder = new ArrayList<>();
    }
    this.localMetadataReaderOrder.add(localMetadataReaderOrderItem);
    return this;
  }

  /**
   * Get localMetadataReaderOrder
   * @return localMetadataReaderOrder
   */
  @javax.annotation.Nullable
  public List<String> getLocalMetadataReaderOrder() {
    return localMetadataReaderOrder;
  }

  public void setLocalMetadataReaderOrder(List<String> localMetadataReaderOrder) {
    this.localMetadataReaderOrder = localMetadataReaderOrder;
  }


  public LibraryOptions metadataCountryCode(String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
    return this;
  }

  /**
   * Gets or sets the metadata country code.
   * @return metadataCountryCode
   */
  @javax.annotation.Nullable
  public String getMetadataCountryCode() {
    return metadataCountryCode;
  }

  public void setMetadataCountryCode(String metadataCountryCode) {
    this.metadataCountryCode = metadataCountryCode;
  }


  public LibraryOptions metadataSavers(List<String> metadataSavers) {
    this.metadataSavers = metadataSavers;
    return this;
  }

  public LibraryOptions addMetadataSaversItem(String metadataSaversItem) {
    if (this.metadataSavers == null) {
      this.metadataSavers = new ArrayList<>();
    }
    this.metadataSavers.add(metadataSaversItem);
    return this;
  }

  /**
   * Get metadataSavers
   * @return metadataSavers
   */
  @javax.annotation.Nullable
  public List<String> getMetadataSavers() {
    return metadataSavers;
  }

  public void setMetadataSavers(List<String> metadataSavers) {
    this.metadataSavers = metadataSavers;
  }


  public LibraryOptions pathInfos(List<MediaPathInfo> pathInfos) {
    this.pathInfos = pathInfos;
    return this;
  }

  public LibraryOptions addPathInfosItem(MediaPathInfo pathInfosItem) {
    if (this.pathInfos == null) {
      this.pathInfos = new ArrayList<>();
    }
    this.pathInfos.add(pathInfosItem);
    return this;
  }

  /**
   * Get pathInfos
   * @return pathInfos
   */
  @javax.annotation.Nullable
  public List<MediaPathInfo> getPathInfos() {
    return pathInfos;
  }

  public void setPathInfos(List<MediaPathInfo> pathInfos) {
    this.pathInfos = pathInfos;
  }


  public LibraryOptions preferredMetadataLanguage(String preferredMetadataLanguage) {
    this.preferredMetadataLanguage = preferredMetadataLanguage;
    return this;
  }

  /**
   * Gets or sets the preferred metadata language.
   * @return preferredMetadataLanguage
   */
  @javax.annotation.Nullable
  public String getPreferredMetadataLanguage() {
    return preferredMetadataLanguage;
  }

  public void setPreferredMetadataLanguage(String preferredMetadataLanguage) {
    this.preferredMetadataLanguage = preferredMetadataLanguage;
  }


  public LibraryOptions requirePerfectSubtitleMatch(Boolean requirePerfectSubtitleMatch) {
    this.requirePerfectSubtitleMatch = requirePerfectSubtitleMatch;
    return this;
  }

  /**
   * Get requirePerfectSubtitleMatch
   * @return requirePerfectSubtitleMatch
   */
  @javax.annotation.Nullable
  public Boolean getRequirePerfectSubtitleMatch() {
    return requirePerfectSubtitleMatch;
  }

  public void setRequirePerfectSubtitleMatch(Boolean requirePerfectSubtitleMatch) {
    this.requirePerfectSubtitleMatch = requirePerfectSubtitleMatch;
  }


  public LibraryOptions saveLocalMetadata(Boolean saveLocalMetadata) {
    this.saveLocalMetadata = saveLocalMetadata;
    return this;
  }

  /**
   * Get saveLocalMetadata
   * @return saveLocalMetadata
   */
  @javax.annotation.Nullable
  public Boolean getSaveLocalMetadata() {
    return saveLocalMetadata;
  }

  public void setSaveLocalMetadata(Boolean saveLocalMetadata) {
    this.saveLocalMetadata = saveLocalMetadata;
  }


  public LibraryOptions saveSubtitlesWithMedia(Boolean saveSubtitlesWithMedia) {
    this.saveSubtitlesWithMedia = saveSubtitlesWithMedia;
    return this;
  }

  /**
   * Get saveSubtitlesWithMedia
   * @return saveSubtitlesWithMedia
   */
  @javax.annotation.Nullable
  public Boolean getSaveSubtitlesWithMedia() {
    return saveSubtitlesWithMedia;
  }

  public void setSaveSubtitlesWithMedia(Boolean saveSubtitlesWithMedia) {
    this.saveSubtitlesWithMedia = saveSubtitlesWithMedia;
  }


  public LibraryOptions seasonZeroDisplayName(String seasonZeroDisplayName) {
    this.seasonZeroDisplayName = seasonZeroDisplayName;
    return this;
  }

  /**
   * Get seasonZeroDisplayName
   * @return seasonZeroDisplayName
   */
  @javax.annotation.Nullable
  public String getSeasonZeroDisplayName() {
    return seasonZeroDisplayName;
  }

  public void setSeasonZeroDisplayName(String seasonZeroDisplayName) {
    this.seasonZeroDisplayName = seasonZeroDisplayName;
  }


  public LibraryOptions skipSubtitlesIfAudioTrackMatches(Boolean skipSubtitlesIfAudioTrackMatches) {
    this.skipSubtitlesIfAudioTrackMatches = skipSubtitlesIfAudioTrackMatches;
    return this;
  }

  /**
   * Get skipSubtitlesIfAudioTrackMatches
   * @return skipSubtitlesIfAudioTrackMatches
   */
  @javax.annotation.Nullable
  public Boolean getSkipSubtitlesIfAudioTrackMatches() {
    return skipSubtitlesIfAudioTrackMatches;
  }

  public void setSkipSubtitlesIfAudioTrackMatches(Boolean skipSubtitlesIfAudioTrackMatches) {
    this.skipSubtitlesIfAudioTrackMatches = skipSubtitlesIfAudioTrackMatches;
  }


  public LibraryOptions skipSubtitlesIfEmbeddedSubtitlesPresent(Boolean skipSubtitlesIfEmbeddedSubtitlesPresent) {
    this.skipSubtitlesIfEmbeddedSubtitlesPresent = skipSubtitlesIfEmbeddedSubtitlesPresent;
    return this;
  }

  /**
   * Get skipSubtitlesIfEmbeddedSubtitlesPresent
   * @return skipSubtitlesIfEmbeddedSubtitlesPresent
   */
  @javax.annotation.Nullable
  public Boolean getSkipSubtitlesIfEmbeddedSubtitlesPresent() {
    return skipSubtitlesIfEmbeddedSubtitlesPresent;
  }

  public void setSkipSubtitlesIfEmbeddedSubtitlesPresent(Boolean skipSubtitlesIfEmbeddedSubtitlesPresent) {
    this.skipSubtitlesIfEmbeddedSubtitlesPresent = skipSubtitlesIfEmbeddedSubtitlesPresent;
  }


  public LibraryOptions subtitleDownloadLanguages(List<String> subtitleDownloadLanguages) {
    this.subtitleDownloadLanguages = subtitleDownloadLanguages;
    return this;
  }

  public LibraryOptions addSubtitleDownloadLanguagesItem(String subtitleDownloadLanguagesItem) {
    if (this.subtitleDownloadLanguages == null) {
      this.subtitleDownloadLanguages = new ArrayList<>();
    }
    this.subtitleDownloadLanguages.add(subtitleDownloadLanguagesItem);
    return this;
  }

  /**
   * Get subtitleDownloadLanguages
   * @return subtitleDownloadLanguages
   */
  @javax.annotation.Nullable
  public List<String> getSubtitleDownloadLanguages() {
    return subtitleDownloadLanguages;
  }

  public void setSubtitleDownloadLanguages(List<String> subtitleDownloadLanguages) {
    this.subtitleDownloadLanguages = subtitleDownloadLanguages;
  }


  public LibraryOptions subtitleFetcherOrder(List<String> subtitleFetcherOrder) {
    this.subtitleFetcherOrder = subtitleFetcherOrder;
    return this;
  }

  public LibraryOptions addSubtitleFetcherOrderItem(String subtitleFetcherOrderItem) {
    if (this.subtitleFetcherOrder == null) {
      this.subtitleFetcherOrder = new ArrayList<>();
    }
    this.subtitleFetcherOrder.add(subtitleFetcherOrderItem);
    return this;
  }

  /**
   * Get subtitleFetcherOrder
   * @return subtitleFetcherOrder
   */
  @javax.annotation.Nullable
  public List<String> getSubtitleFetcherOrder() {
    return subtitleFetcherOrder;
  }

  public void setSubtitleFetcherOrder(List<String> subtitleFetcherOrder) {
    this.subtitleFetcherOrder = subtitleFetcherOrder;
  }


  public LibraryOptions typeOptions(List<TypeOptions> typeOptions) {
    this.typeOptions = typeOptions;
    return this;
  }

  public LibraryOptions addTypeOptionsItem(TypeOptions typeOptionsItem) {
    if (this.typeOptions == null) {
      this.typeOptions = new ArrayList<>();
    }
    this.typeOptions.add(typeOptionsItem);
    return this;
  }

  /**
   * Get typeOptions
   * @return typeOptions
   */
  @javax.annotation.Nullable
  public List<TypeOptions> getTypeOptions() {
    return typeOptions;
  }

  public void setTypeOptions(List<TypeOptions> typeOptions) {
    this.typeOptions = typeOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryOptions libraryOptions = (LibraryOptions) o;
    return Objects.equals(this.automaticRefreshIntervalDays, libraryOptions.automaticRefreshIntervalDays) &&
        Objects.equals(this.disabledLocalMetadataReaders, libraryOptions.disabledLocalMetadataReaders) &&
        Objects.equals(this.disabledSubtitleFetchers, libraryOptions.disabledSubtitleFetchers) &&
        Objects.equals(this.enableAutomaticSeriesGrouping, libraryOptions.enableAutomaticSeriesGrouping) &&
        Objects.equals(this.enableChapterImageExtraction, libraryOptions.enableChapterImageExtraction) &&
        Objects.equals(this.enableEmbeddedEpisodeInfos, libraryOptions.enableEmbeddedEpisodeInfos) &&
        Objects.equals(this.enableEmbeddedTitles, libraryOptions.enableEmbeddedTitles) &&
        Objects.equals(this.enableInternetProviders, libraryOptions.enableInternetProviders) &&
        Objects.equals(this.enablePhotos, libraryOptions.enablePhotos) &&
        Objects.equals(this.enableRealtimeMonitor, libraryOptions.enableRealtimeMonitor) &&
        Objects.equals(this.extractChapterImagesDuringLibraryScan, libraryOptions.extractChapterImagesDuringLibraryScan) &&
        Objects.equals(this.localMetadataReaderOrder, libraryOptions.localMetadataReaderOrder) &&
        Objects.equals(this.metadataCountryCode, libraryOptions.metadataCountryCode) &&
        Objects.equals(this.metadataSavers, libraryOptions.metadataSavers) &&
        Objects.equals(this.pathInfos, libraryOptions.pathInfos) &&
        Objects.equals(this.preferredMetadataLanguage, libraryOptions.preferredMetadataLanguage) &&
        Objects.equals(this.requirePerfectSubtitleMatch, libraryOptions.requirePerfectSubtitleMatch) &&
        Objects.equals(this.saveLocalMetadata, libraryOptions.saveLocalMetadata) &&
        Objects.equals(this.saveSubtitlesWithMedia, libraryOptions.saveSubtitlesWithMedia) &&
        Objects.equals(this.seasonZeroDisplayName, libraryOptions.seasonZeroDisplayName) &&
        Objects.equals(this.skipSubtitlesIfAudioTrackMatches, libraryOptions.skipSubtitlesIfAudioTrackMatches) &&
        Objects.equals(this.skipSubtitlesIfEmbeddedSubtitlesPresent, libraryOptions.skipSubtitlesIfEmbeddedSubtitlesPresent) &&
        Objects.equals(this.subtitleDownloadLanguages, libraryOptions.subtitleDownloadLanguages) &&
        Objects.equals(this.subtitleFetcherOrder, libraryOptions.subtitleFetcherOrder) &&
        Objects.equals(this.typeOptions, libraryOptions.typeOptions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(automaticRefreshIntervalDays, disabledLocalMetadataReaders, disabledSubtitleFetchers, enableAutomaticSeriesGrouping, enableChapterImageExtraction, enableEmbeddedEpisodeInfos, enableEmbeddedTitles, enableInternetProviders, enablePhotos, enableRealtimeMonitor, extractChapterImagesDuringLibraryScan, localMetadataReaderOrder, metadataCountryCode, metadataSavers, pathInfos, preferredMetadataLanguage, requirePerfectSubtitleMatch, saveLocalMetadata, saveSubtitlesWithMedia, seasonZeroDisplayName, skipSubtitlesIfAudioTrackMatches, skipSubtitlesIfEmbeddedSubtitlesPresent, subtitleDownloadLanguages, subtitleFetcherOrder, typeOptions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryOptions {\n");
    sb.append("    automaticRefreshIntervalDays: ").append(toIndentedString(automaticRefreshIntervalDays)).append("\n");
    sb.append("    disabledLocalMetadataReaders: ").append(toIndentedString(disabledLocalMetadataReaders)).append("\n");
    sb.append("    disabledSubtitleFetchers: ").append(toIndentedString(disabledSubtitleFetchers)).append("\n");
    sb.append("    enableAutomaticSeriesGrouping: ").append(toIndentedString(enableAutomaticSeriesGrouping)).append("\n");
    sb.append("    enableChapterImageExtraction: ").append(toIndentedString(enableChapterImageExtraction)).append("\n");
    sb.append("    enableEmbeddedEpisodeInfos: ").append(toIndentedString(enableEmbeddedEpisodeInfos)).append("\n");
    sb.append("    enableEmbeddedTitles: ").append(toIndentedString(enableEmbeddedTitles)).append("\n");
    sb.append("    enableInternetProviders: ").append(toIndentedString(enableInternetProviders)).append("\n");
    sb.append("    enablePhotos: ").append(toIndentedString(enablePhotos)).append("\n");
    sb.append("    enableRealtimeMonitor: ").append(toIndentedString(enableRealtimeMonitor)).append("\n");
    sb.append("    extractChapterImagesDuringLibraryScan: ").append(toIndentedString(extractChapterImagesDuringLibraryScan)).append("\n");
    sb.append("    localMetadataReaderOrder: ").append(toIndentedString(localMetadataReaderOrder)).append("\n");
    sb.append("    metadataCountryCode: ").append(toIndentedString(metadataCountryCode)).append("\n");
    sb.append("    metadataSavers: ").append(toIndentedString(metadataSavers)).append("\n");
    sb.append("    pathInfos: ").append(toIndentedString(pathInfos)).append("\n");
    sb.append("    preferredMetadataLanguage: ").append(toIndentedString(preferredMetadataLanguage)).append("\n");
    sb.append("    requirePerfectSubtitleMatch: ").append(toIndentedString(requirePerfectSubtitleMatch)).append("\n");
    sb.append("    saveLocalMetadata: ").append(toIndentedString(saveLocalMetadata)).append("\n");
    sb.append("    saveSubtitlesWithMedia: ").append(toIndentedString(saveSubtitlesWithMedia)).append("\n");
    sb.append("    seasonZeroDisplayName: ").append(toIndentedString(seasonZeroDisplayName)).append("\n");
    sb.append("    skipSubtitlesIfAudioTrackMatches: ").append(toIndentedString(skipSubtitlesIfAudioTrackMatches)).append("\n");
    sb.append("    skipSubtitlesIfEmbeddedSubtitlesPresent: ").append(toIndentedString(skipSubtitlesIfEmbeddedSubtitlesPresent)).append("\n");
    sb.append("    subtitleDownloadLanguages: ").append(toIndentedString(subtitleDownloadLanguages)).append("\n");
    sb.append("    subtitleFetcherOrder: ").append(toIndentedString(subtitleFetcherOrder)).append("\n");
    sb.append("    typeOptions: ").append(toIndentedString(typeOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutomaticRefreshIntervalDays");
    openapiFields.add("DisabledLocalMetadataReaders");
    openapiFields.add("DisabledSubtitleFetchers");
    openapiFields.add("EnableAutomaticSeriesGrouping");
    openapiFields.add("EnableChapterImageExtraction");
    openapiFields.add("EnableEmbeddedEpisodeInfos");
    openapiFields.add("EnableEmbeddedTitles");
    openapiFields.add("EnableInternetProviders");
    openapiFields.add("EnablePhotos");
    openapiFields.add("EnableRealtimeMonitor");
    openapiFields.add("ExtractChapterImagesDuringLibraryScan");
    openapiFields.add("LocalMetadataReaderOrder");
    openapiFields.add("MetadataCountryCode");
    openapiFields.add("MetadataSavers");
    openapiFields.add("PathInfos");
    openapiFields.add("PreferredMetadataLanguage");
    openapiFields.add("RequirePerfectSubtitleMatch");
    openapiFields.add("SaveLocalMetadata");
    openapiFields.add("SaveSubtitlesWithMedia");
    openapiFields.add("SeasonZeroDisplayName");
    openapiFields.add("SkipSubtitlesIfAudioTrackMatches");
    openapiFields.add("SkipSubtitlesIfEmbeddedSubtitlesPresent");
    openapiFields.add("SubtitleDownloadLanguages");
    openapiFields.add("SubtitleFetcherOrder");
    openapiFields.add("TypeOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LibraryOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LibraryOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LibraryOptions is not found in the empty JSON string", LibraryOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LibraryOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LibraryOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("DisabledLocalMetadataReaders") != null && !jsonObj.get("DisabledLocalMetadataReaders").isJsonNull() && !jsonObj.get("DisabledLocalMetadataReaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisabledLocalMetadataReaders` to be an array in the JSON string but got `%s`", jsonObj.get("DisabledLocalMetadataReaders").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DisabledSubtitleFetchers") != null && !jsonObj.get("DisabledSubtitleFetchers").isJsonNull() && !jsonObj.get("DisabledSubtitleFetchers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisabledSubtitleFetchers` to be an array in the JSON string but got `%s`", jsonObj.get("DisabledSubtitleFetchers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LocalMetadataReaderOrder") != null && !jsonObj.get("LocalMetadataReaderOrder").isJsonNull() && !jsonObj.get("LocalMetadataReaderOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalMetadataReaderOrder` to be an array in the JSON string but got `%s`", jsonObj.get("LocalMetadataReaderOrder").toString()));
      }
      if ((jsonObj.get("MetadataCountryCode") != null && !jsonObj.get("MetadataCountryCode").isJsonNull()) && !jsonObj.get("MetadataCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataCountryCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MetadataSavers") != null && !jsonObj.get("MetadataSavers").isJsonNull() && !jsonObj.get("MetadataSavers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataSavers` to be an array in the JSON string but got `%s`", jsonObj.get("MetadataSavers").toString()));
      }
      if (jsonObj.get("PathInfos") != null && !jsonObj.get("PathInfos").isJsonNull()) {
        JsonArray jsonArraypathInfos = jsonObj.getAsJsonArray("PathInfos");
        if (jsonArraypathInfos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PathInfos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PathInfos` to be an array in the JSON string but got `%s`", jsonObj.get("PathInfos").toString()));
          }

          // validate the optional field `PathInfos` (array)
          for (int i = 0; i < jsonArraypathInfos.size(); i++) {
            MediaPathInfo.validateJsonElement(jsonArraypathInfos.get(i));
          };
        }
      }
      if ((jsonObj.get("PreferredMetadataLanguage") != null && !jsonObj.get("PreferredMetadataLanguage").isJsonNull()) && !jsonObj.get("PreferredMetadataLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreferredMetadataLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreferredMetadataLanguage").toString()));
      }
      if ((jsonObj.get("SeasonZeroDisplayName") != null && !jsonObj.get("SeasonZeroDisplayName").isJsonNull()) && !jsonObj.get("SeasonZeroDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SeasonZeroDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SeasonZeroDisplayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SubtitleDownloadLanguages") != null && !jsonObj.get("SubtitleDownloadLanguages").isJsonNull() && !jsonObj.get("SubtitleDownloadLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubtitleDownloadLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("SubtitleDownloadLanguages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SubtitleFetcherOrder") != null && !jsonObj.get("SubtitleFetcherOrder").isJsonNull() && !jsonObj.get("SubtitleFetcherOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubtitleFetcherOrder` to be an array in the JSON string but got `%s`", jsonObj.get("SubtitleFetcherOrder").toString()));
      }
      if (jsonObj.get("TypeOptions") != null && !jsonObj.get("TypeOptions").isJsonNull()) {
        JsonArray jsonArraytypeOptions = jsonObj.getAsJsonArray("TypeOptions");
        if (jsonArraytypeOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TypeOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TypeOptions` to be an array in the JSON string but got `%s`", jsonObj.get("TypeOptions").toString()));
          }

          // validate the optional field `TypeOptions` (array)
          for (int i = 0; i < jsonArraytypeOptions.size(); i++) {
            TypeOptions.validateJsonElement(jsonArraytypeOptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LibraryOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LibraryOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LibraryOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LibraryOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<LibraryOptions>() {
           @Override
           public void write(JsonWriter out, LibraryOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LibraryOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LibraryOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LibraryOptions
   * @throws IOException if the JSON string is invalid with respect to LibraryOptions
   */
  public static LibraryOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LibraryOptions.class);
  }

  /**
   * Convert an instance of LibraryOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

