/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.LiveStreamResponse;
import org.openapitools.client.model.OpenLiveStreamDto;
import org.openapitools.client.model.PlaybackInfoDto;
import org.openapitools.client.model.PlaybackInfoResponse;
import org.openapitools.client.model.ProblemDetails;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MediaInfoApi
 */
@Disabled
public class MediaInfoApiTest {

    private final MediaInfoApi api = new MediaInfoApi();

    /**
     * Closes a media source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeLiveStreamTest() throws ApiException {
        String liveStreamId = null;
        api.closeLiveStream(liveStreamId);
        // TODO: test validations
    }

    /**
     * Tests the network with a request with the size of the bitrate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBitrateTestBytesTest() throws ApiException {
        Integer size = null;
        File response = api.getBitrateTestBytes(size);
        // TODO: test validations
    }

    /**
     * Gets live playback media info for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaybackInfoTest() throws ApiException {
        UUID itemId = null;
        UUID userId = null;
        PlaybackInfoResponse response = api.getPlaybackInfo(itemId, userId);
        // TODO: test validations
    }

    /**
     * Gets live playback media info for an item.
     *
     * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPostedPlaybackInfoTest() throws ApiException {
        UUID itemId = null;
        UUID userId = null;
        Integer maxStreamingBitrate = null;
        Long startTimeTicks = null;
        Integer audioStreamIndex = null;
        Integer subtitleStreamIndex = null;
        Integer maxAudioChannels = null;
        String mediaSourceId = null;
        String liveStreamId = null;
        Boolean autoOpenLiveStream = null;
        Boolean enableDirectPlay = null;
        Boolean enableDirectStream = null;
        Boolean enableTranscoding = null;
        Boolean allowVideoStreamCopy = null;
        Boolean allowAudioStreamCopy = null;
        PlaybackInfoDto playbackInfoDto = null;
        PlaybackInfoResponse response = api.getPostedPlaybackInfo(itemId, userId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, mediaSourceId, liveStreamId, autoOpenLiveStream, enableDirectPlay, enableDirectStream, enableTranscoding, allowVideoStreamCopy, allowAudioStreamCopy, playbackInfoDto);
        // TODO: test validations
    }

    /**
     * Opens a media source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openLiveStreamTest() throws ApiException {
        String openToken = null;
        UUID userId = null;
        String playSessionId = null;
        Integer maxStreamingBitrate = null;
        Long startTimeTicks = null;
        Integer audioStreamIndex = null;
        Integer subtitleStreamIndex = null;
        Integer maxAudioChannels = null;
        UUID itemId = null;
        Boolean enableDirectPlay = null;
        Boolean enableDirectStream = null;
        OpenLiveStreamDto openLiveStreamDto = null;
        LiveStreamResponse response = api.openLiveStream(openToken, userId, playSessionId, maxStreamingBitrate, startTimeTicks, audioStreamIndex, subtitleStreamIndex, maxAudioChannels, itemId, enableDirectPlay, enableDirectStream, openLiveStreamDto);
        // TODO: test validations
    }

}
