/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstantMixApi
 */
@Disabled
public class InstantMixApiTest {

    private final InstantMixApi api = new InstantMixApi();

    /**
     * Creates an instant playlist based on a given song.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstantMixFromAlbumTest() throws ApiException {
        UUID id = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        Boolean enableImages = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        BaseItemDtoQueryResult response = api.getInstantMixFromAlbum(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
        // TODO: test validations
    }

    /**
     * Creates an instant playlist based on a given song.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstantMixFromArtistsTest() throws ApiException {
        UUID id = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        Boolean enableImages = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        BaseItemDtoQueryResult response = api.getInstantMixFromArtists(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
        // TODO: test validations
    }

    /**
     * Creates an instant playlist based on a given song.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstantMixFromItemTest() throws ApiException {
        UUID id = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        Boolean enableImages = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        BaseItemDtoQueryResult response = api.getInstantMixFromItem(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
        // TODO: test validations
    }

    /**
     * Creates an instant playlist based on a given song.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstantMixFromMusicGenreTest() throws ApiException {
        String name = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        Boolean enableImages = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        BaseItemDtoQueryResult response = api.getInstantMixFromMusicGenre(name, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
        // TODO: test validations
    }

    /**
     * Creates an instant playlist based on a given song.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstantMixFromMusicGenresTest() throws ApiException {
        UUID id = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        Boolean enableImages = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        BaseItemDtoQueryResult response = api.getInstantMixFromMusicGenres(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
        // TODO: test validations
    }

    /**
     * Creates an instant playlist based on a given song.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstantMixFromPlaylistTest() throws ApiException {
        UUID id = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        Boolean enableImages = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        BaseItemDtoQueryResult response = api.getInstantMixFromPlaylist(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
        // TODO: test validations
    }

    /**
     * Creates an instant playlist based on a given song.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstantMixFromSongTest() throws ApiException {
        UUID id = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        Boolean enableImages = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        BaseItemDtoQueryResult response = api.getInstantMixFromSong(id, userId, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
        // TODO: test validations
    }

}
