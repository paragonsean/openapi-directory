/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.PluginInfo;
import org.openapitools.client.model.PluginSecurityInfo;
import org.openapitools.client.model.ProblemDetails;
import java.util.UUID;
import org.openapitools.client.model.Version;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PluginsApi
 */
@Disabled
public class PluginsApiTest {

    private final PluginsApi api = new PluginsApi();

    /**
     * Disable a plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disablePluginTest() throws ApiException {
        UUID pluginId = null;
        Version version = null;
        api.disablePlugin(pluginId, version);
        // TODO: test validations
    }

    /**
     * Enables a disabled plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enablePluginTest() throws ApiException {
        UUID pluginId = null;
        Version version = null;
        api.enablePlugin(pluginId, version);
        // TODO: test validations
    }

    /**
     * Gets plugin configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPluginConfigurationTest() throws ApiException {
        UUID pluginId = null;
        Object response = api.getPluginConfiguration(pluginId);
        // TODO: test validations
    }

    /**
     * Gets a plugin&#39;s image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPluginImageTest() throws ApiException {
        UUID pluginId = null;
        Version version = null;
        File response = api.getPluginImage(pluginId, version);
        // TODO: test validations
    }

    /**
     * Gets a plugin&#39;s manifest.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPluginManifestTest() throws ApiException {
        UUID pluginId = null;
        api.getPluginManifest(pluginId);
        // TODO: test validations
    }

    /**
     * Gets a list of currently installed plugins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPluginsTest() throws ApiException {
        List<PluginInfo> response = api.getPlugins();
        // TODO: test validations
    }

    /**
     * Uninstalls a plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uninstallPluginTest() throws ApiException {
        UUID pluginId = null;
        api.uninstallPlugin(pluginId);
        // TODO: test validations
    }

    /**
     * Uninstalls a plugin by version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uninstallPluginByVersionTest() throws ApiException {
        UUID pluginId = null;
        Version version = null;
        api.uninstallPluginByVersion(pluginId, version);
        // TODO: test validations
    }

    /**
     * Updates plugin configuration.
     *
     * Accepts plugin configuration as JSON body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePluginConfigurationTest() throws ApiException {
        UUID pluginId = null;
        api.updatePluginConfiguration(pluginId);
        // TODO: test validations
    }

    /**
     * Updates plugin security info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePluginSecurityInfoTest() throws ApiException {
        PluginSecurityInfo pluginSecurityInfo = null;
        api.updatePluginSecurityInfo(pluginSecurityInfo);
        // TODO: test validations
    }

}
