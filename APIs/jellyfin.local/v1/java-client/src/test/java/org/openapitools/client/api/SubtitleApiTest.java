/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.FontFile;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.RemoteSubtitleInfo;
import java.util.UUID;
import org.openapitools.client.model.UploadSubtitleDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubtitleApi
 */
@Disabled
public class SubtitleApiTest {

    private final SubtitleApi api = new SubtitleApi();

    /**
     * Deletes an external subtitle file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubtitleTest() throws ApiException {
        UUID itemId = null;
        Integer index = null;
        api.deleteSubtitle(itemId, index);
        // TODO: test validations
    }

    /**
     * Downloads a remote subtitle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadRemoteSubtitlesTest() throws ApiException {
        UUID itemId = null;
        String subtitleId = null;
        api.downloadRemoteSubtitles(itemId, subtitleId);
        // TODO: test validations
    }

    /**
     * Gets a fallback font file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFallbackFontTest() throws ApiException {
        String name = null;
        File response = api.getFallbackFont(name);
        // TODO: test validations
    }

    /**
     * Gets a list of available fallback font files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFallbackFontListTest() throws ApiException {
        List<FontFile> response = api.getFallbackFontList();
        // TODO: test validations
    }

    /**
     * Gets the remote subtitles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRemoteSubtitlesTest() throws ApiException {
        String id = null;
        File response = api.getRemoteSubtitles(id);
        // TODO: test validations
    }

    /**
     * Gets subtitles in a specified format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubtitleTest() throws ApiException {
        UUID itemId = null;
        String mediaSourceId = null;
        Integer index = null;
        String format = null;
        Long endPositionTicks = null;
        Boolean copyTimestamps = null;
        Boolean addVttTimeMap = null;
        Long startPositionTicks = null;
        File response = api.getSubtitle(itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks);
        // TODO: test validations
    }

    /**
     * Gets an HLS subtitle playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubtitlePlaylistTest() throws ApiException {
        UUID itemId = null;
        Integer index = null;
        String mediaSourceId = null;
        Integer segmentLength = null;
        File response = api.getSubtitlePlaylist(itemId, index, mediaSourceId, segmentLength);
        // TODO: test validations
    }

    /**
     * Gets subtitles in a specified format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubtitleWithTicksTest() throws ApiException {
        UUID itemId = null;
        String mediaSourceId = null;
        Integer index = null;
        Long startPositionTicks = null;
        String format = null;
        Long endPositionTicks = null;
        Boolean copyTimestamps = null;
        Boolean addVttTimeMap = null;
        File response = api.getSubtitleWithTicks(itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap);
        // TODO: test validations
    }

    /**
     * Search remote subtitles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchRemoteSubtitlesTest() throws ApiException {
        UUID itemId = null;
        String language = null;
        Boolean isPerfectMatch = null;
        List<RemoteSubtitleInfo> response = api.searchRemoteSubtitles(itemId, language, isPerfectMatch);
        // TODO: test validations
    }

    /**
     * Upload an external subtitle file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadSubtitleTest() throws ApiException {
        UUID itemId = null;
        UploadSubtitleDto uploadSubtitleDto = null;
        api.uploadSubtitle(itemId, uploadSubtitleDto);
        // TODO: test validations
    }

}
