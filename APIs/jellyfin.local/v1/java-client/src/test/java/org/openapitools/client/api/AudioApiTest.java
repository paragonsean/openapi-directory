/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EncodingContext;
import java.io.File;
import org.openapitools.client.model.SubtitleDeliveryMethod;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AudioApi
 */
@Disabled
public class AudioApiTest {

    private final AudioApi api = new AudioApi();

    /**
     * Gets an audio stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAudioStreamTest() throws ApiException {
        UUID itemId = null;
        String container = null;
        Boolean _static = null;
        String params = null;
        String tag = null;
        String deviceProfileId = null;
        String playSessionId = null;
        String segmentContainer = null;
        Integer segmentLength = null;
        Integer minSegments = null;
        String mediaSourceId = null;
        String deviceId = null;
        String audioCodec = null;
        Boolean enableAutoStreamCopy = null;
        Boolean allowVideoStreamCopy = null;
        Boolean allowAudioStreamCopy = null;
        Boolean breakOnNonKeyFrames = null;
        Integer audioSampleRate = null;
        Integer maxAudioBitDepth = null;
        Integer audioBitRate = null;
        Integer audioChannels = null;
        Integer maxAudioChannels = null;
        String profile = null;
        String level = null;
        Float framerate = null;
        Float maxFramerate = null;
        Boolean copyTimestamps = null;
        Long startTimeTicks = null;
        Integer width = null;
        Integer height = null;
        Integer videoBitRate = null;
        Integer subtitleStreamIndex = null;
        SubtitleDeliveryMethod subtitleMethod = null;
        Integer maxRefFrames = null;
        Integer maxVideoBitDepth = null;
        Boolean requireAvc = null;
        Boolean deInterlace = null;
        Boolean requireNonAnamorphic = null;
        Integer transcodingMaxAudioChannels = null;
        Integer cpuCoreLimit = null;
        String liveStreamId = null;
        Boolean enableMpegtsM2TsMode = null;
        String videoCodec = null;
        String subtitleCodec = null;
        String transcodeReasons = null;
        Integer audioStreamIndex = null;
        Integer videoStreamIndex = null;
        EncodingContext context = null;
        Map<String, String> streamOptions = null;
        File response = api.getAudioStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
        // TODO: test validations
    }

    /**
     * Gets an audio stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAudioStreamByContainerTest() throws ApiException {
        UUID itemId = null;
        String container = null;
        Boolean _static = null;
        String params = null;
        String tag = null;
        String deviceProfileId = null;
        String playSessionId = null;
        String segmentContainer = null;
        Integer segmentLength = null;
        Integer minSegments = null;
        String mediaSourceId = null;
        String deviceId = null;
        String audioCodec = null;
        Boolean enableAutoStreamCopy = null;
        Boolean allowVideoStreamCopy = null;
        Boolean allowAudioStreamCopy = null;
        Boolean breakOnNonKeyFrames = null;
        Integer audioSampleRate = null;
        Integer maxAudioBitDepth = null;
        Integer audioBitRate = null;
        Integer audioChannels = null;
        Integer maxAudioChannels = null;
        String profile = null;
        String level = null;
        Float framerate = null;
        Float maxFramerate = null;
        Boolean copyTimestamps = null;
        Long startTimeTicks = null;
        Integer width = null;
        Integer height = null;
        Integer videoBitRate = null;
        Integer subtitleStreamIndex = null;
        SubtitleDeliveryMethod subtitleMethod = null;
        Integer maxRefFrames = null;
        Integer maxVideoBitDepth = null;
        Boolean requireAvc = null;
        Boolean deInterlace = null;
        Boolean requireNonAnamorphic = null;
        Integer transcodingMaxAudioChannels = null;
        Integer cpuCoreLimit = null;
        String liveStreamId = null;
        Boolean enableMpegtsM2TsMode = null;
        String videoCodec = null;
        String subtitleCodec = null;
        String transcodeReasons = null;
        Integer audioStreamIndex = null;
        Integer videoStreamIndex = null;
        EncodingContext context = null;
        Map<String, String> streamOptions = null;
        File response = api.getAudioStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
        // TODO: test validations
    }

    /**
     * Gets an audio stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void headAudioStreamTest() throws ApiException {
        UUID itemId = null;
        String container = null;
        Boolean _static = null;
        String params = null;
        String tag = null;
        String deviceProfileId = null;
        String playSessionId = null;
        String segmentContainer = null;
        Integer segmentLength = null;
        Integer minSegments = null;
        String mediaSourceId = null;
        String deviceId = null;
        String audioCodec = null;
        Boolean enableAutoStreamCopy = null;
        Boolean allowVideoStreamCopy = null;
        Boolean allowAudioStreamCopy = null;
        Boolean breakOnNonKeyFrames = null;
        Integer audioSampleRate = null;
        Integer maxAudioBitDepth = null;
        Integer audioBitRate = null;
        Integer audioChannels = null;
        Integer maxAudioChannels = null;
        String profile = null;
        String level = null;
        Float framerate = null;
        Float maxFramerate = null;
        Boolean copyTimestamps = null;
        Long startTimeTicks = null;
        Integer width = null;
        Integer height = null;
        Integer videoBitRate = null;
        Integer subtitleStreamIndex = null;
        SubtitleDeliveryMethod subtitleMethod = null;
        Integer maxRefFrames = null;
        Integer maxVideoBitDepth = null;
        Boolean requireAvc = null;
        Boolean deInterlace = null;
        Boolean requireNonAnamorphic = null;
        Integer transcodingMaxAudioChannels = null;
        Integer cpuCoreLimit = null;
        String liveStreamId = null;
        Boolean enableMpegtsM2TsMode = null;
        String videoCodec = null;
        String subtitleCodec = null;
        String transcodeReasons = null;
        Integer audioStreamIndex = null;
        Integer videoStreamIndex = null;
        EncodingContext context = null;
        Map<String, String> streamOptions = null;
        File response = api.headAudioStream(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
        // TODO: test validations
    }

    /**
     * Gets an audio stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void headAudioStreamByContainerTest() throws ApiException {
        UUID itemId = null;
        String container = null;
        Boolean _static = null;
        String params = null;
        String tag = null;
        String deviceProfileId = null;
        String playSessionId = null;
        String segmentContainer = null;
        Integer segmentLength = null;
        Integer minSegments = null;
        String mediaSourceId = null;
        String deviceId = null;
        String audioCodec = null;
        Boolean enableAutoStreamCopy = null;
        Boolean allowVideoStreamCopy = null;
        Boolean allowAudioStreamCopy = null;
        Boolean breakOnNonKeyFrames = null;
        Integer audioSampleRate = null;
        Integer maxAudioBitDepth = null;
        Integer audioBitRate = null;
        Integer audioChannels = null;
        Integer maxAudioChannels = null;
        String profile = null;
        String level = null;
        Float framerate = null;
        Float maxFramerate = null;
        Boolean copyTimestamps = null;
        Long startTimeTicks = null;
        Integer width = null;
        Integer height = null;
        Integer videoBitRate = null;
        Integer subtitleStreamIndex = null;
        SubtitleDeliveryMethod subtitleMethod = null;
        Integer maxRefFrames = null;
        Integer maxVideoBitDepth = null;
        Boolean requireAvc = null;
        Boolean deInterlace = null;
        Boolean requireNonAnamorphic = null;
        Integer transcodingMaxAudioChannels = null;
        Integer cpuCoreLimit = null;
        String liveStreamId = null;
        Boolean enableMpegtsM2TsMode = null;
        String videoCodec = null;
        String subtitleCodec = null;
        String transcodeReasons = null;
        Integer audioStreamIndex = null;
        Integer videoStreamIndex = null;
        EncodingContext context = null;
        Map<String, String> streamOptions = null;
        File response = api.headAudioStreamByContainer(itemId, container, _static, params, tag, deviceProfileId, playSessionId, segmentContainer, segmentLength, minSegments, mediaSourceId, deviceId, audioCodec, enableAutoStreamCopy, allowVideoStreamCopy, allowAudioStreamCopy, breakOnNonKeyFrames, audioSampleRate, maxAudioBitDepth, audioBitRate, audioChannels, maxAudioChannels, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, requireAvc, deInterlace, requireNonAnamorphic, transcodingMaxAudioChannels, cpuCoreLimit, liveStreamId, enableMpegtsM2TsMode, videoCodec, subtitleCodec, transcodeReasons, audioStreamIndex, videoStreamIndex, context, streamOptions);
        // TODO: test validations
    }

}
