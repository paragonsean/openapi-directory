/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PlayMethod;
import org.openapitools.client.model.PlaybackProgressInfo;
import org.openapitools.client.model.PlaybackStartInfo;
import org.openapitools.client.model.PlaybackStopInfo;
import org.openapitools.client.model.RepeatMode;
import java.util.UUID;
import org.openapitools.client.model.UserItemDataDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlaystateApi
 */
@Disabled
public class PlaystateApiTest {

    private final PlaystateApi api = new PlaystateApi();

    /**
     * Marks an item as played for user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markPlayedItemTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        OffsetDateTime datePlayed = null;
        UserItemDataDto response = api.markPlayedItem(userId, itemId, datePlayed);
        // TODO: test validations
    }

    /**
     * Marks an item as unplayed for user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markUnplayedItemTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        UserItemDataDto response = api.markUnplayedItem(userId, itemId);
        // TODO: test validations
    }

    /**
     * Reports a user&#39;s playback progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void onPlaybackProgressTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        String mediaSourceId = null;
        Long positionTicks = null;
        Integer audioStreamIndex = null;
        Integer subtitleStreamIndex = null;
        Integer volumeLevel = null;
        PlayMethod playMethod = null;
        String liveStreamId = null;
        String playSessionId = null;
        RepeatMode repeatMode = null;
        Boolean isPaused = null;
        Boolean isMuted = null;
        api.onPlaybackProgress(userId, itemId, mediaSourceId, positionTicks, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, isPaused, isMuted);
        // TODO: test validations
    }

    /**
     * Reports that a user has begun playing an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void onPlaybackStartTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        String mediaSourceId = null;
        Integer audioStreamIndex = null;
        Integer subtitleStreamIndex = null;
        PlayMethod playMethod = null;
        String liveStreamId = null;
        String playSessionId = null;
        Boolean canSeek = null;
        api.onPlaybackStart(userId, itemId, mediaSourceId, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, canSeek);
        // TODO: test validations
    }

    /**
     * Reports that a user has stopped playing an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void onPlaybackStoppedTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        String mediaSourceId = null;
        String nextMediaType = null;
        Long positionTicks = null;
        String liveStreamId = null;
        String playSessionId = null;
        api.onPlaybackStopped(userId, itemId, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId);
        // TODO: test validations
    }

    /**
     * Pings a playback session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingPlaybackSessionTest() throws ApiException {
        String playSessionId = null;
        api.pingPlaybackSession(playSessionId);
        // TODO: test validations
    }

    /**
     * Reports playback progress within a session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportPlaybackProgressTest() throws ApiException {
        PlaybackProgressInfo playbackProgressInfo = null;
        api.reportPlaybackProgress(playbackProgressInfo);
        // TODO: test validations
    }

    /**
     * Reports playback has started within a session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportPlaybackStartTest() throws ApiException {
        PlaybackStartInfo playbackStartInfo = null;
        api.reportPlaybackStart(playbackStartInfo);
        // TODO: test validations
    }

    /**
     * Reports playback has stopped within a session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportPlaybackStoppedTest() throws ApiException {
        PlaybackStopInfo playbackStopInfo = null;
        api.reportPlaybackStopped(playbackStopInfo);
        // TODO: test validations
    }

}
