/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.NameIdPair;
import org.openapitools.client.model.NotificationLevel;
import org.openapitools.client.model.NotificationResultDto;
import org.openapitools.client.model.NotificationTypeInfo;
import org.openapitools.client.model.NotificationsSummaryDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationsApi
 */
@Disabled
public class NotificationsApiTest {

    private final NotificationsApi api = new NotificationsApi();

    /**
     * Sends a notification to all admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAdminNotificationTest() throws ApiException {
        String url = null;
        NotificationLevel level = null;
        String name = null;
        String description = null;
        api.createAdminNotification(url, level, name, description);
        // TODO: test validations
    }

    /**
     * Gets notification services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationServicesTest() throws ApiException {
        List<NameIdPair> response = api.getNotificationServices();
        // TODO: test validations
    }

    /**
     * Gets notification types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationTypesTest() throws ApiException {
        List<NotificationTypeInfo> response = api.getNotificationTypes();
        // TODO: test validations
    }

    /**
     * Gets a user&#39;s notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationsTest() throws ApiException {
        String userId = null;
        NotificationResultDto response = api.getNotifications(userId);
        // TODO: test validations
    }

    /**
     * Gets a user&#39;s notification summary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationsSummaryTest() throws ApiException {
        String userId = null;
        NotificationsSummaryDto response = api.getNotificationsSummary(userId);
        // TODO: test validations
    }

    /**
     * Sets notifications as read.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setReadTest() throws ApiException {
        String userId = null;
        api.setRead(userId);
        // TODO: test validations
    }

    /**
     * Sets notifications as unread.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUnreadTest() throws ApiException {
        String userId = null;
        api.setUnread(userId);
        // TODO: test validations
    }

}
