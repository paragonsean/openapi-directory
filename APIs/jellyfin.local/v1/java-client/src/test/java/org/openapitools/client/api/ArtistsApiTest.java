/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BaseItemDto;
import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.ItemFilter;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ArtistsApi
 */
@Disabled
public class ArtistsApiTest {

    private final ArtistsApi api = new ArtistsApi();

    /**
     * Gets all album artists from a given item, folder, or the entire library.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlbumArtistsTest() throws ApiException {
        Double minCommunityRating = null;
        Integer startIndex = null;
        Integer limit = null;
        String searchTerm = null;
        UUID parentId = null;
        List<ItemFields> fields = null;
        List<String> excludeItemTypes = null;
        List<String> includeItemTypes = null;
        List<ItemFilter> filters = null;
        Boolean isFavorite = null;
        List<String> mediaTypes = null;
        List<String> genres = null;
        List<UUID> genreIds = null;
        List<String> officialRatings = null;
        List<String> tags = null;
        List<Integer> years = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        String person = null;
        List<UUID> personIds = null;
        List<String> personTypes = null;
        List<String> studios = null;
        List<UUID> studioIds = null;
        UUID userId = null;
        String nameStartsWithOrGreater = null;
        String nameStartsWith = null;
        String nameLessThan = null;
        Boolean enableImages = null;
        Boolean enableTotalRecordCount = null;
        BaseItemDtoQueryResult response = api.getAlbumArtists(minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount);
        // TODO: test validations
    }

    /**
     * Gets an artist by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArtistByNameTest() throws ApiException {
        String name = null;
        UUID userId = null;
        BaseItemDto response = api.getArtistByName(name, userId);
        // TODO: test validations
    }

    /**
     * Gets all artists from a given item, folder, or the entire library.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArtistsTest() throws ApiException {
        Double minCommunityRating = null;
        Integer startIndex = null;
        Integer limit = null;
        String searchTerm = null;
        UUID parentId = null;
        List<ItemFields> fields = null;
        List<String> excludeItemTypes = null;
        List<String> includeItemTypes = null;
        List<ItemFilter> filters = null;
        Boolean isFavorite = null;
        List<String> mediaTypes = null;
        List<String> genres = null;
        List<UUID> genreIds = null;
        List<String> officialRatings = null;
        List<String> tags = null;
        List<Integer> years = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        String person = null;
        List<UUID> personIds = null;
        List<String> personTypes = null;
        List<String> studios = null;
        List<UUID> studioIds = null;
        UUID userId = null;
        String nameStartsWithOrGreater = null;
        String nameStartsWith = null;
        String nameLessThan = null;
        Boolean enableImages = null;
        Boolean enableTotalRecordCount = null;
        BaseItemDtoQueryResult response = api.getArtists(minCommunityRating, startIndex, limit, searchTerm, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, genres, genreIds, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, userId, nameStartsWithOrGreater, nameStartsWith, nameLessThan, enableImages, enableTotalRecordCount);
        // TODO: test validations
    }

}
