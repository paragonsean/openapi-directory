/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClientCapabilitiesDto;
import org.openapitools.client.model.GeneralCommand;
import org.openapitools.client.model.GeneralCommandType;
import org.openapitools.client.model.NameIdPair;
import org.openapitools.client.model.PlayCommand;
import org.openapitools.client.model.PlaystateCommand;
import org.openapitools.client.model.SessionInfo;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SessionApi
 */
@Disabled
public class SessionApiTest {

    private final SessionApi api = new SessionApi();

    /**
     * Adds an additional user to a session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserToSessionTest() throws ApiException {
        String sessionId = null;
        UUID userId = null;
        api.addUserToSession(sessionId, userId);
        // TODO: test validations
    }

    /**
     * Instructs a session to browse to an item or view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayContentTest() throws ApiException {
        String sessionId = null;
        String itemType = null;
        String itemId = null;
        String itemName = null;
        api.displayContent(sessionId, itemType, itemId, itemName);
        // TODO: test validations
    }

    /**
     * Get all auth providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthProvidersTest() throws ApiException {
        List<NameIdPair> response = api.getAuthProviders();
        // TODO: test validations
    }

    /**
     * Get all password reset providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPasswordResetProvidersTest() throws ApiException {
        List<NameIdPair> response = api.getPasswordResetProviders();
        // TODO: test validations
    }

    /**
     * Gets a list of sessions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionsTest() throws ApiException {
        UUID controllableByUserId = null;
        String deviceId = null;
        Integer activeWithinSeconds = null;
        List<SessionInfo> response = api.getSessions(controllableByUserId, deviceId, activeWithinSeconds);
        // TODO: test validations
    }

    /**
     * Instructs a session to play an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playTest() throws ApiException {
        String sessionId = null;
        PlayCommand playCommand = null;
        List<UUID> itemIds = null;
        Long startPositionTicks = null;
        api.play(sessionId, playCommand, itemIds, startPositionTicks);
        // TODO: test validations
    }

    /**
     * Updates capabilities for a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCapabilitiesTest() throws ApiException {
        String id = null;
        List<String> playableMediaTypes = null;
        List<GeneralCommandType> supportedCommands = null;
        Boolean supportsMediaControl = null;
        Boolean supportsSync = null;
        Boolean supportsPersistentIdentifier = null;
        api.postCapabilities(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier);
        // TODO: test validations
    }

    /**
     * Updates capabilities for a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postFullCapabilitiesTest() throws ApiException {
        ClientCapabilitiesDto clientCapabilitiesDto = null;
        String id = null;
        api.postFullCapabilities(clientCapabilitiesDto, id);
        // TODO: test validations
    }

    /**
     * Removes an additional user from a session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromSessionTest() throws ApiException {
        String sessionId = null;
        UUID userId = null;
        api.removeUserFromSession(sessionId, userId);
        // TODO: test validations
    }

    /**
     * Reports that a session has ended.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportSessionEndedTest() throws ApiException {
        api.reportSessionEnded();
        // TODO: test validations
    }

    /**
     * Reports that a session is viewing an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportViewingTest() throws ApiException {
        String itemId = null;
        String sessionId = null;
        api.reportViewing(itemId, sessionId);
        // TODO: test validations
    }

    /**
     * Issues a full general command to a client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendFullGeneralCommandTest() throws ApiException {
        String sessionId = null;
        GeneralCommand generalCommand = null;
        api.sendFullGeneralCommand(sessionId, generalCommand);
        // TODO: test validations
    }

    /**
     * Issues a general command to a client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendGeneralCommandTest() throws ApiException {
        String sessionId = null;
        GeneralCommandType command = null;
        api.sendGeneralCommand(sessionId, command);
        // TODO: test validations
    }

    /**
     * Issues a command to a client to display a message to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessageCommandTest() throws ApiException {
        String sessionId = null;
        String text = null;
        String header = null;
        Long timeoutMs = null;
        api.sendMessageCommand(sessionId, text, header, timeoutMs);
        // TODO: test validations
    }

    /**
     * Issues a playstate command to a client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendPlaystateCommandTest() throws ApiException {
        String sessionId = null;
        PlaystateCommand command = null;
        Long seekPositionTicks = null;
        String controllingUserId = null;
        api.sendPlaystateCommand(sessionId, command, seekPositionTicks, controllingUserId);
        // TODO: test validations
    }

    /**
     * Issues a system command to a client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendSystemCommandTest() throws ApiException {
        String sessionId = null;
        GeneralCommandType command = null;
        api.sendSystemCommand(sessionId, command);
        // TODO: test validations
    }

}
