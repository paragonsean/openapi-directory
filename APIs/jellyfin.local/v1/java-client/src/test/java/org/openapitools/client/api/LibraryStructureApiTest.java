/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddVirtualFolderDto;
import org.openapitools.client.model.MediaPathDto;
import org.openapitools.client.model.MediaPathInfo;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.UpdateLibraryOptionsDto;
import org.openapitools.client.model.VirtualFolderInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LibraryStructureApi
 */
@Disabled
public class LibraryStructureApiTest {

    private final LibraryStructureApi api = new LibraryStructureApi();

    /**
     * Add a media path to a library.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMediaPathTest() throws ApiException {
        MediaPathDto mediaPathDto = null;
        Boolean refreshLibrary = null;
        api.addMediaPath(mediaPathDto, refreshLibrary);
        // TODO: test validations
    }

    /**
     * Adds a virtual folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addVirtualFolderTest() throws ApiException {
        String name = null;
        String collectionType = null;
        List<String> paths = null;
        Boolean refreshLibrary = null;
        AddVirtualFolderDto addVirtualFolderDto = null;
        api.addVirtualFolder(name, collectionType, paths, refreshLibrary, addVirtualFolderDto);
        // TODO: test validations
    }

    /**
     * Gets all virtual folders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVirtualFoldersTest() throws ApiException {
        List<VirtualFolderInfo> response = api.getVirtualFolders();
        // TODO: test validations
    }

    /**
     * Remove a media path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMediaPathTest() throws ApiException {
        String name = null;
        String path = null;
        Boolean refreshLibrary = null;
        api.removeMediaPath(name, path, refreshLibrary);
        // TODO: test validations
    }

    /**
     * Removes a virtual folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeVirtualFolderTest() throws ApiException {
        String name = null;
        Boolean refreshLibrary = null;
        api.removeVirtualFolder(name, refreshLibrary);
        // TODO: test validations
    }

    /**
     * Renames a virtual folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameVirtualFolderTest() throws ApiException {
        String name = null;
        String newName = null;
        Boolean refreshLibrary = null;
        api.renameVirtualFolder(name, newName, refreshLibrary);
        // TODO: test validations
    }

    /**
     * Update library options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLibraryOptionsTest() throws ApiException {
        UpdateLibraryOptionsDto updateLibraryOptionsDto = null;
        api.updateLibraryOptions(updateLibraryOptionsDto);
        // TODO: test validations
    }

    /**
     * Updates a media path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMediaPathTest() throws ApiException {
        String name = null;
        MediaPathInfo mediaPathInfo = null;
        api.updateMediaPath(name, mediaPathInfo);
        // TODO: test validations
    }

}
