/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AlbumInfoRemoteSearchQuery;
import org.openapitools.client.model.ArtistInfoRemoteSearchQuery;
import org.openapitools.client.model.BookInfoRemoteSearchQuery;
import org.openapitools.client.model.BoxSetInfoRemoteSearchQuery;
import org.openapitools.client.model.ExternalIdInfo;
import java.io.File;
import org.openapitools.client.model.MovieInfoRemoteSearchQuery;
import org.openapitools.client.model.MusicVideoInfoRemoteSearchQuery;
import org.openapitools.client.model.PersonLookupInfoRemoteSearchQuery;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.RemoteSearchResult;
import org.openapitools.client.model.SeriesInfoRemoteSearchQuery;
import org.openapitools.client.model.TrailerInfoRemoteSearchQuery;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemLookupApi
 */
@Disabled
public class ItemLookupApiTest {

    private final ItemLookupApi api = new ItemLookupApi();

    /**
     * Applies search criteria to an item and refreshes metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applySearchCriteriaTest() throws ApiException {
        UUID itemId = null;
        RemoteSearchResult remoteSearchResult = null;
        Boolean replaceAllImages = null;
        api.applySearchCriteria(itemId, remoteSearchResult, replaceAllImages);
        // TODO: test validations
    }

    /**
     * Get book remote search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBookRemoteSearchResultsTest() throws ApiException {
        BookInfoRemoteSearchQuery bookInfoRemoteSearchQuery = null;
        List<RemoteSearchResult> response = api.getBookRemoteSearchResults(bookInfoRemoteSearchQuery);
        // TODO: test validations
    }

    /**
     * Get box set remote search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBoxSetRemoteSearchResultsTest() throws ApiException {
        BoxSetInfoRemoteSearchQuery boxSetInfoRemoteSearchQuery = null;
        List<RemoteSearchResult> response = api.getBoxSetRemoteSearchResults(boxSetInfoRemoteSearchQuery);
        // TODO: test validations
    }

    /**
     * Get the item&#39;s external id info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExternalIdInfosTest() throws ApiException {
        UUID itemId = null;
        List<ExternalIdInfo> response = api.getExternalIdInfos(itemId);
        // TODO: test validations
    }

    /**
     * Get movie remote search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMovieRemoteSearchResultsTest() throws ApiException {
        MovieInfoRemoteSearchQuery movieInfoRemoteSearchQuery = null;
        List<RemoteSearchResult> response = api.getMovieRemoteSearchResults(movieInfoRemoteSearchQuery);
        // TODO: test validations
    }

    /**
     * Get music album remote search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicAlbumRemoteSearchResultsTest() throws ApiException {
        AlbumInfoRemoteSearchQuery albumInfoRemoteSearchQuery = null;
        List<RemoteSearchResult> response = api.getMusicAlbumRemoteSearchResults(albumInfoRemoteSearchQuery);
        // TODO: test validations
    }

    /**
     * Get music artist remote search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicArtistRemoteSearchResultsTest() throws ApiException {
        ArtistInfoRemoteSearchQuery artistInfoRemoteSearchQuery = null;
        List<RemoteSearchResult> response = api.getMusicArtistRemoteSearchResults(artistInfoRemoteSearchQuery);
        // TODO: test validations
    }

    /**
     * Get music video remote search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicVideoRemoteSearchResultsTest() throws ApiException {
        MusicVideoInfoRemoteSearchQuery musicVideoInfoRemoteSearchQuery = null;
        List<RemoteSearchResult> response = api.getMusicVideoRemoteSearchResults(musicVideoInfoRemoteSearchQuery);
        // TODO: test validations
    }

    /**
     * Get person remote search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonRemoteSearchResultsTest() throws ApiException {
        PersonLookupInfoRemoteSearchQuery personLookupInfoRemoteSearchQuery = null;
        List<RemoteSearchResult> response = api.getPersonRemoteSearchResults(personLookupInfoRemoteSearchQuery);
        // TODO: test validations
    }

    /**
     * Gets a remote image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRemoteSearchImageTest() throws ApiException {
        String imageUrl = null;
        String providerName = null;
        File response = api.getRemoteSearchImage(imageUrl, providerName);
        // TODO: test validations
    }

    /**
     * Get series remote search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSeriesRemoteSearchResultsTest() throws ApiException {
        SeriesInfoRemoteSearchQuery seriesInfoRemoteSearchQuery = null;
        List<RemoteSearchResult> response = api.getSeriesRemoteSearchResults(seriesInfoRemoteSearchQuery);
        // TODO: test validations
    }

    /**
     * Get trailer remote search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrailerRemoteSearchResultsTest() throws ApiException {
        TrailerInfoRemoteSearchQuery trailerInfoRemoteSearchQuery = null;
        List<RemoteSearchResult> response = api.getTrailerRemoteSearchResults(trailerInfoRemoteSearchQuery);
        // TODO: test validations
    }

}
