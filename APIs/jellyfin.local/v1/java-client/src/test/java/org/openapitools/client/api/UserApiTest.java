/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthenticateUserByName;
import org.openapitools.client.model.AuthenticationResult;
import org.openapitools.client.model.CreateUserByName;
import org.openapitools.client.model.ForgotPasswordDto;
import org.openapitools.client.model.ForgotPasswordResult;
import org.openapitools.client.model.PinRedeemResult;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QuickConnectDto;
import java.util.UUID;
import org.openapitools.client.model.UpdateUserEasyPassword;
import org.openapitools.client.model.UpdateUserPassword;
import org.openapitools.client.model.UserConfiguration;
import org.openapitools.client.model.UserDto;
import org.openapitools.client.model.UserPolicy;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Authenticates a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authenticateUserTest() throws ApiException {
        UUID userId = null;
        String pw = null;
        String password = null;
        AuthenticationResult response = api.authenticateUser(userId, pw, password);
        // TODO: test validations
    }

    /**
     * Authenticates a user by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authenticateUserByNameTest() throws ApiException {
        AuthenticateUserByName authenticateUserByName = null;
        AuthenticationResult response = api.authenticateUserByName(authenticateUserByName);
        // TODO: test validations
    }

    /**
     * Authenticates a user with quick connect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authenticateWithQuickConnectTest() throws ApiException {
        QuickConnectDto quickConnectDto = null;
        AuthenticationResult response = api.authenticateWithQuickConnect(quickConnectDto);
        // TODO: test validations
    }

    /**
     * Creates a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserByNameTest() throws ApiException {
        CreateUserByName createUserByName = null;
        UserDto response = api.createUserByName(createUserByName);
        // TODO: test validations
    }

    /**
     * Deletes a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        UUID userId = null;
        api.deleteUser(userId);
        // TODO: test validations
    }

    /**
     * Initiates the forgot password process for a local user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgotPasswordTest() throws ApiException {
        ForgotPasswordDto forgotPasswordDto = null;
        ForgotPasswordResult response = api.forgotPassword(forgotPasswordDto);
        // TODO: test validations
    }

    /**
     * Redeems a forgot password pin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgotPasswordPinTest() throws ApiException {
        String body = null;
        PinRedeemResult response = api.forgotPasswordPin(body);
        // TODO: test validations
    }

    /**
     * Gets the user based on auth token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        UserDto response = api.getCurrentUser();
        // TODO: test validations
    }

    /**
     * Gets a list of publicly visible users for display on a login screen.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicUsersTest() throws ApiException {
        List<UserDto> response = api.getPublicUsers();
        // TODO: test validations
    }

    /**
     * Gets a user by Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws ApiException {
        UUID userId = null;
        UserDto response = api.getUserById(userId);
        // TODO: test validations
    }

    /**
     * Gets a list of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Boolean isHidden = null;
        Boolean isDisabled = null;
        List<UserDto> response = api.getUsers(isHidden, isDisabled);
        // TODO: test validations
    }

    /**
     * Updates a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        UUID userId = null;
        UserDto userDto = null;
        api.updateUser(userId, userDto);
        // TODO: test validations
    }

    /**
     * Updates a user configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserConfigurationTest() throws ApiException {
        UUID userId = null;
        UserConfiguration userConfiguration = null;
        api.updateUserConfiguration(userId, userConfiguration);
        // TODO: test validations
    }

    /**
     * Updates a user&#39;s easy password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserEasyPasswordTest() throws ApiException {
        UUID userId = null;
        UpdateUserEasyPassword updateUserEasyPassword = null;
        api.updateUserEasyPassword(userId, updateUserEasyPassword);
        // TODO: test validations
    }

    /**
     * Updates a user&#39;s password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserPasswordTest() throws ApiException {
        UUID userId = null;
        UpdateUserPassword updateUserPassword = null;
        api.updateUserPassword(userId, updateUserPassword);
        // TODO: test validations
    }

    /**
     * Updates a user policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserPolicyTest() throws ApiException {
        UUID userId = null;
        UserPolicy userPolicy = null;
        api.updateUserPolicy(userId, userPolicy);
        // TODO: test validations
    }

}
