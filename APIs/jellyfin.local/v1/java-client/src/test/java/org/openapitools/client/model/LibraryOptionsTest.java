/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MediaPathInfo;
import org.openapitools.client.model.TypeOptions;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for LibraryOptions
 */
public class LibraryOptionsTest {
    private final LibraryOptions model = new LibraryOptions();

    /**
     * Model tests for LibraryOptions
     */
    @Test
    public void testLibraryOptions() {
        // TODO: test LibraryOptions
    }

    /**
     * Test the property 'automaticRefreshIntervalDays'
     */
    @Test
    public void automaticRefreshIntervalDaysTest() {
        // TODO: test automaticRefreshIntervalDays
    }

    /**
     * Test the property 'disabledLocalMetadataReaders'
     */
    @Test
    public void disabledLocalMetadataReadersTest() {
        // TODO: test disabledLocalMetadataReaders
    }

    /**
     * Test the property 'disabledSubtitleFetchers'
     */
    @Test
    public void disabledSubtitleFetchersTest() {
        // TODO: test disabledSubtitleFetchers
    }

    /**
     * Test the property 'enableAutomaticSeriesGrouping'
     */
    @Test
    public void enableAutomaticSeriesGroupingTest() {
        // TODO: test enableAutomaticSeriesGrouping
    }

    /**
     * Test the property 'enableChapterImageExtraction'
     */
    @Test
    public void enableChapterImageExtractionTest() {
        // TODO: test enableChapterImageExtraction
    }

    /**
     * Test the property 'enableEmbeddedEpisodeInfos'
     */
    @Test
    public void enableEmbeddedEpisodeInfosTest() {
        // TODO: test enableEmbeddedEpisodeInfos
    }

    /**
     * Test the property 'enableEmbeddedTitles'
     */
    @Test
    public void enableEmbeddedTitlesTest() {
        // TODO: test enableEmbeddedTitles
    }

    /**
     * Test the property 'enableInternetProviders'
     */
    @Test
    public void enableInternetProvidersTest() {
        // TODO: test enableInternetProviders
    }

    /**
     * Test the property 'enablePhotos'
     */
    @Test
    public void enablePhotosTest() {
        // TODO: test enablePhotos
    }

    /**
     * Test the property 'enableRealtimeMonitor'
     */
    @Test
    public void enableRealtimeMonitorTest() {
        // TODO: test enableRealtimeMonitor
    }

    /**
     * Test the property 'extractChapterImagesDuringLibraryScan'
     */
    @Test
    public void extractChapterImagesDuringLibraryScanTest() {
        // TODO: test extractChapterImagesDuringLibraryScan
    }

    /**
     * Test the property 'localMetadataReaderOrder'
     */
    @Test
    public void localMetadataReaderOrderTest() {
        // TODO: test localMetadataReaderOrder
    }

    /**
     * Test the property 'metadataCountryCode'
     */
    @Test
    public void metadataCountryCodeTest() {
        // TODO: test metadataCountryCode
    }

    /**
     * Test the property 'metadataSavers'
     */
    @Test
    public void metadataSaversTest() {
        // TODO: test metadataSavers
    }

    /**
     * Test the property 'pathInfos'
     */
    @Test
    public void pathInfosTest() {
        // TODO: test pathInfos
    }

    /**
     * Test the property 'preferredMetadataLanguage'
     */
    @Test
    public void preferredMetadataLanguageTest() {
        // TODO: test preferredMetadataLanguage
    }

    /**
     * Test the property 'requirePerfectSubtitleMatch'
     */
    @Test
    public void requirePerfectSubtitleMatchTest() {
        // TODO: test requirePerfectSubtitleMatch
    }

    /**
     * Test the property 'saveLocalMetadata'
     */
    @Test
    public void saveLocalMetadataTest() {
        // TODO: test saveLocalMetadata
    }

    /**
     * Test the property 'saveSubtitlesWithMedia'
     */
    @Test
    public void saveSubtitlesWithMediaTest() {
        // TODO: test saveSubtitlesWithMedia
    }

    /**
     * Test the property 'seasonZeroDisplayName'
     */
    @Test
    public void seasonZeroDisplayNameTest() {
        // TODO: test seasonZeroDisplayName
    }

    /**
     * Test the property 'skipSubtitlesIfAudioTrackMatches'
     */
    @Test
    public void skipSubtitlesIfAudioTrackMatchesTest() {
        // TODO: test skipSubtitlesIfAudioTrackMatches
    }

    /**
     * Test the property 'skipSubtitlesIfEmbeddedSubtitlesPresent'
     */
    @Test
    public void skipSubtitlesIfEmbeddedSubtitlesPresentTest() {
        // TODO: test skipSubtitlesIfEmbeddedSubtitlesPresent
    }

    /**
     * Test the property 'subtitleDownloadLanguages'
     */
    @Test
    public void subtitleDownloadLanguagesTest() {
        // TODO: test subtitleDownloadLanguages
    }

    /**
     * Test the property 'subtitleFetcherOrder'
     */
    @Test
    public void subtitleFetcherOrderTest() {
        // TODO: test subtitleFetcherOrder
    }

    /**
     * Test the property 'typeOptions'
     */
    @Test
    public void typeOptionsTest() {
        // TODO: test typeOptions
    }

}
