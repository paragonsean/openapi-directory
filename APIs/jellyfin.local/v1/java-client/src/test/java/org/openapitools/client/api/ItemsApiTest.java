/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.ItemFilter;
import org.openapitools.client.model.LocationType;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SeriesStatus;
import java.util.UUID;
import org.openapitools.client.model.VideoType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemsApi
 */
@Disabled
public class ItemsApiTest {

    private final ItemsApi api = new ItemsApi();

    /**
     * Gets items based on a query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemsTest() throws ApiException {
        UUID userId = null;
        String maxOfficialRating = null;
        Boolean hasThemeSong = null;
        Boolean hasThemeVideo = null;
        Boolean hasSubtitles = null;
        Boolean hasSpecialFeature = null;
        Boolean hasTrailer = null;
        String adjacentTo = null;
        Integer parentIndexNumber = null;
        Boolean hasParentalRating = null;
        Boolean isHd = null;
        Boolean is4K = null;
        List<LocationType> locationTypes = null;
        List<LocationType> excludeLocationTypes = null;
        Boolean isMissing = null;
        Boolean isUnaired = null;
        Double minCommunityRating = null;
        Double minCriticRating = null;
        OffsetDateTime minPremiereDate = null;
        OffsetDateTime minDateLastSaved = null;
        OffsetDateTime minDateLastSavedForUser = null;
        OffsetDateTime maxPremiereDate = null;
        Boolean hasOverview = null;
        Boolean hasImdbId = null;
        Boolean hasTmdbId = null;
        Boolean hasTvdbId = null;
        List<UUID> excludeItemIds = null;
        Integer startIndex = null;
        Integer limit = null;
        Boolean recursive = null;
        String searchTerm = null;
        String sortOrder = null;
        UUID parentId = null;
        List<ItemFields> fields = null;
        List<String> excludeItemTypes = null;
        List<String> includeItemTypes = null;
        List<ItemFilter> filters = null;
        Boolean isFavorite = null;
        List<String> mediaTypes = null;
        List<ImageType> imageTypes = null;
        String sortBy = null;
        Boolean isPlayed = null;
        List<String> genres = null;
        List<String> officialRatings = null;
        List<String> tags = null;
        List<Integer> years = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        String person = null;
        List<UUID> personIds = null;
        List<String> personTypes = null;
        List<String> studios = null;
        List<String> artists = null;
        List<UUID> excludeArtistIds = null;
        List<UUID> artistIds = null;
        List<UUID> albumArtistIds = null;
        List<UUID> contributingArtistIds = null;
        List<String> albums = null;
        List<UUID> albumIds = null;
        List<UUID> ids = null;
        List<VideoType> videoTypes = null;
        String minOfficialRating = null;
        Boolean isLocked = null;
        Boolean isPlaceHolder = null;
        Boolean hasOfficialRating = null;
        Boolean collapseBoxSetItems = null;
        Integer minWidth = null;
        Integer minHeight = null;
        Integer maxWidth = null;
        Integer maxHeight = null;
        Boolean is3D = null;
        List<SeriesStatus> seriesStatus = null;
        String nameStartsWithOrGreater = null;
        String nameStartsWith = null;
        String nameLessThan = null;
        List<UUID> studioIds = null;
        List<UUID> genreIds = null;
        Boolean enableTotalRecordCount = null;
        Boolean enableImages = null;
        BaseItemDtoQueryResult response = api.getItems(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages);
        // TODO: test validations
    }

    /**
     * Gets items based on a query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemsByUserIdTest() throws ApiException {
        UUID userId = null;
        String maxOfficialRating = null;
        Boolean hasThemeSong = null;
        Boolean hasThemeVideo = null;
        Boolean hasSubtitles = null;
        Boolean hasSpecialFeature = null;
        Boolean hasTrailer = null;
        String adjacentTo = null;
        Integer parentIndexNumber = null;
        Boolean hasParentalRating = null;
        Boolean isHd = null;
        Boolean is4K = null;
        List<LocationType> locationTypes = null;
        List<LocationType> excludeLocationTypes = null;
        Boolean isMissing = null;
        Boolean isUnaired = null;
        Double minCommunityRating = null;
        Double minCriticRating = null;
        OffsetDateTime minPremiereDate = null;
        OffsetDateTime minDateLastSaved = null;
        OffsetDateTime minDateLastSavedForUser = null;
        OffsetDateTime maxPremiereDate = null;
        Boolean hasOverview = null;
        Boolean hasImdbId = null;
        Boolean hasTmdbId = null;
        Boolean hasTvdbId = null;
        List<UUID> excludeItemIds = null;
        Integer startIndex = null;
        Integer limit = null;
        Boolean recursive = null;
        String searchTerm = null;
        String sortOrder = null;
        UUID parentId = null;
        List<ItemFields> fields = null;
        List<String> excludeItemTypes = null;
        List<String> includeItemTypes = null;
        List<ItemFilter> filters = null;
        Boolean isFavorite = null;
        List<String> mediaTypes = null;
        List<ImageType> imageTypes = null;
        String sortBy = null;
        Boolean isPlayed = null;
        List<String> genres = null;
        List<String> officialRatings = null;
        List<String> tags = null;
        List<Integer> years = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        String person = null;
        List<UUID> personIds = null;
        List<String> personTypes = null;
        List<String> studios = null;
        List<String> artists = null;
        List<UUID> excludeArtistIds = null;
        List<UUID> artistIds = null;
        List<UUID> albumArtistIds = null;
        List<UUID> contributingArtistIds = null;
        List<String> albums = null;
        List<UUID> albumIds = null;
        List<UUID> ids = null;
        List<VideoType> videoTypes = null;
        String minOfficialRating = null;
        Boolean isLocked = null;
        Boolean isPlaceHolder = null;
        Boolean hasOfficialRating = null;
        Boolean collapseBoxSetItems = null;
        Integer minWidth = null;
        Integer minHeight = null;
        Integer maxWidth = null;
        Integer maxHeight = null;
        Boolean is3D = null;
        List<SeriesStatus> seriesStatus = null;
        String nameStartsWithOrGreater = null;
        String nameStartsWith = null;
        String nameLessThan = null;
        List<UUID> studioIds = null;
        List<UUID> genreIds = null;
        Boolean enableTotalRecordCount = null;
        Boolean enableImages = null;
        BaseItemDtoQueryResult response = api.getItemsByUserId(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages);
        // TODO: test validations
    }

    /**
     * Gets items based on a query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResumeItemsTest() throws ApiException {
        UUID userId = null;
        Integer startIndex = null;
        Integer limit = null;
        String searchTerm = null;
        UUID parentId = null;
        List<ItemFields> fields = null;
        List<String> mediaTypes = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        List<String> excludeItemTypes = null;
        List<String> includeItemTypes = null;
        Boolean enableTotalRecordCount = null;
        Boolean enableImages = null;
        BaseItemDtoQueryResult response = api.getResumeItems(userId, startIndex, limit, searchTerm, parentId, fields, mediaTypes, enableUserData, imageTypeLimit, enableImageTypes, excludeItemTypes, includeItemTypes, enableTotalRecordCount, enableImages);
        // TODO: test validations
    }

}
