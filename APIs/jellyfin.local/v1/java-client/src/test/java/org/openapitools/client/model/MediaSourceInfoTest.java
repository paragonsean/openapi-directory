/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IsoType;
import org.openapitools.client.model.MediaAttachment;
import org.openapitools.client.model.MediaProtocol;
import org.openapitools.client.model.MediaSourceType;
import org.openapitools.client.model.MediaStream;
import org.openapitools.client.model.TransportStreamTimestamp;
import org.openapitools.client.model.Video3DFormat;
import org.openapitools.client.model.VideoType;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for MediaSourceInfo
 */
public class MediaSourceInfoTest {
    private final MediaSourceInfo model = new MediaSourceInfo();

    /**
     * Model tests for MediaSourceInfo
     */
    @Test
    public void testMediaSourceInfo() {
        // TODO: test MediaSourceInfo
    }

    /**
     * Test the property 'analyzeDurationMs'
     */
    @Test
    public void analyzeDurationMsTest() {
        // TODO: test analyzeDurationMs
    }

    /**
     * Test the property 'bitrate'
     */
    @Test
    public void bitrateTest() {
        // TODO: test bitrate
    }

    /**
     * Test the property 'bufferMs'
     */
    @Test
    public void bufferMsTest() {
        // TODO: test bufferMs
    }

    /**
     * Test the property 'container'
     */
    @Test
    public void containerTest() {
        // TODO: test container
    }

    /**
     * Test the property 'defaultAudioStreamIndex'
     */
    @Test
    public void defaultAudioStreamIndexTest() {
        // TODO: test defaultAudioStreamIndex
    }

    /**
     * Test the property 'defaultSubtitleStreamIndex'
     */
    @Test
    public void defaultSubtitleStreamIndexTest() {
        // TODO: test defaultSubtitleStreamIndex
    }

    /**
     * Test the property 'etag'
     */
    @Test
    public void etagTest() {
        // TODO: test etag
    }

    /**
     * Test the property 'encoderPath'
     */
    @Test
    public void encoderPathTest() {
        // TODO: test encoderPath
    }

    /**
     * Test the property 'encoderProtocol'
     */
    @Test
    public void encoderProtocolTest() {
        // TODO: test encoderProtocol
    }

    /**
     * Test the property 'formats'
     */
    @Test
    public void formatsTest() {
        // TODO: test formats
    }

    /**
     * Test the property 'genPtsInput'
     */
    @Test
    public void genPtsInputTest() {
        // TODO: test genPtsInput
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'ignoreDts'
     */
    @Test
    public void ignoreDtsTest() {
        // TODO: test ignoreDts
    }

    /**
     * Test the property 'ignoreIndex'
     */
    @Test
    public void ignoreIndexTest() {
        // TODO: test ignoreIndex
    }

    /**
     * Test the property 'isInfiniteStream'
     */
    @Test
    public void isInfiniteStreamTest() {
        // TODO: test isInfiniteStream
    }

    /**
     * Test the property 'isRemote'
     */
    @Test
    public void isRemoteTest() {
        // TODO: test isRemote
    }

    /**
     * Test the property 'isoType'
     */
    @Test
    public void isoTypeTest() {
        // TODO: test isoType
    }

    /**
     * Test the property 'liveStreamId'
     */
    @Test
    public void liveStreamIdTest() {
        // TODO: test liveStreamId
    }

    /**
     * Test the property 'mediaAttachments'
     */
    @Test
    public void mediaAttachmentsTest() {
        // TODO: test mediaAttachments
    }

    /**
     * Test the property 'mediaStreams'
     */
    @Test
    public void mediaStreamsTest() {
        // TODO: test mediaStreams
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'openToken'
     */
    @Test
    public void openTokenTest() {
        // TODO: test openToken
    }

    /**
     * Test the property 'path'
     */
    @Test
    public void pathTest() {
        // TODO: test path
    }

    /**
     * Test the property 'protocol'
     */
    @Test
    public void protocolTest() {
        // TODO: test protocol
    }

    /**
     * Test the property 'readAtNativeFramerate'
     */
    @Test
    public void readAtNativeFramerateTest() {
        // TODO: test readAtNativeFramerate
    }

    /**
     * Test the property 'requiredHttpHeaders'
     */
    @Test
    public void requiredHttpHeadersTest() {
        // TODO: test requiredHttpHeaders
    }

    /**
     * Test the property 'requiresClosing'
     */
    @Test
    public void requiresClosingTest() {
        // TODO: test requiresClosing
    }

    /**
     * Test the property 'requiresLooping'
     */
    @Test
    public void requiresLoopingTest() {
        // TODO: test requiresLooping
    }

    /**
     * Test the property 'requiresOpening'
     */
    @Test
    public void requiresOpeningTest() {
        // TODO: test requiresOpening
    }

    /**
     * Test the property 'runTimeTicks'
     */
    @Test
    public void runTimeTicksTest() {
        // TODO: test runTimeTicks
    }

    /**
     * Test the property 'size'
     */
    @Test
    public void sizeTest() {
        // TODO: test size
    }

    /**
     * Test the property 'supportsDirectPlay'
     */
    @Test
    public void supportsDirectPlayTest() {
        // TODO: test supportsDirectPlay
    }

    /**
     * Test the property 'supportsDirectStream'
     */
    @Test
    public void supportsDirectStreamTest() {
        // TODO: test supportsDirectStream
    }

    /**
     * Test the property 'supportsProbing'
     */
    @Test
    public void supportsProbingTest() {
        // TODO: test supportsProbing
    }

    /**
     * Test the property 'supportsTranscoding'
     */
    @Test
    public void supportsTranscodingTest() {
        // TODO: test supportsTranscoding
    }

    /**
     * Test the property 'timestamp'
     */
    @Test
    public void timestampTest() {
        // TODO: test timestamp
    }

    /**
     * Test the property 'transcodingContainer'
     */
    @Test
    public void transcodingContainerTest() {
        // TODO: test transcodingContainer
    }

    /**
     * Test the property 'transcodingSubProtocol'
     */
    @Test
    public void transcodingSubProtocolTest() {
        // TODO: test transcodingSubProtocol
    }

    /**
     * Test the property 'transcodingUrl'
     */
    @Test
    public void transcodingUrlTest() {
        // TODO: test transcodingUrl
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'video3DFormat'
     */
    @Test
    public void video3DFormatTest() {
        // TODO: test video3DFormat
    }

    /**
     * Test the property 'videoType'
     */
    @Test
    public void videoTypeTest() {
        // TODO: test videoType
    }

}
