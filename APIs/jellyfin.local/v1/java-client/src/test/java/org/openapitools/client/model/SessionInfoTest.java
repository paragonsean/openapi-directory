/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.BaseItem;
import org.openapitools.client.model.BaseItemDto;
import org.openapitools.client.model.ClientCapabilities;
import org.openapitools.client.model.GeneralCommandType;
import org.openapitools.client.model.PlayerStateInfo;
import org.openapitools.client.model.QueueItem;
import org.openapitools.client.model.SessionUserInfo;
import org.openapitools.client.model.TranscodingInfo;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for SessionInfo
 */
public class SessionInfoTest {
    private final SessionInfo model = new SessionInfo();

    /**
     * Model tests for SessionInfo
     */
    @Test
    public void testSessionInfo() {
        // TODO: test SessionInfo
    }

    /**
     * Test the property 'additionalUsers'
     */
    @Test
    public void additionalUsersTest() {
        // TODO: test additionalUsers
    }

    /**
     * Test the property 'applicationVersion'
     */
    @Test
    public void applicationVersionTest() {
        // TODO: test applicationVersion
    }

    /**
     * Test the property 'capabilities'
     */
    @Test
    public void capabilitiesTest() {
        // TODO: test capabilities
    }

    /**
     * Test the property 'client'
     */
    @Test
    public void clientTest() {
        // TODO: test client
    }

    /**
     * Test the property 'deviceId'
     */
    @Test
    public void deviceIdTest() {
        // TODO: test deviceId
    }

    /**
     * Test the property 'deviceName'
     */
    @Test
    public void deviceNameTest() {
        // TODO: test deviceName
    }

    /**
     * Test the property 'deviceType'
     */
    @Test
    public void deviceTypeTest() {
        // TODO: test deviceType
    }

    /**
     * Test the property 'fullNowPlayingItem'
     */
    @Test
    public void fullNowPlayingItemTest() {
        // TODO: test fullNowPlayingItem
    }

    /**
     * Test the property 'hasCustomDeviceName'
     */
    @Test
    public void hasCustomDeviceNameTest() {
        // TODO: test hasCustomDeviceName
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'isActive'
     */
    @Test
    public void isActiveTest() {
        // TODO: test isActive
    }

    /**
     * Test the property 'lastActivityDate'
     */
    @Test
    public void lastActivityDateTest() {
        // TODO: test lastActivityDate
    }

    /**
     * Test the property 'lastPlaybackCheckIn'
     */
    @Test
    public void lastPlaybackCheckInTest() {
        // TODO: test lastPlaybackCheckIn
    }

    /**
     * Test the property 'nowPlayingItem'
     */
    @Test
    public void nowPlayingItemTest() {
        // TODO: test nowPlayingItem
    }

    /**
     * Test the property 'nowPlayingQueue'
     */
    @Test
    public void nowPlayingQueueTest() {
        // TODO: test nowPlayingQueue
    }

    /**
     * Test the property 'nowViewingItem'
     */
    @Test
    public void nowViewingItemTest() {
        // TODO: test nowViewingItem
    }

    /**
     * Test the property 'playState'
     */
    @Test
    public void playStateTest() {
        // TODO: test playState
    }

    /**
     * Test the property 'playableMediaTypes'
     */
    @Test
    public void playableMediaTypesTest() {
        // TODO: test playableMediaTypes
    }

    /**
     * Test the property 'playlistItemId'
     */
    @Test
    public void playlistItemIdTest() {
        // TODO: test playlistItemId
    }

    /**
     * Test the property 'remoteEndPoint'
     */
    @Test
    public void remoteEndPointTest() {
        // TODO: test remoteEndPoint
    }

    /**
     * Test the property 'serverId'
     */
    @Test
    public void serverIdTest() {
        // TODO: test serverId
    }

    /**
     * Test the property 'supportedCommands'
     */
    @Test
    public void supportedCommandsTest() {
        // TODO: test supportedCommands
    }

    /**
     * Test the property 'supportsMediaControl'
     */
    @Test
    public void supportsMediaControlTest() {
        // TODO: test supportsMediaControl
    }

    /**
     * Test the property 'supportsRemoteControl'
     */
    @Test
    public void supportsRemoteControlTest() {
        // TODO: test supportsRemoteControl
    }

    /**
     * Test the property 'transcodingInfo'
     */
    @Test
    public void transcodingInfoTest() {
        // TODO: test transcodingInfo
    }

    /**
     * Test the property 'userId'
     */
    @Test
    public void userIdTest() {
        // TODO: test userId
    }

    /**
     * Test the property 'userName'
     */
    @Test
    public void userNameTest() {
        // TODO: test userName
    }

    /**
     * Test the property 'userPrimaryImageTag'
     */
    @Test
    public void userPrimaryImageTagTest() {
        // TODO: test userPrimaryImageTag
    }

}
