/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AllThemeMediaResult;
import org.openapitools.client.model.BaseItemDto;
import org.openapitools.client.model.BaseItemDtoQueryResult;
import java.io.File;
import org.openapitools.client.model.ItemCounts;
import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.LibraryOptionsResultDto;
import org.openapitools.client.model.MediaUpdateInfoDto;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.ThemeMediaResult;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LibraryApi
 */
@Disabled
public class LibraryApiTest {

    private final LibraryApi api = new LibraryApi();

    /**
     * Deletes an item from the library and filesystem.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        UUID itemId = null;
        api.deleteItem(itemId);
        // TODO: test validations
    }

    /**
     * Deletes items from the library and filesystem.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteItemsTest() throws ApiException {
        List<UUID> ids = null;
        api.deleteItems(ids);
        // TODO: test validations
    }

    /**
     * Gets all parents of an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAncestorsTest() throws ApiException {
        UUID itemId = null;
        UUID userId = null;
        List<BaseItemDto> response = api.getAncestors(itemId, userId);
        // TODO: test validations
    }

    /**
     * Gets critic review for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCriticReviewsTest() throws ApiException {
        String itemId = null;
        BaseItemDtoQueryResult response = api.getCriticReviews(itemId);
        // TODO: test validations
    }

    /**
     * Downloads item media.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDownloadTest() throws ApiException {
        UUID itemId = null;
        File response = api.getDownload(itemId);
        // TODO: test validations
    }

    /**
     * Get the original file of an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileTest() throws ApiException {
        UUID itemId = null;
        File response = api.getFile(itemId);
        // TODO: test validations
    }

    /**
     * Get item counts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemCountsTest() throws ApiException {
        UUID userId = null;
        Boolean isFavorite = null;
        ItemCounts response = api.getItemCounts(userId, isFavorite);
        // TODO: test validations
    }

    /**
     * Gets the library options info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLibraryOptionsInfoTest() throws ApiException {
        String libraryContentType = null;
        Boolean isNewLibrary = null;
        LibraryOptionsResultDto response = api.getLibraryOptionsInfo(libraryContentType, isNewLibrary);
        // TODO: test validations
    }

    /**
     * Gets all user media folders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMediaFoldersTest() throws ApiException {
        Boolean isHidden = null;
        BaseItemDtoQueryResult response = api.getMediaFolders(isHidden);
        // TODO: test validations
    }

    /**
     * Gets a list of physical paths from virtual folders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhysicalPathsTest() throws ApiException {
        List<String> response = api.getPhysicalPaths();
        // TODO: test validations
    }

    /**
     * Gets similar items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimilarAlbumsTest() throws ApiException {
        UUID itemId = null;
        List<UUID> excludeArtistIds = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        BaseItemDtoQueryResult response = api.getSimilarAlbums(itemId, excludeArtistIds, userId, limit, fields);
        // TODO: test validations
    }

    /**
     * Gets similar items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimilarArtistsTest() throws ApiException {
        UUID itemId = null;
        List<UUID> excludeArtistIds = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        BaseItemDtoQueryResult response = api.getSimilarArtists(itemId, excludeArtistIds, userId, limit, fields);
        // TODO: test validations
    }

    /**
     * Gets similar items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimilarItemsTest() throws ApiException {
        UUID itemId = null;
        List<UUID> excludeArtistIds = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        BaseItemDtoQueryResult response = api.getSimilarItems(itemId, excludeArtistIds, userId, limit, fields);
        // TODO: test validations
    }

    /**
     * Gets similar items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimilarMoviesTest() throws ApiException {
        UUID itemId = null;
        List<UUID> excludeArtistIds = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        BaseItemDtoQueryResult response = api.getSimilarMovies(itemId, excludeArtistIds, userId, limit, fields);
        // TODO: test validations
    }

    /**
     * Gets similar items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimilarShowsTest() throws ApiException {
        UUID itemId = null;
        List<UUID> excludeArtistIds = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        BaseItemDtoQueryResult response = api.getSimilarShows(itemId, excludeArtistIds, userId, limit, fields);
        // TODO: test validations
    }

    /**
     * Gets similar items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimilarTrailersTest() throws ApiException {
        UUID itemId = null;
        List<UUID> excludeArtistIds = null;
        UUID userId = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        BaseItemDtoQueryResult response = api.getSimilarTrailers(itemId, excludeArtistIds, userId, limit, fields);
        // TODO: test validations
    }

    /**
     * Get theme songs and videos for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThemeMediaTest() throws ApiException {
        UUID itemId = null;
        UUID userId = null;
        Boolean inheritFromParent = null;
        AllThemeMediaResult response = api.getThemeMedia(itemId, userId, inheritFromParent);
        // TODO: test validations
    }

    /**
     * Get theme songs for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThemeSongsTest() throws ApiException {
        UUID itemId = null;
        UUID userId = null;
        Boolean inheritFromParent = null;
        ThemeMediaResult response = api.getThemeSongs(itemId, userId, inheritFromParent);
        // TODO: test validations
    }

    /**
     * Get theme videos for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThemeVideosTest() throws ApiException {
        UUID itemId = null;
        UUID userId = null;
        Boolean inheritFromParent = null;
        ThemeMediaResult response = api.getThemeVideos(itemId, userId, inheritFromParent);
        // TODO: test validations
    }

    /**
     * Reports that new movies have been added by an external source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAddedMoviesTest() throws ApiException {
        String tmdbId = null;
        String imdbId = null;
        api.postAddedMovies(tmdbId, imdbId);
        // TODO: test validations
    }

    /**
     * Reports that new episodes of a series have been added by an external source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAddedSeriesTest() throws ApiException {
        String tvdbId = null;
        api.postAddedSeries(tvdbId);
        // TODO: test validations
    }

    /**
     * Reports that new movies have been added by an external source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUpdatedMediaTest() throws ApiException {
        List<MediaUpdateInfoDto> mediaUpdateInfoDto = null;
        api.postUpdatedMedia(mediaUpdateInfoDto);
        // TODO: test validations
    }

    /**
     * Reports that new movies have been added by an external source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUpdatedMoviesTest() throws ApiException {
        String tmdbId = null;
        String imdbId = null;
        api.postUpdatedMovies(tmdbId, imdbId);
        // TODO: test validations
    }

    /**
     * Reports that new episodes of a series have been added by an external source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUpdatedSeriesTest() throws ApiException {
        String tvdbId = null;
        api.postUpdatedSeries(tvdbId);
        // TODO: test validations
    }

    /**
     * Starts a library scan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshLibraryTest() throws ApiException {
        api.refreshLibrary();
        // TODO: test validations
    }

}
