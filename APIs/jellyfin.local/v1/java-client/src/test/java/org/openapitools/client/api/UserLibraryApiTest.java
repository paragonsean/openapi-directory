/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BaseItemDto;
import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import java.util.UUID;
import org.openapitools.client.model.UserItemDataDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserLibraryApi
 */
@Disabled
public class UserLibraryApiTest {

    private final UserLibraryApi api = new UserLibraryApi();

    /**
     * Deletes a user&#39;s saved personal rating for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserItemRatingTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        UserItemDataDto response = api.deleteUserItemRating(userId, itemId);
        // TODO: test validations
    }

    /**
     * Gets intros to play before the main media item plays.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntrosTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        BaseItemDtoQueryResult response = api.getIntros(userId, itemId);
        // TODO: test validations
    }

    /**
     * Gets an item from a user&#39;s library.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        BaseItemDto response = api.getItem(userId, itemId);
        // TODO: test validations
    }

    /**
     * Gets latest media.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLatestMediaTest() throws ApiException {
        UUID userId = null;
        UUID parentId = null;
        List<ItemFields> fields = null;
        List<String> includeItemTypes = null;
        Boolean isPlayed = null;
        Boolean enableImages = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        Boolean enableUserData = null;
        Integer limit = null;
        Boolean groupItems = null;
        List<BaseItemDto> response = api.getLatestMedia(userId, parentId, fields, includeItemTypes, isPlayed, enableImages, imageTypeLimit, enableImageTypes, enableUserData, limit, groupItems);
        // TODO: test validations
    }

    /**
     * Gets local trailers for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocalTrailersTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        List<BaseItemDto> response = api.getLocalTrailers(userId, itemId);
        // TODO: test validations
    }

    /**
     * Gets the root folder from a user&#39;s library.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRootFolderTest() throws ApiException {
        UUID userId = null;
        BaseItemDto response = api.getRootFolder(userId);
        // TODO: test validations
    }

    /**
     * Gets special features for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecialFeaturesTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        List<BaseItemDto> response = api.getSpecialFeatures(userId, itemId);
        // TODO: test validations
    }

    /**
     * Marks an item as a favorite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markFavoriteItemTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        UserItemDataDto response = api.markFavoriteItem(userId, itemId);
        // TODO: test validations
    }

    /**
     * Unmarks item as a favorite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unmarkFavoriteItemTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        UserItemDataDto response = api.unmarkFavoriteItem(userId, itemId);
        // TODO: test validations
    }

    /**
     * Updates a user&#39;s rating for an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserItemRatingTest() throws ApiException {
        UUID userId = null;
        UUID itemId = null;
        Boolean likes = null;
        UserItemDataDto response = api.updateUserItemRating(userId, itemId, likes);
        // TODO: test validations
    }

}
