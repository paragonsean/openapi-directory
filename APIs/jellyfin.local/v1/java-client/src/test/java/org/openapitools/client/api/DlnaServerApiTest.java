/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.ProblemDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DlnaServerApi
 */
@Disabled
public class DlnaServerApiTest {

    private final DlnaServerApi api = new DlnaServerApi();

    /**
     * Gets Dlna media receiver registrar xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionManagerTest() throws ApiException {
        String serverId = null;
        File response = api.getConnectionManager(serverId);
        // TODO: test validations
    }

    /**
     * Gets Dlna media receiver registrar xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionManager2Test() throws ApiException {
        String serverId = null;
        File response = api.getConnectionManager2(serverId);
        // TODO: test validations
    }

    /**
     * Gets Dlna media receiver registrar xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionManager3Test() throws ApiException {
        String serverId = null;
        File response = api.getConnectionManager3(serverId);
        // TODO: test validations
    }

    /**
     * Gets Dlna content directory xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentDirectoryTest() throws ApiException {
        String serverId = null;
        File response = api.getContentDirectory(serverId);
        // TODO: test validations
    }

    /**
     * Gets Dlna content directory xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentDirectory2Test() throws ApiException {
        String serverId = null;
        File response = api.getContentDirectory2(serverId);
        // TODO: test validations
    }

    /**
     * Gets Dlna content directory xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentDirectory3Test() throws ApiException {
        String serverId = null;
        File response = api.getContentDirectory3(serverId);
        // TODO: test validations
    }

    /**
     * Get Description Xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDescriptionXmlTest() throws ApiException {
        String serverId = null;
        File response = api.getDescriptionXml(serverId);
        // TODO: test validations
    }

    /**
     * Get Description Xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDescriptionXml2Test() throws ApiException {
        String serverId = null;
        File response = api.getDescriptionXml2(serverId);
        // TODO: test validations
    }

    /**
     * Gets a server icon.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIconTest() throws ApiException {
        String fileName = null;
        File response = api.getIcon(fileName);
        // TODO: test validations
    }

    /**
     * Gets a server icon.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIconIdTest() throws ApiException {
        String serverId = null;
        String fileName = null;
        File response = api.getIconId(serverId, fileName);
        // TODO: test validations
    }

    /**
     * Gets Dlna media receiver registrar xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMediaReceiverRegistrarTest() throws ApiException {
        String serverId = null;
        File response = api.getMediaReceiverRegistrar(serverId);
        // TODO: test validations
    }

    /**
     * Gets Dlna media receiver registrar xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMediaReceiverRegistrar2Test() throws ApiException {
        String serverId = null;
        File response = api.getMediaReceiverRegistrar2(serverId);
        // TODO: test validations
    }

    /**
     * Gets Dlna media receiver registrar xml.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMediaReceiverRegistrar3Test() throws ApiException {
        String serverId = null;
        File response = api.getMediaReceiverRegistrar3(serverId);
        // TODO: test validations
    }

    /**
     * Process a connection manager control request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processConnectionManagerControlRequestTest() throws ApiException {
        String serverId = null;
        File response = api.processConnectionManagerControlRequest(serverId);
        // TODO: test validations
    }

    /**
     * Process a content directory control request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processContentDirectoryControlRequestTest() throws ApiException {
        String serverId = null;
        File response = api.processContentDirectoryControlRequest(serverId);
        // TODO: test validations
    }

    /**
     * Process a media receiver registrar control request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processMediaReceiverRegistrarControlRequestTest() throws ApiException {
        String serverId = null;
        File response = api.processMediaReceiverRegistrarControlRequest(serverId);
        // TODO: test validations
    }

}
