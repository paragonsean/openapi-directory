/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BaseItemDto;
import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.ChannelMappingOptionsDto;
import org.openapitools.client.model.ChannelType;
import java.io.File;
import org.openapitools.client.model.GetProgramsDto;
import org.openapitools.client.model.GuideInfo;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.ListingsProviderInfo;
import org.openapitools.client.model.LiveTvInfo;
import org.openapitools.client.model.NameIdPair;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.RecordingStatus;
import org.openapitools.client.model.SeriesTimerInfoDto;
import org.openapitools.client.model.SeriesTimerInfoDtoQueryResult;
import org.openapitools.client.model.SetChannelMappingDto;
import org.openapitools.client.model.SortOrder;
import org.openapitools.client.model.TimerInfoDto;
import org.openapitools.client.model.TimerInfoDtoQueryResult;
import org.openapitools.client.model.TunerChannelMapping;
import org.openapitools.client.model.TunerHostInfo;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LiveTvApi
 */
@Disabled
public class LiveTvApiTest {

    private final LiveTvApi api = new LiveTvApi();

    /**
     * Adds a listings provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addListingProviderTest() throws ApiException {
        String pw = null;
        Boolean validateListings = null;
        Boolean validateLogin = null;
        ListingsProviderInfo listingsProviderInfo = null;
        ListingsProviderInfo response = api.addListingProvider(pw, validateListings, validateLogin, listingsProviderInfo);
        // TODO: test validations
    }

    /**
     * Adds a tuner host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTunerHostTest() throws ApiException {
        TunerHostInfo tunerHostInfo = null;
        TunerHostInfo response = api.addTunerHost(tunerHostInfo);
        // TODO: test validations
    }

    /**
     * Cancels a live tv series timer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSeriesTimerTest() throws ApiException {
        String timerId = null;
        api.cancelSeriesTimer(timerId);
        // TODO: test validations
    }

    /**
     * Cancels a live tv timer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelTimerTest() throws ApiException {
        String timerId = null;
        api.cancelTimer(timerId);
        // TODO: test validations
    }

    /**
     * Creates a live tv series timer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSeriesTimerTest() throws ApiException {
        SeriesTimerInfoDto seriesTimerInfoDto = null;
        api.createSeriesTimer(seriesTimerInfoDto);
        // TODO: test validations
    }

    /**
     * Creates a live tv timer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTimerTest() throws ApiException {
        TimerInfoDto timerInfoDto = null;
        api.createTimer(timerInfoDto);
        // TODO: test validations
    }

    /**
     * Delete listing provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteListingProviderTest() throws ApiException {
        String id = null;
        api.deleteListingProvider(id);
        // TODO: test validations
    }

    /**
     * Deletes a live tv recording.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecordingTest() throws ApiException {
        UUID recordingId = null;
        api.deleteRecording(recordingId);
        // TODO: test validations
    }

    /**
     * Deletes a tuner host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTunerHostTest() throws ApiException {
        String id = null;
        api.deleteTunerHost(id);
        // TODO: test validations
    }

    /**
     * Discover tuners.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoverTunersTest() throws ApiException {
        Boolean newDevicesOnly = null;
        List<TunerHostInfo> response = api.discoverTuners(newDevicesOnly);
        // TODO: test validations
    }

    /**
     * Discover tuners.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discvoverTunersTest() throws ApiException {
        Boolean newDevicesOnly = null;
        List<TunerHostInfo> response = api.discvoverTuners(newDevicesOnly);
        // TODO: test validations
    }

    /**
     * Gets a live tv channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelTest() throws ApiException {
        UUID channelId = null;
        UUID userId = null;
        BaseItemDto response = api.getChannel(channelId, userId);
        // TODO: test validations
    }

    /**
     * Get channel mapping options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelMappingOptionsTest() throws ApiException {
        String providerId = null;
        ChannelMappingOptionsDto response = api.getChannelMappingOptions(providerId);
        // TODO: test validations
    }

    /**
     * Gets default listings provider info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultListingProviderTest() throws ApiException {
        ListingsProviderInfo response = api.getDefaultListingProvider();
        // TODO: test validations
    }

    /**
     * Gets the default values for a new timer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultTimerTest() throws ApiException {
        String programId = null;
        SeriesTimerInfoDto response = api.getDefaultTimer(programId);
        // TODO: test validations
    }

    /**
     * Get guid info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGuideInfoTest() throws ApiException {
        GuideInfo response = api.getGuideInfo();
        // TODO: test validations
    }

    /**
     * Gets available lineups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLineupsTest() throws ApiException {
        String id = null;
        String type = null;
        String location = null;
        String country = null;
        List<NameIdPair> response = api.getLineups(id, type, location, country);
        // TODO: test validations
    }

    /**
     * Gets a live tv recording stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLiveRecordingFileTest() throws ApiException {
        String recordingId = null;
        File response = api.getLiveRecordingFile(recordingId);
        // TODO: test validations
    }

    /**
     * Gets a live tv channel stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLiveStreamFileTest() throws ApiException {
        String streamId = null;
        String container = null;
        File response = api.getLiveStreamFile(streamId, container);
        // TODO: test validations
    }

    /**
     * Gets available live tv channels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLiveTvChannelsTest() throws ApiException {
        ChannelType type = null;
        UUID userId = null;
        Integer startIndex = null;
        Boolean isMovie = null;
        Boolean isSeries = null;
        Boolean isNews = null;
        Boolean isKids = null;
        Boolean isSports = null;
        Integer limit = null;
        Boolean isFavorite = null;
        Boolean isLiked = null;
        Boolean isDisliked = null;
        Boolean enableImages = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        List<ItemFields> fields = null;
        Boolean enableUserData = null;
        List<String> sortBy = null;
        SortOrder sortOrder = null;
        Boolean enableFavoriteSorting = null;
        Boolean addCurrentProgram = null;
        BaseItemDtoQueryResult response = api.getLiveTvChannels(type, userId, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, sortBy, sortOrder, enableFavoriteSorting, addCurrentProgram);
        // TODO: test validations
    }

    /**
     * Gets available live tv services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLiveTvInfoTest() throws ApiException {
        LiveTvInfo response = api.getLiveTvInfo();
        // TODO: test validations
    }

    /**
     * Gets available live tv epgs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLiveTvProgramsTest() throws ApiException {
        List<UUID> channelIds = null;
        UUID userId = null;
        OffsetDateTime minStartDate = null;
        Boolean hasAired = null;
        Boolean isAiring = null;
        OffsetDateTime maxStartDate = null;
        OffsetDateTime minEndDate = null;
        OffsetDateTime maxEndDate = null;
        Boolean isMovie = null;
        Boolean isSeries = null;
        Boolean isNews = null;
        Boolean isKids = null;
        Boolean isSports = null;
        Integer startIndex = null;
        Integer limit = null;
        String sortBy = null;
        String sortOrder = null;
        List<String> genres = null;
        List<UUID> genreIds = null;
        Boolean enableImages = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        Boolean enableUserData = null;
        String seriesTimerId = null;
        UUID librarySeriesId = null;
        List<ItemFields> fields = null;
        Boolean enableTotalRecordCount = null;
        BaseItemDtoQueryResult response = api.getLiveTvPrograms(channelIds, userId, minStartDate, hasAired, isAiring, maxStartDate, minEndDate, maxEndDate, isMovie, isSeries, isNews, isKids, isSports, startIndex, limit, sortBy, sortOrder, genres, genreIds, enableImages, imageTypeLimit, enableImageTypes, enableUserData, seriesTimerId, librarySeriesId, fields, enableTotalRecordCount);
        // TODO: test validations
    }

    /**
     * Gets a live tv program.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProgramTest() throws ApiException {
        String programId = null;
        UUID userId = null;
        BaseItemDto response = api.getProgram(programId, userId);
        // TODO: test validations
    }

    /**
     * Gets available live tv epgs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProgramsTest() throws ApiException {
        GetProgramsDto getProgramsDto = null;
        BaseItemDtoQueryResult response = api.getPrograms(getProgramsDto);
        // TODO: test validations
    }

    /**
     * Gets recommended live tv epgs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommendedProgramsTest() throws ApiException {
        UUID userId = null;
        Integer limit = null;
        Boolean isAiring = null;
        Boolean hasAired = null;
        Boolean isSeries = null;
        Boolean isMovie = null;
        Boolean isNews = null;
        Boolean isKids = null;
        Boolean isSports = null;
        Boolean enableImages = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        List<UUID> genreIds = null;
        List<ItemFields> fields = null;
        Boolean enableUserData = null;
        Boolean enableTotalRecordCount = null;
        BaseItemDtoQueryResult response = api.getRecommendedPrograms(userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData, enableTotalRecordCount);
        // TODO: test validations
    }

    /**
     * Gets a live tv recording.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordingTest() throws ApiException {
        UUID recordingId = null;
        UUID userId = null;
        BaseItemDto response = api.getRecording(recordingId, userId);
        // TODO: test validations
    }

    /**
     * Gets recording folders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordingFoldersTest() throws ApiException {
        UUID userId = null;
        BaseItemDtoQueryResult response = api.getRecordingFolders(userId);
        // TODO: test validations
    }

    /**
     * Get recording group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordingGroupTest() throws ApiException {
        UUID groupId = null;
        api.getRecordingGroup(groupId);
        // TODO: test validations
    }

    /**
     * Gets live tv recording groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordingGroupsTest() throws ApiException {
        UUID userId = null;
        BaseItemDtoQueryResult response = api.getRecordingGroups(userId);
        // TODO: test validations
    }

    /**
     * Gets live tv recordings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordingsTest() throws ApiException {
        String channelId = null;
        UUID userId = null;
        Integer startIndex = null;
        Integer limit = null;
        RecordingStatus status = null;
        Boolean isInProgress = null;
        String seriesTimerId = null;
        Boolean enableImages = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        List<ItemFields> fields = null;
        Boolean enableUserData = null;
        Boolean isMovie = null;
        Boolean isSeries = null;
        Boolean isKids = null;
        Boolean isSports = null;
        Boolean isNews = null;
        Boolean isLibraryItem = null;
        Boolean enableTotalRecordCount = null;
        BaseItemDtoQueryResult response = api.getRecordings(channelId, userId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, isMovie, isSeries, isKids, isSports, isNews, isLibraryItem, enableTotalRecordCount);
        // TODO: test validations
    }

    /**
     * Gets live tv recording series.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordingsSeriesTest() throws ApiException {
        String channelId = null;
        UUID userId = null;
        String groupId = null;
        Integer startIndex = null;
        Integer limit = null;
        RecordingStatus status = null;
        Boolean isInProgress = null;
        String seriesTimerId = null;
        Boolean enableImages = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        List<ItemFields> fields = null;
        Boolean enableUserData = null;
        Boolean enableTotalRecordCount = null;
        BaseItemDtoQueryResult response = api.getRecordingsSeries(channelId, userId, groupId, startIndex, limit, status, isInProgress, seriesTimerId, enableImages, imageTypeLimit, enableImageTypes, fields, enableUserData, enableTotalRecordCount);
        // TODO: test validations
    }

    /**
     * Gets available countries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchedulesDirectCountriesTest() throws ApiException {
        File response = api.getSchedulesDirectCountries();
        // TODO: test validations
    }

    /**
     * Gets a live tv series timer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSeriesTimerTest() throws ApiException {
        String timerId = null;
        SeriesTimerInfoDto response = api.getSeriesTimer(timerId);
        // TODO: test validations
    }

    /**
     * Gets live tv series timers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSeriesTimersTest() throws ApiException {
        String sortBy = null;
        SortOrder sortOrder = null;
        SeriesTimerInfoDtoQueryResult response = api.getSeriesTimers(sortBy, sortOrder);
        // TODO: test validations
    }

    /**
     * Gets a timer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimerTest() throws ApiException {
        String timerId = null;
        TimerInfoDto response = api.getTimer(timerId);
        // TODO: test validations
    }

    /**
     * Gets the live tv timers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimersTest() throws ApiException {
        String channelId = null;
        String seriesTimerId = null;
        Boolean isActive = null;
        Boolean isScheduled = null;
        TimerInfoDtoQueryResult response = api.getTimers(channelId, seriesTimerId, isActive, isScheduled);
        // TODO: test validations
    }

    /**
     * Get tuner host types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTunerHostTypesTest() throws ApiException {
        List<NameIdPair> response = api.getTunerHostTypes();
        // TODO: test validations
    }

    /**
     * Resets a tv tuner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetTunerTest() throws ApiException {
        String tunerId = null;
        api.resetTuner(tunerId);
        // TODO: test validations
    }

    /**
     * Set channel mappings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setChannelMappingTest() throws ApiException {
        SetChannelMappingDto setChannelMappingDto = null;
        TunerChannelMapping response = api.setChannelMapping(setChannelMappingDto);
        // TODO: test validations
    }

    /**
     * Updates a live tv series timer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSeriesTimerTest() throws ApiException {
        String timerId = null;
        SeriesTimerInfoDto seriesTimerInfoDto = null;
        api.updateSeriesTimer(timerId, seriesTimerInfoDto);
        // TODO: test validations
    }

    /**
     * Updates a live tv timer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimerTest() throws ApiException {
        String timerId = null;
        TimerInfoDto timerInfoDto = null;
        api.updateTimer(timerId, timerInfoDto);
        // TODO: test validations
    }

}
