/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PackageInfo;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.RepositoryInfo;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PackageApi
 */
@Disabled
public class PackageApiTest {

    private final PackageApi api = new PackageApi();

    /**
     * Cancels a package installation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPackageInstallationTest() throws ApiException {
        UUID packageId = null;
        api.cancelPackageInstallation(packageId);
        // TODO: test validations
    }

    /**
     * Gets a package by name or assembly GUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageInfoTest() throws ApiException {
        String name = null;
        UUID assemblyGuid = null;
        PackageInfo response = api.getPackageInfo(name, assemblyGuid);
        // TODO: test validations
    }

    /**
     * Gets available packages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackagesTest() throws ApiException {
        List<PackageInfo> response = api.getPackages();
        // TODO: test validations
    }

    /**
     * Gets all package repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoriesTest() throws ApiException {
        List<RepositoryInfo> response = api.getRepositories();
        // TODO: test validations
    }

    /**
     * Installs a package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void installPackageTest() throws ApiException {
        String name = null;
        UUID assemblyGuid = null;
        String version = null;
        String repositoryUrl = null;
        api.installPackage(name, assemblyGuid, version, repositoryUrl);
        // TODO: test validations
    }

    /**
     * Sets the enabled and existing package repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRepositoriesTest() throws ApiException {
        List<RepositoryInfo> repositoryInfo = null;
        api.setRepositories(repositoryInfo);
        // TODO: test validations
    }

}
