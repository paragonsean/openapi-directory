/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QuickConnectResult;
import org.openapitools.client.model.QuickConnectState;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuickConnectApi
 */
@Disabled
public class QuickConnectApiTest {

    private final QuickConnectApi api = new QuickConnectApi();

    /**
     * Temporarily activates quick connect for five minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateTest() throws ApiException {
        api.activate();
        // TODO: test validations
    }

    /**
     * Authorizes a pending quick connect request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeTest() throws ApiException {
        String code = null;
        Boolean response = api.authorize(code);
        // TODO: test validations
    }

    /**
     * Enables or disables quick connect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void availableTest() throws ApiException {
        QuickConnectState status = null;
        api.available(status);
        // TODO: test validations
    }

    /**
     * Attempts to retrieve authentication information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectTest() throws ApiException {
        String secret = null;
        QuickConnectResult response = api.connect(secret);
        // TODO: test validations
    }

    /**
     * Deauthorize all quick connect devices for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deauthorizeTest() throws ApiException {
        Integer response = api.deauthorize();
        // TODO: test validations
    }

    /**
     * Gets the current quick connect state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
        QuickConnectState response = api.getStatus();
        // TODO: test validations
    }

    /**
     * Initiate a new quick connect request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateTest() throws ApiException {
        QuickConnectResult response = api.initiate();
        // TODO: test validations
    }

}
