/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageSavingConvention;
import org.openapitools.client.model.MetadataOptions;
import org.openapitools.client.model.NameValuePair;
import org.openapitools.client.model.PathSubstitution;
import org.openapitools.client.model.RepositoryInfo;
import org.openapitools.client.model.Version;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ServerConfiguration
 */
public class ServerConfigurationTest {
    private final ServerConfiguration model = new ServerConfiguration();

    /**
     * Model tests for ServerConfiguration
     */
    @Test
    public void testServerConfiguration() {
        // TODO: test ServerConfiguration
    }

    /**
     * Test the property 'activityLogRetentionDays'
     */
    @Test
    public void activityLogRetentionDaysTest() {
        // TODO: test activityLogRetentionDays
    }

    /**
     * Test the property 'autoDiscovery'
     */
    @Test
    public void autoDiscoveryTest() {
        // TODO: test autoDiscovery
    }

    /**
     * Test the property 'autoDiscoveryTracing'
     */
    @Test
    public void autoDiscoveryTracingTest() {
        // TODO: test autoDiscoveryTracing
    }

    /**
     * Test the property 'baseUrl'
     */
    @Test
    public void baseUrlTest() {
        // TODO: test baseUrl
    }

    /**
     * Test the property 'cachePath'
     */
    @Test
    public void cachePathTest() {
        // TODO: test cachePath
    }

    /**
     * Test the property 'certificatePassword'
     */
    @Test
    public void certificatePasswordTest() {
        // TODO: test certificatePassword
    }

    /**
     * Test the property 'certificatePath'
     */
    @Test
    public void certificatePathTest() {
        // TODO: test certificatePath
    }

    /**
     * Test the property 'codecsUsed'
     */
    @Test
    public void codecsUsedTest() {
        // TODO: test codecsUsed
    }

    /**
     * Test the property 'contentTypes'
     */
    @Test
    public void contentTypesTest() {
        // TODO: test contentTypes
    }

    /**
     * Test the property 'corsHosts'
     */
    @Test
    public void corsHostsTest() {
        // TODO: test corsHosts
    }

    /**
     * Test the property 'disableLiveTvChannelUserDataName'
     */
    @Test
    public void disableLiveTvChannelUserDataNameTest() {
        // TODO: test disableLiveTvChannelUserDataName
    }

    /**
     * Test the property 'disablePluginImages'
     */
    @Test
    public void disablePluginImagesTest() {
        // TODO: test disablePluginImages
    }

    /**
     * Test the property 'displaySpecialsWithinSeasons'
     */
    @Test
    public void displaySpecialsWithinSeasonsTest() {
        // TODO: test displaySpecialsWithinSeasons
    }

    /**
     * Test the property 'enableCaseSensitiveItemIds'
     */
    @Test
    public void enableCaseSensitiveItemIdsTest() {
        // TODO: test enableCaseSensitiveItemIds
    }

    /**
     * Test the property 'enableDashboardResponseCaching'
     */
    @Test
    public void enableDashboardResponseCachingTest() {
        // TODO: test enableDashboardResponseCaching
    }

    /**
     * Test the property 'enableExternalContentInSuggestions'
     */
    @Test
    public void enableExternalContentInSuggestionsTest() {
        // TODO: test enableExternalContentInSuggestions
    }

    /**
     * Test the property 'enableFolderView'
     */
    @Test
    public void enableFolderViewTest() {
        // TODO: test enableFolderView
    }

    /**
     * Test the property 'enableGroupingIntoCollections'
     */
    @Test
    public void enableGroupingIntoCollectionsTest() {
        // TODO: test enableGroupingIntoCollections
    }

    /**
     * Test the property 'enableHttps'
     */
    @Test
    public void enableHttpsTest() {
        // TODO: test enableHttps
    }

    /**
     * Test the property 'enableIPV4'
     */
    @Test
    public void enableIPV4Test() {
        // TODO: test enableIPV4
    }

    /**
     * Test the property 'enableIPV6'
     */
    @Test
    public void enableIPV6Test() {
        // TODO: test enableIPV6
    }

    /**
     * Test the property 'enableMetrics'
     */
    @Test
    public void enableMetricsTest() {
        // TODO: test enableMetrics
    }

    /**
     * Test the property 'enableMultiSocketBinding'
     */
    @Test
    public void enableMultiSocketBindingTest() {
        // TODO: test enableMultiSocketBinding
    }

    /**
     * Test the property 'enableNewOmdbSupport'
     */
    @Test
    public void enableNewOmdbSupportTest() {
        // TODO: test enableNewOmdbSupport
    }

    /**
     * Test the property 'enableNormalizedItemByNameIds'
     */
    @Test
    public void enableNormalizedItemByNameIdsTest() {
        // TODO: test enableNormalizedItemByNameIds
    }

    /**
     * Test the property 'enableRemoteAccess'
     */
    @Test
    public void enableRemoteAccessTest() {
        // TODO: test enableRemoteAccess
    }

    /**
     * Test the property 'enableSSDPTracing'
     */
    @Test
    public void enableSSDPTracingTest() {
        // TODO: test enableSSDPTracing
    }

    /**
     * Test the property 'enableSimpleArtistDetection'
     */
    @Test
    public void enableSimpleArtistDetectionTest() {
        // TODO: test enableSimpleArtistDetection
    }

    /**
     * Test the property 'enableSlowResponseWarning'
     */
    @Test
    public void enableSlowResponseWarningTest() {
        // TODO: test enableSlowResponseWarning
    }

    /**
     * Test the property 'enableUPnP'
     */
    @Test
    public void enableUPnPTest() {
        // TODO: test enableUPnP
    }

    /**
     * Test the property 'gatewayMonitorPeriod'
     */
    @Test
    public void gatewayMonitorPeriodTest() {
        // TODO: test gatewayMonitorPeriod
    }

    /**
     * Test the property 'hdHomerunPortRange'
     */
    @Test
    public void hdHomerunPortRangeTest() {
        // TODO: test hdHomerunPortRange
    }

    /**
     * Test the property 'httpServerPortNumber'
     */
    @Test
    public void httpServerPortNumberTest() {
        // TODO: test httpServerPortNumber
    }

    /**
     * Test the property 'httpsPortNumber'
     */
    @Test
    public void httpsPortNumberTest() {
        // TODO: test httpsPortNumber
    }

    /**
     * Test the property 'ignoreVirtualInterfaces'
     */
    @Test
    public void ignoreVirtualInterfacesTest() {
        // TODO: test ignoreVirtualInterfaces
    }

    /**
     * Test the property 'imageExtractionTimeoutMs'
     */
    @Test
    public void imageExtractionTimeoutMsTest() {
        // TODO: test imageExtractionTimeoutMs
    }

    /**
     * Test the property 'imageSavingConvention'
     */
    @Test
    public void imageSavingConventionTest() {
        // TODO: test imageSavingConvention
    }

    /**
     * Test the property 'isPortAuthorized'
     */
    @Test
    public void isPortAuthorizedTest() {
        // TODO: test isPortAuthorized
    }

    /**
     * Test the property 'isRemoteIPFilterBlacklist'
     */
    @Test
    public void isRemoteIPFilterBlacklistTest() {
        // TODO: test isRemoteIPFilterBlacklist
    }

    /**
     * Test the property 'isStartupWizardCompleted'
     */
    @Test
    public void isStartupWizardCompletedTest() {
        // TODO: test isStartupWizardCompleted
    }

    /**
     * Test the property 'knownProxies'
     */
    @Test
    public void knownProxiesTest() {
        // TODO: test knownProxies
    }

    /**
     * Test the property 'libraryMetadataRefreshConcurrency'
     */
    @Test
    public void libraryMetadataRefreshConcurrencyTest() {
        // TODO: test libraryMetadataRefreshConcurrency
    }

    /**
     * Test the property 'libraryMonitorDelay'
     */
    @Test
    public void libraryMonitorDelayTest() {
        // TODO: test libraryMonitorDelay
    }

    /**
     * Test the property 'libraryScanFanoutConcurrency'
     */
    @Test
    public void libraryScanFanoutConcurrencyTest() {
        // TODO: test libraryScanFanoutConcurrency
    }

    /**
     * Test the property 'localNetworkAddresses'
     */
    @Test
    public void localNetworkAddressesTest() {
        // TODO: test localNetworkAddresses
    }

    /**
     * Test the property 'localNetworkSubnets'
     */
    @Test
    public void localNetworkSubnetsTest() {
        // TODO: test localNetworkSubnets
    }

    /**
     * Test the property 'logFileRetentionDays'
     */
    @Test
    public void logFileRetentionDaysTest() {
        // TODO: test logFileRetentionDays
    }

    /**
     * Test the property 'maxAudiobookResume'
     */
    @Test
    public void maxAudiobookResumeTest() {
        // TODO: test maxAudiobookResume
    }

    /**
     * Test the property 'maxResumePct'
     */
    @Test
    public void maxResumePctTest() {
        // TODO: test maxResumePct
    }

    /**
     * Test the property 'metadataCountryCode'
     */
    @Test
    public void metadataCountryCodeTest() {
        // TODO: test metadataCountryCode
    }

    /**
     * Test the property 'metadataNetworkPath'
     */
    @Test
    public void metadataNetworkPathTest() {
        // TODO: test metadataNetworkPath
    }

    /**
     * Test the property 'metadataOptions'
     */
    @Test
    public void metadataOptionsTest() {
        // TODO: test metadataOptions
    }

    /**
     * Test the property 'metadataPath'
     */
    @Test
    public void metadataPathTest() {
        // TODO: test metadataPath
    }

    /**
     * Test the property 'minAudiobookResume'
     */
    @Test
    public void minAudiobookResumeTest() {
        // TODO: test minAudiobookResume
    }

    /**
     * Test the property 'minResumeDurationSeconds'
     */
    @Test
    public void minResumeDurationSecondsTest() {
        // TODO: test minResumeDurationSeconds
    }

    /**
     * Test the property 'minResumePct'
     */
    @Test
    public void minResumePctTest() {
        // TODO: test minResumePct
    }

    /**
     * Test the property 'pathSubstitutions'
     */
    @Test
    public void pathSubstitutionsTest() {
        // TODO: test pathSubstitutions
    }

    /**
     * Test the property 'pluginRepositories'
     */
    @Test
    public void pluginRepositoriesTest() {
        // TODO: test pluginRepositories
    }

    /**
     * Test the property 'preferredMetadataLanguage'
     */
    @Test
    public void preferredMetadataLanguageTest() {
        // TODO: test preferredMetadataLanguage
    }

    /**
     * Test the property 'previousVersion'
     */
    @Test
    public void previousVersionTest() {
        // TODO: test previousVersion
    }

    /**
     * Test the property 'previousVersionStr'
     */
    @Test
    public void previousVersionStrTest() {
        // TODO: test previousVersionStr
    }

    /**
     * Test the property 'publicHttpsPort'
     */
    @Test
    public void publicHttpsPortTest() {
        // TODO: test publicHttpsPort
    }

    /**
     * Test the property 'publicPort'
     */
    @Test
    public void publicPortTest() {
        // TODO: test publicPort
    }

    /**
     * Test the property 'publishedServerUriBySubnet'
     */
    @Test
    public void publishedServerUriBySubnetTest() {
        // TODO: test publishedServerUriBySubnet
    }

    /**
     * Test the property 'quickConnectAvailable'
     */
    @Test
    public void quickConnectAvailableTest() {
        // TODO: test quickConnectAvailable
    }

    /**
     * Test the property 'remoteClientBitrateLimit'
     */
    @Test
    public void remoteClientBitrateLimitTest() {
        // TODO: test remoteClientBitrateLimit
    }

    /**
     * Test the property 'remoteIPFilter'
     */
    @Test
    public void remoteIPFilterTest() {
        // TODO: test remoteIPFilter
    }

    /**
     * Test the property 'removeOldPlugins'
     */
    @Test
    public void removeOldPluginsTest() {
        // TODO: test removeOldPlugins
    }

    /**
     * Test the property 'requireHttps'
     */
    @Test
    public void requireHttpsTest() {
        // TODO: test requireHttps
    }

    /**
     * Test the property 'ssDPTracingFilter'
     */
    @Test
    public void ssDPTracingFilterTest() {
        // TODO: test ssDPTracingFilter
    }

    /**
     * Test the property 'saveMetadataHidden'
     */
    @Test
    public void saveMetadataHiddenTest() {
        // TODO: test saveMetadataHidden
    }

    /**
     * Test the property 'serverName'
     */
    @Test
    public void serverNameTest() {
        // TODO: test serverName
    }

    /**
     * Test the property 'skipDeserializationForBasicTypes'
     */
    @Test
    public void skipDeserializationForBasicTypesTest() {
        // TODO: test skipDeserializationForBasicTypes
    }

    /**
     * Test the property 'slowResponseThresholdMs'
     */
    @Test
    public void slowResponseThresholdMsTest() {
        // TODO: test slowResponseThresholdMs
    }

    /**
     * Test the property 'sortRemoveCharacters'
     */
    @Test
    public void sortRemoveCharactersTest() {
        // TODO: test sortRemoveCharacters
    }

    /**
     * Test the property 'sortRemoveWords'
     */
    @Test
    public void sortRemoveWordsTest() {
        // TODO: test sortRemoveWords
    }

    /**
     * Test the property 'sortReplaceCharacters'
     */
    @Test
    public void sortReplaceCharactersTest() {
        // TODO: test sortReplaceCharacters
    }

    /**
     * Test the property 'trustAllIP6Interfaces'
     */
    @Test
    public void trustAllIP6InterfacesTest() {
        // TODO: test trustAllIP6Interfaces
    }

    /**
     * Test the property 'udPPortRange'
     */
    @Test
    public void udPPortRangeTest() {
        // TODO: test udPPortRange
    }

    /**
     * Test the property 'udPSendCount'
     */
    @Test
    public void udPSendCountTest() {
        // TODO: test udPSendCount
    }

    /**
     * Test the property 'udPSendDelay'
     */
    @Test
    public void udPSendDelayTest() {
        // TODO: test udPSendDelay
    }

    /**
     * Test the property 'uiCulture'
     */
    @Test
    public void uiCultureTest() {
        // TODO: test uiCulture
    }

    /**
     * Test the property 'upnPCreateHttpPortMap'
     */
    @Test
    public void upnPCreateHttpPortMapTest() {
        // TODO: test upnPCreateHttpPortMap
    }

    /**
     * Test the property 'uninstalledPlugins'
     */
    @Test
    public void uninstalledPluginsTest() {
        // TODO: test uninstalledPlugins
    }

    /**
     * Test the property 'virtualInterfaceNames'
     */
    @Test
    public void virtualInterfaceNamesTest() {
        // TODO: test virtualInterfaceNames
    }

}
