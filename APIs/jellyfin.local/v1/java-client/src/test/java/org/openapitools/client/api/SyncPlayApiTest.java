/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BufferRequestDto;
import org.openapitools.client.model.GroupInfoDto;
import org.openapitools.client.model.IgnoreWaitRequestDto;
import org.openapitools.client.model.JoinGroupRequestDto;
import org.openapitools.client.model.MovePlaylistItemRequestDto;
import org.openapitools.client.model.NewGroupRequestDto;
import org.openapitools.client.model.NextItemRequestDto;
import org.openapitools.client.model.PingRequestDto;
import org.openapitools.client.model.PlayRequestDto;
import org.openapitools.client.model.PreviousItemRequestDto;
import org.openapitools.client.model.QueueRequestDto;
import org.openapitools.client.model.ReadyRequestDto;
import org.openapitools.client.model.RemoveFromPlaylistRequestDto;
import org.openapitools.client.model.SeekRequestDto;
import org.openapitools.client.model.SetPlaylistItemRequestDto;
import org.openapitools.client.model.SetRepeatModeRequestDto;
import org.openapitools.client.model.SetShuffleModeRequestDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SyncPlayApi
 */
@Disabled
public class SyncPlayApiTest {

    private final SyncPlayApi api = new SyncPlayApi();

    /**
     * Notify SyncPlay group that member is buffering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayBufferingTest() throws ApiException {
        BufferRequestDto bufferRequestDto = null;
        api.syncPlayBuffering(bufferRequestDto);
        // TODO: test validations
    }

    /**
     * Create a new SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayCreateGroupTest() throws ApiException {
        NewGroupRequestDto newGroupRequestDto = null;
        api.syncPlayCreateGroup(newGroupRequestDto);
        // TODO: test validations
    }

    /**
     * Gets all SyncPlay groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayGetGroupsTest() throws ApiException {
        List<GroupInfoDto> response = api.syncPlayGetGroups();
        // TODO: test validations
    }

    /**
     * Join an existing SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayJoinGroupTest() throws ApiException {
        JoinGroupRequestDto joinGroupRequestDto = null;
        api.syncPlayJoinGroup(joinGroupRequestDto);
        // TODO: test validations
    }

    /**
     * Leave the joined SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayLeaveGroupTest() throws ApiException {
        api.syncPlayLeaveGroup();
        // TODO: test validations
    }

    /**
     * Request to move an item in the playlist in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayMovePlaylistItemTest() throws ApiException {
        MovePlaylistItemRequestDto movePlaylistItemRequestDto = null;
        api.syncPlayMovePlaylistItem(movePlaylistItemRequestDto);
        // TODO: test validations
    }

    /**
     * Request next item in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayNextItemTest() throws ApiException {
        NextItemRequestDto nextItemRequestDto = null;
        api.syncPlayNextItem(nextItemRequestDto);
        // TODO: test validations
    }

    /**
     * Request pause in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayPauseTest() throws ApiException {
        api.syncPlayPause();
        // TODO: test validations
    }

    /**
     * Update session ping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayPingTest() throws ApiException {
        PingRequestDto pingRequestDto = null;
        api.syncPlayPing(pingRequestDto);
        // TODO: test validations
    }

    /**
     * Request previous item in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayPreviousItemTest() throws ApiException {
        PreviousItemRequestDto previousItemRequestDto = null;
        api.syncPlayPreviousItem(previousItemRequestDto);
        // TODO: test validations
    }

    /**
     * Request to queue items to the playlist of a SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayQueueTest() throws ApiException {
        QueueRequestDto queueRequestDto = null;
        api.syncPlayQueue(queueRequestDto);
        // TODO: test validations
    }

    /**
     * Notify SyncPlay group that member is ready for playback.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayReadyTest() throws ApiException {
        ReadyRequestDto readyRequestDto = null;
        api.syncPlayReady(readyRequestDto);
        // TODO: test validations
    }

    /**
     * Request to remove items from the playlist in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayRemoveFromPlaylistTest() throws ApiException {
        RemoveFromPlaylistRequestDto removeFromPlaylistRequestDto = null;
        api.syncPlayRemoveFromPlaylist(removeFromPlaylistRequestDto);
        // TODO: test validations
    }

    /**
     * Request seek in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlaySeekTest() throws ApiException {
        SeekRequestDto seekRequestDto = null;
        api.syncPlaySeek(seekRequestDto);
        // TODO: test validations
    }

    /**
     * Request SyncPlay group to ignore member during group-wait.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlaySetIgnoreWaitTest() throws ApiException {
        IgnoreWaitRequestDto ignoreWaitRequestDto = null;
        api.syncPlaySetIgnoreWait(ignoreWaitRequestDto);
        // TODO: test validations
    }

    /**
     * Request to set new playlist in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlaySetNewQueueTest() throws ApiException {
        PlayRequestDto playRequestDto = null;
        api.syncPlaySetNewQueue(playRequestDto);
        // TODO: test validations
    }

    /**
     * Request to change playlist item in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlaySetPlaylistItemTest() throws ApiException {
        SetPlaylistItemRequestDto setPlaylistItemRequestDto = null;
        api.syncPlaySetPlaylistItem(setPlaylistItemRequestDto);
        // TODO: test validations
    }

    /**
     * Request to set repeat mode in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlaySetRepeatModeTest() throws ApiException {
        SetRepeatModeRequestDto setRepeatModeRequestDto = null;
        api.syncPlaySetRepeatMode(setRepeatModeRequestDto);
        // TODO: test validations
    }

    /**
     * Request to set shuffle mode in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlaySetShuffleModeTest() throws ApiException {
        SetShuffleModeRequestDto setShuffleModeRequestDto = null;
        api.syncPlaySetShuffleMode(setShuffleModeRequestDto);
        // TODO: test validations
    }

    /**
     * Request stop in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayStopTest() throws ApiException {
        api.syncPlayStop();
        // TODO: test validations
    }

    /**
     * Request unpause in SyncPlay group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncPlayUnpauseTest() throws ApiException {
        api.syncPlayUnpause();
        // TODO: test validations
    }

}
