/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EndPointInfo;
import java.io.File;
import org.openapitools.client.model.LogFile;
import org.openapitools.client.model.PublicSystemInfo;
import org.openapitools.client.model.SystemInfo;
import org.openapitools.client.model.WakeOnLanInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SystemApi
 */
@Disabled
public class SystemApiTest {

    private final SystemApi api = new SystemApi();

    /**
     * Gets information about the request endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEndpointInfoTest() throws ApiException {
        EndPointInfo response = api.getEndpointInfo();
        // TODO: test validations
    }

    /**
     * Gets a log file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLogFileTest() throws ApiException {
        String name = null;
        File response = api.getLogFile(name);
        // TODO: test validations
    }

    /**
     * Pings the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPingSystemTest() throws ApiException {
        String response = api.getPingSystem();
        // TODO: test validations
    }

    /**
     * Gets public information about the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicSystemInfoTest() throws ApiException {
        PublicSystemInfo response = api.getPublicSystemInfo();
        // TODO: test validations
    }

    /**
     * Gets a list of available server log files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServerLogsTest() throws ApiException {
        List<LogFile> response = api.getServerLogs();
        // TODO: test validations
    }

    /**
     * Gets information about the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSystemInfoTest() throws ApiException {
        SystemInfo response = api.getSystemInfo();
        // TODO: test validations
    }

    /**
     * Gets wake on lan information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWakeOnLanInfoTest() throws ApiException {
        List<WakeOnLanInfo> response = api.getWakeOnLanInfo();
        // TODO: test validations
    }

    /**
     * Pings the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPingSystemTest() throws ApiException {
        String response = api.postPingSystem();
        // TODO: test validations
    }

    /**
     * Restarts the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restartApplicationTest() throws ApiException {
        api.restartApplication();
        // TODO: test validations
    }

    /**
     * Shuts down the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shutdownApplicationTest() throws ApiException {
        api.shutdownApplication();
        // TODO: test validations
    }

}
