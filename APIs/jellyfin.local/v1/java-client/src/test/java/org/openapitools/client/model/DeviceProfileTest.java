/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CodecProfile;
import org.openapitools.client.model.ContainerProfile;
import org.openapitools.client.model.DeviceIdentification;
import org.openapitools.client.model.DirectPlayProfile;
import org.openapitools.client.model.ResponseProfile;
import org.openapitools.client.model.SubtitleProfile;
import org.openapitools.client.model.TranscodingProfile;
import org.openapitools.client.model.XmlAttribute;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DeviceProfile
 */
public class DeviceProfileTest {
    private final DeviceProfile model = new DeviceProfile();

    /**
     * Model tests for DeviceProfile
     */
    @Test
    public void testDeviceProfile() {
        // TODO: test DeviceProfile
    }

    /**
     * Test the property 'albumArtPn'
     */
    @Test
    public void albumArtPnTest() {
        // TODO: test albumArtPn
    }

    /**
     * Test the property 'codecProfiles'
     */
    @Test
    public void codecProfilesTest() {
        // TODO: test codecProfiles
    }

    /**
     * Test the property 'containerProfiles'
     */
    @Test
    public void containerProfilesTest() {
        // TODO: test containerProfiles
    }

    /**
     * Test the property 'directPlayProfiles'
     */
    @Test
    public void directPlayProfilesTest() {
        // TODO: test directPlayProfiles
    }

    /**
     * Test the property 'enableAlbumArtInDidl'
     */
    @Test
    public void enableAlbumArtInDidlTest() {
        // TODO: test enableAlbumArtInDidl
    }

    /**
     * Test the property 'enableMSMediaReceiverRegistrar'
     */
    @Test
    public void enableMSMediaReceiverRegistrarTest() {
        // TODO: test enableMSMediaReceiverRegistrar
    }

    /**
     * Test the property 'enableSingleAlbumArtLimit'
     */
    @Test
    public void enableSingleAlbumArtLimitTest() {
        // TODO: test enableSingleAlbumArtLimit
    }

    /**
     * Test the property 'enableSingleSubtitleLimit'
     */
    @Test
    public void enableSingleSubtitleLimitTest() {
        // TODO: test enableSingleSubtitleLimit
    }

    /**
     * Test the property 'friendlyName'
     */
    @Test
    public void friendlyNameTest() {
        // TODO: test friendlyName
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'identification'
     */
    @Test
    public void identificationTest() {
        // TODO: test identification
    }

    /**
     * Test the property 'ignoreTranscodeByteRangeRequests'
     */
    @Test
    public void ignoreTranscodeByteRangeRequestsTest() {
        // TODO: test ignoreTranscodeByteRangeRequests
    }

    /**
     * Test the property 'manufacturer'
     */
    @Test
    public void manufacturerTest() {
        // TODO: test manufacturer
    }

    /**
     * Test the property 'manufacturerUrl'
     */
    @Test
    public void manufacturerUrlTest() {
        // TODO: test manufacturerUrl
    }

    /**
     * Test the property 'maxAlbumArtHeight'
     */
    @Test
    public void maxAlbumArtHeightTest() {
        // TODO: test maxAlbumArtHeight
    }

    /**
     * Test the property 'maxAlbumArtWidth'
     */
    @Test
    public void maxAlbumArtWidthTest() {
        // TODO: test maxAlbumArtWidth
    }

    /**
     * Test the property 'maxIconHeight'
     */
    @Test
    public void maxIconHeightTest() {
        // TODO: test maxIconHeight
    }

    /**
     * Test the property 'maxIconWidth'
     */
    @Test
    public void maxIconWidthTest() {
        // TODO: test maxIconWidth
    }

    /**
     * Test the property 'maxStaticBitrate'
     */
    @Test
    public void maxStaticBitrateTest() {
        // TODO: test maxStaticBitrate
    }

    /**
     * Test the property 'maxStaticMusicBitrate'
     */
    @Test
    public void maxStaticMusicBitrateTest() {
        // TODO: test maxStaticMusicBitrate
    }

    /**
     * Test the property 'maxStreamingBitrate'
     */
    @Test
    public void maxStreamingBitrateTest() {
        // TODO: test maxStreamingBitrate
    }

    /**
     * Test the property 'modelDescription'
     */
    @Test
    public void modelDescriptionTest() {
        // TODO: test modelDescription
    }

    /**
     * Test the property 'modelName'
     */
    @Test
    public void modelNameTest() {
        // TODO: test modelName
    }

    /**
     * Test the property 'modelNumber'
     */
    @Test
    public void modelNumberTest() {
        // TODO: test modelNumber
    }

    /**
     * Test the property 'modelUrl'
     */
    @Test
    public void modelUrlTest() {
        // TODO: test modelUrl
    }

    /**
     * Test the property 'musicStreamingTranscodingBitrate'
     */
    @Test
    public void musicStreamingTranscodingBitrateTest() {
        // TODO: test musicStreamingTranscodingBitrate
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'protocolInfo'
     */
    @Test
    public void protocolInfoTest() {
        // TODO: test protocolInfo
    }

    /**
     * Test the property 'requiresPlainFolders'
     */
    @Test
    public void requiresPlainFoldersTest() {
        // TODO: test requiresPlainFolders
    }

    /**
     * Test the property 'requiresPlainVideoItems'
     */
    @Test
    public void requiresPlainVideoItemsTest() {
        // TODO: test requiresPlainVideoItems
    }

    /**
     * Test the property 'responseProfiles'
     */
    @Test
    public void responseProfilesTest() {
        // TODO: test responseProfiles
    }

    /**
     * Test the property 'serialNumber'
     */
    @Test
    public void serialNumberTest() {
        // TODO: test serialNumber
    }

    /**
     * Test the property 'sonyAggregationFlags'
     */
    @Test
    public void sonyAggregationFlagsTest() {
        // TODO: test sonyAggregationFlags
    }

    /**
     * Test the property 'subtitleProfiles'
     */
    @Test
    public void subtitleProfilesTest() {
        // TODO: test subtitleProfiles
    }

    /**
     * Test the property 'supportedMediaTypes'
     */
    @Test
    public void supportedMediaTypesTest() {
        // TODO: test supportedMediaTypes
    }

    /**
     * Test the property 'timelineOffsetSeconds'
     */
    @Test
    public void timelineOffsetSecondsTest() {
        // TODO: test timelineOffsetSeconds
    }

    /**
     * Test the property 'transcodingProfiles'
     */
    @Test
    public void transcodingProfilesTest() {
        // TODO: test transcodingProfiles
    }

    /**
     * Test the property 'userId'
     */
    @Test
    public void userIdTest() {
        // TODO: test userId
    }

    /**
     * Test the property 'xmlRootAttributes'
     */
    @Test
    public void xmlRootAttributesTest() {
        // TODO: test xmlRootAttributes
    }

}
