/*
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BaseItemDtoQueryResult;
import org.openapitools.client.model.CreatePlaylistDto;
import org.openapitools.client.model.ImageType;
import org.openapitools.client.model.ItemFields;
import org.openapitools.client.model.PlaylistCreationResult;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlaylistsApi
 */
@Disabled
public class PlaylistsApiTest {

    private final PlaylistsApi api = new PlaylistsApi();

    /**
     * Adds items to a playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addToPlaylistTest() throws ApiException {
        UUID playlistId = null;
        List<UUID> ids = null;
        UUID userId = null;
        api.addToPlaylist(playlistId, ids, userId);
        // TODO: test validations
    }

    /**
     * Creates a new playlist.
     *
     * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlaylistTest() throws ApiException {
        String name = null;
        List<UUID> ids = null;
        UUID userId = null;
        String mediaType = null;
        CreatePlaylistDto createPlaylistDto = null;
        PlaylistCreationResult response = api.createPlaylist(name, ids, userId, mediaType, createPlaylistDto);
        // TODO: test validations
    }

    /**
     * Gets the original items of a playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaylistItemsTest() throws ApiException {
        UUID playlistId = null;
        UUID userId = null;
        Integer startIndex = null;
        Integer limit = null;
        List<ItemFields> fields = null;
        Boolean enableImages = null;
        Boolean enableUserData = null;
        Integer imageTypeLimit = null;
        List<ImageType> enableImageTypes = null;
        BaseItemDtoQueryResult response = api.getPlaylistItems(playlistId, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes);
        // TODO: test validations
    }

    /**
     * Moves a playlist item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveItemTest() throws ApiException {
        String playlistId = null;
        String itemId = null;
        Integer newIndex = null;
        api.moveItem(playlistId, itemId, newIndex);
        // TODO: test validations
    }

    /**
     * Removes items from a playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromPlaylistTest() throws ApiException {
        String playlistId = null;
        List<String> entryIds = null;
        api.removeFromPlaylist(playlistId, entryIds);
        // TODO: test validations
    }

}
