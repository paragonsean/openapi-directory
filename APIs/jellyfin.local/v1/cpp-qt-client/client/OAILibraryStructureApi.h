/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILibraryStructureApi_H
#define OAI_OAILibraryStructureApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddVirtualFolderDto.h"
#include "OAIMediaPathDto.h"
#include "OAIMediaPathInfo.h"
#include "OAIProblemDetails.h"
#include "OAIUpdateLibraryOptionsDto.h"
#include "OAIVirtualFolderInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILibraryStructureApi : public QObject {
    Q_OBJECT

public:
    OAILibraryStructureApi(const int timeOut = 0);
    ~OAILibraryStructureApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_media_path_dto OAIMediaPathDto [required]
    * @param[in]  refresh_library bool [optional]
    */
    virtual void addMediaPath(const OAIMediaPathDto &oai_media_path_dto, const ::OpenAPI::OptionalParam<bool> &refresh_library = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  collection_type QString [optional]
    * @param[in]  paths QList<QString> [optional]
    * @param[in]  refresh_library bool [optional]
    * @param[in]  oai_add_virtual_folder_dto OAIAddVirtualFolderDto [optional]
    */
    virtual void addVirtualFolder(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &collection_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &paths = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &refresh_library = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIAddVirtualFolderDto> &oai_add_virtual_folder_dto = ::OpenAPI::OptionalParam<OAIAddVirtualFolderDto>());


    virtual void getVirtualFolders();

    /**
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  refresh_library bool [optional]
    */
    virtual void removeMediaPath(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &refresh_library = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  refresh_library bool [optional]
    */
    virtual void removeVirtualFolder(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &refresh_library = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  new_name QString [optional]
    * @param[in]  refresh_library bool [optional]
    */
    virtual void renameVirtualFolder(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &refresh_library = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_update_library_options_dto OAIUpdateLibraryOptionsDto [optional]
    */
    virtual void updateLibraryOptions(const ::OpenAPI::OptionalParam<OAIUpdateLibraryOptionsDto> &oai_update_library_options_dto = ::OpenAPI::OptionalParam<OAIUpdateLibraryOptionsDto>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  oai_media_path_info OAIMediaPathInfo [optional]
    */
    virtual void updateMediaPath(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMediaPathInfo> &oai_media_path_info = ::OpenAPI::OptionalParam<OAIMediaPathInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addMediaPathCallback(OAIHttpRequestWorker *worker);
    void addVirtualFolderCallback(OAIHttpRequestWorker *worker);
    void getVirtualFoldersCallback(OAIHttpRequestWorker *worker);
    void removeMediaPathCallback(OAIHttpRequestWorker *worker);
    void removeVirtualFolderCallback(OAIHttpRequestWorker *worker);
    void renameVirtualFolderCallback(OAIHttpRequestWorker *worker);
    void updateLibraryOptionsCallback(OAIHttpRequestWorker *worker);
    void updateMediaPathCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addMediaPathSignal();
    void addVirtualFolderSignal();
    void getVirtualFoldersSignal(QList<OAIVirtualFolderInfo> summary);
    void removeMediaPathSignal();
    void removeVirtualFolderSignal();
    void renameVirtualFolderSignal();
    void updateLibraryOptionsSignal();
    void updateMediaPathSignal();


    void addMediaPathSignalFull(OAIHttpRequestWorker *worker);
    void addVirtualFolderSignalFull(OAIHttpRequestWorker *worker);
    void getVirtualFoldersSignalFull(OAIHttpRequestWorker *worker, QList<OAIVirtualFolderInfo> summary);
    void removeMediaPathSignalFull(OAIHttpRequestWorker *worker);
    void removeVirtualFolderSignalFull(OAIHttpRequestWorker *worker);
    void renameVirtualFolderSignalFull(OAIHttpRequestWorker *worker);
    void updateLibraryOptionsSignalFull(OAIHttpRequestWorker *worker);
    void updateMediaPathSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addMediaPathSignalError() instead")
    void addMediaPathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addMediaPathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVirtualFolderSignalError() instead")
    void addVirtualFolderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVirtualFolderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVirtualFoldersSignalError() instead")
    void getVirtualFoldersSignalE(QList<OAIVirtualFolderInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVirtualFoldersSignalError(QList<OAIVirtualFolderInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMediaPathSignalError() instead")
    void removeMediaPathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeMediaPathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVirtualFolderSignalError() instead")
    void removeVirtualFolderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeVirtualFolderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameVirtualFolderSignalError() instead")
    void renameVirtualFolderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameVirtualFolderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLibraryOptionsSignalError() instead")
    void updateLibraryOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateLibraryOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMediaPathSignalError() instead")
    void updateMediaPathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateMediaPathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addMediaPathSignalErrorFull() instead")
    void addMediaPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addMediaPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVirtualFolderSignalErrorFull() instead")
    void addVirtualFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVirtualFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVirtualFoldersSignalErrorFull() instead")
    void getVirtualFoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVirtualFoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMediaPathSignalErrorFull() instead")
    void removeMediaPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMediaPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVirtualFolderSignalErrorFull() instead")
    void removeVirtualFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVirtualFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameVirtualFolderSignalErrorFull() instead")
    void renameVirtualFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameVirtualFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLibraryOptionsSignalErrorFull() instead")
    void updateLibraryOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLibraryOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMediaPathSignalErrorFull() instead")
    void updateMediaPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMediaPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
