/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageFormat::OAIImageFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageFormat::OAIImageFormat() {
    this->initializeModel();
}

OAIImageFormat::~OAIImageFormat() {}

void OAIImageFormat::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIImageFormat::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIImageFormat::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Bmp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageFormat::BMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageFormat::GIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Jpg", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageFormat::JPG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Png", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageFormat::PNG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Webp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageFormat::WEBP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIImageFormat::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIImageFormat::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIImageFormat::BMP:
            val = "Bmp";
            break;
        case eOAIImageFormat::GIF:
            val = "Gif";
            break;
        case eOAIImageFormat::JPG:
            val = "Jpg";
            break;
        case eOAIImageFormat::PNG:
            val = "Png";
            break;
        case eOAIImageFormat::WEBP:
            val = "Webp";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIImageFormat::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIImageFormat::eOAIImageFormat OAIImageFormat::getValue() const {
    return m_value;
}

void OAIImageFormat::setValue(const OAIImageFormat::eOAIImageFormat& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIImageFormat::isSet() const {
    
    return m_value_isSet;
}

bool OAIImageFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
