/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaPathDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaPathDto::OAIMediaPathDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaPathDto::OAIMediaPathDto() {
    this->initializeModel();
}

OAIMediaPathDto::~OAIMediaPathDto() {}

void OAIMediaPathDto::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_path_info_isSet = false;
    m_path_info_isValid = false;
}

void OAIMediaPathDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaPathDto::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_path_info_isValid = ::OpenAPI::fromJsonValue(m_path_info, json[QString("PathInfo")]);
    m_path_info_isSet = !json[QString("PathInfo")].isNull() && m_path_info_isValid;
}

QString OAIMediaPathDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaPathDto::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_path_info.isSet()) {
        obj.insert(QString("PathInfo"), ::OpenAPI::toJsonValue(m_path_info));
    }
    return obj;
}

QString OAIMediaPathDto::getName() const {
    return m_name;
}
void OAIMediaPathDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMediaPathDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMediaPathDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMediaPathDto::getPath() const {
    return m_path;
}
void OAIMediaPathDto::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIMediaPathDto::is_path_Set() const{
    return m_path_isSet;
}

bool OAIMediaPathDto::is_path_Valid() const{
    return m_path_isValid;
}

OAIMediaPathInfo OAIMediaPathDto::getPathInfo() const {
    return m_path_info;
}
void OAIMediaPathDto::setPathInfo(const OAIMediaPathInfo &path_info) {
    m_path_info = path_info;
    m_path_info_isSet = true;
}

bool OAIMediaPathDto::is_path_info_Set() const{
    return m_path_info_isSet;
}

bool OAIMediaPathDto::is_path_info_Valid() const{
    return m_path_info_isValid;
}

bool OAIMediaPathDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaPathDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
