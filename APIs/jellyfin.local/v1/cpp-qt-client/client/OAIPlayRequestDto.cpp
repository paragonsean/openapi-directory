/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayRequestDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayRequestDto::OAIPlayRequestDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayRequestDto::OAIPlayRequestDto() {
    this->initializeModel();
}

OAIPlayRequestDto::~OAIPlayRequestDto() {}

void OAIPlayRequestDto::initializeModel() {

    m_playing_item_position_isSet = false;
    m_playing_item_position_isValid = false;

    m_playing_queue_isSet = false;
    m_playing_queue_isValid = false;

    m_start_position_ticks_isSet = false;
    m_start_position_ticks_isValid = false;
}

void OAIPlayRequestDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayRequestDto::fromJsonObject(QJsonObject json) {

    m_playing_item_position_isValid = ::OpenAPI::fromJsonValue(m_playing_item_position, json[QString("PlayingItemPosition")]);
    m_playing_item_position_isSet = !json[QString("PlayingItemPosition")].isNull() && m_playing_item_position_isValid;

    m_playing_queue_isValid = ::OpenAPI::fromJsonValue(m_playing_queue, json[QString("PlayingQueue")]);
    m_playing_queue_isSet = !json[QString("PlayingQueue")].isNull() && m_playing_queue_isValid;

    m_start_position_ticks_isValid = ::OpenAPI::fromJsonValue(m_start_position_ticks, json[QString("StartPositionTicks")]);
    m_start_position_ticks_isSet = !json[QString("StartPositionTicks")].isNull() && m_start_position_ticks_isValid;
}

QString OAIPlayRequestDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayRequestDto::asJsonObject() const {
    QJsonObject obj;
    if (m_playing_item_position_isSet) {
        obj.insert(QString("PlayingItemPosition"), ::OpenAPI::toJsonValue(m_playing_item_position));
    }
    if (m_playing_queue.size() > 0) {
        obj.insert(QString("PlayingQueue"), ::OpenAPI::toJsonValue(m_playing_queue));
    }
    if (m_start_position_ticks_isSet) {
        obj.insert(QString("StartPositionTicks"), ::OpenAPI::toJsonValue(m_start_position_ticks));
    }
    return obj;
}

qint32 OAIPlayRequestDto::getPlayingItemPosition() const {
    return m_playing_item_position;
}
void OAIPlayRequestDto::setPlayingItemPosition(const qint32 &playing_item_position) {
    m_playing_item_position = playing_item_position;
    m_playing_item_position_isSet = true;
}

bool OAIPlayRequestDto::is_playing_item_position_Set() const{
    return m_playing_item_position_isSet;
}

bool OAIPlayRequestDto::is_playing_item_position_Valid() const{
    return m_playing_item_position_isValid;
}

QList<QString> OAIPlayRequestDto::getPlayingQueue() const {
    return m_playing_queue;
}
void OAIPlayRequestDto::setPlayingQueue(const QList<QString> &playing_queue) {
    m_playing_queue = playing_queue;
    m_playing_queue_isSet = true;
}

bool OAIPlayRequestDto::is_playing_queue_Set() const{
    return m_playing_queue_isSet;
}

bool OAIPlayRequestDto::is_playing_queue_Valid() const{
    return m_playing_queue_isValid;
}

qint64 OAIPlayRequestDto::getStartPositionTicks() const {
    return m_start_position_ticks;
}
void OAIPlayRequestDto::setStartPositionTicks(const qint64 &start_position_ticks) {
    m_start_position_ticks = start_position_ticks;
    m_start_position_ticks_isSet = true;
}

bool OAIPlayRequestDto::is_start_position_ticks_Set() const{
    return m_start_position_ticks_isSet;
}

bool OAIPlayRequestDto::is_start_position_ticks_Valid() const{
    return m_start_position_ticks_isValid;
}

bool OAIPlayRequestDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_playing_item_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playing_queue.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_position_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayRequestDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
