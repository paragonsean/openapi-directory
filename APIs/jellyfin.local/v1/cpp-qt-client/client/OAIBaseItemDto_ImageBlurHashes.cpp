/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseItemDto_ImageBlurHashes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseItemDto_ImageBlurHashes::OAIBaseItemDto_ImageBlurHashes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseItemDto_ImageBlurHashes::OAIBaseItemDto_ImageBlurHashes() {
    this->initializeModel();
}

OAIBaseItemDto_ImageBlurHashes::~OAIBaseItemDto_ImageBlurHashes() {}

void OAIBaseItemDto_ImageBlurHashes::initializeModel() {

    m_art_isSet = false;
    m_art_isValid = false;

    m_backdrop_isSet = false;
    m_backdrop_isValid = false;

    m_banner_isSet = false;
    m_banner_isValid = false;

    m_box_isSet = false;
    m_box_isValid = false;

    m_box_rear_isSet = false;
    m_box_rear_isValid = false;

    m_chapter_isSet = false;
    m_chapter_isValid = false;

    m_disc_isSet = false;
    m_disc_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_menu_isSet = false;
    m_menu_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_screenshot_isSet = false;
    m_screenshot_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;
}

void OAIBaseItemDto_ImageBlurHashes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseItemDto_ImageBlurHashes::fromJsonObject(QJsonObject json) {

    m_art_isValid = ::OpenAPI::fromJsonValue(m_art, json[QString("Art")]);
    m_art_isSet = !json[QString("Art")].isNull() && m_art_isValid;

    m_backdrop_isValid = ::OpenAPI::fromJsonValue(m_backdrop, json[QString("Backdrop")]);
    m_backdrop_isSet = !json[QString("Backdrop")].isNull() && m_backdrop_isValid;

    m_banner_isValid = ::OpenAPI::fromJsonValue(m_banner, json[QString("Banner")]);
    m_banner_isSet = !json[QString("Banner")].isNull() && m_banner_isValid;

    m_box_isValid = ::OpenAPI::fromJsonValue(m_box, json[QString("Box")]);
    m_box_isSet = !json[QString("Box")].isNull() && m_box_isValid;

    m_box_rear_isValid = ::OpenAPI::fromJsonValue(m_box_rear, json[QString("BoxRear")]);
    m_box_rear_isSet = !json[QString("BoxRear")].isNull() && m_box_rear_isValid;

    m_chapter_isValid = ::OpenAPI::fromJsonValue(m_chapter, json[QString("Chapter")]);
    m_chapter_isSet = !json[QString("Chapter")].isNull() && m_chapter_isValid;

    m_disc_isValid = ::OpenAPI::fromJsonValue(m_disc, json[QString("Disc")]);
    m_disc_isSet = !json[QString("Disc")].isNull() && m_disc_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("Logo")]);
    m_logo_isSet = !json[QString("Logo")].isNull() && m_logo_isValid;

    m_menu_isValid = ::OpenAPI::fromJsonValue(m_menu, json[QString("Menu")]);
    m_menu_isSet = !json[QString("Menu")].isNull() && m_menu_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("Primary")]);
    m_primary_isSet = !json[QString("Primary")].isNull() && m_primary_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("Profile")]);
    m_profile_isSet = !json[QString("Profile")].isNull() && m_profile_isValid;

    m_screenshot_isValid = ::OpenAPI::fromJsonValue(m_screenshot, json[QString("Screenshot")]);
    m_screenshot_isSet = !json[QString("Screenshot")].isNull() && m_screenshot_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("Thumb")]);
    m_thumb_isSet = !json[QString("Thumb")].isNull() && m_thumb_isValid;
}

QString OAIBaseItemDto_ImageBlurHashes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseItemDto_ImageBlurHashes::asJsonObject() const {
    QJsonObject obj;
    if (m_art.size() > 0) {
        obj.insert(QString("Art"), ::OpenAPI::toJsonValue(m_art));
    }
    if (m_backdrop.size() > 0) {
        obj.insert(QString("Backdrop"), ::OpenAPI::toJsonValue(m_backdrop));
    }
    if (m_banner.size() > 0) {
        obj.insert(QString("Banner"), ::OpenAPI::toJsonValue(m_banner));
    }
    if (m_box.size() > 0) {
        obj.insert(QString("Box"), ::OpenAPI::toJsonValue(m_box));
    }
    if (m_box_rear.size() > 0) {
        obj.insert(QString("BoxRear"), ::OpenAPI::toJsonValue(m_box_rear));
    }
    if (m_chapter.size() > 0) {
        obj.insert(QString("Chapter"), ::OpenAPI::toJsonValue(m_chapter));
    }
    if (m_disc.size() > 0) {
        obj.insert(QString("Disc"), ::OpenAPI::toJsonValue(m_disc));
    }
    if (m_logo.size() > 0) {
        obj.insert(QString("Logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_menu.size() > 0) {
        obj.insert(QString("Menu"), ::OpenAPI::toJsonValue(m_menu));
    }
    if (m_primary.size() > 0) {
        obj.insert(QString("Primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_profile.size() > 0) {
        obj.insert(QString("Profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_screenshot.size() > 0) {
        obj.insert(QString("Screenshot"), ::OpenAPI::toJsonValue(m_screenshot));
    }
    if (m_thumb.size() > 0) {
        obj.insert(QString("Thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    return obj;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getArt() const {
    return m_art;
}
void OAIBaseItemDto_ImageBlurHashes::setArt(const QMap<QString, QString> &art) {
    m_art = art;
    m_art_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_art_Set() const{
    return m_art_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_art_Valid() const{
    return m_art_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getBackdrop() const {
    return m_backdrop;
}
void OAIBaseItemDto_ImageBlurHashes::setBackdrop(const QMap<QString, QString> &backdrop) {
    m_backdrop = backdrop;
    m_backdrop_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_backdrop_Set() const{
    return m_backdrop_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_backdrop_Valid() const{
    return m_backdrop_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getBanner() const {
    return m_banner;
}
void OAIBaseItemDto_ImageBlurHashes::setBanner(const QMap<QString, QString> &banner) {
    m_banner = banner;
    m_banner_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_banner_Set() const{
    return m_banner_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_banner_Valid() const{
    return m_banner_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getBox() const {
    return m_box;
}
void OAIBaseItemDto_ImageBlurHashes::setBox(const QMap<QString, QString> &box) {
    m_box = box;
    m_box_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_box_Set() const{
    return m_box_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_box_Valid() const{
    return m_box_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getBoxRear() const {
    return m_box_rear;
}
void OAIBaseItemDto_ImageBlurHashes::setBoxRear(const QMap<QString, QString> &box_rear) {
    m_box_rear = box_rear;
    m_box_rear_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_box_rear_Set() const{
    return m_box_rear_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_box_rear_Valid() const{
    return m_box_rear_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getChapter() const {
    return m_chapter;
}
void OAIBaseItemDto_ImageBlurHashes::setChapter(const QMap<QString, QString> &chapter) {
    m_chapter = chapter;
    m_chapter_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_chapter_Set() const{
    return m_chapter_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_chapter_Valid() const{
    return m_chapter_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getDisc() const {
    return m_disc;
}
void OAIBaseItemDto_ImageBlurHashes::setDisc(const QMap<QString, QString> &disc) {
    m_disc = disc;
    m_disc_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_disc_Set() const{
    return m_disc_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_disc_Valid() const{
    return m_disc_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getLogo() const {
    return m_logo;
}
void OAIBaseItemDto_ImageBlurHashes::setLogo(const QMap<QString, QString> &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_logo_Valid() const{
    return m_logo_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getMenu() const {
    return m_menu;
}
void OAIBaseItemDto_ImageBlurHashes::setMenu(const QMap<QString, QString> &menu) {
    m_menu = menu;
    m_menu_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_menu_Set() const{
    return m_menu_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_menu_Valid() const{
    return m_menu_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getPrimary() const {
    return m_primary;
}
void OAIBaseItemDto_ImageBlurHashes::setPrimary(const QMap<QString, QString> &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_primary_Valid() const{
    return m_primary_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getProfile() const {
    return m_profile;
}
void OAIBaseItemDto_ImageBlurHashes::setProfile(const QMap<QString, QString> &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_profile_Valid() const{
    return m_profile_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getScreenshot() const {
    return m_screenshot;
}
void OAIBaseItemDto_ImageBlurHashes::setScreenshot(const QMap<QString, QString> &screenshot) {
    m_screenshot = screenshot;
    m_screenshot_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_screenshot_Set() const{
    return m_screenshot_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_screenshot_Valid() const{
    return m_screenshot_isValid;
}

QMap<QString, QString> OAIBaseItemDto_ImageBlurHashes::getThumb() const {
    return m_thumb;
}
void OAIBaseItemDto_ImageBlurHashes::setThumb(const QMap<QString, QString> &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAIBaseItemDto_ImageBlurHashes::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAIBaseItemDto_ImageBlurHashes::is_thumb_Valid() const{
    return m_thumb_isValid;
}

bool OAIBaseItemDto_ImageBlurHashes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_art.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backdrop.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_banner.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_box.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_rear.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseItemDto_ImageBlurHashes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
