/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubtitleApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAISubtitleApi::OAISubtitleApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAISubtitleApi::~OAISubtitleApi() {
}

void OAISubtitleApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://jellyfin.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://localhost"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteSubtitle", defaultConf);
    _serverIndices.insert("deleteSubtitle", 0);
    _serverConfigs.insert("downloadRemoteSubtitles", defaultConf);
    _serverIndices.insert("downloadRemoteSubtitles", 0);
    _serverConfigs.insert("getFallbackFont", defaultConf);
    _serverIndices.insert("getFallbackFont", 0);
    _serverConfigs.insert("getFallbackFontList", defaultConf);
    _serverIndices.insert("getFallbackFontList", 0);
    _serverConfigs.insert("getRemoteSubtitles", defaultConf);
    _serverIndices.insert("getRemoteSubtitles", 0);
    _serverConfigs.insert("getSubtitle", defaultConf);
    _serverIndices.insert("getSubtitle", 0);
    _serverConfigs.insert("getSubtitlePlaylist", defaultConf);
    _serverIndices.insert("getSubtitlePlaylist", 0);
    _serverConfigs.insert("getSubtitleWithTicks", defaultConf);
    _serverIndices.insert("getSubtitleWithTicks", 0);
    _serverConfigs.insert("searchRemoteSubtitles", defaultConf);
    _serverIndices.insert("searchRemoteSubtitles", 0);
    _serverConfigs.insert("uploadSubtitle", defaultConf);
    _serverIndices.insert("uploadSubtitle", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAISubtitleApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAISubtitleApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAISubtitleApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAISubtitleApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAISubtitleApi::setUsername(const QString &username) {
    _username = username;
}

void OAISubtitleApi::setPassword(const QString &password) {
    _password = password;
}


void OAISubtitleApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAISubtitleApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAISubtitleApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAISubtitleApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISubtitleApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISubtitleApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAISubtitleApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAISubtitleApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAISubtitleApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAISubtitleApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAISubtitleApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAISubtitleApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAISubtitleApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAISubtitleApi::deleteSubtitle(const QString &item_id, const qint32 &index) {
    QString fullPath = QString(_serverConfigs["deleteSubtitle"][_serverIndices.value("deleteSubtitle")].URL()+"/Videos/{itemId}/Subtitles/{index}");
    
    if (_apiKeys.contains("CustomAuthentication")) {
        addHeaders("CustomAuthentication",_apiKeys.find("CustomAuthentication").value());
    }
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString indexPathParam("{");
        indexPathParam.append("index").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "index", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"index"+pathSuffix : pathPrefix;
        fullPath.replace(indexPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(index)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::deleteSubtitleCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::deleteSubtitleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteSubtitleSignal();
        Q_EMIT deleteSubtitleSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteSubtitleSignalE(error_type, error_str);
        Q_EMIT deleteSubtitleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteSubtitleSignalError(error_type, error_str);
        Q_EMIT deleteSubtitleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::downloadRemoteSubtitles(const QString &item_id, const QString &subtitle_id) {
    QString fullPath = QString(_serverConfigs["downloadRemoteSubtitles"][_serverIndices.value("downloadRemoteSubtitles")].URL()+"/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}");
    
    if (_apiKeys.contains("CustomAuthentication")) {
        addHeaders("CustomAuthentication",_apiKeys.find("CustomAuthentication").value());
    }
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString subtitle_idPathParam("{");
        subtitle_idPathParam.append("subtitleId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subtitleId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subtitleId"+pathSuffix : pathPrefix;
        fullPath.replace(subtitle_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subtitle_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::downloadRemoteSubtitlesCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::downloadRemoteSubtitlesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT downloadRemoteSubtitlesSignal();
        Q_EMIT downloadRemoteSubtitlesSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT downloadRemoteSubtitlesSignalE(error_type, error_str);
        Q_EMIT downloadRemoteSubtitlesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT downloadRemoteSubtitlesSignalError(error_type, error_str);
        Q_EMIT downloadRemoteSubtitlesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::getFallbackFont(const QString &name) {
    QString fullPath = QString(_serverConfigs["getFallbackFont"][_serverIndices.value("getFallbackFont")].URL()+"/FallbackFont/Fonts/{name}");
    
    if (_apiKeys.contains("CustomAuthentication")) {
        addHeaders("CustomAuthentication",_apiKeys.find("CustomAuthentication").value());
    }
    
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::getFallbackFontCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::getFallbackFontCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getFallbackFontSignal(output);
        Q_EMIT getFallbackFontSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getFallbackFontSignalE(output, error_type, error_str);
        Q_EMIT getFallbackFontSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getFallbackFontSignalError(output, error_type, error_str);
        Q_EMIT getFallbackFontSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::getFallbackFontList() {
    QString fullPath = QString(_serverConfigs["getFallbackFontList"][_serverIndices.value("getFallbackFontList")].URL()+"/FallbackFont/Fonts");
    
    if (_apiKeys.contains("CustomAuthentication")) {
        addHeaders("CustomAuthentication",_apiKeys.find("CustomAuthentication").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::getFallbackFontListCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::getFallbackFontListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIFontFile> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIFontFile val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getFallbackFontListSignal(output);
        Q_EMIT getFallbackFontListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getFallbackFontListSignalE(output, error_type, error_str);
        Q_EMIT getFallbackFontListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getFallbackFontListSignalError(output, error_type, error_str);
        Q_EMIT getFallbackFontListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::getRemoteSubtitles(const QString &id) {
    QString fullPath = QString(_serverConfigs["getRemoteSubtitles"][_serverIndices.value("getRemoteSubtitles")].URL()+"/Providers/Subtitles/Subtitles/{id}");
    
    if (_apiKeys.contains("CustomAuthentication")) {
        addHeaders("CustomAuthentication",_apiKeys.find("CustomAuthentication").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::getRemoteSubtitlesCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::getRemoteSubtitlesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRemoteSubtitlesSignal(output);
        Q_EMIT getRemoteSubtitlesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRemoteSubtitlesSignalE(output, error_type, error_str);
        Q_EMIT getRemoteSubtitlesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRemoteSubtitlesSignalError(output, error_type, error_str);
        Q_EMIT getRemoteSubtitlesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::getSubtitle(const QString &item_id, const QString &media_source_id, const qint32 &index, const QString &format, const ::OpenAPI::OptionalParam<qint64> &end_position_ticks, const ::OpenAPI::OptionalParam<bool> &copy_timestamps, const ::OpenAPI::OptionalParam<bool> &add_vtt_time_map, const ::OpenAPI::OptionalParam<qint64> &start_position_ticks) {
    QString fullPath = QString(_serverConfigs["getSubtitle"][_serverIndices.value("getSubtitle")].URL()+"/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/Stream.{format}");
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString media_source_idPathParam("{");
        media_source_idPathParam.append("mediaSourceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaSourceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaSourceId"+pathSuffix : pathPrefix;
        fullPath.replace(media_source_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_source_id)));
    }
    
    {
        QString indexPathParam("{");
        indexPathParam.append("index").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "index", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"index"+pathSuffix : pathPrefix;
        fullPath.replace(indexPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(index)));
    }
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (end_position_ticks.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "endPositionTicks", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("endPositionTicks")).append(querySuffix).append(QUrl::toPercentEncoding(end_position_ticks.stringValue()));
    }
    if (copy_timestamps.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "copyTimestamps", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("copyTimestamps")).append(querySuffix).append(QUrl::toPercentEncoding(copy_timestamps.stringValue()));
    }
    if (add_vtt_time_map.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "addVttTimeMap", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("addVttTimeMap")).append(querySuffix).append(QUrl::toPercentEncoding(add_vtt_time_map.stringValue()));
    }
    if (start_position_ticks.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "startPositionTicks", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("startPositionTicks")).append(querySuffix).append(QUrl::toPercentEncoding(start_position_ticks.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::getSubtitleCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::getSubtitleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSubtitleSignal(output);
        Q_EMIT getSubtitleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSubtitleSignalE(output, error_type, error_str);
        Q_EMIT getSubtitleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSubtitleSignalError(output, error_type, error_str);
        Q_EMIT getSubtitleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::getSubtitlePlaylist(const QString &item_id, const qint32 &index, const QString &media_source_id, const qint32 &segment_length) {
    QString fullPath = QString(_serverConfigs["getSubtitlePlaylist"][_serverIndices.value("getSubtitlePlaylist")].URL()+"/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8");
    
    if (_apiKeys.contains("CustomAuthentication")) {
        addHeaders("CustomAuthentication",_apiKeys.find("CustomAuthentication").value());
    }
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString indexPathParam("{");
        indexPathParam.append("index").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "index", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"index"+pathSuffix : pathPrefix;
        fullPath.replace(indexPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(index)));
    }
    
    {
        QString media_source_idPathParam("{");
        media_source_idPathParam.append("mediaSourceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaSourceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaSourceId"+pathSuffix : pathPrefix;
        fullPath.replace(media_source_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_source_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "segmentLength", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("segmentLength")).append(querySuffix).append(QUrl::toPercentEncoding(segment_length));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::getSubtitlePlaylistCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::getSubtitlePlaylistCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSubtitlePlaylistSignal(output);
        Q_EMIT getSubtitlePlaylistSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSubtitlePlaylistSignalE(output, error_type, error_str);
        Q_EMIT getSubtitlePlaylistSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSubtitlePlaylistSignalError(output, error_type, error_str);
        Q_EMIT getSubtitlePlaylistSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::getSubtitleWithTicks(const QString &item_id, const QString &media_source_id, const qint32 &index, const qint64 &start_position_ticks, const QString &format, const ::OpenAPI::OptionalParam<qint64> &end_position_ticks, const ::OpenAPI::OptionalParam<bool> &copy_timestamps, const ::OpenAPI::OptionalParam<bool> &add_vtt_time_map) {
    QString fullPath = QString(_serverConfigs["getSubtitleWithTicks"][_serverIndices.value("getSubtitleWithTicks")].URL()+"/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/{startPositionTicks}/Stream.{format}");
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString media_source_idPathParam("{");
        media_source_idPathParam.append("mediaSourceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mediaSourceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mediaSourceId"+pathSuffix : pathPrefix;
        fullPath.replace(media_source_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(media_source_id)));
    }
    
    {
        QString indexPathParam("{");
        indexPathParam.append("index").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "index", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"index"+pathSuffix : pathPrefix;
        fullPath.replace(indexPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(index)));
    }
    
    {
        QString start_position_ticksPathParam("{");
        start_position_ticksPathParam.append("startPositionTicks").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "startPositionTicks", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"startPositionTicks"+pathSuffix : pathPrefix;
        fullPath.replace(start_position_ticksPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_position_ticks)));
    }
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (end_position_ticks.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "endPositionTicks", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("endPositionTicks")).append(querySuffix).append(QUrl::toPercentEncoding(end_position_ticks.stringValue()));
    }
    if (copy_timestamps.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "copyTimestamps", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("copyTimestamps")).append(querySuffix).append(QUrl::toPercentEncoding(copy_timestamps.stringValue()));
    }
    if (add_vtt_time_map.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "addVttTimeMap", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("addVttTimeMap")).append(querySuffix).append(QUrl::toPercentEncoding(add_vtt_time_map.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::getSubtitleWithTicksCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::getSubtitleWithTicksCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSubtitleWithTicksSignal(output);
        Q_EMIT getSubtitleWithTicksSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSubtitleWithTicksSignalE(output, error_type, error_str);
        Q_EMIT getSubtitleWithTicksSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSubtitleWithTicksSignalError(output, error_type, error_str);
        Q_EMIT getSubtitleWithTicksSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::searchRemoteSubtitles(const QString &item_id, const QString &language, const ::OpenAPI::OptionalParam<bool> &is_perfect_match) {
    QString fullPath = QString(_serverConfigs["searchRemoteSubtitles"][_serverIndices.value("searchRemoteSubtitles")].URL()+"/Items/{itemId}/RemoteSearch/Subtitles/{language}");
    
    if (_apiKeys.contains("CustomAuthentication")) {
        addHeaders("CustomAuthentication",_apiKeys.find("CustomAuthentication").value());
    }
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString languagePathParam("{");
        languagePathParam.append("language").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "language", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"language"+pathSuffix : pathPrefix;
        fullPath.replace(languagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(language)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (is_perfect_match.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "isPerfectMatch", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("isPerfectMatch")).append(querySuffix).append(QUrl::toPercentEncoding(is_perfect_match.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::searchRemoteSubtitlesCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::searchRemoteSubtitlesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRemoteSubtitleInfo> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRemoteSubtitleInfo val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT searchRemoteSubtitlesSignal(output);
        Q_EMIT searchRemoteSubtitlesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT searchRemoteSubtitlesSignalE(output, error_type, error_str);
        Q_EMIT searchRemoteSubtitlesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT searchRemoteSubtitlesSignalError(output, error_type, error_str);
        Q_EMIT searchRemoteSubtitlesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::uploadSubtitle(const QString &item_id, const OAIUploadSubtitleDto &oai_upload_subtitle_dto) {
    QString fullPath = QString(_serverConfigs["uploadSubtitle"][_serverIndices.value("uploadSubtitle")].URL()+"/Videos/{itemId}/Subtitles");
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_upload_subtitle_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISubtitleApi::uploadSubtitleCallback);
    connect(this, &OAISubtitleApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISubtitleApi::uploadSubtitleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uploadSubtitleSignal();
        Q_EMIT uploadSubtitleSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uploadSubtitleSignalE(error_type, error_str);
        Q_EMIT uploadSubtitleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uploadSubtitleSignalError(error_type, error_str);
        Q_EMIT uploadSubtitleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISubtitleApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
