/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITunerHostInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITunerHostInfo::OAITunerHostInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITunerHostInfo::OAITunerHostInfo() {
    this->initializeModel();
}

OAITunerHostInfo::~OAITunerHostInfo() {}

void OAITunerHostInfo::initializeModel() {

    m_allow_hw_transcoding_isSet = false;
    m_allow_hw_transcoding_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_enable_stream_looping_isSet = false;
    m_enable_stream_looping_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_import_favorites_only_isSet = false;
    m_import_favorites_only_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_tuner_count_isSet = false;
    m_tuner_count_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAITunerHostInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITunerHostInfo::fromJsonObject(QJsonObject json) {

    m_allow_hw_transcoding_isValid = ::OpenAPI::fromJsonValue(m_allow_hw_transcoding, json[QString("AllowHWTranscoding")]);
    m_allow_hw_transcoding_isSet = !json[QString("AllowHWTranscoding")].isNull() && m_allow_hw_transcoding_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_enable_stream_looping_isValid = ::OpenAPI::fromJsonValue(m_enable_stream_looping, json[QString("EnableStreamLooping")]);
    m_enable_stream_looping_isSet = !json[QString("EnableStreamLooping")].isNull() && m_enable_stream_looping_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("FriendlyName")]);
    m_friendly_name_isSet = !json[QString("FriendlyName")].isNull() && m_friendly_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_import_favorites_only_isValid = ::OpenAPI::fromJsonValue(m_import_favorites_only, json[QString("ImportFavoritesOnly")]);
    m_import_favorites_only_isSet = !json[QString("ImportFavoritesOnly")].isNull() && m_import_favorites_only_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_tuner_count_isValid = ::OpenAPI::fromJsonValue(m_tuner_count, json[QString("TunerCount")]);
    m_tuner_count_isSet = !json[QString("TunerCount")].isNull() && m_tuner_count_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("UserAgent")]);
    m_user_agent_isSet = !json[QString("UserAgent")].isNull() && m_user_agent_isValid;
}

QString OAITunerHostInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITunerHostInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_hw_transcoding_isSet) {
        obj.insert(QString("AllowHWTranscoding"), ::OpenAPI::toJsonValue(m_allow_hw_transcoding));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_enable_stream_looping_isSet) {
        obj.insert(QString("EnableStreamLooping"), ::OpenAPI::toJsonValue(m_enable_stream_looping));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("FriendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_import_favorites_only_isSet) {
        obj.insert(QString("ImportFavoritesOnly"), ::OpenAPI::toJsonValue(m_import_favorites_only));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_tuner_count_isSet) {
        obj.insert(QString("TunerCount"), ::OpenAPI::toJsonValue(m_tuner_count));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("UserAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

bool OAITunerHostInfo::isAllowHwTranscoding() const {
    return m_allow_hw_transcoding;
}
void OAITunerHostInfo::setAllowHwTranscoding(const bool &allow_hw_transcoding) {
    m_allow_hw_transcoding = allow_hw_transcoding;
    m_allow_hw_transcoding_isSet = true;
}

bool OAITunerHostInfo::is_allow_hw_transcoding_Set() const{
    return m_allow_hw_transcoding_isSet;
}

bool OAITunerHostInfo::is_allow_hw_transcoding_Valid() const{
    return m_allow_hw_transcoding_isValid;
}

QString OAITunerHostInfo::getDeviceId() const {
    return m_device_id;
}
void OAITunerHostInfo::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAITunerHostInfo::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAITunerHostInfo::is_device_id_Valid() const{
    return m_device_id_isValid;
}

bool OAITunerHostInfo::isEnableStreamLooping() const {
    return m_enable_stream_looping;
}
void OAITunerHostInfo::setEnableStreamLooping(const bool &enable_stream_looping) {
    m_enable_stream_looping = enable_stream_looping;
    m_enable_stream_looping_isSet = true;
}

bool OAITunerHostInfo::is_enable_stream_looping_Set() const{
    return m_enable_stream_looping_isSet;
}

bool OAITunerHostInfo::is_enable_stream_looping_Valid() const{
    return m_enable_stream_looping_isValid;
}

QString OAITunerHostInfo::getFriendlyName() const {
    return m_friendly_name;
}
void OAITunerHostInfo::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAITunerHostInfo::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAITunerHostInfo::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAITunerHostInfo::getId() const {
    return m_id;
}
void OAITunerHostInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITunerHostInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAITunerHostInfo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITunerHostInfo::isImportFavoritesOnly() const {
    return m_import_favorites_only;
}
void OAITunerHostInfo::setImportFavoritesOnly(const bool &import_favorites_only) {
    m_import_favorites_only = import_favorites_only;
    m_import_favorites_only_isSet = true;
}

bool OAITunerHostInfo::is_import_favorites_only_Set() const{
    return m_import_favorites_only_isSet;
}

bool OAITunerHostInfo::is_import_favorites_only_Valid() const{
    return m_import_favorites_only_isValid;
}

QString OAITunerHostInfo::getSource() const {
    return m_source;
}
void OAITunerHostInfo::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITunerHostInfo::is_source_Set() const{
    return m_source_isSet;
}

bool OAITunerHostInfo::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAITunerHostInfo::getTunerCount() const {
    return m_tuner_count;
}
void OAITunerHostInfo::setTunerCount(const qint32 &tuner_count) {
    m_tuner_count = tuner_count;
    m_tuner_count_isSet = true;
}

bool OAITunerHostInfo::is_tuner_count_Set() const{
    return m_tuner_count_isSet;
}

bool OAITunerHostInfo::is_tuner_count_Valid() const{
    return m_tuner_count_isValid;
}

QString OAITunerHostInfo::getType() const {
    return m_type;
}
void OAITunerHostInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITunerHostInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAITunerHostInfo::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITunerHostInfo::getUrl() const {
    return m_url;
}
void OAITunerHostInfo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITunerHostInfo::is_url_Set() const{
    return m_url_isSet;
}

bool OAITunerHostInfo::is_url_Valid() const{
    return m_url_isValid;
}

QString OAITunerHostInfo::getUserAgent() const {
    return m_user_agent;
}
void OAITunerHostInfo::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAITunerHostInfo::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAITunerHostInfo::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAITunerHostInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_hw_transcoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_stream_looping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_favorites_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuner_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITunerHostInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
