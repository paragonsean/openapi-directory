/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataField::OAIMetadataField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataField::OAIMetadataField() {
    this->initializeModel();
}

OAIMetadataField::~OAIMetadataField() {}

void OAIMetadataField::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMetadataField::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMetadataField::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Cast", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetadataField::CAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Genres", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetadataField::GENRES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProductionLocations", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetadataField::PRODUCTIONLOCATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Studios", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetadataField::STUDIOS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Tags", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetadataField::TAGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Name", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetadataField::NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Overview", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetadataField::OVERVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Runtime", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetadataField::RUNTIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OfficialRating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetadataField::OFFICIALRATING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMetadataField::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMetadataField::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMetadataField::CAST:
            val = "Cast";
            break;
        case eOAIMetadataField::GENRES:
            val = "Genres";
            break;
        case eOAIMetadataField::PRODUCTIONLOCATIONS:
            val = "ProductionLocations";
            break;
        case eOAIMetadataField::STUDIOS:
            val = "Studios";
            break;
        case eOAIMetadataField::TAGS:
            val = "Tags";
            break;
        case eOAIMetadataField::NAME:
            val = "Name";
            break;
        case eOAIMetadataField::OVERVIEW:
            val = "Overview";
            break;
        case eOAIMetadataField::RUNTIME:
            val = "Runtime";
            break;
        case eOAIMetadataField::OFFICIALRATING:
            val = "OfficialRating";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMetadataField::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMetadataField::eOAIMetadataField OAIMetadataField::getValue() const {
    return m_value;
}

void OAIMetadataField::setValue(const OAIMetadataField::eOAIMetadataField& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMetadataField::isSet() const {
    
    return m_value_isSet;
}

bool OAIMetadataField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
