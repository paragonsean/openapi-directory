/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadSubtitleDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadSubtitleDto::OAIUploadSubtitleDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadSubtitleDto::OAIUploadSubtitleDto() {
    this->initializeModel();
}

OAIUploadSubtitleDto::~OAIUploadSubtitleDto() {}

void OAIUploadSubtitleDto::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_is_forced_isSet = false;
    m_is_forced_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;
}

void OAIUploadSubtitleDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadSubtitleDto::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_is_forced_isValid = ::OpenAPI::fromJsonValue(m_is_forced, json[QString("IsForced")]);
    m_is_forced_isSet = !json[QString("IsForced")].isNull() && m_is_forced_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;
}

QString OAIUploadSubtitleDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadSubtitleDto::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_is_forced_isSet) {
        obj.insert(QString("IsForced"), ::OpenAPI::toJsonValue(m_is_forced));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    return obj;
}

QString OAIUploadSubtitleDto::getData() const {
    return m_data;
}
void OAIUploadSubtitleDto::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIUploadSubtitleDto::is_data_Set() const{
    return m_data_isSet;
}

bool OAIUploadSubtitleDto::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIUploadSubtitleDto::getFormat() const {
    return m_format;
}
void OAIUploadSubtitleDto::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIUploadSubtitleDto::is_format_Set() const{
    return m_format_isSet;
}

bool OAIUploadSubtitleDto::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIUploadSubtitleDto::isIsForced() const {
    return m_is_forced;
}
void OAIUploadSubtitleDto::setIsForced(const bool &is_forced) {
    m_is_forced = is_forced;
    m_is_forced_isSet = true;
}

bool OAIUploadSubtitleDto::is_is_forced_Set() const{
    return m_is_forced_isSet;
}

bool OAIUploadSubtitleDto::is_is_forced_Valid() const{
    return m_is_forced_isValid;
}

QString OAIUploadSubtitleDto::getLanguage() const {
    return m_language;
}
void OAIUploadSubtitleDto::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIUploadSubtitleDto::is_language_Set() const{
    return m_language_isSet;
}

bool OAIUploadSubtitleDto::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIUploadSubtitleDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadSubtitleDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_format_isValid && m_is_forced_isValid && m_language_isValid && true;
}

} // namespace OpenAPI
