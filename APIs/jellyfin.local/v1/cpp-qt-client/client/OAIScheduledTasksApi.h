/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScheduledTasksApi_H
#define OAI_OAIScheduledTasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProblemDetails.h"
#include "OAITaskInfo.h"
#include "OAITaskTriggerInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScheduledTasksApi : public QObject {
    Q_OBJECT

public:
    OAIScheduledTasksApi(const int timeOut = 0);
    ~OAIScheduledTasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getTask(const QString &task_id);

    /**
    * @param[in]  is_hidden bool [optional]
    * @param[in]  is_enabled bool [optional]
    */
    virtual void getTasks(const ::OpenAPI::OptionalParam<bool> &is_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void startTask(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void stopTask(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_task_trigger_info QList<OAITaskTriggerInfo> [required]
    */
    virtual void updateTask(const QString &task_id, const QList<OAITaskTriggerInfo> &oai_task_trigger_info);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getTaskCallback(OAIHttpRequestWorker *worker);
    void getTasksCallback(OAIHttpRequestWorker *worker);
    void startTaskCallback(OAIHttpRequestWorker *worker);
    void stopTaskCallback(OAIHttpRequestWorker *worker);
    void updateTaskCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getTaskSignal(OAITaskInfo summary);
    void getTasksSignal(QList<OAITaskInfo> summary);
    void startTaskSignal();
    void stopTaskSignal();
    void updateTaskSignal();


    void getTaskSignalFull(OAIHttpRequestWorker *worker, OAITaskInfo summary);
    void getTasksSignalFull(OAIHttpRequestWorker *worker, QList<OAITaskInfo> summary);
    void startTaskSignalFull(OAIHttpRequestWorker *worker);
    void stopTaskSignalFull(OAIHttpRequestWorker *worker);
    void updateTaskSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getTaskSignalError() instead")
    void getTaskSignalE(OAITaskInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskSignalError(OAITaskInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksSignalError() instead")
    void getTasksSignalE(QList<OAITaskInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksSignalError(QList<OAITaskInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startTaskSignalError() instead")
    void startTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopTaskSignalError() instead")
    void stopTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stopTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskSignalError() instead")
    void updateTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getTaskSignalErrorFull() instead")
    void getTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksSignalErrorFull() instead")
    void getTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startTaskSignalErrorFull() instead")
    void startTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopTaskSignalErrorFull() instead")
    void stopTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskSignalErrorFull() instead")
    void updateTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
