/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceInfo::OAIDeviceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceInfo::OAIDeviceInfo() {
    this->initializeModel();
}

OAIDeviceInfo::~OAIDeviceInfo() {}

void OAIDeviceInfo::initializeModel() {

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_date_last_activity_isSet = false;
    m_date_last_activity_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_user_id_isSet = false;
    m_last_user_id_isValid = false;

    m_last_user_name_isSet = false;
    m_last_user_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDeviceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceInfo::fromJsonObject(QJsonObject json) {

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("AppName")]);
    m_app_name_isSet = !json[QString("AppName")].isNull() && m_app_name_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("AppVersion")]);
    m_app_version_isSet = !json[QString("AppVersion")].isNull() && m_app_version_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_date_last_activity_isValid = ::OpenAPI::fromJsonValue(m_date_last_activity, json[QString("DateLastActivity")]);
    m_date_last_activity_isSet = !json[QString("DateLastActivity")].isNull() && m_date_last_activity_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("IconUrl")]);
    m_icon_url_isSet = !json[QString("IconUrl")].isNull() && m_icon_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_last_user_id_isValid = ::OpenAPI::fromJsonValue(m_last_user_id, json[QString("LastUserId")]);
    m_last_user_id_isSet = !json[QString("LastUserId")].isNull() && m_last_user_id_isValid;

    m_last_user_name_isValid = ::OpenAPI::fromJsonValue(m_last_user_name, json[QString("LastUserName")]);
    m_last_user_name_isSet = !json[QString("LastUserName")].isNull() && m_last_user_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIDeviceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_app_name_isSet) {
        obj.insert(QString("AppName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("AppVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_date_last_activity_isSet) {
        obj.insert(QString("DateLastActivity"), ::OpenAPI::toJsonValue(m_date_last_activity));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("IconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_user_id_isSet) {
        obj.insert(QString("LastUserId"), ::OpenAPI::toJsonValue(m_last_user_id));
    }
    if (m_last_user_name_isSet) {
        obj.insert(QString("LastUserName"), ::OpenAPI::toJsonValue(m_last_user_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIDeviceInfo::getAppName() const {
    return m_app_name;
}
void OAIDeviceInfo::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIDeviceInfo::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIDeviceInfo::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIDeviceInfo::getAppVersion() const {
    return m_app_version;
}
void OAIDeviceInfo::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIDeviceInfo::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIDeviceInfo::is_app_version_Valid() const{
    return m_app_version_isValid;
}

OAIClientCapabilities OAIDeviceInfo::getCapabilities() const {
    return m_capabilities;
}
void OAIDeviceInfo::setCapabilities(const OAIClientCapabilities &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIDeviceInfo::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIDeviceInfo::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QDateTime OAIDeviceInfo::getDateLastActivity() const {
    return m_date_last_activity;
}
void OAIDeviceInfo::setDateLastActivity(const QDateTime &date_last_activity) {
    m_date_last_activity = date_last_activity;
    m_date_last_activity_isSet = true;
}

bool OAIDeviceInfo::is_date_last_activity_Set() const{
    return m_date_last_activity_isSet;
}

bool OAIDeviceInfo::is_date_last_activity_Valid() const{
    return m_date_last_activity_isValid;
}

QString OAIDeviceInfo::getIconUrl() const {
    return m_icon_url;
}
void OAIDeviceInfo::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIDeviceInfo::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIDeviceInfo::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIDeviceInfo::getId() const {
    return m_id;
}
void OAIDeviceInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeviceInfo::getLastUserId() const {
    return m_last_user_id;
}
void OAIDeviceInfo::setLastUserId(const QString &last_user_id) {
    m_last_user_id = last_user_id;
    m_last_user_id_isSet = true;
}

bool OAIDeviceInfo::is_last_user_id_Set() const{
    return m_last_user_id_isSet;
}

bool OAIDeviceInfo::is_last_user_id_Valid() const{
    return m_last_user_id_isValid;
}

QString OAIDeviceInfo::getLastUserName() const {
    return m_last_user_name;
}
void OAIDeviceInfo::setLastUserName(const QString &last_user_name) {
    m_last_user_name = last_user_name;
    m_last_user_name_isSet = true;
}

bool OAIDeviceInfo::is_last_user_name_Set() const{
    return m_last_user_name_isSet;
}

bool OAIDeviceInfo::is_last_user_name_Valid() const{
    return m_last_user_name_isValid;
}

QString OAIDeviceInfo::getName() const {
    return m_name;
}
void OAIDeviceInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceInfo::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDeviceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
