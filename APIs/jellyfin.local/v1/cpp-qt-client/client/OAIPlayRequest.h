/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlayRequest.h
 *
 * Class PlayRequest.
 */

#ifndef OAIPlayRequest_H
#define OAIPlayRequest_H

#include <QJsonObject>

#include "OAIPlayCommand.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPlayRequest : public OAIObject {
public:
    OAIPlayRequest();
    OAIPlayRequest(QString json);
    ~OAIPlayRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAudioStreamIndex() const;
    void setAudioStreamIndex(const qint32 &audio_stream_index);
    bool is_audio_stream_index_Set() const;
    bool is_audio_stream_index_Valid() const;

    QString getControllingUserId() const;
    void setControllingUserId(const QString &controlling_user_id);
    bool is_controlling_user_id_Set() const;
    bool is_controlling_user_id_Valid() const;

    QList<QString> getItemIds() const;
    void setItemIds(const QList<QString> &item_ids);
    bool is_item_ids_Set() const;
    bool is_item_ids_Valid() const;

    QString getMediaSourceId() const;
    void setMediaSourceId(const QString &media_source_id);
    bool is_media_source_id_Set() const;
    bool is_media_source_id_Valid() const;

    OAIPlayCommand getPlayCommand() const;
    void setPlayCommand(const OAIPlayCommand &play_command);
    bool is_play_command_Set() const;
    bool is_play_command_Valid() const;

    qint32 getStartIndex() const;
    void setStartIndex(const qint32 &start_index);
    bool is_start_index_Set() const;
    bool is_start_index_Valid() const;

    qint64 getStartPositionTicks() const;
    void setStartPositionTicks(const qint64 &start_position_ticks);
    bool is_start_position_ticks_Set() const;
    bool is_start_position_ticks_Valid() const;

    qint32 getSubtitleStreamIndex() const;
    void setSubtitleStreamIndex(const qint32 &subtitle_stream_index);
    bool is_subtitle_stream_index_Set() const;
    bool is_subtitle_stream_index_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_audio_stream_index;
    bool m_audio_stream_index_isSet;
    bool m_audio_stream_index_isValid;

    QString m_controlling_user_id;
    bool m_controlling_user_id_isSet;
    bool m_controlling_user_id_isValid;

    QList<QString> m_item_ids;
    bool m_item_ids_isSet;
    bool m_item_ids_isValid;

    QString m_media_source_id;
    bool m_media_source_id_isSet;
    bool m_media_source_id_isValid;

    OAIPlayCommand m_play_command;
    bool m_play_command_isSet;
    bool m_play_command_isValid;

    qint32 m_start_index;
    bool m_start_index_isSet;
    bool m_start_index_isValid;

    qint64 m_start_position_ticks;
    bool m_start_position_ticks_isSet;
    bool m_start_position_ticks_isValid;

    qint32 m_subtitle_stream_index;
    bool m_subtitle_stream_index_isSet;
    bool m_subtitle_stream_index_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlayRequest)

#endif // OAIPlayRequest_H
