/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtistInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtistInfo::OAIArtistInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtistInfo::OAIArtistInfo() {
    this->initializeModel();
}

OAIArtistInfo::~OAIArtistInfo() {}

void OAIArtistInfo::initializeModel() {

    m_index_number_isSet = false;
    m_index_number_isValid = false;

    m_is_automated_isSet = false;
    m_is_automated_isValid = false;

    m_metadata_country_code_isSet = false;
    m_metadata_country_code_isValid = false;

    m_metadata_language_isSet = false;
    m_metadata_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_index_number_isSet = false;
    m_parent_index_number_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_premiere_date_isSet = false;
    m_premiere_date_isValid = false;

    m_provider_ids_isSet = false;
    m_provider_ids_isValid = false;

    m_song_infos_isSet = false;
    m_song_infos_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIArtistInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtistInfo::fromJsonObject(QJsonObject json) {

    m_index_number_isValid = ::OpenAPI::fromJsonValue(m_index_number, json[QString("IndexNumber")]);
    m_index_number_isSet = !json[QString("IndexNumber")].isNull() && m_index_number_isValid;

    m_is_automated_isValid = ::OpenAPI::fromJsonValue(m_is_automated, json[QString("IsAutomated")]);
    m_is_automated_isSet = !json[QString("IsAutomated")].isNull() && m_is_automated_isValid;

    m_metadata_country_code_isValid = ::OpenAPI::fromJsonValue(m_metadata_country_code, json[QString("MetadataCountryCode")]);
    m_metadata_country_code_isSet = !json[QString("MetadataCountryCode")].isNull() && m_metadata_country_code_isValid;

    m_metadata_language_isValid = ::OpenAPI::fromJsonValue(m_metadata_language, json[QString("MetadataLanguage")]);
    m_metadata_language_isSet = !json[QString("MetadataLanguage")].isNull() && m_metadata_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parent_index_number_isValid = ::OpenAPI::fromJsonValue(m_parent_index_number, json[QString("ParentIndexNumber")]);
    m_parent_index_number_isSet = !json[QString("ParentIndexNumber")].isNull() && m_parent_index_number_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_premiere_date_isValid = ::OpenAPI::fromJsonValue(m_premiere_date, json[QString("PremiereDate")]);
    m_premiere_date_isSet = !json[QString("PremiereDate")].isNull() && m_premiere_date_isValid;

    m_provider_ids_isValid = ::OpenAPI::fromJsonValue(m_provider_ids, json[QString("ProviderIds")]);
    m_provider_ids_isSet = !json[QString("ProviderIds")].isNull() && m_provider_ids_isValid;

    m_song_infos_isValid = ::OpenAPI::fromJsonValue(m_song_infos, json[QString("SongInfos")]);
    m_song_infos_isSet = !json[QString("SongInfos")].isNull() && m_song_infos_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("Year")]);
    m_year_isSet = !json[QString("Year")].isNull() && m_year_isValid;
}

QString OAIArtistInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtistInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_index_number_isSet) {
        obj.insert(QString("IndexNumber"), ::OpenAPI::toJsonValue(m_index_number));
    }
    if (m_is_automated_isSet) {
        obj.insert(QString("IsAutomated"), ::OpenAPI::toJsonValue(m_is_automated));
    }
    if (m_metadata_country_code_isSet) {
        obj.insert(QString("MetadataCountryCode"), ::OpenAPI::toJsonValue(m_metadata_country_code));
    }
    if (m_metadata_language_isSet) {
        obj.insert(QString("MetadataLanguage"), ::OpenAPI::toJsonValue(m_metadata_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_index_number_isSet) {
        obj.insert(QString("ParentIndexNumber"), ::OpenAPI::toJsonValue(m_parent_index_number));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_premiere_date_isSet) {
        obj.insert(QString("PremiereDate"), ::OpenAPI::toJsonValue(m_premiere_date));
    }
    if (m_provider_ids.size() > 0) {
        obj.insert(QString("ProviderIds"), ::OpenAPI::toJsonValue(m_provider_ids));
    }
    if (m_song_infos.size() > 0) {
        obj.insert(QString("SongInfos"), ::OpenAPI::toJsonValue(m_song_infos));
    }
    if (m_year_isSet) {
        obj.insert(QString("Year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIArtistInfo::getIndexNumber() const {
    return m_index_number;
}
void OAIArtistInfo::setIndexNumber(const qint32 &index_number) {
    m_index_number = index_number;
    m_index_number_isSet = true;
}

bool OAIArtistInfo::is_index_number_Set() const{
    return m_index_number_isSet;
}

bool OAIArtistInfo::is_index_number_Valid() const{
    return m_index_number_isValid;
}

bool OAIArtistInfo::isIsAutomated() const {
    return m_is_automated;
}
void OAIArtistInfo::setIsAutomated(const bool &is_automated) {
    m_is_automated = is_automated;
    m_is_automated_isSet = true;
}

bool OAIArtistInfo::is_is_automated_Set() const{
    return m_is_automated_isSet;
}

bool OAIArtistInfo::is_is_automated_Valid() const{
    return m_is_automated_isValid;
}

QString OAIArtistInfo::getMetadataCountryCode() const {
    return m_metadata_country_code;
}
void OAIArtistInfo::setMetadataCountryCode(const QString &metadata_country_code) {
    m_metadata_country_code = metadata_country_code;
    m_metadata_country_code_isSet = true;
}

bool OAIArtistInfo::is_metadata_country_code_Set() const{
    return m_metadata_country_code_isSet;
}

bool OAIArtistInfo::is_metadata_country_code_Valid() const{
    return m_metadata_country_code_isValid;
}

QString OAIArtistInfo::getMetadataLanguage() const {
    return m_metadata_language;
}
void OAIArtistInfo::setMetadataLanguage(const QString &metadata_language) {
    m_metadata_language = metadata_language;
    m_metadata_language_isSet = true;
}

bool OAIArtistInfo::is_metadata_language_Set() const{
    return m_metadata_language_isSet;
}

bool OAIArtistInfo::is_metadata_language_Valid() const{
    return m_metadata_language_isValid;
}

QString OAIArtistInfo::getName() const {
    return m_name;
}
void OAIArtistInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIArtistInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIArtistInfo::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIArtistInfo::getParentIndexNumber() const {
    return m_parent_index_number;
}
void OAIArtistInfo::setParentIndexNumber(const qint32 &parent_index_number) {
    m_parent_index_number = parent_index_number;
    m_parent_index_number_isSet = true;
}

bool OAIArtistInfo::is_parent_index_number_Set() const{
    return m_parent_index_number_isSet;
}

bool OAIArtistInfo::is_parent_index_number_Valid() const{
    return m_parent_index_number_isValid;
}

QString OAIArtistInfo::getPath() const {
    return m_path;
}
void OAIArtistInfo::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIArtistInfo::is_path_Set() const{
    return m_path_isSet;
}

bool OAIArtistInfo::is_path_Valid() const{
    return m_path_isValid;
}

QDateTime OAIArtistInfo::getPremiereDate() const {
    return m_premiere_date;
}
void OAIArtistInfo::setPremiereDate(const QDateTime &premiere_date) {
    m_premiere_date = premiere_date;
    m_premiere_date_isSet = true;
}

bool OAIArtistInfo::is_premiere_date_Set() const{
    return m_premiere_date_isSet;
}

bool OAIArtistInfo::is_premiere_date_Valid() const{
    return m_premiere_date_isValid;
}

QMap<QString, QString> OAIArtistInfo::getProviderIds() const {
    return m_provider_ids;
}
void OAIArtistInfo::setProviderIds(const QMap<QString, QString> &provider_ids) {
    m_provider_ids = provider_ids;
    m_provider_ids_isSet = true;
}

bool OAIArtistInfo::is_provider_ids_Set() const{
    return m_provider_ids_isSet;
}

bool OAIArtistInfo::is_provider_ids_Valid() const{
    return m_provider_ids_isValid;
}

QList<OAISongInfo> OAIArtistInfo::getSongInfos() const {
    return m_song_infos;
}
void OAIArtistInfo::setSongInfos(const QList<OAISongInfo> &song_infos) {
    m_song_infos = song_infos;
    m_song_infos_isSet = true;
}

bool OAIArtistInfo::is_song_infos_Set() const{
    return m_song_infos_isSet;
}

bool OAIArtistInfo::is_song_infos_Valid() const{
    return m_song_infos_isValid;
}

qint32 OAIArtistInfo::getYear() const {
    return m_year;
}
void OAIArtistInfo::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIArtistInfo::is_year_Set() const{
    return m_year_isSet;
}

bool OAIArtistInfo::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIArtistInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_automated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_index_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premiere_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtistInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
