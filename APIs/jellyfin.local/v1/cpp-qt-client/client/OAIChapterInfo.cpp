/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChapterInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChapterInfo::OAIChapterInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChapterInfo::OAIChapterInfo() {
    this->initializeModel();
}

OAIChapterInfo::~OAIChapterInfo() {}

void OAIChapterInfo::initializeModel() {

    m_image_date_modified_isSet = false;
    m_image_date_modified_isValid = false;

    m_image_path_isSet = false;
    m_image_path_isValid = false;

    m_image_tag_isSet = false;
    m_image_tag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_position_ticks_isSet = false;
    m_start_position_ticks_isValid = false;
}

void OAIChapterInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChapterInfo::fromJsonObject(QJsonObject json) {

    m_image_date_modified_isValid = ::OpenAPI::fromJsonValue(m_image_date_modified, json[QString("ImageDateModified")]);
    m_image_date_modified_isSet = !json[QString("ImageDateModified")].isNull() && m_image_date_modified_isValid;

    m_image_path_isValid = ::OpenAPI::fromJsonValue(m_image_path, json[QString("ImagePath")]);
    m_image_path_isSet = !json[QString("ImagePath")].isNull() && m_image_path_isValid;

    m_image_tag_isValid = ::OpenAPI::fromJsonValue(m_image_tag, json[QString("ImageTag")]);
    m_image_tag_isSet = !json[QString("ImageTag")].isNull() && m_image_tag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_start_position_ticks_isValid = ::OpenAPI::fromJsonValue(m_start_position_ticks, json[QString("StartPositionTicks")]);
    m_start_position_ticks_isSet = !json[QString("StartPositionTicks")].isNull() && m_start_position_ticks_isValid;
}

QString OAIChapterInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChapterInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_image_date_modified_isSet) {
        obj.insert(QString("ImageDateModified"), ::OpenAPI::toJsonValue(m_image_date_modified));
    }
    if (m_image_path_isSet) {
        obj.insert(QString("ImagePath"), ::OpenAPI::toJsonValue(m_image_path));
    }
    if (m_image_tag_isSet) {
        obj.insert(QString("ImageTag"), ::OpenAPI::toJsonValue(m_image_tag));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_position_ticks_isSet) {
        obj.insert(QString("StartPositionTicks"), ::OpenAPI::toJsonValue(m_start_position_ticks));
    }
    return obj;
}

QDateTime OAIChapterInfo::getImageDateModified() const {
    return m_image_date_modified;
}
void OAIChapterInfo::setImageDateModified(const QDateTime &image_date_modified) {
    m_image_date_modified = image_date_modified;
    m_image_date_modified_isSet = true;
}

bool OAIChapterInfo::is_image_date_modified_Set() const{
    return m_image_date_modified_isSet;
}

bool OAIChapterInfo::is_image_date_modified_Valid() const{
    return m_image_date_modified_isValid;
}

QString OAIChapterInfo::getImagePath() const {
    return m_image_path;
}
void OAIChapterInfo::setImagePath(const QString &image_path) {
    m_image_path = image_path;
    m_image_path_isSet = true;
}

bool OAIChapterInfo::is_image_path_Set() const{
    return m_image_path_isSet;
}

bool OAIChapterInfo::is_image_path_Valid() const{
    return m_image_path_isValid;
}

QString OAIChapterInfo::getImageTag() const {
    return m_image_tag;
}
void OAIChapterInfo::setImageTag(const QString &image_tag) {
    m_image_tag = image_tag;
    m_image_tag_isSet = true;
}

bool OAIChapterInfo::is_image_tag_Set() const{
    return m_image_tag_isSet;
}

bool OAIChapterInfo::is_image_tag_Valid() const{
    return m_image_tag_isValid;
}

QString OAIChapterInfo::getName() const {
    return m_name;
}
void OAIChapterInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChapterInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChapterInfo::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIChapterInfo::getStartPositionTicks() const {
    return m_start_position_ticks;
}
void OAIChapterInfo::setStartPositionTicks(const qint64 &start_position_ticks) {
    m_start_position_ticks = start_position_ticks;
    m_start_position_ticks_isSet = true;
}

bool OAIChapterInfo::is_start_position_ticks_Set() const{
    return m_start_position_ticks_isSet;
}

bool OAIChapterInfo::is_start_position_ticks_Valid() const{
    return m_start_position_ticks_isValid;
}

bool OAIChapterInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_position_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChapterInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
