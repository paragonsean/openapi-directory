/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserConfiguration.h
 *
 * Class UserConfiguration.
 */

#ifndef OAIUserConfiguration_H
#define OAIUserConfiguration_H

#include <QJsonObject>

#include "OAISubtitlePlaybackMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUserConfiguration : public OAIObject {
public:
    OAIUserConfiguration();
    OAIUserConfiguration(QString json);
    ~OAIUserConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAudioLanguagePreference() const;
    void setAudioLanguagePreference(const QString &audio_language_preference);
    bool is_audio_language_preference_Set() const;
    bool is_audio_language_preference_Valid() const;

    bool isDisplayCollectionsView() const;
    void setDisplayCollectionsView(const bool &display_collections_view);
    bool is_display_collections_view_Set() const;
    bool is_display_collections_view_Valid() const;

    bool isDisplayMissingEpisodes() const;
    void setDisplayMissingEpisodes(const bool &display_missing_episodes);
    bool is_display_missing_episodes_Set() const;
    bool is_display_missing_episodes_Valid() const;

    bool isEnableLocalPassword() const;
    void setEnableLocalPassword(const bool &enable_local_password);
    bool is_enable_local_password_Set() const;
    bool is_enable_local_password_Valid() const;

    bool isEnableNextEpisodeAutoPlay() const;
    void setEnableNextEpisodeAutoPlay(const bool &enable_next_episode_auto_play);
    bool is_enable_next_episode_auto_play_Set() const;
    bool is_enable_next_episode_auto_play_Valid() const;

    QList<QString> getGroupedFolders() const;
    void setGroupedFolders(const QList<QString> &grouped_folders);
    bool is_grouped_folders_Set() const;
    bool is_grouped_folders_Valid() const;

    bool isHidePlayedInLatest() const;
    void setHidePlayedInLatest(const bool &hide_played_in_latest);
    bool is_hide_played_in_latest_Set() const;
    bool is_hide_played_in_latest_Valid() const;

    QList<QString> getLatestItemsExcludes() const;
    void setLatestItemsExcludes(const QList<QString> &latest_items_excludes);
    bool is_latest_items_excludes_Set() const;
    bool is_latest_items_excludes_Valid() const;

    QList<QString> getMyMediaExcludes() const;
    void setMyMediaExcludes(const QList<QString> &my_media_excludes);
    bool is_my_media_excludes_Set() const;
    bool is_my_media_excludes_Valid() const;

    QList<QString> getOrderedViews() const;
    void setOrderedViews(const QList<QString> &ordered_views);
    bool is_ordered_views_Set() const;
    bool is_ordered_views_Valid() const;

    bool isPlayDefaultAudioTrack() const;
    void setPlayDefaultAudioTrack(const bool &play_default_audio_track);
    bool is_play_default_audio_track_Set() const;
    bool is_play_default_audio_track_Valid() const;

    bool isRememberAudioSelections() const;
    void setRememberAudioSelections(const bool &remember_audio_selections);
    bool is_remember_audio_selections_Set() const;
    bool is_remember_audio_selections_Valid() const;

    bool isRememberSubtitleSelections() const;
    void setRememberSubtitleSelections(const bool &remember_subtitle_selections);
    bool is_remember_subtitle_selections_Set() const;
    bool is_remember_subtitle_selections_Valid() const;

    QString getSubtitleLanguagePreference() const;
    void setSubtitleLanguagePreference(const QString &subtitle_language_preference);
    bool is_subtitle_language_preference_Set() const;
    bool is_subtitle_language_preference_Valid() const;

    OAISubtitlePlaybackMode getSubtitleMode() const;
    void setSubtitleMode(const OAISubtitlePlaybackMode &subtitle_mode);
    bool is_subtitle_mode_Set() const;
    bool is_subtitle_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_audio_language_preference;
    bool m_audio_language_preference_isSet;
    bool m_audio_language_preference_isValid;

    bool m_display_collections_view;
    bool m_display_collections_view_isSet;
    bool m_display_collections_view_isValid;

    bool m_display_missing_episodes;
    bool m_display_missing_episodes_isSet;
    bool m_display_missing_episodes_isValid;

    bool m_enable_local_password;
    bool m_enable_local_password_isSet;
    bool m_enable_local_password_isValid;

    bool m_enable_next_episode_auto_play;
    bool m_enable_next_episode_auto_play_isSet;
    bool m_enable_next_episode_auto_play_isValid;

    QList<QString> m_grouped_folders;
    bool m_grouped_folders_isSet;
    bool m_grouped_folders_isValid;

    bool m_hide_played_in_latest;
    bool m_hide_played_in_latest_isSet;
    bool m_hide_played_in_latest_isValid;

    QList<QString> m_latest_items_excludes;
    bool m_latest_items_excludes_isSet;
    bool m_latest_items_excludes_isValid;

    QList<QString> m_my_media_excludes;
    bool m_my_media_excludes_isSet;
    bool m_my_media_excludes_isValid;

    QList<QString> m_ordered_views;
    bool m_ordered_views_isSet;
    bool m_ordered_views_isValid;

    bool m_play_default_audio_track;
    bool m_play_default_audio_track_isSet;
    bool m_play_default_audio_track_isValid;

    bool m_remember_audio_selections;
    bool m_remember_audio_selections_isSet;
    bool m_remember_audio_selections_isValid;

    bool m_remember_subtitle_selections;
    bool m_remember_subtitle_selections_isSet;
    bool m_remember_subtitle_selections_isValid;

    QString m_subtitle_language_preference;
    bool m_subtitle_language_preference_isSet;
    bool m_subtitle_language_preference_isValid;

    OAISubtitlePlaybackMode m_subtitle_mode;
    bool m_subtitle_mode_isSet;
    bool m_subtitle_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserConfiguration)

#endif // OAIUserConfiguration_H
