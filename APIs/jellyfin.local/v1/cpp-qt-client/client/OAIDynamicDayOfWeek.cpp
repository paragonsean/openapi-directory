/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamicDayOfWeek.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamicDayOfWeek::OAIDynamicDayOfWeek(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamicDayOfWeek::OAIDynamicDayOfWeek() {
    this->initializeModel();
}

OAIDynamicDayOfWeek::~OAIDynamicDayOfWeek() {}

void OAIDynamicDayOfWeek::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDynamicDayOfWeek::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDynamicDayOfWeek::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Sunday", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::SUNDAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Monday", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::MONDAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Tuesday", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::TUESDAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Wednesday", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::WEDNESDAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Thursday", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::THURSDAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Friday", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::FRIDAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Saturday", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::SATURDAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Everyday", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::EVERYDAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Weekday", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::WEEKDAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Weekend", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDynamicDayOfWeek::WEEKEND;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDynamicDayOfWeek::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDynamicDayOfWeek::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDynamicDayOfWeek::SUNDAY:
            val = "Sunday";
            break;
        case eOAIDynamicDayOfWeek::MONDAY:
            val = "Monday";
            break;
        case eOAIDynamicDayOfWeek::TUESDAY:
            val = "Tuesday";
            break;
        case eOAIDynamicDayOfWeek::WEDNESDAY:
            val = "Wednesday";
            break;
        case eOAIDynamicDayOfWeek::THURSDAY:
            val = "Thursday";
            break;
        case eOAIDynamicDayOfWeek::FRIDAY:
            val = "Friday";
            break;
        case eOAIDynamicDayOfWeek::SATURDAY:
            val = "Saturday";
            break;
        case eOAIDynamicDayOfWeek::EVERYDAY:
            val = "Everyday";
            break;
        case eOAIDynamicDayOfWeek::WEEKDAY:
            val = "Weekday";
            break;
        case eOAIDynamicDayOfWeek::WEEKEND:
            val = "Weekend";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDynamicDayOfWeek::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDynamicDayOfWeek::eOAIDynamicDayOfWeek OAIDynamicDayOfWeek::getValue() const {
    return m_value;
}

void OAIDynamicDayOfWeek::setValue(const OAIDynamicDayOfWeek::eOAIDynamicDayOfWeek& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDynamicDayOfWeek::isSet() const {
    
    return m_value_isSet;
}

bool OAIDynamicDayOfWeek::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
