/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationInfo::OAIAuthenticationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationInfo::OAIAuthenticationInfo() {
    this->initializeModel();
}

OAIAuthenticationInfo::~OAIAuthenticationInfo() {}

void OAIAuthenticationInfo::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_last_activity_isSet = false;
    m_date_last_activity_isValid = false;

    m_date_revoked_isSet = false;
    m_date_revoked_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIAuthenticationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationInfo::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("AccessToken")]);
    m_access_token_isSet = !json[QString("AccessToken")].isNull() && m_access_token_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("AppName")]);
    m_app_name_isSet = !json[QString("AppName")].isNull() && m_app_name_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("AppVersion")]);
    m_app_version_isSet = !json[QString("AppVersion")].isNull() && m_app_version_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_last_activity_isValid = ::OpenAPI::fromJsonValue(m_date_last_activity, json[QString("DateLastActivity")]);
    m_date_last_activity_isSet = !json[QString("DateLastActivity")].isNull() && m_date_last_activity_isValid;

    m_date_revoked_isValid = ::OpenAPI::fromJsonValue(m_date_revoked, json[QString("DateRevoked")]);
    m_date_revoked_isSet = !json[QString("DateRevoked")].isNull() && m_date_revoked_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("DeviceName")]);
    m_device_name_isSet = !json[QString("DeviceName")].isNull() && m_device_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("IsActive")]);
    m_is_active_isSet = !json[QString("IsActive")].isNull() && m_is_active_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;
}

QString OAIAuthenticationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("AccessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("AppName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("AppVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_last_activity_isSet) {
        obj.insert(QString("DateLastActivity"), ::OpenAPI::toJsonValue(m_date_last_activity));
    }
    if (m_date_revoked_isSet) {
        obj.insert(QString("DateRevoked"), ::OpenAPI::toJsonValue(m_date_revoked));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("DeviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("IsActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIAuthenticationInfo::getAccessToken() const {
    return m_access_token;
}
void OAIAuthenticationInfo::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIAuthenticationInfo::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIAuthenticationInfo::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIAuthenticationInfo::getAppName() const {
    return m_app_name;
}
void OAIAuthenticationInfo::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIAuthenticationInfo::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIAuthenticationInfo::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIAuthenticationInfo::getAppVersion() const {
    return m_app_version;
}
void OAIAuthenticationInfo::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIAuthenticationInfo::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIAuthenticationInfo::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QDateTime OAIAuthenticationInfo::getDateCreated() const {
    return m_date_created;
}
void OAIAuthenticationInfo::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAuthenticationInfo::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAuthenticationInfo::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAuthenticationInfo::getDateLastActivity() const {
    return m_date_last_activity;
}
void OAIAuthenticationInfo::setDateLastActivity(const QDateTime &date_last_activity) {
    m_date_last_activity = date_last_activity;
    m_date_last_activity_isSet = true;
}

bool OAIAuthenticationInfo::is_date_last_activity_Set() const{
    return m_date_last_activity_isSet;
}

bool OAIAuthenticationInfo::is_date_last_activity_Valid() const{
    return m_date_last_activity_isValid;
}

QDateTime OAIAuthenticationInfo::getDateRevoked() const {
    return m_date_revoked;
}
void OAIAuthenticationInfo::setDateRevoked(const QDateTime &date_revoked) {
    m_date_revoked = date_revoked;
    m_date_revoked_isSet = true;
}

bool OAIAuthenticationInfo::is_date_revoked_Set() const{
    return m_date_revoked_isSet;
}

bool OAIAuthenticationInfo::is_date_revoked_Valid() const{
    return m_date_revoked_isValid;
}

QString OAIAuthenticationInfo::getDeviceId() const {
    return m_device_id;
}
void OAIAuthenticationInfo::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIAuthenticationInfo::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIAuthenticationInfo::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIAuthenticationInfo::getDeviceName() const {
    return m_device_name;
}
void OAIAuthenticationInfo::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIAuthenticationInfo::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIAuthenticationInfo::is_device_name_Valid() const{
    return m_device_name_isValid;
}

qint64 OAIAuthenticationInfo::getId() const {
    return m_id;
}
void OAIAuthenticationInfo::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthenticationInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthenticationInfo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAuthenticationInfo::isIsActive() const {
    return m_is_active;
}
void OAIAuthenticationInfo::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIAuthenticationInfo::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIAuthenticationInfo::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIAuthenticationInfo::getUserId() const {
    return m_user_id;
}
void OAIAuthenticationInfo::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAuthenticationInfo::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAuthenticationInfo::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIAuthenticationInfo::getUserName() const {
    return m_user_name;
}
void OAIAuthenticationInfo::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIAuthenticationInfo::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIAuthenticationInfo::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIAuthenticationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_revoked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
