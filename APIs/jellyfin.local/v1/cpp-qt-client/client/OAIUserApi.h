/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthenticateUserByName.h"
#include "OAIAuthenticationResult.h"
#include "OAICreateUserByName.h"
#include "OAIForgotPasswordDto.h"
#include "OAIForgotPasswordResult.h"
#include "OAIPinRedeemResult.h"
#include "OAIProblemDetails.h"
#include "OAIQuickConnectDto.h"
#include "OAIUpdateUserEasyPassword.h"
#include "OAIUpdateUserPassword.h"
#include "OAIUserConfiguration.h"
#include "OAIUserDto.h"
#include "OAIUserPolicy.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  pw QString [required]
    * @param[in]  password QString [optional]
    */
    virtual void authenticateUser(const QString &user_id, const QString &pw, const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_authenticate_user_by_name OAIAuthenticateUserByName [required]
    */
    virtual void authenticateUserByName(const OAIAuthenticateUserByName &oai_authenticate_user_by_name);

    /**
    * @param[in]  oai_quick_connect_dto OAIQuickConnectDto [required]
    */
    virtual void authenticateWithQuickConnect(const OAIQuickConnectDto &oai_quick_connect_dto);

    /**
    * @param[in]  oai_create_user_by_name OAICreateUserByName [required]
    */
    virtual void createUserByName(const OAICreateUserByName &oai_create_user_by_name);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void deleteUser(const QString &user_id);

    /**
    * @param[in]  oai_forgot_password_dto OAIForgotPasswordDto [required]
    */
    virtual void forgotPassword(const OAIForgotPasswordDto &oai_forgot_password_dto);

    /**
    * @param[in]  body QString [optional]
    */
    virtual void forgotPasswordPin(const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());


    virtual void getCurrentUser();


    virtual void getPublicUsers();

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getUserById(const QString &user_id);

    /**
    * @param[in]  is_hidden bool [optional]
    * @param[in]  is_disabled bool [optional]
    */
    virtual void getUsers(const ::OpenAPI::OptionalParam<bool> &is_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_disabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user_dto OAIUserDto [required]
    */
    virtual void updateUser(const QString &user_id, const OAIUserDto &oai_user_dto);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user_configuration OAIUserConfiguration [required]
    */
    virtual void updateUserConfiguration(const QString &user_id, const OAIUserConfiguration &oai_user_configuration);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_update_user_easy_password OAIUpdateUserEasyPassword [required]
    */
    virtual void updateUserEasyPassword(const QString &user_id, const OAIUpdateUserEasyPassword &oai_update_user_easy_password);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_update_user_password OAIUpdateUserPassword [required]
    */
    virtual void updateUserPassword(const QString &user_id, const OAIUpdateUserPassword &oai_update_user_password);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user_policy OAIUserPolicy [required]
    */
    virtual void updateUserPolicy(const QString &user_id, const OAIUserPolicy &oai_user_policy);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authenticateUserCallback(OAIHttpRequestWorker *worker);
    void authenticateUserByNameCallback(OAIHttpRequestWorker *worker);
    void authenticateWithQuickConnectCallback(OAIHttpRequestWorker *worker);
    void createUserByNameCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void forgotPasswordCallback(OAIHttpRequestWorker *worker);
    void forgotPasswordPinCallback(OAIHttpRequestWorker *worker);
    void getCurrentUserCallback(OAIHttpRequestWorker *worker);
    void getPublicUsersCallback(OAIHttpRequestWorker *worker);
    void getUserByIdCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);
    void updateUserConfigurationCallback(OAIHttpRequestWorker *worker);
    void updateUserEasyPasswordCallback(OAIHttpRequestWorker *worker);
    void updateUserPasswordCallback(OAIHttpRequestWorker *worker);
    void updateUserPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authenticateUserSignal(OAIAuthenticationResult summary);
    void authenticateUserByNameSignal(OAIAuthenticationResult summary);
    void authenticateWithQuickConnectSignal(OAIAuthenticationResult summary);
    void createUserByNameSignal(OAIUserDto summary);
    void deleteUserSignal();
    void forgotPasswordSignal(OAIForgotPasswordResult summary);
    void forgotPasswordPinSignal(OAIPinRedeemResult summary);
    void getCurrentUserSignal(OAIUserDto summary);
    void getPublicUsersSignal(QList<OAIUserDto> summary);
    void getUserByIdSignal(OAIUserDto summary);
    void getUsersSignal(QList<OAIUserDto> summary);
    void updateUserSignal();
    void updateUserConfigurationSignal();
    void updateUserEasyPasswordSignal();
    void updateUserPasswordSignal();
    void updateUserPolicySignal();


    void authenticateUserSignalFull(OAIHttpRequestWorker *worker, OAIAuthenticationResult summary);
    void authenticateUserByNameSignalFull(OAIHttpRequestWorker *worker, OAIAuthenticationResult summary);
    void authenticateWithQuickConnectSignalFull(OAIHttpRequestWorker *worker, OAIAuthenticationResult summary);
    void createUserByNameSignalFull(OAIHttpRequestWorker *worker, OAIUserDto summary);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker);
    void forgotPasswordSignalFull(OAIHttpRequestWorker *worker, OAIForgotPasswordResult summary);
    void forgotPasswordPinSignalFull(OAIHttpRequestWorker *worker, OAIPinRedeemResult summary);
    void getCurrentUserSignalFull(OAIHttpRequestWorker *worker, OAIUserDto summary);
    void getPublicUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserDto> summary);
    void getUserByIdSignalFull(OAIHttpRequestWorker *worker, OAIUserDto summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserDto> summary);
    void updateUserSignalFull(OAIHttpRequestWorker *worker);
    void updateUserConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void updateUserEasyPasswordSignalFull(OAIHttpRequestWorker *worker);
    void updateUserPasswordSignalFull(OAIHttpRequestWorker *worker);
    void updateUserPolicySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use authenticateUserSignalError() instead")
    void authenticateUserSignalE(OAIAuthenticationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateUserSignalError(OAIAuthenticationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateUserByNameSignalError() instead")
    void authenticateUserByNameSignalE(OAIAuthenticationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateUserByNameSignalError(OAIAuthenticationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateWithQuickConnectSignalError() instead")
    void authenticateWithQuickConnectSignalE(OAIAuthenticationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateWithQuickConnectSignalError(OAIAuthenticationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserByNameSignalError() instead")
    void createUserByNameSignalE(OAIUserDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserByNameSignalError(OAIUserDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forgotPasswordSignalError() instead")
    void forgotPasswordSignalE(OAIForgotPasswordResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forgotPasswordSignalError(OAIForgotPasswordResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forgotPasswordPinSignalError() instead")
    void forgotPasswordPinSignalE(OAIPinRedeemResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forgotPasswordPinSignalError(OAIPinRedeemResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentUserSignalError() instead")
    void getCurrentUserSignalE(OAIUserDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentUserSignalError(OAIUserDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicUsersSignalError() instead")
    void getPublicUsersSignalE(QList<OAIUserDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicUsersSignalError(QList<OAIUserDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserByIdSignalError() instead")
    void getUserByIdSignalE(OAIUserDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByIdSignalError(OAIUserDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(QList<OAIUserDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(QList<OAIUserDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserConfigurationSignalError() instead")
    void updateUserConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserEasyPasswordSignalError() instead")
    void updateUserEasyPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserEasyPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserPasswordSignalError() instead")
    void updateUserPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserPolicySignalError() instead")
    void updateUserPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authenticateUserSignalErrorFull() instead")
    void authenticateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateUserByNameSignalErrorFull() instead")
    void authenticateUserByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateUserByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateWithQuickConnectSignalErrorFull() instead")
    void authenticateWithQuickConnectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateWithQuickConnectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserByNameSignalErrorFull() instead")
    void createUserByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forgotPasswordSignalErrorFull() instead")
    void forgotPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forgotPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forgotPasswordPinSignalErrorFull() instead")
    void forgotPasswordPinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forgotPasswordPinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentUserSignalErrorFull() instead")
    void getCurrentUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicUsersSignalErrorFull() instead")
    void getPublicUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserByIdSignalErrorFull() instead")
    void getUserByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserConfigurationSignalErrorFull() instead")
    void updateUserConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserEasyPasswordSignalErrorFull() instead")
    void updateUserEasyPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserEasyPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserPasswordSignalErrorFull() instead")
    void updateUserPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserPolicySignalErrorFull() instead")
    void updateUserPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
