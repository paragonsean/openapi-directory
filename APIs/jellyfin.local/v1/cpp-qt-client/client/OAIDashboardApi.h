/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDashboardApi_H
#define OAI_OAIDashboardApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigurationPageInfo.h"
#include "OAIConfigurationPageType.h"
#include "OAIHttpFileElement.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDashboardApi : public QObject {
    Q_OBJECT

public:
    OAIDashboardApi(const int timeOut = 0);
    ~OAIDashboardApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  enable_in_main_menu bool [optional]
    * @param[in]  page_type OAIConfigurationPageType [optional]
    */
    virtual void getConfigurationPages(const ::OpenAPI::OptionalParam<bool> &enable_in_main_menu = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIConfigurationPageType> &page_type = ::OpenAPI::OptionalParam<OAIConfigurationPageType>());

    /**
    * @param[in]  name QString [optional]
    */
    virtual void getDashboardConfigurationPage(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getConfigurationPagesCallback(OAIHttpRequestWorker *worker);
    void getDashboardConfigurationPageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getConfigurationPagesSignal(QList<OAIConfigurationPageInfo> summary);
    void getDashboardConfigurationPageSignal(OAIHttpFileElement summary);


    void getConfigurationPagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIConfigurationPageInfo> summary);
    void getDashboardConfigurationPageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use getConfigurationPagesSignalError() instead")
    void getConfigurationPagesSignalE(QList<OAIConfigurationPageInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigurationPagesSignalError(QList<OAIConfigurationPageInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardConfigurationPageSignalError() instead")
    void getDashboardConfigurationPageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardConfigurationPageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getConfigurationPagesSignalErrorFull() instead")
    void getConfigurationPagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigurationPagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardConfigurationPageSignalErrorFull() instead")
    void getDashboardConfigurationPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardConfigurationPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
