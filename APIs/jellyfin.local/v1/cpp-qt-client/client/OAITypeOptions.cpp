/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypeOptions::OAITypeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypeOptions::OAITypeOptions() {
    this->initializeModel();
}

OAITypeOptions::~OAITypeOptions() {}

void OAITypeOptions::initializeModel() {

    m_image_fetcher_order_isSet = false;
    m_image_fetcher_order_isValid = false;

    m_image_fetchers_isSet = false;
    m_image_fetchers_isValid = false;

    m_image_options_isSet = false;
    m_image_options_isValid = false;

    m_metadata_fetcher_order_isSet = false;
    m_metadata_fetcher_order_isValid = false;

    m_metadata_fetchers_isSet = false;
    m_metadata_fetchers_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITypeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypeOptions::fromJsonObject(QJsonObject json) {

    m_image_fetcher_order_isValid = ::OpenAPI::fromJsonValue(m_image_fetcher_order, json[QString("ImageFetcherOrder")]);
    m_image_fetcher_order_isSet = !json[QString("ImageFetcherOrder")].isNull() && m_image_fetcher_order_isValid;

    m_image_fetchers_isValid = ::OpenAPI::fromJsonValue(m_image_fetchers, json[QString("ImageFetchers")]);
    m_image_fetchers_isSet = !json[QString("ImageFetchers")].isNull() && m_image_fetchers_isValid;

    m_image_options_isValid = ::OpenAPI::fromJsonValue(m_image_options, json[QString("ImageOptions")]);
    m_image_options_isSet = !json[QString("ImageOptions")].isNull() && m_image_options_isValid;

    m_metadata_fetcher_order_isValid = ::OpenAPI::fromJsonValue(m_metadata_fetcher_order, json[QString("MetadataFetcherOrder")]);
    m_metadata_fetcher_order_isSet = !json[QString("MetadataFetcherOrder")].isNull() && m_metadata_fetcher_order_isValid;

    m_metadata_fetchers_isValid = ::OpenAPI::fromJsonValue(m_metadata_fetchers, json[QString("MetadataFetchers")]);
    m_metadata_fetchers_isSet = !json[QString("MetadataFetchers")].isNull() && m_metadata_fetchers_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAITypeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_image_fetcher_order.size() > 0) {
        obj.insert(QString("ImageFetcherOrder"), ::OpenAPI::toJsonValue(m_image_fetcher_order));
    }
    if (m_image_fetchers.size() > 0) {
        obj.insert(QString("ImageFetchers"), ::OpenAPI::toJsonValue(m_image_fetchers));
    }
    if (m_image_options.size() > 0) {
        obj.insert(QString("ImageOptions"), ::OpenAPI::toJsonValue(m_image_options));
    }
    if (m_metadata_fetcher_order.size() > 0) {
        obj.insert(QString("MetadataFetcherOrder"), ::OpenAPI::toJsonValue(m_metadata_fetcher_order));
    }
    if (m_metadata_fetchers.size() > 0) {
        obj.insert(QString("MetadataFetchers"), ::OpenAPI::toJsonValue(m_metadata_fetchers));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAITypeOptions::getImageFetcherOrder() const {
    return m_image_fetcher_order;
}
void OAITypeOptions::setImageFetcherOrder(const QList<QString> &image_fetcher_order) {
    m_image_fetcher_order = image_fetcher_order;
    m_image_fetcher_order_isSet = true;
}

bool OAITypeOptions::is_image_fetcher_order_Set() const{
    return m_image_fetcher_order_isSet;
}

bool OAITypeOptions::is_image_fetcher_order_Valid() const{
    return m_image_fetcher_order_isValid;
}

QList<QString> OAITypeOptions::getImageFetchers() const {
    return m_image_fetchers;
}
void OAITypeOptions::setImageFetchers(const QList<QString> &image_fetchers) {
    m_image_fetchers = image_fetchers;
    m_image_fetchers_isSet = true;
}

bool OAITypeOptions::is_image_fetchers_Set() const{
    return m_image_fetchers_isSet;
}

bool OAITypeOptions::is_image_fetchers_Valid() const{
    return m_image_fetchers_isValid;
}

QList<OAIImageOption> OAITypeOptions::getImageOptions() const {
    return m_image_options;
}
void OAITypeOptions::setImageOptions(const QList<OAIImageOption> &image_options) {
    m_image_options = image_options;
    m_image_options_isSet = true;
}

bool OAITypeOptions::is_image_options_Set() const{
    return m_image_options_isSet;
}

bool OAITypeOptions::is_image_options_Valid() const{
    return m_image_options_isValid;
}

QList<QString> OAITypeOptions::getMetadataFetcherOrder() const {
    return m_metadata_fetcher_order;
}
void OAITypeOptions::setMetadataFetcherOrder(const QList<QString> &metadata_fetcher_order) {
    m_metadata_fetcher_order = metadata_fetcher_order;
    m_metadata_fetcher_order_isSet = true;
}

bool OAITypeOptions::is_metadata_fetcher_order_Set() const{
    return m_metadata_fetcher_order_isSet;
}

bool OAITypeOptions::is_metadata_fetcher_order_Valid() const{
    return m_metadata_fetcher_order_isValid;
}

QList<QString> OAITypeOptions::getMetadataFetchers() const {
    return m_metadata_fetchers;
}
void OAITypeOptions::setMetadataFetchers(const QList<QString> &metadata_fetchers) {
    m_metadata_fetchers = metadata_fetchers;
    m_metadata_fetchers_isSet = true;
}

bool OAITypeOptions::is_metadata_fetchers_Set() const{
    return m_metadata_fetchers_isSet;
}

bool OAITypeOptions::is_metadata_fetchers_Valid() const{
    return m_metadata_fetchers_isValid;
}

QString OAITypeOptions::getType() const {
    return m_type;
}
void OAITypeOptions::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITypeOptions::is_type_Set() const{
    return m_type_isSet;
}

bool OAITypeOptions::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITypeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_fetcher_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_fetchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_fetcher_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_fetchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
