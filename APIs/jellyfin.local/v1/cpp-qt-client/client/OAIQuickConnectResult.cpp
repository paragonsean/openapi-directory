/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuickConnectResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuickConnectResult::OAIQuickConnectResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuickConnectResult::OAIQuickConnectResult() {
    this->initializeModel();
}

OAIQuickConnectResult::~OAIQuickConnectResult() {}

void OAIQuickConnectResult::initializeModel() {

    m_authenticated_isSet = false;
    m_authenticated_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_date_added_isSet = false;
    m_date_added_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIQuickConnectResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuickConnectResult::fromJsonObject(QJsonObject json) {

    m_authenticated_isValid = ::OpenAPI::fromJsonValue(m_authenticated, json[QString("Authenticated")]);
    m_authenticated_isSet = !json[QString("Authenticated")].isNull() && m_authenticated_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("Authentication")]);
    m_authentication_isSet = !json[QString("Authentication")].isNull() && m_authentication_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_date_added_isValid = ::OpenAPI::fromJsonValue(m_date_added, json[QString("DateAdded")]);
    m_date_added_isSet = !json[QString("DateAdded")].isNull() && m_date_added_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("Secret")]);
    m_secret_isSet = !json[QString("Secret")].isNull() && m_secret_isValid;
}

QString OAIQuickConnectResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuickConnectResult::asJsonObject() const {
    QJsonObject obj;
    if (m_authenticated_isSet) {
        obj.insert(QString("Authenticated"), ::OpenAPI::toJsonValue(m_authenticated));
    }
    if (m_authentication_isSet) {
        obj.insert(QString("Authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_date_added_isSet) {
        obj.insert(QString("DateAdded"), ::OpenAPI::toJsonValue(m_date_added));
    }
    if (m_error_isSet) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_secret_isSet) {
        obj.insert(QString("Secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

bool OAIQuickConnectResult::isAuthenticated() const {
    return m_authenticated;
}
void OAIQuickConnectResult::setAuthenticated(const bool &authenticated) {
    m_authenticated = authenticated;
    m_authenticated_isSet = true;
}

bool OAIQuickConnectResult::is_authenticated_Set() const{
    return m_authenticated_isSet;
}

bool OAIQuickConnectResult::is_authenticated_Valid() const{
    return m_authenticated_isValid;
}

QString OAIQuickConnectResult::getAuthentication() const {
    return m_authentication;
}
void OAIQuickConnectResult::setAuthentication(const QString &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIQuickConnectResult::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIQuickConnectResult::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAIQuickConnectResult::getCode() const {
    return m_code;
}
void OAIQuickConnectResult::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIQuickConnectResult::is_code_Set() const{
    return m_code_isSet;
}

bool OAIQuickConnectResult::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIQuickConnectResult::getDateAdded() const {
    return m_date_added;
}
void OAIQuickConnectResult::setDateAdded(const QDateTime &date_added) {
    m_date_added = date_added;
    m_date_added_isSet = true;
}

bool OAIQuickConnectResult::is_date_added_Set() const{
    return m_date_added_isSet;
}

bool OAIQuickConnectResult::is_date_added_Valid() const{
    return m_date_added_isValid;
}

QString OAIQuickConnectResult::getError() const {
    return m_error;
}
void OAIQuickConnectResult::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIQuickConnectResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAIQuickConnectResult::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIQuickConnectResult::getSecret() const {
    return m_secret;
}
void OAIQuickConnectResult::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIQuickConnectResult::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIQuickConnectResult::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIQuickConnectResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuickConnectResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
