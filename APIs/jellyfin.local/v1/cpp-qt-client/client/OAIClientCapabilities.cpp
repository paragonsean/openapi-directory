/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientCapabilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientCapabilities::OAIClientCapabilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientCapabilities::OAIClientCapabilities() {
    this->initializeModel();
}

OAIClientCapabilities::~OAIClientCapabilities() {}

void OAIClientCapabilities::initializeModel() {

    m_app_store_url_isSet = false;
    m_app_store_url_isValid = false;

    m_device_profile_isSet = false;
    m_device_profile_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_message_callback_url_isSet = false;
    m_message_callback_url_isValid = false;

    m_playable_media_types_isSet = false;
    m_playable_media_types_isValid = false;

    m_supported_commands_isSet = false;
    m_supported_commands_isValid = false;

    m_supports_content_uploading_isSet = false;
    m_supports_content_uploading_isValid = false;

    m_supports_media_control_isSet = false;
    m_supports_media_control_isValid = false;

    m_supports_persistent_identifier_isSet = false;
    m_supports_persistent_identifier_isValid = false;

    m_supports_sync_isSet = false;
    m_supports_sync_isValid = false;
}

void OAIClientCapabilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientCapabilities::fromJsonObject(QJsonObject json) {

    m_app_store_url_isValid = ::OpenAPI::fromJsonValue(m_app_store_url, json[QString("AppStoreUrl")]);
    m_app_store_url_isSet = !json[QString("AppStoreUrl")].isNull() && m_app_store_url_isValid;

    m_device_profile_isValid = ::OpenAPI::fromJsonValue(m_device_profile, json[QString("DeviceProfile")]);
    m_device_profile_isSet = !json[QString("DeviceProfile")].isNull() && m_device_profile_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("IconUrl")]);
    m_icon_url_isSet = !json[QString("IconUrl")].isNull() && m_icon_url_isValid;

    m_message_callback_url_isValid = ::OpenAPI::fromJsonValue(m_message_callback_url, json[QString("MessageCallbackUrl")]);
    m_message_callback_url_isSet = !json[QString("MessageCallbackUrl")].isNull() && m_message_callback_url_isValid;

    m_playable_media_types_isValid = ::OpenAPI::fromJsonValue(m_playable_media_types, json[QString("PlayableMediaTypes")]);
    m_playable_media_types_isSet = !json[QString("PlayableMediaTypes")].isNull() && m_playable_media_types_isValid;

    m_supported_commands_isValid = ::OpenAPI::fromJsonValue(m_supported_commands, json[QString("SupportedCommands")]);
    m_supported_commands_isSet = !json[QString("SupportedCommands")].isNull() && m_supported_commands_isValid;

    m_supports_content_uploading_isValid = ::OpenAPI::fromJsonValue(m_supports_content_uploading, json[QString("SupportsContentUploading")]);
    m_supports_content_uploading_isSet = !json[QString("SupportsContentUploading")].isNull() && m_supports_content_uploading_isValid;

    m_supports_media_control_isValid = ::OpenAPI::fromJsonValue(m_supports_media_control, json[QString("SupportsMediaControl")]);
    m_supports_media_control_isSet = !json[QString("SupportsMediaControl")].isNull() && m_supports_media_control_isValid;

    m_supports_persistent_identifier_isValid = ::OpenAPI::fromJsonValue(m_supports_persistent_identifier, json[QString("SupportsPersistentIdentifier")]);
    m_supports_persistent_identifier_isSet = !json[QString("SupportsPersistentIdentifier")].isNull() && m_supports_persistent_identifier_isValid;

    m_supports_sync_isValid = ::OpenAPI::fromJsonValue(m_supports_sync, json[QString("SupportsSync")]);
    m_supports_sync_isSet = !json[QString("SupportsSync")].isNull() && m_supports_sync_isValid;
}

QString OAIClientCapabilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientCapabilities::asJsonObject() const {
    QJsonObject obj;
    if (m_app_store_url_isSet) {
        obj.insert(QString("AppStoreUrl"), ::OpenAPI::toJsonValue(m_app_store_url));
    }
    if (m_device_profile.isSet()) {
        obj.insert(QString("DeviceProfile"), ::OpenAPI::toJsonValue(m_device_profile));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("IconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_message_callback_url_isSet) {
        obj.insert(QString("MessageCallbackUrl"), ::OpenAPI::toJsonValue(m_message_callback_url));
    }
    if (m_playable_media_types.size() > 0) {
        obj.insert(QString("PlayableMediaTypes"), ::OpenAPI::toJsonValue(m_playable_media_types));
    }
    if (m_supported_commands.size() > 0) {
        obj.insert(QString("SupportedCommands"), ::OpenAPI::toJsonValue(m_supported_commands));
    }
    if (m_supports_content_uploading_isSet) {
        obj.insert(QString("SupportsContentUploading"), ::OpenAPI::toJsonValue(m_supports_content_uploading));
    }
    if (m_supports_media_control_isSet) {
        obj.insert(QString("SupportsMediaControl"), ::OpenAPI::toJsonValue(m_supports_media_control));
    }
    if (m_supports_persistent_identifier_isSet) {
        obj.insert(QString("SupportsPersistentIdentifier"), ::OpenAPI::toJsonValue(m_supports_persistent_identifier));
    }
    if (m_supports_sync_isSet) {
        obj.insert(QString("SupportsSync"), ::OpenAPI::toJsonValue(m_supports_sync));
    }
    return obj;
}

QString OAIClientCapabilities::getAppStoreUrl() const {
    return m_app_store_url;
}
void OAIClientCapabilities::setAppStoreUrl(const QString &app_store_url) {
    m_app_store_url = app_store_url;
    m_app_store_url_isSet = true;
}

bool OAIClientCapabilities::is_app_store_url_Set() const{
    return m_app_store_url_isSet;
}

bool OAIClientCapabilities::is_app_store_url_Valid() const{
    return m_app_store_url_isValid;
}

OAIDeviceProfile OAIClientCapabilities::getDeviceProfile() const {
    return m_device_profile;
}
void OAIClientCapabilities::setDeviceProfile(const OAIDeviceProfile &device_profile) {
    m_device_profile = device_profile;
    m_device_profile_isSet = true;
}

bool OAIClientCapabilities::is_device_profile_Set() const{
    return m_device_profile_isSet;
}

bool OAIClientCapabilities::is_device_profile_Valid() const{
    return m_device_profile_isValid;
}

QString OAIClientCapabilities::getIconUrl() const {
    return m_icon_url;
}
void OAIClientCapabilities::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIClientCapabilities::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIClientCapabilities::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIClientCapabilities::getMessageCallbackUrl() const {
    return m_message_callback_url;
}
void OAIClientCapabilities::setMessageCallbackUrl(const QString &message_callback_url) {
    m_message_callback_url = message_callback_url;
    m_message_callback_url_isSet = true;
}

bool OAIClientCapabilities::is_message_callback_url_Set() const{
    return m_message_callback_url_isSet;
}

bool OAIClientCapabilities::is_message_callback_url_Valid() const{
    return m_message_callback_url_isValid;
}

QList<QString> OAIClientCapabilities::getPlayableMediaTypes() const {
    return m_playable_media_types;
}
void OAIClientCapabilities::setPlayableMediaTypes(const QList<QString> &playable_media_types) {
    m_playable_media_types = playable_media_types;
    m_playable_media_types_isSet = true;
}

bool OAIClientCapabilities::is_playable_media_types_Set() const{
    return m_playable_media_types_isSet;
}

bool OAIClientCapabilities::is_playable_media_types_Valid() const{
    return m_playable_media_types_isValid;
}

QList<OAIGeneralCommandType> OAIClientCapabilities::getSupportedCommands() const {
    return m_supported_commands;
}
void OAIClientCapabilities::setSupportedCommands(const QList<OAIGeneralCommandType> &supported_commands) {
    m_supported_commands = supported_commands;
    m_supported_commands_isSet = true;
}

bool OAIClientCapabilities::is_supported_commands_Set() const{
    return m_supported_commands_isSet;
}

bool OAIClientCapabilities::is_supported_commands_Valid() const{
    return m_supported_commands_isValid;
}

bool OAIClientCapabilities::isSupportsContentUploading() const {
    return m_supports_content_uploading;
}
void OAIClientCapabilities::setSupportsContentUploading(const bool &supports_content_uploading) {
    m_supports_content_uploading = supports_content_uploading;
    m_supports_content_uploading_isSet = true;
}

bool OAIClientCapabilities::is_supports_content_uploading_Set() const{
    return m_supports_content_uploading_isSet;
}

bool OAIClientCapabilities::is_supports_content_uploading_Valid() const{
    return m_supports_content_uploading_isValid;
}

bool OAIClientCapabilities::isSupportsMediaControl() const {
    return m_supports_media_control;
}
void OAIClientCapabilities::setSupportsMediaControl(const bool &supports_media_control) {
    m_supports_media_control = supports_media_control;
    m_supports_media_control_isSet = true;
}

bool OAIClientCapabilities::is_supports_media_control_Set() const{
    return m_supports_media_control_isSet;
}

bool OAIClientCapabilities::is_supports_media_control_Valid() const{
    return m_supports_media_control_isValid;
}

bool OAIClientCapabilities::isSupportsPersistentIdentifier() const {
    return m_supports_persistent_identifier;
}
void OAIClientCapabilities::setSupportsPersistentIdentifier(const bool &supports_persistent_identifier) {
    m_supports_persistent_identifier = supports_persistent_identifier;
    m_supports_persistent_identifier_isSet = true;
}

bool OAIClientCapabilities::is_supports_persistent_identifier_Set() const{
    return m_supports_persistent_identifier_isSet;
}

bool OAIClientCapabilities::is_supports_persistent_identifier_Valid() const{
    return m_supports_persistent_identifier_isValid;
}

bool OAIClientCapabilities::isSupportsSync() const {
    return m_supports_sync;
}
void OAIClientCapabilities::setSupportsSync(const bool &supports_sync) {
    m_supports_sync = supports_sync;
    m_supports_sync_isSet = true;
}

bool OAIClientCapabilities::is_supports_sync_Set() const{
    return m_supports_sync_isSet;
}

bool OAIClientCapabilities::is_supports_sync_Valid() const{
    return m_supports_sync_isValid;
}

bool OAIClientCapabilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_store_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playable_media_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_content_uploading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_media_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_persistent_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_sync_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientCapabilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
