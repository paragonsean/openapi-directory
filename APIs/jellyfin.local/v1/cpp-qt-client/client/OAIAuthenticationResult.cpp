/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationResult::OAIAuthenticationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationResult::OAIAuthenticationResult() {
    this->initializeModel();
}

OAIAuthenticationResult::~OAIAuthenticationResult() {}

void OAIAuthenticationResult::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_session_info_isSet = false;
    m_session_info_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAuthenticationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationResult::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("AccessToken")]);
    m_access_token_isSet = !json[QString("AccessToken")].isNull() && m_access_token_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_session_info_isValid = ::OpenAPI::fromJsonValue(m_session_info, json[QString("SessionInfo")]);
    m_session_info_isSet = !json[QString("SessionInfo")].isNull() && m_session_info_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;
}

QString OAIAuthenticationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("AccessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_session_info.isSet()) {
        obj.insert(QString("SessionInfo"), ::OpenAPI::toJsonValue(m_session_info));
    }
    if (m_user.isSet()) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIAuthenticationResult::getAccessToken() const {
    return m_access_token;
}
void OAIAuthenticationResult::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIAuthenticationResult::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIAuthenticationResult::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIAuthenticationResult::getServerId() const {
    return m_server_id;
}
void OAIAuthenticationResult::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIAuthenticationResult::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIAuthenticationResult::is_server_id_Valid() const{
    return m_server_id_isValid;
}

OAISessionInfo OAIAuthenticationResult::getSessionInfo() const {
    return m_session_info;
}
void OAIAuthenticationResult::setSessionInfo(const OAISessionInfo &session_info) {
    m_session_info = session_info;
    m_session_info_isSet = true;
}

bool OAIAuthenticationResult::is_session_info_Set() const{
    return m_session_info_isSet;
}

bool OAIAuthenticationResult::is_session_info_Valid() const{
    return m_session_info_isValid;
}

OAIUserDto OAIAuthenticationResult::getUser() const {
    return m_user;
}
void OAIAuthenticationResult::setUser(const OAIUserDto &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAuthenticationResult::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAuthenticationResult::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAuthenticationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
