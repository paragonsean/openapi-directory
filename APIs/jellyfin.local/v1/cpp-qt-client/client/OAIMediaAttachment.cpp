/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaAttachment::OAIMediaAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaAttachment::OAIMediaAttachment() {
    this->initializeModel();
}

OAIMediaAttachment::~OAIMediaAttachment() {}

void OAIMediaAttachment::initializeModel() {

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_codec_tag_isSet = false;
    m_codec_tag_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_delivery_url_isSet = false;
    m_delivery_url_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;
}

void OAIMediaAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaAttachment::fromJsonObject(QJsonObject json) {

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("Codec")]);
    m_codec_isSet = !json[QString("Codec")].isNull() && m_codec_isValid;

    m_codec_tag_isValid = ::OpenAPI::fromJsonValue(m_codec_tag, json[QString("CodecTag")]);
    m_codec_tag_isSet = !json[QString("CodecTag")].isNull() && m_codec_tag_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_delivery_url_isValid = ::OpenAPI::fromJsonValue(m_delivery_url, json[QString("DeliveryUrl")]);
    m_delivery_url_isSet = !json[QString("DeliveryUrl")].isNull() && m_delivery_url_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("FileName")]);
    m_file_name_isSet = !json[QString("FileName")].isNull() && m_file_name_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("Index")]);
    m_index_isSet = !json[QString("Index")].isNull() && m_index_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("MimeType")]);
    m_mime_type_isSet = !json[QString("MimeType")].isNull() && m_mime_type_isValid;
}

QString OAIMediaAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_codec_isSet) {
        obj.insert(QString("Codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_codec_tag_isSet) {
        obj.insert(QString("CodecTag"), ::OpenAPI::toJsonValue(m_codec_tag));
    }
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_delivery_url_isSet) {
        obj.insert(QString("DeliveryUrl"), ::OpenAPI::toJsonValue(m_delivery_url));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("FileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_index_isSet) {
        obj.insert(QString("Index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("MimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    return obj;
}

QString OAIMediaAttachment::getCodec() const {
    return m_codec;
}
void OAIMediaAttachment::setCodec(const QString &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAIMediaAttachment::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAIMediaAttachment::is_codec_Valid() const{
    return m_codec_isValid;
}

QString OAIMediaAttachment::getCodecTag() const {
    return m_codec_tag;
}
void OAIMediaAttachment::setCodecTag(const QString &codec_tag) {
    m_codec_tag = codec_tag;
    m_codec_tag_isSet = true;
}

bool OAIMediaAttachment::is_codec_tag_Set() const{
    return m_codec_tag_isSet;
}

bool OAIMediaAttachment::is_codec_tag_Valid() const{
    return m_codec_tag_isValid;
}

QString OAIMediaAttachment::getComment() const {
    return m_comment;
}
void OAIMediaAttachment::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIMediaAttachment::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIMediaAttachment::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIMediaAttachment::getDeliveryUrl() const {
    return m_delivery_url;
}
void OAIMediaAttachment::setDeliveryUrl(const QString &delivery_url) {
    m_delivery_url = delivery_url;
    m_delivery_url_isSet = true;
}

bool OAIMediaAttachment::is_delivery_url_Set() const{
    return m_delivery_url_isSet;
}

bool OAIMediaAttachment::is_delivery_url_Valid() const{
    return m_delivery_url_isValid;
}

QString OAIMediaAttachment::getFileName() const {
    return m_file_name;
}
void OAIMediaAttachment::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIMediaAttachment::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIMediaAttachment::is_file_name_Valid() const{
    return m_file_name_isValid;
}

qint32 OAIMediaAttachment::getIndex() const {
    return m_index;
}
void OAIMediaAttachment::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIMediaAttachment::is_index_Set() const{
    return m_index_isSet;
}

bool OAIMediaAttachment::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIMediaAttachment::getMimeType() const {
    return m_mime_type;
}
void OAIMediaAttachment::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIMediaAttachment::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIMediaAttachment::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIMediaAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
