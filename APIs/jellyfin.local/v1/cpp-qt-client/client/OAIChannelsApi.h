/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelsApi_H
#define OAI_OAIChannelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaseItemDtoQueryResult.h"
#include "OAIChannelFeatures.h"
#include "OAIItemFields.h"
#include "OAIItemFilter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelsApi : public QObject {
    Q_OBJECT

public:
    OAIChannelsApi(const int timeOut = 0);
    ~OAIChannelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getAllChannelFeatures();

    /**
    * @param[in]  channel_id QString [required]
    */
    virtual void getChannelFeatures(const QString &channel_id);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  folder_id QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  filters QList<OAIItemFilter> [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    */
    virtual void getChannelItems(const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &folder_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIItemFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAIItemFilter>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>());

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  supports_latest_items bool [optional]
    * @param[in]  supports_media_deletion bool [optional]
    * @param[in]  is_favorite bool [optional]
    */
    virtual void getChannels(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &supports_latest_items = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_media_deletion = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_favorite = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filters QList<OAIItemFilter> [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  channel_ids QList<QString> [optional]
    */
    virtual void getLatestChannelItems(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAIItemFilter>>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<QList<QString>> &channel_ids = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllChannelFeaturesCallback(OAIHttpRequestWorker *worker);
    void getChannelFeaturesCallback(OAIHttpRequestWorker *worker);
    void getChannelItemsCallback(OAIHttpRequestWorker *worker);
    void getChannelsCallback(OAIHttpRequestWorker *worker);
    void getLatestChannelItemsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllChannelFeaturesSignal(QList<OAIChannelFeatures> summary);
    void getChannelFeaturesSignal(OAIChannelFeatures summary);
    void getChannelItemsSignal(OAIBaseItemDtoQueryResult summary);
    void getChannelsSignal(OAIBaseItemDtoQueryResult summary);
    void getLatestChannelItemsSignal(OAIBaseItemDtoQueryResult summary);


    void getAllChannelFeaturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIChannelFeatures> summary);
    void getChannelFeaturesSignalFull(OAIHttpRequestWorker *worker, OAIChannelFeatures summary);
    void getChannelItemsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getChannelsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getLatestChannelItemsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);

    Q_DECL_DEPRECATED_X("Use getAllChannelFeaturesSignalError() instead")
    void getAllChannelFeaturesSignalE(QList<OAIChannelFeatures> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllChannelFeaturesSignalError(QList<OAIChannelFeatures> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelFeaturesSignalError() instead")
    void getChannelFeaturesSignalE(OAIChannelFeatures summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelFeaturesSignalError(OAIChannelFeatures summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelItemsSignalError() instead")
    void getChannelItemsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelItemsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsSignalError() instead")
    void getChannelsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestChannelItemsSignalError() instead")
    void getLatestChannelItemsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestChannelItemsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllChannelFeaturesSignalErrorFull() instead")
    void getAllChannelFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllChannelFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelFeaturesSignalErrorFull() instead")
    void getChannelFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelItemsSignalErrorFull() instead")
    void getChannelItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsSignalErrorFull() instead")
    void getChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestChannelItemsSignalErrorFull() instead")
    void getLatestChannelItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestChannelItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
