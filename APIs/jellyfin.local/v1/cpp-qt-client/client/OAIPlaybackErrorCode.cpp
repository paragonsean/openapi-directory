/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaybackErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaybackErrorCode::OAIPlaybackErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaybackErrorCode::OAIPlaybackErrorCode() {
    this->initializeModel();
}

OAIPlaybackErrorCode::~OAIPlaybackErrorCode() {}

void OAIPlaybackErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlaybackErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlaybackErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotAllowed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaybackErrorCode::NOTALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NoCompatibleStream", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaybackErrorCode::NOCOMPATIBLESTREAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RateLimitExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaybackErrorCode::RATELIMITEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlaybackErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlaybackErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlaybackErrorCode::NOTALLOWED:
            val = "NotAllowed";
            break;
        case eOAIPlaybackErrorCode::NOCOMPATIBLESTREAM:
            val = "NoCompatibleStream";
            break;
        case eOAIPlaybackErrorCode::RATELIMITEXCEEDED:
            val = "RateLimitExceeded";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlaybackErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlaybackErrorCode::eOAIPlaybackErrorCode OAIPlaybackErrorCode::getValue() const {
    return m_value;
}

void OAIPlaybackErrorCode::setValue(const OAIPlaybackErrorCode::eOAIPlaybackErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlaybackErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlaybackErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
