/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideosApi_H
#define OAI_OAIVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaseItemDtoQueryResult.h"
#include "OAIEncodingContext.h"
#include "OAIHttpFileElement.h"
#include "OAIProblemDetails.h"
#include "OAISubtitleDeliveryMethod.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideosApi : public QObject {
    Q_OBJECT

public:
    OAIVideosApi(const int timeOut = 0);
    ~OAIVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void deleteAlternateSources(const QString &item_id);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    virtual void getAdditionalPart(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  container QString [optional]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    */
    virtual void getVideoStream(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  container QString [required]
    * @param[in]  stream QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    */
    virtual void getVideoStreamByContainer(const QString &item_id, const QString &container, const QString &stream, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  container QString [optional]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    */
    virtual void headVideoStream(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  container QString [required]
    * @param[in]  stream QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    */
    virtual void headVideoStreamByContainer(const QString &item_id, const QString &container, const QString &stream, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  ids QList<QString> [required]
    */
    virtual void mergeVersions(const QList<QString> &ids);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAlternateSourcesCallback(OAIHttpRequestWorker *worker);
    void getAdditionalPartCallback(OAIHttpRequestWorker *worker);
    void getVideoStreamCallback(OAIHttpRequestWorker *worker);
    void getVideoStreamByContainerCallback(OAIHttpRequestWorker *worker);
    void headVideoStreamCallback(OAIHttpRequestWorker *worker);
    void headVideoStreamByContainerCallback(OAIHttpRequestWorker *worker);
    void mergeVersionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAlternateSourcesSignal();
    void getAdditionalPartSignal(OAIBaseItemDtoQueryResult summary);
    void getVideoStreamSignal(OAIHttpFileElement summary);
    void getVideoStreamByContainerSignal(OAIHttpFileElement summary);
    void headVideoStreamSignal(OAIHttpFileElement summary);
    void headVideoStreamByContainerSignal(OAIHttpFileElement summary);
    void mergeVersionsSignal();


    void deleteAlternateSourcesSignalFull(OAIHttpRequestWorker *worker);
    void getAdditionalPartSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getVideoStreamSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getVideoStreamByContainerSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headVideoStreamSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headVideoStreamByContainerSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void mergeVersionsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteAlternateSourcesSignalError() instead")
    void deleteAlternateSourcesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlternateSourcesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdditionalPartSignalError() instead")
    void getAdditionalPartSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdditionalPartSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoStreamSignalError() instead")
    void getVideoStreamSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoStreamSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoStreamByContainerSignalError() instead")
    void getVideoStreamByContainerSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoStreamByContainerSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headVideoStreamSignalError() instead")
    void headVideoStreamSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headVideoStreamSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headVideoStreamByContainerSignalError() instead")
    void headVideoStreamByContainerSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headVideoStreamByContainerSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeVersionsSignalError() instead")
    void mergeVersionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mergeVersionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAlternateSourcesSignalErrorFull() instead")
    void deleteAlternateSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlternateSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdditionalPartSignalErrorFull() instead")
    void getAdditionalPartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdditionalPartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoStreamSignalErrorFull() instead")
    void getVideoStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoStreamByContainerSignalErrorFull() instead")
    void getVideoStreamByContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoStreamByContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headVideoStreamSignalErrorFull() instead")
    void headVideoStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headVideoStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headVideoStreamByContainerSignalErrorFull() instead")
    void headVideoStreamByContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headVideoStreamByContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeVersionsSignalErrorFull() instead")
    void mergeVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mergeVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
