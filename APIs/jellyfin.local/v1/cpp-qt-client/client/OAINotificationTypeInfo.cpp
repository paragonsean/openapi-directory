/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationTypeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationTypeInfo::OAINotificationTypeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationTypeInfo::OAINotificationTypeInfo() {
    this->initializeModel();
}

OAINotificationTypeInfo::~OAINotificationTypeInfo() {}

void OAINotificationTypeInfo::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_is_based_on_user_event_isSet = false;
    m_is_based_on_user_event_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINotificationTypeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationTypeInfo::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_is_based_on_user_event_isValid = ::OpenAPI::fromJsonValue(m_is_based_on_user_event, json[QString("IsBasedOnUserEvent")]);
    m_is_based_on_user_event_isSet = !json[QString("IsBasedOnUserEvent")].isNull() && m_is_based_on_user_event_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAINotificationTypeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationTypeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_is_based_on_user_event_isSet) {
        obj.insert(QString("IsBasedOnUserEvent"), ::OpenAPI::toJsonValue(m_is_based_on_user_event));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAINotificationTypeInfo::getCategory() const {
    return m_category;
}
void OAINotificationTypeInfo::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAINotificationTypeInfo::is_category_Set() const{
    return m_category_isSet;
}

bool OAINotificationTypeInfo::is_category_Valid() const{
    return m_category_isValid;
}

bool OAINotificationTypeInfo::isEnabled() const {
    return m_enabled;
}
void OAINotificationTypeInfo::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAINotificationTypeInfo::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAINotificationTypeInfo::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAINotificationTypeInfo::isIsBasedOnUserEvent() const {
    return m_is_based_on_user_event;
}
void OAINotificationTypeInfo::setIsBasedOnUserEvent(const bool &is_based_on_user_event) {
    m_is_based_on_user_event = is_based_on_user_event;
    m_is_based_on_user_event_isSet = true;
}

bool OAINotificationTypeInfo::is_is_based_on_user_event_Set() const{
    return m_is_based_on_user_event_isSet;
}

bool OAINotificationTypeInfo::is_is_based_on_user_event_Valid() const{
    return m_is_based_on_user_event_isValid;
}

QString OAINotificationTypeInfo::getName() const {
    return m_name;
}
void OAINotificationTypeInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotificationTypeInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotificationTypeInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINotificationTypeInfo::getType() const {
    return m_type;
}
void OAINotificationTypeInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINotificationTypeInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAINotificationTypeInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINotificationTypeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_based_on_user_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationTypeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
