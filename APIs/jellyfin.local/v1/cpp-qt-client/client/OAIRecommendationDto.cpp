/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationDto::OAIRecommendationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationDto::OAIRecommendationDto() {
    this->initializeModel();
}

OAIRecommendationDto::~OAIRecommendationDto() {}

void OAIRecommendationDto::initializeModel() {

    m_baseline_item_name_isSet = false;
    m_baseline_item_name_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_recommendation_type_isSet = false;
    m_recommendation_type_isValid = false;
}

void OAIRecommendationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationDto::fromJsonObject(QJsonObject json) {

    m_baseline_item_name_isValid = ::OpenAPI::fromJsonValue(m_baseline_item_name, json[QString("BaselineItemName")]);
    m_baseline_item_name_isSet = !json[QString("BaselineItemName")].isNull() && m_baseline_item_name_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("CategoryId")]);
    m_category_id_isSet = !json[QString("CategoryId")].isNull() && m_category_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_recommendation_type_isValid = ::OpenAPI::fromJsonValue(m_recommendation_type, json[QString("RecommendationType")]);
    m_recommendation_type_isSet = !json[QString("RecommendationType")].isNull() && m_recommendation_type_isValid;
}

QString OAIRecommendationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_baseline_item_name_isSet) {
        obj.insert(QString("BaselineItemName"), ::OpenAPI::toJsonValue(m_baseline_item_name));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("CategoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_recommendation_type.isSet()) {
        obj.insert(QString("RecommendationType"), ::OpenAPI::toJsonValue(m_recommendation_type));
    }
    return obj;
}

QString OAIRecommendationDto::getBaselineItemName() const {
    return m_baseline_item_name;
}
void OAIRecommendationDto::setBaselineItemName(const QString &baseline_item_name) {
    m_baseline_item_name = baseline_item_name;
    m_baseline_item_name_isSet = true;
}

bool OAIRecommendationDto::is_baseline_item_name_Set() const{
    return m_baseline_item_name_isSet;
}

bool OAIRecommendationDto::is_baseline_item_name_Valid() const{
    return m_baseline_item_name_isValid;
}

QString OAIRecommendationDto::getCategoryId() const {
    return m_category_id;
}
void OAIRecommendationDto::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIRecommendationDto::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIRecommendationDto::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QList<OAIBaseItemDto> OAIRecommendationDto::getItems() const {
    return m_items;
}
void OAIRecommendationDto::setItems(const QList<OAIBaseItemDto> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIRecommendationDto::is_items_Set() const{
    return m_items_isSet;
}

bool OAIRecommendationDto::is_items_Valid() const{
    return m_items_isValid;
}

OAIRecommendationType OAIRecommendationDto::getRecommendationType() const {
    return m_recommendation_type;
}
void OAIRecommendationDto::setRecommendationType(const OAIRecommendationType &recommendation_type) {
    m_recommendation_type = recommendation_type;
    m_recommendation_type_isSet = true;
}

bool OAIRecommendationDto::is_recommendation_type_Set() const{
    return m_recommendation_type_isSet;
}

bool OAIRecommendationDto::is_recommendation_type_Valid() const{
    return m_recommendation_type_isValid;
}

bool OAIRecommendationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_baseline_item_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
