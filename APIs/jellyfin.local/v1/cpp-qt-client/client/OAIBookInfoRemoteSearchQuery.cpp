/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBookInfoRemoteSearchQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBookInfoRemoteSearchQuery::OAIBookInfoRemoteSearchQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBookInfoRemoteSearchQuery::OAIBookInfoRemoteSearchQuery() {
    this->initializeModel();
}

OAIBookInfoRemoteSearchQuery::~OAIBookInfoRemoteSearchQuery() {}

void OAIBookInfoRemoteSearchQuery::initializeModel() {

    m_include_disabled_providers_isSet = false;
    m_include_disabled_providers_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_search_info_isSet = false;
    m_search_info_isValid = false;

    m_search_provider_name_isSet = false;
    m_search_provider_name_isValid = false;
}

void OAIBookInfoRemoteSearchQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBookInfoRemoteSearchQuery::fromJsonObject(QJsonObject json) {

    m_include_disabled_providers_isValid = ::OpenAPI::fromJsonValue(m_include_disabled_providers, json[QString("IncludeDisabledProviders")]);
    m_include_disabled_providers_isSet = !json[QString("IncludeDisabledProviders")].isNull() && m_include_disabled_providers_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemId")]);
    m_item_id_isSet = !json[QString("ItemId")].isNull() && m_item_id_isValid;

    m_search_info_isValid = ::OpenAPI::fromJsonValue(m_search_info, json[QString("SearchInfo")]);
    m_search_info_isSet = !json[QString("SearchInfo")].isNull() && m_search_info_isValid;

    m_search_provider_name_isValid = ::OpenAPI::fromJsonValue(m_search_provider_name, json[QString("SearchProviderName")]);
    m_search_provider_name_isSet = !json[QString("SearchProviderName")].isNull() && m_search_provider_name_isValid;
}

QString OAIBookInfoRemoteSearchQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBookInfoRemoteSearchQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_include_disabled_providers_isSet) {
        obj.insert(QString("IncludeDisabledProviders"), ::OpenAPI::toJsonValue(m_include_disabled_providers));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_search_info.isSet()) {
        obj.insert(QString("SearchInfo"), ::OpenAPI::toJsonValue(m_search_info));
    }
    if (m_search_provider_name_isSet) {
        obj.insert(QString("SearchProviderName"), ::OpenAPI::toJsonValue(m_search_provider_name));
    }
    return obj;
}

bool OAIBookInfoRemoteSearchQuery::isIncludeDisabledProviders() const {
    return m_include_disabled_providers;
}
void OAIBookInfoRemoteSearchQuery::setIncludeDisabledProviders(const bool &include_disabled_providers) {
    m_include_disabled_providers = include_disabled_providers;
    m_include_disabled_providers_isSet = true;
}

bool OAIBookInfoRemoteSearchQuery::is_include_disabled_providers_Set() const{
    return m_include_disabled_providers_isSet;
}

bool OAIBookInfoRemoteSearchQuery::is_include_disabled_providers_Valid() const{
    return m_include_disabled_providers_isValid;
}

QString OAIBookInfoRemoteSearchQuery::getItemId() const {
    return m_item_id;
}
void OAIBookInfoRemoteSearchQuery::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIBookInfoRemoteSearchQuery::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIBookInfoRemoteSearchQuery::is_item_id_Valid() const{
    return m_item_id_isValid;
}

OAIBookInfo OAIBookInfoRemoteSearchQuery::getSearchInfo() const {
    return m_search_info;
}
void OAIBookInfoRemoteSearchQuery::setSearchInfo(const OAIBookInfo &search_info) {
    m_search_info = search_info;
    m_search_info_isSet = true;
}

bool OAIBookInfoRemoteSearchQuery::is_search_info_Set() const{
    return m_search_info_isSet;
}

bool OAIBookInfoRemoteSearchQuery::is_search_info_Valid() const{
    return m_search_info_isValid;
}

QString OAIBookInfoRemoteSearchQuery::getSearchProviderName() const {
    return m_search_provider_name;
}
void OAIBookInfoRemoteSearchQuery::setSearchProviderName(const QString &search_provider_name) {
    m_search_provider_name = search_provider_name;
    m_search_provider_name_isSet = true;
}

bool OAIBookInfoRemoteSearchQuery::is_search_provider_name_Set() const{
    return m_search_provider_name_isSet;
}

bool OAIBookInfoRemoteSearchQuery::is_search_provider_name_Valid() const{
    return m_search_provider_name_isValid;
}

bool OAIBookInfoRemoteSearchQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_disabled_providers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBookInfoRemoteSearchQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
