/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILibraryTypeOptionsDto.h
 *
 * Library type options dto.
 */

#ifndef OAILibraryTypeOptionsDto_H
#define OAILibraryTypeOptionsDto_H

#include <QJsonObject>

#include "OAIImageOption.h"
#include "OAIImageType.h"
#include "OAILibraryOptionInfoDto.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageOption;
class OAILibraryOptionInfoDto;

class OAILibraryTypeOptionsDto : public OAIObject {
public:
    OAILibraryTypeOptionsDto();
    OAILibraryTypeOptionsDto(QString json);
    ~OAILibraryTypeOptionsDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIImageOption> getDefaultImageOptions() const;
    void setDefaultImageOptions(const QList<OAIImageOption> &default_image_options);
    bool is_default_image_options_Set() const;
    bool is_default_image_options_Valid() const;

    QList<OAILibraryOptionInfoDto> getImageFetchers() const;
    void setImageFetchers(const QList<OAILibraryOptionInfoDto> &image_fetchers);
    bool is_image_fetchers_Set() const;
    bool is_image_fetchers_Valid() const;

    QList<OAILibraryOptionInfoDto> getMetadataFetchers() const;
    void setMetadataFetchers(const QList<OAILibraryOptionInfoDto> &metadata_fetchers);
    bool is_metadata_fetchers_Set() const;
    bool is_metadata_fetchers_Valid() const;

    QList<OAIImageType> getSupportedImageTypes() const;
    void setSupportedImageTypes(const QList<OAIImageType> &supported_image_types);
    bool is_supported_image_types_Set() const;
    bool is_supported_image_types_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIImageOption> m_default_image_options;
    bool m_default_image_options_isSet;
    bool m_default_image_options_isValid;

    QList<OAILibraryOptionInfoDto> m_image_fetchers;
    bool m_image_fetchers_isSet;
    bool m_image_fetchers_isValid;

    QList<OAILibraryOptionInfoDto> m_metadata_fetchers;
    bool m_metadata_fetchers_isSet;
    bool m_metadata_fetchers_isValid;

    QList<OAIImageType> m_supported_image_types;
    bool m_supported_image_types_isSet;
    bool m_supported_image_types_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILibraryTypeOptionsDto)

#endif // OAILibraryTypeOptionsDto_H
