/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenLiveStreamDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenLiveStreamDto::OAIOpenLiveStreamDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenLiveStreamDto::OAIOpenLiveStreamDto() {
    this->initializeModel();
}

OAIOpenLiveStreamDto::~OAIOpenLiveStreamDto() {}

void OAIOpenLiveStreamDto::initializeModel() {

    m_audio_stream_index_isSet = false;
    m_audio_stream_index_isValid = false;

    m_device_profile_isSet = false;
    m_device_profile_isValid = false;

    m_direct_play_protocols_isSet = false;
    m_direct_play_protocols_isValid = false;

    m_enable_direct_play_isSet = false;
    m_enable_direct_play_isValid = false;

    m_enable_direct_stream_isSet = false;
    m_enable_direct_stream_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_max_audio_channels_isSet = false;
    m_max_audio_channels_isValid = false;

    m_max_streaming_bitrate_isSet = false;
    m_max_streaming_bitrate_isValid = false;

    m_open_token_isSet = false;
    m_open_token_isValid = false;

    m_play_session_id_isSet = false;
    m_play_session_id_isValid = false;

    m_start_time_ticks_isSet = false;
    m_start_time_ticks_isValid = false;

    m_subtitle_stream_index_isSet = false;
    m_subtitle_stream_index_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIOpenLiveStreamDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenLiveStreamDto::fromJsonObject(QJsonObject json) {

    m_audio_stream_index_isValid = ::OpenAPI::fromJsonValue(m_audio_stream_index, json[QString("AudioStreamIndex")]);
    m_audio_stream_index_isSet = !json[QString("AudioStreamIndex")].isNull() && m_audio_stream_index_isValid;

    m_device_profile_isValid = ::OpenAPI::fromJsonValue(m_device_profile, json[QString("DeviceProfile")]);
    m_device_profile_isSet = !json[QString("DeviceProfile")].isNull() && m_device_profile_isValid;

    m_direct_play_protocols_isValid = ::OpenAPI::fromJsonValue(m_direct_play_protocols, json[QString("DirectPlayProtocols")]);
    m_direct_play_protocols_isSet = !json[QString("DirectPlayProtocols")].isNull() && m_direct_play_protocols_isValid;

    m_enable_direct_play_isValid = ::OpenAPI::fromJsonValue(m_enable_direct_play, json[QString("EnableDirectPlay")]);
    m_enable_direct_play_isSet = !json[QString("EnableDirectPlay")].isNull() && m_enable_direct_play_isValid;

    m_enable_direct_stream_isValid = ::OpenAPI::fromJsonValue(m_enable_direct_stream, json[QString("EnableDirectStream")]);
    m_enable_direct_stream_isSet = !json[QString("EnableDirectStream")].isNull() && m_enable_direct_stream_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemId")]);
    m_item_id_isSet = !json[QString("ItemId")].isNull() && m_item_id_isValid;

    m_max_audio_channels_isValid = ::OpenAPI::fromJsonValue(m_max_audio_channels, json[QString("MaxAudioChannels")]);
    m_max_audio_channels_isSet = !json[QString("MaxAudioChannels")].isNull() && m_max_audio_channels_isValid;

    m_max_streaming_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_streaming_bitrate, json[QString("MaxStreamingBitrate")]);
    m_max_streaming_bitrate_isSet = !json[QString("MaxStreamingBitrate")].isNull() && m_max_streaming_bitrate_isValid;

    m_open_token_isValid = ::OpenAPI::fromJsonValue(m_open_token, json[QString("OpenToken")]);
    m_open_token_isSet = !json[QString("OpenToken")].isNull() && m_open_token_isValid;

    m_play_session_id_isValid = ::OpenAPI::fromJsonValue(m_play_session_id, json[QString("PlaySessionId")]);
    m_play_session_id_isSet = !json[QString("PlaySessionId")].isNull() && m_play_session_id_isValid;

    m_start_time_ticks_isValid = ::OpenAPI::fromJsonValue(m_start_time_ticks, json[QString("StartTimeTicks")]);
    m_start_time_ticks_isSet = !json[QString("StartTimeTicks")].isNull() && m_start_time_ticks_isValid;

    m_subtitle_stream_index_isValid = ::OpenAPI::fromJsonValue(m_subtitle_stream_index, json[QString("SubtitleStreamIndex")]);
    m_subtitle_stream_index_isSet = !json[QString("SubtitleStreamIndex")].isNull() && m_subtitle_stream_index_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIOpenLiveStreamDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenLiveStreamDto::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_stream_index_isSet) {
        obj.insert(QString("AudioStreamIndex"), ::OpenAPI::toJsonValue(m_audio_stream_index));
    }
    if (m_device_profile.isSet()) {
        obj.insert(QString("DeviceProfile"), ::OpenAPI::toJsonValue(m_device_profile));
    }
    if (m_direct_play_protocols.size() > 0) {
        obj.insert(QString("DirectPlayProtocols"), ::OpenAPI::toJsonValue(m_direct_play_protocols));
    }
    if (m_enable_direct_play_isSet) {
        obj.insert(QString("EnableDirectPlay"), ::OpenAPI::toJsonValue(m_enable_direct_play));
    }
    if (m_enable_direct_stream_isSet) {
        obj.insert(QString("EnableDirectStream"), ::OpenAPI::toJsonValue(m_enable_direct_stream));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_max_audio_channels_isSet) {
        obj.insert(QString("MaxAudioChannels"), ::OpenAPI::toJsonValue(m_max_audio_channels));
    }
    if (m_max_streaming_bitrate_isSet) {
        obj.insert(QString("MaxStreamingBitrate"), ::OpenAPI::toJsonValue(m_max_streaming_bitrate));
    }
    if (m_open_token_isSet) {
        obj.insert(QString("OpenToken"), ::OpenAPI::toJsonValue(m_open_token));
    }
    if (m_play_session_id_isSet) {
        obj.insert(QString("PlaySessionId"), ::OpenAPI::toJsonValue(m_play_session_id));
    }
    if (m_start_time_ticks_isSet) {
        obj.insert(QString("StartTimeTicks"), ::OpenAPI::toJsonValue(m_start_time_ticks));
    }
    if (m_subtitle_stream_index_isSet) {
        obj.insert(QString("SubtitleStreamIndex"), ::OpenAPI::toJsonValue(m_subtitle_stream_index));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIOpenLiveStreamDto::getAudioStreamIndex() const {
    return m_audio_stream_index;
}
void OAIOpenLiveStreamDto::setAudioStreamIndex(const qint32 &audio_stream_index) {
    m_audio_stream_index = audio_stream_index;
    m_audio_stream_index_isSet = true;
}

bool OAIOpenLiveStreamDto::is_audio_stream_index_Set() const{
    return m_audio_stream_index_isSet;
}

bool OAIOpenLiveStreamDto::is_audio_stream_index_Valid() const{
    return m_audio_stream_index_isValid;
}

OAIDeviceProfile OAIOpenLiveStreamDto::getDeviceProfile() const {
    return m_device_profile;
}
void OAIOpenLiveStreamDto::setDeviceProfile(const OAIDeviceProfile &device_profile) {
    m_device_profile = device_profile;
    m_device_profile_isSet = true;
}

bool OAIOpenLiveStreamDto::is_device_profile_Set() const{
    return m_device_profile_isSet;
}

bool OAIOpenLiveStreamDto::is_device_profile_Valid() const{
    return m_device_profile_isValid;
}

QList<OAIMediaProtocol> OAIOpenLiveStreamDto::getDirectPlayProtocols() const {
    return m_direct_play_protocols;
}
void OAIOpenLiveStreamDto::setDirectPlayProtocols(const QList<OAIMediaProtocol> &direct_play_protocols) {
    m_direct_play_protocols = direct_play_protocols;
    m_direct_play_protocols_isSet = true;
}

bool OAIOpenLiveStreamDto::is_direct_play_protocols_Set() const{
    return m_direct_play_protocols_isSet;
}

bool OAIOpenLiveStreamDto::is_direct_play_protocols_Valid() const{
    return m_direct_play_protocols_isValid;
}

bool OAIOpenLiveStreamDto::isEnableDirectPlay() const {
    return m_enable_direct_play;
}
void OAIOpenLiveStreamDto::setEnableDirectPlay(const bool &enable_direct_play) {
    m_enable_direct_play = enable_direct_play;
    m_enable_direct_play_isSet = true;
}

bool OAIOpenLiveStreamDto::is_enable_direct_play_Set() const{
    return m_enable_direct_play_isSet;
}

bool OAIOpenLiveStreamDto::is_enable_direct_play_Valid() const{
    return m_enable_direct_play_isValid;
}

bool OAIOpenLiveStreamDto::isEnableDirectStream() const {
    return m_enable_direct_stream;
}
void OAIOpenLiveStreamDto::setEnableDirectStream(const bool &enable_direct_stream) {
    m_enable_direct_stream = enable_direct_stream;
    m_enable_direct_stream_isSet = true;
}

bool OAIOpenLiveStreamDto::is_enable_direct_stream_Set() const{
    return m_enable_direct_stream_isSet;
}

bool OAIOpenLiveStreamDto::is_enable_direct_stream_Valid() const{
    return m_enable_direct_stream_isValid;
}

QString OAIOpenLiveStreamDto::getItemId() const {
    return m_item_id;
}
void OAIOpenLiveStreamDto::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIOpenLiveStreamDto::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIOpenLiveStreamDto::is_item_id_Valid() const{
    return m_item_id_isValid;
}

qint32 OAIOpenLiveStreamDto::getMaxAudioChannels() const {
    return m_max_audio_channels;
}
void OAIOpenLiveStreamDto::setMaxAudioChannels(const qint32 &max_audio_channels) {
    m_max_audio_channels = max_audio_channels;
    m_max_audio_channels_isSet = true;
}

bool OAIOpenLiveStreamDto::is_max_audio_channels_Set() const{
    return m_max_audio_channels_isSet;
}

bool OAIOpenLiveStreamDto::is_max_audio_channels_Valid() const{
    return m_max_audio_channels_isValid;
}

qint32 OAIOpenLiveStreamDto::getMaxStreamingBitrate() const {
    return m_max_streaming_bitrate;
}
void OAIOpenLiveStreamDto::setMaxStreamingBitrate(const qint32 &max_streaming_bitrate) {
    m_max_streaming_bitrate = max_streaming_bitrate;
    m_max_streaming_bitrate_isSet = true;
}

bool OAIOpenLiveStreamDto::is_max_streaming_bitrate_Set() const{
    return m_max_streaming_bitrate_isSet;
}

bool OAIOpenLiveStreamDto::is_max_streaming_bitrate_Valid() const{
    return m_max_streaming_bitrate_isValid;
}

QString OAIOpenLiveStreamDto::getOpenToken() const {
    return m_open_token;
}
void OAIOpenLiveStreamDto::setOpenToken(const QString &open_token) {
    m_open_token = open_token;
    m_open_token_isSet = true;
}

bool OAIOpenLiveStreamDto::is_open_token_Set() const{
    return m_open_token_isSet;
}

bool OAIOpenLiveStreamDto::is_open_token_Valid() const{
    return m_open_token_isValid;
}

QString OAIOpenLiveStreamDto::getPlaySessionId() const {
    return m_play_session_id;
}
void OAIOpenLiveStreamDto::setPlaySessionId(const QString &play_session_id) {
    m_play_session_id = play_session_id;
    m_play_session_id_isSet = true;
}

bool OAIOpenLiveStreamDto::is_play_session_id_Set() const{
    return m_play_session_id_isSet;
}

bool OAIOpenLiveStreamDto::is_play_session_id_Valid() const{
    return m_play_session_id_isValid;
}

qint64 OAIOpenLiveStreamDto::getStartTimeTicks() const {
    return m_start_time_ticks;
}
void OAIOpenLiveStreamDto::setStartTimeTicks(const qint64 &start_time_ticks) {
    m_start_time_ticks = start_time_ticks;
    m_start_time_ticks_isSet = true;
}

bool OAIOpenLiveStreamDto::is_start_time_ticks_Set() const{
    return m_start_time_ticks_isSet;
}

bool OAIOpenLiveStreamDto::is_start_time_ticks_Valid() const{
    return m_start_time_ticks_isValid;
}

qint32 OAIOpenLiveStreamDto::getSubtitleStreamIndex() const {
    return m_subtitle_stream_index;
}
void OAIOpenLiveStreamDto::setSubtitleStreamIndex(const qint32 &subtitle_stream_index) {
    m_subtitle_stream_index = subtitle_stream_index;
    m_subtitle_stream_index_isSet = true;
}

bool OAIOpenLiveStreamDto::is_subtitle_stream_index_Set() const{
    return m_subtitle_stream_index_isSet;
}

bool OAIOpenLiveStreamDto::is_subtitle_stream_index_Valid() const{
    return m_subtitle_stream_index_isValid;
}

QString OAIOpenLiveStreamDto::getUserId() const {
    return m_user_id;
}
void OAIOpenLiveStreamDto::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIOpenLiveStreamDto::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIOpenLiveStreamDto::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIOpenLiveStreamDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_stream_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_play_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_direct_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_direct_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_audio_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_streaming_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_stream_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenLiveStreamDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
