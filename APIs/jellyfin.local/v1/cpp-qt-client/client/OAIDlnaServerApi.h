/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDlnaServerApi_H
#define OAI_OAIDlnaServerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDlnaServerApi : public QObject {
    Q_OBJECT

public:
    OAIDlnaServerApi(const int timeOut = 0);
    ~OAIDlnaServerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getConnectionManager(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getConnectionManager2(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getConnectionManager3(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getContentDirectory(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getContentDirectory2(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getContentDirectory3(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getDescriptionXml(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getDescriptionXml2(const QString &server_id);

    /**
    * @param[in]  file_name QString [required]
    */
    virtual void getIcon(const QString &file_name);

    /**
    * @param[in]  server_id QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void getIconId(const QString &server_id, const QString &file_name);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getMediaReceiverRegistrar(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getMediaReceiverRegistrar2(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void getMediaReceiverRegistrar3(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void processConnectionManagerControlRequest(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void processContentDirectoryControlRequest(const QString &server_id);

    /**
    * @param[in]  server_id QString [required]
    */
    virtual void processMediaReceiverRegistrarControlRequest(const QString &server_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getConnectionManagerCallback(OAIHttpRequestWorker *worker);
    void getConnectionManager2Callback(OAIHttpRequestWorker *worker);
    void getConnectionManager3Callback(OAIHttpRequestWorker *worker);
    void getContentDirectoryCallback(OAIHttpRequestWorker *worker);
    void getContentDirectory2Callback(OAIHttpRequestWorker *worker);
    void getContentDirectory3Callback(OAIHttpRequestWorker *worker);
    void getDescriptionXmlCallback(OAIHttpRequestWorker *worker);
    void getDescriptionXml2Callback(OAIHttpRequestWorker *worker);
    void getIconCallback(OAIHttpRequestWorker *worker);
    void getIconIdCallback(OAIHttpRequestWorker *worker);
    void getMediaReceiverRegistrarCallback(OAIHttpRequestWorker *worker);
    void getMediaReceiverRegistrar2Callback(OAIHttpRequestWorker *worker);
    void getMediaReceiverRegistrar3Callback(OAIHttpRequestWorker *worker);
    void processConnectionManagerControlRequestCallback(OAIHttpRequestWorker *worker);
    void processContentDirectoryControlRequestCallback(OAIHttpRequestWorker *worker);
    void processMediaReceiverRegistrarControlRequestCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getConnectionManagerSignal(OAIHttpFileElement summary);
    void getConnectionManager2Signal(OAIHttpFileElement summary);
    void getConnectionManager3Signal(OAIHttpFileElement summary);
    void getContentDirectorySignal(OAIHttpFileElement summary);
    void getContentDirectory2Signal(OAIHttpFileElement summary);
    void getContentDirectory3Signal(OAIHttpFileElement summary);
    void getDescriptionXmlSignal(OAIHttpFileElement summary);
    void getDescriptionXml2Signal(OAIHttpFileElement summary);
    void getIconSignal(OAIHttpFileElement summary);
    void getIconIdSignal(OAIHttpFileElement summary);
    void getMediaReceiverRegistrarSignal(OAIHttpFileElement summary);
    void getMediaReceiverRegistrar2Signal(OAIHttpFileElement summary);
    void getMediaReceiverRegistrar3Signal(OAIHttpFileElement summary);
    void processConnectionManagerControlRequestSignal(OAIHttpFileElement summary);
    void processContentDirectoryControlRequestSignal(OAIHttpFileElement summary);
    void processMediaReceiverRegistrarControlRequestSignal(OAIHttpFileElement summary);


    void getConnectionManagerSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getConnectionManager2SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getConnectionManager3SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getContentDirectorySignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getContentDirectory2SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getContentDirectory3SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getDescriptionXmlSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getDescriptionXml2SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getIconSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getIconIdSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getMediaReceiverRegistrarSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getMediaReceiverRegistrar2SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getMediaReceiverRegistrar3SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void processConnectionManagerControlRequestSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void processContentDirectoryControlRequestSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void processMediaReceiverRegistrarControlRequestSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use getConnectionManagerSignalError() instead")
    void getConnectionManagerSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConnectionManagerSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConnectionManager2SignalError() instead")
    void getConnectionManager2SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConnectionManager2SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConnectionManager3SignalError() instead")
    void getConnectionManager3SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConnectionManager3SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentDirectorySignalError() instead")
    void getContentDirectorySignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentDirectorySignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentDirectory2SignalError() instead")
    void getContentDirectory2SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentDirectory2SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentDirectory3SignalError() instead")
    void getContentDirectory3SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentDirectory3SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDescriptionXmlSignalError() instead")
    void getDescriptionXmlSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDescriptionXmlSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDescriptionXml2SignalError() instead")
    void getDescriptionXml2SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDescriptionXml2SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIconSignalError() instead")
    void getIconSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIconSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIconIdSignalError() instead")
    void getIconIdSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIconIdSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaReceiverRegistrarSignalError() instead")
    void getMediaReceiverRegistrarSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaReceiverRegistrarSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaReceiverRegistrar2SignalError() instead")
    void getMediaReceiverRegistrar2SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaReceiverRegistrar2SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaReceiverRegistrar3SignalError() instead")
    void getMediaReceiverRegistrar3SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaReceiverRegistrar3SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processConnectionManagerControlRequestSignalError() instead")
    void processConnectionManagerControlRequestSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processConnectionManagerControlRequestSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processContentDirectoryControlRequestSignalError() instead")
    void processContentDirectoryControlRequestSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processContentDirectoryControlRequestSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processMediaReceiverRegistrarControlRequestSignalError() instead")
    void processMediaReceiverRegistrarControlRequestSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processMediaReceiverRegistrarControlRequestSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getConnectionManagerSignalErrorFull() instead")
    void getConnectionManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConnectionManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConnectionManager2SignalErrorFull() instead")
    void getConnectionManager2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConnectionManager2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConnectionManager3SignalErrorFull() instead")
    void getConnectionManager3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConnectionManager3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentDirectorySignalErrorFull() instead")
    void getContentDirectorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentDirectorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentDirectory2SignalErrorFull() instead")
    void getContentDirectory2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentDirectory2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContentDirectory3SignalErrorFull() instead")
    void getContentDirectory3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContentDirectory3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDescriptionXmlSignalErrorFull() instead")
    void getDescriptionXmlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDescriptionXmlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDescriptionXml2SignalErrorFull() instead")
    void getDescriptionXml2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDescriptionXml2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIconSignalErrorFull() instead")
    void getIconSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIconSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIconIdSignalErrorFull() instead")
    void getIconIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIconIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaReceiverRegistrarSignalErrorFull() instead")
    void getMediaReceiverRegistrarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaReceiverRegistrarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaReceiverRegistrar2SignalErrorFull() instead")
    void getMediaReceiverRegistrar2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaReceiverRegistrar2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaReceiverRegistrar3SignalErrorFull() instead")
    void getMediaReceiverRegistrar3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaReceiverRegistrar3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processConnectionManagerControlRequestSignalErrorFull() instead")
    void processConnectionManagerControlRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processConnectionManagerControlRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processContentDirectoryControlRequestSignalErrorFull() instead")
    void processContentDirectoryControlRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processContentDirectoryControlRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processMediaReceiverRegistrarControlRequestSignalErrorFull() instead")
    void processMediaReceiverRegistrarControlRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processMediaReceiverRegistrarControlRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
