/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlayerStateInfo.h
 *
 * 
 */

#ifndef OAIPlayerStateInfo_H
#define OAIPlayerStateInfo_H

#include <QJsonObject>

#include "OAIPlayMethod.h"
#include "OAIRepeatMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPlayerStateInfo : public OAIObject {
public:
    OAIPlayerStateInfo();
    OAIPlayerStateInfo(QString json);
    ~OAIPlayerStateInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAudioStreamIndex() const;
    void setAudioStreamIndex(const qint32 &audio_stream_index);
    bool is_audio_stream_index_Set() const;
    bool is_audio_stream_index_Valid() const;

    bool isCanSeek() const;
    void setCanSeek(const bool &can_seek);
    bool is_can_seek_Set() const;
    bool is_can_seek_Valid() const;

    bool isIsMuted() const;
    void setIsMuted(const bool &is_muted);
    bool is_is_muted_Set() const;
    bool is_is_muted_Valid() const;

    bool isIsPaused() const;
    void setIsPaused(const bool &is_paused);
    bool is_is_paused_Set() const;
    bool is_is_paused_Valid() const;

    QString getMediaSourceId() const;
    void setMediaSourceId(const QString &media_source_id);
    bool is_media_source_id_Set() const;
    bool is_media_source_id_Valid() const;

    OAIPlayMethod getPlayMethod() const;
    void setPlayMethod(const OAIPlayMethod &play_method);
    bool is_play_method_Set() const;
    bool is_play_method_Valid() const;

    qint64 getPositionTicks() const;
    void setPositionTicks(const qint64 &position_ticks);
    bool is_position_ticks_Set() const;
    bool is_position_ticks_Valid() const;

    OAIRepeatMode getRepeatMode() const;
    void setRepeatMode(const OAIRepeatMode &repeat_mode);
    bool is_repeat_mode_Set() const;
    bool is_repeat_mode_Valid() const;

    qint32 getSubtitleStreamIndex() const;
    void setSubtitleStreamIndex(const qint32 &subtitle_stream_index);
    bool is_subtitle_stream_index_Set() const;
    bool is_subtitle_stream_index_Valid() const;

    qint32 getVolumeLevel() const;
    void setVolumeLevel(const qint32 &volume_level);
    bool is_volume_level_Set() const;
    bool is_volume_level_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_audio_stream_index;
    bool m_audio_stream_index_isSet;
    bool m_audio_stream_index_isValid;

    bool m_can_seek;
    bool m_can_seek_isSet;
    bool m_can_seek_isValid;

    bool m_is_muted;
    bool m_is_muted_isSet;
    bool m_is_muted_isValid;

    bool m_is_paused;
    bool m_is_paused_isSet;
    bool m_is_paused_isValid;

    QString m_media_source_id;
    bool m_media_source_id_isSet;
    bool m_media_source_id_isValid;

    OAIPlayMethod m_play_method;
    bool m_play_method_isSet;
    bool m_play_method_isValid;

    qint64 m_position_ticks;
    bool m_position_ticks_isSet;
    bool m_position_ticks_isValid;

    OAIRepeatMode m_repeat_mode;
    bool m_repeat_mode_isSet;
    bool m_repeat_mode_isValid;

    qint32 m_subtitle_stream_index;
    bool m_subtitle_stream_index_isSet;
    bool m_subtitle_stream_index_isValid;

    qint32 m_volume_level;
    bool m_volume_level_isSet;
    bool m_volume_level_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlayerStateInfo)

#endif // OAIPlayerStateInfo_H
