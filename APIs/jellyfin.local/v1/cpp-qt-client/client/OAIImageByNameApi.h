/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImageByNameApi_H
#define OAI_OAIImageByNameApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIImageByNameInfo.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImageByNameApi : public QObject {
    Q_OBJECT

public:
    OAIImageByNameApi(const int timeOut = 0);
    ~OAIImageByNameApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  type QString [required]
    */
    virtual void getGeneralImage(const QString &name, const QString &type);


    virtual void getGeneralImages();

    /**
    * @param[in]  theme QString [required]
    * @param[in]  name QString [required]
    */
    virtual void getMediaInfoImage(const QString &theme, const QString &name);


    virtual void getMediaInfoImages();

    /**
    * @param[in]  theme QString [required]
    * @param[in]  name QString [required]
    */
    virtual void getRatingImage(const QString &theme, const QString &name);


    virtual void getRatingImages();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getGeneralImageCallback(OAIHttpRequestWorker *worker);
    void getGeneralImagesCallback(OAIHttpRequestWorker *worker);
    void getMediaInfoImageCallback(OAIHttpRequestWorker *worker);
    void getMediaInfoImagesCallback(OAIHttpRequestWorker *worker);
    void getRatingImageCallback(OAIHttpRequestWorker *worker);
    void getRatingImagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getGeneralImageSignal(OAIHttpFileElement summary);
    void getGeneralImagesSignal(QList<OAIImageByNameInfo> summary);
    void getMediaInfoImageSignal(OAIHttpFileElement summary);
    void getMediaInfoImagesSignal(QList<OAIImageByNameInfo> summary);
    void getRatingImageSignal(OAIHttpFileElement summary);
    void getRatingImagesSignal(QList<OAIImageByNameInfo> summary);


    void getGeneralImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getGeneralImagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIImageByNameInfo> summary);
    void getMediaInfoImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getMediaInfoImagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIImageByNameInfo> summary);
    void getRatingImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getRatingImagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIImageByNameInfo> summary);

    Q_DECL_DEPRECATED_X("Use getGeneralImageSignalError() instead")
    void getGeneralImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralImagesSignalError() instead")
    void getGeneralImagesSignalE(QList<OAIImageByNameInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralImagesSignalError(QList<OAIImageByNameInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaInfoImageSignalError() instead")
    void getMediaInfoImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaInfoImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaInfoImagesSignalError() instead")
    void getMediaInfoImagesSignalE(QList<OAIImageByNameInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaInfoImagesSignalError(QList<OAIImageByNameInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRatingImageSignalError() instead")
    void getRatingImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRatingImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRatingImagesSignalError() instead")
    void getRatingImagesSignalE(QList<OAIImageByNameInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRatingImagesSignalError(QList<OAIImageByNameInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getGeneralImageSignalErrorFull() instead")
    void getGeneralImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneralImagesSignalErrorFull() instead")
    void getGeneralImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneralImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaInfoImageSignalErrorFull() instead")
    void getMediaInfoImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaInfoImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaInfoImagesSignalErrorFull() instead")
    void getMediaInfoImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaInfoImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRatingImageSignalErrorFull() instead")
    void getRatingImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRatingImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRatingImagesSignalErrorFull() instead")
    void getRatingImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRatingImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
