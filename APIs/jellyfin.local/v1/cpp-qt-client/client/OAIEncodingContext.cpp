/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncodingContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncodingContext::OAIEncodingContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncodingContext::OAIEncodingContext() {
    this->initializeModel();
}

OAIEncodingContext::~OAIEncodingContext() {}

void OAIEncodingContext::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEncodingContext::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEncodingContext::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Streaming", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEncodingContext::STREAMING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Static", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEncodingContext::STATIC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEncodingContext::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEncodingContext::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEncodingContext::STREAMING:
            val = "Streaming";
            break;
        case eOAIEncodingContext::STATIC:
            val = "Static";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEncodingContext::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEncodingContext::eOAIEncodingContext OAIEncodingContext::getValue() const {
    return m_value;
}

void OAIEncodingContext::setValue(const OAIEncodingContext::eOAIEncodingContext& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEncodingContext::isSet() const {
    
    return m_value_isSet;
}

bool OAIEncodingContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
