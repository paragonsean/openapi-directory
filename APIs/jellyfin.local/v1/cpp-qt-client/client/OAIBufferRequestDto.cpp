/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBufferRequestDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBufferRequestDto::OAIBufferRequestDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBufferRequestDto::OAIBufferRequestDto() {
    this->initializeModel();
}

OAIBufferRequestDto::~OAIBufferRequestDto() {}

void OAIBufferRequestDto::initializeModel() {

    m_is_playing_isSet = false;
    m_is_playing_isValid = false;

    m_playlist_item_id_isSet = false;
    m_playlist_item_id_isValid = false;

    m_position_ticks_isSet = false;
    m_position_ticks_isValid = false;

    m_when_isSet = false;
    m_when_isValid = false;
}

void OAIBufferRequestDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBufferRequestDto::fromJsonObject(QJsonObject json) {

    m_is_playing_isValid = ::OpenAPI::fromJsonValue(m_is_playing, json[QString("IsPlaying")]);
    m_is_playing_isSet = !json[QString("IsPlaying")].isNull() && m_is_playing_isValid;

    m_playlist_item_id_isValid = ::OpenAPI::fromJsonValue(m_playlist_item_id, json[QString("PlaylistItemId")]);
    m_playlist_item_id_isSet = !json[QString("PlaylistItemId")].isNull() && m_playlist_item_id_isValid;

    m_position_ticks_isValid = ::OpenAPI::fromJsonValue(m_position_ticks, json[QString("PositionTicks")]);
    m_position_ticks_isSet = !json[QString("PositionTicks")].isNull() && m_position_ticks_isValid;

    m_when_isValid = ::OpenAPI::fromJsonValue(m_when, json[QString("When")]);
    m_when_isSet = !json[QString("When")].isNull() && m_when_isValid;
}

QString OAIBufferRequestDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBufferRequestDto::asJsonObject() const {
    QJsonObject obj;
    if (m_is_playing_isSet) {
        obj.insert(QString("IsPlaying"), ::OpenAPI::toJsonValue(m_is_playing));
    }
    if (m_playlist_item_id_isSet) {
        obj.insert(QString("PlaylistItemId"), ::OpenAPI::toJsonValue(m_playlist_item_id));
    }
    if (m_position_ticks_isSet) {
        obj.insert(QString("PositionTicks"), ::OpenAPI::toJsonValue(m_position_ticks));
    }
    if (m_when_isSet) {
        obj.insert(QString("When"), ::OpenAPI::toJsonValue(m_when));
    }
    return obj;
}

bool OAIBufferRequestDto::isIsPlaying() const {
    return m_is_playing;
}
void OAIBufferRequestDto::setIsPlaying(const bool &is_playing) {
    m_is_playing = is_playing;
    m_is_playing_isSet = true;
}

bool OAIBufferRequestDto::is_is_playing_Set() const{
    return m_is_playing_isSet;
}

bool OAIBufferRequestDto::is_is_playing_Valid() const{
    return m_is_playing_isValid;
}

QString OAIBufferRequestDto::getPlaylistItemId() const {
    return m_playlist_item_id;
}
void OAIBufferRequestDto::setPlaylistItemId(const QString &playlist_item_id) {
    m_playlist_item_id = playlist_item_id;
    m_playlist_item_id_isSet = true;
}

bool OAIBufferRequestDto::is_playlist_item_id_Set() const{
    return m_playlist_item_id_isSet;
}

bool OAIBufferRequestDto::is_playlist_item_id_Valid() const{
    return m_playlist_item_id_isValid;
}

qint64 OAIBufferRequestDto::getPositionTicks() const {
    return m_position_ticks;
}
void OAIBufferRequestDto::setPositionTicks(const qint64 &position_ticks) {
    m_position_ticks = position_ticks;
    m_position_ticks_isSet = true;
}

bool OAIBufferRequestDto::is_position_ticks_Set() const{
    return m_position_ticks_isSet;
}

bool OAIBufferRequestDto::is_position_ticks_Valid() const{
    return m_position_ticks_isValid;
}

QDateTime OAIBufferRequestDto::getWhen() const {
    return m_when;
}
void OAIBufferRequestDto::setWhen(const QDateTime &when) {
    m_when = when;
    m_when_isSet = true;
}

bool OAIBufferRequestDto::is_when_Set() const{
    return m_when_isSet;
}

bool OAIBufferRequestDto::is_when_Valid() const{
    return m_when_isValid;
}

bool OAIBufferRequestDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_playing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_when_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBufferRequestDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
