/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaystateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaystateRequest::OAIPlaystateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaystateRequest::OAIPlaystateRequest() {
    this->initializeModel();
}

OAIPlaystateRequest::~OAIPlaystateRequest() {}

void OAIPlaystateRequest::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_controlling_user_id_isSet = false;
    m_controlling_user_id_isValid = false;

    m_seek_position_ticks_isSet = false;
    m_seek_position_ticks_isValid = false;
}

void OAIPlaystateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaystateRequest::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("Command")]);
    m_command_isSet = !json[QString("Command")].isNull() && m_command_isValid;

    m_controlling_user_id_isValid = ::OpenAPI::fromJsonValue(m_controlling_user_id, json[QString("ControllingUserId")]);
    m_controlling_user_id_isSet = !json[QString("ControllingUserId")].isNull() && m_controlling_user_id_isValid;

    m_seek_position_ticks_isValid = ::OpenAPI::fromJsonValue(m_seek_position_ticks, json[QString("SeekPositionTicks")]);
    m_seek_position_ticks_isSet = !json[QString("SeekPositionTicks")].isNull() && m_seek_position_ticks_isValid;
}

QString OAIPlaystateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaystateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_command.isSet()) {
        obj.insert(QString("Command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_controlling_user_id_isSet) {
        obj.insert(QString("ControllingUserId"), ::OpenAPI::toJsonValue(m_controlling_user_id));
    }
    if (m_seek_position_ticks_isSet) {
        obj.insert(QString("SeekPositionTicks"), ::OpenAPI::toJsonValue(m_seek_position_ticks));
    }
    return obj;
}

OAIPlaystateCommand OAIPlaystateRequest::getCommand() const {
    return m_command;
}
void OAIPlaystateRequest::setCommand(const OAIPlaystateCommand &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIPlaystateRequest::is_command_Set() const{
    return m_command_isSet;
}

bool OAIPlaystateRequest::is_command_Valid() const{
    return m_command_isValid;
}

QString OAIPlaystateRequest::getControllingUserId() const {
    return m_controlling_user_id;
}
void OAIPlaystateRequest::setControllingUserId(const QString &controlling_user_id) {
    m_controlling_user_id = controlling_user_id;
    m_controlling_user_id_isSet = true;
}

bool OAIPlaystateRequest::is_controlling_user_id_Set() const{
    return m_controlling_user_id_isSet;
}

bool OAIPlaystateRequest::is_controlling_user_id_Valid() const{
    return m_controlling_user_id_isValid;
}

qint64 OAIPlaystateRequest::getSeekPositionTicks() const {
    return m_seek_position_ticks;
}
void OAIPlaystateRequest::setSeekPositionTicks(const qint64 &seek_position_ticks) {
    m_seek_position_ticks = seek_position_ticks;
    m_seek_position_ticks_isSet = true;
}

bool OAIPlaystateRequest::is_seek_position_ticks_Set() const{
    return m_seek_position_ticks_isSet;
}

bool OAIPlaystateRequest::is_seek_position_ticks_Valid() const{
    return m_seek_position_ticks_isValid;
}

bool OAIPlaystateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_controlling_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seek_position_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaystateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
