/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceIdentification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceIdentification::OAIDeviceIdentification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceIdentification::OAIDeviceIdentification() {
    this->initializeModel();
}

OAIDeviceIdentification::~OAIDeviceIdentification() {}

void OAIDeviceIdentification::initializeModel() {

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_manufacturer_url_isSet = false;
    m_manufacturer_url_isValid = false;

    m_model_description_isSet = false;
    m_model_description_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_model_number_isSet = false;
    m_model_number_isValid = false;

    m_model_url_isSet = false;
    m_model_url_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAIDeviceIdentification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceIdentification::fromJsonObject(QJsonObject json) {

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("FriendlyName")]);
    m_friendly_name_isSet = !json[QString("FriendlyName")].isNull() && m_friendly_name_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("Manufacturer")]);
    m_manufacturer_isSet = !json[QString("Manufacturer")].isNull() && m_manufacturer_isValid;

    m_manufacturer_url_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_url, json[QString("ManufacturerUrl")]);
    m_manufacturer_url_isSet = !json[QString("ManufacturerUrl")].isNull() && m_manufacturer_url_isValid;

    m_model_description_isValid = ::OpenAPI::fromJsonValue(m_model_description, json[QString("ModelDescription")]);
    m_model_description_isSet = !json[QString("ModelDescription")].isNull() && m_model_description_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_model_number_isValid = ::OpenAPI::fromJsonValue(m_model_number, json[QString("ModelNumber")]);
    m_model_number_isSet = !json[QString("ModelNumber")].isNull() && m_model_number_isValid;

    m_model_url_isValid = ::OpenAPI::fromJsonValue(m_model_url, json[QString("ModelUrl")]);
    m_model_url_isSet = !json[QString("ModelUrl")].isNull() && m_model_url_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("SerialNumber")]);
    m_serial_number_isSet = !json[QString("SerialNumber")].isNull() && m_serial_number_isValid;
}

QString OAIDeviceIdentification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceIdentification::asJsonObject() const {
    QJsonObject obj;
    if (m_friendly_name_isSet) {
        obj.insert(QString("FriendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("Manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_manufacturer_url_isSet) {
        obj.insert(QString("ManufacturerUrl"), ::OpenAPI::toJsonValue(m_manufacturer_url));
    }
    if (m_model_description_isSet) {
        obj.insert(QString("ModelDescription"), ::OpenAPI::toJsonValue(m_model_description));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_model_number_isSet) {
        obj.insert(QString("ModelNumber"), ::OpenAPI::toJsonValue(m_model_number));
    }
    if (m_model_url_isSet) {
        obj.insert(QString("ModelUrl"), ::OpenAPI::toJsonValue(m_model_url));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("SerialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

QString OAIDeviceIdentification::getFriendlyName() const {
    return m_friendly_name;
}
void OAIDeviceIdentification::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIDeviceIdentification::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIDeviceIdentification::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QList<OAIHttpHeaderInfo> OAIDeviceIdentification::getHeaders() const {
    return m_headers;
}
void OAIDeviceIdentification::setHeaders(const QList<OAIHttpHeaderInfo> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIDeviceIdentification::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIDeviceIdentification::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIDeviceIdentification::getManufacturer() const {
    return m_manufacturer;
}
void OAIDeviceIdentification::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIDeviceIdentification::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIDeviceIdentification::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIDeviceIdentification::getManufacturerUrl() const {
    return m_manufacturer_url;
}
void OAIDeviceIdentification::setManufacturerUrl(const QString &manufacturer_url) {
    m_manufacturer_url = manufacturer_url;
    m_manufacturer_url_isSet = true;
}

bool OAIDeviceIdentification::is_manufacturer_url_Set() const{
    return m_manufacturer_url_isSet;
}

bool OAIDeviceIdentification::is_manufacturer_url_Valid() const{
    return m_manufacturer_url_isValid;
}

QString OAIDeviceIdentification::getModelDescription() const {
    return m_model_description;
}
void OAIDeviceIdentification::setModelDescription(const QString &model_description) {
    m_model_description = model_description;
    m_model_description_isSet = true;
}

bool OAIDeviceIdentification::is_model_description_Set() const{
    return m_model_description_isSet;
}

bool OAIDeviceIdentification::is_model_description_Valid() const{
    return m_model_description_isValid;
}

QString OAIDeviceIdentification::getModelName() const {
    return m_model_name;
}
void OAIDeviceIdentification::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIDeviceIdentification::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIDeviceIdentification::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIDeviceIdentification::getModelNumber() const {
    return m_model_number;
}
void OAIDeviceIdentification::setModelNumber(const QString &model_number) {
    m_model_number = model_number;
    m_model_number_isSet = true;
}

bool OAIDeviceIdentification::is_model_number_Set() const{
    return m_model_number_isSet;
}

bool OAIDeviceIdentification::is_model_number_Valid() const{
    return m_model_number_isValid;
}

QString OAIDeviceIdentification::getModelUrl() const {
    return m_model_url;
}
void OAIDeviceIdentification::setModelUrl(const QString &model_url) {
    m_model_url = model_url;
    m_model_url_isSet = true;
}

bool OAIDeviceIdentification::is_model_url_Set() const{
    return m_model_url_isSet;
}

bool OAIDeviceIdentification::is_model_url_Valid() const{
    return m_model_url_isValid;
}

QString OAIDeviceIdentification::getSerialNumber() const {
    return m_serial_number;
}
void OAIDeviceIdentification::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDeviceIdentification::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDeviceIdentification::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAIDeviceIdentification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceIdentification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
