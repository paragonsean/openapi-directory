/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITvShowsApi_H
#define OAI_OAITvShowsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaseItemDtoQueryResult.h"
#include "OAIImageType.h"
#include "OAIItemFields.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITvShowsApi : public QObject {
    Q_OBJECT

public:
    OAITvShowsApi(const int timeOut = 0);
    ~OAITvShowsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  series_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  season qint32 [optional]
    * @param[in]  season_id QString [optional]
    * @param[in]  is_missing bool [optional]
    * @param[in]  adjacent_to QString [optional]
    * @param[in]  start_item_id QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void getEpisodes(const QString &series_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<qint32> &season = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &season_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_missing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &adjacent_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_item_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  series_id QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  enable_imges bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  enable_total_record_count bool [optional]
    */
    virtual void getNextUp(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<QString> &series_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_imges = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_total_record_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  series_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  is_special_season bool [optional]
    * @param[in]  is_missing bool [optional]
    * @param[in]  adjacent_to QString [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  enable_user_data bool [optional]
    */
    virtual void getSeasons(const QString &series_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &is_special_season = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_missing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &adjacent_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  enable_imges bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  enable_user_data bool [optional]
    */
    virtual void getUpcomingEpisodes(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_imges = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getEpisodesCallback(OAIHttpRequestWorker *worker);
    void getNextUpCallback(OAIHttpRequestWorker *worker);
    void getSeasonsCallback(OAIHttpRequestWorker *worker);
    void getUpcomingEpisodesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getEpisodesSignal(OAIBaseItemDtoQueryResult summary);
    void getNextUpSignal(OAIBaseItemDtoQueryResult summary);
    void getSeasonsSignal(OAIBaseItemDtoQueryResult summary);
    void getUpcomingEpisodesSignal(OAIBaseItemDtoQueryResult summary);


    void getEpisodesSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getNextUpSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getSeasonsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getUpcomingEpisodesSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);

    Q_DECL_DEPRECATED_X("Use getEpisodesSignalError() instead")
    void getEpisodesSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodesSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextUpSignalError() instead")
    void getNextUpSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextUpSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSeasonsSignalError() instead")
    void getSeasonsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSeasonsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpcomingEpisodesSignalError() instead")
    void getUpcomingEpisodesSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpcomingEpisodesSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getEpisodesSignalErrorFull() instead")
    void getEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextUpSignalErrorFull() instead")
    void getNextUpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextUpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSeasonsSignalErrorFull() instead")
    void getSeasonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSeasonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpcomingEpisodesSignalErrorFull() instead")
    void getUpcomingEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpcomingEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
