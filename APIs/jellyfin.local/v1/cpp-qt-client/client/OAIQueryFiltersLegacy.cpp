/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryFiltersLegacy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryFiltersLegacy::OAIQueryFiltersLegacy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryFiltersLegacy::OAIQueryFiltersLegacy() {
    this->initializeModel();
}

OAIQueryFiltersLegacy::~OAIQueryFiltersLegacy() {}

void OAIQueryFiltersLegacy::initializeModel() {

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_official_ratings_isSet = false;
    m_official_ratings_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_years_isSet = false;
    m_years_isValid = false;
}

void OAIQueryFiltersLegacy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryFiltersLegacy::fromJsonObject(QJsonObject json) {

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("Genres")]);
    m_genres_isSet = !json[QString("Genres")].isNull() && m_genres_isValid;

    m_official_ratings_isValid = ::OpenAPI::fromJsonValue(m_official_ratings, json[QString("OfficialRatings")]);
    m_official_ratings_isSet = !json[QString("OfficialRatings")].isNull() && m_official_ratings_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_years_isValid = ::OpenAPI::fromJsonValue(m_years, json[QString("Years")]);
    m_years_isSet = !json[QString("Years")].isNull() && m_years_isValid;
}

QString OAIQueryFiltersLegacy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryFiltersLegacy::asJsonObject() const {
    QJsonObject obj;
    if (m_genres.size() > 0) {
        obj.insert(QString("Genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_official_ratings.size() > 0) {
        obj.insert(QString("OfficialRatings"), ::OpenAPI::toJsonValue(m_official_ratings));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_years.size() > 0) {
        obj.insert(QString("Years"), ::OpenAPI::toJsonValue(m_years));
    }
    return obj;
}

QList<QString> OAIQueryFiltersLegacy::getGenres() const {
    return m_genres;
}
void OAIQueryFiltersLegacy::setGenres(const QList<QString> &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAIQueryFiltersLegacy::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAIQueryFiltersLegacy::is_genres_Valid() const{
    return m_genres_isValid;
}

QList<QString> OAIQueryFiltersLegacy::getOfficialRatings() const {
    return m_official_ratings;
}
void OAIQueryFiltersLegacy::setOfficialRatings(const QList<QString> &official_ratings) {
    m_official_ratings = official_ratings;
    m_official_ratings_isSet = true;
}

bool OAIQueryFiltersLegacy::is_official_ratings_Set() const{
    return m_official_ratings_isSet;
}

bool OAIQueryFiltersLegacy::is_official_ratings_Valid() const{
    return m_official_ratings_isValid;
}

QList<QString> OAIQueryFiltersLegacy::getTags() const {
    return m_tags;
}
void OAIQueryFiltersLegacy::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIQueryFiltersLegacy::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIQueryFiltersLegacy::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<qint32> OAIQueryFiltersLegacy::getYears() const {
    return m_years;
}
void OAIQueryFiltersLegacy::setYears(const QList<qint32> &years) {
    m_years = years;
    m_years_isSet = true;
}

bool OAIQueryFiltersLegacy::is_years_Set() const{
    return m_years_isSet;
}

bool OAIQueryFiltersLegacy::is_years_Valid() const{
    return m_years_isValid;
}

bool OAIQueryFiltersLegacy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_genres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_official_ratings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_years.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryFiltersLegacy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
