/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaybackStopInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaybackStopInfo::OAIPlaybackStopInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaybackStopInfo::OAIPlaybackStopInfo() {
    this->initializeModel();
}

OAIPlaybackStopInfo::~OAIPlaybackStopInfo() {}

void OAIPlaybackStopInfo::initializeModel() {

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_live_stream_id_isSet = false;
    m_live_stream_id_isValid = false;

    m_media_source_id_isSet = false;
    m_media_source_id_isValid = false;

    m_next_media_type_isSet = false;
    m_next_media_type_isValid = false;

    m_now_playing_queue_isSet = false;
    m_now_playing_queue_isValid = false;

    m_play_session_id_isSet = false;
    m_play_session_id_isValid = false;

    m_playlist_item_id_isSet = false;
    m_playlist_item_id_isValid = false;

    m_position_ticks_isSet = false;
    m_position_ticks_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;
}

void OAIPlaybackStopInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaybackStopInfo::fromJsonObject(QJsonObject json) {

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("Failed")]);
    m_failed_isSet = !json[QString("Failed")].isNull() && m_failed_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("Item")]);
    m_item_isSet = !json[QString("Item")].isNull() && m_item_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemId")]);
    m_item_id_isSet = !json[QString("ItemId")].isNull() && m_item_id_isValid;

    m_live_stream_id_isValid = ::OpenAPI::fromJsonValue(m_live_stream_id, json[QString("LiveStreamId")]);
    m_live_stream_id_isSet = !json[QString("LiveStreamId")].isNull() && m_live_stream_id_isValid;

    m_media_source_id_isValid = ::OpenAPI::fromJsonValue(m_media_source_id, json[QString("MediaSourceId")]);
    m_media_source_id_isSet = !json[QString("MediaSourceId")].isNull() && m_media_source_id_isValid;

    m_next_media_type_isValid = ::OpenAPI::fromJsonValue(m_next_media_type, json[QString("NextMediaType")]);
    m_next_media_type_isSet = !json[QString("NextMediaType")].isNull() && m_next_media_type_isValid;

    m_now_playing_queue_isValid = ::OpenAPI::fromJsonValue(m_now_playing_queue, json[QString("NowPlayingQueue")]);
    m_now_playing_queue_isSet = !json[QString("NowPlayingQueue")].isNull() && m_now_playing_queue_isValid;

    m_play_session_id_isValid = ::OpenAPI::fromJsonValue(m_play_session_id, json[QString("PlaySessionId")]);
    m_play_session_id_isSet = !json[QString("PlaySessionId")].isNull() && m_play_session_id_isValid;

    m_playlist_item_id_isValid = ::OpenAPI::fromJsonValue(m_playlist_item_id, json[QString("PlaylistItemId")]);
    m_playlist_item_id_isSet = !json[QString("PlaylistItemId")].isNull() && m_playlist_item_id_isValid;

    m_position_ticks_isValid = ::OpenAPI::fromJsonValue(m_position_ticks, json[QString("PositionTicks")]);
    m_position_ticks_isSet = !json[QString("PositionTicks")].isNull() && m_position_ticks_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("SessionId")]);
    m_session_id_isSet = !json[QString("SessionId")].isNull() && m_session_id_isValid;
}

QString OAIPlaybackStopInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaybackStopInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_isSet) {
        obj.insert(QString("Failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_item.isSet()) {
        obj.insert(QString("Item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_live_stream_id_isSet) {
        obj.insert(QString("LiveStreamId"), ::OpenAPI::toJsonValue(m_live_stream_id));
    }
    if (m_media_source_id_isSet) {
        obj.insert(QString("MediaSourceId"), ::OpenAPI::toJsonValue(m_media_source_id));
    }
    if (m_next_media_type_isSet) {
        obj.insert(QString("NextMediaType"), ::OpenAPI::toJsonValue(m_next_media_type));
    }
    if (m_now_playing_queue.size() > 0) {
        obj.insert(QString("NowPlayingQueue"), ::OpenAPI::toJsonValue(m_now_playing_queue));
    }
    if (m_play_session_id_isSet) {
        obj.insert(QString("PlaySessionId"), ::OpenAPI::toJsonValue(m_play_session_id));
    }
    if (m_playlist_item_id_isSet) {
        obj.insert(QString("PlaylistItemId"), ::OpenAPI::toJsonValue(m_playlist_item_id));
    }
    if (m_position_ticks_isSet) {
        obj.insert(QString("PositionTicks"), ::OpenAPI::toJsonValue(m_position_ticks));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("SessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    return obj;
}

bool OAIPlaybackStopInfo::isFailed() const {
    return m_failed;
}
void OAIPlaybackStopInfo::setFailed(const bool &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIPlaybackStopInfo::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIPlaybackStopInfo::is_failed_Valid() const{
    return m_failed_isValid;
}

OAIBaseItemDto OAIPlaybackStopInfo::getItem() const {
    return m_item;
}
void OAIPlaybackStopInfo::setItem(const OAIBaseItemDto &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIPlaybackStopInfo::is_item_Set() const{
    return m_item_isSet;
}

bool OAIPlaybackStopInfo::is_item_Valid() const{
    return m_item_isValid;
}

QString OAIPlaybackStopInfo::getItemId() const {
    return m_item_id;
}
void OAIPlaybackStopInfo::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIPlaybackStopInfo::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIPlaybackStopInfo::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIPlaybackStopInfo::getLiveStreamId() const {
    return m_live_stream_id;
}
void OAIPlaybackStopInfo::setLiveStreamId(const QString &live_stream_id) {
    m_live_stream_id = live_stream_id;
    m_live_stream_id_isSet = true;
}

bool OAIPlaybackStopInfo::is_live_stream_id_Set() const{
    return m_live_stream_id_isSet;
}

bool OAIPlaybackStopInfo::is_live_stream_id_Valid() const{
    return m_live_stream_id_isValid;
}

QString OAIPlaybackStopInfo::getMediaSourceId() const {
    return m_media_source_id;
}
void OAIPlaybackStopInfo::setMediaSourceId(const QString &media_source_id) {
    m_media_source_id = media_source_id;
    m_media_source_id_isSet = true;
}

bool OAIPlaybackStopInfo::is_media_source_id_Set() const{
    return m_media_source_id_isSet;
}

bool OAIPlaybackStopInfo::is_media_source_id_Valid() const{
    return m_media_source_id_isValid;
}

QString OAIPlaybackStopInfo::getNextMediaType() const {
    return m_next_media_type;
}
void OAIPlaybackStopInfo::setNextMediaType(const QString &next_media_type) {
    m_next_media_type = next_media_type;
    m_next_media_type_isSet = true;
}

bool OAIPlaybackStopInfo::is_next_media_type_Set() const{
    return m_next_media_type_isSet;
}

bool OAIPlaybackStopInfo::is_next_media_type_Valid() const{
    return m_next_media_type_isValid;
}

QList<OAIQueueItem> OAIPlaybackStopInfo::getNowPlayingQueue() const {
    return m_now_playing_queue;
}
void OAIPlaybackStopInfo::setNowPlayingQueue(const QList<OAIQueueItem> &now_playing_queue) {
    m_now_playing_queue = now_playing_queue;
    m_now_playing_queue_isSet = true;
}

bool OAIPlaybackStopInfo::is_now_playing_queue_Set() const{
    return m_now_playing_queue_isSet;
}

bool OAIPlaybackStopInfo::is_now_playing_queue_Valid() const{
    return m_now_playing_queue_isValid;
}

QString OAIPlaybackStopInfo::getPlaySessionId() const {
    return m_play_session_id;
}
void OAIPlaybackStopInfo::setPlaySessionId(const QString &play_session_id) {
    m_play_session_id = play_session_id;
    m_play_session_id_isSet = true;
}

bool OAIPlaybackStopInfo::is_play_session_id_Set() const{
    return m_play_session_id_isSet;
}

bool OAIPlaybackStopInfo::is_play_session_id_Valid() const{
    return m_play_session_id_isValid;
}

QString OAIPlaybackStopInfo::getPlaylistItemId() const {
    return m_playlist_item_id;
}
void OAIPlaybackStopInfo::setPlaylistItemId(const QString &playlist_item_id) {
    m_playlist_item_id = playlist_item_id;
    m_playlist_item_id_isSet = true;
}

bool OAIPlaybackStopInfo::is_playlist_item_id_Set() const{
    return m_playlist_item_id_isSet;
}

bool OAIPlaybackStopInfo::is_playlist_item_id_Valid() const{
    return m_playlist_item_id_isValid;
}

qint64 OAIPlaybackStopInfo::getPositionTicks() const {
    return m_position_ticks;
}
void OAIPlaybackStopInfo::setPositionTicks(const qint64 &position_ticks) {
    m_position_ticks = position_ticks;
    m_position_ticks_isSet = true;
}

bool OAIPlaybackStopInfo::is_position_ticks_Set() const{
    return m_position_ticks_isSet;
}

bool OAIPlaybackStopInfo::is_position_ticks_Valid() const{
    return m_position_ticks_isValid;
}

QString OAIPlaybackStopInfo::getSessionId() const {
    return m_session_id;
}
void OAIPlaybackStopInfo::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIPlaybackStopInfo::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIPlaybackStopInfo::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAIPlaybackStopInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_playing_queue.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaybackStopInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
