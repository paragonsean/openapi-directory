/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupInfoDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupInfoDto::OAIGroupInfoDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupInfoDto::OAIGroupInfoDto() {
    this->initializeModel();
}

OAIGroupInfoDto::~OAIGroupInfoDto() {}

void OAIGroupInfoDto::initializeModel() {

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGroupInfoDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupInfoDto::fromJsonObject(QJsonObject json) {

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("GroupId")]);
    m_group_id_isSet = !json[QString("GroupId")].isNull() && m_group_id_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("GroupName")]);
    m_group_name_isSet = !json[QString("GroupName")].isNull() && m_group_name_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("Participants")]);
    m_participants_isSet = !json[QString("Participants")].isNull() && m_participants_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIGroupInfoDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupInfoDto::asJsonObject() const {
    QJsonObject obj;
    if (m_group_id_isSet) {
        obj.insert(QString("GroupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("GroupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("Participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIGroupInfoDto::getGroupId() const {
    return m_group_id;
}
void OAIGroupInfoDto::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGroupInfoDto::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGroupInfoDto::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIGroupInfoDto::getGroupName() const {
    return m_group_name;
}
void OAIGroupInfoDto::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIGroupInfoDto::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIGroupInfoDto::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QDateTime OAIGroupInfoDto::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGroupInfoDto::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGroupInfoDto::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGroupInfoDto::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QList<QString> OAIGroupInfoDto::getParticipants() const {
    return m_participants;
}
void OAIGroupInfoDto::setParticipants(const QList<QString> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAIGroupInfoDto::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAIGroupInfoDto::is_participants_Valid() const{
    return m_participants_isValid;
}

OAIGroupStateType OAIGroupInfoDto::getState() const {
    return m_state;
}
void OAIGroupInfoDto::setState(const OAIGroupStateType &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGroupInfoDto::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGroupInfoDto::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGroupInfoDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupInfoDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
