/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubtitleProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubtitleProfile::OAISubtitleProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubtitleProfile::OAISubtitleProfile() {
    this->initializeModel();
}

OAISubtitleProfile::~OAISubtitleProfile() {}

void OAISubtitleProfile::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_didl_mode_isSet = false;
    m_didl_mode_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;
}

void OAISubtitleProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubtitleProfile::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("Container")]);
    m_container_isSet = !json[QString("Container")].isNull() && m_container_isValid;

    m_didl_mode_isValid = ::OpenAPI::fromJsonValue(m_didl_mode, json[QString("DidlMode")]);
    m_didl_mode_isSet = !json[QString("DidlMode")].isNull() && m_didl_mode_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("Method")]);
    m_method_isSet = !json[QString("Method")].isNull() && m_method_isValid;
}

QString OAISubtitleProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubtitleProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("Container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_didl_mode_isSet) {
        obj.insert(QString("DidlMode"), ::OpenAPI::toJsonValue(m_didl_mode));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_method.isSet()) {
        obj.insert(QString("Method"), ::OpenAPI::toJsonValue(m_method));
    }
    return obj;
}

QString OAISubtitleProfile::getContainer() const {
    return m_container;
}
void OAISubtitleProfile::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAISubtitleProfile::is_container_Set() const{
    return m_container_isSet;
}

bool OAISubtitleProfile::is_container_Valid() const{
    return m_container_isValid;
}

QString OAISubtitleProfile::getDidlMode() const {
    return m_didl_mode;
}
void OAISubtitleProfile::setDidlMode(const QString &didl_mode) {
    m_didl_mode = didl_mode;
    m_didl_mode_isSet = true;
}

bool OAISubtitleProfile::is_didl_mode_Set() const{
    return m_didl_mode_isSet;
}

bool OAISubtitleProfile::is_didl_mode_Valid() const{
    return m_didl_mode_isValid;
}

QString OAISubtitleProfile::getFormat() const {
    return m_format;
}
void OAISubtitleProfile::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAISubtitleProfile::is_format_Set() const{
    return m_format_isSet;
}

bool OAISubtitleProfile::is_format_Valid() const{
    return m_format_isValid;
}

QString OAISubtitleProfile::getLanguage() const {
    return m_language;
}
void OAISubtitleProfile::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISubtitleProfile::is_language_Set() const{
    return m_language_isSet;
}

bool OAISubtitleProfile::is_language_Valid() const{
    return m_language_isValid;
}

OAISubtitleDeliveryMethod OAISubtitleProfile::getMethod() const {
    return m_method;
}
void OAISubtitleProfile::setMethod(const OAISubtitleDeliveryMethod &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAISubtitleProfile::is_method_Set() const{
    return m_method_isSet;
}

bool OAISubtitleProfile::is_method_Valid() const{
    return m_method_isValid;
}

bool OAISubtitleProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_didl_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubtitleProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
