/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUserPassword.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUserPassword::OAIUpdateUserPassword(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUserPassword::OAIUpdateUserPassword() {
    this->initializeModel();
}

OAIUpdateUserPassword::~OAIUpdateUserPassword() {}

void OAIUpdateUserPassword::initializeModel() {

    m_current_password_isSet = false;
    m_current_password_isValid = false;

    m_current_pw_isSet = false;
    m_current_pw_isValid = false;

    m_new_pw_isSet = false;
    m_new_pw_isValid = false;

    m_reset_password_isSet = false;
    m_reset_password_isValid = false;
}

void OAIUpdateUserPassword::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUserPassword::fromJsonObject(QJsonObject json) {

    m_current_password_isValid = ::OpenAPI::fromJsonValue(m_current_password, json[QString("CurrentPassword")]);
    m_current_password_isSet = !json[QString("CurrentPassword")].isNull() && m_current_password_isValid;

    m_current_pw_isValid = ::OpenAPI::fromJsonValue(m_current_pw, json[QString("CurrentPw")]);
    m_current_pw_isSet = !json[QString("CurrentPw")].isNull() && m_current_pw_isValid;

    m_new_pw_isValid = ::OpenAPI::fromJsonValue(m_new_pw, json[QString("NewPw")]);
    m_new_pw_isSet = !json[QString("NewPw")].isNull() && m_new_pw_isValid;

    m_reset_password_isValid = ::OpenAPI::fromJsonValue(m_reset_password, json[QString("ResetPassword")]);
    m_reset_password_isSet = !json[QString("ResetPassword")].isNull() && m_reset_password_isValid;
}

QString OAIUpdateUserPassword::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUserPassword::asJsonObject() const {
    QJsonObject obj;
    if (m_current_password_isSet) {
        obj.insert(QString("CurrentPassword"), ::OpenAPI::toJsonValue(m_current_password));
    }
    if (m_current_pw_isSet) {
        obj.insert(QString("CurrentPw"), ::OpenAPI::toJsonValue(m_current_pw));
    }
    if (m_new_pw_isSet) {
        obj.insert(QString("NewPw"), ::OpenAPI::toJsonValue(m_new_pw));
    }
    if (m_reset_password_isSet) {
        obj.insert(QString("ResetPassword"), ::OpenAPI::toJsonValue(m_reset_password));
    }
    return obj;
}

QString OAIUpdateUserPassword::getCurrentPassword() const {
    return m_current_password;
}
void OAIUpdateUserPassword::setCurrentPassword(const QString &current_password) {
    m_current_password = current_password;
    m_current_password_isSet = true;
}

bool OAIUpdateUserPassword::is_current_password_Set() const{
    return m_current_password_isSet;
}

bool OAIUpdateUserPassword::is_current_password_Valid() const{
    return m_current_password_isValid;
}

QString OAIUpdateUserPassword::getCurrentPw() const {
    return m_current_pw;
}
void OAIUpdateUserPassword::setCurrentPw(const QString &current_pw) {
    m_current_pw = current_pw;
    m_current_pw_isSet = true;
}

bool OAIUpdateUserPassword::is_current_pw_Set() const{
    return m_current_pw_isSet;
}

bool OAIUpdateUserPassword::is_current_pw_Valid() const{
    return m_current_pw_isValid;
}

QString OAIUpdateUserPassword::getNewPw() const {
    return m_new_pw;
}
void OAIUpdateUserPassword::setNewPw(const QString &new_pw) {
    m_new_pw = new_pw;
    m_new_pw_isSet = true;
}

bool OAIUpdateUserPassword::is_new_pw_Set() const{
    return m_new_pw_isSet;
}

bool OAIUpdateUserPassword::is_new_pw_Valid() const{
    return m_new_pw_isValid;
}

bool OAIUpdateUserPassword::isResetPassword() const {
    return m_reset_password;
}
void OAIUpdateUserPassword::setResetPassword(const bool &reset_password) {
    m_reset_password = reset_password;
    m_reset_password_isSet = true;
}

bool OAIUpdateUserPassword::is_reset_password_Set() const{
    return m_reset_password_isSet;
}

bool OAIUpdateUserPassword::is_reset_password_Valid() const{
    return m_reset_password_isValid;
}

bool OAIUpdateUserPassword::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_pw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_pw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUserPassword::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
