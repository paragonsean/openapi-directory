/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceProfile::OAIDeviceProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceProfile::OAIDeviceProfile() {
    this->initializeModel();
}

OAIDeviceProfile::~OAIDeviceProfile() {}

void OAIDeviceProfile::initializeModel() {

    m_album_art_pn_isSet = false;
    m_album_art_pn_isValid = false;

    m_codec_profiles_isSet = false;
    m_codec_profiles_isValid = false;

    m_container_profiles_isSet = false;
    m_container_profiles_isValid = false;

    m_direct_play_profiles_isSet = false;
    m_direct_play_profiles_isValid = false;

    m_enable_album_art_in_didl_isSet = false;
    m_enable_album_art_in_didl_isValid = false;

    m_enable_ms_media_receiver_registrar_isSet = false;
    m_enable_ms_media_receiver_registrar_isValid = false;

    m_enable_single_album_art_limit_isSet = false;
    m_enable_single_album_art_limit_isValid = false;

    m_enable_single_subtitle_limit_isSet = false;
    m_enable_single_subtitle_limit_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identification_isSet = false;
    m_identification_isValid = false;

    m_ignore_transcode_byte_range_requests_isSet = false;
    m_ignore_transcode_byte_range_requests_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_manufacturer_url_isSet = false;
    m_manufacturer_url_isValid = false;

    m_max_album_art_height_isSet = false;
    m_max_album_art_height_isValid = false;

    m_max_album_art_width_isSet = false;
    m_max_album_art_width_isValid = false;

    m_max_icon_height_isSet = false;
    m_max_icon_height_isValid = false;

    m_max_icon_width_isSet = false;
    m_max_icon_width_isValid = false;

    m_max_static_bitrate_isSet = false;
    m_max_static_bitrate_isValid = false;

    m_max_static_music_bitrate_isSet = false;
    m_max_static_music_bitrate_isValid = false;

    m_max_streaming_bitrate_isSet = false;
    m_max_streaming_bitrate_isValid = false;

    m_model_description_isSet = false;
    m_model_description_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_model_number_isSet = false;
    m_model_number_isValid = false;

    m_model_url_isSet = false;
    m_model_url_isValid = false;

    m_music_streaming_transcoding_bitrate_isSet = false;
    m_music_streaming_transcoding_bitrate_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_info_isSet = false;
    m_protocol_info_isValid = false;

    m_requires_plain_folders_isSet = false;
    m_requires_plain_folders_isValid = false;

    m_requires_plain_video_items_isSet = false;
    m_requires_plain_video_items_isValid = false;

    m_response_profiles_isSet = false;
    m_response_profiles_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_sony_aggregation_flags_isSet = false;
    m_sony_aggregation_flags_isValid = false;

    m_subtitle_profiles_isSet = false;
    m_subtitle_profiles_isValid = false;

    m_supported_media_types_isSet = false;
    m_supported_media_types_isValid = false;

    m_timeline_offset_seconds_isSet = false;
    m_timeline_offset_seconds_isValid = false;

    m_transcoding_profiles_isSet = false;
    m_transcoding_profiles_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_xml_root_attributes_isSet = false;
    m_xml_root_attributes_isValid = false;
}

void OAIDeviceProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceProfile::fromJsonObject(QJsonObject json) {

    m_album_art_pn_isValid = ::OpenAPI::fromJsonValue(m_album_art_pn, json[QString("AlbumArtPn")]);
    m_album_art_pn_isSet = !json[QString("AlbumArtPn")].isNull() && m_album_art_pn_isValid;

    m_codec_profiles_isValid = ::OpenAPI::fromJsonValue(m_codec_profiles, json[QString("CodecProfiles")]);
    m_codec_profiles_isSet = !json[QString("CodecProfiles")].isNull() && m_codec_profiles_isValid;

    m_container_profiles_isValid = ::OpenAPI::fromJsonValue(m_container_profiles, json[QString("ContainerProfiles")]);
    m_container_profiles_isSet = !json[QString("ContainerProfiles")].isNull() && m_container_profiles_isValid;

    m_direct_play_profiles_isValid = ::OpenAPI::fromJsonValue(m_direct_play_profiles, json[QString("DirectPlayProfiles")]);
    m_direct_play_profiles_isSet = !json[QString("DirectPlayProfiles")].isNull() && m_direct_play_profiles_isValid;

    m_enable_album_art_in_didl_isValid = ::OpenAPI::fromJsonValue(m_enable_album_art_in_didl, json[QString("EnableAlbumArtInDidl")]);
    m_enable_album_art_in_didl_isSet = !json[QString("EnableAlbumArtInDidl")].isNull() && m_enable_album_art_in_didl_isValid;

    m_enable_ms_media_receiver_registrar_isValid = ::OpenAPI::fromJsonValue(m_enable_ms_media_receiver_registrar, json[QString("EnableMSMediaReceiverRegistrar")]);
    m_enable_ms_media_receiver_registrar_isSet = !json[QString("EnableMSMediaReceiverRegistrar")].isNull() && m_enable_ms_media_receiver_registrar_isValid;

    m_enable_single_album_art_limit_isValid = ::OpenAPI::fromJsonValue(m_enable_single_album_art_limit, json[QString("EnableSingleAlbumArtLimit")]);
    m_enable_single_album_art_limit_isSet = !json[QString("EnableSingleAlbumArtLimit")].isNull() && m_enable_single_album_art_limit_isValid;

    m_enable_single_subtitle_limit_isValid = ::OpenAPI::fromJsonValue(m_enable_single_subtitle_limit, json[QString("EnableSingleSubtitleLimit")]);
    m_enable_single_subtitle_limit_isSet = !json[QString("EnableSingleSubtitleLimit")].isNull() && m_enable_single_subtitle_limit_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("FriendlyName")]);
    m_friendly_name_isSet = !json[QString("FriendlyName")].isNull() && m_friendly_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_identification_isValid = ::OpenAPI::fromJsonValue(m_identification, json[QString("Identification")]);
    m_identification_isSet = !json[QString("Identification")].isNull() && m_identification_isValid;

    m_ignore_transcode_byte_range_requests_isValid = ::OpenAPI::fromJsonValue(m_ignore_transcode_byte_range_requests, json[QString("IgnoreTranscodeByteRangeRequests")]);
    m_ignore_transcode_byte_range_requests_isSet = !json[QString("IgnoreTranscodeByteRangeRequests")].isNull() && m_ignore_transcode_byte_range_requests_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("Manufacturer")]);
    m_manufacturer_isSet = !json[QString("Manufacturer")].isNull() && m_manufacturer_isValid;

    m_manufacturer_url_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_url, json[QString("ManufacturerUrl")]);
    m_manufacturer_url_isSet = !json[QString("ManufacturerUrl")].isNull() && m_manufacturer_url_isValid;

    m_max_album_art_height_isValid = ::OpenAPI::fromJsonValue(m_max_album_art_height, json[QString("MaxAlbumArtHeight")]);
    m_max_album_art_height_isSet = !json[QString("MaxAlbumArtHeight")].isNull() && m_max_album_art_height_isValid;

    m_max_album_art_width_isValid = ::OpenAPI::fromJsonValue(m_max_album_art_width, json[QString("MaxAlbumArtWidth")]);
    m_max_album_art_width_isSet = !json[QString("MaxAlbumArtWidth")].isNull() && m_max_album_art_width_isValid;

    m_max_icon_height_isValid = ::OpenAPI::fromJsonValue(m_max_icon_height, json[QString("MaxIconHeight")]);
    m_max_icon_height_isSet = !json[QString("MaxIconHeight")].isNull() && m_max_icon_height_isValid;

    m_max_icon_width_isValid = ::OpenAPI::fromJsonValue(m_max_icon_width, json[QString("MaxIconWidth")]);
    m_max_icon_width_isSet = !json[QString("MaxIconWidth")].isNull() && m_max_icon_width_isValid;

    m_max_static_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_static_bitrate, json[QString("MaxStaticBitrate")]);
    m_max_static_bitrate_isSet = !json[QString("MaxStaticBitrate")].isNull() && m_max_static_bitrate_isValid;

    m_max_static_music_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_static_music_bitrate, json[QString("MaxStaticMusicBitrate")]);
    m_max_static_music_bitrate_isSet = !json[QString("MaxStaticMusicBitrate")].isNull() && m_max_static_music_bitrate_isValid;

    m_max_streaming_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_streaming_bitrate, json[QString("MaxStreamingBitrate")]);
    m_max_streaming_bitrate_isSet = !json[QString("MaxStreamingBitrate")].isNull() && m_max_streaming_bitrate_isValid;

    m_model_description_isValid = ::OpenAPI::fromJsonValue(m_model_description, json[QString("ModelDescription")]);
    m_model_description_isSet = !json[QString("ModelDescription")].isNull() && m_model_description_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_model_number_isValid = ::OpenAPI::fromJsonValue(m_model_number, json[QString("ModelNumber")]);
    m_model_number_isSet = !json[QString("ModelNumber")].isNull() && m_model_number_isValid;

    m_model_url_isValid = ::OpenAPI::fromJsonValue(m_model_url, json[QString("ModelUrl")]);
    m_model_url_isSet = !json[QString("ModelUrl")].isNull() && m_model_url_isValid;

    m_music_streaming_transcoding_bitrate_isValid = ::OpenAPI::fromJsonValue(m_music_streaming_transcoding_bitrate, json[QString("MusicStreamingTranscodingBitrate")]);
    m_music_streaming_transcoding_bitrate_isSet = !json[QString("MusicStreamingTranscodingBitrate")].isNull() && m_music_streaming_transcoding_bitrate_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_protocol_info_isValid = ::OpenAPI::fromJsonValue(m_protocol_info, json[QString("ProtocolInfo")]);
    m_protocol_info_isSet = !json[QString("ProtocolInfo")].isNull() && m_protocol_info_isValid;

    m_requires_plain_folders_isValid = ::OpenAPI::fromJsonValue(m_requires_plain_folders, json[QString("RequiresPlainFolders")]);
    m_requires_plain_folders_isSet = !json[QString("RequiresPlainFolders")].isNull() && m_requires_plain_folders_isValid;

    m_requires_plain_video_items_isValid = ::OpenAPI::fromJsonValue(m_requires_plain_video_items, json[QString("RequiresPlainVideoItems")]);
    m_requires_plain_video_items_isSet = !json[QString("RequiresPlainVideoItems")].isNull() && m_requires_plain_video_items_isValid;

    m_response_profiles_isValid = ::OpenAPI::fromJsonValue(m_response_profiles, json[QString("ResponseProfiles")]);
    m_response_profiles_isSet = !json[QString("ResponseProfiles")].isNull() && m_response_profiles_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("SerialNumber")]);
    m_serial_number_isSet = !json[QString("SerialNumber")].isNull() && m_serial_number_isValid;

    m_sony_aggregation_flags_isValid = ::OpenAPI::fromJsonValue(m_sony_aggregation_flags, json[QString("SonyAggregationFlags")]);
    m_sony_aggregation_flags_isSet = !json[QString("SonyAggregationFlags")].isNull() && m_sony_aggregation_flags_isValid;

    m_subtitle_profiles_isValid = ::OpenAPI::fromJsonValue(m_subtitle_profiles, json[QString("SubtitleProfiles")]);
    m_subtitle_profiles_isSet = !json[QString("SubtitleProfiles")].isNull() && m_subtitle_profiles_isValid;

    m_supported_media_types_isValid = ::OpenAPI::fromJsonValue(m_supported_media_types, json[QString("SupportedMediaTypes")]);
    m_supported_media_types_isSet = !json[QString("SupportedMediaTypes")].isNull() && m_supported_media_types_isValid;

    m_timeline_offset_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeline_offset_seconds, json[QString("TimelineOffsetSeconds")]);
    m_timeline_offset_seconds_isSet = !json[QString("TimelineOffsetSeconds")].isNull() && m_timeline_offset_seconds_isValid;

    m_transcoding_profiles_isValid = ::OpenAPI::fromJsonValue(m_transcoding_profiles, json[QString("TranscodingProfiles")]);
    m_transcoding_profiles_isSet = !json[QString("TranscodingProfiles")].isNull() && m_transcoding_profiles_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_xml_root_attributes_isValid = ::OpenAPI::fromJsonValue(m_xml_root_attributes, json[QString("XmlRootAttributes")]);
    m_xml_root_attributes_isSet = !json[QString("XmlRootAttributes")].isNull() && m_xml_root_attributes_isValid;
}

QString OAIDeviceProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_album_art_pn_isSet) {
        obj.insert(QString("AlbumArtPn"), ::OpenAPI::toJsonValue(m_album_art_pn));
    }
    if (m_codec_profiles.size() > 0) {
        obj.insert(QString("CodecProfiles"), ::OpenAPI::toJsonValue(m_codec_profiles));
    }
    if (m_container_profiles.size() > 0) {
        obj.insert(QString("ContainerProfiles"), ::OpenAPI::toJsonValue(m_container_profiles));
    }
    if (m_direct_play_profiles.size() > 0) {
        obj.insert(QString("DirectPlayProfiles"), ::OpenAPI::toJsonValue(m_direct_play_profiles));
    }
    if (m_enable_album_art_in_didl_isSet) {
        obj.insert(QString("EnableAlbumArtInDidl"), ::OpenAPI::toJsonValue(m_enable_album_art_in_didl));
    }
    if (m_enable_ms_media_receiver_registrar_isSet) {
        obj.insert(QString("EnableMSMediaReceiverRegistrar"), ::OpenAPI::toJsonValue(m_enable_ms_media_receiver_registrar));
    }
    if (m_enable_single_album_art_limit_isSet) {
        obj.insert(QString("EnableSingleAlbumArtLimit"), ::OpenAPI::toJsonValue(m_enable_single_album_art_limit));
    }
    if (m_enable_single_subtitle_limit_isSet) {
        obj.insert(QString("EnableSingleSubtitleLimit"), ::OpenAPI::toJsonValue(m_enable_single_subtitle_limit));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("FriendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identification.isSet()) {
        obj.insert(QString("Identification"), ::OpenAPI::toJsonValue(m_identification));
    }
    if (m_ignore_transcode_byte_range_requests_isSet) {
        obj.insert(QString("IgnoreTranscodeByteRangeRequests"), ::OpenAPI::toJsonValue(m_ignore_transcode_byte_range_requests));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("Manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_manufacturer_url_isSet) {
        obj.insert(QString("ManufacturerUrl"), ::OpenAPI::toJsonValue(m_manufacturer_url));
    }
    if (m_max_album_art_height_isSet) {
        obj.insert(QString("MaxAlbumArtHeight"), ::OpenAPI::toJsonValue(m_max_album_art_height));
    }
    if (m_max_album_art_width_isSet) {
        obj.insert(QString("MaxAlbumArtWidth"), ::OpenAPI::toJsonValue(m_max_album_art_width));
    }
    if (m_max_icon_height_isSet) {
        obj.insert(QString("MaxIconHeight"), ::OpenAPI::toJsonValue(m_max_icon_height));
    }
    if (m_max_icon_width_isSet) {
        obj.insert(QString("MaxIconWidth"), ::OpenAPI::toJsonValue(m_max_icon_width));
    }
    if (m_max_static_bitrate_isSet) {
        obj.insert(QString("MaxStaticBitrate"), ::OpenAPI::toJsonValue(m_max_static_bitrate));
    }
    if (m_max_static_music_bitrate_isSet) {
        obj.insert(QString("MaxStaticMusicBitrate"), ::OpenAPI::toJsonValue(m_max_static_music_bitrate));
    }
    if (m_max_streaming_bitrate_isSet) {
        obj.insert(QString("MaxStreamingBitrate"), ::OpenAPI::toJsonValue(m_max_streaming_bitrate));
    }
    if (m_model_description_isSet) {
        obj.insert(QString("ModelDescription"), ::OpenAPI::toJsonValue(m_model_description));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_model_number_isSet) {
        obj.insert(QString("ModelNumber"), ::OpenAPI::toJsonValue(m_model_number));
    }
    if (m_model_url_isSet) {
        obj.insert(QString("ModelUrl"), ::OpenAPI::toJsonValue(m_model_url));
    }
    if (m_music_streaming_transcoding_bitrate_isSet) {
        obj.insert(QString("MusicStreamingTranscodingBitrate"), ::OpenAPI::toJsonValue(m_music_streaming_transcoding_bitrate));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol_info_isSet) {
        obj.insert(QString("ProtocolInfo"), ::OpenAPI::toJsonValue(m_protocol_info));
    }
    if (m_requires_plain_folders_isSet) {
        obj.insert(QString("RequiresPlainFolders"), ::OpenAPI::toJsonValue(m_requires_plain_folders));
    }
    if (m_requires_plain_video_items_isSet) {
        obj.insert(QString("RequiresPlainVideoItems"), ::OpenAPI::toJsonValue(m_requires_plain_video_items));
    }
    if (m_response_profiles.size() > 0) {
        obj.insert(QString("ResponseProfiles"), ::OpenAPI::toJsonValue(m_response_profiles));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("SerialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_sony_aggregation_flags_isSet) {
        obj.insert(QString("SonyAggregationFlags"), ::OpenAPI::toJsonValue(m_sony_aggregation_flags));
    }
    if (m_subtitle_profiles.size() > 0) {
        obj.insert(QString("SubtitleProfiles"), ::OpenAPI::toJsonValue(m_subtitle_profiles));
    }
    if (m_supported_media_types_isSet) {
        obj.insert(QString("SupportedMediaTypes"), ::OpenAPI::toJsonValue(m_supported_media_types));
    }
    if (m_timeline_offset_seconds_isSet) {
        obj.insert(QString("TimelineOffsetSeconds"), ::OpenAPI::toJsonValue(m_timeline_offset_seconds));
    }
    if (m_transcoding_profiles.size() > 0) {
        obj.insert(QString("TranscodingProfiles"), ::OpenAPI::toJsonValue(m_transcoding_profiles));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_xml_root_attributes.size() > 0) {
        obj.insert(QString("XmlRootAttributes"), ::OpenAPI::toJsonValue(m_xml_root_attributes));
    }
    return obj;
}

QString OAIDeviceProfile::getAlbumArtPn() const {
    return m_album_art_pn;
}
void OAIDeviceProfile::setAlbumArtPn(const QString &album_art_pn) {
    m_album_art_pn = album_art_pn;
    m_album_art_pn_isSet = true;
}

bool OAIDeviceProfile::is_album_art_pn_Set() const{
    return m_album_art_pn_isSet;
}

bool OAIDeviceProfile::is_album_art_pn_Valid() const{
    return m_album_art_pn_isValid;
}

QList<OAICodecProfile> OAIDeviceProfile::getCodecProfiles() const {
    return m_codec_profiles;
}
void OAIDeviceProfile::setCodecProfiles(const QList<OAICodecProfile> &codec_profiles) {
    m_codec_profiles = codec_profiles;
    m_codec_profiles_isSet = true;
}

bool OAIDeviceProfile::is_codec_profiles_Set() const{
    return m_codec_profiles_isSet;
}

bool OAIDeviceProfile::is_codec_profiles_Valid() const{
    return m_codec_profiles_isValid;
}

QList<OAIContainerProfile> OAIDeviceProfile::getContainerProfiles() const {
    return m_container_profiles;
}
void OAIDeviceProfile::setContainerProfiles(const QList<OAIContainerProfile> &container_profiles) {
    m_container_profiles = container_profiles;
    m_container_profiles_isSet = true;
}

bool OAIDeviceProfile::is_container_profiles_Set() const{
    return m_container_profiles_isSet;
}

bool OAIDeviceProfile::is_container_profiles_Valid() const{
    return m_container_profiles_isValid;
}

QList<OAIDirectPlayProfile> OAIDeviceProfile::getDirectPlayProfiles() const {
    return m_direct_play_profiles;
}
void OAIDeviceProfile::setDirectPlayProfiles(const QList<OAIDirectPlayProfile> &direct_play_profiles) {
    m_direct_play_profiles = direct_play_profiles;
    m_direct_play_profiles_isSet = true;
}

bool OAIDeviceProfile::is_direct_play_profiles_Set() const{
    return m_direct_play_profiles_isSet;
}

bool OAIDeviceProfile::is_direct_play_profiles_Valid() const{
    return m_direct_play_profiles_isValid;
}

bool OAIDeviceProfile::isEnableAlbumArtInDidl() const {
    return m_enable_album_art_in_didl;
}
void OAIDeviceProfile::setEnableAlbumArtInDidl(const bool &enable_album_art_in_didl) {
    m_enable_album_art_in_didl = enable_album_art_in_didl;
    m_enable_album_art_in_didl_isSet = true;
}

bool OAIDeviceProfile::is_enable_album_art_in_didl_Set() const{
    return m_enable_album_art_in_didl_isSet;
}

bool OAIDeviceProfile::is_enable_album_art_in_didl_Valid() const{
    return m_enable_album_art_in_didl_isValid;
}

bool OAIDeviceProfile::isEnableMsMediaReceiverRegistrar() const {
    return m_enable_ms_media_receiver_registrar;
}
void OAIDeviceProfile::setEnableMsMediaReceiverRegistrar(const bool &enable_ms_media_receiver_registrar) {
    m_enable_ms_media_receiver_registrar = enable_ms_media_receiver_registrar;
    m_enable_ms_media_receiver_registrar_isSet = true;
}

bool OAIDeviceProfile::is_enable_ms_media_receiver_registrar_Set() const{
    return m_enable_ms_media_receiver_registrar_isSet;
}

bool OAIDeviceProfile::is_enable_ms_media_receiver_registrar_Valid() const{
    return m_enable_ms_media_receiver_registrar_isValid;
}

bool OAIDeviceProfile::isEnableSingleAlbumArtLimit() const {
    return m_enable_single_album_art_limit;
}
void OAIDeviceProfile::setEnableSingleAlbumArtLimit(const bool &enable_single_album_art_limit) {
    m_enable_single_album_art_limit = enable_single_album_art_limit;
    m_enable_single_album_art_limit_isSet = true;
}

bool OAIDeviceProfile::is_enable_single_album_art_limit_Set() const{
    return m_enable_single_album_art_limit_isSet;
}

bool OAIDeviceProfile::is_enable_single_album_art_limit_Valid() const{
    return m_enable_single_album_art_limit_isValid;
}

bool OAIDeviceProfile::isEnableSingleSubtitleLimit() const {
    return m_enable_single_subtitle_limit;
}
void OAIDeviceProfile::setEnableSingleSubtitleLimit(const bool &enable_single_subtitle_limit) {
    m_enable_single_subtitle_limit = enable_single_subtitle_limit;
    m_enable_single_subtitle_limit_isSet = true;
}

bool OAIDeviceProfile::is_enable_single_subtitle_limit_Set() const{
    return m_enable_single_subtitle_limit_isSet;
}

bool OAIDeviceProfile::is_enable_single_subtitle_limit_Valid() const{
    return m_enable_single_subtitle_limit_isValid;
}

QString OAIDeviceProfile::getFriendlyName() const {
    return m_friendly_name;
}
void OAIDeviceProfile::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIDeviceProfile::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIDeviceProfile::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIDeviceProfile::getId() const {
    return m_id;
}
void OAIDeviceProfile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceProfile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceProfile::is_id_Valid() const{
    return m_id_isValid;
}

OAIDeviceIdentification OAIDeviceProfile::getIdentification() const {
    return m_identification;
}
void OAIDeviceProfile::setIdentification(const OAIDeviceIdentification &identification) {
    m_identification = identification;
    m_identification_isSet = true;
}

bool OAIDeviceProfile::is_identification_Set() const{
    return m_identification_isSet;
}

bool OAIDeviceProfile::is_identification_Valid() const{
    return m_identification_isValid;
}

bool OAIDeviceProfile::isIgnoreTranscodeByteRangeRequests() const {
    return m_ignore_transcode_byte_range_requests;
}
void OAIDeviceProfile::setIgnoreTranscodeByteRangeRequests(const bool &ignore_transcode_byte_range_requests) {
    m_ignore_transcode_byte_range_requests = ignore_transcode_byte_range_requests;
    m_ignore_transcode_byte_range_requests_isSet = true;
}

bool OAIDeviceProfile::is_ignore_transcode_byte_range_requests_Set() const{
    return m_ignore_transcode_byte_range_requests_isSet;
}

bool OAIDeviceProfile::is_ignore_transcode_byte_range_requests_Valid() const{
    return m_ignore_transcode_byte_range_requests_isValid;
}

QString OAIDeviceProfile::getManufacturer() const {
    return m_manufacturer;
}
void OAIDeviceProfile::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIDeviceProfile::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIDeviceProfile::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIDeviceProfile::getManufacturerUrl() const {
    return m_manufacturer_url;
}
void OAIDeviceProfile::setManufacturerUrl(const QString &manufacturer_url) {
    m_manufacturer_url = manufacturer_url;
    m_manufacturer_url_isSet = true;
}

bool OAIDeviceProfile::is_manufacturer_url_Set() const{
    return m_manufacturer_url_isSet;
}

bool OAIDeviceProfile::is_manufacturer_url_Valid() const{
    return m_manufacturer_url_isValid;
}

qint32 OAIDeviceProfile::getMaxAlbumArtHeight() const {
    return m_max_album_art_height;
}
void OAIDeviceProfile::setMaxAlbumArtHeight(const qint32 &max_album_art_height) {
    m_max_album_art_height = max_album_art_height;
    m_max_album_art_height_isSet = true;
}

bool OAIDeviceProfile::is_max_album_art_height_Set() const{
    return m_max_album_art_height_isSet;
}

bool OAIDeviceProfile::is_max_album_art_height_Valid() const{
    return m_max_album_art_height_isValid;
}

qint32 OAIDeviceProfile::getMaxAlbumArtWidth() const {
    return m_max_album_art_width;
}
void OAIDeviceProfile::setMaxAlbumArtWidth(const qint32 &max_album_art_width) {
    m_max_album_art_width = max_album_art_width;
    m_max_album_art_width_isSet = true;
}

bool OAIDeviceProfile::is_max_album_art_width_Set() const{
    return m_max_album_art_width_isSet;
}

bool OAIDeviceProfile::is_max_album_art_width_Valid() const{
    return m_max_album_art_width_isValid;
}

qint32 OAIDeviceProfile::getMaxIconHeight() const {
    return m_max_icon_height;
}
void OAIDeviceProfile::setMaxIconHeight(const qint32 &max_icon_height) {
    m_max_icon_height = max_icon_height;
    m_max_icon_height_isSet = true;
}

bool OAIDeviceProfile::is_max_icon_height_Set() const{
    return m_max_icon_height_isSet;
}

bool OAIDeviceProfile::is_max_icon_height_Valid() const{
    return m_max_icon_height_isValid;
}

qint32 OAIDeviceProfile::getMaxIconWidth() const {
    return m_max_icon_width;
}
void OAIDeviceProfile::setMaxIconWidth(const qint32 &max_icon_width) {
    m_max_icon_width = max_icon_width;
    m_max_icon_width_isSet = true;
}

bool OAIDeviceProfile::is_max_icon_width_Set() const{
    return m_max_icon_width_isSet;
}

bool OAIDeviceProfile::is_max_icon_width_Valid() const{
    return m_max_icon_width_isValid;
}

qint32 OAIDeviceProfile::getMaxStaticBitrate() const {
    return m_max_static_bitrate;
}
void OAIDeviceProfile::setMaxStaticBitrate(const qint32 &max_static_bitrate) {
    m_max_static_bitrate = max_static_bitrate;
    m_max_static_bitrate_isSet = true;
}

bool OAIDeviceProfile::is_max_static_bitrate_Set() const{
    return m_max_static_bitrate_isSet;
}

bool OAIDeviceProfile::is_max_static_bitrate_Valid() const{
    return m_max_static_bitrate_isValid;
}

qint32 OAIDeviceProfile::getMaxStaticMusicBitrate() const {
    return m_max_static_music_bitrate;
}
void OAIDeviceProfile::setMaxStaticMusicBitrate(const qint32 &max_static_music_bitrate) {
    m_max_static_music_bitrate = max_static_music_bitrate;
    m_max_static_music_bitrate_isSet = true;
}

bool OAIDeviceProfile::is_max_static_music_bitrate_Set() const{
    return m_max_static_music_bitrate_isSet;
}

bool OAIDeviceProfile::is_max_static_music_bitrate_Valid() const{
    return m_max_static_music_bitrate_isValid;
}

qint32 OAIDeviceProfile::getMaxStreamingBitrate() const {
    return m_max_streaming_bitrate;
}
void OAIDeviceProfile::setMaxStreamingBitrate(const qint32 &max_streaming_bitrate) {
    m_max_streaming_bitrate = max_streaming_bitrate;
    m_max_streaming_bitrate_isSet = true;
}

bool OAIDeviceProfile::is_max_streaming_bitrate_Set() const{
    return m_max_streaming_bitrate_isSet;
}

bool OAIDeviceProfile::is_max_streaming_bitrate_Valid() const{
    return m_max_streaming_bitrate_isValid;
}

QString OAIDeviceProfile::getModelDescription() const {
    return m_model_description;
}
void OAIDeviceProfile::setModelDescription(const QString &model_description) {
    m_model_description = model_description;
    m_model_description_isSet = true;
}

bool OAIDeviceProfile::is_model_description_Set() const{
    return m_model_description_isSet;
}

bool OAIDeviceProfile::is_model_description_Valid() const{
    return m_model_description_isValid;
}

QString OAIDeviceProfile::getModelName() const {
    return m_model_name;
}
void OAIDeviceProfile::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIDeviceProfile::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIDeviceProfile::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIDeviceProfile::getModelNumber() const {
    return m_model_number;
}
void OAIDeviceProfile::setModelNumber(const QString &model_number) {
    m_model_number = model_number;
    m_model_number_isSet = true;
}

bool OAIDeviceProfile::is_model_number_Set() const{
    return m_model_number_isSet;
}

bool OAIDeviceProfile::is_model_number_Valid() const{
    return m_model_number_isValid;
}

QString OAIDeviceProfile::getModelUrl() const {
    return m_model_url;
}
void OAIDeviceProfile::setModelUrl(const QString &model_url) {
    m_model_url = model_url;
    m_model_url_isSet = true;
}

bool OAIDeviceProfile::is_model_url_Set() const{
    return m_model_url_isSet;
}

bool OAIDeviceProfile::is_model_url_Valid() const{
    return m_model_url_isValid;
}

qint32 OAIDeviceProfile::getMusicStreamingTranscodingBitrate() const {
    return m_music_streaming_transcoding_bitrate;
}
void OAIDeviceProfile::setMusicStreamingTranscodingBitrate(const qint32 &music_streaming_transcoding_bitrate) {
    m_music_streaming_transcoding_bitrate = music_streaming_transcoding_bitrate;
    m_music_streaming_transcoding_bitrate_isSet = true;
}

bool OAIDeviceProfile::is_music_streaming_transcoding_bitrate_Set() const{
    return m_music_streaming_transcoding_bitrate_isSet;
}

bool OAIDeviceProfile::is_music_streaming_transcoding_bitrate_Valid() const{
    return m_music_streaming_transcoding_bitrate_isValid;
}

QString OAIDeviceProfile::getName() const {
    return m_name;
}
void OAIDeviceProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceProfile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeviceProfile::getProtocolInfo() const {
    return m_protocol_info;
}
void OAIDeviceProfile::setProtocolInfo(const QString &protocol_info) {
    m_protocol_info = protocol_info;
    m_protocol_info_isSet = true;
}

bool OAIDeviceProfile::is_protocol_info_Set() const{
    return m_protocol_info_isSet;
}

bool OAIDeviceProfile::is_protocol_info_Valid() const{
    return m_protocol_info_isValid;
}

bool OAIDeviceProfile::isRequiresPlainFolders() const {
    return m_requires_plain_folders;
}
void OAIDeviceProfile::setRequiresPlainFolders(const bool &requires_plain_folders) {
    m_requires_plain_folders = requires_plain_folders;
    m_requires_plain_folders_isSet = true;
}

bool OAIDeviceProfile::is_requires_plain_folders_Set() const{
    return m_requires_plain_folders_isSet;
}

bool OAIDeviceProfile::is_requires_plain_folders_Valid() const{
    return m_requires_plain_folders_isValid;
}

bool OAIDeviceProfile::isRequiresPlainVideoItems() const {
    return m_requires_plain_video_items;
}
void OAIDeviceProfile::setRequiresPlainVideoItems(const bool &requires_plain_video_items) {
    m_requires_plain_video_items = requires_plain_video_items;
    m_requires_plain_video_items_isSet = true;
}

bool OAIDeviceProfile::is_requires_plain_video_items_Set() const{
    return m_requires_plain_video_items_isSet;
}

bool OAIDeviceProfile::is_requires_plain_video_items_Valid() const{
    return m_requires_plain_video_items_isValid;
}

QList<OAIResponseProfile> OAIDeviceProfile::getResponseProfiles() const {
    return m_response_profiles;
}
void OAIDeviceProfile::setResponseProfiles(const QList<OAIResponseProfile> &response_profiles) {
    m_response_profiles = response_profiles;
    m_response_profiles_isSet = true;
}

bool OAIDeviceProfile::is_response_profiles_Set() const{
    return m_response_profiles_isSet;
}

bool OAIDeviceProfile::is_response_profiles_Valid() const{
    return m_response_profiles_isValid;
}

QString OAIDeviceProfile::getSerialNumber() const {
    return m_serial_number;
}
void OAIDeviceProfile::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDeviceProfile::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDeviceProfile::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIDeviceProfile::getSonyAggregationFlags() const {
    return m_sony_aggregation_flags;
}
void OAIDeviceProfile::setSonyAggregationFlags(const QString &sony_aggregation_flags) {
    m_sony_aggregation_flags = sony_aggregation_flags;
    m_sony_aggregation_flags_isSet = true;
}

bool OAIDeviceProfile::is_sony_aggregation_flags_Set() const{
    return m_sony_aggregation_flags_isSet;
}

bool OAIDeviceProfile::is_sony_aggregation_flags_Valid() const{
    return m_sony_aggregation_flags_isValid;
}

QList<OAISubtitleProfile> OAIDeviceProfile::getSubtitleProfiles() const {
    return m_subtitle_profiles;
}
void OAIDeviceProfile::setSubtitleProfiles(const QList<OAISubtitleProfile> &subtitle_profiles) {
    m_subtitle_profiles = subtitle_profiles;
    m_subtitle_profiles_isSet = true;
}

bool OAIDeviceProfile::is_subtitle_profiles_Set() const{
    return m_subtitle_profiles_isSet;
}

bool OAIDeviceProfile::is_subtitle_profiles_Valid() const{
    return m_subtitle_profiles_isValid;
}

QString OAIDeviceProfile::getSupportedMediaTypes() const {
    return m_supported_media_types;
}
void OAIDeviceProfile::setSupportedMediaTypes(const QString &supported_media_types) {
    m_supported_media_types = supported_media_types;
    m_supported_media_types_isSet = true;
}

bool OAIDeviceProfile::is_supported_media_types_Set() const{
    return m_supported_media_types_isSet;
}

bool OAIDeviceProfile::is_supported_media_types_Valid() const{
    return m_supported_media_types_isValid;
}

qint32 OAIDeviceProfile::getTimelineOffsetSeconds() const {
    return m_timeline_offset_seconds;
}
void OAIDeviceProfile::setTimelineOffsetSeconds(const qint32 &timeline_offset_seconds) {
    m_timeline_offset_seconds = timeline_offset_seconds;
    m_timeline_offset_seconds_isSet = true;
}

bool OAIDeviceProfile::is_timeline_offset_seconds_Set() const{
    return m_timeline_offset_seconds_isSet;
}

bool OAIDeviceProfile::is_timeline_offset_seconds_Valid() const{
    return m_timeline_offset_seconds_isValid;
}

QList<OAITranscodingProfile> OAIDeviceProfile::getTranscodingProfiles() const {
    return m_transcoding_profiles;
}
void OAIDeviceProfile::setTranscodingProfiles(const QList<OAITranscodingProfile> &transcoding_profiles) {
    m_transcoding_profiles = transcoding_profiles;
    m_transcoding_profiles_isSet = true;
}

bool OAIDeviceProfile::is_transcoding_profiles_Set() const{
    return m_transcoding_profiles_isSet;
}

bool OAIDeviceProfile::is_transcoding_profiles_Valid() const{
    return m_transcoding_profiles_isValid;
}

QString OAIDeviceProfile::getUserId() const {
    return m_user_id;
}
void OAIDeviceProfile::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIDeviceProfile::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIDeviceProfile::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QList<OAIXmlAttribute> OAIDeviceProfile::getXmlRootAttributes() const {
    return m_xml_root_attributes;
}
void OAIDeviceProfile::setXmlRootAttributes(const QList<OAIXmlAttribute> &xml_root_attributes) {
    m_xml_root_attributes = xml_root_attributes;
    m_xml_root_attributes_isSet = true;
}

bool OAIDeviceProfile::is_xml_root_attributes_Set() const{
    return m_xml_root_attributes_isSet;
}

bool OAIDeviceProfile::is_xml_root_attributes_Valid() const{
    return m_xml_root_attributes_isValid;
}

bool OAIDeviceProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_art_pn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_play_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_album_art_in_didl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ms_media_receiver_registrar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_single_album_art_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_single_subtitle_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_transcode_byte_range_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_album_art_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_album_art_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_icon_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_icon_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_static_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_static_music_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_streaming_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_music_streaming_transcoding_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_plain_folders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_plain_video_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sony_aggregation_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_media_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline_offset_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcoding_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml_root_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
