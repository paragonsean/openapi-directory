/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectGroupUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectGroupUpdate::OAIObjectGroupUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectGroupUpdate::OAIObjectGroupUpdate() {
    this->initializeModel();
}

OAIObjectGroupUpdate::~OAIObjectGroupUpdate() {}

void OAIObjectGroupUpdate::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIObjectGroupUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectGroupUpdate::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("GroupId")]);
    m_group_id_isSet = !json[QString("GroupId")].isNull() && m_group_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIObjectGroupUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectGroupUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("GroupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QJsonValue OAIObjectGroupUpdate::getData() const {
    return m_data;
}
void OAIObjectGroupUpdate::setData(const QJsonValue &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIObjectGroupUpdate::is_data_Set() const{
    return m_data_isSet;
}

bool OAIObjectGroupUpdate::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIObjectGroupUpdate::getGroupId() const {
    return m_group_id;
}
void OAIObjectGroupUpdate::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIObjectGroupUpdate::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIObjectGroupUpdate::is_group_id_Valid() const{
    return m_group_id_isValid;
}

OAIGroupUpdateType OAIObjectGroupUpdate::getType() const {
    return m_type;
}
void OAIObjectGroupUpdate::setType(const OAIGroupUpdateType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIObjectGroupUpdate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIObjectGroupUpdate::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIObjectGroupUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectGroupUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
