/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalIdInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalIdInfo::OAIExternalIdInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalIdInfo::OAIExternalIdInfo() {
    this->initializeModel();
}

OAIExternalIdInfo::~OAIExternalIdInfo() {}

void OAIExternalIdInfo::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_format_string_isSet = false;
    m_url_format_string_isValid = false;
}

void OAIExternalIdInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalIdInfo::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_url_format_string_isValid = ::OpenAPI::fromJsonValue(m_url_format_string, json[QString("UrlFormatString")]);
    m_url_format_string_isSet = !json[QString("UrlFormatString")].isNull() && m_url_format_string_isValid;
}

QString OAIExternalIdInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalIdInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_format_string_isSet) {
        obj.insert(QString("UrlFormatString"), ::OpenAPI::toJsonValue(m_url_format_string));
    }
    return obj;
}

QString OAIExternalIdInfo::getKey() const {
    return m_key;
}
void OAIExternalIdInfo::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIExternalIdInfo::is_key_Set() const{
    return m_key_isSet;
}

bool OAIExternalIdInfo::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIExternalIdInfo::getName() const {
    return m_name;
}
void OAIExternalIdInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExternalIdInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExternalIdInfo::is_name_Valid() const{
    return m_name_isValid;
}

OAIExternalIdMediaType OAIExternalIdInfo::getType() const {
    return m_type;
}
void OAIExternalIdInfo::setType(const OAIExternalIdMediaType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExternalIdInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExternalIdInfo::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIExternalIdInfo::getUrlFormatString() const {
    return m_url_format_string;
}
void OAIExternalIdInfo::setUrlFormatString(const QString &url_format_string) {
    m_url_format_string = url_format_string;
    m_url_format_string_isSet = true;
}

bool OAIExternalIdInfo::is_url_format_string_Set() const{
    return m_url_format_string_isSet;
}

bool OAIExternalIdInfo::is_url_format_string_Valid() const{
    return m_url_format_string_isValid;
}

bool OAIExternalIdInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_format_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalIdInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
