/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStartupApi_H
#define OAI_OAIStartupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIStartupConfigurationDto.h"
#include "OAIStartupRemoteAccessDto.h"
#include "OAIStartupUserDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStartupApi : public QObject {
    Q_OBJECT

public:
    OAIStartupApi(const int timeOut = 0);
    ~OAIStartupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void completeWizard();


    virtual void getFirstUser();


    virtual void getFirstUser2();


    virtual void getStartupConfiguration();

    /**
    * @param[in]  oai_startup_remote_access_dto OAIStartupRemoteAccessDto [required]
    */
    virtual void setRemoteAccess(const OAIStartupRemoteAccessDto &oai_startup_remote_access_dto);

    /**
    * @param[in]  oai_startup_configuration_dto OAIStartupConfigurationDto [required]
    */
    virtual void updateInitialConfiguration(const OAIStartupConfigurationDto &oai_startup_configuration_dto);

    /**
    * @param[in]  oai_startup_user_dto OAIStartupUserDto [optional]
    */
    virtual void updateStartupUser(const ::OpenAPI::OptionalParam<OAIStartupUserDto> &oai_startup_user_dto = ::OpenAPI::OptionalParam<OAIStartupUserDto>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void completeWizardCallback(OAIHttpRequestWorker *worker);
    void getFirstUserCallback(OAIHttpRequestWorker *worker);
    void getFirstUser2Callback(OAIHttpRequestWorker *worker);
    void getStartupConfigurationCallback(OAIHttpRequestWorker *worker);
    void setRemoteAccessCallback(OAIHttpRequestWorker *worker);
    void updateInitialConfigurationCallback(OAIHttpRequestWorker *worker);
    void updateStartupUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void completeWizardSignal();
    void getFirstUserSignal(OAIStartupUserDto summary);
    void getFirstUser2Signal(OAIStartupUserDto summary);
    void getStartupConfigurationSignal(OAIStartupConfigurationDto summary);
    void setRemoteAccessSignal();
    void updateInitialConfigurationSignal();
    void updateStartupUserSignal();


    void completeWizardSignalFull(OAIHttpRequestWorker *worker);
    void getFirstUserSignalFull(OAIHttpRequestWorker *worker, OAIStartupUserDto summary);
    void getFirstUser2SignalFull(OAIHttpRequestWorker *worker, OAIStartupUserDto summary);
    void getStartupConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIStartupConfigurationDto summary);
    void setRemoteAccessSignalFull(OAIHttpRequestWorker *worker);
    void updateInitialConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void updateStartupUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use completeWizardSignalError() instead")
    void completeWizardSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void completeWizardSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirstUserSignalError() instead")
    void getFirstUserSignalE(OAIStartupUserDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirstUserSignalError(OAIStartupUserDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirstUser2SignalError() instead")
    void getFirstUser2SignalE(OAIStartupUserDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirstUser2SignalError(OAIStartupUserDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStartupConfigurationSignalError() instead")
    void getStartupConfigurationSignalE(OAIStartupConfigurationDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStartupConfigurationSignalError(OAIStartupConfigurationDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRemoteAccessSignalError() instead")
    void setRemoteAccessSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRemoteAccessSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInitialConfigurationSignalError() instead")
    void updateInitialConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateInitialConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStartupUserSignalError() instead")
    void updateStartupUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateStartupUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use completeWizardSignalErrorFull() instead")
    void completeWizardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeWizardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirstUserSignalErrorFull() instead")
    void getFirstUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirstUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirstUser2SignalErrorFull() instead")
    void getFirstUser2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirstUser2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStartupConfigurationSignalErrorFull() instead")
    void getStartupConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStartupConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRemoteAccessSignalErrorFull() instead")
    void setRemoteAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRemoteAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInitialConfigurationSignalErrorFull() instead")
    void updateInitialConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInitialConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStartupUserSignalErrorFull() instead")
    void updateStartupUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStartupUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
