/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISystemApi_H
#define OAI_OAISystemApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEndPointInfo.h"
#include "OAIHttpFileElement.h"
#include "OAILogFile.h"
#include "OAIPublicSystemInfo.h"
#include "OAISystemInfo.h"
#include "OAIWakeOnLanInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISystemApi : public QObject {
    Q_OBJECT

public:
    OAISystemApi(const int timeOut = 0);
    ~OAISystemApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getEndpointInfo();

    /**
    * @param[in]  name QString [required]
    */
    virtual void getLogFile(const QString &name);


    virtual void getPingSystem();


    virtual void getPublicSystemInfo();


    virtual void getServerLogs();


    virtual void getSystemInfo();


    virtual void getWakeOnLanInfo();


    virtual void postPingSystem();


    virtual void restartApplication();


    virtual void shutdownApplication();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getEndpointInfoCallback(OAIHttpRequestWorker *worker);
    void getLogFileCallback(OAIHttpRequestWorker *worker);
    void getPingSystemCallback(OAIHttpRequestWorker *worker);
    void getPublicSystemInfoCallback(OAIHttpRequestWorker *worker);
    void getServerLogsCallback(OAIHttpRequestWorker *worker);
    void getSystemInfoCallback(OAIHttpRequestWorker *worker);
    void getWakeOnLanInfoCallback(OAIHttpRequestWorker *worker);
    void postPingSystemCallback(OAIHttpRequestWorker *worker);
    void restartApplicationCallback(OAIHttpRequestWorker *worker);
    void shutdownApplicationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getEndpointInfoSignal(OAIEndPointInfo summary);
    void getLogFileSignal(OAIHttpFileElement summary);
    void getPingSystemSignal(QString summary);
    void getPublicSystemInfoSignal(OAIPublicSystemInfo summary);
    void getServerLogsSignal(QList<OAILogFile> summary);
    void getSystemInfoSignal(OAISystemInfo summary);
    void getWakeOnLanInfoSignal(QList<OAIWakeOnLanInfo> summary);
    void postPingSystemSignal(QString summary);
    void restartApplicationSignal();
    void shutdownApplicationSignal();


    void getEndpointInfoSignalFull(OAIHttpRequestWorker *worker, OAIEndPointInfo summary);
    void getLogFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPingSystemSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getPublicSystemInfoSignalFull(OAIHttpRequestWorker *worker, OAIPublicSystemInfo summary);
    void getServerLogsSignalFull(OAIHttpRequestWorker *worker, QList<OAILogFile> summary);
    void getSystemInfoSignalFull(OAIHttpRequestWorker *worker, OAISystemInfo summary);
    void getWakeOnLanInfoSignalFull(OAIHttpRequestWorker *worker, QList<OAIWakeOnLanInfo> summary);
    void postPingSystemSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void restartApplicationSignalFull(OAIHttpRequestWorker *worker);
    void shutdownApplicationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getEndpointInfoSignalError() instead")
    void getEndpointInfoSignalE(OAIEndPointInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointInfoSignalError(OAIEndPointInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLogFileSignalError() instead")
    void getLogFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLogFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPingSystemSignalError() instead")
    void getPingSystemSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPingSystemSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicSystemInfoSignalError() instead")
    void getPublicSystemInfoSignalE(OAIPublicSystemInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicSystemInfoSignalError(OAIPublicSystemInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerLogsSignalError() instead")
    void getServerLogsSignalE(QList<OAILogFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerLogsSignalError(QList<OAILogFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSystemInfoSignalError() instead")
    void getSystemInfoSignalE(OAISystemInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSystemInfoSignalError(OAISystemInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWakeOnLanInfoSignalError() instead")
    void getWakeOnLanInfoSignalE(QList<OAIWakeOnLanInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWakeOnLanInfoSignalError(QList<OAIWakeOnLanInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPingSystemSignalError() instead")
    void postPingSystemSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPingSystemSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartApplicationSignalError() instead")
    void restartApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restartApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shutdownApplicationSignalError() instead")
    void shutdownApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shutdownApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getEndpointInfoSignalErrorFull() instead")
    void getEndpointInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLogFileSignalErrorFull() instead")
    void getLogFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLogFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPingSystemSignalErrorFull() instead")
    void getPingSystemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPingSystemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicSystemInfoSignalErrorFull() instead")
    void getPublicSystemInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicSystemInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerLogsSignalErrorFull() instead")
    void getServerLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSystemInfoSignalErrorFull() instead")
    void getSystemInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSystemInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWakeOnLanInfoSignalErrorFull() instead")
    void getWakeOnLanInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWakeOnLanInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPingSystemSignalErrorFull() instead")
    void postPingSystemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPingSystemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartApplicationSignalErrorFull() instead")
    void restartApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restartApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shutdownApplicationSignalErrorFull() instead")
    void shutdownApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shutdownApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
