/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListingsProviderInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListingsProviderInfo::OAIListingsProviderInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListingsProviderInfo::OAIListingsProviderInfo() {
    this->initializeModel();
}

OAIListingsProviderInfo::~OAIListingsProviderInfo() {}

void OAIListingsProviderInfo::initializeModel() {

    m_channel_mappings_isSet = false;
    m_channel_mappings_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_enable_all_tuners_isSet = false;
    m_enable_all_tuners_isValid = false;

    m_enabled_tuners_isSet = false;
    m_enabled_tuners_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kids_categories_isSet = false;
    m_kids_categories_isValid = false;

    m_listings_id_isSet = false;
    m_listings_id_isValid = false;

    m_movie_categories_isSet = false;
    m_movie_categories_isValid = false;

    m_movie_prefix_isSet = false;
    m_movie_prefix_isValid = false;

    m_news_categories_isSet = false;
    m_news_categories_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_preferred_language_isSet = false;
    m_preferred_language_isValid = false;

    m_sports_categories_isSet = false;
    m_sports_categories_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIListingsProviderInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListingsProviderInfo::fromJsonObject(QJsonObject json) {

    m_channel_mappings_isValid = ::OpenAPI::fromJsonValue(m_channel_mappings, json[QString("ChannelMappings")]);
    m_channel_mappings_isSet = !json[QString("ChannelMappings")].isNull() && m_channel_mappings_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_enable_all_tuners_isValid = ::OpenAPI::fromJsonValue(m_enable_all_tuners, json[QString("EnableAllTuners")]);
    m_enable_all_tuners_isSet = !json[QString("EnableAllTuners")].isNull() && m_enable_all_tuners_isValid;

    m_enabled_tuners_isValid = ::OpenAPI::fromJsonValue(m_enabled_tuners, json[QString("EnabledTuners")]);
    m_enabled_tuners_isSet = !json[QString("EnabledTuners")].isNull() && m_enabled_tuners_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_kids_categories_isValid = ::OpenAPI::fromJsonValue(m_kids_categories, json[QString("KidsCategories")]);
    m_kids_categories_isSet = !json[QString("KidsCategories")].isNull() && m_kids_categories_isValid;

    m_listings_id_isValid = ::OpenAPI::fromJsonValue(m_listings_id, json[QString("ListingsId")]);
    m_listings_id_isSet = !json[QString("ListingsId")].isNull() && m_listings_id_isValid;

    m_movie_categories_isValid = ::OpenAPI::fromJsonValue(m_movie_categories, json[QString("MovieCategories")]);
    m_movie_categories_isSet = !json[QString("MovieCategories")].isNull() && m_movie_categories_isValid;

    m_movie_prefix_isValid = ::OpenAPI::fromJsonValue(m_movie_prefix, json[QString("MoviePrefix")]);
    m_movie_prefix_isSet = !json[QString("MoviePrefix")].isNull() && m_movie_prefix_isValid;

    m_news_categories_isValid = ::OpenAPI::fromJsonValue(m_news_categories, json[QString("NewsCategories")]);
    m_news_categories_isSet = !json[QString("NewsCategories")].isNull() && m_news_categories_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_preferred_language_isValid = ::OpenAPI::fromJsonValue(m_preferred_language, json[QString("PreferredLanguage")]);
    m_preferred_language_isSet = !json[QString("PreferredLanguage")].isNull() && m_preferred_language_isValid;

    m_sports_categories_isValid = ::OpenAPI::fromJsonValue(m_sports_categories, json[QString("SportsCategories")]);
    m_sports_categories_isSet = !json[QString("SportsCategories")].isNull() && m_sports_categories_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("UserAgent")]);
    m_user_agent_isSet = !json[QString("UserAgent")].isNull() && m_user_agent_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("ZipCode")]);
    m_zip_code_isSet = !json[QString("ZipCode")].isNull() && m_zip_code_isValid;
}

QString OAIListingsProviderInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListingsProviderInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_mappings.size() > 0) {
        obj.insert(QString("ChannelMappings"), ::OpenAPI::toJsonValue(m_channel_mappings));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_enable_all_tuners_isSet) {
        obj.insert(QString("EnableAllTuners"), ::OpenAPI::toJsonValue(m_enable_all_tuners));
    }
    if (m_enabled_tuners.size() > 0) {
        obj.insert(QString("EnabledTuners"), ::OpenAPI::toJsonValue(m_enabled_tuners));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kids_categories.size() > 0) {
        obj.insert(QString("KidsCategories"), ::OpenAPI::toJsonValue(m_kids_categories));
    }
    if (m_listings_id_isSet) {
        obj.insert(QString("ListingsId"), ::OpenAPI::toJsonValue(m_listings_id));
    }
    if (m_movie_categories.size() > 0) {
        obj.insert(QString("MovieCategories"), ::OpenAPI::toJsonValue(m_movie_categories));
    }
    if (m_movie_prefix_isSet) {
        obj.insert(QString("MoviePrefix"), ::OpenAPI::toJsonValue(m_movie_prefix));
    }
    if (m_news_categories.size() > 0) {
        obj.insert(QString("NewsCategories"), ::OpenAPI::toJsonValue(m_news_categories));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_preferred_language_isSet) {
        obj.insert(QString("PreferredLanguage"), ::OpenAPI::toJsonValue(m_preferred_language));
    }
    if (m_sports_categories.size() > 0) {
        obj.insert(QString("SportsCategories"), ::OpenAPI::toJsonValue(m_sports_categories));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("UserAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("ZipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QList<OAINameValuePair> OAIListingsProviderInfo::getChannelMappings() const {
    return m_channel_mappings;
}
void OAIListingsProviderInfo::setChannelMappings(const QList<OAINameValuePair> &channel_mappings) {
    m_channel_mappings = channel_mappings;
    m_channel_mappings_isSet = true;
}

bool OAIListingsProviderInfo::is_channel_mappings_Set() const{
    return m_channel_mappings_isSet;
}

bool OAIListingsProviderInfo::is_channel_mappings_Valid() const{
    return m_channel_mappings_isValid;
}

QString OAIListingsProviderInfo::getCountry() const {
    return m_country;
}
void OAIListingsProviderInfo::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIListingsProviderInfo::is_country_Set() const{
    return m_country_isSet;
}

bool OAIListingsProviderInfo::is_country_Valid() const{
    return m_country_isValid;
}

bool OAIListingsProviderInfo::isEnableAllTuners() const {
    return m_enable_all_tuners;
}
void OAIListingsProviderInfo::setEnableAllTuners(const bool &enable_all_tuners) {
    m_enable_all_tuners = enable_all_tuners;
    m_enable_all_tuners_isSet = true;
}

bool OAIListingsProviderInfo::is_enable_all_tuners_Set() const{
    return m_enable_all_tuners_isSet;
}

bool OAIListingsProviderInfo::is_enable_all_tuners_Valid() const{
    return m_enable_all_tuners_isValid;
}

QList<QString> OAIListingsProviderInfo::getEnabledTuners() const {
    return m_enabled_tuners;
}
void OAIListingsProviderInfo::setEnabledTuners(const QList<QString> &enabled_tuners) {
    m_enabled_tuners = enabled_tuners;
    m_enabled_tuners_isSet = true;
}

bool OAIListingsProviderInfo::is_enabled_tuners_Set() const{
    return m_enabled_tuners_isSet;
}

bool OAIListingsProviderInfo::is_enabled_tuners_Valid() const{
    return m_enabled_tuners_isValid;
}

QString OAIListingsProviderInfo::getId() const {
    return m_id;
}
void OAIListingsProviderInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIListingsProviderInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIListingsProviderInfo::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIListingsProviderInfo::getKidsCategories() const {
    return m_kids_categories;
}
void OAIListingsProviderInfo::setKidsCategories(const QList<QString> &kids_categories) {
    m_kids_categories = kids_categories;
    m_kids_categories_isSet = true;
}

bool OAIListingsProviderInfo::is_kids_categories_Set() const{
    return m_kids_categories_isSet;
}

bool OAIListingsProviderInfo::is_kids_categories_Valid() const{
    return m_kids_categories_isValid;
}

QString OAIListingsProviderInfo::getListingsId() const {
    return m_listings_id;
}
void OAIListingsProviderInfo::setListingsId(const QString &listings_id) {
    m_listings_id = listings_id;
    m_listings_id_isSet = true;
}

bool OAIListingsProviderInfo::is_listings_id_Set() const{
    return m_listings_id_isSet;
}

bool OAIListingsProviderInfo::is_listings_id_Valid() const{
    return m_listings_id_isValid;
}

QList<QString> OAIListingsProviderInfo::getMovieCategories() const {
    return m_movie_categories;
}
void OAIListingsProviderInfo::setMovieCategories(const QList<QString> &movie_categories) {
    m_movie_categories = movie_categories;
    m_movie_categories_isSet = true;
}

bool OAIListingsProviderInfo::is_movie_categories_Set() const{
    return m_movie_categories_isSet;
}

bool OAIListingsProviderInfo::is_movie_categories_Valid() const{
    return m_movie_categories_isValid;
}

QString OAIListingsProviderInfo::getMoviePrefix() const {
    return m_movie_prefix;
}
void OAIListingsProviderInfo::setMoviePrefix(const QString &movie_prefix) {
    m_movie_prefix = movie_prefix;
    m_movie_prefix_isSet = true;
}

bool OAIListingsProviderInfo::is_movie_prefix_Set() const{
    return m_movie_prefix_isSet;
}

bool OAIListingsProviderInfo::is_movie_prefix_Valid() const{
    return m_movie_prefix_isValid;
}

QList<QString> OAIListingsProviderInfo::getNewsCategories() const {
    return m_news_categories;
}
void OAIListingsProviderInfo::setNewsCategories(const QList<QString> &news_categories) {
    m_news_categories = news_categories;
    m_news_categories_isSet = true;
}

bool OAIListingsProviderInfo::is_news_categories_Set() const{
    return m_news_categories_isSet;
}

bool OAIListingsProviderInfo::is_news_categories_Valid() const{
    return m_news_categories_isValid;
}

QString OAIListingsProviderInfo::getPassword() const {
    return m_password;
}
void OAIListingsProviderInfo::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIListingsProviderInfo::is_password_Set() const{
    return m_password_isSet;
}

bool OAIListingsProviderInfo::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIListingsProviderInfo::getPath() const {
    return m_path;
}
void OAIListingsProviderInfo::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIListingsProviderInfo::is_path_Set() const{
    return m_path_isSet;
}

bool OAIListingsProviderInfo::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIListingsProviderInfo::getPreferredLanguage() const {
    return m_preferred_language;
}
void OAIListingsProviderInfo::setPreferredLanguage(const QString &preferred_language) {
    m_preferred_language = preferred_language;
    m_preferred_language_isSet = true;
}

bool OAIListingsProviderInfo::is_preferred_language_Set() const{
    return m_preferred_language_isSet;
}

bool OAIListingsProviderInfo::is_preferred_language_Valid() const{
    return m_preferred_language_isValid;
}

QList<QString> OAIListingsProviderInfo::getSportsCategories() const {
    return m_sports_categories;
}
void OAIListingsProviderInfo::setSportsCategories(const QList<QString> &sports_categories) {
    m_sports_categories = sports_categories;
    m_sports_categories_isSet = true;
}

bool OAIListingsProviderInfo::is_sports_categories_Set() const{
    return m_sports_categories_isSet;
}

bool OAIListingsProviderInfo::is_sports_categories_Valid() const{
    return m_sports_categories_isValid;
}

QString OAIListingsProviderInfo::getType() const {
    return m_type;
}
void OAIListingsProviderInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListingsProviderInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListingsProviderInfo::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIListingsProviderInfo::getUserAgent() const {
    return m_user_agent;
}
void OAIListingsProviderInfo::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIListingsProviderInfo::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIListingsProviderInfo::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

QString OAIListingsProviderInfo::getUsername() const {
    return m_username;
}
void OAIListingsProviderInfo::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIListingsProviderInfo::is_username_Set() const{
    return m_username_isSet;
}

bool OAIListingsProviderInfo::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIListingsProviderInfo::getZipCode() const {
    return m_zip_code;
}
void OAIListingsProviderInfo::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIListingsProviderInfo::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIListingsProviderInfo::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIListingsProviderInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_all_tuners_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_tuners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kids_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_listings_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_movie_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_movie_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_news_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sports_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListingsProviderInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
