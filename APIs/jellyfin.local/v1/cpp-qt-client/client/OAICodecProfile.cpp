/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodecProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodecProfile::OAICodecProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodecProfile::OAICodecProfile() {
    this->initializeModel();
}

OAICodecProfile::~OAICodecProfile() {}

void OAICodecProfile::initializeModel() {

    m_apply_conditions_isSet = false;
    m_apply_conditions_isValid = false;

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICodecProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodecProfile::fromJsonObject(QJsonObject json) {

    m_apply_conditions_isValid = ::OpenAPI::fromJsonValue(m_apply_conditions, json[QString("ApplyConditions")]);
    m_apply_conditions_isSet = !json[QString("ApplyConditions")].isNull() && m_apply_conditions_isValid;

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("Codec")]);
    m_codec_isSet = !json[QString("Codec")].isNull() && m_codec_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("Conditions")]);
    m_conditions_isSet = !json[QString("Conditions")].isNull() && m_conditions_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("Container")]);
    m_container_isSet = !json[QString("Container")].isNull() && m_container_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAICodecProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodecProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_conditions.size() > 0) {
        obj.insert(QString("ApplyConditions"), ::OpenAPI::toJsonValue(m_apply_conditions));
    }
    if (m_codec_isSet) {
        obj.insert(QString("Codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("Conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_container_isSet) {
        obj.insert(QString("Container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIProfileCondition> OAICodecProfile::getApplyConditions() const {
    return m_apply_conditions;
}
void OAICodecProfile::setApplyConditions(const QList<OAIProfileCondition> &apply_conditions) {
    m_apply_conditions = apply_conditions;
    m_apply_conditions_isSet = true;
}

bool OAICodecProfile::is_apply_conditions_Set() const{
    return m_apply_conditions_isSet;
}

bool OAICodecProfile::is_apply_conditions_Valid() const{
    return m_apply_conditions_isValid;
}

QString OAICodecProfile::getCodec() const {
    return m_codec;
}
void OAICodecProfile::setCodec(const QString &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAICodecProfile::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAICodecProfile::is_codec_Valid() const{
    return m_codec_isValid;
}

QList<OAIProfileCondition> OAICodecProfile::getConditions() const {
    return m_conditions;
}
void OAICodecProfile::setConditions(const QList<OAIProfileCondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAICodecProfile::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAICodecProfile::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAICodecProfile::getContainer() const {
    return m_container;
}
void OAICodecProfile::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAICodecProfile::is_container_Set() const{
    return m_container_isSet;
}

bool OAICodecProfile::is_container_Valid() const{
    return m_container_isValid;
}

OAICodecType OAICodecProfile::getType() const {
    return m_type;
}
void OAICodecProfile::setType(const OAICodecType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICodecProfile::is_type_Set() const{
    return m_type_isSet;
}

bool OAICodecProfile::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICodecProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodecProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
