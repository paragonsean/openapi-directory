/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserConfiguration::OAIUserConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserConfiguration::OAIUserConfiguration() {
    this->initializeModel();
}

OAIUserConfiguration::~OAIUserConfiguration() {}

void OAIUserConfiguration::initializeModel() {

    m_audio_language_preference_isSet = false;
    m_audio_language_preference_isValid = false;

    m_display_collections_view_isSet = false;
    m_display_collections_view_isValid = false;

    m_display_missing_episodes_isSet = false;
    m_display_missing_episodes_isValid = false;

    m_enable_local_password_isSet = false;
    m_enable_local_password_isValid = false;

    m_enable_next_episode_auto_play_isSet = false;
    m_enable_next_episode_auto_play_isValid = false;

    m_grouped_folders_isSet = false;
    m_grouped_folders_isValid = false;

    m_hide_played_in_latest_isSet = false;
    m_hide_played_in_latest_isValid = false;

    m_latest_items_excludes_isSet = false;
    m_latest_items_excludes_isValid = false;

    m_my_media_excludes_isSet = false;
    m_my_media_excludes_isValid = false;

    m_ordered_views_isSet = false;
    m_ordered_views_isValid = false;

    m_play_default_audio_track_isSet = false;
    m_play_default_audio_track_isValid = false;

    m_remember_audio_selections_isSet = false;
    m_remember_audio_selections_isValid = false;

    m_remember_subtitle_selections_isSet = false;
    m_remember_subtitle_selections_isValid = false;

    m_subtitle_language_preference_isSet = false;
    m_subtitle_language_preference_isValid = false;

    m_subtitle_mode_isSet = false;
    m_subtitle_mode_isValid = false;
}

void OAIUserConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserConfiguration::fromJsonObject(QJsonObject json) {

    m_audio_language_preference_isValid = ::OpenAPI::fromJsonValue(m_audio_language_preference, json[QString("AudioLanguagePreference")]);
    m_audio_language_preference_isSet = !json[QString("AudioLanguagePreference")].isNull() && m_audio_language_preference_isValid;

    m_display_collections_view_isValid = ::OpenAPI::fromJsonValue(m_display_collections_view, json[QString("DisplayCollectionsView")]);
    m_display_collections_view_isSet = !json[QString("DisplayCollectionsView")].isNull() && m_display_collections_view_isValid;

    m_display_missing_episodes_isValid = ::OpenAPI::fromJsonValue(m_display_missing_episodes, json[QString("DisplayMissingEpisodes")]);
    m_display_missing_episodes_isSet = !json[QString("DisplayMissingEpisodes")].isNull() && m_display_missing_episodes_isValid;

    m_enable_local_password_isValid = ::OpenAPI::fromJsonValue(m_enable_local_password, json[QString("EnableLocalPassword")]);
    m_enable_local_password_isSet = !json[QString("EnableLocalPassword")].isNull() && m_enable_local_password_isValid;

    m_enable_next_episode_auto_play_isValid = ::OpenAPI::fromJsonValue(m_enable_next_episode_auto_play, json[QString("EnableNextEpisodeAutoPlay")]);
    m_enable_next_episode_auto_play_isSet = !json[QString("EnableNextEpisodeAutoPlay")].isNull() && m_enable_next_episode_auto_play_isValid;

    m_grouped_folders_isValid = ::OpenAPI::fromJsonValue(m_grouped_folders, json[QString("GroupedFolders")]);
    m_grouped_folders_isSet = !json[QString("GroupedFolders")].isNull() && m_grouped_folders_isValid;

    m_hide_played_in_latest_isValid = ::OpenAPI::fromJsonValue(m_hide_played_in_latest, json[QString("HidePlayedInLatest")]);
    m_hide_played_in_latest_isSet = !json[QString("HidePlayedInLatest")].isNull() && m_hide_played_in_latest_isValid;

    m_latest_items_excludes_isValid = ::OpenAPI::fromJsonValue(m_latest_items_excludes, json[QString("LatestItemsExcludes")]);
    m_latest_items_excludes_isSet = !json[QString("LatestItemsExcludes")].isNull() && m_latest_items_excludes_isValid;

    m_my_media_excludes_isValid = ::OpenAPI::fromJsonValue(m_my_media_excludes, json[QString("MyMediaExcludes")]);
    m_my_media_excludes_isSet = !json[QString("MyMediaExcludes")].isNull() && m_my_media_excludes_isValid;

    m_ordered_views_isValid = ::OpenAPI::fromJsonValue(m_ordered_views, json[QString("OrderedViews")]);
    m_ordered_views_isSet = !json[QString("OrderedViews")].isNull() && m_ordered_views_isValid;

    m_play_default_audio_track_isValid = ::OpenAPI::fromJsonValue(m_play_default_audio_track, json[QString("PlayDefaultAudioTrack")]);
    m_play_default_audio_track_isSet = !json[QString("PlayDefaultAudioTrack")].isNull() && m_play_default_audio_track_isValid;

    m_remember_audio_selections_isValid = ::OpenAPI::fromJsonValue(m_remember_audio_selections, json[QString("RememberAudioSelections")]);
    m_remember_audio_selections_isSet = !json[QString("RememberAudioSelections")].isNull() && m_remember_audio_selections_isValid;

    m_remember_subtitle_selections_isValid = ::OpenAPI::fromJsonValue(m_remember_subtitle_selections, json[QString("RememberSubtitleSelections")]);
    m_remember_subtitle_selections_isSet = !json[QString("RememberSubtitleSelections")].isNull() && m_remember_subtitle_selections_isValid;

    m_subtitle_language_preference_isValid = ::OpenAPI::fromJsonValue(m_subtitle_language_preference, json[QString("SubtitleLanguagePreference")]);
    m_subtitle_language_preference_isSet = !json[QString("SubtitleLanguagePreference")].isNull() && m_subtitle_language_preference_isValid;

    m_subtitle_mode_isValid = ::OpenAPI::fromJsonValue(m_subtitle_mode, json[QString("SubtitleMode")]);
    m_subtitle_mode_isSet = !json[QString("SubtitleMode")].isNull() && m_subtitle_mode_isValid;
}

QString OAIUserConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_language_preference_isSet) {
        obj.insert(QString("AudioLanguagePreference"), ::OpenAPI::toJsonValue(m_audio_language_preference));
    }
    if (m_display_collections_view_isSet) {
        obj.insert(QString("DisplayCollectionsView"), ::OpenAPI::toJsonValue(m_display_collections_view));
    }
    if (m_display_missing_episodes_isSet) {
        obj.insert(QString("DisplayMissingEpisodes"), ::OpenAPI::toJsonValue(m_display_missing_episodes));
    }
    if (m_enable_local_password_isSet) {
        obj.insert(QString("EnableLocalPassword"), ::OpenAPI::toJsonValue(m_enable_local_password));
    }
    if (m_enable_next_episode_auto_play_isSet) {
        obj.insert(QString("EnableNextEpisodeAutoPlay"), ::OpenAPI::toJsonValue(m_enable_next_episode_auto_play));
    }
    if (m_grouped_folders.size() > 0) {
        obj.insert(QString("GroupedFolders"), ::OpenAPI::toJsonValue(m_grouped_folders));
    }
    if (m_hide_played_in_latest_isSet) {
        obj.insert(QString("HidePlayedInLatest"), ::OpenAPI::toJsonValue(m_hide_played_in_latest));
    }
    if (m_latest_items_excludes.size() > 0) {
        obj.insert(QString("LatestItemsExcludes"), ::OpenAPI::toJsonValue(m_latest_items_excludes));
    }
    if (m_my_media_excludes.size() > 0) {
        obj.insert(QString("MyMediaExcludes"), ::OpenAPI::toJsonValue(m_my_media_excludes));
    }
    if (m_ordered_views.size() > 0) {
        obj.insert(QString("OrderedViews"), ::OpenAPI::toJsonValue(m_ordered_views));
    }
    if (m_play_default_audio_track_isSet) {
        obj.insert(QString("PlayDefaultAudioTrack"), ::OpenAPI::toJsonValue(m_play_default_audio_track));
    }
    if (m_remember_audio_selections_isSet) {
        obj.insert(QString("RememberAudioSelections"), ::OpenAPI::toJsonValue(m_remember_audio_selections));
    }
    if (m_remember_subtitle_selections_isSet) {
        obj.insert(QString("RememberSubtitleSelections"), ::OpenAPI::toJsonValue(m_remember_subtitle_selections));
    }
    if (m_subtitle_language_preference_isSet) {
        obj.insert(QString("SubtitleLanguagePreference"), ::OpenAPI::toJsonValue(m_subtitle_language_preference));
    }
    if (m_subtitle_mode.isSet()) {
        obj.insert(QString("SubtitleMode"), ::OpenAPI::toJsonValue(m_subtitle_mode));
    }
    return obj;
}

QString OAIUserConfiguration::getAudioLanguagePreference() const {
    return m_audio_language_preference;
}
void OAIUserConfiguration::setAudioLanguagePreference(const QString &audio_language_preference) {
    m_audio_language_preference = audio_language_preference;
    m_audio_language_preference_isSet = true;
}

bool OAIUserConfiguration::is_audio_language_preference_Set() const{
    return m_audio_language_preference_isSet;
}

bool OAIUserConfiguration::is_audio_language_preference_Valid() const{
    return m_audio_language_preference_isValid;
}

bool OAIUserConfiguration::isDisplayCollectionsView() const {
    return m_display_collections_view;
}
void OAIUserConfiguration::setDisplayCollectionsView(const bool &display_collections_view) {
    m_display_collections_view = display_collections_view;
    m_display_collections_view_isSet = true;
}

bool OAIUserConfiguration::is_display_collections_view_Set() const{
    return m_display_collections_view_isSet;
}

bool OAIUserConfiguration::is_display_collections_view_Valid() const{
    return m_display_collections_view_isValid;
}

bool OAIUserConfiguration::isDisplayMissingEpisodes() const {
    return m_display_missing_episodes;
}
void OAIUserConfiguration::setDisplayMissingEpisodes(const bool &display_missing_episodes) {
    m_display_missing_episodes = display_missing_episodes;
    m_display_missing_episodes_isSet = true;
}

bool OAIUserConfiguration::is_display_missing_episodes_Set() const{
    return m_display_missing_episodes_isSet;
}

bool OAIUserConfiguration::is_display_missing_episodes_Valid() const{
    return m_display_missing_episodes_isValid;
}

bool OAIUserConfiguration::isEnableLocalPassword() const {
    return m_enable_local_password;
}
void OAIUserConfiguration::setEnableLocalPassword(const bool &enable_local_password) {
    m_enable_local_password = enable_local_password;
    m_enable_local_password_isSet = true;
}

bool OAIUserConfiguration::is_enable_local_password_Set() const{
    return m_enable_local_password_isSet;
}

bool OAIUserConfiguration::is_enable_local_password_Valid() const{
    return m_enable_local_password_isValid;
}

bool OAIUserConfiguration::isEnableNextEpisodeAutoPlay() const {
    return m_enable_next_episode_auto_play;
}
void OAIUserConfiguration::setEnableNextEpisodeAutoPlay(const bool &enable_next_episode_auto_play) {
    m_enable_next_episode_auto_play = enable_next_episode_auto_play;
    m_enable_next_episode_auto_play_isSet = true;
}

bool OAIUserConfiguration::is_enable_next_episode_auto_play_Set() const{
    return m_enable_next_episode_auto_play_isSet;
}

bool OAIUserConfiguration::is_enable_next_episode_auto_play_Valid() const{
    return m_enable_next_episode_auto_play_isValid;
}

QList<QString> OAIUserConfiguration::getGroupedFolders() const {
    return m_grouped_folders;
}
void OAIUserConfiguration::setGroupedFolders(const QList<QString> &grouped_folders) {
    m_grouped_folders = grouped_folders;
    m_grouped_folders_isSet = true;
}

bool OAIUserConfiguration::is_grouped_folders_Set() const{
    return m_grouped_folders_isSet;
}

bool OAIUserConfiguration::is_grouped_folders_Valid() const{
    return m_grouped_folders_isValid;
}

bool OAIUserConfiguration::isHidePlayedInLatest() const {
    return m_hide_played_in_latest;
}
void OAIUserConfiguration::setHidePlayedInLatest(const bool &hide_played_in_latest) {
    m_hide_played_in_latest = hide_played_in_latest;
    m_hide_played_in_latest_isSet = true;
}

bool OAIUserConfiguration::is_hide_played_in_latest_Set() const{
    return m_hide_played_in_latest_isSet;
}

bool OAIUserConfiguration::is_hide_played_in_latest_Valid() const{
    return m_hide_played_in_latest_isValid;
}

QList<QString> OAIUserConfiguration::getLatestItemsExcludes() const {
    return m_latest_items_excludes;
}
void OAIUserConfiguration::setLatestItemsExcludes(const QList<QString> &latest_items_excludes) {
    m_latest_items_excludes = latest_items_excludes;
    m_latest_items_excludes_isSet = true;
}

bool OAIUserConfiguration::is_latest_items_excludes_Set() const{
    return m_latest_items_excludes_isSet;
}

bool OAIUserConfiguration::is_latest_items_excludes_Valid() const{
    return m_latest_items_excludes_isValid;
}

QList<QString> OAIUserConfiguration::getMyMediaExcludes() const {
    return m_my_media_excludes;
}
void OAIUserConfiguration::setMyMediaExcludes(const QList<QString> &my_media_excludes) {
    m_my_media_excludes = my_media_excludes;
    m_my_media_excludes_isSet = true;
}

bool OAIUserConfiguration::is_my_media_excludes_Set() const{
    return m_my_media_excludes_isSet;
}

bool OAIUserConfiguration::is_my_media_excludes_Valid() const{
    return m_my_media_excludes_isValid;
}

QList<QString> OAIUserConfiguration::getOrderedViews() const {
    return m_ordered_views;
}
void OAIUserConfiguration::setOrderedViews(const QList<QString> &ordered_views) {
    m_ordered_views = ordered_views;
    m_ordered_views_isSet = true;
}

bool OAIUserConfiguration::is_ordered_views_Set() const{
    return m_ordered_views_isSet;
}

bool OAIUserConfiguration::is_ordered_views_Valid() const{
    return m_ordered_views_isValid;
}

bool OAIUserConfiguration::isPlayDefaultAudioTrack() const {
    return m_play_default_audio_track;
}
void OAIUserConfiguration::setPlayDefaultAudioTrack(const bool &play_default_audio_track) {
    m_play_default_audio_track = play_default_audio_track;
    m_play_default_audio_track_isSet = true;
}

bool OAIUserConfiguration::is_play_default_audio_track_Set() const{
    return m_play_default_audio_track_isSet;
}

bool OAIUserConfiguration::is_play_default_audio_track_Valid() const{
    return m_play_default_audio_track_isValid;
}

bool OAIUserConfiguration::isRememberAudioSelections() const {
    return m_remember_audio_selections;
}
void OAIUserConfiguration::setRememberAudioSelections(const bool &remember_audio_selections) {
    m_remember_audio_selections = remember_audio_selections;
    m_remember_audio_selections_isSet = true;
}

bool OAIUserConfiguration::is_remember_audio_selections_Set() const{
    return m_remember_audio_selections_isSet;
}

bool OAIUserConfiguration::is_remember_audio_selections_Valid() const{
    return m_remember_audio_selections_isValid;
}

bool OAIUserConfiguration::isRememberSubtitleSelections() const {
    return m_remember_subtitle_selections;
}
void OAIUserConfiguration::setRememberSubtitleSelections(const bool &remember_subtitle_selections) {
    m_remember_subtitle_selections = remember_subtitle_selections;
    m_remember_subtitle_selections_isSet = true;
}

bool OAIUserConfiguration::is_remember_subtitle_selections_Set() const{
    return m_remember_subtitle_selections_isSet;
}

bool OAIUserConfiguration::is_remember_subtitle_selections_Valid() const{
    return m_remember_subtitle_selections_isValid;
}

QString OAIUserConfiguration::getSubtitleLanguagePreference() const {
    return m_subtitle_language_preference;
}
void OAIUserConfiguration::setSubtitleLanguagePreference(const QString &subtitle_language_preference) {
    m_subtitle_language_preference = subtitle_language_preference;
    m_subtitle_language_preference_isSet = true;
}

bool OAIUserConfiguration::is_subtitle_language_preference_Set() const{
    return m_subtitle_language_preference_isSet;
}

bool OAIUserConfiguration::is_subtitle_language_preference_Valid() const{
    return m_subtitle_language_preference_isValid;
}

OAISubtitlePlaybackMode OAIUserConfiguration::getSubtitleMode() const {
    return m_subtitle_mode;
}
void OAIUserConfiguration::setSubtitleMode(const OAISubtitlePlaybackMode &subtitle_mode) {
    m_subtitle_mode = subtitle_mode;
    m_subtitle_mode_isSet = true;
}

bool OAIUserConfiguration::is_subtitle_mode_Set() const{
    return m_subtitle_mode_isSet;
}

bool OAIUserConfiguration::is_subtitle_mode_Valid() const{
    return m_subtitle_mode_isValid;
}

bool OAIUserConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_language_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_collections_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_missing_episodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_local_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_next_episode_auto_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouped_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_played_in_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_items_excludes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_media_excludes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordered_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_default_audio_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remember_audio_selections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remember_subtitle_selections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_language_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
