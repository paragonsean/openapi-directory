/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranscodeReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranscodeReason::OAITranscodeReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranscodeReason::OAITranscodeReason() {
    this->initializeModel();
}

OAITranscodeReason::~OAITranscodeReason() {}

void OAITranscodeReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITranscodeReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITranscodeReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ContainerNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::CONTAINERNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoCodecNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::VIDEOCODECNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioCodecNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::AUDIOCODECNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ContainerBitrateExceedsLimit", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::CONTAINERBITRATEEXCEEDSLIMIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioBitrateNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::AUDIOBITRATENOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioChannelsNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::AUDIOCHANNELSNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoResolutionNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::VIDEORESOLUTIONNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnknownVideoStreamInfo", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::UNKNOWNVIDEOSTREAMINFO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnknownAudioStreamInfo", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::UNKNOWNAUDIOSTREAMINFO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioProfileNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::AUDIOPROFILENOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioSampleRateNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::AUDIOSAMPLERATENOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AnamorphicVideoNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::ANAMORPHICVIDEONOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InterlacedVideoNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::INTERLACEDVIDEONOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecondaryAudioNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::SECONDARYAUDIONOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RefFramesNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::REFFRAMESNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoBitDepthNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::VIDEOBITDEPTHNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoBitrateNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::VIDEOBITRATENOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoFramerateNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::VIDEOFRAMERATENOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoLevelNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::VIDEOLEVELNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoProfileNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::VIDEOPROFILENOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioBitDepthNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::AUDIOBITDEPTHNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SubtitleCodecNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::SUBTITLECODECNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DirectPlayError", Qt::CaseInsensitive) == 0) {
        m_value = eOAITranscodeReason::DIRECTPLAYERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITranscodeReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITranscodeReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITranscodeReason::CONTAINERNOTSUPPORTED:
            val = "ContainerNotSupported";
            break;
        case eOAITranscodeReason::VIDEOCODECNOTSUPPORTED:
            val = "VideoCodecNotSupported";
            break;
        case eOAITranscodeReason::AUDIOCODECNOTSUPPORTED:
            val = "AudioCodecNotSupported";
            break;
        case eOAITranscodeReason::CONTAINERBITRATEEXCEEDSLIMIT:
            val = "ContainerBitrateExceedsLimit";
            break;
        case eOAITranscodeReason::AUDIOBITRATENOTSUPPORTED:
            val = "AudioBitrateNotSupported";
            break;
        case eOAITranscodeReason::AUDIOCHANNELSNOTSUPPORTED:
            val = "AudioChannelsNotSupported";
            break;
        case eOAITranscodeReason::VIDEORESOLUTIONNOTSUPPORTED:
            val = "VideoResolutionNotSupported";
            break;
        case eOAITranscodeReason::UNKNOWNVIDEOSTREAMINFO:
            val = "UnknownVideoStreamInfo";
            break;
        case eOAITranscodeReason::UNKNOWNAUDIOSTREAMINFO:
            val = "UnknownAudioStreamInfo";
            break;
        case eOAITranscodeReason::AUDIOPROFILENOTSUPPORTED:
            val = "AudioProfileNotSupported";
            break;
        case eOAITranscodeReason::AUDIOSAMPLERATENOTSUPPORTED:
            val = "AudioSampleRateNotSupported";
            break;
        case eOAITranscodeReason::ANAMORPHICVIDEONOTSUPPORTED:
            val = "AnamorphicVideoNotSupported";
            break;
        case eOAITranscodeReason::INTERLACEDVIDEONOTSUPPORTED:
            val = "InterlacedVideoNotSupported";
            break;
        case eOAITranscodeReason::SECONDARYAUDIONOTSUPPORTED:
            val = "SecondaryAudioNotSupported";
            break;
        case eOAITranscodeReason::REFFRAMESNOTSUPPORTED:
            val = "RefFramesNotSupported";
            break;
        case eOAITranscodeReason::VIDEOBITDEPTHNOTSUPPORTED:
            val = "VideoBitDepthNotSupported";
            break;
        case eOAITranscodeReason::VIDEOBITRATENOTSUPPORTED:
            val = "VideoBitrateNotSupported";
            break;
        case eOAITranscodeReason::VIDEOFRAMERATENOTSUPPORTED:
            val = "VideoFramerateNotSupported";
            break;
        case eOAITranscodeReason::VIDEOLEVELNOTSUPPORTED:
            val = "VideoLevelNotSupported";
            break;
        case eOAITranscodeReason::VIDEOPROFILENOTSUPPORTED:
            val = "VideoProfileNotSupported";
            break;
        case eOAITranscodeReason::AUDIOBITDEPTHNOTSUPPORTED:
            val = "AudioBitDepthNotSupported";
            break;
        case eOAITranscodeReason::SUBTITLECODECNOTSUPPORTED:
            val = "SubtitleCodecNotSupported";
            break;
        case eOAITranscodeReason::DIRECTPLAYERROR:
            val = "DirectPlayError";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITranscodeReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITranscodeReason::eOAITranscodeReason OAITranscodeReason::getValue() const {
    return m_value;
}

void OAITranscodeReason::setValue(const OAITranscodeReason::eOAITranscodeReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITranscodeReason::isSet() const {
    
    return m_value_isSet;
}

bool OAITranscodeReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
