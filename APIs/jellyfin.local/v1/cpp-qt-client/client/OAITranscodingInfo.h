/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITranscodingInfo.h
 *
 * 
 */

#ifndef OAITranscodingInfo_H
#define OAITranscodingInfo_H

#include <QJsonObject>

#include "OAITranscodeReason.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITranscodingInfo : public OAIObject {
public:
    OAITranscodingInfo();
    OAITranscodingInfo(QString json);
    ~OAITranscodingInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAudioChannels() const;
    void setAudioChannels(const qint32 &audio_channels);
    bool is_audio_channels_Set() const;
    bool is_audio_channels_Valid() const;

    QString getAudioCodec() const;
    void setAudioCodec(const QString &audio_codec);
    bool is_audio_codec_Set() const;
    bool is_audio_codec_Valid() const;

    qint32 getBitrate() const;
    void setBitrate(const qint32 &bitrate);
    bool is_bitrate_Set() const;
    bool is_bitrate_Valid() const;

    double getCompletionPercentage() const;
    void setCompletionPercentage(const double &completion_percentage);
    bool is_completion_percentage_Set() const;
    bool is_completion_percentage_Valid() const;

    QString getContainer() const;
    void setContainer(const QString &container);
    bool is_container_Set() const;
    bool is_container_Valid() const;

    float getFramerate() const;
    void setFramerate(const float &framerate);
    bool is_framerate_Set() const;
    bool is_framerate_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    bool isIsAudioDirect() const;
    void setIsAudioDirect(const bool &is_audio_direct);
    bool is_is_audio_direct_Set() const;
    bool is_is_audio_direct_Valid() const;

    bool isIsVideoDirect() const;
    void setIsVideoDirect(const bool &is_video_direct);
    bool is_is_video_direct_Set() const;
    bool is_is_video_direct_Valid() const;

    QList<OAITranscodeReason> getTranscodeReasons() const;
    void setTranscodeReasons(const QList<OAITranscodeReason> &transcode_reasons);
    bool is_transcode_reasons_Set() const;
    bool is_transcode_reasons_Valid() const;

    QString getVideoCodec() const;
    void setVideoCodec(const QString &video_codec);
    bool is_video_codec_Set() const;
    bool is_video_codec_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_audio_channels;
    bool m_audio_channels_isSet;
    bool m_audio_channels_isValid;

    QString m_audio_codec;
    bool m_audio_codec_isSet;
    bool m_audio_codec_isValid;

    qint32 m_bitrate;
    bool m_bitrate_isSet;
    bool m_bitrate_isValid;

    double m_completion_percentage;
    bool m_completion_percentage_isSet;
    bool m_completion_percentage_isValid;

    QString m_container;
    bool m_container_isSet;
    bool m_container_isValid;

    float m_framerate;
    bool m_framerate_isSet;
    bool m_framerate_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    bool m_is_audio_direct;
    bool m_is_audio_direct_isSet;
    bool m_is_audio_direct_isValid;

    bool m_is_video_direct;
    bool m_is_video_direct_isSet;
    bool m_is_video_direct_isValid;

    QList<OAITranscodeReason> m_transcode_reasons;
    bool m_transcode_reasons_isSet;
    bool m_transcode_reasons_isValid;

    QString m_video_codec;
    bool m_video_codec_isSet;
    bool m_video_codec_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITranscodingInfo)

#endif // OAITranscodingInfo_H
