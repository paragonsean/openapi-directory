/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualFolderInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualFolderInfo::OAIVirtualFolderInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualFolderInfo::OAIVirtualFolderInfo() {
    this->initializeModel();
}

OAIVirtualFolderInfo::~OAIVirtualFolderInfo() {}

void OAIVirtualFolderInfo::initializeModel() {

    m_collection_type_isSet = false;
    m_collection_type_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_library_options_isSet = false;
    m_library_options_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_image_item_id_isSet = false;
    m_primary_image_item_id_isValid = false;

    m_refresh_progress_isSet = false;
    m_refresh_progress_isValid = false;

    m_refresh_status_isSet = false;
    m_refresh_status_isValid = false;
}

void OAIVirtualFolderInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualFolderInfo::fromJsonObject(QJsonObject json) {

    m_collection_type_isValid = ::OpenAPI::fromJsonValue(m_collection_type, json[QString("CollectionType")]);
    m_collection_type_isSet = !json[QString("CollectionType")].isNull() && m_collection_type_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemId")]);
    m_item_id_isSet = !json[QString("ItemId")].isNull() && m_item_id_isValid;

    m_library_options_isValid = ::OpenAPI::fromJsonValue(m_library_options, json[QString("LibraryOptions")]);
    m_library_options_isSet = !json[QString("LibraryOptions")].isNull() && m_library_options_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("Locations")]);
    m_locations_isSet = !json[QString("Locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_primary_image_item_id_isValid = ::OpenAPI::fromJsonValue(m_primary_image_item_id, json[QString("PrimaryImageItemId")]);
    m_primary_image_item_id_isSet = !json[QString("PrimaryImageItemId")].isNull() && m_primary_image_item_id_isValid;

    m_refresh_progress_isValid = ::OpenAPI::fromJsonValue(m_refresh_progress, json[QString("RefreshProgress")]);
    m_refresh_progress_isSet = !json[QString("RefreshProgress")].isNull() && m_refresh_progress_isValid;

    m_refresh_status_isValid = ::OpenAPI::fromJsonValue(m_refresh_status, json[QString("RefreshStatus")]);
    m_refresh_status_isSet = !json[QString("RefreshStatus")].isNull() && m_refresh_status_isValid;
}

QString OAIVirtualFolderInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualFolderInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_type_isSet) {
        obj.insert(QString("CollectionType"), ::OpenAPI::toJsonValue(m_collection_type));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_library_options.isSet()) {
        obj.insert(QString("LibraryOptions"), ::OpenAPI::toJsonValue(m_library_options));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("Locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_image_item_id_isSet) {
        obj.insert(QString("PrimaryImageItemId"), ::OpenAPI::toJsonValue(m_primary_image_item_id));
    }
    if (m_refresh_progress_isSet) {
        obj.insert(QString("RefreshProgress"), ::OpenAPI::toJsonValue(m_refresh_progress));
    }
    if (m_refresh_status_isSet) {
        obj.insert(QString("RefreshStatus"), ::OpenAPI::toJsonValue(m_refresh_status));
    }
    return obj;
}

QString OAIVirtualFolderInfo::getCollectionType() const {
    return m_collection_type;
}
void OAIVirtualFolderInfo::setCollectionType(const QString &collection_type) {
    m_collection_type = collection_type;
    m_collection_type_isSet = true;
}

bool OAIVirtualFolderInfo::is_collection_type_Set() const{
    return m_collection_type_isSet;
}

bool OAIVirtualFolderInfo::is_collection_type_Valid() const{
    return m_collection_type_isValid;
}

QString OAIVirtualFolderInfo::getItemId() const {
    return m_item_id;
}
void OAIVirtualFolderInfo::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIVirtualFolderInfo::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIVirtualFolderInfo::is_item_id_Valid() const{
    return m_item_id_isValid;
}

OAILibraryOptions OAIVirtualFolderInfo::getLibraryOptions() const {
    return m_library_options;
}
void OAIVirtualFolderInfo::setLibraryOptions(const OAILibraryOptions &library_options) {
    m_library_options = library_options;
    m_library_options_isSet = true;
}

bool OAIVirtualFolderInfo::is_library_options_Set() const{
    return m_library_options_isSet;
}

bool OAIVirtualFolderInfo::is_library_options_Valid() const{
    return m_library_options_isValid;
}

QList<QString> OAIVirtualFolderInfo::getLocations() const {
    return m_locations;
}
void OAIVirtualFolderInfo::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIVirtualFolderInfo::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIVirtualFolderInfo::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIVirtualFolderInfo::getName() const {
    return m_name;
}
void OAIVirtualFolderInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVirtualFolderInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVirtualFolderInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVirtualFolderInfo::getPrimaryImageItemId() const {
    return m_primary_image_item_id;
}
void OAIVirtualFolderInfo::setPrimaryImageItemId(const QString &primary_image_item_id) {
    m_primary_image_item_id = primary_image_item_id;
    m_primary_image_item_id_isSet = true;
}

bool OAIVirtualFolderInfo::is_primary_image_item_id_Set() const{
    return m_primary_image_item_id_isSet;
}

bool OAIVirtualFolderInfo::is_primary_image_item_id_Valid() const{
    return m_primary_image_item_id_isValid;
}

double OAIVirtualFolderInfo::getRefreshProgress() const {
    return m_refresh_progress;
}
void OAIVirtualFolderInfo::setRefreshProgress(const double &refresh_progress) {
    m_refresh_progress = refresh_progress;
    m_refresh_progress_isSet = true;
}

bool OAIVirtualFolderInfo::is_refresh_progress_Set() const{
    return m_refresh_progress_isSet;
}

bool OAIVirtualFolderInfo::is_refresh_progress_Valid() const{
    return m_refresh_progress_isValid;
}

QString OAIVirtualFolderInfo::getRefreshStatus() const {
    return m_refresh_status;
}
void OAIVirtualFolderInfo::setRefreshStatus(const QString &refresh_status) {
    m_refresh_status = refresh_status;
    m_refresh_status_isSet = true;
}

bool OAIVirtualFolderInfo::is_refresh_status_Set() const{
    return m_refresh_status_isSet;
}

bool OAIVirtualFolderInfo::is_refresh_status_Valid() const{
    return m_refresh_status_isValid;
}

bool OAIVirtualFolderInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualFolderInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
