/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileConditionValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileConditionValue::OAIProfileConditionValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileConditionValue::OAIProfileConditionValue() {
    this->initializeModel();
}

OAIProfileConditionValue::~OAIProfileConditionValue() {}

void OAIProfileConditionValue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProfileConditionValue::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProfileConditionValue::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AudioChannels", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::AUDIOCHANNELS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioBitrate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::AUDIOBITRATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioProfile", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::AUDIOPROFILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Width", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::WIDTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Height", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::HEIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Has64BitOffsets", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::HAS64BITOFFSETS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PacketLength", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::PACKETLENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoBitDepth", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::VIDEOBITDEPTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoBitrate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::VIDEOBITRATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoFramerate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::VIDEOFRAMERATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoLevel", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::VIDEOLEVEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoProfile", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::VIDEOPROFILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoTimestamp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::VIDEOTIMESTAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsAnamorphic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::ISANAMORPHIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RefFrames", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::REFFRAMES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NumAudioStreams", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::NUMAUDIOSTREAMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NumVideoStreams", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::NUMVIDEOSTREAMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsSecondaryAudio", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::ISSECONDARYAUDIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VideoCodecTag", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::VIDEOCODECTAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsAvc", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::ISAVC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsInterlaced", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::ISINTERLACED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioSampleRate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::AUDIOSAMPLERATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AudioBitDepth", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionValue::AUDIOBITDEPTH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProfileConditionValue::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProfileConditionValue::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProfileConditionValue::AUDIOCHANNELS:
            val = "AudioChannels";
            break;
        case eOAIProfileConditionValue::AUDIOBITRATE:
            val = "AudioBitrate";
            break;
        case eOAIProfileConditionValue::AUDIOPROFILE:
            val = "AudioProfile";
            break;
        case eOAIProfileConditionValue::WIDTH:
            val = "Width";
            break;
        case eOAIProfileConditionValue::HEIGHT:
            val = "Height";
            break;
        case eOAIProfileConditionValue::HAS64BITOFFSETS:
            val = "Has64BitOffsets";
            break;
        case eOAIProfileConditionValue::PACKETLENGTH:
            val = "PacketLength";
            break;
        case eOAIProfileConditionValue::VIDEOBITDEPTH:
            val = "VideoBitDepth";
            break;
        case eOAIProfileConditionValue::VIDEOBITRATE:
            val = "VideoBitrate";
            break;
        case eOAIProfileConditionValue::VIDEOFRAMERATE:
            val = "VideoFramerate";
            break;
        case eOAIProfileConditionValue::VIDEOLEVEL:
            val = "VideoLevel";
            break;
        case eOAIProfileConditionValue::VIDEOPROFILE:
            val = "VideoProfile";
            break;
        case eOAIProfileConditionValue::VIDEOTIMESTAMP:
            val = "VideoTimestamp";
            break;
        case eOAIProfileConditionValue::ISANAMORPHIC:
            val = "IsAnamorphic";
            break;
        case eOAIProfileConditionValue::REFFRAMES:
            val = "RefFrames";
            break;
        case eOAIProfileConditionValue::NUMAUDIOSTREAMS:
            val = "NumAudioStreams";
            break;
        case eOAIProfileConditionValue::NUMVIDEOSTREAMS:
            val = "NumVideoStreams";
            break;
        case eOAIProfileConditionValue::ISSECONDARYAUDIO:
            val = "IsSecondaryAudio";
            break;
        case eOAIProfileConditionValue::VIDEOCODECTAG:
            val = "VideoCodecTag";
            break;
        case eOAIProfileConditionValue::ISAVC:
            val = "IsAvc";
            break;
        case eOAIProfileConditionValue::ISINTERLACED:
            val = "IsInterlaced";
            break;
        case eOAIProfileConditionValue::AUDIOSAMPLERATE:
            val = "AudioSampleRate";
            break;
        case eOAIProfileConditionValue::AUDIOBITDEPTH:
            val = "AudioBitDepth";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProfileConditionValue::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProfileConditionValue::eOAIProfileConditionValue OAIProfileConditionValue::getValue() const {
    return m_value;
}

void OAIProfileConditionValue::setValue(const OAIProfileConditionValue::eOAIProfileConditionValue& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProfileConditionValue::isSet() const {
    
    return m_value_isSet;
}

bool OAIProfileConditionValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
