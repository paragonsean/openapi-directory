/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOpenLiveStreamDto.h
 *
 * Open live stream dto.
 */

#ifndef OAIOpenLiveStreamDto_H
#define OAIOpenLiveStreamDto_H

#include <QJsonObject>

#include "OAIDeviceProfile.h"
#include "OAIMediaProtocol.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeviceProfile;

class OAIOpenLiveStreamDto : public OAIObject {
public:
    OAIOpenLiveStreamDto();
    OAIOpenLiveStreamDto(QString json);
    ~OAIOpenLiveStreamDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAudioStreamIndex() const;
    void setAudioStreamIndex(const qint32 &audio_stream_index);
    bool is_audio_stream_index_Set() const;
    bool is_audio_stream_index_Valid() const;

    OAIDeviceProfile getDeviceProfile() const;
    void setDeviceProfile(const OAIDeviceProfile &device_profile);
    bool is_device_profile_Set() const;
    bool is_device_profile_Valid() const;

    QList<OAIMediaProtocol> getDirectPlayProtocols() const;
    void setDirectPlayProtocols(const QList<OAIMediaProtocol> &direct_play_protocols);
    bool is_direct_play_protocols_Set() const;
    bool is_direct_play_protocols_Valid() const;

    bool isEnableDirectPlay() const;
    void setEnableDirectPlay(const bool &enable_direct_play);
    bool is_enable_direct_play_Set() const;
    bool is_enable_direct_play_Valid() const;

    bool isEnableDirectStream() const;
    void setEnableDirectStream(const bool &enable_direct_stream);
    bool is_enable_direct_stream_Set() const;
    bool is_enable_direct_stream_Valid() const;

    QString getItemId() const;
    void setItemId(const QString &item_id);
    bool is_item_id_Set() const;
    bool is_item_id_Valid() const;

    qint32 getMaxAudioChannels() const;
    void setMaxAudioChannels(const qint32 &max_audio_channels);
    bool is_max_audio_channels_Set() const;
    bool is_max_audio_channels_Valid() const;

    qint32 getMaxStreamingBitrate() const;
    void setMaxStreamingBitrate(const qint32 &max_streaming_bitrate);
    bool is_max_streaming_bitrate_Set() const;
    bool is_max_streaming_bitrate_Valid() const;

    QString getOpenToken() const;
    void setOpenToken(const QString &open_token);
    bool is_open_token_Set() const;
    bool is_open_token_Valid() const;

    QString getPlaySessionId() const;
    void setPlaySessionId(const QString &play_session_id);
    bool is_play_session_id_Set() const;
    bool is_play_session_id_Valid() const;

    qint64 getStartTimeTicks() const;
    void setStartTimeTicks(const qint64 &start_time_ticks);
    bool is_start_time_ticks_Set() const;
    bool is_start_time_ticks_Valid() const;

    qint32 getSubtitleStreamIndex() const;
    void setSubtitleStreamIndex(const qint32 &subtitle_stream_index);
    bool is_subtitle_stream_index_Set() const;
    bool is_subtitle_stream_index_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_audio_stream_index;
    bool m_audio_stream_index_isSet;
    bool m_audio_stream_index_isValid;

    OAIDeviceProfile m_device_profile;
    bool m_device_profile_isSet;
    bool m_device_profile_isValid;

    QList<OAIMediaProtocol> m_direct_play_protocols;
    bool m_direct_play_protocols_isSet;
    bool m_direct_play_protocols_isValid;

    bool m_enable_direct_play;
    bool m_enable_direct_play_isSet;
    bool m_enable_direct_play_isValid;

    bool m_enable_direct_stream;
    bool m_enable_direct_stream_isSet;
    bool m_enable_direct_stream_isValid;

    QString m_item_id;
    bool m_item_id_isSet;
    bool m_item_id_isValid;

    qint32 m_max_audio_channels;
    bool m_max_audio_channels_isSet;
    bool m_max_audio_channels_isValid;

    qint32 m_max_streaming_bitrate;
    bool m_max_streaming_bitrate_isSet;
    bool m_max_streaming_bitrate_isValid;

    QString m_open_token;
    bool m_open_token_isSet;
    bool m_open_token_isValid;

    QString m_play_session_id;
    bool m_play_session_id_isSet;
    bool m_play_session_id_isValid;

    qint64 m_start_time_ticks;
    bool m_start_time_ticks_isSet;
    bool m_start_time_ticks_isValid;

    qint32 m_subtitle_stream_index;
    bool m_subtitle_stream_index_isSet;
    bool m_subtitle_stream_index_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOpenLiveStreamDto)

#endif // OAIOpenLiveStreamDto_H
