/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaystateCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaystateCommand::OAIPlaystateCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaystateCommand::OAIPlaystateCommand() {
    this->initializeModel();
}

OAIPlaystateCommand::~OAIPlaystateCommand() {}

void OAIPlaystateCommand::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlaystateCommand::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlaystateCommand::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Stop", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaystateCommand::STOP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pause", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaystateCommand::PAUSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unpause", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaystateCommand::UNPAUSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NextTrack", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaystateCommand::NEXTTRACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreviousTrack", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaystateCommand::PREVIOUSTRACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Seek", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaystateCommand::SEEK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Rewind", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaystateCommand::REWIND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FastForward", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaystateCommand::FASTFORWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayPause", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaystateCommand::PLAYPAUSE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlaystateCommand::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlaystateCommand::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlaystateCommand::STOP:
            val = "Stop";
            break;
        case eOAIPlaystateCommand::PAUSE:
            val = "Pause";
            break;
        case eOAIPlaystateCommand::UNPAUSE:
            val = "Unpause";
            break;
        case eOAIPlaystateCommand::NEXTTRACK:
            val = "NextTrack";
            break;
        case eOAIPlaystateCommand::PREVIOUSTRACK:
            val = "PreviousTrack";
            break;
        case eOAIPlaystateCommand::SEEK:
            val = "Seek";
            break;
        case eOAIPlaystateCommand::REWIND:
            val = "Rewind";
            break;
        case eOAIPlaystateCommand::FASTFORWARD:
            val = "FastForward";
            break;
        case eOAIPlaystateCommand::PLAYPAUSE:
            val = "PlayPause";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlaystateCommand::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlaystateCommand::eOAIPlaystateCommand OAIPlaystateCommand::getValue() const {
    return m_value;
}

void OAIPlaystateCommand::setValue(const OAIPlaystateCommand::eOAIPlaystateCommand& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlaystateCommand::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlaystateCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
