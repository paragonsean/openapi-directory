/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPlugin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPlugin::OAIIPlugin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPlugin::OAIIPlugin() {
    this->initializeModel();
}

OAIIPlugin::~OAIIPlugin() {}

void OAIIPlugin::initializeModel() {

    m_assembly_file_path_isSet = false;
    m_assembly_file_path_isValid = false;

    m_can_uninstall_isSet = false;
    m_can_uninstall_isValid = false;

    m_data_folder_path_isSet = false;
    m_data_folder_path_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIIPlugin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPlugin::fromJsonObject(QJsonObject json) {

    m_assembly_file_path_isValid = ::OpenAPI::fromJsonValue(m_assembly_file_path, json[QString("AssemblyFilePath")]);
    m_assembly_file_path_isSet = !json[QString("AssemblyFilePath")].isNull() && m_assembly_file_path_isValid;

    m_can_uninstall_isValid = ::OpenAPI::fromJsonValue(m_can_uninstall, json[QString("CanUninstall")]);
    m_can_uninstall_isSet = !json[QString("CanUninstall")].isNull() && m_can_uninstall_isValid;

    m_data_folder_path_isValid = ::OpenAPI::fromJsonValue(m_data_folder_path, json[QString("DataFolderPath")]);
    m_data_folder_path_isSet = !json[QString("DataFolderPath")].isNull() && m_data_folder_path_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIIPlugin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPlugin::asJsonObject() const {
    QJsonObject obj;
    if (m_assembly_file_path_isSet) {
        obj.insert(QString("AssemblyFilePath"), ::OpenAPI::toJsonValue(m_assembly_file_path));
    }
    if (m_can_uninstall_isSet) {
        obj.insert(QString("CanUninstall"), ::OpenAPI::toJsonValue(m_can_uninstall));
    }
    if (m_data_folder_path_isSet) {
        obj.insert(QString("DataFolderPath"), ::OpenAPI::toJsonValue(m_data_folder_path));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version.isSet()) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIIPlugin::getAssemblyFilePath() const {
    return m_assembly_file_path;
}
void OAIIPlugin::setAssemblyFilePath(const QString &assembly_file_path) {
    m_assembly_file_path = assembly_file_path;
    m_assembly_file_path_isSet = true;
}

bool OAIIPlugin::is_assembly_file_path_Set() const{
    return m_assembly_file_path_isSet;
}

bool OAIIPlugin::is_assembly_file_path_Valid() const{
    return m_assembly_file_path_isValid;
}

bool OAIIPlugin::isCanUninstall() const {
    return m_can_uninstall;
}
void OAIIPlugin::setCanUninstall(const bool &can_uninstall) {
    m_can_uninstall = can_uninstall;
    m_can_uninstall_isSet = true;
}

bool OAIIPlugin::is_can_uninstall_Set() const{
    return m_can_uninstall_isSet;
}

bool OAIIPlugin::is_can_uninstall_Valid() const{
    return m_can_uninstall_isValid;
}

QString OAIIPlugin::getDataFolderPath() const {
    return m_data_folder_path;
}
void OAIIPlugin::setDataFolderPath(const QString &data_folder_path) {
    m_data_folder_path = data_folder_path;
    m_data_folder_path_isSet = true;
}

bool OAIIPlugin::is_data_folder_path_Set() const{
    return m_data_folder_path_isSet;
}

bool OAIIPlugin::is_data_folder_path_Valid() const{
    return m_data_folder_path_isValid;
}

QString OAIIPlugin::getDescription() const {
    return m_description;
}
void OAIIPlugin::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIPlugin::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIPlugin::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIPlugin::getId() const {
    return m_id;
}
void OAIIPlugin::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIPlugin::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIPlugin::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIPlugin::getName() const {
    return m_name;
}
void OAIIPlugin::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIPlugin::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIPlugin::is_name_Valid() const{
    return m_name_isValid;
}

OAIVersion OAIIPlugin::getVersion() const {
    return m_version;
}
void OAIIPlugin::setVersion(const OAIVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIIPlugin::is_version_Set() const{
    return m_version_isSet;
}

bool OAIIPlugin::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIIPlugin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assembly_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_uninstall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPlugin::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
