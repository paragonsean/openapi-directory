/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralCommand::OAIGeneralCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralCommand::OAIGeneralCommand() {
    this->initializeModel();
}

OAIGeneralCommand::~OAIGeneralCommand() {}

void OAIGeneralCommand::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_controlling_user_id_isSet = false;
    m_controlling_user_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGeneralCommand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneralCommand::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("Arguments")]);
    m_arguments_isSet = !json[QString("Arguments")].isNull() && m_arguments_isValid;

    m_controlling_user_id_isValid = ::OpenAPI::fromJsonValue(m_controlling_user_id, json[QString("ControllingUserId")]);
    m_controlling_user_id_isSet = !json[QString("ControllingUserId")].isNull() && m_controlling_user_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIGeneralCommand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneralCommand::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("Arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_controlling_user_id_isSet) {
        obj.insert(QString("ControllingUserId"), ::OpenAPI::toJsonValue(m_controlling_user_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QMap<QString, QString> OAIGeneralCommand::getArguments() const {
    return m_arguments;
}
void OAIGeneralCommand::setArguments(const QMap<QString, QString> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIGeneralCommand::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIGeneralCommand::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIGeneralCommand::getControllingUserId() const {
    return m_controlling_user_id;
}
void OAIGeneralCommand::setControllingUserId(const QString &controlling_user_id) {
    m_controlling_user_id = controlling_user_id;
    m_controlling_user_id_isSet = true;
}

bool OAIGeneralCommand::is_controlling_user_id_Set() const{
    return m_controlling_user_id_isSet;
}

bool OAIGeneralCommand::is_controlling_user_id_Valid() const{
    return m_controlling_user_id_isValid;
}

OAIGeneralCommandType OAIGeneralCommand::getName() const {
    return m_name;
}
void OAIGeneralCommand::setName(const OAIGeneralCommandType &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGeneralCommand::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGeneralCommand::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGeneralCommand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_controlling_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneralCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
