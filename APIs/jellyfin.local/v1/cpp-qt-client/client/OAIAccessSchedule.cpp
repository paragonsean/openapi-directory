/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessSchedule::OAIAccessSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessSchedule::OAIAccessSchedule() {
    this->initializeModel();
}

OAIAccessSchedule::~OAIAccessSchedule() {}

void OAIAccessSchedule::initializeModel() {

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_end_hour_isSet = false;
    m_end_hour_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_start_hour_isSet = false;
    m_start_hour_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAccessSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessSchedule::fromJsonObject(QJsonObject json) {

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("DayOfWeek")]);
    m_day_of_week_isSet = !json[QString("DayOfWeek")].isNull() && m_day_of_week_isValid;

    m_end_hour_isValid = ::OpenAPI::fromJsonValue(m_end_hour, json[QString("EndHour")]);
    m_end_hour_isSet = !json[QString("EndHour")].isNull() && m_end_hour_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_start_hour_isValid = ::OpenAPI::fromJsonValue(m_start_hour, json[QString("StartHour")]);
    m_start_hour_isSet = !json[QString("StartHour")].isNull() && m_start_hour_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIAccessSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week.isSet()) {
        obj.insert(QString("DayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_end_hour_isSet) {
        obj.insert(QString("EndHour"), ::OpenAPI::toJsonValue(m_end_hour));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_start_hour_isSet) {
        obj.insert(QString("StartHour"), ::OpenAPI::toJsonValue(m_start_hour));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIDynamicDayOfWeek OAIAccessSchedule::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIAccessSchedule::setDayOfWeek(const OAIDynamicDayOfWeek &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIAccessSchedule::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIAccessSchedule::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

double OAIAccessSchedule::getEndHour() const {
    return m_end_hour;
}
void OAIAccessSchedule::setEndHour(const double &end_hour) {
    m_end_hour = end_hour;
    m_end_hour_isSet = true;
}

bool OAIAccessSchedule::is_end_hour_Set() const{
    return m_end_hour_isSet;
}

bool OAIAccessSchedule::is_end_hour_Valid() const{
    return m_end_hour_isValid;
}

qint32 OAIAccessSchedule::getId() const {
    return m_id;
}
void OAIAccessSchedule::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccessSchedule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccessSchedule::is_id_Valid() const{
    return m_id_isValid;
}

double OAIAccessSchedule::getStartHour() const {
    return m_start_hour;
}
void OAIAccessSchedule::setStartHour(const double &start_hour) {
    m_start_hour = start_hour;
    m_start_hour_isSet = true;
}

bool OAIAccessSchedule::is_start_hour_Set() const{
    return m_start_hour_isSet;
}

bool OAIAccessSchedule::is_start_hour_Valid() const{
    return m_start_hour_isValid;
}

QString OAIAccessSchedule::getUserId() const {
    return m_user_id;
}
void OAIAccessSchedule::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAccessSchedule::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAccessSchedule::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAccessSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_day_of_week_isValid && m_end_hour_isValid && m_id_isValid && m_start_hour_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
