/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnvironmentApi_H
#define OAI_OAIEnvironmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultDirectoryBrowserInfoDto.h"
#include "OAIFileSystemEntryInfo.h"
#include "OAIProblemDetails.h"
#include "OAIValidatePathDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnvironmentApi : public QObject {
    Q_OBJECT

public:
    OAIEnvironmentApi(const int timeOut = 0);
    ~OAIEnvironmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getDefaultDirectoryBrowser();

    /**
    * @param[in]  path QString [required]
    * @param[in]  include_files bool [optional]
    * @param[in]  include_directories bool [optional]
    */
    virtual void getDirectoryContents(const QString &path, const ::OpenAPI::OptionalParam<bool> &include_files = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_directories = ::OpenAPI::OptionalParam<bool>());


    virtual void getDrives();


    Q_DECL_DEPRECATED virtual void getNetworkShares();

    /**
    * @param[in]  path QString [required]
    */
    virtual void getParentPath(const QString &path);

    /**
    * @param[in]  oai_validate_path_dto OAIValidatePathDto [required]
    */
    virtual void validatePath(const OAIValidatePathDto &oai_validate_path_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDefaultDirectoryBrowserCallback(OAIHttpRequestWorker *worker);
    void getDirectoryContentsCallback(OAIHttpRequestWorker *worker);
    void getDrivesCallback(OAIHttpRequestWorker *worker);
    void getNetworkSharesCallback(OAIHttpRequestWorker *worker);
    void getParentPathCallback(OAIHttpRequestWorker *worker);
    void validatePathCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDefaultDirectoryBrowserSignal(OAIDefaultDirectoryBrowserInfoDto summary);
    void getDirectoryContentsSignal(QList<OAIFileSystemEntryInfo> summary);
    void getDrivesSignal(QList<OAIFileSystemEntryInfo> summary);
    void getNetworkSharesSignal(QList<OAIFileSystemEntryInfo> summary);
    void getParentPathSignal(QString summary);
    void validatePathSignal();


    void getDefaultDirectoryBrowserSignalFull(OAIHttpRequestWorker *worker, OAIDefaultDirectoryBrowserInfoDto summary);
    void getDirectoryContentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFileSystemEntryInfo> summary);
    void getDrivesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFileSystemEntryInfo> summary);
    void getNetworkSharesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFileSystemEntryInfo> summary);
    void getParentPathSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void validatePathSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getDefaultDirectoryBrowserSignalError() instead")
    void getDefaultDirectoryBrowserSignalE(OAIDefaultDirectoryBrowserInfoDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultDirectoryBrowserSignalError(OAIDefaultDirectoryBrowserInfoDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectoryContentsSignalError() instead")
    void getDirectoryContentsSignalE(QList<OAIFileSystemEntryInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectoryContentsSignalError(QList<OAIFileSystemEntryInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDrivesSignalError() instead")
    void getDrivesSignalE(QList<OAIFileSystemEntryInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDrivesSignalError(QList<OAIFileSystemEntryInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSharesSignalError() instead")
    void getNetworkSharesSignalE(QList<OAIFileSystemEntryInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSharesSignalError(QList<OAIFileSystemEntryInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParentPathSignalError() instead")
    void getParentPathSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getParentPathSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePathSignalError() instead")
    void validatePathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void validatePathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDefaultDirectoryBrowserSignalErrorFull() instead")
    void getDefaultDirectoryBrowserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultDirectoryBrowserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectoryContentsSignalErrorFull() instead")
    void getDirectoryContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectoryContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDrivesSignalErrorFull() instead")
    void getDrivesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDrivesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkSharesSignalErrorFull() instead")
    void getNetworkSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParentPathSignalErrorFull() instead")
    void getParentPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getParentPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePathSignalErrorFull() instead")
    void validatePathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validatePathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
