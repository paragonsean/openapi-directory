/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralCommandType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralCommandType::OAIGeneralCommandType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralCommandType::OAIGeneralCommandType() {
    this->initializeModel();
}

OAIGeneralCommandType::~OAIGeneralCommandType() {}

void OAIGeneralCommandType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIGeneralCommandType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIGeneralCommandType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("MoveUp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::MOVEUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MoveDown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::MOVEDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MoveLeft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::MOVELEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MoveRight", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::MOVERIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PageUp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::PAGEUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PageDown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::PAGEDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreviousLetter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::PREVIOUSLETTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NextLetter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::NEXTLETTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ToggleOsd", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::TOGGLEOSD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ToggleContextMenu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::TOGGLECONTEXTMENU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Select", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::SELECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Back", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::BACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TakeScreenshot", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::TAKESCREENSHOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SendKey", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::SENDKEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SendString", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::SENDSTRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GoHome", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::GOHOME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GoToSettings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::GOTOSETTINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VolumeUp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::VOLUMEUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VolumeDown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::VOLUMEDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Mute", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::MUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unmute", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::UNMUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ToggleMute", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::TOGGLEMUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SetVolume", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::SETVOLUME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SetAudioStreamIndex", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::SETAUDIOSTREAMINDEX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SetSubtitleStreamIndex", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::SETSUBTITLESTREAMINDEX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ToggleFullscreen", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::TOGGLEFULLSCREEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DisplayContent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::DISPLAYCONTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GoToSearch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::GOTOSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DisplayMessage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::DISPLAYMESSAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SetRepeatMode", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::SETREPEATMODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChannelUp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::CHANNELUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChannelDown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::CHANNELDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Guide", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::GUIDE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ToggleStats", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::TOGGLESTATS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayMediaSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::PLAYMEDIASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayTrailers", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::PLAYTRAILERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SetShuffleQueue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::SETSHUFFLEQUEUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayState", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::PLAYSTATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayNext", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::PLAYNEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ToggleOsdMenu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::TOGGLEOSDMENU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Play", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGeneralCommandType::PLAY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIGeneralCommandType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIGeneralCommandType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIGeneralCommandType::MOVEUP:
            val = "MoveUp";
            break;
        case eOAIGeneralCommandType::MOVEDOWN:
            val = "MoveDown";
            break;
        case eOAIGeneralCommandType::MOVELEFT:
            val = "MoveLeft";
            break;
        case eOAIGeneralCommandType::MOVERIGHT:
            val = "MoveRight";
            break;
        case eOAIGeneralCommandType::PAGEUP:
            val = "PageUp";
            break;
        case eOAIGeneralCommandType::PAGEDOWN:
            val = "PageDown";
            break;
        case eOAIGeneralCommandType::PREVIOUSLETTER:
            val = "PreviousLetter";
            break;
        case eOAIGeneralCommandType::NEXTLETTER:
            val = "NextLetter";
            break;
        case eOAIGeneralCommandType::TOGGLEOSD:
            val = "ToggleOsd";
            break;
        case eOAIGeneralCommandType::TOGGLECONTEXTMENU:
            val = "ToggleContextMenu";
            break;
        case eOAIGeneralCommandType::SELECT:
            val = "Select";
            break;
        case eOAIGeneralCommandType::BACK:
            val = "Back";
            break;
        case eOAIGeneralCommandType::TAKESCREENSHOT:
            val = "TakeScreenshot";
            break;
        case eOAIGeneralCommandType::SENDKEY:
            val = "SendKey";
            break;
        case eOAIGeneralCommandType::SENDSTRING:
            val = "SendString";
            break;
        case eOAIGeneralCommandType::GOHOME:
            val = "GoHome";
            break;
        case eOAIGeneralCommandType::GOTOSETTINGS:
            val = "GoToSettings";
            break;
        case eOAIGeneralCommandType::VOLUMEUP:
            val = "VolumeUp";
            break;
        case eOAIGeneralCommandType::VOLUMEDOWN:
            val = "VolumeDown";
            break;
        case eOAIGeneralCommandType::MUTE:
            val = "Mute";
            break;
        case eOAIGeneralCommandType::UNMUTE:
            val = "Unmute";
            break;
        case eOAIGeneralCommandType::TOGGLEMUTE:
            val = "ToggleMute";
            break;
        case eOAIGeneralCommandType::SETVOLUME:
            val = "SetVolume";
            break;
        case eOAIGeneralCommandType::SETAUDIOSTREAMINDEX:
            val = "SetAudioStreamIndex";
            break;
        case eOAIGeneralCommandType::SETSUBTITLESTREAMINDEX:
            val = "SetSubtitleStreamIndex";
            break;
        case eOAIGeneralCommandType::TOGGLEFULLSCREEN:
            val = "ToggleFullscreen";
            break;
        case eOAIGeneralCommandType::DISPLAYCONTENT:
            val = "DisplayContent";
            break;
        case eOAIGeneralCommandType::GOTOSEARCH:
            val = "GoToSearch";
            break;
        case eOAIGeneralCommandType::DISPLAYMESSAGE:
            val = "DisplayMessage";
            break;
        case eOAIGeneralCommandType::SETREPEATMODE:
            val = "SetRepeatMode";
            break;
        case eOAIGeneralCommandType::CHANNELUP:
            val = "ChannelUp";
            break;
        case eOAIGeneralCommandType::CHANNELDOWN:
            val = "ChannelDown";
            break;
        case eOAIGeneralCommandType::GUIDE:
            val = "Guide";
            break;
        case eOAIGeneralCommandType::TOGGLESTATS:
            val = "ToggleStats";
            break;
        case eOAIGeneralCommandType::PLAYMEDIASOURCE:
            val = "PlayMediaSource";
            break;
        case eOAIGeneralCommandType::PLAYTRAILERS:
            val = "PlayTrailers";
            break;
        case eOAIGeneralCommandType::SETSHUFFLEQUEUE:
            val = "SetShuffleQueue";
            break;
        case eOAIGeneralCommandType::PLAYSTATE:
            val = "PlayState";
            break;
        case eOAIGeneralCommandType::PLAYNEXT:
            val = "PlayNext";
            break;
        case eOAIGeneralCommandType::TOGGLEOSDMENU:
            val = "ToggleOsdMenu";
            break;
        case eOAIGeneralCommandType::PLAY:
            val = "Play";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIGeneralCommandType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIGeneralCommandType::eOAIGeneralCommandType OAIGeneralCommandType::getValue() const {
    return m_value;
}

void OAIGeneralCommandType::setValue(const OAIGeneralCommandType::eOAIGeneralCommandType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIGeneralCommandType::isSet() const {
    
    return m_value_isSet;
}

bool OAIGeneralCommandType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
