/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemFilter::OAIItemFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemFilter::OAIItemFilter() {
    this->initializeModel();
}

OAIItemFilter::~OAIItemFilter() {}

void OAIItemFilter::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIItemFilter::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIItemFilter::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IsFolder", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFilter::ISFOLDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsNotFolder", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFilter::ISNOTFOLDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsUnplayed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFilter::ISUNPLAYED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsPlayed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFilter::ISPLAYED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsFavorite", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFilter::ISFAVORITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsResumable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFilter::ISRESUMABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Likes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFilter::LIKES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Dislikes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFilter::DISLIKES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsFavoriteOrLikes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFilter::ISFAVORITEORLIKES;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIItemFilter::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIItemFilter::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIItemFilter::ISFOLDER:
            val = "IsFolder";
            break;
        case eOAIItemFilter::ISNOTFOLDER:
            val = "IsNotFolder";
            break;
        case eOAIItemFilter::ISUNPLAYED:
            val = "IsUnplayed";
            break;
        case eOAIItemFilter::ISPLAYED:
            val = "IsPlayed";
            break;
        case eOAIItemFilter::ISFAVORITE:
            val = "IsFavorite";
            break;
        case eOAIItemFilter::ISRESUMABLE:
            val = "IsResumable";
            break;
        case eOAIItemFilter::LIKES:
            val = "Likes";
            break;
        case eOAIItemFilter::DISLIKES:
            val = "Dislikes";
            break;
        case eOAIItemFilter::ISFAVORITEORLIKES:
            val = "IsFavoriteOrLikes";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIItemFilter::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIItemFilter::eOAIItemFilter OAIItemFilter::getValue() const {
    return m_value;
}

void OAIItemFilter::setValue(const OAIItemFilter::eOAIItemFilter& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIItemFilter::isSet() const {
    
    return m_value_isSet;
}

bool OAIItemFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
