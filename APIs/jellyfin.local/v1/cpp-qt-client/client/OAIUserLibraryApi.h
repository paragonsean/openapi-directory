/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserLibraryApi_H
#define OAI_OAIUserLibraryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaseItemDto.h"
#include "OAIBaseItemDtoQueryResult.h"
#include "OAIImageType.h"
#include "OAIItemFields.h"
#include "OAIUserItemDataDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserLibraryApi : public QObject {
    Q_OBJECT

public:
    OAIUserLibraryApi(const int timeOut = 0);
    ~OAIUserLibraryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void deleteUserItemRating(const QString &user_id, const QString &item_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void getIntros(const QString &user_id, const QString &item_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void getItem(const QString &user_id, const QString &item_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  parent_id QString [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  include_item_types QList<QString> [optional]
    * @param[in]  is_played bool [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  group_items bool [optional]
    */
    virtual void getLatestMedia(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include_item_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &is_played = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &group_items = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void getLocalTrailers(const QString &user_id, const QString &item_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getRootFolder(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void getSpecialFeatures(const QString &user_id, const QString &item_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void markFavoriteItem(const QString &user_id, const QString &item_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void unmarkFavoriteItem(const QString &user_id, const QString &item_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  likes bool [optional]
    */
    virtual void updateUserItemRating(const QString &user_id, const QString &item_id, const ::OpenAPI::OptionalParam<bool> &likes = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteUserItemRatingCallback(OAIHttpRequestWorker *worker);
    void getIntrosCallback(OAIHttpRequestWorker *worker);
    void getItemCallback(OAIHttpRequestWorker *worker);
    void getLatestMediaCallback(OAIHttpRequestWorker *worker);
    void getLocalTrailersCallback(OAIHttpRequestWorker *worker);
    void getRootFolderCallback(OAIHttpRequestWorker *worker);
    void getSpecialFeaturesCallback(OAIHttpRequestWorker *worker);
    void markFavoriteItemCallback(OAIHttpRequestWorker *worker);
    void unmarkFavoriteItemCallback(OAIHttpRequestWorker *worker);
    void updateUserItemRatingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteUserItemRatingSignal(OAIUserItemDataDto summary);
    void getIntrosSignal(OAIBaseItemDtoQueryResult summary);
    void getItemSignal(OAIBaseItemDto summary);
    void getLatestMediaSignal(QList<OAIBaseItemDto> summary);
    void getLocalTrailersSignal(QList<OAIBaseItemDto> summary);
    void getRootFolderSignal(OAIBaseItemDto summary);
    void getSpecialFeaturesSignal(QList<OAIBaseItemDto> summary);
    void markFavoriteItemSignal(OAIUserItemDataDto summary);
    void unmarkFavoriteItemSignal(OAIUserItemDataDto summary);
    void updateUserItemRatingSignal(OAIUserItemDataDto summary);


    void deleteUserItemRatingSignalFull(OAIHttpRequestWorker *worker, OAIUserItemDataDto summary);
    void getIntrosSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getItemSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDto summary);
    void getLatestMediaSignalFull(OAIHttpRequestWorker *worker, QList<OAIBaseItemDto> summary);
    void getLocalTrailersSignalFull(OAIHttpRequestWorker *worker, QList<OAIBaseItemDto> summary);
    void getRootFolderSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDto summary);
    void getSpecialFeaturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBaseItemDto> summary);
    void markFavoriteItemSignalFull(OAIHttpRequestWorker *worker, OAIUserItemDataDto summary);
    void unmarkFavoriteItemSignalFull(OAIHttpRequestWorker *worker, OAIUserItemDataDto summary);
    void updateUserItemRatingSignalFull(OAIHttpRequestWorker *worker, OAIUserItemDataDto summary);

    Q_DECL_DEPRECATED_X("Use deleteUserItemRatingSignalError() instead")
    void deleteUserItemRatingSignalE(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserItemRatingSignalError(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntrosSignalError() instead")
    void getIntrosSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntrosSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemSignalError() instead")
    void getItemSignalE(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemSignalError(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestMediaSignalError() instead")
    void getLatestMediaSignalE(QList<OAIBaseItemDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestMediaSignalError(QList<OAIBaseItemDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocalTrailersSignalError() instead")
    void getLocalTrailersSignalE(QList<OAIBaseItemDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocalTrailersSignalError(QList<OAIBaseItemDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRootFolderSignalError() instead")
    void getRootFolderSignalE(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRootFolderSignalError(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecialFeaturesSignalError() instead")
    void getSpecialFeaturesSignalE(QList<OAIBaseItemDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecialFeaturesSignalError(QList<OAIBaseItemDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markFavoriteItemSignalError() instead")
    void markFavoriteItemSignalE(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markFavoriteItemSignalError(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unmarkFavoriteItemSignalError() instead")
    void unmarkFavoriteItemSignalE(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unmarkFavoriteItemSignalError(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserItemRatingSignalError() instead")
    void updateUserItemRatingSignalE(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserItemRatingSignalError(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteUserItemRatingSignalErrorFull() instead")
    void deleteUserItemRatingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserItemRatingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntrosSignalErrorFull() instead")
    void getIntrosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntrosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemSignalErrorFull() instead")
    void getItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestMediaSignalErrorFull() instead")
    void getLatestMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocalTrailersSignalErrorFull() instead")
    void getLocalTrailersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocalTrailersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRootFolderSignalErrorFull() instead")
    void getRootFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRootFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecialFeaturesSignalErrorFull() instead")
    void getSpecialFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecialFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markFavoriteItemSignalErrorFull() instead")
    void markFavoriteItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markFavoriteItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unmarkFavoriteItemSignalErrorFull() instead")
    void unmarkFavoriteItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unmarkFavoriteItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserItemRatingSignalErrorFull() instead")
    void updateUserItemRatingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserItemRatingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
