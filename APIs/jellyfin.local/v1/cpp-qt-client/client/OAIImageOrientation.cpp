/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageOrientation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageOrientation::OAIImageOrientation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageOrientation::OAIImageOrientation() {
    this->initializeModel();
}

OAIImageOrientation::~OAIImageOrientation() {}

void OAIImageOrientation::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIImageOrientation::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIImageOrientation::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TopLeft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageOrientation::TOPLEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TopRight", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageOrientation::TOPRIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BottomRight", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageOrientation::BOTTOMRIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BottomLeft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageOrientation::BOTTOMLEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LeftTop", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageOrientation::LEFTTOP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RightTop", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageOrientation::RIGHTTOP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RightBottom", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageOrientation::RIGHTBOTTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LeftBottom", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageOrientation::LEFTBOTTOM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIImageOrientation::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIImageOrientation::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIImageOrientation::TOPLEFT:
            val = "TopLeft";
            break;
        case eOAIImageOrientation::TOPRIGHT:
            val = "TopRight";
            break;
        case eOAIImageOrientation::BOTTOMRIGHT:
            val = "BottomRight";
            break;
        case eOAIImageOrientation::BOTTOMLEFT:
            val = "BottomLeft";
            break;
        case eOAIImageOrientation::LEFTTOP:
            val = "LeftTop";
            break;
        case eOAIImageOrientation::RIGHTTOP:
            val = "RightTop";
            break;
        case eOAIImageOrientation::RIGHTBOTTOM:
            val = "RightBottom";
            break;
        case eOAIImageOrientation::LEFTBOTTOM:
            val = "LeftBottom";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIImageOrientation::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIImageOrientation::eOAIImageOrientation OAIImageOrientation::getValue() const {
    return m_value;
}

void OAIImageOrientation::setValue(const OAIImageOrientation::eOAIImageOrientation& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIImageOrientation::isSet() const {
    
    return m_value_isSet;
}

bool OAIImageOrientation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
