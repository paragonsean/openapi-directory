/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILiveTvApi_H
#define OAI_OAILiveTvApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaseItemDto.h"
#include "OAIBaseItemDtoQueryResult.h"
#include "OAIChannelMappingOptionsDto.h"
#include "OAIChannelType.h"
#include "OAIGetProgramsDto.h"
#include "OAIGuideInfo.h"
#include "OAIHttpFileElement.h"
#include "OAIImageType.h"
#include "OAIItemFields.h"
#include "OAIListingsProviderInfo.h"
#include "OAILiveTvInfo.h"
#include "OAINameIdPair.h"
#include "OAIProblemDetails.h"
#include "OAIRecordingStatus.h"
#include "OAISeriesTimerInfoDto.h"
#include "OAISeriesTimerInfoDtoQueryResult.h"
#include "OAISetChannelMappingDto.h"
#include "OAISortOrder.h"
#include "OAITimerInfoDto.h"
#include "OAITimerInfoDtoQueryResult.h"
#include "OAITunerChannelMapping.h"
#include "OAITunerHostInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILiveTvApi : public QObject {
    Q_OBJECT

public:
    OAILiveTvApi(const int timeOut = 0);
    ~OAILiveTvApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pw QString [optional]
    * @param[in]  validate_listings bool [optional]
    * @param[in]  validate_login bool [optional]
    * @param[in]  oai_listings_provider_info OAIListingsProviderInfo [optional]
    */
    virtual void addListingProvider(const ::OpenAPI::OptionalParam<QString> &pw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_listings = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &validate_login = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIListingsProviderInfo> &oai_listings_provider_info = ::OpenAPI::OptionalParam<OAIListingsProviderInfo>());

    /**
    * @param[in]  oai_tuner_host_info OAITunerHostInfo [optional]
    */
    virtual void addTunerHost(const ::OpenAPI::OptionalParam<OAITunerHostInfo> &oai_tuner_host_info = ::OpenAPI::OptionalParam<OAITunerHostInfo>());

    /**
    * @param[in]  timer_id QString [required]
    */
    virtual void cancelSeriesTimer(const QString &timer_id);

    /**
    * @param[in]  timer_id QString [required]
    */
    virtual void cancelTimer(const QString &timer_id);

    /**
    * @param[in]  oai_series_timer_info_dto OAISeriesTimerInfoDto [optional]
    */
    virtual void createSeriesTimer(const ::OpenAPI::OptionalParam<OAISeriesTimerInfoDto> &oai_series_timer_info_dto = ::OpenAPI::OptionalParam<OAISeriesTimerInfoDto>());

    /**
    * @param[in]  oai_timer_info_dto OAITimerInfoDto [optional]
    */
    virtual void createTimer(const ::OpenAPI::OptionalParam<OAITimerInfoDto> &oai_timer_info_dto = ::OpenAPI::OptionalParam<OAITimerInfoDto>());

    /**
    * @param[in]  id QString [optional]
    */
    virtual void deleteListingProvider(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  recording_id QString [required]
    */
    virtual void deleteRecording(const QString &recording_id);

    /**
    * @param[in]  id QString [optional]
    */
    virtual void deleteTunerHost(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  new_devices_only bool [optional]
    */
    virtual void discoverTuners(const ::OpenAPI::OptionalParam<bool> &new_devices_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  new_devices_only bool [optional]
    */
    virtual void discvoverTuners(const ::OpenAPI::OptionalParam<bool> &new_devices_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    virtual void getChannel(const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  provider_id QString [optional]
    */
    virtual void getChannelMappingOptions(const ::OpenAPI::OptionalParam<QString> &provider_id = ::OpenAPI::OptionalParam<QString>());


    virtual void getDefaultListingProvider();

    /**
    * @param[in]  program_id QString [optional]
    */
    virtual void getDefaultTimer(const ::OpenAPI::OptionalParam<QString> &program_id = ::OpenAPI::OptionalParam<QString>());


    virtual void getGuideInfo();

    /**
    * @param[in]  id QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  country QString [optional]
    */
    virtual void getLineups(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  recording_id QString [required]
    */
    virtual void getLiveRecordingFile(const QString &recording_id);

    /**
    * @param[in]  stream_id QString [required]
    * @param[in]  container QString [required]
    */
    virtual void getLiveStreamFile(const QString &stream_id, const QString &container);

    /**
    * @param[in]  type OAIChannelType [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  is_movie bool [optional]
    * @param[in]  is_series bool [optional]
    * @param[in]  is_news bool [optional]
    * @param[in]  is_kids bool [optional]
    * @param[in]  is_sports bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  is_favorite bool [optional]
    * @param[in]  is_liked bool [optional]
    * @param[in]  is_disliked bool [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  sort_by QList<QString> [optional]
    * @param[in]  sort_order OAISortOrder [optional]
    * @param[in]  enable_favorite_sorting bool [optional]
    * @param[in]  add_current_program bool [optional]
    */
    virtual void getLiveTvChannels(const ::OpenAPI::OptionalParam<OAIChannelType> &type = ::OpenAPI::OptionalParam<OAIChannelType>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_movie = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_series = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_news = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_kids = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_sports = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_favorite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_liked = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_disliked = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAISortOrder> &sort_order = ::OpenAPI::OptionalParam<OAISortOrder>(), const ::OpenAPI::OptionalParam<bool> &enable_favorite_sorting = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_current_program = ::OpenAPI::OptionalParam<bool>());


    virtual void getLiveTvInfo();

    /**
    * @param[in]  channel_ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  min_start_date QDateTime [optional]
    * @param[in]  has_aired bool [optional]
    * @param[in]  is_airing bool [optional]
    * @param[in]  max_start_date QDateTime [optional]
    * @param[in]  min_end_date QDateTime [optional]
    * @param[in]  max_end_date QDateTime [optional]
    * @param[in]  is_movie bool [optional]
    * @param[in]  is_series bool [optional]
    * @param[in]  is_news bool [optional]
    * @param[in]  is_kids bool [optional]
    * @param[in]  is_sports bool [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  genres QList<QString> [optional]
    * @param[in]  genre_ids QList<QString> [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  series_timer_id QString [optional]
    * @param[in]  library_series_id QString [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_total_record_count bool [optional]
    */
    virtual void getLiveTvPrograms(const ::OpenAPI::OptionalParam<QList<QString>> &channel_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &min_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &has_aired = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_airing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &max_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &min_end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &max_end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &is_movie = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_series = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_news = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_kids = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_sports = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &genres = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genre_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &series_timer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &library_series_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_total_record_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  program_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    virtual void getProgram(const QString &program_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_get_programs_dto OAIGetProgramsDto [optional]
    */
    virtual void getPrograms(const ::OpenAPI::OptionalParam<OAIGetProgramsDto> &oai_get_programs_dto = ::OpenAPI::OptionalParam<OAIGetProgramsDto>());

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  is_airing bool [optional]
    * @param[in]  has_aired bool [optional]
    * @param[in]  is_series bool [optional]
    * @param[in]  is_movie bool [optional]
    * @param[in]  is_news bool [optional]
    * @param[in]  is_kids bool [optional]
    * @param[in]  is_sports bool [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  genre_ids QList<QString> [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  enable_total_record_count bool [optional]
    */
    virtual void getRecommendedPrograms(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_airing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &has_aired = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_series = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_movie = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_news = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_kids = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_sports = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genre_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_total_record_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  recording_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    virtual void getRecording(const QString &recording_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [optional]
    */
    virtual void getRecordingFolders(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getRecordingGroup(const QString &group_id);

    /**
    * @param[in]  user_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getRecordingGroups(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_id QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status OAIRecordingStatus [optional]
    * @param[in]  is_in_progress bool [optional]
    * @param[in]  series_timer_id QString [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  is_movie bool [optional]
    * @param[in]  is_series bool [optional]
    * @param[in]  is_kids bool [optional]
    * @param[in]  is_sports bool [optional]
    * @param[in]  is_news bool [optional]
    * @param[in]  is_library_item bool [optional]
    * @param[in]  enable_total_record_count bool [optional]
    */
    virtual void getRecordings(const ::OpenAPI::OptionalParam<QString> &channel_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIRecordingStatus> &status = ::OpenAPI::OptionalParam<OAIRecordingStatus>(), const ::OpenAPI::OptionalParam<bool> &is_in_progress = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &series_timer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_movie = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_series = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_kids = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_sports = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_news = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_library_item = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_total_record_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  channel_id QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status OAIRecordingStatus [optional]
    * @param[in]  is_in_progress bool [optional]
    * @param[in]  series_timer_id QString [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  enable_total_record_count bool [optional]
    */
    Q_DECL_DEPRECATED virtual void getRecordingsSeries(const ::OpenAPI::OptionalParam<QString> &channel_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIRecordingStatus> &status = ::OpenAPI::OptionalParam<OAIRecordingStatus>(), const ::OpenAPI::OptionalParam<bool> &is_in_progress = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &series_timer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_total_record_count = ::OpenAPI::OptionalParam<bool>());


    virtual void getSchedulesDirectCountries();

    /**
    * @param[in]  timer_id QString [required]
    */
    virtual void getSeriesTimer(const QString &timer_id);

    /**
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order OAISortOrder [optional]
    */
    virtual void getSeriesTimers(const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISortOrder> &sort_order = ::OpenAPI::OptionalParam<OAISortOrder>());

    /**
    * @param[in]  timer_id QString [required]
    */
    virtual void getTimer(const QString &timer_id);

    /**
    * @param[in]  channel_id QString [optional]
    * @param[in]  series_timer_id QString [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  is_scheduled bool [optional]
    */
    virtual void getTimers(const ::OpenAPI::OptionalParam<QString> &channel_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &series_timer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_scheduled = ::OpenAPI::OptionalParam<bool>());


    virtual void getTunerHostTypes();

    /**
    * @param[in]  tuner_id QString [required]
    */
    virtual void resetTuner(const QString &tuner_id);

    /**
    * @param[in]  oai_set_channel_mapping_dto OAISetChannelMappingDto [required]
    */
    virtual void setChannelMapping(const OAISetChannelMappingDto &oai_set_channel_mapping_dto);

    /**
    * @param[in]  timer_id QString [required]
    * @param[in]  oai_series_timer_info_dto OAISeriesTimerInfoDto [optional]
    */
    virtual void updateSeriesTimer(const QString &timer_id, const ::OpenAPI::OptionalParam<OAISeriesTimerInfoDto> &oai_series_timer_info_dto = ::OpenAPI::OptionalParam<OAISeriesTimerInfoDto>());

    /**
    * @param[in]  timer_id QString [required]
    * @param[in]  oai_timer_info_dto OAITimerInfoDto [optional]
    */
    virtual void updateTimer(const QString &timer_id, const ::OpenAPI::OptionalParam<OAITimerInfoDto> &oai_timer_info_dto = ::OpenAPI::OptionalParam<OAITimerInfoDto>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addListingProviderCallback(OAIHttpRequestWorker *worker);
    void addTunerHostCallback(OAIHttpRequestWorker *worker);
    void cancelSeriesTimerCallback(OAIHttpRequestWorker *worker);
    void cancelTimerCallback(OAIHttpRequestWorker *worker);
    void createSeriesTimerCallback(OAIHttpRequestWorker *worker);
    void createTimerCallback(OAIHttpRequestWorker *worker);
    void deleteListingProviderCallback(OAIHttpRequestWorker *worker);
    void deleteRecordingCallback(OAIHttpRequestWorker *worker);
    void deleteTunerHostCallback(OAIHttpRequestWorker *worker);
    void discoverTunersCallback(OAIHttpRequestWorker *worker);
    void discvoverTunersCallback(OAIHttpRequestWorker *worker);
    void getChannelCallback(OAIHttpRequestWorker *worker);
    void getChannelMappingOptionsCallback(OAIHttpRequestWorker *worker);
    void getDefaultListingProviderCallback(OAIHttpRequestWorker *worker);
    void getDefaultTimerCallback(OAIHttpRequestWorker *worker);
    void getGuideInfoCallback(OAIHttpRequestWorker *worker);
    void getLineupsCallback(OAIHttpRequestWorker *worker);
    void getLiveRecordingFileCallback(OAIHttpRequestWorker *worker);
    void getLiveStreamFileCallback(OAIHttpRequestWorker *worker);
    void getLiveTvChannelsCallback(OAIHttpRequestWorker *worker);
    void getLiveTvInfoCallback(OAIHttpRequestWorker *worker);
    void getLiveTvProgramsCallback(OAIHttpRequestWorker *worker);
    void getProgramCallback(OAIHttpRequestWorker *worker);
    void getProgramsCallback(OAIHttpRequestWorker *worker);
    void getRecommendedProgramsCallback(OAIHttpRequestWorker *worker);
    void getRecordingCallback(OAIHttpRequestWorker *worker);
    void getRecordingFoldersCallback(OAIHttpRequestWorker *worker);
    void getRecordingGroupCallback(OAIHttpRequestWorker *worker);
    void getRecordingGroupsCallback(OAIHttpRequestWorker *worker);
    void getRecordingsCallback(OAIHttpRequestWorker *worker);
    void getRecordingsSeriesCallback(OAIHttpRequestWorker *worker);
    void getSchedulesDirectCountriesCallback(OAIHttpRequestWorker *worker);
    void getSeriesTimerCallback(OAIHttpRequestWorker *worker);
    void getSeriesTimersCallback(OAIHttpRequestWorker *worker);
    void getTimerCallback(OAIHttpRequestWorker *worker);
    void getTimersCallback(OAIHttpRequestWorker *worker);
    void getTunerHostTypesCallback(OAIHttpRequestWorker *worker);
    void resetTunerCallback(OAIHttpRequestWorker *worker);
    void setChannelMappingCallback(OAIHttpRequestWorker *worker);
    void updateSeriesTimerCallback(OAIHttpRequestWorker *worker);
    void updateTimerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addListingProviderSignal(OAIListingsProviderInfo summary);
    void addTunerHostSignal(OAITunerHostInfo summary);
    void cancelSeriesTimerSignal();
    void cancelTimerSignal();
    void createSeriesTimerSignal();
    void createTimerSignal();
    void deleteListingProviderSignal();
    void deleteRecordingSignal();
    void deleteTunerHostSignal();
    void discoverTunersSignal(QList<OAITunerHostInfo> summary);
    void discvoverTunersSignal(QList<OAITunerHostInfo> summary);
    void getChannelSignal(OAIBaseItemDto summary);
    void getChannelMappingOptionsSignal(OAIChannelMappingOptionsDto summary);
    void getDefaultListingProviderSignal(OAIListingsProviderInfo summary);
    void getDefaultTimerSignal(OAISeriesTimerInfoDto summary);
    void getGuideInfoSignal(OAIGuideInfo summary);
    void getLineupsSignal(QList<OAINameIdPair> summary);
    void getLiveRecordingFileSignal(OAIHttpFileElement summary);
    void getLiveStreamFileSignal(OAIHttpFileElement summary);
    void getLiveTvChannelsSignal(OAIBaseItemDtoQueryResult summary);
    void getLiveTvInfoSignal(OAILiveTvInfo summary);
    void getLiveTvProgramsSignal(OAIBaseItemDtoQueryResult summary);
    void getProgramSignal(OAIBaseItemDto summary);
    void getProgramsSignal(OAIBaseItemDtoQueryResult summary);
    void getRecommendedProgramsSignal(OAIBaseItemDtoQueryResult summary);
    void getRecordingSignal(OAIBaseItemDto summary);
    void getRecordingFoldersSignal(OAIBaseItemDtoQueryResult summary);
    void getRecordingGroupSignal();
    void getRecordingGroupsSignal(OAIBaseItemDtoQueryResult summary);
    void getRecordingsSignal(OAIBaseItemDtoQueryResult summary);
    void getRecordingsSeriesSignal(OAIBaseItemDtoQueryResult summary);
    void getSchedulesDirectCountriesSignal(OAIHttpFileElement summary);
    void getSeriesTimerSignal(OAISeriesTimerInfoDto summary);
    void getSeriesTimersSignal(OAISeriesTimerInfoDtoQueryResult summary);
    void getTimerSignal(OAITimerInfoDto summary);
    void getTimersSignal(OAITimerInfoDtoQueryResult summary);
    void getTunerHostTypesSignal(QList<OAINameIdPair> summary);
    void resetTunerSignal();
    void setChannelMappingSignal(OAITunerChannelMapping summary);
    void updateSeriesTimerSignal();
    void updateTimerSignal();


    void addListingProviderSignalFull(OAIHttpRequestWorker *worker, OAIListingsProviderInfo summary);
    void addTunerHostSignalFull(OAIHttpRequestWorker *worker, OAITunerHostInfo summary);
    void cancelSeriesTimerSignalFull(OAIHttpRequestWorker *worker);
    void cancelTimerSignalFull(OAIHttpRequestWorker *worker);
    void createSeriesTimerSignalFull(OAIHttpRequestWorker *worker);
    void createTimerSignalFull(OAIHttpRequestWorker *worker);
    void deleteListingProviderSignalFull(OAIHttpRequestWorker *worker);
    void deleteRecordingSignalFull(OAIHttpRequestWorker *worker);
    void deleteTunerHostSignalFull(OAIHttpRequestWorker *worker);
    void discoverTunersSignalFull(OAIHttpRequestWorker *worker, QList<OAITunerHostInfo> summary);
    void discvoverTunersSignalFull(OAIHttpRequestWorker *worker, QList<OAITunerHostInfo> summary);
    void getChannelSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDto summary);
    void getChannelMappingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIChannelMappingOptionsDto summary);
    void getDefaultListingProviderSignalFull(OAIHttpRequestWorker *worker, OAIListingsProviderInfo summary);
    void getDefaultTimerSignalFull(OAIHttpRequestWorker *worker, OAISeriesTimerInfoDto summary);
    void getGuideInfoSignalFull(OAIHttpRequestWorker *worker, OAIGuideInfo summary);
    void getLineupsSignalFull(OAIHttpRequestWorker *worker, QList<OAINameIdPair> summary);
    void getLiveRecordingFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getLiveStreamFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getLiveTvChannelsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getLiveTvInfoSignalFull(OAIHttpRequestWorker *worker, OAILiveTvInfo summary);
    void getLiveTvProgramsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getProgramSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDto summary);
    void getProgramsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getRecommendedProgramsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getRecordingSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDto summary);
    void getRecordingFoldersSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getRecordingGroupSignalFull(OAIHttpRequestWorker *worker);
    void getRecordingGroupsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getRecordingsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getRecordingsSeriesSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getSchedulesDirectCountriesSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getSeriesTimerSignalFull(OAIHttpRequestWorker *worker, OAISeriesTimerInfoDto summary);
    void getSeriesTimersSignalFull(OAIHttpRequestWorker *worker, OAISeriesTimerInfoDtoQueryResult summary);
    void getTimerSignalFull(OAIHttpRequestWorker *worker, OAITimerInfoDto summary);
    void getTimersSignalFull(OAIHttpRequestWorker *worker, OAITimerInfoDtoQueryResult summary);
    void getTunerHostTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAINameIdPair> summary);
    void resetTunerSignalFull(OAIHttpRequestWorker *worker);
    void setChannelMappingSignalFull(OAIHttpRequestWorker *worker, OAITunerChannelMapping summary);
    void updateSeriesTimerSignalFull(OAIHttpRequestWorker *worker);
    void updateTimerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addListingProviderSignalError() instead")
    void addListingProviderSignalE(OAIListingsProviderInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addListingProviderSignalError(OAIListingsProviderInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTunerHostSignalError() instead")
    void addTunerHostSignalE(OAITunerHostInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTunerHostSignalError(OAITunerHostInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelSeriesTimerSignalError() instead")
    void cancelSeriesTimerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSeriesTimerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelTimerSignalError() instead")
    void cancelTimerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTimerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSeriesTimerSignalError() instead")
    void createSeriesTimerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createSeriesTimerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTimerSignalError() instead")
    void createTimerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createTimerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteListingProviderSignalError() instead")
    void deleteListingProviderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteListingProviderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecordingSignalError() instead")
    void deleteRecordingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecordingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTunerHostSignalError() instead")
    void deleteTunerHostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTunerHostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoverTunersSignalError() instead")
    void discoverTunersSignalE(QList<OAITunerHostInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoverTunersSignalError(QList<OAITunerHostInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discvoverTunersSignalError() instead")
    void discvoverTunersSignalE(QList<OAITunerHostInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discvoverTunersSignalError(QList<OAITunerHostInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelSignalError() instead")
    void getChannelSignalE(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelSignalError(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelMappingOptionsSignalError() instead")
    void getChannelMappingOptionsSignalE(OAIChannelMappingOptionsDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelMappingOptionsSignalError(OAIChannelMappingOptionsDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultListingProviderSignalError() instead")
    void getDefaultListingProviderSignalE(OAIListingsProviderInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultListingProviderSignalError(OAIListingsProviderInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultTimerSignalError() instead")
    void getDefaultTimerSignalE(OAISeriesTimerInfoDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultTimerSignalError(OAISeriesTimerInfoDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuideInfoSignalError() instead")
    void getGuideInfoSignalE(OAIGuideInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuideInfoSignalError(OAIGuideInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLineupsSignalError() instead")
    void getLineupsSignalE(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLineupsSignalError(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveRecordingFileSignalError() instead")
    void getLiveRecordingFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveRecordingFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveStreamFileSignalError() instead")
    void getLiveStreamFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveStreamFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveTvChannelsSignalError() instead")
    void getLiveTvChannelsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveTvChannelsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveTvInfoSignalError() instead")
    void getLiveTvInfoSignalE(OAILiveTvInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveTvInfoSignalError(OAILiveTvInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveTvProgramsSignalError() instead")
    void getLiveTvProgramsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveTvProgramsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgramSignalError() instead")
    void getProgramSignalE(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgramSignalError(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgramsSignalError() instead")
    void getProgramsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgramsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommendedProgramsSignalError() instead")
    void getRecommendedProgramsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommendedProgramsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingSignalError() instead")
    void getRecordingSignalE(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingSignalError(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingFoldersSignalError() instead")
    void getRecordingFoldersSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingFoldersSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingGroupSignalError() instead")
    void getRecordingGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingGroupsSignalError() instead")
    void getRecordingGroupsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingGroupsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingsSignalError() instead")
    void getRecordingsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingsSeriesSignalError() instead")
    void getRecordingsSeriesSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingsSeriesSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchedulesDirectCountriesSignalError() instead")
    void getSchedulesDirectCountriesSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchedulesDirectCountriesSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSeriesTimerSignalError() instead")
    void getSeriesTimerSignalE(OAISeriesTimerInfoDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSeriesTimerSignalError(OAISeriesTimerInfoDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSeriesTimersSignalError() instead")
    void getSeriesTimersSignalE(OAISeriesTimerInfoDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSeriesTimersSignalError(OAISeriesTimerInfoDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimerSignalError() instead")
    void getTimerSignalE(OAITimerInfoDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimerSignalError(OAITimerInfoDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimersSignalError() instead")
    void getTimersSignalE(OAITimerInfoDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimersSignalError(OAITimerInfoDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTunerHostTypesSignalError() instead")
    void getTunerHostTypesSignalE(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTunerHostTypesSignalError(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetTunerSignalError() instead")
    void resetTunerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetTunerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChannelMappingSignalError() instead")
    void setChannelMappingSignalE(OAITunerChannelMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setChannelMappingSignalError(OAITunerChannelMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSeriesTimerSignalError() instead")
    void updateSeriesTimerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSeriesTimerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTimerSignalError() instead")
    void updateTimerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTimerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addListingProviderSignalErrorFull() instead")
    void addListingProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addListingProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTunerHostSignalErrorFull() instead")
    void addTunerHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTunerHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelSeriesTimerSignalErrorFull() instead")
    void cancelSeriesTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSeriesTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelTimerSignalErrorFull() instead")
    void cancelTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSeriesTimerSignalErrorFull() instead")
    void createSeriesTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSeriesTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTimerSignalErrorFull() instead")
    void createTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteListingProviderSignalErrorFull() instead")
    void deleteListingProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteListingProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecordingSignalErrorFull() instead")
    void deleteRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTunerHostSignalErrorFull() instead")
    void deleteTunerHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTunerHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoverTunersSignalErrorFull() instead")
    void discoverTunersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoverTunersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discvoverTunersSignalErrorFull() instead")
    void discvoverTunersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discvoverTunersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelSignalErrorFull() instead")
    void getChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelMappingOptionsSignalErrorFull() instead")
    void getChannelMappingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelMappingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultListingProviderSignalErrorFull() instead")
    void getDefaultListingProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultListingProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultTimerSignalErrorFull() instead")
    void getDefaultTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuideInfoSignalErrorFull() instead")
    void getGuideInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuideInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLineupsSignalErrorFull() instead")
    void getLineupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLineupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveRecordingFileSignalErrorFull() instead")
    void getLiveRecordingFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveRecordingFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveStreamFileSignalErrorFull() instead")
    void getLiveStreamFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveStreamFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveTvChannelsSignalErrorFull() instead")
    void getLiveTvChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveTvChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveTvInfoSignalErrorFull() instead")
    void getLiveTvInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveTvInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveTvProgramsSignalErrorFull() instead")
    void getLiveTvProgramsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveTvProgramsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgramSignalErrorFull() instead")
    void getProgramSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgramSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgramsSignalErrorFull() instead")
    void getProgramsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgramsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommendedProgramsSignalErrorFull() instead")
    void getRecommendedProgramsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommendedProgramsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingSignalErrorFull() instead")
    void getRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingFoldersSignalErrorFull() instead")
    void getRecordingFoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingFoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingGroupSignalErrorFull() instead")
    void getRecordingGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingGroupsSignalErrorFull() instead")
    void getRecordingGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingsSignalErrorFull() instead")
    void getRecordingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordingsSeriesSignalErrorFull() instead")
    void getRecordingsSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordingsSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchedulesDirectCountriesSignalErrorFull() instead")
    void getSchedulesDirectCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchedulesDirectCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSeriesTimerSignalErrorFull() instead")
    void getSeriesTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSeriesTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSeriesTimersSignalErrorFull() instead")
    void getSeriesTimersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSeriesTimersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimerSignalErrorFull() instead")
    void getTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimersSignalErrorFull() instead")
    void getTimersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTunerHostTypesSignalErrorFull() instead")
    void getTunerHostTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTunerHostTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetTunerSignalErrorFull() instead")
    void resetTunerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetTunerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChannelMappingSignalErrorFull() instead")
    void setChannelMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setChannelMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSeriesTimerSignalErrorFull() instead")
    void updateSeriesTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSeriesTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTimerSignalErrorFull() instead")
    void updateTimerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTimerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
