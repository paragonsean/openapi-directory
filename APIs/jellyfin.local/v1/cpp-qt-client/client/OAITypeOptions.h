/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITypeOptions.h
 *
 * 
 */

#ifndef OAITypeOptions_H
#define OAITypeOptions_H

#include <QJsonObject>

#include "OAIImageOption.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageOption;

class OAITypeOptions : public OAIObject {
public:
    OAITypeOptions();
    OAITypeOptions(QString json);
    ~OAITypeOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getImageFetcherOrder() const;
    void setImageFetcherOrder(const QList<QString> &image_fetcher_order);
    bool is_image_fetcher_order_Set() const;
    bool is_image_fetcher_order_Valid() const;

    QList<QString> getImageFetchers() const;
    void setImageFetchers(const QList<QString> &image_fetchers);
    bool is_image_fetchers_Set() const;
    bool is_image_fetchers_Valid() const;

    QList<OAIImageOption> getImageOptions() const;
    void setImageOptions(const QList<OAIImageOption> &image_options);
    bool is_image_options_Set() const;
    bool is_image_options_Valid() const;

    QList<QString> getMetadataFetcherOrder() const;
    void setMetadataFetcherOrder(const QList<QString> &metadata_fetcher_order);
    bool is_metadata_fetcher_order_Set() const;
    bool is_metadata_fetcher_order_Valid() const;

    QList<QString> getMetadataFetchers() const;
    void setMetadataFetchers(const QList<QString> &metadata_fetchers);
    bool is_metadata_fetchers_Set() const;
    bool is_metadata_fetchers_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_image_fetcher_order;
    bool m_image_fetcher_order_isSet;
    bool m_image_fetcher_order_isValid;

    QList<QString> m_image_fetchers;
    bool m_image_fetchers_isSet;
    bool m_image_fetchers_isValid;

    QList<OAIImageOption> m_image_options;
    bool m_image_options_isSet;
    bool m_image_options_isValid;

    QList<QString> m_metadata_fetcher_order;
    bool m_metadata_fetcher_order_isSet;
    bool m_metadata_fetcher_order_isValid;

    QList<QString> m_metadata_fetchers;
    bool m_metadata_fetchers_isSet;
    bool m_metadata_fetchers_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITypeOptions)

#endif // OAITypeOptions_H
