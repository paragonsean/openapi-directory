/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseItemPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseItemPerson::OAIBaseItemPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseItemPerson::OAIBaseItemPerson() {
    this->initializeModel();
}

OAIBaseItemPerson::~OAIBaseItemPerson() {}

void OAIBaseItemPerson::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_blur_hashes_isSet = false;
    m_image_blur_hashes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_image_tag_isSet = false;
    m_primary_image_tag_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBaseItemPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseItemPerson::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_image_blur_hashes_isValid = ::OpenAPI::fromJsonValue(m_image_blur_hashes, json[QString("ImageBlurHashes")]);
    m_image_blur_hashes_isSet = !json[QString("ImageBlurHashes")].isNull() && m_image_blur_hashes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_primary_image_tag, json[QString("PrimaryImageTag")]);
    m_primary_image_tag_isSet = !json[QString("PrimaryImageTag")].isNull() && m_primary_image_tag_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIBaseItemPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseItemPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_blur_hashes.isSet()) {
        obj.insert(QString("ImageBlurHashes"), ::OpenAPI::toJsonValue(m_image_blur_hashes));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_image_tag_isSet) {
        obj.insert(QString("PrimaryImageTag"), ::OpenAPI::toJsonValue(m_primary_image_tag));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIBaseItemPerson::getId() const {
    return m_id;
}
void OAIBaseItemPerson::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBaseItemPerson::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBaseItemPerson::is_id_Valid() const{
    return m_id_isValid;
}

OAIBaseItemPerson_ImageBlurHashes OAIBaseItemPerson::getImageBlurHashes() const {
    return m_image_blur_hashes;
}
void OAIBaseItemPerson::setImageBlurHashes(const OAIBaseItemPerson_ImageBlurHashes &image_blur_hashes) {
    m_image_blur_hashes = image_blur_hashes;
    m_image_blur_hashes_isSet = true;
}

bool OAIBaseItemPerson::is_image_blur_hashes_Set() const{
    return m_image_blur_hashes_isSet;
}

bool OAIBaseItemPerson::is_image_blur_hashes_Valid() const{
    return m_image_blur_hashes_isValid;
}

QString OAIBaseItemPerson::getName() const {
    return m_name;
}
void OAIBaseItemPerson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBaseItemPerson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBaseItemPerson::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBaseItemPerson::getPrimaryImageTag() const {
    return m_primary_image_tag;
}
void OAIBaseItemPerson::setPrimaryImageTag(const QString &primary_image_tag) {
    m_primary_image_tag = primary_image_tag;
    m_primary_image_tag_isSet = true;
}

bool OAIBaseItemPerson::is_primary_image_tag_Set() const{
    return m_primary_image_tag_isSet;
}

bool OAIBaseItemPerson::is_primary_image_tag_Valid() const{
    return m_primary_image_tag_isValid;
}

QString OAIBaseItemPerson::getRole() const {
    return m_role;
}
void OAIBaseItemPerson::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIBaseItemPerson::is_role_Set() const{
    return m_role_isSet;
}

bool OAIBaseItemPerson::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIBaseItemPerson::getType() const {
    return m_type;
}
void OAIBaseItemPerson::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBaseItemPerson::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBaseItemPerson::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBaseItemPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_blur_hashes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseItemPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
