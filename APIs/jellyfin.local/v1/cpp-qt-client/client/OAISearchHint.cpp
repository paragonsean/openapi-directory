/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchHint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchHint::OAISearchHint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchHint::OAISearchHint() {
    this->initializeModel();
}

OAISearchHint::~OAISearchHint() {}

void OAISearchHint::initializeModel() {

    m_album_isSet = false;
    m_album_isValid = false;

    m_album_artist_isSet = false;
    m_album_artist_isValid = false;

    m_album_id_isSet = false;
    m_album_id_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_backdrop_image_item_id_isSet = false;
    m_backdrop_image_item_id_isValid = false;

    m_backdrop_image_tag_isSet = false;
    m_backdrop_image_tag_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_episode_count_isSet = false;
    m_episode_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_index_number_isSet = false;
    m_index_number_isValid = false;

    m_is_folder_isSet = false;
    m_is_folder_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_matched_term_isSet = false;
    m_matched_term_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_index_number_isSet = false;
    m_parent_index_number_isValid = false;

    m_primary_image_aspect_ratio_isSet = false;
    m_primary_image_aspect_ratio_isValid = false;

    m_primary_image_tag_isSet = false;
    m_primary_image_tag_isValid = false;

    m_production_year_isSet = false;
    m_production_year_isValid = false;

    m_run_time_ticks_isSet = false;
    m_run_time_ticks_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_song_count_isSet = false;
    m_song_count_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_thumb_image_item_id_isSet = false;
    m_thumb_image_item_id_isValid = false;

    m_thumb_image_tag_isSet = false;
    m_thumb_image_tag_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISearchHint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchHint::fromJsonObject(QJsonObject json) {

    m_album_isValid = ::OpenAPI::fromJsonValue(m_album, json[QString("Album")]);
    m_album_isSet = !json[QString("Album")].isNull() && m_album_isValid;

    m_album_artist_isValid = ::OpenAPI::fromJsonValue(m_album_artist, json[QString("AlbumArtist")]);
    m_album_artist_isSet = !json[QString("AlbumArtist")].isNull() && m_album_artist_isValid;

    m_album_id_isValid = ::OpenAPI::fromJsonValue(m_album_id, json[QString("AlbumId")]);
    m_album_id_isSet = !json[QString("AlbumId")].isNull() && m_album_id_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("Artists")]);
    m_artists_isSet = !json[QString("Artists")].isNull() && m_artists_isValid;

    m_backdrop_image_item_id_isValid = ::OpenAPI::fromJsonValue(m_backdrop_image_item_id, json[QString("BackdropImageItemId")]);
    m_backdrop_image_item_id_isSet = !json[QString("BackdropImageItemId")].isNull() && m_backdrop_image_item_id_isValid;

    m_backdrop_image_tag_isValid = ::OpenAPI::fromJsonValue(m_backdrop_image_tag, json[QString("BackdropImageTag")]);
    m_backdrop_image_tag_isSet = !json[QString("BackdropImageTag")].isNull() && m_backdrop_image_tag_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("ChannelId")]);
    m_channel_id_isSet = !json[QString("ChannelId")].isNull() && m_channel_id_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_episode_count_isValid = ::OpenAPI::fromJsonValue(m_episode_count, json[QString("EpisodeCount")]);
    m_episode_count_isSet = !json[QString("EpisodeCount")].isNull() && m_episode_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_index_number_isValid = ::OpenAPI::fromJsonValue(m_index_number, json[QString("IndexNumber")]);
    m_index_number_isSet = !json[QString("IndexNumber")].isNull() && m_index_number_isValid;

    m_is_folder_isValid = ::OpenAPI::fromJsonValue(m_is_folder, json[QString("IsFolder")]);
    m_is_folder_isSet = !json[QString("IsFolder")].isNull() && m_is_folder_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemId")]);
    m_item_id_isSet = !json[QString("ItemId")].isNull() && m_item_id_isValid;

    m_matched_term_isValid = ::OpenAPI::fromJsonValue(m_matched_term, json[QString("MatchedTerm")]);
    m_matched_term_isSet = !json[QString("MatchedTerm")].isNull() && m_matched_term_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("MediaType")]);
    m_media_type_isSet = !json[QString("MediaType")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parent_index_number_isValid = ::OpenAPI::fromJsonValue(m_parent_index_number, json[QString("ParentIndexNumber")]);
    m_parent_index_number_isSet = !json[QString("ParentIndexNumber")].isNull() && m_parent_index_number_isValid;

    m_primary_image_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_primary_image_aspect_ratio, json[QString("PrimaryImageAspectRatio")]);
    m_primary_image_aspect_ratio_isSet = !json[QString("PrimaryImageAspectRatio")].isNull() && m_primary_image_aspect_ratio_isValid;

    m_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_primary_image_tag, json[QString("PrimaryImageTag")]);
    m_primary_image_tag_isSet = !json[QString("PrimaryImageTag")].isNull() && m_primary_image_tag_isValid;

    m_production_year_isValid = ::OpenAPI::fromJsonValue(m_production_year, json[QString("ProductionYear")]);
    m_production_year_isSet = !json[QString("ProductionYear")].isNull() && m_production_year_isValid;

    m_run_time_ticks_isValid = ::OpenAPI::fromJsonValue(m_run_time_ticks, json[QString("RunTimeTicks")]);
    m_run_time_ticks_isSet = !json[QString("RunTimeTicks")].isNull() && m_run_time_ticks_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("Series")]);
    m_series_isSet = !json[QString("Series")].isNull() && m_series_isValid;

    m_song_count_isValid = ::OpenAPI::fromJsonValue(m_song_count, json[QString("SongCount")]);
    m_song_count_isSet = !json[QString("SongCount")].isNull() && m_song_count_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_thumb_image_item_id_isValid = ::OpenAPI::fromJsonValue(m_thumb_image_item_id, json[QString("ThumbImageItemId")]);
    m_thumb_image_item_id_isSet = !json[QString("ThumbImageItemId")].isNull() && m_thumb_image_item_id_isValid;

    m_thumb_image_tag_isValid = ::OpenAPI::fromJsonValue(m_thumb_image_tag, json[QString("ThumbImageTag")]);
    m_thumb_image_tag_isSet = !json[QString("ThumbImageTag")].isNull() && m_thumb_image_tag_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAISearchHint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchHint::asJsonObject() const {
    QJsonObject obj;
    if (m_album_isSet) {
        obj.insert(QString("Album"), ::OpenAPI::toJsonValue(m_album));
    }
    if (m_album_artist_isSet) {
        obj.insert(QString("AlbumArtist"), ::OpenAPI::toJsonValue(m_album_artist));
    }
    if (m_album_id_isSet) {
        obj.insert(QString("AlbumId"), ::OpenAPI::toJsonValue(m_album_id));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("Artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_backdrop_image_item_id_isSet) {
        obj.insert(QString("BackdropImageItemId"), ::OpenAPI::toJsonValue(m_backdrop_image_item_id));
    }
    if (m_backdrop_image_tag_isSet) {
        obj.insert(QString("BackdropImageTag"), ::OpenAPI::toJsonValue(m_backdrop_image_tag));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("ChannelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_episode_count_isSet) {
        obj.insert(QString("EpisodeCount"), ::OpenAPI::toJsonValue(m_episode_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_index_number_isSet) {
        obj.insert(QString("IndexNumber"), ::OpenAPI::toJsonValue(m_index_number));
    }
    if (m_is_folder_isSet) {
        obj.insert(QString("IsFolder"), ::OpenAPI::toJsonValue(m_is_folder));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_matched_term_isSet) {
        obj.insert(QString("MatchedTerm"), ::OpenAPI::toJsonValue(m_matched_term));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("MediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_index_number_isSet) {
        obj.insert(QString("ParentIndexNumber"), ::OpenAPI::toJsonValue(m_parent_index_number));
    }
    if (m_primary_image_aspect_ratio_isSet) {
        obj.insert(QString("PrimaryImageAspectRatio"), ::OpenAPI::toJsonValue(m_primary_image_aspect_ratio));
    }
    if (m_primary_image_tag_isSet) {
        obj.insert(QString("PrimaryImageTag"), ::OpenAPI::toJsonValue(m_primary_image_tag));
    }
    if (m_production_year_isSet) {
        obj.insert(QString("ProductionYear"), ::OpenAPI::toJsonValue(m_production_year));
    }
    if (m_run_time_ticks_isSet) {
        obj.insert(QString("RunTimeTicks"), ::OpenAPI::toJsonValue(m_run_time_ticks));
    }
    if (m_series_isSet) {
        obj.insert(QString("Series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_song_count_isSet) {
        obj.insert(QString("SongCount"), ::OpenAPI::toJsonValue(m_song_count));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_thumb_image_item_id_isSet) {
        obj.insert(QString("ThumbImageItemId"), ::OpenAPI::toJsonValue(m_thumb_image_item_id));
    }
    if (m_thumb_image_tag_isSet) {
        obj.insert(QString("ThumbImageTag"), ::OpenAPI::toJsonValue(m_thumb_image_tag));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISearchHint::getAlbum() const {
    return m_album;
}
void OAISearchHint::setAlbum(const QString &album) {
    m_album = album;
    m_album_isSet = true;
}

bool OAISearchHint::is_album_Set() const{
    return m_album_isSet;
}

bool OAISearchHint::is_album_Valid() const{
    return m_album_isValid;
}

QString OAISearchHint::getAlbumArtist() const {
    return m_album_artist;
}
void OAISearchHint::setAlbumArtist(const QString &album_artist) {
    m_album_artist = album_artist;
    m_album_artist_isSet = true;
}

bool OAISearchHint::is_album_artist_Set() const{
    return m_album_artist_isSet;
}

bool OAISearchHint::is_album_artist_Valid() const{
    return m_album_artist_isValid;
}

QString OAISearchHint::getAlbumId() const {
    return m_album_id;
}
void OAISearchHint::setAlbumId(const QString &album_id) {
    m_album_id = album_id;
    m_album_id_isSet = true;
}

bool OAISearchHint::is_album_id_Set() const{
    return m_album_id_isSet;
}

bool OAISearchHint::is_album_id_Valid() const{
    return m_album_id_isValid;
}

QList<QString> OAISearchHint::getArtists() const {
    return m_artists;
}
void OAISearchHint::setArtists(const QList<QString> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAISearchHint::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAISearchHint::is_artists_Valid() const{
    return m_artists_isValid;
}

QString OAISearchHint::getBackdropImageItemId() const {
    return m_backdrop_image_item_id;
}
void OAISearchHint::setBackdropImageItemId(const QString &backdrop_image_item_id) {
    m_backdrop_image_item_id = backdrop_image_item_id;
    m_backdrop_image_item_id_isSet = true;
}

bool OAISearchHint::is_backdrop_image_item_id_Set() const{
    return m_backdrop_image_item_id_isSet;
}

bool OAISearchHint::is_backdrop_image_item_id_Valid() const{
    return m_backdrop_image_item_id_isValid;
}

QString OAISearchHint::getBackdropImageTag() const {
    return m_backdrop_image_tag;
}
void OAISearchHint::setBackdropImageTag(const QString &backdrop_image_tag) {
    m_backdrop_image_tag = backdrop_image_tag;
    m_backdrop_image_tag_isSet = true;
}

bool OAISearchHint::is_backdrop_image_tag_Set() const{
    return m_backdrop_image_tag_isSet;
}

bool OAISearchHint::is_backdrop_image_tag_Valid() const{
    return m_backdrop_image_tag_isValid;
}

QString OAISearchHint::getChannelId() const {
    return m_channel_id;
}
void OAISearchHint::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAISearchHint::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAISearchHint::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAISearchHint::getChannelName() const {
    return m_channel_name;
}
void OAISearchHint::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAISearchHint::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAISearchHint::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QDateTime OAISearchHint::getEndDate() const {
    return m_end_date;
}
void OAISearchHint::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAISearchHint::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAISearchHint::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAISearchHint::getEpisodeCount() const {
    return m_episode_count;
}
void OAISearchHint::setEpisodeCount(const qint32 &episode_count) {
    m_episode_count = episode_count;
    m_episode_count_isSet = true;
}

bool OAISearchHint::is_episode_count_Set() const{
    return m_episode_count_isSet;
}

bool OAISearchHint::is_episode_count_Valid() const{
    return m_episode_count_isValid;
}

QString OAISearchHint::getId() const {
    return m_id;
}
void OAISearchHint::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchHint::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchHint::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAISearchHint::getIndexNumber() const {
    return m_index_number;
}
void OAISearchHint::setIndexNumber(const qint32 &index_number) {
    m_index_number = index_number;
    m_index_number_isSet = true;
}

bool OAISearchHint::is_index_number_Set() const{
    return m_index_number_isSet;
}

bool OAISearchHint::is_index_number_Valid() const{
    return m_index_number_isValid;
}

bool OAISearchHint::isIsFolder() const {
    return m_is_folder;
}
void OAISearchHint::setIsFolder(const bool &is_folder) {
    m_is_folder = is_folder;
    m_is_folder_isSet = true;
}

bool OAISearchHint::is_is_folder_Set() const{
    return m_is_folder_isSet;
}

bool OAISearchHint::is_is_folder_Valid() const{
    return m_is_folder_isValid;
}

QString OAISearchHint::getItemId() const {
    return m_item_id;
}
void OAISearchHint::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAISearchHint::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAISearchHint::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAISearchHint::getMatchedTerm() const {
    return m_matched_term;
}
void OAISearchHint::setMatchedTerm(const QString &matched_term) {
    m_matched_term = matched_term;
    m_matched_term_isSet = true;
}

bool OAISearchHint::is_matched_term_Set() const{
    return m_matched_term_isSet;
}

bool OAISearchHint::is_matched_term_Valid() const{
    return m_matched_term_isValid;
}

QString OAISearchHint::getMediaType() const {
    return m_media_type;
}
void OAISearchHint::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAISearchHint::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAISearchHint::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAISearchHint::getName() const {
    return m_name;
}
void OAISearchHint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchHint::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchHint::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISearchHint::getParentIndexNumber() const {
    return m_parent_index_number;
}
void OAISearchHint::setParentIndexNumber(const qint32 &parent_index_number) {
    m_parent_index_number = parent_index_number;
    m_parent_index_number_isSet = true;
}

bool OAISearchHint::is_parent_index_number_Set() const{
    return m_parent_index_number_isSet;
}

bool OAISearchHint::is_parent_index_number_Valid() const{
    return m_parent_index_number_isValid;
}

double OAISearchHint::getPrimaryImageAspectRatio() const {
    return m_primary_image_aspect_ratio;
}
void OAISearchHint::setPrimaryImageAspectRatio(const double &primary_image_aspect_ratio) {
    m_primary_image_aspect_ratio = primary_image_aspect_ratio;
    m_primary_image_aspect_ratio_isSet = true;
}

bool OAISearchHint::is_primary_image_aspect_ratio_Set() const{
    return m_primary_image_aspect_ratio_isSet;
}

bool OAISearchHint::is_primary_image_aspect_ratio_Valid() const{
    return m_primary_image_aspect_ratio_isValid;
}

QString OAISearchHint::getPrimaryImageTag() const {
    return m_primary_image_tag;
}
void OAISearchHint::setPrimaryImageTag(const QString &primary_image_tag) {
    m_primary_image_tag = primary_image_tag;
    m_primary_image_tag_isSet = true;
}

bool OAISearchHint::is_primary_image_tag_Set() const{
    return m_primary_image_tag_isSet;
}

bool OAISearchHint::is_primary_image_tag_Valid() const{
    return m_primary_image_tag_isValid;
}

qint32 OAISearchHint::getProductionYear() const {
    return m_production_year;
}
void OAISearchHint::setProductionYear(const qint32 &production_year) {
    m_production_year = production_year;
    m_production_year_isSet = true;
}

bool OAISearchHint::is_production_year_Set() const{
    return m_production_year_isSet;
}

bool OAISearchHint::is_production_year_Valid() const{
    return m_production_year_isValid;
}

qint64 OAISearchHint::getRunTimeTicks() const {
    return m_run_time_ticks;
}
void OAISearchHint::setRunTimeTicks(const qint64 &run_time_ticks) {
    m_run_time_ticks = run_time_ticks;
    m_run_time_ticks_isSet = true;
}

bool OAISearchHint::is_run_time_ticks_Set() const{
    return m_run_time_ticks_isSet;
}

bool OAISearchHint::is_run_time_ticks_Valid() const{
    return m_run_time_ticks_isValid;
}

QString OAISearchHint::getSeries() const {
    return m_series;
}
void OAISearchHint::setSeries(const QString &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAISearchHint::is_series_Set() const{
    return m_series_isSet;
}

bool OAISearchHint::is_series_Valid() const{
    return m_series_isValid;
}

qint32 OAISearchHint::getSongCount() const {
    return m_song_count;
}
void OAISearchHint::setSongCount(const qint32 &song_count) {
    m_song_count = song_count;
    m_song_count_isSet = true;
}

bool OAISearchHint::is_song_count_Set() const{
    return m_song_count_isSet;
}

bool OAISearchHint::is_song_count_Valid() const{
    return m_song_count_isValid;
}

QDateTime OAISearchHint::getStartDate() const {
    return m_start_date;
}
void OAISearchHint::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAISearchHint::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAISearchHint::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAISearchHint::getStatus() const {
    return m_status;
}
void OAISearchHint::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISearchHint::is_status_Set() const{
    return m_status_isSet;
}

bool OAISearchHint::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISearchHint::getThumbImageItemId() const {
    return m_thumb_image_item_id;
}
void OAISearchHint::setThumbImageItemId(const QString &thumb_image_item_id) {
    m_thumb_image_item_id = thumb_image_item_id;
    m_thumb_image_item_id_isSet = true;
}

bool OAISearchHint::is_thumb_image_item_id_Set() const{
    return m_thumb_image_item_id_isSet;
}

bool OAISearchHint::is_thumb_image_item_id_Valid() const{
    return m_thumb_image_item_id_isValid;
}

QString OAISearchHint::getThumbImageTag() const {
    return m_thumb_image_tag;
}
void OAISearchHint::setThumbImageTag(const QString &thumb_image_tag) {
    m_thumb_image_tag = thumb_image_tag;
    m_thumb_image_tag_isSet = true;
}

bool OAISearchHint::is_thumb_image_tag_Set() const{
    return m_thumb_image_tag_isSet;
}

bool OAISearchHint::is_thumb_image_tag_Valid() const{
    return m_thumb_image_tag_isValid;
}

QString OAISearchHint::getType() const {
    return m_type;
}
void OAISearchHint::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearchHint::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearchHint::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISearchHint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backdrop_image_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backdrop_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_index_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_time_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_image_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchHint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
