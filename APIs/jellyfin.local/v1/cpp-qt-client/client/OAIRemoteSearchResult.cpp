/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteSearchResult::OAIRemoteSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteSearchResult::OAIRemoteSearchResult() {
    this->initializeModel();
}

OAIRemoteSearchResult::~OAIRemoteSearchResult() {}

void OAIRemoteSearchResult::initializeModel() {

    m_album_artist_isSet = false;
    m_album_artist_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_index_number_isSet = false;
    m_index_number_isValid = false;

    m_index_number_end_isSet = false;
    m_index_number_end_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_parent_index_number_isSet = false;
    m_parent_index_number_isValid = false;

    m_premiere_date_isSet = false;
    m_premiere_date_isValid = false;

    m_production_year_isSet = false;
    m_production_year_isValid = false;

    m_provider_ids_isSet = false;
    m_provider_ids_isValid = false;

    m_search_provider_name_isSet = false;
    m_search_provider_name_isValid = false;
}

void OAIRemoteSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteSearchResult::fromJsonObject(QJsonObject json) {

    m_album_artist_isValid = ::OpenAPI::fromJsonValue(m_album_artist, json[QString("AlbumArtist")]);
    m_album_artist_isSet = !json[QString("AlbumArtist")].isNull() && m_album_artist_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("Artists")]);
    m_artists_isSet = !json[QString("Artists")].isNull() && m_artists_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("ImageUrl")]);
    m_image_url_isSet = !json[QString("ImageUrl")].isNull() && m_image_url_isValid;

    m_index_number_isValid = ::OpenAPI::fromJsonValue(m_index_number, json[QString("IndexNumber")]);
    m_index_number_isSet = !json[QString("IndexNumber")].isNull() && m_index_number_isValid;

    m_index_number_end_isValid = ::OpenAPI::fromJsonValue(m_index_number_end, json[QString("IndexNumberEnd")]);
    m_index_number_end_isSet = !json[QString("IndexNumberEnd")].isNull() && m_index_number_end_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("Overview")]);
    m_overview_isSet = !json[QString("Overview")].isNull() && m_overview_isValid;

    m_parent_index_number_isValid = ::OpenAPI::fromJsonValue(m_parent_index_number, json[QString("ParentIndexNumber")]);
    m_parent_index_number_isSet = !json[QString("ParentIndexNumber")].isNull() && m_parent_index_number_isValid;

    m_premiere_date_isValid = ::OpenAPI::fromJsonValue(m_premiere_date, json[QString("PremiereDate")]);
    m_premiere_date_isSet = !json[QString("PremiereDate")].isNull() && m_premiere_date_isValid;

    m_production_year_isValid = ::OpenAPI::fromJsonValue(m_production_year, json[QString("ProductionYear")]);
    m_production_year_isSet = !json[QString("ProductionYear")].isNull() && m_production_year_isValid;

    m_provider_ids_isValid = ::OpenAPI::fromJsonValue(m_provider_ids, json[QString("ProviderIds")]);
    m_provider_ids_isSet = !json[QString("ProviderIds")].isNull() && m_provider_ids_isValid;

    m_search_provider_name_isValid = ::OpenAPI::fromJsonValue(m_search_provider_name, json[QString("SearchProviderName")]);
    m_search_provider_name_isSet = !json[QString("SearchProviderName")].isNull() && m_search_provider_name_isValid;
}

QString OAIRemoteSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_album_artist.isSet()) {
        obj.insert(QString("AlbumArtist"), ::OpenAPI::toJsonValue(m_album_artist));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("Artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("ImageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_index_number_isSet) {
        obj.insert(QString("IndexNumber"), ::OpenAPI::toJsonValue(m_index_number));
    }
    if (m_index_number_end_isSet) {
        obj.insert(QString("IndexNumberEnd"), ::OpenAPI::toJsonValue(m_index_number_end));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overview_isSet) {
        obj.insert(QString("Overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_parent_index_number_isSet) {
        obj.insert(QString("ParentIndexNumber"), ::OpenAPI::toJsonValue(m_parent_index_number));
    }
    if (m_premiere_date_isSet) {
        obj.insert(QString("PremiereDate"), ::OpenAPI::toJsonValue(m_premiere_date));
    }
    if (m_production_year_isSet) {
        obj.insert(QString("ProductionYear"), ::OpenAPI::toJsonValue(m_production_year));
    }
    if (m_provider_ids.size() > 0) {
        obj.insert(QString("ProviderIds"), ::OpenAPI::toJsonValue(m_provider_ids));
    }
    if (m_search_provider_name_isSet) {
        obj.insert(QString("SearchProviderName"), ::OpenAPI::toJsonValue(m_search_provider_name));
    }
    return obj;
}

OAIRemoteSearchResult OAIRemoteSearchResult::getAlbumArtist() const {
    return m_album_artist;
}
void OAIRemoteSearchResult::setAlbumArtist(const OAIRemoteSearchResult &album_artist) {
    m_album_artist = album_artist;
    m_album_artist_isSet = true;
}

bool OAIRemoteSearchResult::is_album_artist_Set() const{
    return m_album_artist_isSet;
}

bool OAIRemoteSearchResult::is_album_artist_Valid() const{
    return m_album_artist_isValid;
}

QList<OAIRemoteSearchResult> OAIRemoteSearchResult::getArtists() const {
    return m_artists;
}
void OAIRemoteSearchResult::setArtists(const QList<OAIRemoteSearchResult> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAIRemoteSearchResult::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAIRemoteSearchResult::is_artists_Valid() const{
    return m_artists_isValid;
}

QString OAIRemoteSearchResult::getImageUrl() const {
    return m_image_url;
}
void OAIRemoteSearchResult::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIRemoteSearchResult::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIRemoteSearchResult::is_image_url_Valid() const{
    return m_image_url_isValid;
}

qint32 OAIRemoteSearchResult::getIndexNumber() const {
    return m_index_number;
}
void OAIRemoteSearchResult::setIndexNumber(const qint32 &index_number) {
    m_index_number = index_number;
    m_index_number_isSet = true;
}

bool OAIRemoteSearchResult::is_index_number_Set() const{
    return m_index_number_isSet;
}

bool OAIRemoteSearchResult::is_index_number_Valid() const{
    return m_index_number_isValid;
}

qint32 OAIRemoteSearchResult::getIndexNumberEnd() const {
    return m_index_number_end;
}
void OAIRemoteSearchResult::setIndexNumberEnd(const qint32 &index_number_end) {
    m_index_number_end = index_number_end;
    m_index_number_end_isSet = true;
}

bool OAIRemoteSearchResult::is_index_number_end_Set() const{
    return m_index_number_end_isSet;
}

bool OAIRemoteSearchResult::is_index_number_end_Valid() const{
    return m_index_number_end_isValid;
}

QString OAIRemoteSearchResult::getName() const {
    return m_name;
}
void OAIRemoteSearchResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRemoteSearchResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRemoteSearchResult::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRemoteSearchResult::getOverview() const {
    return m_overview;
}
void OAIRemoteSearchResult::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIRemoteSearchResult::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIRemoteSearchResult::is_overview_Valid() const{
    return m_overview_isValid;
}

qint32 OAIRemoteSearchResult::getParentIndexNumber() const {
    return m_parent_index_number;
}
void OAIRemoteSearchResult::setParentIndexNumber(const qint32 &parent_index_number) {
    m_parent_index_number = parent_index_number;
    m_parent_index_number_isSet = true;
}

bool OAIRemoteSearchResult::is_parent_index_number_Set() const{
    return m_parent_index_number_isSet;
}

bool OAIRemoteSearchResult::is_parent_index_number_Valid() const{
    return m_parent_index_number_isValid;
}

QDateTime OAIRemoteSearchResult::getPremiereDate() const {
    return m_premiere_date;
}
void OAIRemoteSearchResult::setPremiereDate(const QDateTime &premiere_date) {
    m_premiere_date = premiere_date;
    m_premiere_date_isSet = true;
}

bool OAIRemoteSearchResult::is_premiere_date_Set() const{
    return m_premiere_date_isSet;
}

bool OAIRemoteSearchResult::is_premiere_date_Valid() const{
    return m_premiere_date_isValid;
}

qint32 OAIRemoteSearchResult::getProductionYear() const {
    return m_production_year;
}
void OAIRemoteSearchResult::setProductionYear(const qint32 &production_year) {
    m_production_year = production_year;
    m_production_year_isSet = true;
}

bool OAIRemoteSearchResult::is_production_year_Set() const{
    return m_production_year_isSet;
}

bool OAIRemoteSearchResult::is_production_year_Valid() const{
    return m_production_year_isValid;
}

QMap<QString, QString> OAIRemoteSearchResult::getProviderIds() const {
    return m_provider_ids;
}
void OAIRemoteSearchResult::setProviderIds(const QMap<QString, QString> &provider_ids) {
    m_provider_ids = provider_ids;
    m_provider_ids_isSet = true;
}

bool OAIRemoteSearchResult::is_provider_ids_Set() const{
    return m_provider_ids_isSet;
}

bool OAIRemoteSearchResult::is_provider_ids_Valid() const{
    return m_provider_ids_isValid;
}

QString OAIRemoteSearchResult::getSearchProviderName() const {
    return m_search_provider_name;
}
void OAIRemoteSearchResult::setSearchProviderName(const QString &search_provider_name) {
    m_search_provider_name = search_provider_name;
    m_search_provider_name_isSet = true;
}

bool OAIRemoteSearchResult::is_search_provider_name_Set() const{
    return m_search_provider_name_isSet;
}

bool OAIRemoteSearchResult::is_search_provider_name_Valid() const{
    return m_search_provider_name_isValid;
}

bool OAIRemoteSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_artist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_number_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_index_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premiere_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
