/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemInfo::OAISystemInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemInfo::OAISystemInfo() {
    this->initializeModel();
}

OAISystemInfo::~OAISystemInfo() {}

void OAISystemInfo::initializeModel() {

    m_cache_path_isSet = false;
    m_cache_path_isValid = false;

    m_can_launch_web_browser_isSet = false;
    m_can_launch_web_browser_isValid = false;

    m_can_self_restart_isSet = false;
    m_can_self_restart_isValid = false;

    m_completed_installations_isSet = false;
    m_completed_installations_isValid = false;

    m_encoder_location_isSet = false;
    m_encoder_location_isValid = false;

    m_has_pending_restart_isSet = false;
    m_has_pending_restart_isValid = false;

    m_has_update_available_isSet = false;
    m_has_update_available_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_internal_metadata_path_isSet = false;
    m_internal_metadata_path_isValid = false;

    m_is_shutting_down_isSet = false;
    m_is_shutting_down_isValid = false;

    m_items_by_name_path_isSet = false;
    m_items_by_name_path_isValid = false;

    m_local_address_isSet = false;
    m_local_address_isValid = false;

    m_log_path_isSet = false;
    m_log_path_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_operating_system_display_name_isSet = false;
    m_operating_system_display_name_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_program_data_path_isSet = false;
    m_program_data_path_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_startup_wizard_completed_isSet = false;
    m_startup_wizard_completed_isValid = false;

    m_supports_library_monitor_isSet = false;
    m_supports_library_monitor_isValid = false;

    m_system_architecture_isSet = false;
    m_system_architecture_isValid = false;

    m_transcoding_temp_path_isSet = false;
    m_transcoding_temp_path_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_web_path_isSet = false;
    m_web_path_isValid = false;

    m_web_socket_port_number_isSet = false;
    m_web_socket_port_number_isValid = false;
}

void OAISystemInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemInfo::fromJsonObject(QJsonObject json) {

    m_cache_path_isValid = ::OpenAPI::fromJsonValue(m_cache_path, json[QString("CachePath")]);
    m_cache_path_isSet = !json[QString("CachePath")].isNull() && m_cache_path_isValid;

    m_can_launch_web_browser_isValid = ::OpenAPI::fromJsonValue(m_can_launch_web_browser, json[QString("CanLaunchWebBrowser")]);
    m_can_launch_web_browser_isSet = !json[QString("CanLaunchWebBrowser")].isNull() && m_can_launch_web_browser_isValid;

    m_can_self_restart_isValid = ::OpenAPI::fromJsonValue(m_can_self_restart, json[QString("CanSelfRestart")]);
    m_can_self_restart_isSet = !json[QString("CanSelfRestart")].isNull() && m_can_self_restart_isValid;

    m_completed_installations_isValid = ::OpenAPI::fromJsonValue(m_completed_installations, json[QString("CompletedInstallations")]);
    m_completed_installations_isSet = !json[QString("CompletedInstallations")].isNull() && m_completed_installations_isValid;

    m_encoder_location_isValid = ::OpenAPI::fromJsonValue(m_encoder_location, json[QString("EncoderLocation")]);
    m_encoder_location_isSet = !json[QString("EncoderLocation")].isNull() && m_encoder_location_isValid;

    m_has_pending_restart_isValid = ::OpenAPI::fromJsonValue(m_has_pending_restart, json[QString("HasPendingRestart")]);
    m_has_pending_restart_isSet = !json[QString("HasPendingRestart")].isNull() && m_has_pending_restart_isValid;

    m_has_update_available_isValid = ::OpenAPI::fromJsonValue(m_has_update_available, json[QString("HasUpdateAvailable")]);
    m_has_update_available_isSet = !json[QString("HasUpdateAvailable")].isNull() && m_has_update_available_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_internal_metadata_path_isValid = ::OpenAPI::fromJsonValue(m_internal_metadata_path, json[QString("InternalMetadataPath")]);
    m_internal_metadata_path_isSet = !json[QString("InternalMetadataPath")].isNull() && m_internal_metadata_path_isValid;

    m_is_shutting_down_isValid = ::OpenAPI::fromJsonValue(m_is_shutting_down, json[QString("IsShuttingDown")]);
    m_is_shutting_down_isSet = !json[QString("IsShuttingDown")].isNull() && m_is_shutting_down_isValid;

    m_items_by_name_path_isValid = ::OpenAPI::fromJsonValue(m_items_by_name_path, json[QString("ItemsByNamePath")]);
    m_items_by_name_path_isSet = !json[QString("ItemsByNamePath")].isNull() && m_items_by_name_path_isValid;

    m_local_address_isValid = ::OpenAPI::fromJsonValue(m_local_address, json[QString("LocalAddress")]);
    m_local_address_isSet = !json[QString("LocalAddress")].isNull() && m_local_address_isValid;

    m_log_path_isValid = ::OpenAPI::fromJsonValue(m_log_path, json[QString("LogPath")]);
    m_log_path_isSet = !json[QString("LogPath")].isNull() && m_log_path_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("OperatingSystem")]);
    m_operating_system_isSet = !json[QString("OperatingSystem")].isNull() && m_operating_system_isValid;

    m_operating_system_display_name_isValid = ::OpenAPI::fromJsonValue(m_operating_system_display_name, json[QString("OperatingSystemDisplayName")]);
    m_operating_system_display_name_isSet = !json[QString("OperatingSystemDisplayName")].isNull() && m_operating_system_display_name_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("PackageName")]);
    m_package_name_isSet = !json[QString("PackageName")].isNull() && m_package_name_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("ProductName")]);
    m_product_name_isSet = !json[QString("ProductName")].isNull() && m_product_name_isValid;

    m_program_data_path_isValid = ::OpenAPI::fromJsonValue(m_program_data_path, json[QString("ProgramDataPath")]);
    m_program_data_path_isSet = !json[QString("ProgramDataPath")].isNull() && m_program_data_path_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("ServerName")]);
    m_server_name_isSet = !json[QString("ServerName")].isNull() && m_server_name_isValid;

    m_startup_wizard_completed_isValid = ::OpenAPI::fromJsonValue(m_startup_wizard_completed, json[QString("StartupWizardCompleted")]);
    m_startup_wizard_completed_isSet = !json[QString("StartupWizardCompleted")].isNull() && m_startup_wizard_completed_isValid;

    m_supports_library_monitor_isValid = ::OpenAPI::fromJsonValue(m_supports_library_monitor, json[QString("SupportsLibraryMonitor")]);
    m_supports_library_monitor_isSet = !json[QString("SupportsLibraryMonitor")].isNull() && m_supports_library_monitor_isValid;

    m_system_architecture_isValid = ::OpenAPI::fromJsonValue(m_system_architecture, json[QString("SystemArchitecture")]);
    m_system_architecture_isSet = !json[QString("SystemArchitecture")].isNull() && m_system_architecture_isValid;

    m_transcoding_temp_path_isValid = ::OpenAPI::fromJsonValue(m_transcoding_temp_path, json[QString("TranscodingTempPath")]);
    m_transcoding_temp_path_isSet = !json[QString("TranscodingTempPath")].isNull() && m_transcoding_temp_path_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_web_path_isValid = ::OpenAPI::fromJsonValue(m_web_path, json[QString("WebPath")]);
    m_web_path_isSet = !json[QString("WebPath")].isNull() && m_web_path_isValid;

    m_web_socket_port_number_isValid = ::OpenAPI::fromJsonValue(m_web_socket_port_number, json[QString("WebSocketPortNumber")]);
    m_web_socket_port_number_isSet = !json[QString("WebSocketPortNumber")].isNull() && m_web_socket_port_number_isValid;
}

QString OAISystemInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_path_isSet) {
        obj.insert(QString("CachePath"), ::OpenAPI::toJsonValue(m_cache_path));
    }
    if (m_can_launch_web_browser_isSet) {
        obj.insert(QString("CanLaunchWebBrowser"), ::OpenAPI::toJsonValue(m_can_launch_web_browser));
    }
    if (m_can_self_restart_isSet) {
        obj.insert(QString("CanSelfRestart"), ::OpenAPI::toJsonValue(m_can_self_restart));
    }
    if (m_completed_installations.size() > 0) {
        obj.insert(QString("CompletedInstallations"), ::OpenAPI::toJsonValue(m_completed_installations));
    }
    if (m_encoder_location.isSet()) {
        obj.insert(QString("EncoderLocation"), ::OpenAPI::toJsonValue(m_encoder_location));
    }
    if (m_has_pending_restart_isSet) {
        obj.insert(QString("HasPendingRestart"), ::OpenAPI::toJsonValue(m_has_pending_restart));
    }
    if (m_has_update_available_isSet) {
        obj.insert(QString("HasUpdateAvailable"), ::OpenAPI::toJsonValue(m_has_update_available));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_internal_metadata_path_isSet) {
        obj.insert(QString("InternalMetadataPath"), ::OpenAPI::toJsonValue(m_internal_metadata_path));
    }
    if (m_is_shutting_down_isSet) {
        obj.insert(QString("IsShuttingDown"), ::OpenAPI::toJsonValue(m_is_shutting_down));
    }
    if (m_items_by_name_path_isSet) {
        obj.insert(QString("ItemsByNamePath"), ::OpenAPI::toJsonValue(m_items_by_name_path));
    }
    if (m_local_address_isSet) {
        obj.insert(QString("LocalAddress"), ::OpenAPI::toJsonValue(m_local_address));
    }
    if (m_log_path_isSet) {
        obj.insert(QString("LogPath"), ::OpenAPI::toJsonValue(m_log_path));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("OperatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_operating_system_display_name_isSet) {
        obj.insert(QString("OperatingSystemDisplayName"), ::OpenAPI::toJsonValue(m_operating_system_display_name));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("PackageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("ProductName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_program_data_path_isSet) {
        obj.insert(QString("ProgramDataPath"), ::OpenAPI::toJsonValue(m_program_data_path));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("ServerName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_startup_wizard_completed_isSet) {
        obj.insert(QString("StartupWizardCompleted"), ::OpenAPI::toJsonValue(m_startup_wizard_completed));
    }
    if (m_supports_library_monitor_isSet) {
        obj.insert(QString("SupportsLibraryMonitor"), ::OpenAPI::toJsonValue(m_supports_library_monitor));
    }
    if (m_system_architecture.isSet()) {
        obj.insert(QString("SystemArchitecture"), ::OpenAPI::toJsonValue(m_system_architecture));
    }
    if (m_transcoding_temp_path_isSet) {
        obj.insert(QString("TranscodingTempPath"), ::OpenAPI::toJsonValue(m_transcoding_temp_path));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_web_path_isSet) {
        obj.insert(QString("WebPath"), ::OpenAPI::toJsonValue(m_web_path));
    }
    if (m_web_socket_port_number_isSet) {
        obj.insert(QString("WebSocketPortNumber"), ::OpenAPI::toJsonValue(m_web_socket_port_number));
    }
    return obj;
}

QString OAISystemInfo::getCachePath() const {
    return m_cache_path;
}
void OAISystemInfo::setCachePath(const QString &cache_path) {
    m_cache_path = cache_path;
    m_cache_path_isSet = true;
}

bool OAISystemInfo::is_cache_path_Set() const{
    return m_cache_path_isSet;
}

bool OAISystemInfo::is_cache_path_Valid() const{
    return m_cache_path_isValid;
}

bool OAISystemInfo::isCanLaunchWebBrowser() const {
    return m_can_launch_web_browser;
}
void OAISystemInfo::setCanLaunchWebBrowser(const bool &can_launch_web_browser) {
    m_can_launch_web_browser = can_launch_web_browser;
    m_can_launch_web_browser_isSet = true;
}

bool OAISystemInfo::is_can_launch_web_browser_Set() const{
    return m_can_launch_web_browser_isSet;
}

bool OAISystemInfo::is_can_launch_web_browser_Valid() const{
    return m_can_launch_web_browser_isValid;
}

bool OAISystemInfo::isCanSelfRestart() const {
    return m_can_self_restart;
}
void OAISystemInfo::setCanSelfRestart(const bool &can_self_restart) {
    m_can_self_restart = can_self_restart;
    m_can_self_restart_isSet = true;
}

bool OAISystemInfo::is_can_self_restart_Set() const{
    return m_can_self_restart_isSet;
}

bool OAISystemInfo::is_can_self_restart_Valid() const{
    return m_can_self_restart_isValid;
}

QList<OAIInstallationInfo> OAISystemInfo::getCompletedInstallations() const {
    return m_completed_installations;
}
void OAISystemInfo::setCompletedInstallations(const QList<OAIInstallationInfo> &completed_installations) {
    m_completed_installations = completed_installations;
    m_completed_installations_isSet = true;
}

bool OAISystemInfo::is_completed_installations_Set() const{
    return m_completed_installations_isSet;
}

bool OAISystemInfo::is_completed_installations_Valid() const{
    return m_completed_installations_isValid;
}

OAIFFmpegLocation OAISystemInfo::getEncoderLocation() const {
    return m_encoder_location;
}
void OAISystemInfo::setEncoderLocation(const OAIFFmpegLocation &encoder_location) {
    m_encoder_location = encoder_location;
    m_encoder_location_isSet = true;
}

bool OAISystemInfo::is_encoder_location_Set() const{
    return m_encoder_location_isSet;
}

bool OAISystemInfo::is_encoder_location_Valid() const{
    return m_encoder_location_isValid;
}

bool OAISystemInfo::isHasPendingRestart() const {
    return m_has_pending_restart;
}
void OAISystemInfo::setHasPendingRestart(const bool &has_pending_restart) {
    m_has_pending_restart = has_pending_restart;
    m_has_pending_restart_isSet = true;
}

bool OAISystemInfo::is_has_pending_restart_Set() const{
    return m_has_pending_restart_isSet;
}

bool OAISystemInfo::is_has_pending_restart_Valid() const{
    return m_has_pending_restart_isValid;
}

bool OAISystemInfo::isHasUpdateAvailable() const {
    return m_has_update_available;
}
void OAISystemInfo::setHasUpdateAvailable(const bool &has_update_available) {
    m_has_update_available = has_update_available;
    m_has_update_available_isSet = true;
}

bool OAISystemInfo::is_has_update_available_Set() const{
    return m_has_update_available_isSet;
}

bool OAISystemInfo::is_has_update_available_Valid() const{
    return m_has_update_available_isValid;
}

QString OAISystemInfo::getId() const {
    return m_id;
}
void OAISystemInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISystemInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAISystemInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISystemInfo::getInternalMetadataPath() const {
    return m_internal_metadata_path;
}
void OAISystemInfo::setInternalMetadataPath(const QString &internal_metadata_path) {
    m_internal_metadata_path = internal_metadata_path;
    m_internal_metadata_path_isSet = true;
}

bool OAISystemInfo::is_internal_metadata_path_Set() const{
    return m_internal_metadata_path_isSet;
}

bool OAISystemInfo::is_internal_metadata_path_Valid() const{
    return m_internal_metadata_path_isValid;
}

bool OAISystemInfo::isIsShuttingDown() const {
    return m_is_shutting_down;
}
void OAISystemInfo::setIsShuttingDown(const bool &is_shutting_down) {
    m_is_shutting_down = is_shutting_down;
    m_is_shutting_down_isSet = true;
}

bool OAISystemInfo::is_is_shutting_down_Set() const{
    return m_is_shutting_down_isSet;
}

bool OAISystemInfo::is_is_shutting_down_Valid() const{
    return m_is_shutting_down_isValid;
}

QString OAISystemInfo::getItemsByNamePath() const {
    return m_items_by_name_path;
}
void OAISystemInfo::setItemsByNamePath(const QString &items_by_name_path) {
    m_items_by_name_path = items_by_name_path;
    m_items_by_name_path_isSet = true;
}

bool OAISystemInfo::is_items_by_name_path_Set() const{
    return m_items_by_name_path_isSet;
}

bool OAISystemInfo::is_items_by_name_path_Valid() const{
    return m_items_by_name_path_isValid;
}

QString OAISystemInfo::getLocalAddress() const {
    return m_local_address;
}
void OAISystemInfo::setLocalAddress(const QString &local_address) {
    m_local_address = local_address;
    m_local_address_isSet = true;
}

bool OAISystemInfo::is_local_address_Set() const{
    return m_local_address_isSet;
}

bool OAISystemInfo::is_local_address_Valid() const{
    return m_local_address_isValid;
}

QString OAISystemInfo::getLogPath() const {
    return m_log_path;
}
void OAISystemInfo::setLogPath(const QString &log_path) {
    m_log_path = log_path;
    m_log_path_isSet = true;
}

bool OAISystemInfo::is_log_path_Set() const{
    return m_log_path_isSet;
}

bool OAISystemInfo::is_log_path_Valid() const{
    return m_log_path_isValid;
}

QString OAISystemInfo::getOperatingSystem() const {
    return m_operating_system;
}
void OAISystemInfo::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAISystemInfo::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAISystemInfo::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

QString OAISystemInfo::getOperatingSystemDisplayName() const {
    return m_operating_system_display_name;
}
void OAISystemInfo::setOperatingSystemDisplayName(const QString &operating_system_display_name) {
    m_operating_system_display_name = operating_system_display_name;
    m_operating_system_display_name_isSet = true;
}

bool OAISystemInfo::is_operating_system_display_name_Set() const{
    return m_operating_system_display_name_isSet;
}

bool OAISystemInfo::is_operating_system_display_name_Valid() const{
    return m_operating_system_display_name_isValid;
}

QString OAISystemInfo::getPackageName() const {
    return m_package_name;
}
void OAISystemInfo::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAISystemInfo::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAISystemInfo::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAISystemInfo::getProductName() const {
    return m_product_name;
}
void OAISystemInfo::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAISystemInfo::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAISystemInfo::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAISystemInfo::getProgramDataPath() const {
    return m_program_data_path;
}
void OAISystemInfo::setProgramDataPath(const QString &program_data_path) {
    m_program_data_path = program_data_path;
    m_program_data_path_isSet = true;
}

bool OAISystemInfo::is_program_data_path_Set() const{
    return m_program_data_path_isSet;
}

bool OAISystemInfo::is_program_data_path_Valid() const{
    return m_program_data_path_isValid;
}

QString OAISystemInfo::getServerName() const {
    return m_server_name;
}
void OAISystemInfo::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAISystemInfo::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAISystemInfo::is_server_name_Valid() const{
    return m_server_name_isValid;
}

bool OAISystemInfo::isStartupWizardCompleted() const {
    return m_startup_wizard_completed;
}
void OAISystemInfo::setStartupWizardCompleted(const bool &startup_wizard_completed) {
    m_startup_wizard_completed = startup_wizard_completed;
    m_startup_wizard_completed_isSet = true;
}

bool OAISystemInfo::is_startup_wizard_completed_Set() const{
    return m_startup_wizard_completed_isSet;
}

bool OAISystemInfo::is_startup_wizard_completed_Valid() const{
    return m_startup_wizard_completed_isValid;
}

bool OAISystemInfo::isSupportsLibraryMonitor() const {
    return m_supports_library_monitor;
}
void OAISystemInfo::setSupportsLibraryMonitor(const bool &supports_library_monitor) {
    m_supports_library_monitor = supports_library_monitor;
    m_supports_library_monitor_isSet = true;
}

bool OAISystemInfo::is_supports_library_monitor_Set() const{
    return m_supports_library_monitor_isSet;
}

bool OAISystemInfo::is_supports_library_monitor_Valid() const{
    return m_supports_library_monitor_isValid;
}

OAIArchitecture OAISystemInfo::getSystemArchitecture() const {
    return m_system_architecture;
}
void OAISystemInfo::setSystemArchitecture(const OAIArchitecture &system_architecture) {
    m_system_architecture = system_architecture;
    m_system_architecture_isSet = true;
}

bool OAISystemInfo::is_system_architecture_Set() const{
    return m_system_architecture_isSet;
}

bool OAISystemInfo::is_system_architecture_Valid() const{
    return m_system_architecture_isValid;
}

QString OAISystemInfo::getTranscodingTempPath() const {
    return m_transcoding_temp_path;
}
void OAISystemInfo::setTranscodingTempPath(const QString &transcoding_temp_path) {
    m_transcoding_temp_path = transcoding_temp_path;
    m_transcoding_temp_path_isSet = true;
}

bool OAISystemInfo::is_transcoding_temp_path_Set() const{
    return m_transcoding_temp_path_isSet;
}

bool OAISystemInfo::is_transcoding_temp_path_Valid() const{
    return m_transcoding_temp_path_isValid;
}

QString OAISystemInfo::getVersion() const {
    return m_version;
}
void OAISystemInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISystemInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAISystemInfo::is_version_Valid() const{
    return m_version_isValid;
}

QString OAISystemInfo::getWebPath() const {
    return m_web_path;
}
void OAISystemInfo::setWebPath(const QString &web_path) {
    m_web_path = web_path;
    m_web_path_isSet = true;
}

bool OAISystemInfo::is_web_path_Set() const{
    return m_web_path_isSet;
}

bool OAISystemInfo::is_web_path_Valid() const{
    return m_web_path_isValid;
}

qint32 OAISystemInfo::getWebSocketPortNumber() const {
    return m_web_socket_port_number;
}
void OAISystemInfo::setWebSocketPortNumber(const qint32 &web_socket_port_number) {
    m_web_socket_port_number = web_socket_port_number;
    m_web_socket_port_number_isSet = true;
}

bool OAISystemInfo::is_web_socket_port_number_Set() const{
    return m_web_socket_port_number_isSet;
}

bool OAISystemInfo::is_web_socket_port_number_Valid() const{
    return m_web_socket_port_number_isValid;
}

bool OAISystemInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_launch_web_browser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_self_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_installations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoder_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pending_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_update_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_metadata_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shutting_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_by_name_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_data_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_wizard_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_library_monitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_architecture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcoding_temp_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_socket_port_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
