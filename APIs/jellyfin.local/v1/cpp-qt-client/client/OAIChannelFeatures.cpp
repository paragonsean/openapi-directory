/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelFeatures::OAIChannelFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelFeatures::OAIChannelFeatures() {
    this->initializeModel();
}

OAIChannelFeatures::~OAIChannelFeatures() {}

void OAIChannelFeatures::initializeModel() {

    m_auto_refresh_levels_isSet = false;
    m_auto_refresh_levels_isValid = false;

    m_can_filter_isSet = false;
    m_can_filter_isValid = false;

    m_can_search_isSet = false;
    m_can_search_isValid = false;

    m_content_types_isSet = false;
    m_content_types_isValid = false;

    m_default_sort_fields_isSet = false;
    m_default_sort_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_max_page_size_isSet = false;
    m_max_page_size_isValid = false;

    m_media_types_isSet = false;
    m_media_types_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_supports_content_downloading_isSet = false;
    m_supports_content_downloading_isValid = false;

    m_supports_latest_media_isSet = false;
    m_supports_latest_media_isValid = false;

    m_supports_sort_order_toggle_isSet = false;
    m_supports_sort_order_toggle_isValid = false;
}

void OAIChannelFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelFeatures::fromJsonObject(QJsonObject json) {

    m_auto_refresh_levels_isValid = ::OpenAPI::fromJsonValue(m_auto_refresh_levels, json[QString("AutoRefreshLevels")]);
    m_auto_refresh_levels_isSet = !json[QString("AutoRefreshLevels")].isNull() && m_auto_refresh_levels_isValid;

    m_can_filter_isValid = ::OpenAPI::fromJsonValue(m_can_filter, json[QString("CanFilter")]);
    m_can_filter_isSet = !json[QString("CanFilter")].isNull() && m_can_filter_isValid;

    m_can_search_isValid = ::OpenAPI::fromJsonValue(m_can_search, json[QString("CanSearch")]);
    m_can_search_isSet = !json[QString("CanSearch")].isNull() && m_can_search_isValid;

    m_content_types_isValid = ::OpenAPI::fromJsonValue(m_content_types, json[QString("ContentTypes")]);
    m_content_types_isSet = !json[QString("ContentTypes")].isNull() && m_content_types_isValid;

    m_default_sort_fields_isValid = ::OpenAPI::fromJsonValue(m_default_sort_fields, json[QString("DefaultSortFields")]);
    m_default_sort_fields_isSet = !json[QString("DefaultSortFields")].isNull() && m_default_sort_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_max_page_size_isValid = ::OpenAPI::fromJsonValue(m_max_page_size, json[QString("MaxPageSize")]);
    m_max_page_size_isSet = !json[QString("MaxPageSize")].isNull() && m_max_page_size_isValid;

    m_media_types_isValid = ::OpenAPI::fromJsonValue(m_media_types, json[QString("MediaTypes")]);
    m_media_types_isSet = !json[QString("MediaTypes")].isNull() && m_media_types_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_supports_content_downloading_isValid = ::OpenAPI::fromJsonValue(m_supports_content_downloading, json[QString("SupportsContentDownloading")]);
    m_supports_content_downloading_isSet = !json[QString("SupportsContentDownloading")].isNull() && m_supports_content_downloading_isValid;

    m_supports_latest_media_isValid = ::OpenAPI::fromJsonValue(m_supports_latest_media, json[QString("SupportsLatestMedia")]);
    m_supports_latest_media_isSet = !json[QString("SupportsLatestMedia")].isNull() && m_supports_latest_media_isValid;

    m_supports_sort_order_toggle_isValid = ::OpenAPI::fromJsonValue(m_supports_sort_order_toggle, json[QString("SupportsSortOrderToggle")]);
    m_supports_sort_order_toggle_isSet = !json[QString("SupportsSortOrderToggle")].isNull() && m_supports_sort_order_toggle_isValid;
}

QString OAIChannelFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_refresh_levels_isSet) {
        obj.insert(QString("AutoRefreshLevels"), ::OpenAPI::toJsonValue(m_auto_refresh_levels));
    }
    if (m_can_filter_isSet) {
        obj.insert(QString("CanFilter"), ::OpenAPI::toJsonValue(m_can_filter));
    }
    if (m_can_search_isSet) {
        obj.insert(QString("CanSearch"), ::OpenAPI::toJsonValue(m_can_search));
    }
    if (m_content_types.size() > 0) {
        obj.insert(QString("ContentTypes"), ::OpenAPI::toJsonValue(m_content_types));
    }
    if (m_default_sort_fields.size() > 0) {
        obj.insert(QString("DefaultSortFields"), ::OpenAPI::toJsonValue(m_default_sort_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_max_page_size_isSet) {
        obj.insert(QString("MaxPageSize"), ::OpenAPI::toJsonValue(m_max_page_size));
    }
    if (m_media_types.size() > 0) {
        obj.insert(QString("MediaTypes"), ::OpenAPI::toJsonValue(m_media_types));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_supports_content_downloading_isSet) {
        obj.insert(QString("SupportsContentDownloading"), ::OpenAPI::toJsonValue(m_supports_content_downloading));
    }
    if (m_supports_latest_media_isSet) {
        obj.insert(QString("SupportsLatestMedia"), ::OpenAPI::toJsonValue(m_supports_latest_media));
    }
    if (m_supports_sort_order_toggle_isSet) {
        obj.insert(QString("SupportsSortOrderToggle"), ::OpenAPI::toJsonValue(m_supports_sort_order_toggle));
    }
    return obj;
}

qint32 OAIChannelFeatures::getAutoRefreshLevels() const {
    return m_auto_refresh_levels;
}
void OAIChannelFeatures::setAutoRefreshLevels(const qint32 &auto_refresh_levels) {
    m_auto_refresh_levels = auto_refresh_levels;
    m_auto_refresh_levels_isSet = true;
}

bool OAIChannelFeatures::is_auto_refresh_levels_Set() const{
    return m_auto_refresh_levels_isSet;
}

bool OAIChannelFeatures::is_auto_refresh_levels_Valid() const{
    return m_auto_refresh_levels_isValid;
}

bool OAIChannelFeatures::isCanFilter() const {
    return m_can_filter;
}
void OAIChannelFeatures::setCanFilter(const bool &can_filter) {
    m_can_filter = can_filter;
    m_can_filter_isSet = true;
}

bool OAIChannelFeatures::is_can_filter_Set() const{
    return m_can_filter_isSet;
}

bool OAIChannelFeatures::is_can_filter_Valid() const{
    return m_can_filter_isValid;
}

bool OAIChannelFeatures::isCanSearch() const {
    return m_can_search;
}
void OAIChannelFeatures::setCanSearch(const bool &can_search) {
    m_can_search = can_search;
    m_can_search_isSet = true;
}

bool OAIChannelFeatures::is_can_search_Set() const{
    return m_can_search_isSet;
}

bool OAIChannelFeatures::is_can_search_Valid() const{
    return m_can_search_isValid;
}

QList<OAIChannelMediaContentType> OAIChannelFeatures::getContentTypes() const {
    return m_content_types;
}
void OAIChannelFeatures::setContentTypes(const QList<OAIChannelMediaContentType> &content_types) {
    m_content_types = content_types;
    m_content_types_isSet = true;
}

bool OAIChannelFeatures::is_content_types_Set() const{
    return m_content_types_isSet;
}

bool OAIChannelFeatures::is_content_types_Valid() const{
    return m_content_types_isValid;
}

QList<OAIChannelItemSortField> OAIChannelFeatures::getDefaultSortFields() const {
    return m_default_sort_fields;
}
void OAIChannelFeatures::setDefaultSortFields(const QList<OAIChannelItemSortField> &default_sort_fields) {
    m_default_sort_fields = default_sort_fields;
    m_default_sort_fields_isSet = true;
}

bool OAIChannelFeatures::is_default_sort_fields_Set() const{
    return m_default_sort_fields_isSet;
}

bool OAIChannelFeatures::is_default_sort_fields_Valid() const{
    return m_default_sort_fields_isValid;
}

QString OAIChannelFeatures::getId() const {
    return m_id;
}
void OAIChannelFeatures::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChannelFeatures::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChannelFeatures::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIChannelFeatures::getMaxPageSize() const {
    return m_max_page_size;
}
void OAIChannelFeatures::setMaxPageSize(const qint32 &max_page_size) {
    m_max_page_size = max_page_size;
    m_max_page_size_isSet = true;
}

bool OAIChannelFeatures::is_max_page_size_Set() const{
    return m_max_page_size_isSet;
}

bool OAIChannelFeatures::is_max_page_size_Valid() const{
    return m_max_page_size_isValid;
}

QList<OAIChannelMediaType> OAIChannelFeatures::getMediaTypes() const {
    return m_media_types;
}
void OAIChannelFeatures::setMediaTypes(const QList<OAIChannelMediaType> &media_types) {
    m_media_types = media_types;
    m_media_types_isSet = true;
}

bool OAIChannelFeatures::is_media_types_Set() const{
    return m_media_types_isSet;
}

bool OAIChannelFeatures::is_media_types_Valid() const{
    return m_media_types_isValid;
}

QString OAIChannelFeatures::getName() const {
    return m_name;
}
void OAIChannelFeatures::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChannelFeatures::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChannelFeatures::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIChannelFeatures::isSupportsContentDownloading() const {
    return m_supports_content_downloading;
}
void OAIChannelFeatures::setSupportsContentDownloading(const bool &supports_content_downloading) {
    m_supports_content_downloading = supports_content_downloading;
    m_supports_content_downloading_isSet = true;
}

bool OAIChannelFeatures::is_supports_content_downloading_Set() const{
    return m_supports_content_downloading_isSet;
}

bool OAIChannelFeatures::is_supports_content_downloading_Valid() const{
    return m_supports_content_downloading_isValid;
}

bool OAIChannelFeatures::isSupportsLatestMedia() const {
    return m_supports_latest_media;
}
void OAIChannelFeatures::setSupportsLatestMedia(const bool &supports_latest_media) {
    m_supports_latest_media = supports_latest_media;
    m_supports_latest_media_isSet = true;
}

bool OAIChannelFeatures::is_supports_latest_media_Set() const{
    return m_supports_latest_media_isSet;
}

bool OAIChannelFeatures::is_supports_latest_media_Valid() const{
    return m_supports_latest_media_isValid;
}

bool OAIChannelFeatures::isSupportsSortOrderToggle() const {
    return m_supports_sort_order_toggle;
}
void OAIChannelFeatures::setSupportsSortOrderToggle(const bool &supports_sort_order_toggle) {
    m_supports_sort_order_toggle = supports_sort_order_toggle;
    m_supports_sort_order_toggle_isSet = true;
}

bool OAIChannelFeatures::is_supports_sort_order_toggle_Set() const{
    return m_supports_sort_order_toggle_isSet;
}

bool OAIChannelFeatures::is_supports_sort_order_toggle_Valid() const{
    return m_supports_sort_order_toggle_isValid;
}

bool OAIChannelFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_refresh_levels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_sort_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_content_downloading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_latest_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_sort_order_toggle_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
