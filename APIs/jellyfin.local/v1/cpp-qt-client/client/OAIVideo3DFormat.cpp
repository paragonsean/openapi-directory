/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo3DFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo3DFormat::OAIVideo3DFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo3DFormat::OAIVideo3DFormat() {
    this->initializeModel();
}

OAIVideo3DFormat::~OAIVideo3DFormat() {}

void OAIVideo3DFormat::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVideo3DFormat::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVideo3DFormat::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HalfSideBySide", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideo3DFormat::HALFSIDEBYSIDE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FullSideBySide", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideo3DFormat::FULLSIDEBYSIDE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FullTopAndBottom", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideo3DFormat::FULLTOPANDBOTTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HalfTopAndBottom", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideo3DFormat::HALFTOPANDBOTTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MVC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVideo3DFormat::MVC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVideo3DFormat::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVideo3DFormat::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVideo3DFormat::HALFSIDEBYSIDE:
            val = "HalfSideBySide";
            break;
        case eOAIVideo3DFormat::FULLSIDEBYSIDE:
            val = "FullSideBySide";
            break;
        case eOAIVideo3DFormat::FULLTOPANDBOTTOM:
            val = "FullTopAndBottom";
            break;
        case eOAIVideo3DFormat::HALFTOPANDBOTTOM:
            val = "HalfTopAndBottom";
            break;
        case eOAIVideo3DFormat::MVC:
            val = "MVC";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVideo3DFormat::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVideo3DFormat::eOAIVideo3DFormat OAIVideo3DFormat::getValue() const {
    return m_value;
}

void OAIVideo3DFormat::setValue(const OAIVideo3DFormat::eOAIVideo3DFormat& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVideo3DFormat::isSet() const {
    
    return m_value_isSet;
}

bool OAIVideo3DFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
