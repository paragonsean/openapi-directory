/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerConfiguration::OAIServerConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerConfiguration::OAIServerConfiguration() {
    this->initializeModel();
}

OAIServerConfiguration::~OAIServerConfiguration() {}

void OAIServerConfiguration::initializeModel() {

    m_activity_log_retention_days_isSet = false;
    m_activity_log_retention_days_isValid = false;

    m_auto_discovery_isSet = false;
    m_auto_discovery_isValid = false;

    m_auto_discovery_tracing_isSet = false;
    m_auto_discovery_tracing_isValid = false;

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_cache_path_isSet = false;
    m_cache_path_isValid = false;

    m_certificate_password_isSet = false;
    m_certificate_password_isValid = false;

    m_certificate_path_isSet = false;
    m_certificate_path_isValid = false;

    m_codecs_used_isSet = false;
    m_codecs_used_isValid = false;

    m_content_types_isSet = false;
    m_content_types_isValid = false;

    m_cors_hosts_isSet = false;
    m_cors_hosts_isValid = false;

    m_disable_live_tv_channel_user_data_name_isSet = false;
    m_disable_live_tv_channel_user_data_name_isValid = false;

    m_disable_plugin_images_isSet = false;
    m_disable_plugin_images_isValid = false;

    m_display_specials_within_seasons_isSet = false;
    m_display_specials_within_seasons_isValid = false;

    m_enable_case_sensitive_item_ids_isSet = false;
    m_enable_case_sensitive_item_ids_isValid = false;

    m_enable_dashboard_response_caching_isSet = false;
    m_enable_dashboard_response_caching_isValid = false;

    m_enable_external_content_in_suggestions_isSet = false;
    m_enable_external_content_in_suggestions_isValid = false;

    m_enable_folder_view_isSet = false;
    m_enable_folder_view_isValid = false;

    m_enable_grouping_into_collections_isSet = false;
    m_enable_grouping_into_collections_isValid = false;

    m_enable_https_isSet = false;
    m_enable_https_isValid = false;

    m_enable_ipv4_isSet = false;
    m_enable_ipv4_isValid = false;

    m_enable_ipv6_isSet = false;
    m_enable_ipv6_isValid = false;

    m_enable_metrics_isSet = false;
    m_enable_metrics_isValid = false;

    m_enable_multi_socket_binding_isSet = false;
    m_enable_multi_socket_binding_isValid = false;

    m_enable_new_omdb_support_isSet = false;
    m_enable_new_omdb_support_isValid = false;

    m_enable_normalized_item_by_name_ids_isSet = false;
    m_enable_normalized_item_by_name_ids_isValid = false;

    m_enable_remote_access_isSet = false;
    m_enable_remote_access_isValid = false;

    m_enable_ssdp_tracing_isSet = false;
    m_enable_ssdp_tracing_isValid = false;

    m_enable_simple_artist_detection_isSet = false;
    m_enable_simple_artist_detection_isValid = false;

    m_enable_slow_response_warning_isSet = false;
    m_enable_slow_response_warning_isValid = false;

    m_enable_upn_p_isSet = false;
    m_enable_upn_p_isValid = false;

    m_gateway_monitor_period_isSet = false;
    m_gateway_monitor_period_isValid = false;

    m_hd_homerun_port_range_isSet = false;
    m_hd_homerun_port_range_isValid = false;

    m_http_server_port_number_isSet = false;
    m_http_server_port_number_isValid = false;

    m_https_port_number_isSet = false;
    m_https_port_number_isValid = false;

    m_ignore_virtual_interfaces_isSet = false;
    m_ignore_virtual_interfaces_isValid = false;

    m_image_extraction_timeout_ms_isSet = false;
    m_image_extraction_timeout_ms_isValid = false;

    m_image_saving_convention_isSet = false;
    m_image_saving_convention_isValid = false;

    m_is_port_authorized_isSet = false;
    m_is_port_authorized_isValid = false;

    m_is_remote_ip_filter_blacklist_isSet = false;
    m_is_remote_ip_filter_blacklist_isValid = false;

    m_is_startup_wizard_completed_isSet = false;
    m_is_startup_wizard_completed_isValid = false;

    m_known_proxies_isSet = false;
    m_known_proxies_isValid = false;

    m_library_metadata_refresh_concurrency_isSet = false;
    m_library_metadata_refresh_concurrency_isValid = false;

    m_library_monitor_delay_isSet = false;
    m_library_monitor_delay_isValid = false;

    m_library_scan_fanout_concurrency_isSet = false;
    m_library_scan_fanout_concurrency_isValid = false;

    m_local_network_addresses_isSet = false;
    m_local_network_addresses_isValid = false;

    m_local_network_subnets_isSet = false;
    m_local_network_subnets_isValid = false;

    m_log_file_retention_days_isSet = false;
    m_log_file_retention_days_isValid = false;

    m_max_audiobook_resume_isSet = false;
    m_max_audiobook_resume_isValid = false;

    m_max_resume_pct_isSet = false;
    m_max_resume_pct_isValid = false;

    m_metadata_country_code_isSet = false;
    m_metadata_country_code_isValid = false;

    m_metadata_network_path_isSet = false;
    m_metadata_network_path_isValid = false;

    m_metadata_options_isSet = false;
    m_metadata_options_isValid = false;

    m_metadata_path_isSet = false;
    m_metadata_path_isValid = false;

    m_min_audiobook_resume_isSet = false;
    m_min_audiobook_resume_isValid = false;

    m_min_resume_duration_seconds_isSet = false;
    m_min_resume_duration_seconds_isValid = false;

    m_min_resume_pct_isSet = false;
    m_min_resume_pct_isValid = false;

    m_path_substitutions_isSet = false;
    m_path_substitutions_isValid = false;

    m_plugin_repositories_isSet = false;
    m_plugin_repositories_isValid = false;

    m_preferred_metadata_language_isSet = false;
    m_preferred_metadata_language_isValid = false;

    m_previous_version_isSet = false;
    m_previous_version_isValid = false;

    m_previous_version_str_isSet = false;
    m_previous_version_str_isValid = false;

    m_public_https_port_isSet = false;
    m_public_https_port_isValid = false;

    m_public_port_isSet = false;
    m_public_port_isValid = false;

    m_published_server_uri_by_subnet_isSet = false;
    m_published_server_uri_by_subnet_isValid = false;

    m_quick_connect_available_isSet = false;
    m_quick_connect_available_isValid = false;

    m_remote_client_bitrate_limit_isSet = false;
    m_remote_client_bitrate_limit_isValid = false;

    m_remote_ip_filter_isSet = false;
    m_remote_ip_filter_isValid = false;

    m_remove_old_plugins_isSet = false;
    m_remove_old_plugins_isValid = false;

    m_require_https_isSet = false;
    m_require_https_isValid = false;

    m_ssdp_tracing_filter_isSet = false;
    m_ssdp_tracing_filter_isValid = false;

    m_save_metadata_hidden_isSet = false;
    m_save_metadata_hidden_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_skip_deserialization_for_basic_types_isSet = false;
    m_skip_deserialization_for_basic_types_isValid = false;

    m_slow_response_threshold_ms_isSet = false;
    m_slow_response_threshold_ms_isValid = false;

    m_sort_remove_characters_isSet = false;
    m_sort_remove_characters_isValid = false;

    m_sort_remove_words_isSet = false;
    m_sort_remove_words_isValid = false;

    m_sort_replace_characters_isSet = false;
    m_sort_replace_characters_isValid = false;

    m_trust_all_ip6_interfaces_isSet = false;
    m_trust_all_ip6_interfaces_isValid = false;

    m_udp_port_range_isSet = false;
    m_udp_port_range_isValid = false;

    m_udp_send_count_isSet = false;
    m_udp_send_count_isValid = false;

    m_udp_send_delay_isSet = false;
    m_udp_send_delay_isValid = false;

    m_ui_culture_isSet = false;
    m_ui_culture_isValid = false;

    m_upn_p_create_http_port_map_isSet = false;
    m_upn_p_create_http_port_map_isValid = false;

    m_uninstalled_plugins_isSet = false;
    m_uninstalled_plugins_isValid = false;

    m_virtual_interface_names_isSet = false;
    m_virtual_interface_names_isValid = false;
}

void OAIServerConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerConfiguration::fromJsonObject(QJsonObject json) {

    m_activity_log_retention_days_isValid = ::OpenAPI::fromJsonValue(m_activity_log_retention_days, json[QString("ActivityLogRetentionDays")]);
    m_activity_log_retention_days_isSet = !json[QString("ActivityLogRetentionDays")].isNull() && m_activity_log_retention_days_isValid;

    m_auto_discovery_isValid = ::OpenAPI::fromJsonValue(m_auto_discovery, json[QString("AutoDiscovery")]);
    m_auto_discovery_isSet = !json[QString("AutoDiscovery")].isNull() && m_auto_discovery_isValid;

    m_auto_discovery_tracing_isValid = ::OpenAPI::fromJsonValue(m_auto_discovery_tracing, json[QString("AutoDiscoveryTracing")]);
    m_auto_discovery_tracing_isSet = !json[QString("AutoDiscoveryTracing")].isNull() && m_auto_discovery_tracing_isValid;

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("BaseUrl")]);
    m_base_url_isSet = !json[QString("BaseUrl")].isNull() && m_base_url_isValid;

    m_cache_path_isValid = ::OpenAPI::fromJsonValue(m_cache_path, json[QString("CachePath")]);
    m_cache_path_isSet = !json[QString("CachePath")].isNull() && m_cache_path_isValid;

    m_certificate_password_isValid = ::OpenAPI::fromJsonValue(m_certificate_password, json[QString("CertificatePassword")]);
    m_certificate_password_isSet = !json[QString("CertificatePassword")].isNull() && m_certificate_password_isValid;

    m_certificate_path_isValid = ::OpenAPI::fromJsonValue(m_certificate_path, json[QString("CertificatePath")]);
    m_certificate_path_isSet = !json[QString("CertificatePath")].isNull() && m_certificate_path_isValid;

    m_codecs_used_isValid = ::OpenAPI::fromJsonValue(m_codecs_used, json[QString("CodecsUsed")]);
    m_codecs_used_isSet = !json[QString("CodecsUsed")].isNull() && m_codecs_used_isValid;

    m_content_types_isValid = ::OpenAPI::fromJsonValue(m_content_types, json[QString("ContentTypes")]);
    m_content_types_isSet = !json[QString("ContentTypes")].isNull() && m_content_types_isValid;

    m_cors_hosts_isValid = ::OpenAPI::fromJsonValue(m_cors_hosts, json[QString("CorsHosts")]);
    m_cors_hosts_isSet = !json[QString("CorsHosts")].isNull() && m_cors_hosts_isValid;

    m_disable_live_tv_channel_user_data_name_isValid = ::OpenAPI::fromJsonValue(m_disable_live_tv_channel_user_data_name, json[QString("DisableLiveTvChannelUserDataName")]);
    m_disable_live_tv_channel_user_data_name_isSet = !json[QString("DisableLiveTvChannelUserDataName")].isNull() && m_disable_live_tv_channel_user_data_name_isValid;

    m_disable_plugin_images_isValid = ::OpenAPI::fromJsonValue(m_disable_plugin_images, json[QString("DisablePluginImages")]);
    m_disable_plugin_images_isSet = !json[QString("DisablePluginImages")].isNull() && m_disable_plugin_images_isValid;

    m_display_specials_within_seasons_isValid = ::OpenAPI::fromJsonValue(m_display_specials_within_seasons, json[QString("DisplaySpecialsWithinSeasons")]);
    m_display_specials_within_seasons_isSet = !json[QString("DisplaySpecialsWithinSeasons")].isNull() && m_display_specials_within_seasons_isValid;

    m_enable_case_sensitive_item_ids_isValid = ::OpenAPI::fromJsonValue(m_enable_case_sensitive_item_ids, json[QString("EnableCaseSensitiveItemIds")]);
    m_enable_case_sensitive_item_ids_isSet = !json[QString("EnableCaseSensitiveItemIds")].isNull() && m_enable_case_sensitive_item_ids_isValid;

    m_enable_dashboard_response_caching_isValid = ::OpenAPI::fromJsonValue(m_enable_dashboard_response_caching, json[QString("EnableDashboardResponseCaching")]);
    m_enable_dashboard_response_caching_isSet = !json[QString("EnableDashboardResponseCaching")].isNull() && m_enable_dashboard_response_caching_isValid;

    m_enable_external_content_in_suggestions_isValid = ::OpenAPI::fromJsonValue(m_enable_external_content_in_suggestions, json[QString("EnableExternalContentInSuggestions")]);
    m_enable_external_content_in_suggestions_isSet = !json[QString("EnableExternalContentInSuggestions")].isNull() && m_enable_external_content_in_suggestions_isValid;

    m_enable_folder_view_isValid = ::OpenAPI::fromJsonValue(m_enable_folder_view, json[QString("EnableFolderView")]);
    m_enable_folder_view_isSet = !json[QString("EnableFolderView")].isNull() && m_enable_folder_view_isValid;

    m_enable_grouping_into_collections_isValid = ::OpenAPI::fromJsonValue(m_enable_grouping_into_collections, json[QString("EnableGroupingIntoCollections")]);
    m_enable_grouping_into_collections_isSet = !json[QString("EnableGroupingIntoCollections")].isNull() && m_enable_grouping_into_collections_isValid;

    m_enable_https_isValid = ::OpenAPI::fromJsonValue(m_enable_https, json[QString("EnableHttps")]);
    m_enable_https_isSet = !json[QString("EnableHttps")].isNull() && m_enable_https_isValid;

    m_enable_ipv4_isValid = ::OpenAPI::fromJsonValue(m_enable_ipv4, json[QString("EnableIPV4")]);
    m_enable_ipv4_isSet = !json[QString("EnableIPV4")].isNull() && m_enable_ipv4_isValid;

    m_enable_ipv6_isValid = ::OpenAPI::fromJsonValue(m_enable_ipv6, json[QString("EnableIPV6")]);
    m_enable_ipv6_isSet = !json[QString("EnableIPV6")].isNull() && m_enable_ipv6_isValid;

    m_enable_metrics_isValid = ::OpenAPI::fromJsonValue(m_enable_metrics, json[QString("EnableMetrics")]);
    m_enable_metrics_isSet = !json[QString("EnableMetrics")].isNull() && m_enable_metrics_isValid;

    m_enable_multi_socket_binding_isValid = ::OpenAPI::fromJsonValue(m_enable_multi_socket_binding, json[QString("EnableMultiSocketBinding")]);
    m_enable_multi_socket_binding_isSet = !json[QString("EnableMultiSocketBinding")].isNull() && m_enable_multi_socket_binding_isValid;

    m_enable_new_omdb_support_isValid = ::OpenAPI::fromJsonValue(m_enable_new_omdb_support, json[QString("EnableNewOmdbSupport")]);
    m_enable_new_omdb_support_isSet = !json[QString("EnableNewOmdbSupport")].isNull() && m_enable_new_omdb_support_isValid;

    m_enable_normalized_item_by_name_ids_isValid = ::OpenAPI::fromJsonValue(m_enable_normalized_item_by_name_ids, json[QString("EnableNormalizedItemByNameIds")]);
    m_enable_normalized_item_by_name_ids_isSet = !json[QString("EnableNormalizedItemByNameIds")].isNull() && m_enable_normalized_item_by_name_ids_isValid;

    m_enable_remote_access_isValid = ::OpenAPI::fromJsonValue(m_enable_remote_access, json[QString("EnableRemoteAccess")]);
    m_enable_remote_access_isSet = !json[QString("EnableRemoteAccess")].isNull() && m_enable_remote_access_isValid;

    m_enable_ssdp_tracing_isValid = ::OpenAPI::fromJsonValue(m_enable_ssdp_tracing, json[QString("EnableSSDPTracing")]);
    m_enable_ssdp_tracing_isSet = !json[QString("EnableSSDPTracing")].isNull() && m_enable_ssdp_tracing_isValid;

    m_enable_simple_artist_detection_isValid = ::OpenAPI::fromJsonValue(m_enable_simple_artist_detection, json[QString("EnableSimpleArtistDetection")]);
    m_enable_simple_artist_detection_isSet = !json[QString("EnableSimpleArtistDetection")].isNull() && m_enable_simple_artist_detection_isValid;

    m_enable_slow_response_warning_isValid = ::OpenAPI::fromJsonValue(m_enable_slow_response_warning, json[QString("EnableSlowResponseWarning")]);
    m_enable_slow_response_warning_isSet = !json[QString("EnableSlowResponseWarning")].isNull() && m_enable_slow_response_warning_isValid;

    m_enable_upn_p_isValid = ::OpenAPI::fromJsonValue(m_enable_upn_p, json[QString("EnableUPnP")]);
    m_enable_upn_p_isSet = !json[QString("EnableUPnP")].isNull() && m_enable_upn_p_isValid;

    m_gateway_monitor_period_isValid = ::OpenAPI::fromJsonValue(m_gateway_monitor_period, json[QString("GatewayMonitorPeriod")]);
    m_gateway_monitor_period_isSet = !json[QString("GatewayMonitorPeriod")].isNull() && m_gateway_monitor_period_isValid;

    m_hd_homerun_port_range_isValid = ::OpenAPI::fromJsonValue(m_hd_homerun_port_range, json[QString("HDHomerunPortRange")]);
    m_hd_homerun_port_range_isSet = !json[QString("HDHomerunPortRange")].isNull() && m_hd_homerun_port_range_isValid;

    m_http_server_port_number_isValid = ::OpenAPI::fromJsonValue(m_http_server_port_number, json[QString("HttpServerPortNumber")]);
    m_http_server_port_number_isSet = !json[QString("HttpServerPortNumber")].isNull() && m_http_server_port_number_isValid;

    m_https_port_number_isValid = ::OpenAPI::fromJsonValue(m_https_port_number, json[QString("HttpsPortNumber")]);
    m_https_port_number_isSet = !json[QString("HttpsPortNumber")].isNull() && m_https_port_number_isValid;

    m_ignore_virtual_interfaces_isValid = ::OpenAPI::fromJsonValue(m_ignore_virtual_interfaces, json[QString("IgnoreVirtualInterfaces")]);
    m_ignore_virtual_interfaces_isSet = !json[QString("IgnoreVirtualInterfaces")].isNull() && m_ignore_virtual_interfaces_isValid;

    m_image_extraction_timeout_ms_isValid = ::OpenAPI::fromJsonValue(m_image_extraction_timeout_ms, json[QString("ImageExtractionTimeoutMs")]);
    m_image_extraction_timeout_ms_isSet = !json[QString("ImageExtractionTimeoutMs")].isNull() && m_image_extraction_timeout_ms_isValid;

    m_image_saving_convention_isValid = ::OpenAPI::fromJsonValue(m_image_saving_convention, json[QString("ImageSavingConvention")]);
    m_image_saving_convention_isSet = !json[QString("ImageSavingConvention")].isNull() && m_image_saving_convention_isValid;

    m_is_port_authorized_isValid = ::OpenAPI::fromJsonValue(m_is_port_authorized, json[QString("IsPortAuthorized")]);
    m_is_port_authorized_isSet = !json[QString("IsPortAuthorized")].isNull() && m_is_port_authorized_isValid;

    m_is_remote_ip_filter_blacklist_isValid = ::OpenAPI::fromJsonValue(m_is_remote_ip_filter_blacklist, json[QString("IsRemoteIPFilterBlacklist")]);
    m_is_remote_ip_filter_blacklist_isSet = !json[QString("IsRemoteIPFilterBlacklist")].isNull() && m_is_remote_ip_filter_blacklist_isValid;

    m_is_startup_wizard_completed_isValid = ::OpenAPI::fromJsonValue(m_is_startup_wizard_completed, json[QString("IsStartupWizardCompleted")]);
    m_is_startup_wizard_completed_isSet = !json[QString("IsStartupWizardCompleted")].isNull() && m_is_startup_wizard_completed_isValid;

    m_known_proxies_isValid = ::OpenAPI::fromJsonValue(m_known_proxies, json[QString("KnownProxies")]);
    m_known_proxies_isSet = !json[QString("KnownProxies")].isNull() && m_known_proxies_isValid;

    m_library_metadata_refresh_concurrency_isValid = ::OpenAPI::fromJsonValue(m_library_metadata_refresh_concurrency, json[QString("LibraryMetadataRefreshConcurrency")]);
    m_library_metadata_refresh_concurrency_isSet = !json[QString("LibraryMetadataRefreshConcurrency")].isNull() && m_library_metadata_refresh_concurrency_isValid;

    m_library_monitor_delay_isValid = ::OpenAPI::fromJsonValue(m_library_monitor_delay, json[QString("LibraryMonitorDelay")]);
    m_library_monitor_delay_isSet = !json[QString("LibraryMonitorDelay")].isNull() && m_library_monitor_delay_isValid;

    m_library_scan_fanout_concurrency_isValid = ::OpenAPI::fromJsonValue(m_library_scan_fanout_concurrency, json[QString("LibraryScanFanoutConcurrency")]);
    m_library_scan_fanout_concurrency_isSet = !json[QString("LibraryScanFanoutConcurrency")].isNull() && m_library_scan_fanout_concurrency_isValid;

    m_local_network_addresses_isValid = ::OpenAPI::fromJsonValue(m_local_network_addresses, json[QString("LocalNetworkAddresses")]);
    m_local_network_addresses_isSet = !json[QString("LocalNetworkAddresses")].isNull() && m_local_network_addresses_isValid;

    m_local_network_subnets_isValid = ::OpenAPI::fromJsonValue(m_local_network_subnets, json[QString("LocalNetworkSubnets")]);
    m_local_network_subnets_isSet = !json[QString("LocalNetworkSubnets")].isNull() && m_local_network_subnets_isValid;

    m_log_file_retention_days_isValid = ::OpenAPI::fromJsonValue(m_log_file_retention_days, json[QString("LogFileRetentionDays")]);
    m_log_file_retention_days_isSet = !json[QString("LogFileRetentionDays")].isNull() && m_log_file_retention_days_isValid;

    m_max_audiobook_resume_isValid = ::OpenAPI::fromJsonValue(m_max_audiobook_resume, json[QString("MaxAudiobookResume")]);
    m_max_audiobook_resume_isSet = !json[QString("MaxAudiobookResume")].isNull() && m_max_audiobook_resume_isValid;

    m_max_resume_pct_isValid = ::OpenAPI::fromJsonValue(m_max_resume_pct, json[QString("MaxResumePct")]);
    m_max_resume_pct_isSet = !json[QString("MaxResumePct")].isNull() && m_max_resume_pct_isValid;

    m_metadata_country_code_isValid = ::OpenAPI::fromJsonValue(m_metadata_country_code, json[QString("MetadataCountryCode")]);
    m_metadata_country_code_isSet = !json[QString("MetadataCountryCode")].isNull() && m_metadata_country_code_isValid;

    m_metadata_network_path_isValid = ::OpenAPI::fromJsonValue(m_metadata_network_path, json[QString("MetadataNetworkPath")]);
    m_metadata_network_path_isSet = !json[QString("MetadataNetworkPath")].isNull() && m_metadata_network_path_isValid;

    m_metadata_options_isValid = ::OpenAPI::fromJsonValue(m_metadata_options, json[QString("MetadataOptions")]);
    m_metadata_options_isSet = !json[QString("MetadataOptions")].isNull() && m_metadata_options_isValid;

    m_metadata_path_isValid = ::OpenAPI::fromJsonValue(m_metadata_path, json[QString("MetadataPath")]);
    m_metadata_path_isSet = !json[QString("MetadataPath")].isNull() && m_metadata_path_isValid;

    m_min_audiobook_resume_isValid = ::OpenAPI::fromJsonValue(m_min_audiobook_resume, json[QString("MinAudiobookResume")]);
    m_min_audiobook_resume_isSet = !json[QString("MinAudiobookResume")].isNull() && m_min_audiobook_resume_isValid;

    m_min_resume_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_min_resume_duration_seconds, json[QString("MinResumeDurationSeconds")]);
    m_min_resume_duration_seconds_isSet = !json[QString("MinResumeDurationSeconds")].isNull() && m_min_resume_duration_seconds_isValid;

    m_min_resume_pct_isValid = ::OpenAPI::fromJsonValue(m_min_resume_pct, json[QString("MinResumePct")]);
    m_min_resume_pct_isSet = !json[QString("MinResumePct")].isNull() && m_min_resume_pct_isValid;

    m_path_substitutions_isValid = ::OpenAPI::fromJsonValue(m_path_substitutions, json[QString("PathSubstitutions")]);
    m_path_substitutions_isSet = !json[QString("PathSubstitutions")].isNull() && m_path_substitutions_isValid;

    m_plugin_repositories_isValid = ::OpenAPI::fromJsonValue(m_plugin_repositories, json[QString("PluginRepositories")]);
    m_plugin_repositories_isSet = !json[QString("PluginRepositories")].isNull() && m_plugin_repositories_isValid;

    m_preferred_metadata_language_isValid = ::OpenAPI::fromJsonValue(m_preferred_metadata_language, json[QString("PreferredMetadataLanguage")]);
    m_preferred_metadata_language_isSet = !json[QString("PreferredMetadataLanguage")].isNull() && m_preferred_metadata_language_isValid;

    m_previous_version_isValid = ::OpenAPI::fromJsonValue(m_previous_version, json[QString("PreviousVersion")]);
    m_previous_version_isSet = !json[QString("PreviousVersion")].isNull() && m_previous_version_isValid;

    m_previous_version_str_isValid = ::OpenAPI::fromJsonValue(m_previous_version_str, json[QString("PreviousVersionStr")]);
    m_previous_version_str_isSet = !json[QString("PreviousVersionStr")].isNull() && m_previous_version_str_isValid;

    m_public_https_port_isValid = ::OpenAPI::fromJsonValue(m_public_https_port, json[QString("PublicHttpsPort")]);
    m_public_https_port_isSet = !json[QString("PublicHttpsPort")].isNull() && m_public_https_port_isValid;

    m_public_port_isValid = ::OpenAPI::fromJsonValue(m_public_port, json[QString("PublicPort")]);
    m_public_port_isSet = !json[QString("PublicPort")].isNull() && m_public_port_isValid;

    m_published_server_uri_by_subnet_isValid = ::OpenAPI::fromJsonValue(m_published_server_uri_by_subnet, json[QString("PublishedServerUriBySubnet")]);
    m_published_server_uri_by_subnet_isSet = !json[QString("PublishedServerUriBySubnet")].isNull() && m_published_server_uri_by_subnet_isValid;

    m_quick_connect_available_isValid = ::OpenAPI::fromJsonValue(m_quick_connect_available, json[QString("QuickConnectAvailable")]);
    m_quick_connect_available_isSet = !json[QString("QuickConnectAvailable")].isNull() && m_quick_connect_available_isValid;

    m_remote_client_bitrate_limit_isValid = ::OpenAPI::fromJsonValue(m_remote_client_bitrate_limit, json[QString("RemoteClientBitrateLimit")]);
    m_remote_client_bitrate_limit_isSet = !json[QString("RemoteClientBitrateLimit")].isNull() && m_remote_client_bitrate_limit_isValid;

    m_remote_ip_filter_isValid = ::OpenAPI::fromJsonValue(m_remote_ip_filter, json[QString("RemoteIPFilter")]);
    m_remote_ip_filter_isSet = !json[QString("RemoteIPFilter")].isNull() && m_remote_ip_filter_isValid;

    m_remove_old_plugins_isValid = ::OpenAPI::fromJsonValue(m_remove_old_plugins, json[QString("RemoveOldPlugins")]);
    m_remove_old_plugins_isSet = !json[QString("RemoveOldPlugins")].isNull() && m_remove_old_plugins_isValid;

    m_require_https_isValid = ::OpenAPI::fromJsonValue(m_require_https, json[QString("RequireHttps")]);
    m_require_https_isSet = !json[QString("RequireHttps")].isNull() && m_require_https_isValid;

    m_ssdp_tracing_filter_isValid = ::OpenAPI::fromJsonValue(m_ssdp_tracing_filter, json[QString("SSDPTracingFilter")]);
    m_ssdp_tracing_filter_isSet = !json[QString("SSDPTracingFilter")].isNull() && m_ssdp_tracing_filter_isValid;

    m_save_metadata_hidden_isValid = ::OpenAPI::fromJsonValue(m_save_metadata_hidden, json[QString("SaveMetadataHidden")]);
    m_save_metadata_hidden_isSet = !json[QString("SaveMetadataHidden")].isNull() && m_save_metadata_hidden_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("ServerName")]);
    m_server_name_isSet = !json[QString("ServerName")].isNull() && m_server_name_isValid;

    m_skip_deserialization_for_basic_types_isValid = ::OpenAPI::fromJsonValue(m_skip_deserialization_for_basic_types, json[QString("SkipDeserializationForBasicTypes")]);
    m_skip_deserialization_for_basic_types_isSet = !json[QString("SkipDeserializationForBasicTypes")].isNull() && m_skip_deserialization_for_basic_types_isValid;

    m_slow_response_threshold_ms_isValid = ::OpenAPI::fromJsonValue(m_slow_response_threshold_ms, json[QString("SlowResponseThresholdMs")]);
    m_slow_response_threshold_ms_isSet = !json[QString("SlowResponseThresholdMs")].isNull() && m_slow_response_threshold_ms_isValid;

    m_sort_remove_characters_isValid = ::OpenAPI::fromJsonValue(m_sort_remove_characters, json[QString("SortRemoveCharacters")]);
    m_sort_remove_characters_isSet = !json[QString("SortRemoveCharacters")].isNull() && m_sort_remove_characters_isValid;

    m_sort_remove_words_isValid = ::OpenAPI::fromJsonValue(m_sort_remove_words, json[QString("SortRemoveWords")]);
    m_sort_remove_words_isSet = !json[QString("SortRemoveWords")].isNull() && m_sort_remove_words_isValid;

    m_sort_replace_characters_isValid = ::OpenAPI::fromJsonValue(m_sort_replace_characters, json[QString("SortReplaceCharacters")]);
    m_sort_replace_characters_isSet = !json[QString("SortReplaceCharacters")].isNull() && m_sort_replace_characters_isValid;

    m_trust_all_ip6_interfaces_isValid = ::OpenAPI::fromJsonValue(m_trust_all_ip6_interfaces, json[QString("TrustAllIP6Interfaces")]);
    m_trust_all_ip6_interfaces_isSet = !json[QString("TrustAllIP6Interfaces")].isNull() && m_trust_all_ip6_interfaces_isValid;

    m_udp_port_range_isValid = ::OpenAPI::fromJsonValue(m_udp_port_range, json[QString("UDPPortRange")]);
    m_udp_port_range_isSet = !json[QString("UDPPortRange")].isNull() && m_udp_port_range_isValid;

    m_udp_send_count_isValid = ::OpenAPI::fromJsonValue(m_udp_send_count, json[QString("UDPSendCount")]);
    m_udp_send_count_isSet = !json[QString("UDPSendCount")].isNull() && m_udp_send_count_isValid;

    m_udp_send_delay_isValid = ::OpenAPI::fromJsonValue(m_udp_send_delay, json[QString("UDPSendDelay")]);
    m_udp_send_delay_isSet = !json[QString("UDPSendDelay")].isNull() && m_udp_send_delay_isValid;

    m_ui_culture_isValid = ::OpenAPI::fromJsonValue(m_ui_culture, json[QString("UICulture")]);
    m_ui_culture_isSet = !json[QString("UICulture")].isNull() && m_ui_culture_isValid;

    m_upn_p_create_http_port_map_isValid = ::OpenAPI::fromJsonValue(m_upn_p_create_http_port_map, json[QString("UPnPCreateHttpPortMap")]);
    m_upn_p_create_http_port_map_isSet = !json[QString("UPnPCreateHttpPortMap")].isNull() && m_upn_p_create_http_port_map_isValid;

    m_uninstalled_plugins_isValid = ::OpenAPI::fromJsonValue(m_uninstalled_plugins, json[QString("UninstalledPlugins")]);
    m_uninstalled_plugins_isSet = !json[QString("UninstalledPlugins")].isNull() && m_uninstalled_plugins_isValid;

    m_virtual_interface_names_isValid = ::OpenAPI::fromJsonValue(m_virtual_interface_names, json[QString("VirtualInterfaceNames")]);
    m_virtual_interface_names_isSet = !json[QString("VirtualInterfaceNames")].isNull() && m_virtual_interface_names_isValid;
}

QString OAIServerConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_log_retention_days_isSet) {
        obj.insert(QString("ActivityLogRetentionDays"), ::OpenAPI::toJsonValue(m_activity_log_retention_days));
    }
    if (m_auto_discovery_isSet) {
        obj.insert(QString("AutoDiscovery"), ::OpenAPI::toJsonValue(m_auto_discovery));
    }
    if (m_auto_discovery_tracing_isSet) {
        obj.insert(QString("AutoDiscoveryTracing"), ::OpenAPI::toJsonValue(m_auto_discovery_tracing));
    }
    if (m_base_url_isSet) {
        obj.insert(QString("BaseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_cache_path_isSet) {
        obj.insert(QString("CachePath"), ::OpenAPI::toJsonValue(m_cache_path));
    }
    if (m_certificate_password_isSet) {
        obj.insert(QString("CertificatePassword"), ::OpenAPI::toJsonValue(m_certificate_password));
    }
    if (m_certificate_path_isSet) {
        obj.insert(QString("CertificatePath"), ::OpenAPI::toJsonValue(m_certificate_path));
    }
    if (m_codecs_used.size() > 0) {
        obj.insert(QString("CodecsUsed"), ::OpenAPI::toJsonValue(m_codecs_used));
    }
    if (m_content_types.size() > 0) {
        obj.insert(QString("ContentTypes"), ::OpenAPI::toJsonValue(m_content_types));
    }
    if (m_cors_hosts.size() > 0) {
        obj.insert(QString("CorsHosts"), ::OpenAPI::toJsonValue(m_cors_hosts));
    }
    if (m_disable_live_tv_channel_user_data_name_isSet) {
        obj.insert(QString("DisableLiveTvChannelUserDataName"), ::OpenAPI::toJsonValue(m_disable_live_tv_channel_user_data_name));
    }
    if (m_disable_plugin_images_isSet) {
        obj.insert(QString("DisablePluginImages"), ::OpenAPI::toJsonValue(m_disable_plugin_images));
    }
    if (m_display_specials_within_seasons_isSet) {
        obj.insert(QString("DisplaySpecialsWithinSeasons"), ::OpenAPI::toJsonValue(m_display_specials_within_seasons));
    }
    if (m_enable_case_sensitive_item_ids_isSet) {
        obj.insert(QString("EnableCaseSensitiveItemIds"), ::OpenAPI::toJsonValue(m_enable_case_sensitive_item_ids));
    }
    if (m_enable_dashboard_response_caching_isSet) {
        obj.insert(QString("EnableDashboardResponseCaching"), ::OpenAPI::toJsonValue(m_enable_dashboard_response_caching));
    }
    if (m_enable_external_content_in_suggestions_isSet) {
        obj.insert(QString("EnableExternalContentInSuggestions"), ::OpenAPI::toJsonValue(m_enable_external_content_in_suggestions));
    }
    if (m_enable_folder_view_isSet) {
        obj.insert(QString("EnableFolderView"), ::OpenAPI::toJsonValue(m_enable_folder_view));
    }
    if (m_enable_grouping_into_collections_isSet) {
        obj.insert(QString("EnableGroupingIntoCollections"), ::OpenAPI::toJsonValue(m_enable_grouping_into_collections));
    }
    if (m_enable_https_isSet) {
        obj.insert(QString("EnableHttps"), ::OpenAPI::toJsonValue(m_enable_https));
    }
    if (m_enable_ipv4_isSet) {
        obj.insert(QString("EnableIPV4"), ::OpenAPI::toJsonValue(m_enable_ipv4));
    }
    if (m_enable_ipv6_isSet) {
        obj.insert(QString("EnableIPV6"), ::OpenAPI::toJsonValue(m_enable_ipv6));
    }
    if (m_enable_metrics_isSet) {
        obj.insert(QString("EnableMetrics"), ::OpenAPI::toJsonValue(m_enable_metrics));
    }
    if (m_enable_multi_socket_binding_isSet) {
        obj.insert(QString("EnableMultiSocketBinding"), ::OpenAPI::toJsonValue(m_enable_multi_socket_binding));
    }
    if (m_enable_new_omdb_support_isSet) {
        obj.insert(QString("EnableNewOmdbSupport"), ::OpenAPI::toJsonValue(m_enable_new_omdb_support));
    }
    if (m_enable_normalized_item_by_name_ids_isSet) {
        obj.insert(QString("EnableNormalizedItemByNameIds"), ::OpenAPI::toJsonValue(m_enable_normalized_item_by_name_ids));
    }
    if (m_enable_remote_access_isSet) {
        obj.insert(QString("EnableRemoteAccess"), ::OpenAPI::toJsonValue(m_enable_remote_access));
    }
    if (m_enable_ssdp_tracing_isSet) {
        obj.insert(QString("EnableSSDPTracing"), ::OpenAPI::toJsonValue(m_enable_ssdp_tracing));
    }
    if (m_enable_simple_artist_detection_isSet) {
        obj.insert(QString("EnableSimpleArtistDetection"), ::OpenAPI::toJsonValue(m_enable_simple_artist_detection));
    }
    if (m_enable_slow_response_warning_isSet) {
        obj.insert(QString("EnableSlowResponseWarning"), ::OpenAPI::toJsonValue(m_enable_slow_response_warning));
    }
    if (m_enable_upn_p_isSet) {
        obj.insert(QString("EnableUPnP"), ::OpenAPI::toJsonValue(m_enable_upn_p));
    }
    if (m_gateway_monitor_period_isSet) {
        obj.insert(QString("GatewayMonitorPeriod"), ::OpenAPI::toJsonValue(m_gateway_monitor_period));
    }
    if (m_hd_homerun_port_range_isSet) {
        obj.insert(QString("HDHomerunPortRange"), ::OpenAPI::toJsonValue(m_hd_homerun_port_range));
    }
    if (m_http_server_port_number_isSet) {
        obj.insert(QString("HttpServerPortNumber"), ::OpenAPI::toJsonValue(m_http_server_port_number));
    }
    if (m_https_port_number_isSet) {
        obj.insert(QString("HttpsPortNumber"), ::OpenAPI::toJsonValue(m_https_port_number));
    }
    if (m_ignore_virtual_interfaces_isSet) {
        obj.insert(QString("IgnoreVirtualInterfaces"), ::OpenAPI::toJsonValue(m_ignore_virtual_interfaces));
    }
    if (m_image_extraction_timeout_ms_isSet) {
        obj.insert(QString("ImageExtractionTimeoutMs"), ::OpenAPI::toJsonValue(m_image_extraction_timeout_ms));
    }
    if (m_image_saving_convention.isSet()) {
        obj.insert(QString("ImageSavingConvention"), ::OpenAPI::toJsonValue(m_image_saving_convention));
    }
    if (m_is_port_authorized_isSet) {
        obj.insert(QString("IsPortAuthorized"), ::OpenAPI::toJsonValue(m_is_port_authorized));
    }
    if (m_is_remote_ip_filter_blacklist_isSet) {
        obj.insert(QString("IsRemoteIPFilterBlacklist"), ::OpenAPI::toJsonValue(m_is_remote_ip_filter_blacklist));
    }
    if (m_is_startup_wizard_completed_isSet) {
        obj.insert(QString("IsStartupWizardCompleted"), ::OpenAPI::toJsonValue(m_is_startup_wizard_completed));
    }
    if (m_known_proxies.size() > 0) {
        obj.insert(QString("KnownProxies"), ::OpenAPI::toJsonValue(m_known_proxies));
    }
    if (m_library_metadata_refresh_concurrency_isSet) {
        obj.insert(QString("LibraryMetadataRefreshConcurrency"), ::OpenAPI::toJsonValue(m_library_metadata_refresh_concurrency));
    }
    if (m_library_monitor_delay_isSet) {
        obj.insert(QString("LibraryMonitorDelay"), ::OpenAPI::toJsonValue(m_library_monitor_delay));
    }
    if (m_library_scan_fanout_concurrency_isSet) {
        obj.insert(QString("LibraryScanFanoutConcurrency"), ::OpenAPI::toJsonValue(m_library_scan_fanout_concurrency));
    }
    if (m_local_network_addresses.size() > 0) {
        obj.insert(QString("LocalNetworkAddresses"), ::OpenAPI::toJsonValue(m_local_network_addresses));
    }
    if (m_local_network_subnets.size() > 0) {
        obj.insert(QString("LocalNetworkSubnets"), ::OpenAPI::toJsonValue(m_local_network_subnets));
    }
    if (m_log_file_retention_days_isSet) {
        obj.insert(QString("LogFileRetentionDays"), ::OpenAPI::toJsonValue(m_log_file_retention_days));
    }
    if (m_max_audiobook_resume_isSet) {
        obj.insert(QString("MaxAudiobookResume"), ::OpenAPI::toJsonValue(m_max_audiobook_resume));
    }
    if (m_max_resume_pct_isSet) {
        obj.insert(QString("MaxResumePct"), ::OpenAPI::toJsonValue(m_max_resume_pct));
    }
    if (m_metadata_country_code_isSet) {
        obj.insert(QString("MetadataCountryCode"), ::OpenAPI::toJsonValue(m_metadata_country_code));
    }
    if (m_metadata_network_path_isSet) {
        obj.insert(QString("MetadataNetworkPath"), ::OpenAPI::toJsonValue(m_metadata_network_path));
    }
    if (m_metadata_options.size() > 0) {
        obj.insert(QString("MetadataOptions"), ::OpenAPI::toJsonValue(m_metadata_options));
    }
    if (m_metadata_path_isSet) {
        obj.insert(QString("MetadataPath"), ::OpenAPI::toJsonValue(m_metadata_path));
    }
    if (m_min_audiobook_resume_isSet) {
        obj.insert(QString("MinAudiobookResume"), ::OpenAPI::toJsonValue(m_min_audiobook_resume));
    }
    if (m_min_resume_duration_seconds_isSet) {
        obj.insert(QString("MinResumeDurationSeconds"), ::OpenAPI::toJsonValue(m_min_resume_duration_seconds));
    }
    if (m_min_resume_pct_isSet) {
        obj.insert(QString("MinResumePct"), ::OpenAPI::toJsonValue(m_min_resume_pct));
    }
    if (m_path_substitutions.size() > 0) {
        obj.insert(QString("PathSubstitutions"), ::OpenAPI::toJsonValue(m_path_substitutions));
    }
    if (m_plugin_repositories.size() > 0) {
        obj.insert(QString("PluginRepositories"), ::OpenAPI::toJsonValue(m_plugin_repositories));
    }
    if (m_preferred_metadata_language_isSet) {
        obj.insert(QString("PreferredMetadataLanguage"), ::OpenAPI::toJsonValue(m_preferred_metadata_language));
    }
    if (m_previous_version.isSet()) {
        obj.insert(QString("PreviousVersion"), ::OpenAPI::toJsonValue(m_previous_version));
    }
    if (m_previous_version_str_isSet) {
        obj.insert(QString("PreviousVersionStr"), ::OpenAPI::toJsonValue(m_previous_version_str));
    }
    if (m_public_https_port_isSet) {
        obj.insert(QString("PublicHttpsPort"), ::OpenAPI::toJsonValue(m_public_https_port));
    }
    if (m_public_port_isSet) {
        obj.insert(QString("PublicPort"), ::OpenAPI::toJsonValue(m_public_port));
    }
    if (m_published_server_uri_by_subnet.size() > 0) {
        obj.insert(QString("PublishedServerUriBySubnet"), ::OpenAPI::toJsonValue(m_published_server_uri_by_subnet));
    }
    if (m_quick_connect_available_isSet) {
        obj.insert(QString("QuickConnectAvailable"), ::OpenAPI::toJsonValue(m_quick_connect_available));
    }
    if (m_remote_client_bitrate_limit_isSet) {
        obj.insert(QString("RemoteClientBitrateLimit"), ::OpenAPI::toJsonValue(m_remote_client_bitrate_limit));
    }
    if (m_remote_ip_filter.size() > 0) {
        obj.insert(QString("RemoteIPFilter"), ::OpenAPI::toJsonValue(m_remote_ip_filter));
    }
    if (m_remove_old_plugins_isSet) {
        obj.insert(QString("RemoveOldPlugins"), ::OpenAPI::toJsonValue(m_remove_old_plugins));
    }
    if (m_require_https_isSet) {
        obj.insert(QString("RequireHttps"), ::OpenAPI::toJsonValue(m_require_https));
    }
    if (m_ssdp_tracing_filter_isSet) {
        obj.insert(QString("SSDPTracingFilter"), ::OpenAPI::toJsonValue(m_ssdp_tracing_filter));
    }
    if (m_save_metadata_hidden_isSet) {
        obj.insert(QString("SaveMetadataHidden"), ::OpenAPI::toJsonValue(m_save_metadata_hidden));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("ServerName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_skip_deserialization_for_basic_types_isSet) {
        obj.insert(QString("SkipDeserializationForBasicTypes"), ::OpenAPI::toJsonValue(m_skip_deserialization_for_basic_types));
    }
    if (m_slow_response_threshold_ms_isSet) {
        obj.insert(QString("SlowResponseThresholdMs"), ::OpenAPI::toJsonValue(m_slow_response_threshold_ms));
    }
    if (m_sort_remove_characters.size() > 0) {
        obj.insert(QString("SortRemoveCharacters"), ::OpenAPI::toJsonValue(m_sort_remove_characters));
    }
    if (m_sort_remove_words.size() > 0) {
        obj.insert(QString("SortRemoveWords"), ::OpenAPI::toJsonValue(m_sort_remove_words));
    }
    if (m_sort_replace_characters.size() > 0) {
        obj.insert(QString("SortReplaceCharacters"), ::OpenAPI::toJsonValue(m_sort_replace_characters));
    }
    if (m_trust_all_ip6_interfaces_isSet) {
        obj.insert(QString("TrustAllIP6Interfaces"), ::OpenAPI::toJsonValue(m_trust_all_ip6_interfaces));
    }
    if (m_udp_port_range_isSet) {
        obj.insert(QString("UDPPortRange"), ::OpenAPI::toJsonValue(m_udp_port_range));
    }
    if (m_udp_send_count_isSet) {
        obj.insert(QString("UDPSendCount"), ::OpenAPI::toJsonValue(m_udp_send_count));
    }
    if (m_udp_send_delay_isSet) {
        obj.insert(QString("UDPSendDelay"), ::OpenAPI::toJsonValue(m_udp_send_delay));
    }
    if (m_ui_culture_isSet) {
        obj.insert(QString("UICulture"), ::OpenAPI::toJsonValue(m_ui_culture));
    }
    if (m_upn_p_create_http_port_map_isSet) {
        obj.insert(QString("UPnPCreateHttpPortMap"), ::OpenAPI::toJsonValue(m_upn_p_create_http_port_map));
    }
    if (m_uninstalled_plugins.size() > 0) {
        obj.insert(QString("UninstalledPlugins"), ::OpenAPI::toJsonValue(m_uninstalled_plugins));
    }
    if (m_virtual_interface_names_isSet) {
        obj.insert(QString("VirtualInterfaceNames"), ::OpenAPI::toJsonValue(m_virtual_interface_names));
    }
    return obj;
}

qint32 OAIServerConfiguration::getActivityLogRetentionDays() const {
    return m_activity_log_retention_days;
}
void OAIServerConfiguration::setActivityLogRetentionDays(const qint32 &activity_log_retention_days) {
    m_activity_log_retention_days = activity_log_retention_days;
    m_activity_log_retention_days_isSet = true;
}

bool OAIServerConfiguration::is_activity_log_retention_days_Set() const{
    return m_activity_log_retention_days_isSet;
}

bool OAIServerConfiguration::is_activity_log_retention_days_Valid() const{
    return m_activity_log_retention_days_isValid;
}

bool OAIServerConfiguration::isAutoDiscovery() const {
    return m_auto_discovery;
}
void OAIServerConfiguration::setAutoDiscovery(const bool &auto_discovery) {
    m_auto_discovery = auto_discovery;
    m_auto_discovery_isSet = true;
}

bool OAIServerConfiguration::is_auto_discovery_Set() const{
    return m_auto_discovery_isSet;
}

bool OAIServerConfiguration::is_auto_discovery_Valid() const{
    return m_auto_discovery_isValid;
}

bool OAIServerConfiguration::isAutoDiscoveryTracing() const {
    return m_auto_discovery_tracing;
}
void OAIServerConfiguration::setAutoDiscoveryTracing(const bool &auto_discovery_tracing) {
    m_auto_discovery_tracing = auto_discovery_tracing;
    m_auto_discovery_tracing_isSet = true;
}

bool OAIServerConfiguration::is_auto_discovery_tracing_Set() const{
    return m_auto_discovery_tracing_isSet;
}

bool OAIServerConfiguration::is_auto_discovery_tracing_Valid() const{
    return m_auto_discovery_tracing_isValid;
}

QString OAIServerConfiguration::getBaseUrl() const {
    return m_base_url;
}
void OAIServerConfiguration::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIServerConfiguration::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIServerConfiguration::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIServerConfiguration::getCachePath() const {
    return m_cache_path;
}
void OAIServerConfiguration::setCachePath(const QString &cache_path) {
    m_cache_path = cache_path;
    m_cache_path_isSet = true;
}

bool OAIServerConfiguration::is_cache_path_Set() const{
    return m_cache_path_isSet;
}

bool OAIServerConfiguration::is_cache_path_Valid() const{
    return m_cache_path_isValid;
}

QString OAIServerConfiguration::getCertificatePassword() const {
    return m_certificate_password;
}
void OAIServerConfiguration::setCertificatePassword(const QString &certificate_password) {
    m_certificate_password = certificate_password;
    m_certificate_password_isSet = true;
}

bool OAIServerConfiguration::is_certificate_password_Set() const{
    return m_certificate_password_isSet;
}

bool OAIServerConfiguration::is_certificate_password_Valid() const{
    return m_certificate_password_isValid;
}

QString OAIServerConfiguration::getCertificatePath() const {
    return m_certificate_path;
}
void OAIServerConfiguration::setCertificatePath(const QString &certificate_path) {
    m_certificate_path = certificate_path;
    m_certificate_path_isSet = true;
}

bool OAIServerConfiguration::is_certificate_path_Set() const{
    return m_certificate_path_isSet;
}

bool OAIServerConfiguration::is_certificate_path_Valid() const{
    return m_certificate_path_isValid;
}

QList<QString> OAIServerConfiguration::getCodecsUsed() const {
    return m_codecs_used;
}
void OAIServerConfiguration::setCodecsUsed(const QList<QString> &codecs_used) {
    m_codecs_used = codecs_used;
    m_codecs_used_isSet = true;
}

bool OAIServerConfiguration::is_codecs_used_Set() const{
    return m_codecs_used_isSet;
}

bool OAIServerConfiguration::is_codecs_used_Valid() const{
    return m_codecs_used_isValid;
}

QList<OAINameValuePair> OAIServerConfiguration::getContentTypes() const {
    return m_content_types;
}
void OAIServerConfiguration::setContentTypes(const QList<OAINameValuePair> &content_types) {
    m_content_types = content_types;
    m_content_types_isSet = true;
}

bool OAIServerConfiguration::is_content_types_Set() const{
    return m_content_types_isSet;
}

bool OAIServerConfiguration::is_content_types_Valid() const{
    return m_content_types_isValid;
}

QList<QString> OAIServerConfiguration::getCorsHosts() const {
    return m_cors_hosts;
}
void OAIServerConfiguration::setCorsHosts(const QList<QString> &cors_hosts) {
    m_cors_hosts = cors_hosts;
    m_cors_hosts_isSet = true;
}

bool OAIServerConfiguration::is_cors_hosts_Set() const{
    return m_cors_hosts_isSet;
}

bool OAIServerConfiguration::is_cors_hosts_Valid() const{
    return m_cors_hosts_isValid;
}

bool OAIServerConfiguration::isDisableLiveTvChannelUserDataName() const {
    return m_disable_live_tv_channel_user_data_name;
}
void OAIServerConfiguration::setDisableLiveTvChannelUserDataName(const bool &disable_live_tv_channel_user_data_name) {
    m_disable_live_tv_channel_user_data_name = disable_live_tv_channel_user_data_name;
    m_disable_live_tv_channel_user_data_name_isSet = true;
}

bool OAIServerConfiguration::is_disable_live_tv_channel_user_data_name_Set() const{
    return m_disable_live_tv_channel_user_data_name_isSet;
}

bool OAIServerConfiguration::is_disable_live_tv_channel_user_data_name_Valid() const{
    return m_disable_live_tv_channel_user_data_name_isValid;
}

bool OAIServerConfiguration::isDisablePluginImages() const {
    return m_disable_plugin_images;
}
void OAIServerConfiguration::setDisablePluginImages(const bool &disable_plugin_images) {
    m_disable_plugin_images = disable_plugin_images;
    m_disable_plugin_images_isSet = true;
}

bool OAIServerConfiguration::is_disable_plugin_images_Set() const{
    return m_disable_plugin_images_isSet;
}

bool OAIServerConfiguration::is_disable_plugin_images_Valid() const{
    return m_disable_plugin_images_isValid;
}

bool OAIServerConfiguration::isDisplaySpecialsWithinSeasons() const {
    return m_display_specials_within_seasons;
}
void OAIServerConfiguration::setDisplaySpecialsWithinSeasons(const bool &display_specials_within_seasons) {
    m_display_specials_within_seasons = display_specials_within_seasons;
    m_display_specials_within_seasons_isSet = true;
}

bool OAIServerConfiguration::is_display_specials_within_seasons_Set() const{
    return m_display_specials_within_seasons_isSet;
}

bool OAIServerConfiguration::is_display_specials_within_seasons_Valid() const{
    return m_display_specials_within_seasons_isValid;
}

bool OAIServerConfiguration::isEnableCaseSensitiveItemIds() const {
    return m_enable_case_sensitive_item_ids;
}
void OAIServerConfiguration::setEnableCaseSensitiveItemIds(const bool &enable_case_sensitive_item_ids) {
    m_enable_case_sensitive_item_ids = enable_case_sensitive_item_ids;
    m_enable_case_sensitive_item_ids_isSet = true;
}

bool OAIServerConfiguration::is_enable_case_sensitive_item_ids_Set() const{
    return m_enable_case_sensitive_item_ids_isSet;
}

bool OAIServerConfiguration::is_enable_case_sensitive_item_ids_Valid() const{
    return m_enable_case_sensitive_item_ids_isValid;
}

bool OAIServerConfiguration::isEnableDashboardResponseCaching() const {
    return m_enable_dashboard_response_caching;
}
void OAIServerConfiguration::setEnableDashboardResponseCaching(const bool &enable_dashboard_response_caching) {
    m_enable_dashboard_response_caching = enable_dashboard_response_caching;
    m_enable_dashboard_response_caching_isSet = true;
}

bool OAIServerConfiguration::is_enable_dashboard_response_caching_Set() const{
    return m_enable_dashboard_response_caching_isSet;
}

bool OAIServerConfiguration::is_enable_dashboard_response_caching_Valid() const{
    return m_enable_dashboard_response_caching_isValid;
}

bool OAIServerConfiguration::isEnableExternalContentInSuggestions() const {
    return m_enable_external_content_in_suggestions;
}
void OAIServerConfiguration::setEnableExternalContentInSuggestions(const bool &enable_external_content_in_suggestions) {
    m_enable_external_content_in_suggestions = enable_external_content_in_suggestions;
    m_enable_external_content_in_suggestions_isSet = true;
}

bool OAIServerConfiguration::is_enable_external_content_in_suggestions_Set() const{
    return m_enable_external_content_in_suggestions_isSet;
}

bool OAIServerConfiguration::is_enable_external_content_in_suggestions_Valid() const{
    return m_enable_external_content_in_suggestions_isValid;
}

bool OAIServerConfiguration::isEnableFolderView() const {
    return m_enable_folder_view;
}
void OAIServerConfiguration::setEnableFolderView(const bool &enable_folder_view) {
    m_enable_folder_view = enable_folder_view;
    m_enable_folder_view_isSet = true;
}

bool OAIServerConfiguration::is_enable_folder_view_Set() const{
    return m_enable_folder_view_isSet;
}

bool OAIServerConfiguration::is_enable_folder_view_Valid() const{
    return m_enable_folder_view_isValid;
}

bool OAIServerConfiguration::isEnableGroupingIntoCollections() const {
    return m_enable_grouping_into_collections;
}
void OAIServerConfiguration::setEnableGroupingIntoCollections(const bool &enable_grouping_into_collections) {
    m_enable_grouping_into_collections = enable_grouping_into_collections;
    m_enable_grouping_into_collections_isSet = true;
}

bool OAIServerConfiguration::is_enable_grouping_into_collections_Set() const{
    return m_enable_grouping_into_collections_isSet;
}

bool OAIServerConfiguration::is_enable_grouping_into_collections_Valid() const{
    return m_enable_grouping_into_collections_isValid;
}

bool OAIServerConfiguration::isEnableHttps() const {
    return m_enable_https;
}
void OAIServerConfiguration::setEnableHttps(const bool &enable_https) {
    m_enable_https = enable_https;
    m_enable_https_isSet = true;
}

bool OAIServerConfiguration::is_enable_https_Set() const{
    return m_enable_https_isSet;
}

bool OAIServerConfiguration::is_enable_https_Valid() const{
    return m_enable_https_isValid;
}

bool OAIServerConfiguration::isEnableIpv4() const {
    return m_enable_ipv4;
}
void OAIServerConfiguration::setEnableIpv4(const bool &enable_ipv4) {
    m_enable_ipv4 = enable_ipv4;
    m_enable_ipv4_isSet = true;
}

bool OAIServerConfiguration::is_enable_ipv4_Set() const{
    return m_enable_ipv4_isSet;
}

bool OAIServerConfiguration::is_enable_ipv4_Valid() const{
    return m_enable_ipv4_isValid;
}

bool OAIServerConfiguration::isEnableIpv6() const {
    return m_enable_ipv6;
}
void OAIServerConfiguration::setEnableIpv6(const bool &enable_ipv6) {
    m_enable_ipv6 = enable_ipv6;
    m_enable_ipv6_isSet = true;
}

bool OAIServerConfiguration::is_enable_ipv6_Set() const{
    return m_enable_ipv6_isSet;
}

bool OAIServerConfiguration::is_enable_ipv6_Valid() const{
    return m_enable_ipv6_isValid;
}

bool OAIServerConfiguration::isEnableMetrics() const {
    return m_enable_metrics;
}
void OAIServerConfiguration::setEnableMetrics(const bool &enable_metrics) {
    m_enable_metrics = enable_metrics;
    m_enable_metrics_isSet = true;
}

bool OAIServerConfiguration::is_enable_metrics_Set() const{
    return m_enable_metrics_isSet;
}

bool OAIServerConfiguration::is_enable_metrics_Valid() const{
    return m_enable_metrics_isValid;
}

bool OAIServerConfiguration::isEnableMultiSocketBinding() const {
    return m_enable_multi_socket_binding;
}
void OAIServerConfiguration::setEnableMultiSocketBinding(const bool &enable_multi_socket_binding) {
    m_enable_multi_socket_binding = enable_multi_socket_binding;
    m_enable_multi_socket_binding_isSet = true;
}

bool OAIServerConfiguration::is_enable_multi_socket_binding_Set() const{
    return m_enable_multi_socket_binding_isSet;
}

bool OAIServerConfiguration::is_enable_multi_socket_binding_Valid() const{
    return m_enable_multi_socket_binding_isValid;
}

bool OAIServerConfiguration::isEnableNewOmdbSupport() const {
    return m_enable_new_omdb_support;
}
void OAIServerConfiguration::setEnableNewOmdbSupport(const bool &enable_new_omdb_support) {
    m_enable_new_omdb_support = enable_new_omdb_support;
    m_enable_new_omdb_support_isSet = true;
}

bool OAIServerConfiguration::is_enable_new_omdb_support_Set() const{
    return m_enable_new_omdb_support_isSet;
}

bool OAIServerConfiguration::is_enable_new_omdb_support_Valid() const{
    return m_enable_new_omdb_support_isValid;
}

bool OAIServerConfiguration::isEnableNormalizedItemByNameIds() const {
    return m_enable_normalized_item_by_name_ids;
}
void OAIServerConfiguration::setEnableNormalizedItemByNameIds(const bool &enable_normalized_item_by_name_ids) {
    m_enable_normalized_item_by_name_ids = enable_normalized_item_by_name_ids;
    m_enable_normalized_item_by_name_ids_isSet = true;
}

bool OAIServerConfiguration::is_enable_normalized_item_by_name_ids_Set() const{
    return m_enable_normalized_item_by_name_ids_isSet;
}

bool OAIServerConfiguration::is_enable_normalized_item_by_name_ids_Valid() const{
    return m_enable_normalized_item_by_name_ids_isValid;
}

bool OAIServerConfiguration::isEnableRemoteAccess() const {
    return m_enable_remote_access;
}
void OAIServerConfiguration::setEnableRemoteAccess(const bool &enable_remote_access) {
    m_enable_remote_access = enable_remote_access;
    m_enable_remote_access_isSet = true;
}

bool OAIServerConfiguration::is_enable_remote_access_Set() const{
    return m_enable_remote_access_isSet;
}

bool OAIServerConfiguration::is_enable_remote_access_Valid() const{
    return m_enable_remote_access_isValid;
}

bool OAIServerConfiguration::isEnableSsdpTracing() const {
    return m_enable_ssdp_tracing;
}
void OAIServerConfiguration::setEnableSsdpTracing(const bool &enable_ssdp_tracing) {
    m_enable_ssdp_tracing = enable_ssdp_tracing;
    m_enable_ssdp_tracing_isSet = true;
}

bool OAIServerConfiguration::is_enable_ssdp_tracing_Set() const{
    return m_enable_ssdp_tracing_isSet;
}

bool OAIServerConfiguration::is_enable_ssdp_tracing_Valid() const{
    return m_enable_ssdp_tracing_isValid;
}

bool OAIServerConfiguration::isEnableSimpleArtistDetection() const {
    return m_enable_simple_artist_detection;
}
void OAIServerConfiguration::setEnableSimpleArtistDetection(const bool &enable_simple_artist_detection) {
    m_enable_simple_artist_detection = enable_simple_artist_detection;
    m_enable_simple_artist_detection_isSet = true;
}

bool OAIServerConfiguration::is_enable_simple_artist_detection_Set() const{
    return m_enable_simple_artist_detection_isSet;
}

bool OAIServerConfiguration::is_enable_simple_artist_detection_Valid() const{
    return m_enable_simple_artist_detection_isValid;
}

bool OAIServerConfiguration::isEnableSlowResponseWarning() const {
    return m_enable_slow_response_warning;
}
void OAIServerConfiguration::setEnableSlowResponseWarning(const bool &enable_slow_response_warning) {
    m_enable_slow_response_warning = enable_slow_response_warning;
    m_enable_slow_response_warning_isSet = true;
}

bool OAIServerConfiguration::is_enable_slow_response_warning_Set() const{
    return m_enable_slow_response_warning_isSet;
}

bool OAIServerConfiguration::is_enable_slow_response_warning_Valid() const{
    return m_enable_slow_response_warning_isValid;
}

bool OAIServerConfiguration::isEnableUpnP() const {
    return m_enable_upn_p;
}
void OAIServerConfiguration::setEnableUpnP(const bool &enable_upn_p) {
    m_enable_upn_p = enable_upn_p;
    m_enable_upn_p_isSet = true;
}

bool OAIServerConfiguration::is_enable_upn_p_Set() const{
    return m_enable_upn_p_isSet;
}

bool OAIServerConfiguration::is_enable_upn_p_Valid() const{
    return m_enable_upn_p_isValid;
}

qint32 OAIServerConfiguration::getGatewayMonitorPeriod() const {
    return m_gateway_monitor_period;
}
void OAIServerConfiguration::setGatewayMonitorPeriod(const qint32 &gateway_monitor_period) {
    m_gateway_monitor_period = gateway_monitor_period;
    m_gateway_monitor_period_isSet = true;
}

bool OAIServerConfiguration::is_gateway_monitor_period_Set() const{
    return m_gateway_monitor_period_isSet;
}

bool OAIServerConfiguration::is_gateway_monitor_period_Valid() const{
    return m_gateway_monitor_period_isValid;
}

QString OAIServerConfiguration::getHdHomerunPortRange() const {
    return m_hd_homerun_port_range;
}
void OAIServerConfiguration::setHdHomerunPortRange(const QString &hd_homerun_port_range) {
    m_hd_homerun_port_range = hd_homerun_port_range;
    m_hd_homerun_port_range_isSet = true;
}

bool OAIServerConfiguration::is_hd_homerun_port_range_Set() const{
    return m_hd_homerun_port_range_isSet;
}

bool OAIServerConfiguration::is_hd_homerun_port_range_Valid() const{
    return m_hd_homerun_port_range_isValid;
}

qint32 OAIServerConfiguration::getHttpServerPortNumber() const {
    return m_http_server_port_number;
}
void OAIServerConfiguration::setHttpServerPortNumber(const qint32 &http_server_port_number) {
    m_http_server_port_number = http_server_port_number;
    m_http_server_port_number_isSet = true;
}

bool OAIServerConfiguration::is_http_server_port_number_Set() const{
    return m_http_server_port_number_isSet;
}

bool OAIServerConfiguration::is_http_server_port_number_Valid() const{
    return m_http_server_port_number_isValid;
}

qint32 OAIServerConfiguration::getHttpsPortNumber() const {
    return m_https_port_number;
}
void OAIServerConfiguration::setHttpsPortNumber(const qint32 &https_port_number) {
    m_https_port_number = https_port_number;
    m_https_port_number_isSet = true;
}

bool OAIServerConfiguration::is_https_port_number_Set() const{
    return m_https_port_number_isSet;
}

bool OAIServerConfiguration::is_https_port_number_Valid() const{
    return m_https_port_number_isValid;
}

bool OAIServerConfiguration::isIgnoreVirtualInterfaces() const {
    return m_ignore_virtual_interfaces;
}
void OAIServerConfiguration::setIgnoreVirtualInterfaces(const bool &ignore_virtual_interfaces) {
    m_ignore_virtual_interfaces = ignore_virtual_interfaces;
    m_ignore_virtual_interfaces_isSet = true;
}

bool OAIServerConfiguration::is_ignore_virtual_interfaces_Set() const{
    return m_ignore_virtual_interfaces_isSet;
}

bool OAIServerConfiguration::is_ignore_virtual_interfaces_Valid() const{
    return m_ignore_virtual_interfaces_isValid;
}

qint32 OAIServerConfiguration::getImageExtractionTimeoutMs() const {
    return m_image_extraction_timeout_ms;
}
void OAIServerConfiguration::setImageExtractionTimeoutMs(const qint32 &image_extraction_timeout_ms) {
    m_image_extraction_timeout_ms = image_extraction_timeout_ms;
    m_image_extraction_timeout_ms_isSet = true;
}

bool OAIServerConfiguration::is_image_extraction_timeout_ms_Set() const{
    return m_image_extraction_timeout_ms_isSet;
}

bool OAIServerConfiguration::is_image_extraction_timeout_ms_Valid() const{
    return m_image_extraction_timeout_ms_isValid;
}

OAIImageSavingConvention OAIServerConfiguration::getImageSavingConvention() const {
    return m_image_saving_convention;
}
void OAIServerConfiguration::setImageSavingConvention(const OAIImageSavingConvention &image_saving_convention) {
    m_image_saving_convention = image_saving_convention;
    m_image_saving_convention_isSet = true;
}

bool OAIServerConfiguration::is_image_saving_convention_Set() const{
    return m_image_saving_convention_isSet;
}

bool OAIServerConfiguration::is_image_saving_convention_Valid() const{
    return m_image_saving_convention_isValid;
}

bool OAIServerConfiguration::isIsPortAuthorized() const {
    return m_is_port_authorized;
}
void OAIServerConfiguration::setIsPortAuthorized(const bool &is_port_authorized) {
    m_is_port_authorized = is_port_authorized;
    m_is_port_authorized_isSet = true;
}

bool OAIServerConfiguration::is_is_port_authorized_Set() const{
    return m_is_port_authorized_isSet;
}

bool OAIServerConfiguration::is_is_port_authorized_Valid() const{
    return m_is_port_authorized_isValid;
}

bool OAIServerConfiguration::isIsRemoteIpFilterBlacklist() const {
    return m_is_remote_ip_filter_blacklist;
}
void OAIServerConfiguration::setIsRemoteIpFilterBlacklist(const bool &is_remote_ip_filter_blacklist) {
    m_is_remote_ip_filter_blacklist = is_remote_ip_filter_blacklist;
    m_is_remote_ip_filter_blacklist_isSet = true;
}

bool OAIServerConfiguration::is_is_remote_ip_filter_blacklist_Set() const{
    return m_is_remote_ip_filter_blacklist_isSet;
}

bool OAIServerConfiguration::is_is_remote_ip_filter_blacklist_Valid() const{
    return m_is_remote_ip_filter_blacklist_isValid;
}

bool OAIServerConfiguration::isIsStartupWizardCompleted() const {
    return m_is_startup_wizard_completed;
}
void OAIServerConfiguration::setIsStartupWizardCompleted(const bool &is_startup_wizard_completed) {
    m_is_startup_wizard_completed = is_startup_wizard_completed;
    m_is_startup_wizard_completed_isSet = true;
}

bool OAIServerConfiguration::is_is_startup_wizard_completed_Set() const{
    return m_is_startup_wizard_completed_isSet;
}

bool OAIServerConfiguration::is_is_startup_wizard_completed_Valid() const{
    return m_is_startup_wizard_completed_isValid;
}

QList<QString> OAIServerConfiguration::getKnownProxies() const {
    return m_known_proxies;
}
void OAIServerConfiguration::setKnownProxies(const QList<QString> &known_proxies) {
    m_known_proxies = known_proxies;
    m_known_proxies_isSet = true;
}

bool OAIServerConfiguration::is_known_proxies_Set() const{
    return m_known_proxies_isSet;
}

bool OAIServerConfiguration::is_known_proxies_Valid() const{
    return m_known_proxies_isValid;
}

qint32 OAIServerConfiguration::getLibraryMetadataRefreshConcurrency() const {
    return m_library_metadata_refresh_concurrency;
}
void OAIServerConfiguration::setLibraryMetadataRefreshConcurrency(const qint32 &library_metadata_refresh_concurrency) {
    m_library_metadata_refresh_concurrency = library_metadata_refresh_concurrency;
    m_library_metadata_refresh_concurrency_isSet = true;
}

bool OAIServerConfiguration::is_library_metadata_refresh_concurrency_Set() const{
    return m_library_metadata_refresh_concurrency_isSet;
}

bool OAIServerConfiguration::is_library_metadata_refresh_concurrency_Valid() const{
    return m_library_metadata_refresh_concurrency_isValid;
}

qint32 OAIServerConfiguration::getLibraryMonitorDelay() const {
    return m_library_monitor_delay;
}
void OAIServerConfiguration::setLibraryMonitorDelay(const qint32 &library_monitor_delay) {
    m_library_monitor_delay = library_monitor_delay;
    m_library_monitor_delay_isSet = true;
}

bool OAIServerConfiguration::is_library_monitor_delay_Set() const{
    return m_library_monitor_delay_isSet;
}

bool OAIServerConfiguration::is_library_monitor_delay_Valid() const{
    return m_library_monitor_delay_isValid;
}

qint32 OAIServerConfiguration::getLibraryScanFanoutConcurrency() const {
    return m_library_scan_fanout_concurrency;
}
void OAIServerConfiguration::setLibraryScanFanoutConcurrency(const qint32 &library_scan_fanout_concurrency) {
    m_library_scan_fanout_concurrency = library_scan_fanout_concurrency;
    m_library_scan_fanout_concurrency_isSet = true;
}

bool OAIServerConfiguration::is_library_scan_fanout_concurrency_Set() const{
    return m_library_scan_fanout_concurrency_isSet;
}

bool OAIServerConfiguration::is_library_scan_fanout_concurrency_Valid() const{
    return m_library_scan_fanout_concurrency_isValid;
}

QList<QString> OAIServerConfiguration::getLocalNetworkAddresses() const {
    return m_local_network_addresses;
}
void OAIServerConfiguration::setLocalNetworkAddresses(const QList<QString> &local_network_addresses) {
    m_local_network_addresses = local_network_addresses;
    m_local_network_addresses_isSet = true;
}

bool OAIServerConfiguration::is_local_network_addresses_Set() const{
    return m_local_network_addresses_isSet;
}

bool OAIServerConfiguration::is_local_network_addresses_Valid() const{
    return m_local_network_addresses_isValid;
}

QList<QString> OAIServerConfiguration::getLocalNetworkSubnets() const {
    return m_local_network_subnets;
}
void OAIServerConfiguration::setLocalNetworkSubnets(const QList<QString> &local_network_subnets) {
    m_local_network_subnets = local_network_subnets;
    m_local_network_subnets_isSet = true;
}

bool OAIServerConfiguration::is_local_network_subnets_Set() const{
    return m_local_network_subnets_isSet;
}

bool OAIServerConfiguration::is_local_network_subnets_Valid() const{
    return m_local_network_subnets_isValid;
}

qint32 OAIServerConfiguration::getLogFileRetentionDays() const {
    return m_log_file_retention_days;
}
void OAIServerConfiguration::setLogFileRetentionDays(const qint32 &log_file_retention_days) {
    m_log_file_retention_days = log_file_retention_days;
    m_log_file_retention_days_isSet = true;
}

bool OAIServerConfiguration::is_log_file_retention_days_Set() const{
    return m_log_file_retention_days_isSet;
}

bool OAIServerConfiguration::is_log_file_retention_days_Valid() const{
    return m_log_file_retention_days_isValid;
}

qint32 OAIServerConfiguration::getMaxAudiobookResume() const {
    return m_max_audiobook_resume;
}
void OAIServerConfiguration::setMaxAudiobookResume(const qint32 &max_audiobook_resume) {
    m_max_audiobook_resume = max_audiobook_resume;
    m_max_audiobook_resume_isSet = true;
}

bool OAIServerConfiguration::is_max_audiobook_resume_Set() const{
    return m_max_audiobook_resume_isSet;
}

bool OAIServerConfiguration::is_max_audiobook_resume_Valid() const{
    return m_max_audiobook_resume_isValid;
}

qint32 OAIServerConfiguration::getMaxResumePct() const {
    return m_max_resume_pct;
}
void OAIServerConfiguration::setMaxResumePct(const qint32 &max_resume_pct) {
    m_max_resume_pct = max_resume_pct;
    m_max_resume_pct_isSet = true;
}

bool OAIServerConfiguration::is_max_resume_pct_Set() const{
    return m_max_resume_pct_isSet;
}

bool OAIServerConfiguration::is_max_resume_pct_Valid() const{
    return m_max_resume_pct_isValid;
}

QString OAIServerConfiguration::getMetadataCountryCode() const {
    return m_metadata_country_code;
}
void OAIServerConfiguration::setMetadataCountryCode(const QString &metadata_country_code) {
    m_metadata_country_code = metadata_country_code;
    m_metadata_country_code_isSet = true;
}

bool OAIServerConfiguration::is_metadata_country_code_Set() const{
    return m_metadata_country_code_isSet;
}

bool OAIServerConfiguration::is_metadata_country_code_Valid() const{
    return m_metadata_country_code_isValid;
}

QString OAIServerConfiguration::getMetadataNetworkPath() const {
    return m_metadata_network_path;
}
void OAIServerConfiguration::setMetadataNetworkPath(const QString &metadata_network_path) {
    m_metadata_network_path = metadata_network_path;
    m_metadata_network_path_isSet = true;
}

bool OAIServerConfiguration::is_metadata_network_path_Set() const{
    return m_metadata_network_path_isSet;
}

bool OAIServerConfiguration::is_metadata_network_path_Valid() const{
    return m_metadata_network_path_isValid;
}

QList<OAIMetadataOptions> OAIServerConfiguration::getMetadataOptions() const {
    return m_metadata_options;
}
void OAIServerConfiguration::setMetadataOptions(const QList<OAIMetadataOptions> &metadata_options) {
    m_metadata_options = metadata_options;
    m_metadata_options_isSet = true;
}

bool OAIServerConfiguration::is_metadata_options_Set() const{
    return m_metadata_options_isSet;
}

bool OAIServerConfiguration::is_metadata_options_Valid() const{
    return m_metadata_options_isValid;
}

QString OAIServerConfiguration::getMetadataPath() const {
    return m_metadata_path;
}
void OAIServerConfiguration::setMetadataPath(const QString &metadata_path) {
    m_metadata_path = metadata_path;
    m_metadata_path_isSet = true;
}

bool OAIServerConfiguration::is_metadata_path_Set() const{
    return m_metadata_path_isSet;
}

bool OAIServerConfiguration::is_metadata_path_Valid() const{
    return m_metadata_path_isValid;
}

qint32 OAIServerConfiguration::getMinAudiobookResume() const {
    return m_min_audiobook_resume;
}
void OAIServerConfiguration::setMinAudiobookResume(const qint32 &min_audiobook_resume) {
    m_min_audiobook_resume = min_audiobook_resume;
    m_min_audiobook_resume_isSet = true;
}

bool OAIServerConfiguration::is_min_audiobook_resume_Set() const{
    return m_min_audiobook_resume_isSet;
}

bool OAIServerConfiguration::is_min_audiobook_resume_Valid() const{
    return m_min_audiobook_resume_isValid;
}

qint32 OAIServerConfiguration::getMinResumeDurationSeconds() const {
    return m_min_resume_duration_seconds;
}
void OAIServerConfiguration::setMinResumeDurationSeconds(const qint32 &min_resume_duration_seconds) {
    m_min_resume_duration_seconds = min_resume_duration_seconds;
    m_min_resume_duration_seconds_isSet = true;
}

bool OAIServerConfiguration::is_min_resume_duration_seconds_Set() const{
    return m_min_resume_duration_seconds_isSet;
}

bool OAIServerConfiguration::is_min_resume_duration_seconds_Valid() const{
    return m_min_resume_duration_seconds_isValid;
}

qint32 OAIServerConfiguration::getMinResumePct() const {
    return m_min_resume_pct;
}
void OAIServerConfiguration::setMinResumePct(const qint32 &min_resume_pct) {
    m_min_resume_pct = min_resume_pct;
    m_min_resume_pct_isSet = true;
}

bool OAIServerConfiguration::is_min_resume_pct_Set() const{
    return m_min_resume_pct_isSet;
}

bool OAIServerConfiguration::is_min_resume_pct_Valid() const{
    return m_min_resume_pct_isValid;
}

QList<OAIPathSubstitution> OAIServerConfiguration::getPathSubstitutions() const {
    return m_path_substitutions;
}
void OAIServerConfiguration::setPathSubstitutions(const QList<OAIPathSubstitution> &path_substitutions) {
    m_path_substitutions = path_substitutions;
    m_path_substitutions_isSet = true;
}

bool OAIServerConfiguration::is_path_substitutions_Set() const{
    return m_path_substitutions_isSet;
}

bool OAIServerConfiguration::is_path_substitutions_Valid() const{
    return m_path_substitutions_isValid;
}

QList<OAIRepositoryInfo> OAIServerConfiguration::getPluginRepositories() const {
    return m_plugin_repositories;
}
void OAIServerConfiguration::setPluginRepositories(const QList<OAIRepositoryInfo> &plugin_repositories) {
    m_plugin_repositories = plugin_repositories;
    m_plugin_repositories_isSet = true;
}

bool OAIServerConfiguration::is_plugin_repositories_Set() const{
    return m_plugin_repositories_isSet;
}

bool OAIServerConfiguration::is_plugin_repositories_Valid() const{
    return m_plugin_repositories_isValid;
}

QString OAIServerConfiguration::getPreferredMetadataLanguage() const {
    return m_preferred_metadata_language;
}
void OAIServerConfiguration::setPreferredMetadataLanguage(const QString &preferred_metadata_language) {
    m_preferred_metadata_language = preferred_metadata_language;
    m_preferred_metadata_language_isSet = true;
}

bool OAIServerConfiguration::is_preferred_metadata_language_Set() const{
    return m_preferred_metadata_language_isSet;
}

bool OAIServerConfiguration::is_preferred_metadata_language_Valid() const{
    return m_preferred_metadata_language_isValid;
}

OAIVersion OAIServerConfiguration::getPreviousVersion() const {
    return m_previous_version;
}
void OAIServerConfiguration::setPreviousVersion(const OAIVersion &previous_version) {
    m_previous_version = previous_version;
    m_previous_version_isSet = true;
}

bool OAIServerConfiguration::is_previous_version_Set() const{
    return m_previous_version_isSet;
}

bool OAIServerConfiguration::is_previous_version_Valid() const{
    return m_previous_version_isValid;
}

QString OAIServerConfiguration::getPreviousVersionStr() const {
    return m_previous_version_str;
}
void OAIServerConfiguration::setPreviousVersionStr(const QString &previous_version_str) {
    m_previous_version_str = previous_version_str;
    m_previous_version_str_isSet = true;
}

bool OAIServerConfiguration::is_previous_version_str_Set() const{
    return m_previous_version_str_isSet;
}

bool OAIServerConfiguration::is_previous_version_str_Valid() const{
    return m_previous_version_str_isValid;
}

qint32 OAIServerConfiguration::getPublicHttpsPort() const {
    return m_public_https_port;
}
void OAIServerConfiguration::setPublicHttpsPort(const qint32 &public_https_port) {
    m_public_https_port = public_https_port;
    m_public_https_port_isSet = true;
}

bool OAIServerConfiguration::is_public_https_port_Set() const{
    return m_public_https_port_isSet;
}

bool OAIServerConfiguration::is_public_https_port_Valid() const{
    return m_public_https_port_isValid;
}

qint32 OAIServerConfiguration::getPublicPort() const {
    return m_public_port;
}
void OAIServerConfiguration::setPublicPort(const qint32 &public_port) {
    m_public_port = public_port;
    m_public_port_isSet = true;
}

bool OAIServerConfiguration::is_public_port_Set() const{
    return m_public_port_isSet;
}

bool OAIServerConfiguration::is_public_port_Valid() const{
    return m_public_port_isValid;
}

QList<QString> OAIServerConfiguration::getPublishedServerUriBySubnet() const {
    return m_published_server_uri_by_subnet;
}
void OAIServerConfiguration::setPublishedServerUriBySubnet(const QList<QString> &published_server_uri_by_subnet) {
    m_published_server_uri_by_subnet = published_server_uri_by_subnet;
    m_published_server_uri_by_subnet_isSet = true;
}

bool OAIServerConfiguration::is_published_server_uri_by_subnet_Set() const{
    return m_published_server_uri_by_subnet_isSet;
}

bool OAIServerConfiguration::is_published_server_uri_by_subnet_Valid() const{
    return m_published_server_uri_by_subnet_isValid;
}

bool OAIServerConfiguration::isQuickConnectAvailable() const {
    return m_quick_connect_available;
}
void OAIServerConfiguration::setQuickConnectAvailable(const bool &quick_connect_available) {
    m_quick_connect_available = quick_connect_available;
    m_quick_connect_available_isSet = true;
}

bool OAIServerConfiguration::is_quick_connect_available_Set() const{
    return m_quick_connect_available_isSet;
}

bool OAIServerConfiguration::is_quick_connect_available_Valid() const{
    return m_quick_connect_available_isValid;
}

qint32 OAIServerConfiguration::getRemoteClientBitrateLimit() const {
    return m_remote_client_bitrate_limit;
}
void OAIServerConfiguration::setRemoteClientBitrateLimit(const qint32 &remote_client_bitrate_limit) {
    m_remote_client_bitrate_limit = remote_client_bitrate_limit;
    m_remote_client_bitrate_limit_isSet = true;
}

bool OAIServerConfiguration::is_remote_client_bitrate_limit_Set() const{
    return m_remote_client_bitrate_limit_isSet;
}

bool OAIServerConfiguration::is_remote_client_bitrate_limit_Valid() const{
    return m_remote_client_bitrate_limit_isValid;
}

QList<QString> OAIServerConfiguration::getRemoteIpFilter() const {
    return m_remote_ip_filter;
}
void OAIServerConfiguration::setRemoteIpFilter(const QList<QString> &remote_ip_filter) {
    m_remote_ip_filter = remote_ip_filter;
    m_remote_ip_filter_isSet = true;
}

bool OAIServerConfiguration::is_remote_ip_filter_Set() const{
    return m_remote_ip_filter_isSet;
}

bool OAIServerConfiguration::is_remote_ip_filter_Valid() const{
    return m_remote_ip_filter_isValid;
}

bool OAIServerConfiguration::isRemoveOldPlugins() const {
    return m_remove_old_plugins;
}
void OAIServerConfiguration::setRemoveOldPlugins(const bool &remove_old_plugins) {
    m_remove_old_plugins = remove_old_plugins;
    m_remove_old_plugins_isSet = true;
}

bool OAIServerConfiguration::is_remove_old_plugins_Set() const{
    return m_remove_old_plugins_isSet;
}

bool OAIServerConfiguration::is_remove_old_plugins_Valid() const{
    return m_remove_old_plugins_isValid;
}

bool OAIServerConfiguration::isRequireHttps() const {
    return m_require_https;
}
void OAIServerConfiguration::setRequireHttps(const bool &require_https) {
    m_require_https = require_https;
    m_require_https_isSet = true;
}

bool OAIServerConfiguration::is_require_https_Set() const{
    return m_require_https_isSet;
}

bool OAIServerConfiguration::is_require_https_Valid() const{
    return m_require_https_isValid;
}

QString OAIServerConfiguration::getSsdpTracingFilter() const {
    return m_ssdp_tracing_filter;
}
void OAIServerConfiguration::setSsdpTracingFilter(const QString &ssdp_tracing_filter) {
    m_ssdp_tracing_filter = ssdp_tracing_filter;
    m_ssdp_tracing_filter_isSet = true;
}

bool OAIServerConfiguration::is_ssdp_tracing_filter_Set() const{
    return m_ssdp_tracing_filter_isSet;
}

bool OAIServerConfiguration::is_ssdp_tracing_filter_Valid() const{
    return m_ssdp_tracing_filter_isValid;
}

bool OAIServerConfiguration::isSaveMetadataHidden() const {
    return m_save_metadata_hidden;
}
void OAIServerConfiguration::setSaveMetadataHidden(const bool &save_metadata_hidden) {
    m_save_metadata_hidden = save_metadata_hidden;
    m_save_metadata_hidden_isSet = true;
}

bool OAIServerConfiguration::is_save_metadata_hidden_Set() const{
    return m_save_metadata_hidden_isSet;
}

bool OAIServerConfiguration::is_save_metadata_hidden_Valid() const{
    return m_save_metadata_hidden_isValid;
}

QString OAIServerConfiguration::getServerName() const {
    return m_server_name;
}
void OAIServerConfiguration::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIServerConfiguration::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIServerConfiguration::is_server_name_Valid() const{
    return m_server_name_isValid;
}

bool OAIServerConfiguration::isSkipDeserializationForBasicTypes() const {
    return m_skip_deserialization_for_basic_types;
}
void OAIServerConfiguration::setSkipDeserializationForBasicTypes(const bool &skip_deserialization_for_basic_types) {
    m_skip_deserialization_for_basic_types = skip_deserialization_for_basic_types;
    m_skip_deserialization_for_basic_types_isSet = true;
}

bool OAIServerConfiguration::is_skip_deserialization_for_basic_types_Set() const{
    return m_skip_deserialization_for_basic_types_isSet;
}

bool OAIServerConfiguration::is_skip_deserialization_for_basic_types_Valid() const{
    return m_skip_deserialization_for_basic_types_isValid;
}

qint64 OAIServerConfiguration::getSlowResponseThresholdMs() const {
    return m_slow_response_threshold_ms;
}
void OAIServerConfiguration::setSlowResponseThresholdMs(const qint64 &slow_response_threshold_ms) {
    m_slow_response_threshold_ms = slow_response_threshold_ms;
    m_slow_response_threshold_ms_isSet = true;
}

bool OAIServerConfiguration::is_slow_response_threshold_ms_Set() const{
    return m_slow_response_threshold_ms_isSet;
}

bool OAIServerConfiguration::is_slow_response_threshold_ms_Valid() const{
    return m_slow_response_threshold_ms_isValid;
}

QList<QString> OAIServerConfiguration::getSortRemoveCharacters() const {
    return m_sort_remove_characters;
}
void OAIServerConfiguration::setSortRemoveCharacters(const QList<QString> &sort_remove_characters) {
    m_sort_remove_characters = sort_remove_characters;
    m_sort_remove_characters_isSet = true;
}

bool OAIServerConfiguration::is_sort_remove_characters_Set() const{
    return m_sort_remove_characters_isSet;
}

bool OAIServerConfiguration::is_sort_remove_characters_Valid() const{
    return m_sort_remove_characters_isValid;
}

QList<QString> OAIServerConfiguration::getSortRemoveWords() const {
    return m_sort_remove_words;
}
void OAIServerConfiguration::setSortRemoveWords(const QList<QString> &sort_remove_words) {
    m_sort_remove_words = sort_remove_words;
    m_sort_remove_words_isSet = true;
}

bool OAIServerConfiguration::is_sort_remove_words_Set() const{
    return m_sort_remove_words_isSet;
}

bool OAIServerConfiguration::is_sort_remove_words_Valid() const{
    return m_sort_remove_words_isValid;
}

QList<QString> OAIServerConfiguration::getSortReplaceCharacters() const {
    return m_sort_replace_characters;
}
void OAIServerConfiguration::setSortReplaceCharacters(const QList<QString> &sort_replace_characters) {
    m_sort_replace_characters = sort_replace_characters;
    m_sort_replace_characters_isSet = true;
}

bool OAIServerConfiguration::is_sort_replace_characters_Set() const{
    return m_sort_replace_characters_isSet;
}

bool OAIServerConfiguration::is_sort_replace_characters_Valid() const{
    return m_sort_replace_characters_isValid;
}

bool OAIServerConfiguration::isTrustAllIp6Interfaces() const {
    return m_trust_all_ip6_interfaces;
}
void OAIServerConfiguration::setTrustAllIp6Interfaces(const bool &trust_all_ip6_interfaces) {
    m_trust_all_ip6_interfaces = trust_all_ip6_interfaces;
    m_trust_all_ip6_interfaces_isSet = true;
}

bool OAIServerConfiguration::is_trust_all_ip6_interfaces_Set() const{
    return m_trust_all_ip6_interfaces_isSet;
}

bool OAIServerConfiguration::is_trust_all_ip6_interfaces_Valid() const{
    return m_trust_all_ip6_interfaces_isValid;
}

QString OAIServerConfiguration::getUdpPortRange() const {
    return m_udp_port_range;
}
void OAIServerConfiguration::setUdpPortRange(const QString &udp_port_range) {
    m_udp_port_range = udp_port_range;
    m_udp_port_range_isSet = true;
}

bool OAIServerConfiguration::is_udp_port_range_Set() const{
    return m_udp_port_range_isSet;
}

bool OAIServerConfiguration::is_udp_port_range_Valid() const{
    return m_udp_port_range_isValid;
}

qint32 OAIServerConfiguration::getUdpSendCount() const {
    return m_udp_send_count;
}
void OAIServerConfiguration::setUdpSendCount(const qint32 &udp_send_count) {
    m_udp_send_count = udp_send_count;
    m_udp_send_count_isSet = true;
}

bool OAIServerConfiguration::is_udp_send_count_Set() const{
    return m_udp_send_count_isSet;
}

bool OAIServerConfiguration::is_udp_send_count_Valid() const{
    return m_udp_send_count_isValid;
}

qint32 OAIServerConfiguration::getUdpSendDelay() const {
    return m_udp_send_delay;
}
void OAIServerConfiguration::setUdpSendDelay(const qint32 &udp_send_delay) {
    m_udp_send_delay = udp_send_delay;
    m_udp_send_delay_isSet = true;
}

bool OAIServerConfiguration::is_udp_send_delay_Set() const{
    return m_udp_send_delay_isSet;
}

bool OAIServerConfiguration::is_udp_send_delay_Valid() const{
    return m_udp_send_delay_isValid;
}

QString OAIServerConfiguration::getUiCulture() const {
    return m_ui_culture;
}
void OAIServerConfiguration::setUiCulture(const QString &ui_culture) {
    m_ui_culture = ui_culture;
    m_ui_culture_isSet = true;
}

bool OAIServerConfiguration::is_ui_culture_Set() const{
    return m_ui_culture_isSet;
}

bool OAIServerConfiguration::is_ui_culture_Valid() const{
    return m_ui_culture_isValid;
}

bool OAIServerConfiguration::isUpnPCreateHttpPortMap() const {
    return m_upn_p_create_http_port_map;
}
void OAIServerConfiguration::setUpnPCreateHttpPortMap(const bool &upn_p_create_http_port_map) {
    m_upn_p_create_http_port_map = upn_p_create_http_port_map;
    m_upn_p_create_http_port_map_isSet = true;
}

bool OAIServerConfiguration::is_upn_p_create_http_port_map_Set() const{
    return m_upn_p_create_http_port_map_isSet;
}

bool OAIServerConfiguration::is_upn_p_create_http_port_map_Valid() const{
    return m_upn_p_create_http_port_map_isValid;
}

QList<QString> OAIServerConfiguration::getUninstalledPlugins() const {
    return m_uninstalled_plugins;
}
void OAIServerConfiguration::setUninstalledPlugins(const QList<QString> &uninstalled_plugins) {
    m_uninstalled_plugins = uninstalled_plugins;
    m_uninstalled_plugins_isSet = true;
}

bool OAIServerConfiguration::is_uninstalled_plugins_Set() const{
    return m_uninstalled_plugins_isSet;
}

bool OAIServerConfiguration::is_uninstalled_plugins_Valid() const{
    return m_uninstalled_plugins_isValid;
}

QString OAIServerConfiguration::getVirtualInterfaceNames() const {
    return m_virtual_interface_names;
}
void OAIServerConfiguration::setVirtualInterfaceNames(const QString &virtual_interface_names) {
    m_virtual_interface_names = virtual_interface_names;
    m_virtual_interface_names_isSet = true;
}

bool OAIServerConfiguration::is_virtual_interface_names_Set() const{
    return m_virtual_interface_names_isSet;
}

bool OAIServerConfiguration::is_virtual_interface_names_Valid() const{
    return m_virtual_interface_names_isValid;
}

bool OAIServerConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_log_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_discovery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_discovery_tracing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codecs_used.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_hosts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_live_tv_channel_user_data_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_plugin_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_specials_within_seasons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_case_sensitive_item_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_dashboard_response_caching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_external_content_in_suggestions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_folder_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_grouping_into_collections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_https_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ipv4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ipv6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_multi_socket_binding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_new_omdb_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_normalized_item_by_name_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_remote_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ssdp_tracing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_simple_artist_detection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_slow_response_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_upn_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_monitor_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hd_homerun_port_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_server_port_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_port_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_virtual_interfaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_extraction_timeout_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_saving_convention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_port_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_remote_ip_filter_blacklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_startup_wizard_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_proxies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_metadata_refresh_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_monitor_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_scan_fanout_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_network_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_network_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_file_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_audiobook_resume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_resume_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_network_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_audiobook_resume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_resume_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_resume_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_substitutions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugin_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_metadata_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_version_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_https_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_server_uri_by_subnet.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quick_connect_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_client_bitrate_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_ip_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_old_plugins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_https_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssdp_tracing_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_metadata_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_deserialization_for_basic_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slow_response_threshold_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_remove_characters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_remove_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_replace_characters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_all_ip6_interfaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udp_port_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udp_send_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udp_send_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upn_p_create_http_port_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uninstalled_plugins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_interface_names_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
