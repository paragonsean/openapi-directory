/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceProfile.h
 *
 * Defines the MediaBrowser.Model.Dlna.DeviceProfile.
 */

#ifndef OAIDeviceProfile_H
#define OAIDeviceProfile_H

#include <QJsonObject>

#include "OAICodecProfile.h"
#include "OAIContainerProfile.h"
#include "OAIDeviceIdentification.h"
#include "OAIDirectPlayProfile.h"
#include "OAIResponseProfile.h"
#include "OAISubtitleProfile.h"
#include "OAITranscodingProfile.h"
#include "OAIXmlAttribute.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICodecProfile;
class OAIContainerProfile;
class OAIDirectPlayProfile;
class OAIDeviceIdentification;
class OAIResponseProfile;
class OAISubtitleProfile;
class OAITranscodingProfile;
class OAIXmlAttribute;

class OAIDeviceProfile : public OAIObject {
public:
    OAIDeviceProfile();
    OAIDeviceProfile(QString json);
    ~OAIDeviceProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlbumArtPn() const;
    void setAlbumArtPn(const QString &album_art_pn);
    bool is_album_art_pn_Set() const;
    bool is_album_art_pn_Valid() const;

    QList<OAICodecProfile> getCodecProfiles() const;
    void setCodecProfiles(const QList<OAICodecProfile> &codec_profiles);
    bool is_codec_profiles_Set() const;
    bool is_codec_profiles_Valid() const;

    QList<OAIContainerProfile> getContainerProfiles() const;
    void setContainerProfiles(const QList<OAIContainerProfile> &container_profiles);
    bool is_container_profiles_Set() const;
    bool is_container_profiles_Valid() const;

    QList<OAIDirectPlayProfile> getDirectPlayProfiles() const;
    void setDirectPlayProfiles(const QList<OAIDirectPlayProfile> &direct_play_profiles);
    bool is_direct_play_profiles_Set() const;
    bool is_direct_play_profiles_Valid() const;

    bool isEnableAlbumArtInDidl() const;
    void setEnableAlbumArtInDidl(const bool &enable_album_art_in_didl);
    bool is_enable_album_art_in_didl_Set() const;
    bool is_enable_album_art_in_didl_Valid() const;

    bool isEnableMsMediaReceiverRegistrar() const;
    void setEnableMsMediaReceiverRegistrar(const bool &enable_ms_media_receiver_registrar);
    bool is_enable_ms_media_receiver_registrar_Set() const;
    bool is_enable_ms_media_receiver_registrar_Valid() const;

    bool isEnableSingleAlbumArtLimit() const;
    void setEnableSingleAlbumArtLimit(const bool &enable_single_album_art_limit);
    bool is_enable_single_album_art_limit_Set() const;
    bool is_enable_single_album_art_limit_Valid() const;

    bool isEnableSingleSubtitleLimit() const;
    void setEnableSingleSubtitleLimit(const bool &enable_single_subtitle_limit);
    bool is_enable_single_subtitle_limit_Set() const;
    bool is_enable_single_subtitle_limit_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIDeviceIdentification getIdentification() const;
    void setIdentification(const OAIDeviceIdentification &identification);
    bool is_identification_Set() const;
    bool is_identification_Valid() const;

    bool isIgnoreTranscodeByteRangeRequests() const;
    void setIgnoreTranscodeByteRangeRequests(const bool &ignore_transcode_byte_range_requests);
    bool is_ignore_transcode_byte_range_requests_Set() const;
    bool is_ignore_transcode_byte_range_requests_Valid() const;

    QString getManufacturer() const;
    void setManufacturer(const QString &manufacturer);
    bool is_manufacturer_Set() const;
    bool is_manufacturer_Valid() const;

    QString getManufacturerUrl() const;
    void setManufacturerUrl(const QString &manufacturer_url);
    bool is_manufacturer_url_Set() const;
    bool is_manufacturer_url_Valid() const;

    qint32 getMaxAlbumArtHeight() const;
    void setMaxAlbumArtHeight(const qint32 &max_album_art_height);
    bool is_max_album_art_height_Set() const;
    bool is_max_album_art_height_Valid() const;

    qint32 getMaxAlbumArtWidth() const;
    void setMaxAlbumArtWidth(const qint32 &max_album_art_width);
    bool is_max_album_art_width_Set() const;
    bool is_max_album_art_width_Valid() const;

    qint32 getMaxIconHeight() const;
    void setMaxIconHeight(const qint32 &max_icon_height);
    bool is_max_icon_height_Set() const;
    bool is_max_icon_height_Valid() const;

    qint32 getMaxIconWidth() const;
    void setMaxIconWidth(const qint32 &max_icon_width);
    bool is_max_icon_width_Set() const;
    bool is_max_icon_width_Valid() const;

    qint32 getMaxStaticBitrate() const;
    void setMaxStaticBitrate(const qint32 &max_static_bitrate);
    bool is_max_static_bitrate_Set() const;
    bool is_max_static_bitrate_Valid() const;

    qint32 getMaxStaticMusicBitrate() const;
    void setMaxStaticMusicBitrate(const qint32 &max_static_music_bitrate);
    bool is_max_static_music_bitrate_Set() const;
    bool is_max_static_music_bitrate_Valid() const;

    qint32 getMaxStreamingBitrate() const;
    void setMaxStreamingBitrate(const qint32 &max_streaming_bitrate);
    bool is_max_streaming_bitrate_Set() const;
    bool is_max_streaming_bitrate_Valid() const;

    QString getModelDescription() const;
    void setModelDescription(const QString &model_description);
    bool is_model_description_Set() const;
    bool is_model_description_Valid() const;

    QString getModelName() const;
    void setModelName(const QString &model_name);
    bool is_model_name_Set() const;
    bool is_model_name_Valid() const;

    QString getModelNumber() const;
    void setModelNumber(const QString &model_number);
    bool is_model_number_Set() const;
    bool is_model_number_Valid() const;

    QString getModelUrl() const;
    void setModelUrl(const QString &model_url);
    bool is_model_url_Set() const;
    bool is_model_url_Valid() const;

    qint32 getMusicStreamingTranscodingBitrate() const;
    void setMusicStreamingTranscodingBitrate(const qint32 &music_streaming_transcoding_bitrate);
    bool is_music_streaming_transcoding_bitrate_Set() const;
    bool is_music_streaming_transcoding_bitrate_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getProtocolInfo() const;
    void setProtocolInfo(const QString &protocol_info);
    bool is_protocol_info_Set() const;
    bool is_protocol_info_Valid() const;

    bool isRequiresPlainFolders() const;
    void setRequiresPlainFolders(const bool &requires_plain_folders);
    bool is_requires_plain_folders_Set() const;
    bool is_requires_plain_folders_Valid() const;

    bool isRequiresPlainVideoItems() const;
    void setRequiresPlainVideoItems(const bool &requires_plain_video_items);
    bool is_requires_plain_video_items_Set() const;
    bool is_requires_plain_video_items_Valid() const;

    QList<OAIResponseProfile> getResponseProfiles() const;
    void setResponseProfiles(const QList<OAIResponseProfile> &response_profiles);
    bool is_response_profiles_Set() const;
    bool is_response_profiles_Valid() const;

    QString getSerialNumber() const;
    void setSerialNumber(const QString &serial_number);
    bool is_serial_number_Set() const;
    bool is_serial_number_Valid() const;

    QString getSonyAggregationFlags() const;
    void setSonyAggregationFlags(const QString &sony_aggregation_flags);
    bool is_sony_aggregation_flags_Set() const;
    bool is_sony_aggregation_flags_Valid() const;

    QList<OAISubtitleProfile> getSubtitleProfiles() const;
    void setSubtitleProfiles(const QList<OAISubtitleProfile> &subtitle_profiles);
    bool is_subtitle_profiles_Set() const;
    bool is_subtitle_profiles_Valid() const;

    QString getSupportedMediaTypes() const;
    void setSupportedMediaTypes(const QString &supported_media_types);
    bool is_supported_media_types_Set() const;
    bool is_supported_media_types_Valid() const;

    qint32 getTimelineOffsetSeconds() const;
    void setTimelineOffsetSeconds(const qint32 &timeline_offset_seconds);
    bool is_timeline_offset_seconds_Set() const;
    bool is_timeline_offset_seconds_Valid() const;

    QList<OAITranscodingProfile> getTranscodingProfiles() const;
    void setTranscodingProfiles(const QList<OAITranscodingProfile> &transcoding_profiles);
    bool is_transcoding_profiles_Set() const;
    bool is_transcoding_profiles_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QList<OAIXmlAttribute> getXmlRootAttributes() const;
    void setXmlRootAttributes(const QList<OAIXmlAttribute> &xml_root_attributes);
    bool is_xml_root_attributes_Set() const;
    bool is_xml_root_attributes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_album_art_pn;
    bool m_album_art_pn_isSet;
    bool m_album_art_pn_isValid;

    QList<OAICodecProfile> m_codec_profiles;
    bool m_codec_profiles_isSet;
    bool m_codec_profiles_isValid;

    QList<OAIContainerProfile> m_container_profiles;
    bool m_container_profiles_isSet;
    bool m_container_profiles_isValid;

    QList<OAIDirectPlayProfile> m_direct_play_profiles;
    bool m_direct_play_profiles_isSet;
    bool m_direct_play_profiles_isValid;

    bool m_enable_album_art_in_didl;
    bool m_enable_album_art_in_didl_isSet;
    bool m_enable_album_art_in_didl_isValid;

    bool m_enable_ms_media_receiver_registrar;
    bool m_enable_ms_media_receiver_registrar_isSet;
    bool m_enable_ms_media_receiver_registrar_isValid;

    bool m_enable_single_album_art_limit;
    bool m_enable_single_album_art_limit_isSet;
    bool m_enable_single_album_art_limit_isValid;

    bool m_enable_single_subtitle_limit;
    bool m_enable_single_subtitle_limit_isSet;
    bool m_enable_single_subtitle_limit_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIDeviceIdentification m_identification;
    bool m_identification_isSet;
    bool m_identification_isValid;

    bool m_ignore_transcode_byte_range_requests;
    bool m_ignore_transcode_byte_range_requests_isSet;
    bool m_ignore_transcode_byte_range_requests_isValid;

    QString m_manufacturer;
    bool m_manufacturer_isSet;
    bool m_manufacturer_isValid;

    QString m_manufacturer_url;
    bool m_manufacturer_url_isSet;
    bool m_manufacturer_url_isValid;

    qint32 m_max_album_art_height;
    bool m_max_album_art_height_isSet;
    bool m_max_album_art_height_isValid;

    qint32 m_max_album_art_width;
    bool m_max_album_art_width_isSet;
    bool m_max_album_art_width_isValid;

    qint32 m_max_icon_height;
    bool m_max_icon_height_isSet;
    bool m_max_icon_height_isValid;

    qint32 m_max_icon_width;
    bool m_max_icon_width_isSet;
    bool m_max_icon_width_isValid;

    qint32 m_max_static_bitrate;
    bool m_max_static_bitrate_isSet;
    bool m_max_static_bitrate_isValid;

    qint32 m_max_static_music_bitrate;
    bool m_max_static_music_bitrate_isSet;
    bool m_max_static_music_bitrate_isValid;

    qint32 m_max_streaming_bitrate;
    bool m_max_streaming_bitrate_isSet;
    bool m_max_streaming_bitrate_isValid;

    QString m_model_description;
    bool m_model_description_isSet;
    bool m_model_description_isValid;

    QString m_model_name;
    bool m_model_name_isSet;
    bool m_model_name_isValid;

    QString m_model_number;
    bool m_model_number_isSet;
    bool m_model_number_isValid;

    QString m_model_url;
    bool m_model_url_isSet;
    bool m_model_url_isValid;

    qint32 m_music_streaming_transcoding_bitrate;
    bool m_music_streaming_transcoding_bitrate_isSet;
    bool m_music_streaming_transcoding_bitrate_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_protocol_info;
    bool m_protocol_info_isSet;
    bool m_protocol_info_isValid;

    bool m_requires_plain_folders;
    bool m_requires_plain_folders_isSet;
    bool m_requires_plain_folders_isValid;

    bool m_requires_plain_video_items;
    bool m_requires_plain_video_items_isSet;
    bool m_requires_plain_video_items_isValid;

    QList<OAIResponseProfile> m_response_profiles;
    bool m_response_profiles_isSet;
    bool m_response_profiles_isValid;

    QString m_serial_number;
    bool m_serial_number_isSet;
    bool m_serial_number_isValid;

    QString m_sony_aggregation_flags;
    bool m_sony_aggregation_flags_isSet;
    bool m_sony_aggregation_flags_isValid;

    QList<OAISubtitleProfile> m_subtitle_profiles;
    bool m_subtitle_profiles_isSet;
    bool m_subtitle_profiles_isValid;

    QString m_supported_media_types;
    bool m_supported_media_types_isSet;
    bool m_supported_media_types_isValid;

    qint32 m_timeline_offset_seconds;
    bool m_timeline_offset_seconds_isSet;
    bool m_timeline_offset_seconds_isValid;

    QList<OAITranscodingProfile> m_transcoding_profiles;
    bool m_transcoding_profiles_isSet;
    bool m_transcoding_profiles_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QList<OAIXmlAttribute> m_xml_root_attributes;
    bool m_xml_root_attributes_isSet;
    bool m_xml_root_attributes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceProfile)

#endif // OAIDeviceProfile_H
