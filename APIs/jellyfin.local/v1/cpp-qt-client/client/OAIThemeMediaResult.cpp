/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThemeMediaResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThemeMediaResult::OAIThemeMediaResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThemeMediaResult::OAIThemeMediaResult() {
    this->initializeModel();
}

OAIThemeMediaResult::~OAIThemeMediaResult() {}

void OAIThemeMediaResult::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_total_record_count_isSet = false;
    m_total_record_count_isValid = false;
}

void OAIThemeMediaResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThemeMediaResult::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("OwnerId")]);
    m_owner_id_isSet = !json[QString("OwnerId")].isNull() && m_owner_id_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("StartIndex")]);
    m_start_index_isSet = !json[QString("StartIndex")].isNull() && m_start_index_isValid;

    m_total_record_count_isValid = ::OpenAPI::fromJsonValue(m_total_record_count, json[QString("TotalRecordCount")]);
    m_total_record_count_isSet = !json[QString("TotalRecordCount")].isNull() && m_total_record_count_isValid;
}

QString OAIThemeMediaResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThemeMediaResult::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("OwnerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("StartIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_total_record_count_isSet) {
        obj.insert(QString("TotalRecordCount"), ::OpenAPI::toJsonValue(m_total_record_count));
    }
    return obj;
}

QList<OAIBaseItemDto> OAIThemeMediaResult::getItems() const {
    return m_items;
}
void OAIThemeMediaResult::setItems(const QList<OAIBaseItemDto> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIThemeMediaResult::is_items_Set() const{
    return m_items_isSet;
}

bool OAIThemeMediaResult::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIThemeMediaResult::getOwnerId() const {
    return m_owner_id;
}
void OAIThemeMediaResult::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIThemeMediaResult::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIThemeMediaResult::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

qint32 OAIThemeMediaResult::getStartIndex() const {
    return m_start_index;
}
void OAIThemeMediaResult::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIThemeMediaResult::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIThemeMediaResult::is_start_index_Valid() const{
    return m_start_index_isValid;
}

qint32 OAIThemeMediaResult::getTotalRecordCount() const {
    return m_total_record_count;
}
void OAIThemeMediaResult::setTotalRecordCount(const qint32 &total_record_count) {
    m_total_record_count = total_record_count;
    m_total_record_count_isSet = true;
}

bool OAIThemeMediaResult::is_total_record_count_Set() const{
    return m_total_record_count_isSet;
}

bool OAIThemeMediaResult::is_total_record_count_Valid() const{
    return m_total_record_count_isValid;
}

bool OAIThemeMediaResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThemeMediaResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
