/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaybackInfoDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaybackInfoDto::OAIPlaybackInfoDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaybackInfoDto::OAIPlaybackInfoDto() {
    this->initializeModel();
}

OAIPlaybackInfoDto::~OAIPlaybackInfoDto() {}

void OAIPlaybackInfoDto::initializeModel() {

    m_allow_audio_stream_copy_isSet = false;
    m_allow_audio_stream_copy_isValid = false;

    m_allow_video_stream_copy_isSet = false;
    m_allow_video_stream_copy_isValid = false;

    m_audio_stream_index_isSet = false;
    m_audio_stream_index_isValid = false;

    m_auto_open_live_stream_isSet = false;
    m_auto_open_live_stream_isValid = false;

    m_device_profile_isSet = false;
    m_device_profile_isValid = false;

    m_enable_direct_play_isSet = false;
    m_enable_direct_play_isValid = false;

    m_enable_direct_stream_isSet = false;
    m_enable_direct_stream_isValid = false;

    m_enable_transcoding_isSet = false;
    m_enable_transcoding_isValid = false;

    m_live_stream_id_isSet = false;
    m_live_stream_id_isValid = false;

    m_max_audio_channels_isSet = false;
    m_max_audio_channels_isValid = false;

    m_max_streaming_bitrate_isSet = false;
    m_max_streaming_bitrate_isValid = false;

    m_media_source_id_isSet = false;
    m_media_source_id_isValid = false;

    m_start_time_ticks_isSet = false;
    m_start_time_ticks_isValid = false;

    m_subtitle_stream_index_isSet = false;
    m_subtitle_stream_index_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIPlaybackInfoDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaybackInfoDto::fromJsonObject(QJsonObject json) {

    m_allow_audio_stream_copy_isValid = ::OpenAPI::fromJsonValue(m_allow_audio_stream_copy, json[QString("AllowAudioStreamCopy")]);
    m_allow_audio_stream_copy_isSet = !json[QString("AllowAudioStreamCopy")].isNull() && m_allow_audio_stream_copy_isValid;

    m_allow_video_stream_copy_isValid = ::OpenAPI::fromJsonValue(m_allow_video_stream_copy, json[QString("AllowVideoStreamCopy")]);
    m_allow_video_stream_copy_isSet = !json[QString("AllowVideoStreamCopy")].isNull() && m_allow_video_stream_copy_isValid;

    m_audio_stream_index_isValid = ::OpenAPI::fromJsonValue(m_audio_stream_index, json[QString("AudioStreamIndex")]);
    m_audio_stream_index_isSet = !json[QString("AudioStreamIndex")].isNull() && m_audio_stream_index_isValid;

    m_auto_open_live_stream_isValid = ::OpenAPI::fromJsonValue(m_auto_open_live_stream, json[QString("AutoOpenLiveStream")]);
    m_auto_open_live_stream_isSet = !json[QString("AutoOpenLiveStream")].isNull() && m_auto_open_live_stream_isValid;

    m_device_profile_isValid = ::OpenAPI::fromJsonValue(m_device_profile, json[QString("DeviceProfile")]);
    m_device_profile_isSet = !json[QString("DeviceProfile")].isNull() && m_device_profile_isValid;

    m_enable_direct_play_isValid = ::OpenAPI::fromJsonValue(m_enable_direct_play, json[QString("EnableDirectPlay")]);
    m_enable_direct_play_isSet = !json[QString("EnableDirectPlay")].isNull() && m_enable_direct_play_isValid;

    m_enable_direct_stream_isValid = ::OpenAPI::fromJsonValue(m_enable_direct_stream, json[QString("EnableDirectStream")]);
    m_enable_direct_stream_isSet = !json[QString("EnableDirectStream")].isNull() && m_enable_direct_stream_isValid;

    m_enable_transcoding_isValid = ::OpenAPI::fromJsonValue(m_enable_transcoding, json[QString("EnableTranscoding")]);
    m_enable_transcoding_isSet = !json[QString("EnableTranscoding")].isNull() && m_enable_transcoding_isValid;

    m_live_stream_id_isValid = ::OpenAPI::fromJsonValue(m_live_stream_id, json[QString("LiveStreamId")]);
    m_live_stream_id_isSet = !json[QString("LiveStreamId")].isNull() && m_live_stream_id_isValid;

    m_max_audio_channels_isValid = ::OpenAPI::fromJsonValue(m_max_audio_channels, json[QString("MaxAudioChannels")]);
    m_max_audio_channels_isSet = !json[QString("MaxAudioChannels")].isNull() && m_max_audio_channels_isValid;

    m_max_streaming_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_streaming_bitrate, json[QString("MaxStreamingBitrate")]);
    m_max_streaming_bitrate_isSet = !json[QString("MaxStreamingBitrate")].isNull() && m_max_streaming_bitrate_isValid;

    m_media_source_id_isValid = ::OpenAPI::fromJsonValue(m_media_source_id, json[QString("MediaSourceId")]);
    m_media_source_id_isSet = !json[QString("MediaSourceId")].isNull() && m_media_source_id_isValid;

    m_start_time_ticks_isValid = ::OpenAPI::fromJsonValue(m_start_time_ticks, json[QString("StartTimeTicks")]);
    m_start_time_ticks_isSet = !json[QString("StartTimeTicks")].isNull() && m_start_time_ticks_isValid;

    m_subtitle_stream_index_isValid = ::OpenAPI::fromJsonValue(m_subtitle_stream_index, json[QString("SubtitleStreamIndex")]);
    m_subtitle_stream_index_isSet = !json[QString("SubtitleStreamIndex")].isNull() && m_subtitle_stream_index_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIPlaybackInfoDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaybackInfoDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_audio_stream_copy_isSet) {
        obj.insert(QString("AllowAudioStreamCopy"), ::OpenAPI::toJsonValue(m_allow_audio_stream_copy));
    }
    if (m_allow_video_stream_copy_isSet) {
        obj.insert(QString("AllowVideoStreamCopy"), ::OpenAPI::toJsonValue(m_allow_video_stream_copy));
    }
    if (m_audio_stream_index_isSet) {
        obj.insert(QString("AudioStreamIndex"), ::OpenAPI::toJsonValue(m_audio_stream_index));
    }
    if (m_auto_open_live_stream_isSet) {
        obj.insert(QString("AutoOpenLiveStream"), ::OpenAPI::toJsonValue(m_auto_open_live_stream));
    }
    if (m_device_profile.isSet()) {
        obj.insert(QString("DeviceProfile"), ::OpenAPI::toJsonValue(m_device_profile));
    }
    if (m_enable_direct_play_isSet) {
        obj.insert(QString("EnableDirectPlay"), ::OpenAPI::toJsonValue(m_enable_direct_play));
    }
    if (m_enable_direct_stream_isSet) {
        obj.insert(QString("EnableDirectStream"), ::OpenAPI::toJsonValue(m_enable_direct_stream));
    }
    if (m_enable_transcoding_isSet) {
        obj.insert(QString("EnableTranscoding"), ::OpenAPI::toJsonValue(m_enable_transcoding));
    }
    if (m_live_stream_id_isSet) {
        obj.insert(QString("LiveStreamId"), ::OpenAPI::toJsonValue(m_live_stream_id));
    }
    if (m_max_audio_channels_isSet) {
        obj.insert(QString("MaxAudioChannels"), ::OpenAPI::toJsonValue(m_max_audio_channels));
    }
    if (m_max_streaming_bitrate_isSet) {
        obj.insert(QString("MaxStreamingBitrate"), ::OpenAPI::toJsonValue(m_max_streaming_bitrate));
    }
    if (m_media_source_id_isSet) {
        obj.insert(QString("MediaSourceId"), ::OpenAPI::toJsonValue(m_media_source_id));
    }
    if (m_start_time_ticks_isSet) {
        obj.insert(QString("StartTimeTicks"), ::OpenAPI::toJsonValue(m_start_time_ticks));
    }
    if (m_subtitle_stream_index_isSet) {
        obj.insert(QString("SubtitleStreamIndex"), ::OpenAPI::toJsonValue(m_subtitle_stream_index));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAIPlaybackInfoDto::isAllowAudioStreamCopy() const {
    return m_allow_audio_stream_copy;
}
void OAIPlaybackInfoDto::setAllowAudioStreamCopy(const bool &allow_audio_stream_copy) {
    m_allow_audio_stream_copy = allow_audio_stream_copy;
    m_allow_audio_stream_copy_isSet = true;
}

bool OAIPlaybackInfoDto::is_allow_audio_stream_copy_Set() const{
    return m_allow_audio_stream_copy_isSet;
}

bool OAIPlaybackInfoDto::is_allow_audio_stream_copy_Valid() const{
    return m_allow_audio_stream_copy_isValid;
}

bool OAIPlaybackInfoDto::isAllowVideoStreamCopy() const {
    return m_allow_video_stream_copy;
}
void OAIPlaybackInfoDto::setAllowVideoStreamCopy(const bool &allow_video_stream_copy) {
    m_allow_video_stream_copy = allow_video_stream_copy;
    m_allow_video_stream_copy_isSet = true;
}

bool OAIPlaybackInfoDto::is_allow_video_stream_copy_Set() const{
    return m_allow_video_stream_copy_isSet;
}

bool OAIPlaybackInfoDto::is_allow_video_stream_copy_Valid() const{
    return m_allow_video_stream_copy_isValid;
}

qint32 OAIPlaybackInfoDto::getAudioStreamIndex() const {
    return m_audio_stream_index;
}
void OAIPlaybackInfoDto::setAudioStreamIndex(const qint32 &audio_stream_index) {
    m_audio_stream_index = audio_stream_index;
    m_audio_stream_index_isSet = true;
}

bool OAIPlaybackInfoDto::is_audio_stream_index_Set() const{
    return m_audio_stream_index_isSet;
}

bool OAIPlaybackInfoDto::is_audio_stream_index_Valid() const{
    return m_audio_stream_index_isValid;
}

bool OAIPlaybackInfoDto::isAutoOpenLiveStream() const {
    return m_auto_open_live_stream;
}
void OAIPlaybackInfoDto::setAutoOpenLiveStream(const bool &auto_open_live_stream) {
    m_auto_open_live_stream = auto_open_live_stream;
    m_auto_open_live_stream_isSet = true;
}

bool OAIPlaybackInfoDto::is_auto_open_live_stream_Set() const{
    return m_auto_open_live_stream_isSet;
}

bool OAIPlaybackInfoDto::is_auto_open_live_stream_Valid() const{
    return m_auto_open_live_stream_isValid;
}

OAIDeviceProfile OAIPlaybackInfoDto::getDeviceProfile() const {
    return m_device_profile;
}
void OAIPlaybackInfoDto::setDeviceProfile(const OAIDeviceProfile &device_profile) {
    m_device_profile = device_profile;
    m_device_profile_isSet = true;
}

bool OAIPlaybackInfoDto::is_device_profile_Set() const{
    return m_device_profile_isSet;
}

bool OAIPlaybackInfoDto::is_device_profile_Valid() const{
    return m_device_profile_isValid;
}

bool OAIPlaybackInfoDto::isEnableDirectPlay() const {
    return m_enable_direct_play;
}
void OAIPlaybackInfoDto::setEnableDirectPlay(const bool &enable_direct_play) {
    m_enable_direct_play = enable_direct_play;
    m_enable_direct_play_isSet = true;
}

bool OAIPlaybackInfoDto::is_enable_direct_play_Set() const{
    return m_enable_direct_play_isSet;
}

bool OAIPlaybackInfoDto::is_enable_direct_play_Valid() const{
    return m_enable_direct_play_isValid;
}

bool OAIPlaybackInfoDto::isEnableDirectStream() const {
    return m_enable_direct_stream;
}
void OAIPlaybackInfoDto::setEnableDirectStream(const bool &enable_direct_stream) {
    m_enable_direct_stream = enable_direct_stream;
    m_enable_direct_stream_isSet = true;
}

bool OAIPlaybackInfoDto::is_enable_direct_stream_Set() const{
    return m_enable_direct_stream_isSet;
}

bool OAIPlaybackInfoDto::is_enable_direct_stream_Valid() const{
    return m_enable_direct_stream_isValid;
}

bool OAIPlaybackInfoDto::isEnableTranscoding() const {
    return m_enable_transcoding;
}
void OAIPlaybackInfoDto::setEnableTranscoding(const bool &enable_transcoding) {
    m_enable_transcoding = enable_transcoding;
    m_enable_transcoding_isSet = true;
}

bool OAIPlaybackInfoDto::is_enable_transcoding_Set() const{
    return m_enable_transcoding_isSet;
}

bool OAIPlaybackInfoDto::is_enable_transcoding_Valid() const{
    return m_enable_transcoding_isValid;
}

QString OAIPlaybackInfoDto::getLiveStreamId() const {
    return m_live_stream_id;
}
void OAIPlaybackInfoDto::setLiveStreamId(const QString &live_stream_id) {
    m_live_stream_id = live_stream_id;
    m_live_stream_id_isSet = true;
}

bool OAIPlaybackInfoDto::is_live_stream_id_Set() const{
    return m_live_stream_id_isSet;
}

bool OAIPlaybackInfoDto::is_live_stream_id_Valid() const{
    return m_live_stream_id_isValid;
}

qint32 OAIPlaybackInfoDto::getMaxAudioChannels() const {
    return m_max_audio_channels;
}
void OAIPlaybackInfoDto::setMaxAudioChannels(const qint32 &max_audio_channels) {
    m_max_audio_channels = max_audio_channels;
    m_max_audio_channels_isSet = true;
}

bool OAIPlaybackInfoDto::is_max_audio_channels_Set() const{
    return m_max_audio_channels_isSet;
}

bool OAIPlaybackInfoDto::is_max_audio_channels_Valid() const{
    return m_max_audio_channels_isValid;
}

qint32 OAIPlaybackInfoDto::getMaxStreamingBitrate() const {
    return m_max_streaming_bitrate;
}
void OAIPlaybackInfoDto::setMaxStreamingBitrate(const qint32 &max_streaming_bitrate) {
    m_max_streaming_bitrate = max_streaming_bitrate;
    m_max_streaming_bitrate_isSet = true;
}

bool OAIPlaybackInfoDto::is_max_streaming_bitrate_Set() const{
    return m_max_streaming_bitrate_isSet;
}

bool OAIPlaybackInfoDto::is_max_streaming_bitrate_Valid() const{
    return m_max_streaming_bitrate_isValid;
}

QString OAIPlaybackInfoDto::getMediaSourceId() const {
    return m_media_source_id;
}
void OAIPlaybackInfoDto::setMediaSourceId(const QString &media_source_id) {
    m_media_source_id = media_source_id;
    m_media_source_id_isSet = true;
}

bool OAIPlaybackInfoDto::is_media_source_id_Set() const{
    return m_media_source_id_isSet;
}

bool OAIPlaybackInfoDto::is_media_source_id_Valid() const{
    return m_media_source_id_isValid;
}

qint64 OAIPlaybackInfoDto::getStartTimeTicks() const {
    return m_start_time_ticks;
}
void OAIPlaybackInfoDto::setStartTimeTicks(const qint64 &start_time_ticks) {
    m_start_time_ticks = start_time_ticks;
    m_start_time_ticks_isSet = true;
}

bool OAIPlaybackInfoDto::is_start_time_ticks_Set() const{
    return m_start_time_ticks_isSet;
}

bool OAIPlaybackInfoDto::is_start_time_ticks_Valid() const{
    return m_start_time_ticks_isValid;
}

qint32 OAIPlaybackInfoDto::getSubtitleStreamIndex() const {
    return m_subtitle_stream_index;
}
void OAIPlaybackInfoDto::setSubtitleStreamIndex(const qint32 &subtitle_stream_index) {
    m_subtitle_stream_index = subtitle_stream_index;
    m_subtitle_stream_index_isSet = true;
}

bool OAIPlaybackInfoDto::is_subtitle_stream_index_Set() const{
    return m_subtitle_stream_index_isSet;
}

bool OAIPlaybackInfoDto::is_subtitle_stream_index_Valid() const{
    return m_subtitle_stream_index_isValid;
}

QString OAIPlaybackInfoDto::getUserId() const {
    return m_user_id;
}
void OAIPlaybackInfoDto::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPlaybackInfoDto::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPlaybackInfoDto::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIPlaybackInfoDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_audio_stream_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_video_stream_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_stream_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_open_live_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_direct_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_direct_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_transcoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_audio_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_streaming_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_stream_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaybackInfoDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
