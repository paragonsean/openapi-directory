/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserPolicy.h
 *
 * 
 */

#ifndef OAIUserPolicy_H
#define OAIUserPolicy_H

#include <QJsonObject>

#include "OAIAccessSchedule.h"
#include "OAISyncPlayUserAccessType.h"
#include "OAIUnratedItem.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccessSchedule;

class OAIUserPolicy : public OAIObject {
public:
    OAIUserPolicy();
    OAIUserPolicy(QString json);
    ~OAIUserPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAccessSchedule> getAccessSchedules() const;
    void setAccessSchedules(const QList<OAIAccessSchedule> &access_schedules);
    bool is_access_schedules_Set() const;
    bool is_access_schedules_Valid() const;

    QString getAuthenticationProviderId() const;
    void setAuthenticationProviderId(const QString &authentication_provider_id);
    bool is_authentication_provider_id_Set() const;
    bool is_authentication_provider_id_Valid() const;

    QList<OAIUnratedItem> getBlockUnratedItems() const;
    void setBlockUnratedItems(const QList<OAIUnratedItem> &block_unrated_items);
    bool is_block_unrated_items_Set() const;
    bool is_block_unrated_items_Valid() const;

    QList<QString> getBlockedChannels() const;
    void setBlockedChannels(const QList<QString> &blocked_channels);
    bool is_blocked_channels_Set() const;
    bool is_blocked_channels_Valid() const;

    QList<QString> getBlockedMediaFolders() const;
    void setBlockedMediaFolders(const QList<QString> &blocked_media_folders);
    bool is_blocked_media_folders_Set() const;
    bool is_blocked_media_folders_Valid() const;

    QList<QString> getBlockedTags() const;
    void setBlockedTags(const QList<QString> &blocked_tags);
    bool is_blocked_tags_Set() const;
    bool is_blocked_tags_Valid() const;

    bool isEnableAllChannels() const;
    void setEnableAllChannels(const bool &enable_all_channels);
    bool is_enable_all_channels_Set() const;
    bool is_enable_all_channels_Valid() const;

    bool isEnableAllDevices() const;
    void setEnableAllDevices(const bool &enable_all_devices);
    bool is_enable_all_devices_Set() const;
    bool is_enable_all_devices_Valid() const;

    bool isEnableAllFolders() const;
    void setEnableAllFolders(const bool &enable_all_folders);
    bool is_enable_all_folders_Set() const;
    bool is_enable_all_folders_Valid() const;

    bool isEnableAudioPlaybackTranscoding() const;
    void setEnableAudioPlaybackTranscoding(const bool &enable_audio_playback_transcoding);
    bool is_enable_audio_playback_transcoding_Set() const;
    bool is_enable_audio_playback_transcoding_Valid() const;

    bool isEnableContentDeletion() const;
    void setEnableContentDeletion(const bool &enable_content_deletion);
    bool is_enable_content_deletion_Set() const;
    bool is_enable_content_deletion_Valid() const;

    QList<QString> getEnableContentDeletionFromFolders() const;
    void setEnableContentDeletionFromFolders(const QList<QString> &enable_content_deletion_from_folders);
    bool is_enable_content_deletion_from_folders_Set() const;
    bool is_enable_content_deletion_from_folders_Valid() const;

    bool isEnableContentDownloading() const;
    void setEnableContentDownloading(const bool &enable_content_downloading);
    bool is_enable_content_downloading_Set() const;
    bool is_enable_content_downloading_Valid() const;

    bool isEnableLiveTvAccess() const;
    void setEnableLiveTvAccess(const bool &enable_live_tv_access);
    bool is_enable_live_tv_access_Set() const;
    bool is_enable_live_tv_access_Valid() const;

    bool isEnableLiveTvManagement() const;
    void setEnableLiveTvManagement(const bool &enable_live_tv_management);
    bool is_enable_live_tv_management_Set() const;
    bool is_enable_live_tv_management_Valid() const;

    bool isEnableMediaConversion() const;
    void setEnableMediaConversion(const bool &enable_media_conversion);
    bool is_enable_media_conversion_Set() const;
    bool is_enable_media_conversion_Valid() const;

    bool isEnableMediaPlayback() const;
    void setEnableMediaPlayback(const bool &enable_media_playback);
    bool is_enable_media_playback_Set() const;
    bool is_enable_media_playback_Valid() const;

    bool isEnablePlaybackRemuxing() const;
    void setEnablePlaybackRemuxing(const bool &enable_playback_remuxing);
    bool is_enable_playback_remuxing_Set() const;
    bool is_enable_playback_remuxing_Valid() const;

    bool isEnablePublicSharing() const;
    void setEnablePublicSharing(const bool &enable_public_sharing);
    bool is_enable_public_sharing_Set() const;
    bool is_enable_public_sharing_Valid() const;

    bool isEnableRemoteAccess() const;
    void setEnableRemoteAccess(const bool &enable_remote_access);
    bool is_enable_remote_access_Set() const;
    bool is_enable_remote_access_Valid() const;

    bool isEnableRemoteControlOfOtherUsers() const;
    void setEnableRemoteControlOfOtherUsers(const bool &enable_remote_control_of_other_users);
    bool is_enable_remote_control_of_other_users_Set() const;
    bool is_enable_remote_control_of_other_users_Valid() const;

    bool isEnableSharedDeviceControl() const;
    void setEnableSharedDeviceControl(const bool &enable_shared_device_control);
    bool is_enable_shared_device_control_Set() const;
    bool is_enable_shared_device_control_Valid() const;

    bool isEnableSyncTranscoding() const;
    void setEnableSyncTranscoding(const bool &enable_sync_transcoding);
    bool is_enable_sync_transcoding_Set() const;
    bool is_enable_sync_transcoding_Valid() const;

    bool isEnableUserPreferenceAccess() const;
    void setEnableUserPreferenceAccess(const bool &enable_user_preference_access);
    bool is_enable_user_preference_access_Set() const;
    bool is_enable_user_preference_access_Valid() const;

    bool isEnableVideoPlaybackTranscoding() const;
    void setEnableVideoPlaybackTranscoding(const bool &enable_video_playback_transcoding);
    bool is_enable_video_playback_transcoding_Set() const;
    bool is_enable_video_playback_transcoding_Valid() const;

    QList<QString> getEnabledChannels() const;
    void setEnabledChannels(const QList<QString> &enabled_channels);
    bool is_enabled_channels_Set() const;
    bool is_enabled_channels_Valid() const;

    QList<QString> getEnabledDevices() const;
    void setEnabledDevices(const QList<QString> &enabled_devices);
    bool is_enabled_devices_Set() const;
    bool is_enabled_devices_Valid() const;

    QList<QString> getEnabledFolders() const;
    void setEnabledFolders(const QList<QString> &enabled_folders);
    bool is_enabled_folders_Set() const;
    bool is_enabled_folders_Valid() const;

    bool isForceRemoteSourceTranscoding() const;
    void setForceRemoteSourceTranscoding(const bool &force_remote_source_transcoding);
    bool is_force_remote_source_transcoding_Set() const;
    bool is_force_remote_source_transcoding_Valid() const;

    qint32 getInvalidLoginAttemptCount() const;
    void setInvalidLoginAttemptCount(const qint32 &invalid_login_attempt_count);
    bool is_invalid_login_attempt_count_Set() const;
    bool is_invalid_login_attempt_count_Valid() const;

    bool isIsAdministrator() const;
    void setIsAdministrator(const bool &is_administrator);
    bool is_is_administrator_Set() const;
    bool is_is_administrator_Valid() const;

    bool isIsDisabled() const;
    void setIsDisabled(const bool &is_disabled);
    bool is_is_disabled_Set() const;
    bool is_is_disabled_Valid() const;

    bool isIsHidden() const;
    void setIsHidden(const bool &is_hidden);
    bool is_is_hidden_Set() const;
    bool is_is_hidden_Valid() const;

    qint32 getLoginAttemptsBeforeLockout() const;
    void setLoginAttemptsBeforeLockout(const qint32 &login_attempts_before_lockout);
    bool is_login_attempts_before_lockout_Set() const;
    bool is_login_attempts_before_lockout_Valid() const;

    qint32 getMaxActiveSessions() const;
    void setMaxActiveSessions(const qint32 &max_active_sessions);
    bool is_max_active_sessions_Set() const;
    bool is_max_active_sessions_Valid() const;

    qint32 getMaxParentalRating() const;
    void setMaxParentalRating(const qint32 &max_parental_rating);
    bool is_max_parental_rating_Set() const;
    bool is_max_parental_rating_Valid() const;

    QString getPasswordResetProviderId() const;
    void setPasswordResetProviderId(const QString &password_reset_provider_id);
    bool is_password_reset_provider_id_Set() const;
    bool is_password_reset_provider_id_Valid() const;

    qint32 getRemoteClientBitrateLimit() const;
    void setRemoteClientBitrateLimit(const qint32 &remote_client_bitrate_limit);
    bool is_remote_client_bitrate_limit_Set() const;
    bool is_remote_client_bitrate_limit_Valid() const;

    OAISyncPlayUserAccessType getSyncPlayAccess() const;
    void setSyncPlayAccess(const OAISyncPlayUserAccessType &sync_play_access);
    bool is_sync_play_access_Set() const;
    bool is_sync_play_access_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAccessSchedule> m_access_schedules;
    bool m_access_schedules_isSet;
    bool m_access_schedules_isValid;

    QString m_authentication_provider_id;
    bool m_authentication_provider_id_isSet;
    bool m_authentication_provider_id_isValid;

    QList<OAIUnratedItem> m_block_unrated_items;
    bool m_block_unrated_items_isSet;
    bool m_block_unrated_items_isValid;

    QList<QString> m_blocked_channels;
    bool m_blocked_channels_isSet;
    bool m_blocked_channels_isValid;

    QList<QString> m_blocked_media_folders;
    bool m_blocked_media_folders_isSet;
    bool m_blocked_media_folders_isValid;

    QList<QString> m_blocked_tags;
    bool m_blocked_tags_isSet;
    bool m_blocked_tags_isValid;

    bool m_enable_all_channels;
    bool m_enable_all_channels_isSet;
    bool m_enable_all_channels_isValid;

    bool m_enable_all_devices;
    bool m_enable_all_devices_isSet;
    bool m_enable_all_devices_isValid;

    bool m_enable_all_folders;
    bool m_enable_all_folders_isSet;
    bool m_enable_all_folders_isValid;

    bool m_enable_audio_playback_transcoding;
    bool m_enable_audio_playback_transcoding_isSet;
    bool m_enable_audio_playback_transcoding_isValid;

    bool m_enable_content_deletion;
    bool m_enable_content_deletion_isSet;
    bool m_enable_content_deletion_isValid;

    QList<QString> m_enable_content_deletion_from_folders;
    bool m_enable_content_deletion_from_folders_isSet;
    bool m_enable_content_deletion_from_folders_isValid;

    bool m_enable_content_downloading;
    bool m_enable_content_downloading_isSet;
    bool m_enable_content_downloading_isValid;

    bool m_enable_live_tv_access;
    bool m_enable_live_tv_access_isSet;
    bool m_enable_live_tv_access_isValid;

    bool m_enable_live_tv_management;
    bool m_enable_live_tv_management_isSet;
    bool m_enable_live_tv_management_isValid;

    bool m_enable_media_conversion;
    bool m_enable_media_conversion_isSet;
    bool m_enable_media_conversion_isValid;

    bool m_enable_media_playback;
    bool m_enable_media_playback_isSet;
    bool m_enable_media_playback_isValid;

    bool m_enable_playback_remuxing;
    bool m_enable_playback_remuxing_isSet;
    bool m_enable_playback_remuxing_isValid;

    bool m_enable_public_sharing;
    bool m_enable_public_sharing_isSet;
    bool m_enable_public_sharing_isValid;

    bool m_enable_remote_access;
    bool m_enable_remote_access_isSet;
    bool m_enable_remote_access_isValid;

    bool m_enable_remote_control_of_other_users;
    bool m_enable_remote_control_of_other_users_isSet;
    bool m_enable_remote_control_of_other_users_isValid;

    bool m_enable_shared_device_control;
    bool m_enable_shared_device_control_isSet;
    bool m_enable_shared_device_control_isValid;

    bool m_enable_sync_transcoding;
    bool m_enable_sync_transcoding_isSet;
    bool m_enable_sync_transcoding_isValid;

    bool m_enable_user_preference_access;
    bool m_enable_user_preference_access_isSet;
    bool m_enable_user_preference_access_isValid;

    bool m_enable_video_playback_transcoding;
    bool m_enable_video_playback_transcoding_isSet;
    bool m_enable_video_playback_transcoding_isValid;

    QList<QString> m_enabled_channels;
    bool m_enabled_channels_isSet;
    bool m_enabled_channels_isValid;

    QList<QString> m_enabled_devices;
    bool m_enabled_devices_isSet;
    bool m_enabled_devices_isValid;

    QList<QString> m_enabled_folders;
    bool m_enabled_folders_isSet;
    bool m_enabled_folders_isValid;

    bool m_force_remote_source_transcoding;
    bool m_force_remote_source_transcoding_isSet;
    bool m_force_remote_source_transcoding_isValid;

    qint32 m_invalid_login_attempt_count;
    bool m_invalid_login_attempt_count_isSet;
    bool m_invalid_login_attempt_count_isValid;

    bool m_is_administrator;
    bool m_is_administrator_isSet;
    bool m_is_administrator_isValid;

    bool m_is_disabled;
    bool m_is_disabled_isSet;
    bool m_is_disabled_isValid;

    bool m_is_hidden;
    bool m_is_hidden_isSet;
    bool m_is_hidden_isValid;

    qint32 m_login_attempts_before_lockout;
    bool m_login_attempts_before_lockout_isSet;
    bool m_login_attempts_before_lockout_isValid;

    qint32 m_max_active_sessions;
    bool m_max_active_sessions_isSet;
    bool m_max_active_sessions_isValid;

    qint32 m_max_parental_rating;
    bool m_max_parental_rating_isSet;
    bool m_max_parental_rating_isValid;

    QString m_password_reset_provider_id;
    bool m_password_reset_provider_id_isSet;
    bool m_password_reset_provider_id_isValid;

    qint32 m_remote_client_bitrate_limit;
    bool m_remote_client_bitrate_limit_isSet;
    bool m_remote_client_bitrate_limit_isValid;

    OAISyncPlayUserAccessType m_sync_play_access;
    bool m_sync_play_access_isSet;
    bool m_sync_play_access_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserPolicy)

#endif // OAIUserPolicy_H
