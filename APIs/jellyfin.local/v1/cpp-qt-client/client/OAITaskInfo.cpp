/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskInfo::OAITaskInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskInfo::OAITaskInfo() {
    this->initializeModel();
}

OAITaskInfo::~OAITaskInfo() {}

void OAITaskInfo::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_current_progress_percentage_isSet = false;
    m_current_progress_percentage_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_hidden_isSet = false;
    m_is_hidden_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_execution_result_isSet = false;
    m_last_execution_result_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_triggers_isSet = false;
    m_triggers_isValid = false;
}

void OAITaskInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskInfo::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_current_progress_percentage_isValid = ::OpenAPI::fromJsonValue(m_current_progress_percentage, json[QString("CurrentProgressPercentage")]);
    m_current_progress_percentage_isSet = !json[QString("CurrentProgressPercentage")].isNull() && m_current_progress_percentage_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_hidden, json[QString("IsHidden")]);
    m_is_hidden_isSet = !json[QString("IsHidden")].isNull() && m_is_hidden_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_last_execution_result_isValid = ::OpenAPI::fromJsonValue(m_last_execution_result, json[QString("LastExecutionResult")]);
    m_last_execution_result_isSet = !json[QString("LastExecutionResult")].isNull() && m_last_execution_result_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_triggers_isValid = ::OpenAPI::fromJsonValue(m_triggers, json[QString("Triggers")]);
    m_triggers_isSet = !json[QString("Triggers")].isNull() && m_triggers_isValid;
}

QString OAITaskInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_current_progress_percentage_isSet) {
        obj.insert(QString("CurrentProgressPercentage"), ::OpenAPI::toJsonValue(m_current_progress_percentage));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_hidden_isSet) {
        obj.insert(QString("IsHidden"), ::OpenAPI::toJsonValue(m_is_hidden));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_execution_result.isSet()) {
        obj.insert(QString("LastExecutionResult"), ::OpenAPI::toJsonValue(m_last_execution_result));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_triggers.size() > 0) {
        obj.insert(QString("Triggers"), ::OpenAPI::toJsonValue(m_triggers));
    }
    return obj;
}

QString OAITaskInfo::getCategory() const {
    return m_category;
}
void OAITaskInfo::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITaskInfo::is_category_Set() const{
    return m_category_isSet;
}

bool OAITaskInfo::is_category_Valid() const{
    return m_category_isValid;
}

double OAITaskInfo::getCurrentProgressPercentage() const {
    return m_current_progress_percentage;
}
void OAITaskInfo::setCurrentProgressPercentage(const double &current_progress_percentage) {
    m_current_progress_percentage = current_progress_percentage;
    m_current_progress_percentage_isSet = true;
}

bool OAITaskInfo::is_current_progress_percentage_Set() const{
    return m_current_progress_percentage_isSet;
}

bool OAITaskInfo::is_current_progress_percentage_Valid() const{
    return m_current_progress_percentage_isValid;
}

QString OAITaskInfo::getDescription() const {
    return m_description;
}
void OAITaskInfo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITaskInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAITaskInfo::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITaskInfo::getId() const {
    return m_id;
}
void OAITaskInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITaskInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAITaskInfo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITaskInfo::isIsHidden() const {
    return m_is_hidden;
}
void OAITaskInfo::setIsHidden(const bool &is_hidden) {
    m_is_hidden = is_hidden;
    m_is_hidden_isSet = true;
}

bool OAITaskInfo::is_is_hidden_Set() const{
    return m_is_hidden_isSet;
}

bool OAITaskInfo::is_is_hidden_Valid() const{
    return m_is_hidden_isValid;
}

QString OAITaskInfo::getKey() const {
    return m_key;
}
void OAITaskInfo::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITaskInfo::is_key_Set() const{
    return m_key_isSet;
}

bool OAITaskInfo::is_key_Valid() const{
    return m_key_isValid;
}

OAITaskResult OAITaskInfo::getLastExecutionResult() const {
    return m_last_execution_result;
}
void OAITaskInfo::setLastExecutionResult(const OAITaskResult &last_execution_result) {
    m_last_execution_result = last_execution_result;
    m_last_execution_result_isSet = true;
}

bool OAITaskInfo::is_last_execution_result_Set() const{
    return m_last_execution_result_isSet;
}

bool OAITaskInfo::is_last_execution_result_Valid() const{
    return m_last_execution_result_isValid;
}

QString OAITaskInfo::getName() const {
    return m_name;
}
void OAITaskInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaskInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaskInfo::is_name_Valid() const{
    return m_name_isValid;
}

OAITaskState OAITaskInfo::getState() const {
    return m_state;
}
void OAITaskInfo::setState(const OAITaskState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITaskInfo::is_state_Set() const{
    return m_state_isSet;
}

bool OAITaskInfo::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAITaskTriggerInfo> OAITaskInfo::getTriggers() const {
    return m_triggers;
}
void OAITaskInfo::setTriggers(const QList<OAITaskTriggerInfo> &triggers) {
    m_triggers = triggers;
    m_triggers_isSet = true;
}

bool OAITaskInfo::is_triggers_Set() const{
    return m_triggers_isSet;
}

bool OAITaskInfo::is_triggers_Valid() const{
    return m_triggers_isValid;
}

bool OAITaskInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_execution_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
