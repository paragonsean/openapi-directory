/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMovePlaylistItemRequestDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMovePlaylistItemRequestDto::OAIMovePlaylistItemRequestDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMovePlaylistItemRequestDto::OAIMovePlaylistItemRequestDto() {
    this->initializeModel();
}

OAIMovePlaylistItemRequestDto::~OAIMovePlaylistItemRequestDto() {}

void OAIMovePlaylistItemRequestDto::initializeModel() {

    m_new_index_isSet = false;
    m_new_index_isValid = false;

    m_playlist_item_id_isSet = false;
    m_playlist_item_id_isValid = false;
}

void OAIMovePlaylistItemRequestDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMovePlaylistItemRequestDto::fromJsonObject(QJsonObject json) {

    m_new_index_isValid = ::OpenAPI::fromJsonValue(m_new_index, json[QString("NewIndex")]);
    m_new_index_isSet = !json[QString("NewIndex")].isNull() && m_new_index_isValid;

    m_playlist_item_id_isValid = ::OpenAPI::fromJsonValue(m_playlist_item_id, json[QString("PlaylistItemId")]);
    m_playlist_item_id_isSet = !json[QString("PlaylistItemId")].isNull() && m_playlist_item_id_isValid;
}

QString OAIMovePlaylistItemRequestDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMovePlaylistItemRequestDto::asJsonObject() const {
    QJsonObject obj;
    if (m_new_index_isSet) {
        obj.insert(QString("NewIndex"), ::OpenAPI::toJsonValue(m_new_index));
    }
    if (m_playlist_item_id_isSet) {
        obj.insert(QString("PlaylistItemId"), ::OpenAPI::toJsonValue(m_playlist_item_id));
    }
    return obj;
}

qint32 OAIMovePlaylistItemRequestDto::getNewIndex() const {
    return m_new_index;
}
void OAIMovePlaylistItemRequestDto::setNewIndex(const qint32 &new_index) {
    m_new_index = new_index;
    m_new_index_isSet = true;
}

bool OAIMovePlaylistItemRequestDto::is_new_index_Set() const{
    return m_new_index_isSet;
}

bool OAIMovePlaylistItemRequestDto::is_new_index_Valid() const{
    return m_new_index_isValid;
}

QString OAIMovePlaylistItemRequestDto::getPlaylistItemId() const {
    return m_playlist_item_id;
}
void OAIMovePlaylistItemRequestDto::setPlaylistItemId(const QString &playlist_item_id) {
    m_playlist_item_id = playlist_item_id;
    m_playlist_item_id_isSet = true;
}

bool OAIMovePlaylistItemRequestDto::is_playlist_item_id_Set() const{
    return m_playlist_item_id_isSet;
}

bool OAIMovePlaylistItemRequestDto::is_playlist_item_id_Valid() const{
    return m_playlist_item_id_isValid;
}

bool OAIMovePlaylistItemRequestDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMovePlaylistItemRequestDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
