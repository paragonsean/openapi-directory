/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHlsSegmentApi_H
#define OAI_OAIHlsSegmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHlsSegmentApi : public QObject {
    Q_OBJECT

public:
    OAIHlsSegmentApi(const int timeOut = 0);
    ~OAIHlsSegmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  segment_id QString [required]
    */
    virtual void getHlsAudioSegmentLegacyAac(const QString &item_id, const QString &segment_id);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  segment_id QString [required]
    */
    virtual void getHlsAudioSegmentLegacyMp3(const QString &item_id, const QString &segment_id);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  playlist_id QString [required]
    */
    virtual void getHlsPlaylistLegacy(const QString &item_id, const QString &playlist_id);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  playlist_id QString [required]
    * @param[in]  segment_id QString [required]
    * @param[in]  segment_container QString [required]
    */
    virtual void getHlsVideoSegmentLegacy(const QString &item_id, const QString &playlist_id, const QString &segment_id, const QString &segment_container);

    /**
    * @param[in]  device_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    */
    virtual void stopEncodingProcess(const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getHlsAudioSegmentLegacyAacCallback(OAIHttpRequestWorker *worker);
    void getHlsAudioSegmentLegacyMp3Callback(OAIHttpRequestWorker *worker);
    void getHlsPlaylistLegacyCallback(OAIHttpRequestWorker *worker);
    void getHlsVideoSegmentLegacyCallback(OAIHttpRequestWorker *worker);
    void stopEncodingProcessCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getHlsAudioSegmentLegacyAacSignal(OAIHttpFileElement summary);
    void getHlsAudioSegmentLegacyMp3Signal(OAIHttpFileElement summary);
    void getHlsPlaylistLegacySignal(OAIHttpFileElement summary);
    void getHlsVideoSegmentLegacySignal(OAIHttpFileElement summary);
    void stopEncodingProcessSignal();


    void getHlsAudioSegmentLegacyAacSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getHlsAudioSegmentLegacyMp3SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getHlsPlaylistLegacySignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getHlsVideoSegmentLegacySignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void stopEncodingProcessSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getHlsAudioSegmentLegacyAacSignalError() instead")
    void getHlsAudioSegmentLegacyAacSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsAudioSegmentLegacyAacSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHlsAudioSegmentLegacyMp3SignalError() instead")
    void getHlsAudioSegmentLegacyMp3SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsAudioSegmentLegacyMp3SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHlsPlaylistLegacySignalError() instead")
    void getHlsPlaylistLegacySignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsPlaylistLegacySignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHlsVideoSegmentLegacySignalError() instead")
    void getHlsVideoSegmentLegacySignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsVideoSegmentLegacySignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopEncodingProcessSignalError() instead")
    void stopEncodingProcessSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stopEncodingProcessSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getHlsAudioSegmentLegacyAacSignalErrorFull() instead")
    void getHlsAudioSegmentLegacyAacSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsAudioSegmentLegacyAacSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHlsAudioSegmentLegacyMp3SignalErrorFull() instead")
    void getHlsAudioSegmentLegacyMp3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsAudioSegmentLegacyMp3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHlsPlaylistLegacySignalErrorFull() instead")
    void getHlsPlaylistLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsPlaylistLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHlsVideoSegmentLegacySignalErrorFull() instead")
    void getHlsVideoSegmentLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsVideoSegmentLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopEncodingProcessSignalErrorFull() instead")
    void stopEncodingProcessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopEncodingProcessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
