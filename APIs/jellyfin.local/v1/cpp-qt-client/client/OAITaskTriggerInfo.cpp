/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskTriggerInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskTriggerInfo::OAITaskTriggerInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskTriggerInfo::OAITaskTriggerInfo() {
    this->initializeModel();
}

OAITaskTriggerInfo::~OAITaskTriggerInfo() {}

void OAITaskTriggerInfo::initializeModel() {

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_interval_ticks_isSet = false;
    m_interval_ticks_isValid = false;

    m_max_runtime_ticks_isSet = false;
    m_max_runtime_ticks_isValid = false;

    m_time_of_day_ticks_isSet = false;
    m_time_of_day_ticks_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITaskTriggerInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskTriggerInfo::fromJsonObject(QJsonObject json) {

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("DayOfWeek")]);
    m_day_of_week_isSet = !json[QString("DayOfWeek")].isNull() && m_day_of_week_isValid;

    m_interval_ticks_isValid = ::OpenAPI::fromJsonValue(m_interval_ticks, json[QString("IntervalTicks")]);
    m_interval_ticks_isSet = !json[QString("IntervalTicks")].isNull() && m_interval_ticks_isValid;

    m_max_runtime_ticks_isValid = ::OpenAPI::fromJsonValue(m_max_runtime_ticks, json[QString("MaxRuntimeTicks")]);
    m_max_runtime_ticks_isSet = !json[QString("MaxRuntimeTicks")].isNull() && m_max_runtime_ticks_isValid;

    m_time_of_day_ticks_isValid = ::OpenAPI::fromJsonValue(m_time_of_day_ticks, json[QString("TimeOfDayTicks")]);
    m_time_of_day_ticks_isSet = !json[QString("TimeOfDayTicks")].isNull() && m_time_of_day_ticks_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAITaskTriggerInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskTriggerInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week.isSet()) {
        obj.insert(QString("DayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_interval_ticks_isSet) {
        obj.insert(QString("IntervalTicks"), ::OpenAPI::toJsonValue(m_interval_ticks));
    }
    if (m_max_runtime_ticks_isSet) {
        obj.insert(QString("MaxRuntimeTicks"), ::OpenAPI::toJsonValue(m_max_runtime_ticks));
    }
    if (m_time_of_day_ticks_isSet) {
        obj.insert(QString("TimeOfDayTicks"), ::OpenAPI::toJsonValue(m_time_of_day_ticks));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIDayOfWeek OAITaskTriggerInfo::getDayOfWeek() const {
    return m_day_of_week;
}
void OAITaskTriggerInfo::setDayOfWeek(const OAIDayOfWeek &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAITaskTriggerInfo::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAITaskTriggerInfo::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

qint64 OAITaskTriggerInfo::getIntervalTicks() const {
    return m_interval_ticks;
}
void OAITaskTriggerInfo::setIntervalTicks(const qint64 &interval_ticks) {
    m_interval_ticks = interval_ticks;
    m_interval_ticks_isSet = true;
}

bool OAITaskTriggerInfo::is_interval_ticks_Set() const{
    return m_interval_ticks_isSet;
}

bool OAITaskTriggerInfo::is_interval_ticks_Valid() const{
    return m_interval_ticks_isValid;
}

qint64 OAITaskTriggerInfo::getMaxRuntimeTicks() const {
    return m_max_runtime_ticks;
}
void OAITaskTriggerInfo::setMaxRuntimeTicks(const qint64 &max_runtime_ticks) {
    m_max_runtime_ticks = max_runtime_ticks;
    m_max_runtime_ticks_isSet = true;
}

bool OAITaskTriggerInfo::is_max_runtime_ticks_Set() const{
    return m_max_runtime_ticks_isSet;
}

bool OAITaskTriggerInfo::is_max_runtime_ticks_Valid() const{
    return m_max_runtime_ticks_isValid;
}

qint64 OAITaskTriggerInfo::getTimeOfDayTicks() const {
    return m_time_of_day_ticks;
}
void OAITaskTriggerInfo::setTimeOfDayTicks(const qint64 &time_of_day_ticks) {
    m_time_of_day_ticks = time_of_day_ticks;
    m_time_of_day_ticks_isSet = true;
}

bool OAITaskTriggerInfo::is_time_of_day_ticks_Set() const{
    return m_time_of_day_ticks_isSet;
}

bool OAITaskTriggerInfo::is_time_of_day_ticks_Valid() const{
    return m_time_of_day_ticks_isValid;
}

QString OAITaskTriggerInfo::getType() const {
    return m_type;
}
void OAITaskTriggerInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITaskTriggerInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAITaskTriggerInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITaskTriggerInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_runtime_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_day_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskTriggerInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
