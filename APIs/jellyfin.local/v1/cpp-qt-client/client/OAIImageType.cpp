/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageType::OAIImageType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageType::OAIImageType() {
    this->initializeModel();
}

OAIImageType::~OAIImageType() {}

void OAIImageType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIImageType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIImageType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Primary", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::PRIMARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Art", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::ART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Backdrop", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::BACKDROP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Banner", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::BANNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Logo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::LOGO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Thumb", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::THUMB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Disc", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::DISC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Box", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::BOX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Screenshot", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::SCREENSHOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Menu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::MENU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Chapter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::CHAPTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BoxRear", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::BOXREAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Profile", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageType::PROFILE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIImageType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIImageType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIImageType::PRIMARY:
            val = "Primary";
            break;
        case eOAIImageType::ART:
            val = "Art";
            break;
        case eOAIImageType::BACKDROP:
            val = "Backdrop";
            break;
        case eOAIImageType::BANNER:
            val = "Banner";
            break;
        case eOAIImageType::LOGO:
            val = "Logo";
            break;
        case eOAIImageType::THUMB:
            val = "Thumb";
            break;
        case eOAIImageType::DISC:
            val = "Disc";
            break;
        case eOAIImageType::BOX:
            val = "Box";
            break;
        case eOAIImageType::SCREENSHOT:
            val = "Screenshot";
            break;
        case eOAIImageType::MENU:
            val = "Menu";
            break;
        case eOAIImageType::CHAPTER:
            val = "Chapter";
            break;
        case eOAIImageType::BOXREAR:
            val = "BoxRear";
            break;
        case eOAIImageType::PROFILE:
            val = "Profile";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIImageType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIImageType::eOAIImageType OAIImageType::getValue() const {
    return m_value;
}

void OAIImageType::setValue(const OAIImageType::eOAIImageType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIImageType::isSet() const {
    
    return m_value_isSet;
}

bool OAIImageType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
