/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIItemLookupApi_H
#define OAI_OAIItemLookupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlbumInfoRemoteSearchQuery.h"
#include "OAIArtistInfoRemoteSearchQuery.h"
#include "OAIBookInfoRemoteSearchQuery.h"
#include "OAIBoxSetInfoRemoteSearchQuery.h"
#include "OAIExternalIdInfo.h"
#include "OAIHttpFileElement.h"
#include "OAIMovieInfoRemoteSearchQuery.h"
#include "OAIMusicVideoInfoRemoteSearchQuery.h"
#include "OAIPersonLookupInfoRemoteSearchQuery.h"
#include "OAIProblemDetails.h"
#include "OAIRemoteSearchResult.h"
#include "OAISeriesInfoRemoteSearchQuery.h"
#include "OAITrailerInfoRemoteSearchQuery.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIItemLookupApi : public QObject {
    Q_OBJECT

public:
    OAIItemLookupApi(const int timeOut = 0);
    ~OAIItemLookupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  oai_remote_search_result OAIRemoteSearchResult [required]
    * @param[in]  replace_all_images bool [optional]
    */
    virtual void applySearchCriteria(const QString &item_id, const OAIRemoteSearchResult &oai_remote_search_result, const ::OpenAPI::OptionalParam<bool> &replace_all_images = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_book_info_remote_search_query OAIBookInfoRemoteSearchQuery [required]
    */
    virtual void getBookRemoteSearchResults(const OAIBookInfoRemoteSearchQuery &oai_book_info_remote_search_query);

    /**
    * @param[in]  oai_box_set_info_remote_search_query OAIBoxSetInfoRemoteSearchQuery [required]
    */
    virtual void getBoxSetRemoteSearchResults(const OAIBoxSetInfoRemoteSearchQuery &oai_box_set_info_remote_search_query);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void getExternalIdInfos(const QString &item_id);

    /**
    * @param[in]  oai_movie_info_remote_search_query OAIMovieInfoRemoteSearchQuery [required]
    */
    virtual void getMovieRemoteSearchResults(const OAIMovieInfoRemoteSearchQuery &oai_movie_info_remote_search_query);

    /**
    * @param[in]  oai_album_info_remote_search_query OAIAlbumInfoRemoteSearchQuery [required]
    */
    virtual void getMusicAlbumRemoteSearchResults(const OAIAlbumInfoRemoteSearchQuery &oai_album_info_remote_search_query);

    /**
    * @param[in]  oai_artist_info_remote_search_query OAIArtistInfoRemoteSearchQuery [required]
    */
    virtual void getMusicArtistRemoteSearchResults(const OAIArtistInfoRemoteSearchQuery &oai_artist_info_remote_search_query);

    /**
    * @param[in]  oai_music_video_info_remote_search_query OAIMusicVideoInfoRemoteSearchQuery [required]
    */
    virtual void getMusicVideoRemoteSearchResults(const OAIMusicVideoInfoRemoteSearchQuery &oai_music_video_info_remote_search_query);

    /**
    * @param[in]  oai_person_lookup_info_remote_search_query OAIPersonLookupInfoRemoteSearchQuery [required]
    */
    virtual void getPersonRemoteSearchResults(const OAIPersonLookupInfoRemoteSearchQuery &oai_person_lookup_info_remote_search_query);

    /**
    * @param[in]  image_url QString [required]
    * @param[in]  provider_name QString [required]
    */
    virtual void getRemoteSearchImage(const QString &image_url, const QString &provider_name);

    /**
    * @param[in]  oai_series_info_remote_search_query OAISeriesInfoRemoteSearchQuery [required]
    */
    virtual void getSeriesRemoteSearchResults(const OAISeriesInfoRemoteSearchQuery &oai_series_info_remote_search_query);

    /**
    * @param[in]  oai_trailer_info_remote_search_query OAITrailerInfoRemoteSearchQuery [required]
    */
    virtual void getTrailerRemoteSearchResults(const OAITrailerInfoRemoteSearchQuery &oai_trailer_info_remote_search_query);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applySearchCriteriaCallback(OAIHttpRequestWorker *worker);
    void getBookRemoteSearchResultsCallback(OAIHttpRequestWorker *worker);
    void getBoxSetRemoteSearchResultsCallback(OAIHttpRequestWorker *worker);
    void getExternalIdInfosCallback(OAIHttpRequestWorker *worker);
    void getMovieRemoteSearchResultsCallback(OAIHttpRequestWorker *worker);
    void getMusicAlbumRemoteSearchResultsCallback(OAIHttpRequestWorker *worker);
    void getMusicArtistRemoteSearchResultsCallback(OAIHttpRequestWorker *worker);
    void getMusicVideoRemoteSearchResultsCallback(OAIHttpRequestWorker *worker);
    void getPersonRemoteSearchResultsCallback(OAIHttpRequestWorker *worker);
    void getRemoteSearchImageCallback(OAIHttpRequestWorker *worker);
    void getSeriesRemoteSearchResultsCallback(OAIHttpRequestWorker *worker);
    void getTrailerRemoteSearchResultsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applySearchCriteriaSignal();
    void getBookRemoteSearchResultsSignal(QList<OAIRemoteSearchResult> summary);
    void getBoxSetRemoteSearchResultsSignal(QList<OAIRemoteSearchResult> summary);
    void getExternalIdInfosSignal(QList<OAIExternalIdInfo> summary);
    void getMovieRemoteSearchResultsSignal(QList<OAIRemoteSearchResult> summary);
    void getMusicAlbumRemoteSearchResultsSignal(QList<OAIRemoteSearchResult> summary);
    void getMusicArtistRemoteSearchResultsSignal(QList<OAIRemoteSearchResult> summary);
    void getMusicVideoRemoteSearchResultsSignal(QList<OAIRemoteSearchResult> summary);
    void getPersonRemoteSearchResultsSignal(QList<OAIRemoteSearchResult> summary);
    void getRemoteSearchImageSignal(OAIHttpFileElement summary);
    void getSeriesRemoteSearchResultsSignal(QList<OAIRemoteSearchResult> summary);
    void getTrailerRemoteSearchResultsSignal(QList<OAIRemoteSearchResult> summary);


    void applySearchCriteriaSignalFull(OAIHttpRequestWorker *worker);
    void getBookRemoteSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSearchResult> summary);
    void getBoxSetRemoteSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSearchResult> summary);
    void getExternalIdInfosSignalFull(OAIHttpRequestWorker *worker, QList<OAIExternalIdInfo> summary);
    void getMovieRemoteSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSearchResult> summary);
    void getMusicAlbumRemoteSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSearchResult> summary);
    void getMusicArtistRemoteSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSearchResult> summary);
    void getMusicVideoRemoteSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSearchResult> summary);
    void getPersonRemoteSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSearchResult> summary);
    void getRemoteSearchImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getSeriesRemoteSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSearchResult> summary);
    void getTrailerRemoteSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSearchResult> summary);

    Q_DECL_DEPRECATED_X("Use applySearchCriteriaSignalError() instead")
    void applySearchCriteriaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applySearchCriteriaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBookRemoteSearchResultsSignalError() instead")
    void getBookRemoteSearchResultsSignalE(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBookRemoteSearchResultsSignalError(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBoxSetRemoteSearchResultsSignalError() instead")
    void getBoxSetRemoteSearchResultsSignalE(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBoxSetRemoteSearchResultsSignalError(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExternalIdInfosSignalError() instead")
    void getExternalIdInfosSignalE(QList<OAIExternalIdInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExternalIdInfosSignalError(QList<OAIExternalIdInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMovieRemoteSearchResultsSignalError() instead")
    void getMovieRemoteSearchResultsSignalE(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMovieRemoteSearchResultsSignalError(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicAlbumRemoteSearchResultsSignalError() instead")
    void getMusicAlbumRemoteSearchResultsSignalE(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicAlbumRemoteSearchResultsSignalError(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicArtistRemoteSearchResultsSignalError() instead")
    void getMusicArtistRemoteSearchResultsSignalE(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicArtistRemoteSearchResultsSignalError(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicVideoRemoteSearchResultsSignalError() instead")
    void getMusicVideoRemoteSearchResultsSignalE(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicVideoRemoteSearchResultsSignalError(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonRemoteSearchResultsSignalError() instead")
    void getPersonRemoteSearchResultsSignalE(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonRemoteSearchResultsSignalError(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteSearchImageSignalError() instead")
    void getRemoteSearchImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteSearchImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSeriesRemoteSearchResultsSignalError() instead")
    void getSeriesRemoteSearchResultsSignalE(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSeriesRemoteSearchResultsSignalError(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrailerRemoteSearchResultsSignalError() instead")
    void getTrailerRemoteSearchResultsSignalE(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrailerRemoteSearchResultsSignalError(QList<OAIRemoteSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applySearchCriteriaSignalErrorFull() instead")
    void applySearchCriteriaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applySearchCriteriaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBookRemoteSearchResultsSignalErrorFull() instead")
    void getBookRemoteSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBookRemoteSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBoxSetRemoteSearchResultsSignalErrorFull() instead")
    void getBoxSetRemoteSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBoxSetRemoteSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExternalIdInfosSignalErrorFull() instead")
    void getExternalIdInfosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExternalIdInfosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMovieRemoteSearchResultsSignalErrorFull() instead")
    void getMovieRemoteSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMovieRemoteSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicAlbumRemoteSearchResultsSignalErrorFull() instead")
    void getMusicAlbumRemoteSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicAlbumRemoteSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicArtistRemoteSearchResultsSignalErrorFull() instead")
    void getMusicArtistRemoteSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicArtistRemoteSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicVideoRemoteSearchResultsSignalErrorFull() instead")
    void getMusicVideoRemoteSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicVideoRemoteSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonRemoteSearchResultsSignalErrorFull() instead")
    void getPersonRemoteSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonRemoteSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteSearchImageSignalErrorFull() instead")
    void getRemoteSearchImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteSearchImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSeriesRemoteSearchResultsSignalErrorFull() instead")
    void getSeriesRemoteSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSeriesRemoteSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrailerRemoteSearchResultsSignalErrorFull() instead")
    void getTrailerRemoteSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrailerRemoteSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
