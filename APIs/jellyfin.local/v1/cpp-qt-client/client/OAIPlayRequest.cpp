/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayRequest::OAIPlayRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayRequest::OAIPlayRequest() {
    this->initializeModel();
}

OAIPlayRequest::~OAIPlayRequest() {}

void OAIPlayRequest::initializeModel() {

    m_audio_stream_index_isSet = false;
    m_audio_stream_index_isValid = false;

    m_controlling_user_id_isSet = false;
    m_controlling_user_id_isValid = false;

    m_item_ids_isSet = false;
    m_item_ids_isValid = false;

    m_media_source_id_isSet = false;
    m_media_source_id_isValid = false;

    m_play_command_isSet = false;
    m_play_command_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_start_position_ticks_isSet = false;
    m_start_position_ticks_isValid = false;

    m_subtitle_stream_index_isSet = false;
    m_subtitle_stream_index_isValid = false;
}

void OAIPlayRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayRequest::fromJsonObject(QJsonObject json) {

    m_audio_stream_index_isValid = ::OpenAPI::fromJsonValue(m_audio_stream_index, json[QString("AudioStreamIndex")]);
    m_audio_stream_index_isSet = !json[QString("AudioStreamIndex")].isNull() && m_audio_stream_index_isValid;

    m_controlling_user_id_isValid = ::OpenAPI::fromJsonValue(m_controlling_user_id, json[QString("ControllingUserId")]);
    m_controlling_user_id_isSet = !json[QString("ControllingUserId")].isNull() && m_controlling_user_id_isValid;

    m_item_ids_isValid = ::OpenAPI::fromJsonValue(m_item_ids, json[QString("ItemIds")]);
    m_item_ids_isSet = !json[QString("ItemIds")].isNull() && m_item_ids_isValid;

    m_media_source_id_isValid = ::OpenAPI::fromJsonValue(m_media_source_id, json[QString("MediaSourceId")]);
    m_media_source_id_isSet = !json[QString("MediaSourceId")].isNull() && m_media_source_id_isValid;

    m_play_command_isValid = ::OpenAPI::fromJsonValue(m_play_command, json[QString("PlayCommand")]);
    m_play_command_isSet = !json[QString("PlayCommand")].isNull() && m_play_command_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("StartIndex")]);
    m_start_index_isSet = !json[QString("StartIndex")].isNull() && m_start_index_isValid;

    m_start_position_ticks_isValid = ::OpenAPI::fromJsonValue(m_start_position_ticks, json[QString("StartPositionTicks")]);
    m_start_position_ticks_isSet = !json[QString("StartPositionTicks")].isNull() && m_start_position_ticks_isValid;

    m_subtitle_stream_index_isValid = ::OpenAPI::fromJsonValue(m_subtitle_stream_index, json[QString("SubtitleStreamIndex")]);
    m_subtitle_stream_index_isSet = !json[QString("SubtitleStreamIndex")].isNull() && m_subtitle_stream_index_isValid;
}

QString OAIPlayRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_stream_index_isSet) {
        obj.insert(QString("AudioStreamIndex"), ::OpenAPI::toJsonValue(m_audio_stream_index));
    }
    if (m_controlling_user_id_isSet) {
        obj.insert(QString("ControllingUserId"), ::OpenAPI::toJsonValue(m_controlling_user_id));
    }
    if (m_item_ids.size() > 0) {
        obj.insert(QString("ItemIds"), ::OpenAPI::toJsonValue(m_item_ids));
    }
    if (m_media_source_id_isSet) {
        obj.insert(QString("MediaSourceId"), ::OpenAPI::toJsonValue(m_media_source_id));
    }
    if (m_play_command.isSet()) {
        obj.insert(QString("PlayCommand"), ::OpenAPI::toJsonValue(m_play_command));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("StartIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_start_position_ticks_isSet) {
        obj.insert(QString("StartPositionTicks"), ::OpenAPI::toJsonValue(m_start_position_ticks));
    }
    if (m_subtitle_stream_index_isSet) {
        obj.insert(QString("SubtitleStreamIndex"), ::OpenAPI::toJsonValue(m_subtitle_stream_index));
    }
    return obj;
}

qint32 OAIPlayRequest::getAudioStreamIndex() const {
    return m_audio_stream_index;
}
void OAIPlayRequest::setAudioStreamIndex(const qint32 &audio_stream_index) {
    m_audio_stream_index = audio_stream_index;
    m_audio_stream_index_isSet = true;
}

bool OAIPlayRequest::is_audio_stream_index_Set() const{
    return m_audio_stream_index_isSet;
}

bool OAIPlayRequest::is_audio_stream_index_Valid() const{
    return m_audio_stream_index_isValid;
}

QString OAIPlayRequest::getControllingUserId() const {
    return m_controlling_user_id;
}
void OAIPlayRequest::setControllingUserId(const QString &controlling_user_id) {
    m_controlling_user_id = controlling_user_id;
    m_controlling_user_id_isSet = true;
}

bool OAIPlayRequest::is_controlling_user_id_Set() const{
    return m_controlling_user_id_isSet;
}

bool OAIPlayRequest::is_controlling_user_id_Valid() const{
    return m_controlling_user_id_isValid;
}

QList<QString> OAIPlayRequest::getItemIds() const {
    return m_item_ids;
}
void OAIPlayRequest::setItemIds(const QList<QString> &item_ids) {
    m_item_ids = item_ids;
    m_item_ids_isSet = true;
}

bool OAIPlayRequest::is_item_ids_Set() const{
    return m_item_ids_isSet;
}

bool OAIPlayRequest::is_item_ids_Valid() const{
    return m_item_ids_isValid;
}

QString OAIPlayRequest::getMediaSourceId() const {
    return m_media_source_id;
}
void OAIPlayRequest::setMediaSourceId(const QString &media_source_id) {
    m_media_source_id = media_source_id;
    m_media_source_id_isSet = true;
}

bool OAIPlayRequest::is_media_source_id_Set() const{
    return m_media_source_id_isSet;
}

bool OAIPlayRequest::is_media_source_id_Valid() const{
    return m_media_source_id_isValid;
}

OAIPlayCommand OAIPlayRequest::getPlayCommand() const {
    return m_play_command;
}
void OAIPlayRequest::setPlayCommand(const OAIPlayCommand &play_command) {
    m_play_command = play_command;
    m_play_command_isSet = true;
}

bool OAIPlayRequest::is_play_command_Set() const{
    return m_play_command_isSet;
}

bool OAIPlayRequest::is_play_command_Valid() const{
    return m_play_command_isValid;
}

qint32 OAIPlayRequest::getStartIndex() const {
    return m_start_index;
}
void OAIPlayRequest::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIPlayRequest::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIPlayRequest::is_start_index_Valid() const{
    return m_start_index_isValid;
}

qint64 OAIPlayRequest::getStartPositionTicks() const {
    return m_start_position_ticks;
}
void OAIPlayRequest::setStartPositionTicks(const qint64 &start_position_ticks) {
    m_start_position_ticks = start_position_ticks;
    m_start_position_ticks_isSet = true;
}

bool OAIPlayRequest::is_start_position_ticks_Set() const{
    return m_start_position_ticks_isSet;
}

bool OAIPlayRequest::is_start_position_ticks_Valid() const{
    return m_start_position_ticks_isValid;
}

qint32 OAIPlayRequest::getSubtitleStreamIndex() const {
    return m_subtitle_stream_index;
}
void OAIPlayRequest::setSubtitleStreamIndex(const qint32 &subtitle_stream_index) {
    m_subtitle_stream_index = subtitle_stream_index;
    m_subtitle_stream_index_isSet = true;
}

bool OAIPlayRequest::is_subtitle_stream_index_Set() const{
    return m_subtitle_stream_index_isSet;
}

bool OAIPlayRequest::is_subtitle_stream_index_Valid() const{
    return m_subtitle_stream_index_isValid;
}

bool OAIPlayRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_stream_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controlling_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_position_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_stream_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
