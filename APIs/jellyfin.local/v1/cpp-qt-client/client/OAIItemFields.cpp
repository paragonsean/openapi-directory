/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemFields::OAIItemFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemFields::OAIItemFields() {
    this->initializeModel();
}

OAIItemFields::~OAIItemFields() {}

void OAIItemFields::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIItemFields::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIItemFields::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AirTime", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::AIRTIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CanDelete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::CANDELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CanDownload", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::CANDOWNLOAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChannelInfo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::CHANNELINFO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Chapters", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::CHAPTERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChildCount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::CHILDCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CumulativeRunTimeTicks", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::CUMULATIVERUNTIMETICKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CustomRating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::CUSTOMRATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DateCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::DATECREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DateLastMediaAdded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::DATELASTMEDIAADDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DisplayPreferencesId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::DISPLAYPREFERENCESID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Etag", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::ETAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExternalUrls", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::EXTERNALURLS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Genres", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::GENRES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HomePageUrl", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::HOMEPAGEURL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ItemCounts", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::ITEMCOUNTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MediaSourceCount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::MEDIASOURCECOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MediaSources", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::MEDIASOURCES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OriginalTitle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::ORIGINALTITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Overview", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::OVERVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ParentId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::PARENTID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Path", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::PATH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("People", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::PEOPLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayAccess", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::PLAYACCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProductionLocations", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::PRODUCTIONLOCATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProviderIds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::PROVIDERIDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PrimaryImageAspectRatio", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::PRIMARYIMAGEASPECTRATIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RecursiveItemCount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::RECURSIVEITEMCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Settings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SETTINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ScreenshotImageTags", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SCREENSHOTIMAGETAGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SeriesPrimaryImage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SERIESPRIMARYIMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SeriesStudio", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SERIESSTUDIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SortName", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SORTNAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SpecialEpisodeNumbers", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SPECIALEPISODENUMBERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Studios", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::STUDIOS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BasicSyncInfo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::BASICSYNCINFO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SyncInfo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SYNCINFO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Taglines", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::TAGLINES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Tags", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::TAGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RemoteTrailers", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::REMOTETRAILERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MediaStreams", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::MEDIASTREAMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SeasonUserData", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SEASONUSERDATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceName", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SERVICENAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ThemeSongIds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::THEMESONGIDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ThemeVideoIds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::THEMEVIDEOIDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExternalEtag", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::EXTERNALETAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PresentationUniqueKey", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::PRESENTATIONUNIQUEKEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InheritedParentalRatingValue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::INHERITEDPARENTALRATINGVALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExternalSeriesId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::EXTERNALSERIESID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SeriesPresentationUniqueKey", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SERIESPRESENTATIONUNIQUEKEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DateLastRefreshed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::DATELASTREFRESHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DateLastSaved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::DATELASTSAVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RefreshState", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::REFRESHSTATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChannelImage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::CHANNELIMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EnableMediaSourceDisplay", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::ENABLEMEDIASOURCEDISPLAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Width", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::WIDTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Height", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::HEIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExtraIds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::EXTRAIDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LocalTrailerCount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::LOCALTRAILERCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IsHD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::ISHD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SpecialFeatureCount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemFields::SPECIALFEATURECOUNT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIItemFields::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIItemFields::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIItemFields::AIRTIME:
            val = "AirTime";
            break;
        case eOAIItemFields::CANDELETE:
            val = "CanDelete";
            break;
        case eOAIItemFields::CANDOWNLOAD:
            val = "CanDownload";
            break;
        case eOAIItemFields::CHANNELINFO:
            val = "ChannelInfo";
            break;
        case eOAIItemFields::CHAPTERS:
            val = "Chapters";
            break;
        case eOAIItemFields::CHILDCOUNT:
            val = "ChildCount";
            break;
        case eOAIItemFields::CUMULATIVERUNTIMETICKS:
            val = "CumulativeRunTimeTicks";
            break;
        case eOAIItemFields::CUSTOMRATING:
            val = "CustomRating";
            break;
        case eOAIItemFields::DATECREATED:
            val = "DateCreated";
            break;
        case eOAIItemFields::DATELASTMEDIAADDED:
            val = "DateLastMediaAdded";
            break;
        case eOAIItemFields::DISPLAYPREFERENCESID:
            val = "DisplayPreferencesId";
            break;
        case eOAIItemFields::ETAG:
            val = "Etag";
            break;
        case eOAIItemFields::EXTERNALURLS:
            val = "ExternalUrls";
            break;
        case eOAIItemFields::GENRES:
            val = "Genres";
            break;
        case eOAIItemFields::HOMEPAGEURL:
            val = "HomePageUrl";
            break;
        case eOAIItemFields::ITEMCOUNTS:
            val = "ItemCounts";
            break;
        case eOAIItemFields::MEDIASOURCECOUNT:
            val = "MediaSourceCount";
            break;
        case eOAIItemFields::MEDIASOURCES:
            val = "MediaSources";
            break;
        case eOAIItemFields::ORIGINALTITLE:
            val = "OriginalTitle";
            break;
        case eOAIItemFields::OVERVIEW:
            val = "Overview";
            break;
        case eOAIItemFields::PARENTID:
            val = "ParentId";
            break;
        case eOAIItemFields::PATH:
            val = "Path";
            break;
        case eOAIItemFields::PEOPLE:
            val = "People";
            break;
        case eOAIItemFields::PLAYACCESS:
            val = "PlayAccess";
            break;
        case eOAIItemFields::PRODUCTIONLOCATIONS:
            val = "ProductionLocations";
            break;
        case eOAIItemFields::PROVIDERIDS:
            val = "ProviderIds";
            break;
        case eOAIItemFields::PRIMARYIMAGEASPECTRATIO:
            val = "PrimaryImageAspectRatio";
            break;
        case eOAIItemFields::RECURSIVEITEMCOUNT:
            val = "RecursiveItemCount";
            break;
        case eOAIItemFields::SETTINGS:
            val = "Settings";
            break;
        case eOAIItemFields::SCREENSHOTIMAGETAGS:
            val = "ScreenshotImageTags";
            break;
        case eOAIItemFields::SERIESPRIMARYIMAGE:
            val = "SeriesPrimaryImage";
            break;
        case eOAIItemFields::SERIESSTUDIO:
            val = "SeriesStudio";
            break;
        case eOAIItemFields::SORTNAME:
            val = "SortName";
            break;
        case eOAIItemFields::SPECIALEPISODENUMBERS:
            val = "SpecialEpisodeNumbers";
            break;
        case eOAIItemFields::STUDIOS:
            val = "Studios";
            break;
        case eOAIItemFields::BASICSYNCINFO:
            val = "BasicSyncInfo";
            break;
        case eOAIItemFields::SYNCINFO:
            val = "SyncInfo";
            break;
        case eOAIItemFields::TAGLINES:
            val = "Taglines";
            break;
        case eOAIItemFields::TAGS:
            val = "Tags";
            break;
        case eOAIItemFields::REMOTETRAILERS:
            val = "RemoteTrailers";
            break;
        case eOAIItemFields::MEDIASTREAMS:
            val = "MediaStreams";
            break;
        case eOAIItemFields::SEASONUSERDATA:
            val = "SeasonUserData";
            break;
        case eOAIItemFields::SERVICENAME:
            val = "ServiceName";
            break;
        case eOAIItemFields::THEMESONGIDS:
            val = "ThemeSongIds";
            break;
        case eOAIItemFields::THEMEVIDEOIDS:
            val = "ThemeVideoIds";
            break;
        case eOAIItemFields::EXTERNALETAG:
            val = "ExternalEtag";
            break;
        case eOAIItemFields::PRESENTATIONUNIQUEKEY:
            val = "PresentationUniqueKey";
            break;
        case eOAIItemFields::INHERITEDPARENTALRATINGVALUE:
            val = "InheritedParentalRatingValue";
            break;
        case eOAIItemFields::EXTERNALSERIESID:
            val = "ExternalSeriesId";
            break;
        case eOAIItemFields::SERIESPRESENTATIONUNIQUEKEY:
            val = "SeriesPresentationUniqueKey";
            break;
        case eOAIItemFields::DATELASTREFRESHED:
            val = "DateLastRefreshed";
            break;
        case eOAIItemFields::DATELASTSAVED:
            val = "DateLastSaved";
            break;
        case eOAIItemFields::REFRESHSTATE:
            val = "RefreshState";
            break;
        case eOAIItemFields::CHANNELIMAGE:
            val = "ChannelImage";
            break;
        case eOAIItemFields::ENABLEMEDIASOURCEDISPLAY:
            val = "EnableMediaSourceDisplay";
            break;
        case eOAIItemFields::WIDTH:
            val = "Width";
            break;
        case eOAIItemFields::HEIGHT:
            val = "Height";
            break;
        case eOAIItemFields::EXTRAIDS:
            val = "ExtraIds";
            break;
        case eOAIItemFields::LOCALTRAILERCOUNT:
            val = "LocalTrailerCount";
            break;
        case eOAIItemFields::ISHD:
            val = "IsHD";
            break;
        case eOAIItemFields::SPECIALFEATURECOUNT:
            val = "SpecialFeatureCount";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIItemFields::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIItemFields::eOAIItemFields OAIItemFields::getValue() const {
    return m_value;
}

void OAIItemFields::setValue(const OAIItemFields::eOAIItemFields& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIItemFields::isSet() const {
    
    return m_value_isSet;
}

bool OAIItemFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
