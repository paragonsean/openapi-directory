/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILibraryOptions.h
 *
 * 
 */

#ifndef OAILibraryOptions_H
#define OAILibraryOptions_H

#include <QJsonObject>

#include "OAIMediaPathInfo.h"
#include "OAITypeOptions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMediaPathInfo;
class OAITypeOptions;

class OAILibraryOptions : public OAIObject {
public:
    OAILibraryOptions();
    OAILibraryOptions(QString json);
    ~OAILibraryOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAutomaticRefreshIntervalDays() const;
    void setAutomaticRefreshIntervalDays(const qint32 &automatic_refresh_interval_days);
    bool is_automatic_refresh_interval_days_Set() const;
    bool is_automatic_refresh_interval_days_Valid() const;

    QList<QString> getDisabledLocalMetadataReaders() const;
    void setDisabledLocalMetadataReaders(const QList<QString> &disabled_local_metadata_readers);
    bool is_disabled_local_metadata_readers_Set() const;
    bool is_disabled_local_metadata_readers_Valid() const;

    QList<QString> getDisabledSubtitleFetchers() const;
    void setDisabledSubtitleFetchers(const QList<QString> &disabled_subtitle_fetchers);
    bool is_disabled_subtitle_fetchers_Set() const;
    bool is_disabled_subtitle_fetchers_Valid() const;

    bool isEnableAutomaticSeriesGrouping() const;
    void setEnableAutomaticSeriesGrouping(const bool &enable_automatic_series_grouping);
    bool is_enable_automatic_series_grouping_Set() const;
    bool is_enable_automatic_series_grouping_Valid() const;

    bool isEnableChapterImageExtraction() const;
    void setEnableChapterImageExtraction(const bool &enable_chapter_image_extraction);
    bool is_enable_chapter_image_extraction_Set() const;
    bool is_enable_chapter_image_extraction_Valid() const;

    bool isEnableEmbeddedEpisodeInfos() const;
    void setEnableEmbeddedEpisodeInfos(const bool &enable_embedded_episode_infos);
    bool is_enable_embedded_episode_infos_Set() const;
    bool is_enable_embedded_episode_infos_Valid() const;

    bool isEnableEmbeddedTitles() const;
    void setEnableEmbeddedTitles(const bool &enable_embedded_titles);
    bool is_enable_embedded_titles_Set() const;
    bool is_enable_embedded_titles_Valid() const;

    bool isEnableInternetProviders() const;
    void setEnableInternetProviders(const bool &enable_internet_providers);
    bool is_enable_internet_providers_Set() const;
    bool is_enable_internet_providers_Valid() const;

    bool isEnablePhotos() const;
    void setEnablePhotos(const bool &enable_photos);
    bool is_enable_photos_Set() const;
    bool is_enable_photos_Valid() const;

    bool isEnableRealtimeMonitor() const;
    void setEnableRealtimeMonitor(const bool &enable_realtime_monitor);
    bool is_enable_realtime_monitor_Set() const;
    bool is_enable_realtime_monitor_Valid() const;

    bool isExtractChapterImagesDuringLibraryScan() const;
    void setExtractChapterImagesDuringLibraryScan(const bool &extract_chapter_images_during_library_scan);
    bool is_extract_chapter_images_during_library_scan_Set() const;
    bool is_extract_chapter_images_during_library_scan_Valid() const;

    QList<QString> getLocalMetadataReaderOrder() const;
    void setLocalMetadataReaderOrder(const QList<QString> &local_metadata_reader_order);
    bool is_local_metadata_reader_order_Set() const;
    bool is_local_metadata_reader_order_Valid() const;

    QString getMetadataCountryCode() const;
    void setMetadataCountryCode(const QString &metadata_country_code);
    bool is_metadata_country_code_Set() const;
    bool is_metadata_country_code_Valid() const;

    QList<QString> getMetadataSavers() const;
    void setMetadataSavers(const QList<QString> &metadata_savers);
    bool is_metadata_savers_Set() const;
    bool is_metadata_savers_Valid() const;

    QList<OAIMediaPathInfo> getPathInfos() const;
    void setPathInfos(const QList<OAIMediaPathInfo> &path_infos);
    bool is_path_infos_Set() const;
    bool is_path_infos_Valid() const;

    QString getPreferredMetadataLanguage() const;
    void setPreferredMetadataLanguage(const QString &preferred_metadata_language);
    bool is_preferred_metadata_language_Set() const;
    bool is_preferred_metadata_language_Valid() const;

    bool isRequirePerfectSubtitleMatch() const;
    void setRequirePerfectSubtitleMatch(const bool &require_perfect_subtitle_match);
    bool is_require_perfect_subtitle_match_Set() const;
    bool is_require_perfect_subtitle_match_Valid() const;

    bool isSaveLocalMetadata() const;
    void setSaveLocalMetadata(const bool &save_local_metadata);
    bool is_save_local_metadata_Set() const;
    bool is_save_local_metadata_Valid() const;

    bool isSaveSubtitlesWithMedia() const;
    void setSaveSubtitlesWithMedia(const bool &save_subtitles_with_media);
    bool is_save_subtitles_with_media_Set() const;
    bool is_save_subtitles_with_media_Valid() const;

    QString getSeasonZeroDisplayName() const;
    void setSeasonZeroDisplayName(const QString &season_zero_display_name);
    bool is_season_zero_display_name_Set() const;
    bool is_season_zero_display_name_Valid() const;

    bool isSkipSubtitlesIfAudioTrackMatches() const;
    void setSkipSubtitlesIfAudioTrackMatches(const bool &skip_subtitles_if_audio_track_matches);
    bool is_skip_subtitles_if_audio_track_matches_Set() const;
    bool is_skip_subtitles_if_audio_track_matches_Valid() const;

    bool isSkipSubtitlesIfEmbeddedSubtitlesPresent() const;
    void setSkipSubtitlesIfEmbeddedSubtitlesPresent(const bool &skip_subtitles_if_embedded_subtitles_present);
    bool is_skip_subtitles_if_embedded_subtitles_present_Set() const;
    bool is_skip_subtitles_if_embedded_subtitles_present_Valid() const;

    QList<QString> getSubtitleDownloadLanguages() const;
    void setSubtitleDownloadLanguages(const QList<QString> &subtitle_download_languages);
    bool is_subtitle_download_languages_Set() const;
    bool is_subtitle_download_languages_Valid() const;

    QList<QString> getSubtitleFetcherOrder() const;
    void setSubtitleFetcherOrder(const QList<QString> &subtitle_fetcher_order);
    bool is_subtitle_fetcher_order_Set() const;
    bool is_subtitle_fetcher_order_Valid() const;

    QList<OAITypeOptions> getTypeOptions() const;
    void setTypeOptions(const QList<OAITypeOptions> &type_options);
    bool is_type_options_Set() const;
    bool is_type_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_automatic_refresh_interval_days;
    bool m_automatic_refresh_interval_days_isSet;
    bool m_automatic_refresh_interval_days_isValid;

    QList<QString> m_disabled_local_metadata_readers;
    bool m_disabled_local_metadata_readers_isSet;
    bool m_disabled_local_metadata_readers_isValid;

    QList<QString> m_disabled_subtitle_fetchers;
    bool m_disabled_subtitle_fetchers_isSet;
    bool m_disabled_subtitle_fetchers_isValid;

    bool m_enable_automatic_series_grouping;
    bool m_enable_automatic_series_grouping_isSet;
    bool m_enable_automatic_series_grouping_isValid;

    bool m_enable_chapter_image_extraction;
    bool m_enable_chapter_image_extraction_isSet;
    bool m_enable_chapter_image_extraction_isValid;

    bool m_enable_embedded_episode_infos;
    bool m_enable_embedded_episode_infos_isSet;
    bool m_enable_embedded_episode_infos_isValid;

    bool m_enable_embedded_titles;
    bool m_enable_embedded_titles_isSet;
    bool m_enable_embedded_titles_isValid;

    bool m_enable_internet_providers;
    bool m_enable_internet_providers_isSet;
    bool m_enable_internet_providers_isValid;

    bool m_enable_photos;
    bool m_enable_photos_isSet;
    bool m_enable_photos_isValid;

    bool m_enable_realtime_monitor;
    bool m_enable_realtime_monitor_isSet;
    bool m_enable_realtime_monitor_isValid;

    bool m_extract_chapter_images_during_library_scan;
    bool m_extract_chapter_images_during_library_scan_isSet;
    bool m_extract_chapter_images_during_library_scan_isValid;

    QList<QString> m_local_metadata_reader_order;
    bool m_local_metadata_reader_order_isSet;
    bool m_local_metadata_reader_order_isValid;

    QString m_metadata_country_code;
    bool m_metadata_country_code_isSet;
    bool m_metadata_country_code_isValid;

    QList<QString> m_metadata_savers;
    bool m_metadata_savers_isSet;
    bool m_metadata_savers_isValid;

    QList<OAIMediaPathInfo> m_path_infos;
    bool m_path_infos_isSet;
    bool m_path_infos_isValid;

    QString m_preferred_metadata_language;
    bool m_preferred_metadata_language_isSet;
    bool m_preferred_metadata_language_isValid;

    bool m_require_perfect_subtitle_match;
    bool m_require_perfect_subtitle_match_isSet;
    bool m_require_perfect_subtitle_match_isValid;

    bool m_save_local_metadata;
    bool m_save_local_metadata_isSet;
    bool m_save_local_metadata_isValid;

    bool m_save_subtitles_with_media;
    bool m_save_subtitles_with_media_isSet;
    bool m_save_subtitles_with_media_isValid;

    QString m_season_zero_display_name;
    bool m_season_zero_display_name_isSet;
    bool m_season_zero_display_name_isValid;

    bool m_skip_subtitles_if_audio_track_matches;
    bool m_skip_subtitles_if_audio_track_matches_isSet;
    bool m_skip_subtitles_if_audio_track_matches_isValid;

    bool m_skip_subtitles_if_embedded_subtitles_present;
    bool m_skip_subtitles_if_embedded_subtitles_present_isSet;
    bool m_skip_subtitles_if_embedded_subtitles_present_isValid;

    QList<QString> m_subtitle_download_languages;
    bool m_subtitle_download_languages_isSet;
    bool m_subtitle_download_languages_isValid;

    QList<QString> m_subtitle_fetcher_order;
    bool m_subtitle_fetcher_order_isSet;
    bool m_subtitle_fetcher_order_isValid;

    QList<OAITypeOptions> m_type_options;
    bool m_type_options_isSet;
    bool m_type_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILibraryOptions)

#endif // OAILibraryOptions_H
