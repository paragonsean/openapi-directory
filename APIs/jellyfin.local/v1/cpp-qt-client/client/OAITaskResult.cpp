/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskResult::OAITaskResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskResult::OAITaskResult() {
    this->initializeModel();
}

OAITaskResult::~OAITaskResult() {}

void OAITaskResult::initializeModel() {

    m_end_time_utc_isSet = false;
    m_end_time_utc_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_long_error_message_isSet = false;
    m_long_error_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_time_utc_isSet = false;
    m_start_time_utc_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITaskResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskResult::fromJsonObject(QJsonObject json) {

    m_end_time_utc_isValid = ::OpenAPI::fromJsonValue(m_end_time_utc, json[QString("EndTimeUtc")]);
    m_end_time_utc_isSet = !json[QString("EndTimeUtc")].isNull() && m_end_time_utc_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_long_error_message_isValid = ::OpenAPI::fromJsonValue(m_long_error_message, json[QString("LongErrorMessage")]);
    m_long_error_message_isSet = !json[QString("LongErrorMessage")].isNull() && m_long_error_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_start_time_utc_isValid = ::OpenAPI::fromJsonValue(m_start_time_utc, json[QString("StartTimeUtc")]);
    m_start_time_utc_isSet = !json[QString("StartTimeUtc")].isNull() && m_start_time_utc_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAITaskResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskResult::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_utc_isSet) {
        obj.insert(QString("EndTimeUtc"), ::OpenAPI::toJsonValue(m_end_time_utc));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_long_error_message_isSet) {
        obj.insert(QString("LongErrorMessage"), ::OpenAPI::toJsonValue(m_long_error_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_time_utc_isSet) {
        obj.insert(QString("StartTimeUtc"), ::OpenAPI::toJsonValue(m_start_time_utc));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAITaskResult::getEndTimeUtc() const {
    return m_end_time_utc;
}
void OAITaskResult::setEndTimeUtc(const QDateTime &end_time_utc) {
    m_end_time_utc = end_time_utc;
    m_end_time_utc_isSet = true;
}

bool OAITaskResult::is_end_time_utc_Set() const{
    return m_end_time_utc_isSet;
}

bool OAITaskResult::is_end_time_utc_Valid() const{
    return m_end_time_utc_isValid;
}

QString OAITaskResult::getErrorMessage() const {
    return m_error_message;
}
void OAITaskResult::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAITaskResult::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAITaskResult::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAITaskResult::getId() const {
    return m_id;
}
void OAITaskResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITaskResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAITaskResult::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITaskResult::getKey() const {
    return m_key;
}
void OAITaskResult::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITaskResult::is_key_Set() const{
    return m_key_isSet;
}

bool OAITaskResult::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITaskResult::getLongErrorMessage() const {
    return m_long_error_message;
}
void OAITaskResult::setLongErrorMessage(const QString &long_error_message) {
    m_long_error_message = long_error_message;
    m_long_error_message_isSet = true;
}

bool OAITaskResult::is_long_error_message_Set() const{
    return m_long_error_message_isSet;
}

bool OAITaskResult::is_long_error_message_Valid() const{
    return m_long_error_message_isValid;
}

QString OAITaskResult::getName() const {
    return m_name;
}
void OAITaskResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaskResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaskResult::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAITaskResult::getStartTimeUtc() const {
    return m_start_time_utc;
}
void OAITaskResult::setStartTimeUtc(const QDateTime &start_time_utc) {
    m_start_time_utc = start_time_utc;
    m_start_time_utc_isSet = true;
}

bool OAITaskResult::is_start_time_utc_Set() const{
    return m_start_time_utc_isSet;
}

bool OAITaskResult::is_start_time_utc_Valid() const{
    return m_start_time_utc_isValid;
}

OAITaskCompletionStatus OAITaskResult::getStatus() const {
    return m_status;
}
void OAITaskResult::setStatus(const OAITaskCompletionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaskResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaskResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITaskResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
