/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRemoteImageApi_H
#define OAI_OAIRemoteImageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIImageProviderInfo.h"
#include "OAIImageType.h"
#include "OAIProblemDetails.h"
#include "OAIRemoteImageResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRemoteImageApi : public QObject {
    Q_OBJECT

public:
    OAIRemoteImageApi(const int timeOut = 0);
    ~OAIRemoteImageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  type OAIImageType [required]
    * @param[in]  image_url QString [optional]
    */
    virtual void downloadRemoteImage(const QString &item_id, const OAIImageType &type, const ::OpenAPI::OptionalParam<QString> &image_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_url QString [required]
    */
    virtual void getRemoteImage(const QString &image_url);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void getRemoteImageProviders(const QString &item_id);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  type OAIImageType [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  provider_name QString [optional]
    * @param[in]  include_all_languages bool [optional]
    */
    virtual void getRemoteImages(const QString &item_id, const ::OpenAPI::OptionalParam<OAIImageType> &type = ::OpenAPI::OptionalParam<OAIImageType>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &provider_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_all_languages = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void downloadRemoteImageCallback(OAIHttpRequestWorker *worker);
    void getRemoteImageCallback(OAIHttpRequestWorker *worker);
    void getRemoteImageProvidersCallback(OAIHttpRequestWorker *worker);
    void getRemoteImagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void downloadRemoteImageSignal();
    void getRemoteImageSignal(OAIHttpFileElement summary);
    void getRemoteImageProvidersSignal(QList<OAIImageProviderInfo> summary);
    void getRemoteImagesSignal(OAIRemoteImageResult summary);


    void downloadRemoteImageSignalFull(OAIHttpRequestWorker *worker);
    void getRemoteImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getRemoteImageProvidersSignalFull(OAIHttpRequestWorker *worker, QList<OAIImageProviderInfo> summary);
    void getRemoteImagesSignalFull(OAIHttpRequestWorker *worker, OAIRemoteImageResult summary);

    Q_DECL_DEPRECATED_X("Use downloadRemoteImageSignalError() instead")
    void downloadRemoteImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadRemoteImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteImageSignalError() instead")
    void getRemoteImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteImageProvidersSignalError() instead")
    void getRemoteImageProvidersSignalE(QList<OAIImageProviderInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteImageProvidersSignalError(QList<OAIImageProviderInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteImagesSignalError() instead")
    void getRemoteImagesSignalE(OAIRemoteImageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteImagesSignalError(OAIRemoteImageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use downloadRemoteImageSignalErrorFull() instead")
    void downloadRemoteImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadRemoteImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteImageSignalErrorFull() instead")
    void getRemoteImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteImageProvidersSignalErrorFull() instead")
    void getRemoteImageProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteImageProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteImagesSignalErrorFull() instead")
    void getRemoteImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
