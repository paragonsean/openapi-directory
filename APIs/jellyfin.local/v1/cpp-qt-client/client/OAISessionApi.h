/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISessionApi_H
#define OAI_OAISessionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClientCapabilitiesDto.h"
#include "OAIGeneralCommand.h"
#include "OAIGeneralCommandType.h"
#include "OAINameIdPair.h"
#include "OAIPlayCommand.h"
#include "OAIPlaystateCommand.h"
#include "OAISessionInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISessionApi : public QObject {
    Q_OBJECT

public:
    OAISessionApi(const int timeOut = 0);
    ~OAISessionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void addUserToSession(const QString &session_id, const QString &user_id);

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  item_type QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  item_name QString [required]
    */
    virtual void displayContent(const QString &session_id, const QString &item_type, const QString &item_id, const QString &item_name);


    virtual void getAuthProviders();


    virtual void getPasswordResetProviders();

    /**
    * @param[in]  controllable_by_user_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  active_within_seconds qint32 [optional]
    */
    virtual void getSessions(const ::OpenAPI::OptionalParam<QString> &controllable_by_user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &active_within_seconds = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  play_command OAIPlayCommand [required]
    * @param[in]  item_ids QList<QString> [required]
    * @param[in]  start_position_ticks qint64 [optional]
    */
    virtual void play(const QString &session_id, const OAIPlayCommand &play_command, const QList<QString> &item_ids, const ::OpenAPI::OptionalParam<qint64> &start_position_ticks = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  playable_media_types QList<QString> [optional]
    * @param[in]  supported_commands QList<OAIGeneralCommandType> [optional]
    * @param[in]  supports_media_control bool [optional]
    * @param[in]  supports_sync bool [optional]
    * @param[in]  supports_persistent_identifier bool [optional]
    */
    virtual void postCapabilities(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &playable_media_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIGeneralCommandType>> &supported_commands = ::OpenAPI::OptionalParam<QList<OAIGeneralCommandType>>(), const ::OpenAPI::OptionalParam<bool> &supports_media_control = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_sync = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_persistent_identifier = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_client_capabilities_dto OAIClientCapabilitiesDto [required]
    * @param[in]  id QString [optional]
    */
    virtual void postFullCapabilities(const OAIClientCapabilitiesDto &oai_client_capabilities_dto, const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void removeUserFromSession(const QString &session_id, const QString &user_id);


    virtual void reportSessionEnded();

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  session_id QString [optional]
    */
    virtual void reportViewing(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &session_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  oai_general_command OAIGeneralCommand [required]
    */
    virtual void sendFullGeneralCommand(const QString &session_id, const OAIGeneralCommand &oai_general_command);

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  command OAIGeneralCommandType [required]
    */
    virtual void sendGeneralCommand(const QString &session_id, const OAIGeneralCommandType &command);

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  text QString [required]
    * @param[in]  header QString [optional]
    * @param[in]  timeout_ms qint64 [optional]
    */
    virtual void sendMessageCommand(const QString &session_id, const QString &text, const ::OpenAPI::OptionalParam<QString> &header = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout_ms = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  command OAIPlaystateCommand [required]
    * @param[in]  seek_position_ticks qint64 [optional]
    * @param[in]  controlling_user_id QString [optional]
    */
    virtual void sendPlaystateCommand(const QString &session_id, const OAIPlaystateCommand &command, const ::OpenAPI::OptionalParam<qint64> &seek_position_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &controlling_user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  command OAIGeneralCommandType [required]
    */
    virtual void sendSystemCommand(const QString &session_id, const OAIGeneralCommandType &command);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addUserToSessionCallback(OAIHttpRequestWorker *worker);
    void displayContentCallback(OAIHttpRequestWorker *worker);
    void getAuthProvidersCallback(OAIHttpRequestWorker *worker);
    void getPasswordResetProvidersCallback(OAIHttpRequestWorker *worker);
    void getSessionsCallback(OAIHttpRequestWorker *worker);
    void playCallback(OAIHttpRequestWorker *worker);
    void postCapabilitiesCallback(OAIHttpRequestWorker *worker);
    void postFullCapabilitiesCallback(OAIHttpRequestWorker *worker);
    void removeUserFromSessionCallback(OAIHttpRequestWorker *worker);
    void reportSessionEndedCallback(OAIHttpRequestWorker *worker);
    void reportViewingCallback(OAIHttpRequestWorker *worker);
    void sendFullGeneralCommandCallback(OAIHttpRequestWorker *worker);
    void sendGeneralCommandCallback(OAIHttpRequestWorker *worker);
    void sendMessageCommandCallback(OAIHttpRequestWorker *worker);
    void sendPlaystateCommandCallback(OAIHttpRequestWorker *worker);
    void sendSystemCommandCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addUserToSessionSignal();
    void displayContentSignal();
    void getAuthProvidersSignal(QList<OAINameIdPair> summary);
    void getPasswordResetProvidersSignal(QList<OAINameIdPair> summary);
    void getSessionsSignal(QList<OAISessionInfo> summary);
    void playSignal();
    void postCapabilitiesSignal();
    void postFullCapabilitiesSignal();
    void removeUserFromSessionSignal();
    void reportSessionEndedSignal();
    void reportViewingSignal();
    void sendFullGeneralCommandSignal();
    void sendGeneralCommandSignal();
    void sendMessageCommandSignal();
    void sendPlaystateCommandSignal();
    void sendSystemCommandSignal();


    void addUserToSessionSignalFull(OAIHttpRequestWorker *worker);
    void displayContentSignalFull(OAIHttpRequestWorker *worker);
    void getAuthProvidersSignalFull(OAIHttpRequestWorker *worker, QList<OAINameIdPair> summary);
    void getPasswordResetProvidersSignalFull(OAIHttpRequestWorker *worker, QList<OAINameIdPair> summary);
    void getSessionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISessionInfo> summary);
    void playSignalFull(OAIHttpRequestWorker *worker);
    void postCapabilitiesSignalFull(OAIHttpRequestWorker *worker);
    void postFullCapabilitiesSignalFull(OAIHttpRequestWorker *worker);
    void removeUserFromSessionSignalFull(OAIHttpRequestWorker *worker);
    void reportSessionEndedSignalFull(OAIHttpRequestWorker *worker);
    void reportViewingSignalFull(OAIHttpRequestWorker *worker);
    void sendFullGeneralCommandSignalFull(OAIHttpRequestWorker *worker);
    void sendGeneralCommandSignalFull(OAIHttpRequestWorker *worker);
    void sendMessageCommandSignalFull(OAIHttpRequestWorker *worker);
    void sendPlaystateCommandSignalFull(OAIHttpRequestWorker *worker);
    void sendSystemCommandSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addUserToSessionSignalError() instead")
    void addUserToSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addUserToSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayContentSignalError() instead")
    void displayContentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void displayContentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthProvidersSignalError() instead")
    void getAuthProvidersSignalE(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthProvidersSignalError(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPasswordResetProvidersSignalError() instead")
    void getPasswordResetProvidersSignalE(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPasswordResetProvidersSignalError(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionsSignalError() instead")
    void getSessionsSignalE(QList<OAISessionInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionsSignalError(QList<OAISessionInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playSignalError() instead")
    void playSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCapabilitiesSignalError() instead")
    void postCapabilitiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postCapabilitiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFullCapabilitiesSignalError() instead")
    void postFullCapabilitiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postFullCapabilitiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserFromSessionSignalError() instead")
    void removeUserFromSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserFromSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportSessionEndedSignalError() instead")
    void reportSessionEndedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportSessionEndedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportViewingSignalError() instead")
    void reportViewingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportViewingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFullGeneralCommandSignalError() instead")
    void sendFullGeneralCommandSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendFullGeneralCommandSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendGeneralCommandSignalError() instead")
    void sendGeneralCommandSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendGeneralCommandSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageCommandSignalError() instead")
    void sendMessageCommandSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageCommandSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPlaystateCommandSignalError() instead")
    void sendPlaystateCommandSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendPlaystateCommandSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendSystemCommandSignalError() instead")
    void sendSystemCommandSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendSystemCommandSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addUserToSessionSignalErrorFull() instead")
    void addUserToSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addUserToSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayContentSignalErrorFull() instead")
    void displayContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthProvidersSignalErrorFull() instead")
    void getAuthProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPasswordResetProvidersSignalErrorFull() instead")
    void getPasswordResetProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPasswordResetProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionsSignalErrorFull() instead")
    void getSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playSignalErrorFull() instead")
    void playSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCapabilitiesSignalErrorFull() instead")
    void postCapabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCapabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFullCapabilitiesSignalErrorFull() instead")
    void postFullCapabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFullCapabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserFromSessionSignalErrorFull() instead")
    void removeUserFromSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserFromSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportSessionEndedSignalErrorFull() instead")
    void reportSessionEndedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportSessionEndedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportViewingSignalErrorFull() instead")
    void reportViewingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportViewingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendFullGeneralCommandSignalErrorFull() instead")
    void sendFullGeneralCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendFullGeneralCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendGeneralCommandSignalErrorFull() instead")
    void sendGeneralCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendGeneralCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageCommandSignalErrorFull() instead")
    void sendMessageCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPlaystateCommandSignalErrorFull() instead")
    void sendPlaystateCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPlaystateCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendSystemCommandSignalErrorFull() instead")
    void sendSystemCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendSystemCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
