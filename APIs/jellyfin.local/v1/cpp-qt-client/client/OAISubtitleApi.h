/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubtitleApi_H
#define OAI_OAISubtitleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFontFile.h"
#include "OAIHttpFileElement.h"
#include "OAIProblemDetails.h"
#include "OAIRemoteSubtitleInfo.h"
#include "OAIUploadSubtitleDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubtitleApi : public QObject {
    Q_OBJECT

public:
    OAISubtitleApi(const int timeOut = 0);
    ~OAISubtitleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  index qint32 [required]
    */
    virtual void deleteSubtitle(const QString &item_id, const qint32 &index);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  subtitle_id QString [required]
    */
    virtual void downloadRemoteSubtitles(const QString &item_id, const QString &subtitle_id);

    /**
    * @param[in]  name QString [required]
    */
    virtual void getFallbackFont(const QString &name);


    virtual void getFallbackFontList();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getRemoteSubtitles(const QString &id);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  media_source_id QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  end_position_ticks qint64 [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  add_vtt_time_map bool [optional]
    * @param[in]  start_position_ticks qint64 [optional]
    */
    virtual void getSubtitle(const QString &item_id, const QString &media_source_id, const qint32 &index, const QString &format, const ::OpenAPI::OptionalParam<qint64> &end_position_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_vtt_time_map = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_position_ticks = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  media_source_id QString [required]
    * @param[in]  segment_length qint32 [required]
    */
    virtual void getSubtitlePlaylist(const QString &item_id, const qint32 &index, const QString &media_source_id, const qint32 &segment_length);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  media_source_id QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  start_position_ticks qint64 [required]
    * @param[in]  format QString [required]
    * @param[in]  end_position_ticks qint64 [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  add_vtt_time_map bool [optional]
    */
    virtual void getSubtitleWithTicks(const QString &item_id, const QString &media_source_id, const qint32 &index, const qint64 &start_position_ticks, const QString &format, const ::OpenAPI::OptionalParam<qint64> &end_position_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_vtt_time_map = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  is_perfect_match bool [optional]
    */
    virtual void searchRemoteSubtitles(const QString &item_id, const QString &language, const ::OpenAPI::OptionalParam<bool> &is_perfect_match = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  oai_upload_subtitle_dto OAIUploadSubtitleDto [required]
    */
    virtual void uploadSubtitle(const QString &item_id, const OAIUploadSubtitleDto &oai_upload_subtitle_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteSubtitleCallback(OAIHttpRequestWorker *worker);
    void downloadRemoteSubtitlesCallback(OAIHttpRequestWorker *worker);
    void getFallbackFontCallback(OAIHttpRequestWorker *worker);
    void getFallbackFontListCallback(OAIHttpRequestWorker *worker);
    void getRemoteSubtitlesCallback(OAIHttpRequestWorker *worker);
    void getSubtitleCallback(OAIHttpRequestWorker *worker);
    void getSubtitlePlaylistCallback(OAIHttpRequestWorker *worker);
    void getSubtitleWithTicksCallback(OAIHttpRequestWorker *worker);
    void searchRemoteSubtitlesCallback(OAIHttpRequestWorker *worker);
    void uploadSubtitleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteSubtitleSignal();
    void downloadRemoteSubtitlesSignal();
    void getFallbackFontSignal(OAIHttpFileElement summary);
    void getFallbackFontListSignal(QList<OAIFontFile> summary);
    void getRemoteSubtitlesSignal(OAIHttpFileElement summary);
    void getSubtitleSignal(OAIHttpFileElement summary);
    void getSubtitlePlaylistSignal(OAIHttpFileElement summary);
    void getSubtitleWithTicksSignal(OAIHttpFileElement summary);
    void searchRemoteSubtitlesSignal(QList<OAIRemoteSubtitleInfo> summary);
    void uploadSubtitleSignal();


    void deleteSubtitleSignalFull(OAIHttpRequestWorker *worker);
    void downloadRemoteSubtitlesSignalFull(OAIHttpRequestWorker *worker);
    void getFallbackFontSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getFallbackFontListSignalFull(OAIHttpRequestWorker *worker, QList<OAIFontFile> summary);
    void getRemoteSubtitlesSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getSubtitleSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getSubtitlePlaylistSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getSubtitleWithTicksSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void searchRemoteSubtitlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteSubtitleInfo> summary);
    void uploadSubtitleSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteSubtitleSignalError() instead")
    void deleteSubtitleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubtitleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadRemoteSubtitlesSignalError() instead")
    void downloadRemoteSubtitlesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadRemoteSubtitlesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFallbackFontSignalError() instead")
    void getFallbackFontSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFallbackFontSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFallbackFontListSignalError() instead")
    void getFallbackFontListSignalE(QList<OAIFontFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFallbackFontListSignalError(QList<OAIFontFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteSubtitlesSignalError() instead")
    void getRemoteSubtitlesSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteSubtitlesSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubtitleSignalError() instead")
    void getSubtitleSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubtitleSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubtitlePlaylistSignalError() instead")
    void getSubtitlePlaylistSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubtitlePlaylistSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubtitleWithTicksSignalError() instead")
    void getSubtitleWithTicksSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubtitleWithTicksSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRemoteSubtitlesSignalError() instead")
    void searchRemoteSubtitlesSignalE(QList<OAIRemoteSubtitleInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRemoteSubtitlesSignalError(QList<OAIRemoteSubtitleInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadSubtitleSignalError() instead")
    void uploadSubtitleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadSubtitleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteSubtitleSignalErrorFull() instead")
    void deleteSubtitleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubtitleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadRemoteSubtitlesSignalErrorFull() instead")
    void downloadRemoteSubtitlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadRemoteSubtitlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFallbackFontSignalErrorFull() instead")
    void getFallbackFontSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFallbackFontSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFallbackFontListSignalErrorFull() instead")
    void getFallbackFontListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFallbackFontListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteSubtitlesSignalErrorFull() instead")
    void getRemoteSubtitlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteSubtitlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubtitleSignalErrorFull() instead")
    void getSubtitleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubtitleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubtitlePlaylistSignalErrorFull() instead")
    void getSubtitlePlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubtitlePlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubtitleWithTicksSignalErrorFull() instead")
    void getSubtitleWithTicksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubtitleWithTicksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRemoteSubtitlesSignalErrorFull() instead")
    void searchRemoteSubtitlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRemoteSubtitlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadSubtitleSignalErrorFull() instead")
    void uploadSubtitleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadSubtitleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
