/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginInfo::OAIPluginInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginInfo::OAIPluginInfo() {
    this->initializeModel();
}

OAIPluginInfo::~OAIPluginInfo() {}

void OAIPluginInfo::initializeModel() {

    m_can_uninstall_isSet = false;
    m_can_uninstall_isValid = false;

    m_configuration_file_name_isSet = false;
    m_configuration_file_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_has_image_isSet = false;
    m_has_image_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPluginInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginInfo::fromJsonObject(QJsonObject json) {

    m_can_uninstall_isValid = ::OpenAPI::fromJsonValue(m_can_uninstall, json[QString("CanUninstall")]);
    m_can_uninstall_isSet = !json[QString("CanUninstall")].isNull() && m_can_uninstall_isValid;

    m_configuration_file_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_file_name, json[QString("ConfigurationFileName")]);
    m_configuration_file_name_isSet = !json[QString("ConfigurationFileName")].isNull() && m_configuration_file_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_has_image_isValid = ::OpenAPI::fromJsonValue(m_has_image, json[QString("HasImage")]);
    m_has_image_isSet = !json[QString("HasImage")].isNull() && m_has_image_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIPluginInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_can_uninstall_isSet) {
        obj.insert(QString("CanUninstall"), ::OpenAPI::toJsonValue(m_can_uninstall));
    }
    if (m_configuration_file_name_isSet) {
        obj.insert(QString("ConfigurationFileName"), ::OpenAPI::toJsonValue(m_configuration_file_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_has_image_isSet) {
        obj.insert(QString("HasImage"), ::OpenAPI::toJsonValue(m_has_image));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version.isSet()) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIPluginInfo::isCanUninstall() const {
    return m_can_uninstall;
}
void OAIPluginInfo::setCanUninstall(const bool &can_uninstall) {
    m_can_uninstall = can_uninstall;
    m_can_uninstall_isSet = true;
}

bool OAIPluginInfo::is_can_uninstall_Set() const{
    return m_can_uninstall_isSet;
}

bool OAIPluginInfo::is_can_uninstall_Valid() const{
    return m_can_uninstall_isValid;
}

QString OAIPluginInfo::getConfigurationFileName() const {
    return m_configuration_file_name;
}
void OAIPluginInfo::setConfigurationFileName(const QString &configuration_file_name) {
    m_configuration_file_name = configuration_file_name;
    m_configuration_file_name_isSet = true;
}

bool OAIPluginInfo::is_configuration_file_name_Set() const{
    return m_configuration_file_name_isSet;
}

bool OAIPluginInfo::is_configuration_file_name_Valid() const{
    return m_configuration_file_name_isValid;
}

QString OAIPluginInfo::getDescription() const {
    return m_description;
}
void OAIPluginInfo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPluginInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPluginInfo::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPluginInfo::isHasImage() const {
    return m_has_image;
}
void OAIPluginInfo::setHasImage(const bool &has_image) {
    m_has_image = has_image;
    m_has_image_isSet = true;
}

bool OAIPluginInfo::is_has_image_Set() const{
    return m_has_image_isSet;
}

bool OAIPluginInfo::is_has_image_Valid() const{
    return m_has_image_isValid;
}

QString OAIPluginInfo::getId() const {
    return m_id;
}
void OAIPluginInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPluginInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPluginInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPluginInfo::getName() const {
    return m_name;
}
void OAIPluginInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPluginInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPluginInfo::is_name_Valid() const{
    return m_name_isValid;
}

OAIPluginStatus OAIPluginInfo::getStatus() const {
    return m_status;
}
void OAIPluginInfo::setStatus(const OAIPluginStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPluginInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPluginInfo::is_status_Valid() const{
    return m_status_isValid;
}

OAIVersion OAIPluginInfo::getVersion() const {
    return m_version;
}
void OAIPluginInfo::setVersion(const OAIVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPluginInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPluginInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPluginInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_uninstall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
