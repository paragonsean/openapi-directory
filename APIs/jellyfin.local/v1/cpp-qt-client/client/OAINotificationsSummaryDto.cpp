/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationsSummaryDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationsSummaryDto::OAINotificationsSummaryDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationsSummaryDto::OAINotificationsSummaryDto() {
    this->initializeModel();
}

OAINotificationsSummaryDto::~OAINotificationsSummaryDto() {}

void OAINotificationsSummaryDto::initializeModel() {

    m_max_unread_notification_level_isSet = false;
    m_max_unread_notification_level_isValid = false;

    m_unread_count_isSet = false;
    m_unread_count_isValid = false;
}

void OAINotificationsSummaryDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationsSummaryDto::fromJsonObject(QJsonObject json) {

    m_max_unread_notification_level_isValid = ::OpenAPI::fromJsonValue(m_max_unread_notification_level, json[QString("MaxUnreadNotificationLevel")]);
    m_max_unread_notification_level_isSet = !json[QString("MaxUnreadNotificationLevel")].isNull() && m_max_unread_notification_level_isValid;

    m_unread_count_isValid = ::OpenAPI::fromJsonValue(m_unread_count, json[QString("UnreadCount")]);
    m_unread_count_isSet = !json[QString("UnreadCount")].isNull() && m_unread_count_isValid;
}

QString OAINotificationsSummaryDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationsSummaryDto::asJsonObject() const {
    QJsonObject obj;
    if (m_max_unread_notification_level.isSet()) {
        obj.insert(QString("MaxUnreadNotificationLevel"), ::OpenAPI::toJsonValue(m_max_unread_notification_level));
    }
    if (m_unread_count_isSet) {
        obj.insert(QString("UnreadCount"), ::OpenAPI::toJsonValue(m_unread_count));
    }
    return obj;
}

OAINotificationLevel OAINotificationsSummaryDto::getMaxUnreadNotificationLevel() const {
    return m_max_unread_notification_level;
}
void OAINotificationsSummaryDto::setMaxUnreadNotificationLevel(const OAINotificationLevel &max_unread_notification_level) {
    m_max_unread_notification_level = max_unread_notification_level;
    m_max_unread_notification_level_isSet = true;
}

bool OAINotificationsSummaryDto::is_max_unread_notification_level_Set() const{
    return m_max_unread_notification_level_isSet;
}

bool OAINotificationsSummaryDto::is_max_unread_notification_level_Valid() const{
    return m_max_unread_notification_level_isValid;
}

qint32 OAINotificationsSummaryDto::getUnreadCount() const {
    return m_unread_count;
}
void OAINotificationsSummaryDto::setUnreadCount(const qint32 &unread_count) {
    m_unread_count = unread_count;
    m_unread_count_isSet = true;
}

bool OAINotificationsSummaryDto::is_unread_count_Set() const{
    return m_unread_count_isSet;
}

bool OAINotificationsSummaryDto::is_unread_count_Valid() const{
    return m_unread_count_isValid;
}

bool OAINotificationsSummaryDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_unread_notification_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationsSummaryDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
