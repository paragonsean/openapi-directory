/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPluginsApi_H
#define OAI_OAIPluginsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIObject.h"
#include "OAIPluginInfo.h"
#include "OAIPluginSecurityInfo.h"
#include "OAIProblemDetails.h"
#include "OAIVersion.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPluginsApi : public QObject {
    Q_OBJECT

public:
    OAIPluginsApi(const int timeOut = 0);
    ~OAIPluginsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  plugin_id QString [required]
    * @param[in]  version OAIVersion [required]
    */
    virtual void disablePlugin(const QString &plugin_id, const OAIVersion &version);

    /**
    * @param[in]  plugin_id QString [required]
    * @param[in]  version OAIVersion [required]
    */
    virtual void enablePlugin(const QString &plugin_id, const OAIVersion &version);

    /**
    * @param[in]  plugin_id QString [required]
    */
    virtual void getPluginConfiguration(const QString &plugin_id);

    /**
    * @param[in]  plugin_id QString [required]
    * @param[in]  version OAIVersion [required]
    */
    virtual void getPluginImage(const QString &plugin_id, const OAIVersion &version);

    /**
    * @param[in]  plugin_id QString [required]
    */
    virtual void getPluginManifest(const QString &plugin_id);


    virtual void getPlugins();

    /**
    * @param[in]  plugin_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void uninstallPlugin(const QString &plugin_id);

    /**
    * @param[in]  plugin_id QString [required]
    * @param[in]  version OAIVersion [required]
    */
    virtual void uninstallPluginByVersion(const QString &plugin_id, const OAIVersion &version);

    /**
    * @param[in]  plugin_id QString [required]
    */
    virtual void updatePluginConfiguration(const QString &plugin_id);

    /**
    * @param[in]  oai_plugin_security_info OAIPluginSecurityInfo [required]
    */
    Q_DECL_DEPRECATED virtual void updatePluginSecurityInfo(const OAIPluginSecurityInfo &oai_plugin_security_info);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void disablePluginCallback(OAIHttpRequestWorker *worker);
    void enablePluginCallback(OAIHttpRequestWorker *worker);
    void getPluginConfigurationCallback(OAIHttpRequestWorker *worker);
    void getPluginImageCallback(OAIHttpRequestWorker *worker);
    void getPluginManifestCallback(OAIHttpRequestWorker *worker);
    void getPluginsCallback(OAIHttpRequestWorker *worker);
    void uninstallPluginCallback(OAIHttpRequestWorker *worker);
    void uninstallPluginByVersionCallback(OAIHttpRequestWorker *worker);
    void updatePluginConfigurationCallback(OAIHttpRequestWorker *worker);
    void updatePluginSecurityInfoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void disablePluginSignal();
    void enablePluginSignal();
    void getPluginConfigurationSignal(OAIObject summary);
    void getPluginImageSignal(OAIHttpFileElement summary);
    void getPluginManifestSignal();
    void getPluginsSignal(QList<OAIPluginInfo> summary);
    void uninstallPluginSignal();
    void uninstallPluginByVersionSignal();
    void updatePluginConfigurationSignal();
    void updatePluginSecurityInfoSignal();


    void disablePluginSignalFull(OAIHttpRequestWorker *worker);
    void enablePluginSignalFull(OAIHttpRequestWorker *worker);
    void getPluginConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getPluginImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPluginManifestSignalFull(OAIHttpRequestWorker *worker);
    void getPluginsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPluginInfo> summary);
    void uninstallPluginSignalFull(OAIHttpRequestWorker *worker);
    void uninstallPluginByVersionSignalFull(OAIHttpRequestWorker *worker);
    void updatePluginConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void updatePluginSecurityInfoSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use disablePluginSignalError() instead")
    void disablePluginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disablePluginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enablePluginSignalError() instead")
    void enablePluginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enablePluginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPluginConfigurationSignalError() instead")
    void getPluginConfigurationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPluginConfigurationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPluginImageSignalError() instead")
    void getPluginImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPluginImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPluginManifestSignalError() instead")
    void getPluginManifestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPluginManifestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPluginsSignalError() instead")
    void getPluginsSignalE(QList<OAIPluginInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPluginsSignalError(QList<OAIPluginInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uninstallPluginSignalError() instead")
    void uninstallPluginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uninstallPluginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uninstallPluginByVersionSignalError() instead")
    void uninstallPluginByVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uninstallPluginByVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePluginConfigurationSignalError() instead")
    void updatePluginConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePluginConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePluginSecurityInfoSignalError() instead")
    void updatePluginSecurityInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePluginSecurityInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use disablePluginSignalErrorFull() instead")
    void disablePluginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disablePluginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enablePluginSignalErrorFull() instead")
    void enablePluginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enablePluginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPluginConfigurationSignalErrorFull() instead")
    void getPluginConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPluginConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPluginImageSignalErrorFull() instead")
    void getPluginImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPluginImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPluginManifestSignalErrorFull() instead")
    void getPluginManifestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPluginManifestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPluginsSignalErrorFull() instead")
    void getPluginsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPluginsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uninstallPluginSignalErrorFull() instead")
    void uninstallPluginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uninstallPluginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uninstallPluginByVersionSignalErrorFull() instead")
    void uninstallPluginByVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uninstallPluginByVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePluginConfigurationSignalErrorFull() instead")
    void updatePluginConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePluginConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePluginSecurityInfoSignalErrorFull() instead")
    void updatePluginSecurityInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePluginSecurityInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
