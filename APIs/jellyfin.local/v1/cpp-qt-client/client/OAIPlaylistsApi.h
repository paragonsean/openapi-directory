/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlaylistsApi_H
#define OAI_OAIPlaylistsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaseItemDtoQueryResult.h"
#include "OAICreatePlaylistDto.h"
#include "OAIImageType.h"
#include "OAIItemFields.h"
#include "OAIPlaylistCreationResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlaylistsApi : public QObject {
    Q_OBJECT

public:
    OAIPlaylistsApi(const int timeOut = 0);
    ~OAIPlaylistsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    */
    virtual void addToPlaylist(const QString &playlist_id, const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  media_type QString [optional]
    * @param[in]  oai_create_playlist_dto OAICreatePlaylistDto [optional]
    */
    virtual void createPlaylist(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreatePlaylistDto> &oai_create_playlist_dto = ::OpenAPI::OptionalParam<OAICreatePlaylistDto>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    */
    virtual void getPlaylistItems(const QString &playlist_id, const QString &user_id, const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>());

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  new_index qint32 [required]
    */
    virtual void moveItem(const QString &playlist_id, const QString &item_id, const qint32 &new_index);

    /**
    * @param[in]  playlist_id QString [required]
    * @param[in]  entry_ids QList<QString> [optional]
    */
    virtual void removeFromPlaylist(const QString &playlist_id, const ::OpenAPI::OptionalParam<QList<QString>> &entry_ids = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addToPlaylistCallback(OAIHttpRequestWorker *worker);
    void createPlaylistCallback(OAIHttpRequestWorker *worker);
    void getPlaylistItemsCallback(OAIHttpRequestWorker *worker);
    void moveItemCallback(OAIHttpRequestWorker *worker);
    void removeFromPlaylistCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addToPlaylistSignal();
    void createPlaylistSignal(OAIPlaylistCreationResult summary);
    void getPlaylistItemsSignal(OAIBaseItemDtoQueryResult summary);
    void moveItemSignal();
    void removeFromPlaylistSignal();


    void addToPlaylistSignalFull(OAIHttpRequestWorker *worker);
    void createPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIPlaylistCreationResult summary);
    void getPlaylistItemsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void moveItemSignalFull(OAIHttpRequestWorker *worker);
    void removeFromPlaylistSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addToPlaylistSignalError() instead")
    void addToPlaylistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addToPlaylistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPlaylistSignalError() instead")
    void createPlaylistSignalE(OAIPlaylistCreationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlaylistSignalError(OAIPlaylistCreationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaylistItemsSignalError() instead")
    void getPlaylistItemsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaylistItemsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveItemSignalError() instead")
    void moveItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFromPlaylistSignalError() instead")
    void removeFromPlaylistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeFromPlaylistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addToPlaylistSignalErrorFull() instead")
    void addToPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addToPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPlaylistSignalErrorFull() instead")
    void createPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaylistItemsSignalErrorFull() instead")
    void getPlaylistItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaylistItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveItemSignalErrorFull() instead")
    void moveItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFromPlaylistSignalErrorFull() instead")
    void removeFromPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFromPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
