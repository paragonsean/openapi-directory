/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDto::OAIUserDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDto::OAIUserDto() {
    this->initializeModel();
}

OAIUserDto::~OAIUserDto() {}

void OAIUserDto::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_enable_auto_login_isSet = false;
    m_enable_auto_login_isValid = false;

    m_has_configured_easy_password_isSet = false;
    m_has_configured_easy_password_isValid = false;

    m_has_configured_password_isSet = false;
    m_has_configured_password_isValid = false;

    m_has_password_isSet = false;
    m_has_password_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_activity_date_isSet = false;
    m_last_activity_date_isValid = false;

    m_last_login_date_isSet = false;
    m_last_login_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_primary_image_aspect_ratio_isSet = false;
    m_primary_image_aspect_ratio_isValid = false;

    m_primary_image_tag_isSet = false;
    m_primary_image_tag_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;
}

void OAIUserDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDto::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_enable_auto_login_isValid = ::OpenAPI::fromJsonValue(m_enable_auto_login, json[QString("EnableAutoLogin")]);
    m_enable_auto_login_isSet = !json[QString("EnableAutoLogin")].isNull() && m_enable_auto_login_isValid;

    m_has_configured_easy_password_isValid = ::OpenAPI::fromJsonValue(m_has_configured_easy_password, json[QString("HasConfiguredEasyPassword")]);
    m_has_configured_easy_password_isSet = !json[QString("HasConfiguredEasyPassword")].isNull() && m_has_configured_easy_password_isValid;

    m_has_configured_password_isValid = ::OpenAPI::fromJsonValue(m_has_configured_password, json[QString("HasConfiguredPassword")]);
    m_has_configured_password_isSet = !json[QString("HasConfiguredPassword")].isNull() && m_has_configured_password_isValid;

    m_has_password_isValid = ::OpenAPI::fromJsonValue(m_has_password, json[QString("HasPassword")]);
    m_has_password_isSet = !json[QString("HasPassword")].isNull() && m_has_password_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_last_activity_date_isValid = ::OpenAPI::fromJsonValue(m_last_activity_date, json[QString("LastActivityDate")]);
    m_last_activity_date_isSet = !json[QString("LastActivityDate")].isNull() && m_last_activity_date_isValid;

    m_last_login_date_isValid = ::OpenAPI::fromJsonValue(m_last_login_date, json[QString("LastLoginDate")]);
    m_last_login_date_isSet = !json[QString("LastLoginDate")].isNull() && m_last_login_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;

    m_primary_image_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_primary_image_aspect_ratio, json[QString("PrimaryImageAspectRatio")]);
    m_primary_image_aspect_ratio_isSet = !json[QString("PrimaryImageAspectRatio")].isNull() && m_primary_image_aspect_ratio_isValid;

    m_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_primary_image_tag, json[QString("PrimaryImageTag")]);
    m_primary_image_tag_isSet = !json[QString("PrimaryImageTag")].isNull() && m_primary_image_tag_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("ServerName")]);
    m_server_name_isSet = !json[QString("ServerName")].isNull() && m_server_name_isValid;
}

QString OAIUserDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDto::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_enable_auto_login_isSet) {
        obj.insert(QString("EnableAutoLogin"), ::OpenAPI::toJsonValue(m_enable_auto_login));
    }
    if (m_has_configured_easy_password_isSet) {
        obj.insert(QString("HasConfiguredEasyPassword"), ::OpenAPI::toJsonValue(m_has_configured_easy_password));
    }
    if (m_has_configured_password_isSet) {
        obj.insert(QString("HasConfiguredPassword"), ::OpenAPI::toJsonValue(m_has_configured_password));
    }
    if (m_has_password_isSet) {
        obj.insert(QString("HasPassword"), ::OpenAPI::toJsonValue(m_has_password));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_activity_date_isSet) {
        obj.insert(QString("LastActivityDate"), ::OpenAPI::toJsonValue(m_last_activity_date));
    }
    if (m_last_login_date_isSet) {
        obj.insert(QString("LastLoginDate"), ::OpenAPI::toJsonValue(m_last_login_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_primary_image_aspect_ratio_isSet) {
        obj.insert(QString("PrimaryImageAspectRatio"), ::OpenAPI::toJsonValue(m_primary_image_aspect_ratio));
    }
    if (m_primary_image_tag_isSet) {
        obj.insert(QString("PrimaryImageTag"), ::OpenAPI::toJsonValue(m_primary_image_tag));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("ServerName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    return obj;
}

OAIUserConfiguration OAIUserDto::getConfiguration() const {
    return m_configuration;
}
void OAIUserDto::setConfiguration(const OAIUserConfiguration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIUserDto::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIUserDto::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAIUserDto::isEnableAutoLogin() const {
    return m_enable_auto_login;
}
void OAIUserDto::setEnableAutoLogin(const bool &enable_auto_login) {
    m_enable_auto_login = enable_auto_login;
    m_enable_auto_login_isSet = true;
}

bool OAIUserDto::is_enable_auto_login_Set() const{
    return m_enable_auto_login_isSet;
}

bool OAIUserDto::is_enable_auto_login_Valid() const{
    return m_enable_auto_login_isValid;
}

bool OAIUserDto::isHasConfiguredEasyPassword() const {
    return m_has_configured_easy_password;
}
void OAIUserDto::setHasConfiguredEasyPassword(const bool &has_configured_easy_password) {
    m_has_configured_easy_password = has_configured_easy_password;
    m_has_configured_easy_password_isSet = true;
}

bool OAIUserDto::is_has_configured_easy_password_Set() const{
    return m_has_configured_easy_password_isSet;
}

bool OAIUserDto::is_has_configured_easy_password_Valid() const{
    return m_has_configured_easy_password_isValid;
}

bool OAIUserDto::isHasConfiguredPassword() const {
    return m_has_configured_password;
}
void OAIUserDto::setHasConfiguredPassword(const bool &has_configured_password) {
    m_has_configured_password = has_configured_password;
    m_has_configured_password_isSet = true;
}

bool OAIUserDto::is_has_configured_password_Set() const{
    return m_has_configured_password_isSet;
}

bool OAIUserDto::is_has_configured_password_Valid() const{
    return m_has_configured_password_isValid;
}

bool OAIUserDto::isHasPassword() const {
    return m_has_password;
}
void OAIUserDto::setHasPassword(const bool &has_password) {
    m_has_password = has_password;
    m_has_password_isSet = true;
}

bool OAIUserDto::is_has_password_Set() const{
    return m_has_password_isSet;
}

bool OAIUserDto::is_has_password_Valid() const{
    return m_has_password_isValid;
}

QString OAIUserDto::getId() const {
    return m_id;
}
void OAIUserDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserDto::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIUserDto::getLastActivityDate() const {
    return m_last_activity_date;
}
void OAIUserDto::setLastActivityDate(const QDateTime &last_activity_date) {
    m_last_activity_date = last_activity_date;
    m_last_activity_date_isSet = true;
}

bool OAIUserDto::is_last_activity_date_Set() const{
    return m_last_activity_date_isSet;
}

bool OAIUserDto::is_last_activity_date_Valid() const{
    return m_last_activity_date_isValid;
}

QDateTime OAIUserDto::getLastLoginDate() const {
    return m_last_login_date;
}
void OAIUserDto::setLastLoginDate(const QDateTime &last_login_date) {
    m_last_login_date = last_login_date;
    m_last_login_date_isSet = true;
}

bool OAIUserDto::is_last_login_date_Set() const{
    return m_last_login_date_isSet;
}

bool OAIUserDto::is_last_login_date_Valid() const{
    return m_last_login_date_isValid;
}

QString OAIUserDto::getName() const {
    return m_name;
}
void OAIUserDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserDto::is_name_Valid() const{
    return m_name_isValid;
}

OAIUserPolicy OAIUserDto::getPolicy() const {
    return m_policy;
}
void OAIUserDto::setPolicy(const OAIUserPolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIUserDto::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIUserDto::is_policy_Valid() const{
    return m_policy_isValid;
}

double OAIUserDto::getPrimaryImageAspectRatio() const {
    return m_primary_image_aspect_ratio;
}
void OAIUserDto::setPrimaryImageAspectRatio(const double &primary_image_aspect_ratio) {
    m_primary_image_aspect_ratio = primary_image_aspect_ratio;
    m_primary_image_aspect_ratio_isSet = true;
}

bool OAIUserDto::is_primary_image_aspect_ratio_Set() const{
    return m_primary_image_aspect_ratio_isSet;
}

bool OAIUserDto::is_primary_image_aspect_ratio_Valid() const{
    return m_primary_image_aspect_ratio_isValid;
}

QString OAIUserDto::getPrimaryImageTag() const {
    return m_primary_image_tag;
}
void OAIUserDto::setPrimaryImageTag(const QString &primary_image_tag) {
    m_primary_image_tag = primary_image_tag;
    m_primary_image_tag_isSet = true;
}

bool OAIUserDto::is_primary_image_tag_Set() const{
    return m_primary_image_tag_isSet;
}

bool OAIUserDto::is_primary_image_tag_Valid() const{
    return m_primary_image_tag_isValid;
}

QString OAIUserDto::getServerId() const {
    return m_server_id;
}
void OAIUserDto::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIUserDto::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIUserDto::is_server_id_Valid() const{
    return m_server_id_isValid;
}

QString OAIUserDto::getServerName() const {
    return m_server_name;
}
void OAIUserDto::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIUserDto::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIUserDto::is_server_name_Valid() const{
    return m_server_name_isValid;
}

bool OAIUserDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_auto_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_configured_easy_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_configured_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
