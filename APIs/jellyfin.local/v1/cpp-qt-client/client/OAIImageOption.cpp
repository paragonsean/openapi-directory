/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageOption::OAIImageOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageOption::OAIImageOption() {
    this->initializeModel();
}

OAIImageOption::~OAIImageOption() {}

void OAIImageOption::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_min_width_isSet = false;
    m_min_width_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImageOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageOption::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_min_width_isValid = ::OpenAPI::fromJsonValue(m_min_width, json[QString("MinWidth")]);
    m_min_width_isSet = !json[QString("MinWidth")].isNull() && m_min_width_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIImageOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageOption::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_min_width_isSet) {
        obj.insert(QString("MinWidth"), ::OpenAPI::toJsonValue(m_min_width));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIImageOption::getLimit() const {
    return m_limit;
}
void OAIImageOption::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIImageOption::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIImageOption::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIImageOption::getMinWidth() const {
    return m_min_width;
}
void OAIImageOption::setMinWidth(const qint32 &min_width) {
    m_min_width = min_width;
    m_min_width_isSet = true;
}

bool OAIImageOption::is_min_width_Set() const{
    return m_min_width_isSet;
}

bool OAIImageOption::is_min_width_Valid() const{
    return m_min_width_isValid;
}

OAIImageType OAIImageOption::getType() const {
    return m_type;
}
void OAIImageOption::setType(const OAIImageType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImageOption::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImageOption::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImageOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
