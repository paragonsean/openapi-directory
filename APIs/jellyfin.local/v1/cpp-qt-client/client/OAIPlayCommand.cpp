/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayCommand::OAIPlayCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayCommand::OAIPlayCommand() {
    this->initializeModel();
}

OAIPlayCommand::~OAIPlayCommand() {}

void OAIPlayCommand::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlayCommand::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlayCommand::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PlayNow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayCommand::PLAYNOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayNext", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayCommand::PLAYNEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayLast", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayCommand::PLAYLAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayInstantMix", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayCommand::PLAYINSTANTMIX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PlayShuffle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayCommand::PLAYSHUFFLE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlayCommand::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlayCommand::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlayCommand::PLAYNOW:
            val = "PlayNow";
            break;
        case eOAIPlayCommand::PLAYNEXT:
            val = "PlayNext";
            break;
        case eOAIPlayCommand::PLAYLAST:
            val = "PlayLast";
            break;
        case eOAIPlayCommand::PLAYINSTANTMIX:
            val = "PlayInstantMix";
            break;
        case eOAIPlayCommand::PLAYSHUFFLE:
            val = "PlayShuffle";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlayCommand::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlayCommand::eOAIPlayCommand OAIPlayCommand::getValue() const {
    return m_value;
}

void OAIPlayCommand::setValue(const OAIPlayCommand::eOAIPlayCommand& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlayCommand::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlayCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
