/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserItemDataDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserItemDataDto::OAIUserItemDataDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserItemDataDto::OAIUserItemDataDto() {
    this->initializeModel();
}

OAIUserItemDataDto::~OAIUserItemDataDto() {}

void OAIUserItemDataDto::initializeModel() {

    m_is_favorite_isSet = false;
    m_is_favorite_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_played_date_isSet = false;
    m_last_played_date_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_play_count_isSet = false;
    m_play_count_isValid = false;

    m_playback_position_ticks_isSet = false;
    m_playback_position_ticks_isValid = false;

    m_played_isSet = false;
    m_played_isValid = false;

    m_played_percentage_isSet = false;
    m_played_percentage_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_unplayed_item_count_isSet = false;
    m_unplayed_item_count_isValid = false;
}

void OAIUserItemDataDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserItemDataDto::fromJsonObject(QJsonObject json) {

    m_is_favorite_isValid = ::OpenAPI::fromJsonValue(m_is_favorite, json[QString("IsFavorite")]);
    m_is_favorite_isSet = !json[QString("IsFavorite")].isNull() && m_is_favorite_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemId")]);
    m_item_id_isSet = !json[QString("ItemId")].isNull() && m_item_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_last_played_date_isValid = ::OpenAPI::fromJsonValue(m_last_played_date, json[QString("LastPlayedDate")]);
    m_last_played_date_isSet = !json[QString("LastPlayedDate")].isNull() && m_last_played_date_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("Likes")]);
    m_likes_isSet = !json[QString("Likes")].isNull() && m_likes_isValid;

    m_play_count_isValid = ::OpenAPI::fromJsonValue(m_play_count, json[QString("PlayCount")]);
    m_play_count_isSet = !json[QString("PlayCount")].isNull() && m_play_count_isValid;

    m_playback_position_ticks_isValid = ::OpenAPI::fromJsonValue(m_playback_position_ticks, json[QString("PlaybackPositionTicks")]);
    m_playback_position_ticks_isSet = !json[QString("PlaybackPositionTicks")].isNull() && m_playback_position_ticks_isValid;

    m_played_isValid = ::OpenAPI::fromJsonValue(m_played, json[QString("Played")]);
    m_played_isSet = !json[QString("Played")].isNull() && m_played_isValid;

    m_played_percentage_isValid = ::OpenAPI::fromJsonValue(m_played_percentage, json[QString("PlayedPercentage")]);
    m_played_percentage_isSet = !json[QString("PlayedPercentage")].isNull() && m_played_percentage_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("Rating")]);
    m_rating_isSet = !json[QString("Rating")].isNull() && m_rating_isValid;

    m_unplayed_item_count_isValid = ::OpenAPI::fromJsonValue(m_unplayed_item_count, json[QString("UnplayedItemCount")]);
    m_unplayed_item_count_isSet = !json[QString("UnplayedItemCount")].isNull() && m_unplayed_item_count_isValid;
}

QString OAIUserItemDataDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserItemDataDto::asJsonObject() const {
    QJsonObject obj;
    if (m_is_favorite_isSet) {
        obj.insert(QString("IsFavorite"), ::OpenAPI::toJsonValue(m_is_favorite));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_played_date_isSet) {
        obj.insert(QString("LastPlayedDate"), ::OpenAPI::toJsonValue(m_last_played_date));
    }
    if (m_likes_isSet) {
        obj.insert(QString("Likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_play_count_isSet) {
        obj.insert(QString("PlayCount"), ::OpenAPI::toJsonValue(m_play_count));
    }
    if (m_playback_position_ticks_isSet) {
        obj.insert(QString("PlaybackPositionTicks"), ::OpenAPI::toJsonValue(m_playback_position_ticks));
    }
    if (m_played_isSet) {
        obj.insert(QString("Played"), ::OpenAPI::toJsonValue(m_played));
    }
    if (m_played_percentage_isSet) {
        obj.insert(QString("PlayedPercentage"), ::OpenAPI::toJsonValue(m_played_percentage));
    }
    if (m_rating_isSet) {
        obj.insert(QString("Rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_unplayed_item_count_isSet) {
        obj.insert(QString("UnplayedItemCount"), ::OpenAPI::toJsonValue(m_unplayed_item_count));
    }
    return obj;
}

bool OAIUserItemDataDto::isIsFavorite() const {
    return m_is_favorite;
}
void OAIUserItemDataDto::setIsFavorite(const bool &is_favorite) {
    m_is_favorite = is_favorite;
    m_is_favorite_isSet = true;
}

bool OAIUserItemDataDto::is_is_favorite_Set() const{
    return m_is_favorite_isSet;
}

bool OAIUserItemDataDto::is_is_favorite_Valid() const{
    return m_is_favorite_isValid;
}

QString OAIUserItemDataDto::getItemId() const {
    return m_item_id;
}
void OAIUserItemDataDto::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIUserItemDataDto::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIUserItemDataDto::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIUserItemDataDto::getKey() const {
    return m_key;
}
void OAIUserItemDataDto::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIUserItemDataDto::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUserItemDataDto::is_key_Valid() const{
    return m_key_isValid;
}

QDateTime OAIUserItemDataDto::getLastPlayedDate() const {
    return m_last_played_date;
}
void OAIUserItemDataDto::setLastPlayedDate(const QDateTime &last_played_date) {
    m_last_played_date = last_played_date;
    m_last_played_date_isSet = true;
}

bool OAIUserItemDataDto::is_last_played_date_Set() const{
    return m_last_played_date_isSet;
}

bool OAIUserItemDataDto::is_last_played_date_Valid() const{
    return m_last_played_date_isValid;
}

bool OAIUserItemDataDto::isLikes() const {
    return m_likes;
}
void OAIUserItemDataDto::setLikes(const bool &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIUserItemDataDto::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIUserItemDataDto::is_likes_Valid() const{
    return m_likes_isValid;
}

qint32 OAIUserItemDataDto::getPlayCount() const {
    return m_play_count;
}
void OAIUserItemDataDto::setPlayCount(const qint32 &play_count) {
    m_play_count = play_count;
    m_play_count_isSet = true;
}

bool OAIUserItemDataDto::is_play_count_Set() const{
    return m_play_count_isSet;
}

bool OAIUserItemDataDto::is_play_count_Valid() const{
    return m_play_count_isValid;
}

qint64 OAIUserItemDataDto::getPlaybackPositionTicks() const {
    return m_playback_position_ticks;
}
void OAIUserItemDataDto::setPlaybackPositionTicks(const qint64 &playback_position_ticks) {
    m_playback_position_ticks = playback_position_ticks;
    m_playback_position_ticks_isSet = true;
}

bool OAIUserItemDataDto::is_playback_position_ticks_Set() const{
    return m_playback_position_ticks_isSet;
}

bool OAIUserItemDataDto::is_playback_position_ticks_Valid() const{
    return m_playback_position_ticks_isValid;
}

bool OAIUserItemDataDto::isPlayed() const {
    return m_played;
}
void OAIUserItemDataDto::setPlayed(const bool &played) {
    m_played = played;
    m_played_isSet = true;
}

bool OAIUserItemDataDto::is_played_Set() const{
    return m_played_isSet;
}

bool OAIUserItemDataDto::is_played_Valid() const{
    return m_played_isValid;
}

double OAIUserItemDataDto::getPlayedPercentage() const {
    return m_played_percentage;
}
void OAIUserItemDataDto::setPlayedPercentage(const double &played_percentage) {
    m_played_percentage = played_percentage;
    m_played_percentage_isSet = true;
}

bool OAIUserItemDataDto::is_played_percentage_Set() const{
    return m_played_percentage_isSet;
}

bool OAIUserItemDataDto::is_played_percentage_Valid() const{
    return m_played_percentage_isValid;
}

double OAIUserItemDataDto::getRating() const {
    return m_rating;
}
void OAIUserItemDataDto::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIUserItemDataDto::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIUserItemDataDto::is_rating_Valid() const{
    return m_rating_isValid;
}

qint32 OAIUserItemDataDto::getUnplayedItemCount() const {
    return m_unplayed_item_count;
}
void OAIUserItemDataDto::setUnplayedItemCount(const qint32 &unplayed_item_count) {
    m_unplayed_item_count = unplayed_item_count;
    m_unplayed_item_count_isSet = true;
}

bool OAIUserItemDataDto::is_unplayed_item_count_Set() const{
    return m_unplayed_item_count_isSet;
}

bool OAIUserItemDataDto::is_unplayed_item_count_Valid() const{
    return m_unplayed_item_count_isValid;
}

bool OAIUserItemDataDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_favorite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_played_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_position_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_played_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unplayed_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserItemDataDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
