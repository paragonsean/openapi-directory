/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILibraryOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILibraryOptions::OAILibraryOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILibraryOptions::OAILibraryOptions() {
    this->initializeModel();
}

OAILibraryOptions::~OAILibraryOptions() {}

void OAILibraryOptions::initializeModel() {

    m_automatic_refresh_interval_days_isSet = false;
    m_automatic_refresh_interval_days_isValid = false;

    m_disabled_local_metadata_readers_isSet = false;
    m_disabled_local_metadata_readers_isValid = false;

    m_disabled_subtitle_fetchers_isSet = false;
    m_disabled_subtitle_fetchers_isValid = false;

    m_enable_automatic_series_grouping_isSet = false;
    m_enable_automatic_series_grouping_isValid = false;

    m_enable_chapter_image_extraction_isSet = false;
    m_enable_chapter_image_extraction_isValid = false;

    m_enable_embedded_episode_infos_isSet = false;
    m_enable_embedded_episode_infos_isValid = false;

    m_enable_embedded_titles_isSet = false;
    m_enable_embedded_titles_isValid = false;

    m_enable_internet_providers_isSet = false;
    m_enable_internet_providers_isValid = false;

    m_enable_photos_isSet = false;
    m_enable_photos_isValid = false;

    m_enable_realtime_monitor_isSet = false;
    m_enable_realtime_monitor_isValid = false;

    m_extract_chapter_images_during_library_scan_isSet = false;
    m_extract_chapter_images_during_library_scan_isValid = false;

    m_local_metadata_reader_order_isSet = false;
    m_local_metadata_reader_order_isValid = false;

    m_metadata_country_code_isSet = false;
    m_metadata_country_code_isValid = false;

    m_metadata_savers_isSet = false;
    m_metadata_savers_isValid = false;

    m_path_infos_isSet = false;
    m_path_infos_isValid = false;

    m_preferred_metadata_language_isSet = false;
    m_preferred_metadata_language_isValid = false;

    m_require_perfect_subtitle_match_isSet = false;
    m_require_perfect_subtitle_match_isValid = false;

    m_save_local_metadata_isSet = false;
    m_save_local_metadata_isValid = false;

    m_save_subtitles_with_media_isSet = false;
    m_save_subtitles_with_media_isValid = false;

    m_season_zero_display_name_isSet = false;
    m_season_zero_display_name_isValid = false;

    m_skip_subtitles_if_audio_track_matches_isSet = false;
    m_skip_subtitles_if_audio_track_matches_isValid = false;

    m_skip_subtitles_if_embedded_subtitles_present_isSet = false;
    m_skip_subtitles_if_embedded_subtitles_present_isValid = false;

    m_subtitle_download_languages_isSet = false;
    m_subtitle_download_languages_isValid = false;

    m_subtitle_fetcher_order_isSet = false;
    m_subtitle_fetcher_order_isValid = false;

    m_type_options_isSet = false;
    m_type_options_isValid = false;
}

void OAILibraryOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILibraryOptions::fromJsonObject(QJsonObject json) {

    m_automatic_refresh_interval_days_isValid = ::OpenAPI::fromJsonValue(m_automatic_refresh_interval_days, json[QString("AutomaticRefreshIntervalDays")]);
    m_automatic_refresh_interval_days_isSet = !json[QString("AutomaticRefreshIntervalDays")].isNull() && m_automatic_refresh_interval_days_isValid;

    m_disabled_local_metadata_readers_isValid = ::OpenAPI::fromJsonValue(m_disabled_local_metadata_readers, json[QString("DisabledLocalMetadataReaders")]);
    m_disabled_local_metadata_readers_isSet = !json[QString("DisabledLocalMetadataReaders")].isNull() && m_disabled_local_metadata_readers_isValid;

    m_disabled_subtitle_fetchers_isValid = ::OpenAPI::fromJsonValue(m_disabled_subtitle_fetchers, json[QString("DisabledSubtitleFetchers")]);
    m_disabled_subtitle_fetchers_isSet = !json[QString("DisabledSubtitleFetchers")].isNull() && m_disabled_subtitle_fetchers_isValid;

    m_enable_automatic_series_grouping_isValid = ::OpenAPI::fromJsonValue(m_enable_automatic_series_grouping, json[QString("EnableAutomaticSeriesGrouping")]);
    m_enable_automatic_series_grouping_isSet = !json[QString("EnableAutomaticSeriesGrouping")].isNull() && m_enable_automatic_series_grouping_isValid;

    m_enable_chapter_image_extraction_isValid = ::OpenAPI::fromJsonValue(m_enable_chapter_image_extraction, json[QString("EnableChapterImageExtraction")]);
    m_enable_chapter_image_extraction_isSet = !json[QString("EnableChapterImageExtraction")].isNull() && m_enable_chapter_image_extraction_isValid;

    m_enable_embedded_episode_infos_isValid = ::OpenAPI::fromJsonValue(m_enable_embedded_episode_infos, json[QString("EnableEmbeddedEpisodeInfos")]);
    m_enable_embedded_episode_infos_isSet = !json[QString("EnableEmbeddedEpisodeInfos")].isNull() && m_enable_embedded_episode_infos_isValid;

    m_enable_embedded_titles_isValid = ::OpenAPI::fromJsonValue(m_enable_embedded_titles, json[QString("EnableEmbeddedTitles")]);
    m_enable_embedded_titles_isSet = !json[QString("EnableEmbeddedTitles")].isNull() && m_enable_embedded_titles_isValid;

    m_enable_internet_providers_isValid = ::OpenAPI::fromJsonValue(m_enable_internet_providers, json[QString("EnableInternetProviders")]);
    m_enable_internet_providers_isSet = !json[QString("EnableInternetProviders")].isNull() && m_enable_internet_providers_isValid;

    m_enable_photos_isValid = ::OpenAPI::fromJsonValue(m_enable_photos, json[QString("EnablePhotos")]);
    m_enable_photos_isSet = !json[QString("EnablePhotos")].isNull() && m_enable_photos_isValid;

    m_enable_realtime_monitor_isValid = ::OpenAPI::fromJsonValue(m_enable_realtime_monitor, json[QString("EnableRealtimeMonitor")]);
    m_enable_realtime_monitor_isSet = !json[QString("EnableRealtimeMonitor")].isNull() && m_enable_realtime_monitor_isValid;

    m_extract_chapter_images_during_library_scan_isValid = ::OpenAPI::fromJsonValue(m_extract_chapter_images_during_library_scan, json[QString("ExtractChapterImagesDuringLibraryScan")]);
    m_extract_chapter_images_during_library_scan_isSet = !json[QString("ExtractChapterImagesDuringLibraryScan")].isNull() && m_extract_chapter_images_during_library_scan_isValid;

    m_local_metadata_reader_order_isValid = ::OpenAPI::fromJsonValue(m_local_metadata_reader_order, json[QString("LocalMetadataReaderOrder")]);
    m_local_metadata_reader_order_isSet = !json[QString("LocalMetadataReaderOrder")].isNull() && m_local_metadata_reader_order_isValid;

    m_metadata_country_code_isValid = ::OpenAPI::fromJsonValue(m_metadata_country_code, json[QString("MetadataCountryCode")]);
    m_metadata_country_code_isSet = !json[QString("MetadataCountryCode")].isNull() && m_metadata_country_code_isValid;

    m_metadata_savers_isValid = ::OpenAPI::fromJsonValue(m_metadata_savers, json[QString("MetadataSavers")]);
    m_metadata_savers_isSet = !json[QString("MetadataSavers")].isNull() && m_metadata_savers_isValid;

    m_path_infos_isValid = ::OpenAPI::fromJsonValue(m_path_infos, json[QString("PathInfos")]);
    m_path_infos_isSet = !json[QString("PathInfos")].isNull() && m_path_infos_isValid;

    m_preferred_metadata_language_isValid = ::OpenAPI::fromJsonValue(m_preferred_metadata_language, json[QString("PreferredMetadataLanguage")]);
    m_preferred_metadata_language_isSet = !json[QString("PreferredMetadataLanguage")].isNull() && m_preferred_metadata_language_isValid;

    m_require_perfect_subtitle_match_isValid = ::OpenAPI::fromJsonValue(m_require_perfect_subtitle_match, json[QString("RequirePerfectSubtitleMatch")]);
    m_require_perfect_subtitle_match_isSet = !json[QString("RequirePerfectSubtitleMatch")].isNull() && m_require_perfect_subtitle_match_isValid;

    m_save_local_metadata_isValid = ::OpenAPI::fromJsonValue(m_save_local_metadata, json[QString("SaveLocalMetadata")]);
    m_save_local_metadata_isSet = !json[QString("SaveLocalMetadata")].isNull() && m_save_local_metadata_isValid;

    m_save_subtitles_with_media_isValid = ::OpenAPI::fromJsonValue(m_save_subtitles_with_media, json[QString("SaveSubtitlesWithMedia")]);
    m_save_subtitles_with_media_isSet = !json[QString("SaveSubtitlesWithMedia")].isNull() && m_save_subtitles_with_media_isValid;

    m_season_zero_display_name_isValid = ::OpenAPI::fromJsonValue(m_season_zero_display_name, json[QString("SeasonZeroDisplayName")]);
    m_season_zero_display_name_isSet = !json[QString("SeasonZeroDisplayName")].isNull() && m_season_zero_display_name_isValid;

    m_skip_subtitles_if_audio_track_matches_isValid = ::OpenAPI::fromJsonValue(m_skip_subtitles_if_audio_track_matches, json[QString("SkipSubtitlesIfAudioTrackMatches")]);
    m_skip_subtitles_if_audio_track_matches_isSet = !json[QString("SkipSubtitlesIfAudioTrackMatches")].isNull() && m_skip_subtitles_if_audio_track_matches_isValid;

    m_skip_subtitles_if_embedded_subtitles_present_isValid = ::OpenAPI::fromJsonValue(m_skip_subtitles_if_embedded_subtitles_present, json[QString("SkipSubtitlesIfEmbeddedSubtitlesPresent")]);
    m_skip_subtitles_if_embedded_subtitles_present_isSet = !json[QString("SkipSubtitlesIfEmbeddedSubtitlesPresent")].isNull() && m_skip_subtitles_if_embedded_subtitles_present_isValid;

    m_subtitle_download_languages_isValid = ::OpenAPI::fromJsonValue(m_subtitle_download_languages, json[QString("SubtitleDownloadLanguages")]);
    m_subtitle_download_languages_isSet = !json[QString("SubtitleDownloadLanguages")].isNull() && m_subtitle_download_languages_isValid;

    m_subtitle_fetcher_order_isValid = ::OpenAPI::fromJsonValue(m_subtitle_fetcher_order, json[QString("SubtitleFetcherOrder")]);
    m_subtitle_fetcher_order_isSet = !json[QString("SubtitleFetcherOrder")].isNull() && m_subtitle_fetcher_order_isValid;

    m_type_options_isValid = ::OpenAPI::fromJsonValue(m_type_options, json[QString("TypeOptions")]);
    m_type_options_isSet = !json[QString("TypeOptions")].isNull() && m_type_options_isValid;
}

QString OAILibraryOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILibraryOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_refresh_interval_days_isSet) {
        obj.insert(QString("AutomaticRefreshIntervalDays"), ::OpenAPI::toJsonValue(m_automatic_refresh_interval_days));
    }
    if (m_disabled_local_metadata_readers.size() > 0) {
        obj.insert(QString("DisabledLocalMetadataReaders"), ::OpenAPI::toJsonValue(m_disabled_local_metadata_readers));
    }
    if (m_disabled_subtitle_fetchers.size() > 0) {
        obj.insert(QString("DisabledSubtitleFetchers"), ::OpenAPI::toJsonValue(m_disabled_subtitle_fetchers));
    }
    if (m_enable_automatic_series_grouping_isSet) {
        obj.insert(QString("EnableAutomaticSeriesGrouping"), ::OpenAPI::toJsonValue(m_enable_automatic_series_grouping));
    }
    if (m_enable_chapter_image_extraction_isSet) {
        obj.insert(QString("EnableChapterImageExtraction"), ::OpenAPI::toJsonValue(m_enable_chapter_image_extraction));
    }
    if (m_enable_embedded_episode_infos_isSet) {
        obj.insert(QString("EnableEmbeddedEpisodeInfos"), ::OpenAPI::toJsonValue(m_enable_embedded_episode_infos));
    }
    if (m_enable_embedded_titles_isSet) {
        obj.insert(QString("EnableEmbeddedTitles"), ::OpenAPI::toJsonValue(m_enable_embedded_titles));
    }
    if (m_enable_internet_providers_isSet) {
        obj.insert(QString("EnableInternetProviders"), ::OpenAPI::toJsonValue(m_enable_internet_providers));
    }
    if (m_enable_photos_isSet) {
        obj.insert(QString("EnablePhotos"), ::OpenAPI::toJsonValue(m_enable_photos));
    }
    if (m_enable_realtime_monitor_isSet) {
        obj.insert(QString("EnableRealtimeMonitor"), ::OpenAPI::toJsonValue(m_enable_realtime_monitor));
    }
    if (m_extract_chapter_images_during_library_scan_isSet) {
        obj.insert(QString("ExtractChapterImagesDuringLibraryScan"), ::OpenAPI::toJsonValue(m_extract_chapter_images_during_library_scan));
    }
    if (m_local_metadata_reader_order.size() > 0) {
        obj.insert(QString("LocalMetadataReaderOrder"), ::OpenAPI::toJsonValue(m_local_metadata_reader_order));
    }
    if (m_metadata_country_code_isSet) {
        obj.insert(QString("MetadataCountryCode"), ::OpenAPI::toJsonValue(m_metadata_country_code));
    }
    if (m_metadata_savers.size() > 0) {
        obj.insert(QString("MetadataSavers"), ::OpenAPI::toJsonValue(m_metadata_savers));
    }
    if (m_path_infos.size() > 0) {
        obj.insert(QString("PathInfos"), ::OpenAPI::toJsonValue(m_path_infos));
    }
    if (m_preferred_metadata_language_isSet) {
        obj.insert(QString("PreferredMetadataLanguage"), ::OpenAPI::toJsonValue(m_preferred_metadata_language));
    }
    if (m_require_perfect_subtitle_match_isSet) {
        obj.insert(QString("RequirePerfectSubtitleMatch"), ::OpenAPI::toJsonValue(m_require_perfect_subtitle_match));
    }
    if (m_save_local_metadata_isSet) {
        obj.insert(QString("SaveLocalMetadata"), ::OpenAPI::toJsonValue(m_save_local_metadata));
    }
    if (m_save_subtitles_with_media_isSet) {
        obj.insert(QString("SaveSubtitlesWithMedia"), ::OpenAPI::toJsonValue(m_save_subtitles_with_media));
    }
    if (m_season_zero_display_name_isSet) {
        obj.insert(QString("SeasonZeroDisplayName"), ::OpenAPI::toJsonValue(m_season_zero_display_name));
    }
    if (m_skip_subtitles_if_audio_track_matches_isSet) {
        obj.insert(QString("SkipSubtitlesIfAudioTrackMatches"), ::OpenAPI::toJsonValue(m_skip_subtitles_if_audio_track_matches));
    }
    if (m_skip_subtitles_if_embedded_subtitles_present_isSet) {
        obj.insert(QString("SkipSubtitlesIfEmbeddedSubtitlesPresent"), ::OpenAPI::toJsonValue(m_skip_subtitles_if_embedded_subtitles_present));
    }
    if (m_subtitle_download_languages.size() > 0) {
        obj.insert(QString("SubtitleDownloadLanguages"), ::OpenAPI::toJsonValue(m_subtitle_download_languages));
    }
    if (m_subtitle_fetcher_order.size() > 0) {
        obj.insert(QString("SubtitleFetcherOrder"), ::OpenAPI::toJsonValue(m_subtitle_fetcher_order));
    }
    if (m_type_options.size() > 0) {
        obj.insert(QString("TypeOptions"), ::OpenAPI::toJsonValue(m_type_options));
    }
    return obj;
}

qint32 OAILibraryOptions::getAutomaticRefreshIntervalDays() const {
    return m_automatic_refresh_interval_days;
}
void OAILibraryOptions::setAutomaticRefreshIntervalDays(const qint32 &automatic_refresh_interval_days) {
    m_automatic_refresh_interval_days = automatic_refresh_interval_days;
    m_automatic_refresh_interval_days_isSet = true;
}

bool OAILibraryOptions::is_automatic_refresh_interval_days_Set() const{
    return m_automatic_refresh_interval_days_isSet;
}

bool OAILibraryOptions::is_automatic_refresh_interval_days_Valid() const{
    return m_automatic_refresh_interval_days_isValid;
}

QList<QString> OAILibraryOptions::getDisabledLocalMetadataReaders() const {
    return m_disabled_local_metadata_readers;
}
void OAILibraryOptions::setDisabledLocalMetadataReaders(const QList<QString> &disabled_local_metadata_readers) {
    m_disabled_local_metadata_readers = disabled_local_metadata_readers;
    m_disabled_local_metadata_readers_isSet = true;
}

bool OAILibraryOptions::is_disabled_local_metadata_readers_Set() const{
    return m_disabled_local_metadata_readers_isSet;
}

bool OAILibraryOptions::is_disabled_local_metadata_readers_Valid() const{
    return m_disabled_local_metadata_readers_isValid;
}

QList<QString> OAILibraryOptions::getDisabledSubtitleFetchers() const {
    return m_disabled_subtitle_fetchers;
}
void OAILibraryOptions::setDisabledSubtitleFetchers(const QList<QString> &disabled_subtitle_fetchers) {
    m_disabled_subtitle_fetchers = disabled_subtitle_fetchers;
    m_disabled_subtitle_fetchers_isSet = true;
}

bool OAILibraryOptions::is_disabled_subtitle_fetchers_Set() const{
    return m_disabled_subtitle_fetchers_isSet;
}

bool OAILibraryOptions::is_disabled_subtitle_fetchers_Valid() const{
    return m_disabled_subtitle_fetchers_isValid;
}

bool OAILibraryOptions::isEnableAutomaticSeriesGrouping() const {
    return m_enable_automatic_series_grouping;
}
void OAILibraryOptions::setEnableAutomaticSeriesGrouping(const bool &enable_automatic_series_grouping) {
    m_enable_automatic_series_grouping = enable_automatic_series_grouping;
    m_enable_automatic_series_grouping_isSet = true;
}

bool OAILibraryOptions::is_enable_automatic_series_grouping_Set() const{
    return m_enable_automatic_series_grouping_isSet;
}

bool OAILibraryOptions::is_enable_automatic_series_grouping_Valid() const{
    return m_enable_automatic_series_grouping_isValid;
}

bool OAILibraryOptions::isEnableChapterImageExtraction() const {
    return m_enable_chapter_image_extraction;
}
void OAILibraryOptions::setEnableChapterImageExtraction(const bool &enable_chapter_image_extraction) {
    m_enable_chapter_image_extraction = enable_chapter_image_extraction;
    m_enable_chapter_image_extraction_isSet = true;
}

bool OAILibraryOptions::is_enable_chapter_image_extraction_Set() const{
    return m_enable_chapter_image_extraction_isSet;
}

bool OAILibraryOptions::is_enable_chapter_image_extraction_Valid() const{
    return m_enable_chapter_image_extraction_isValid;
}

bool OAILibraryOptions::isEnableEmbeddedEpisodeInfos() const {
    return m_enable_embedded_episode_infos;
}
void OAILibraryOptions::setEnableEmbeddedEpisodeInfos(const bool &enable_embedded_episode_infos) {
    m_enable_embedded_episode_infos = enable_embedded_episode_infos;
    m_enable_embedded_episode_infos_isSet = true;
}

bool OAILibraryOptions::is_enable_embedded_episode_infos_Set() const{
    return m_enable_embedded_episode_infos_isSet;
}

bool OAILibraryOptions::is_enable_embedded_episode_infos_Valid() const{
    return m_enable_embedded_episode_infos_isValid;
}

bool OAILibraryOptions::isEnableEmbeddedTitles() const {
    return m_enable_embedded_titles;
}
void OAILibraryOptions::setEnableEmbeddedTitles(const bool &enable_embedded_titles) {
    m_enable_embedded_titles = enable_embedded_titles;
    m_enable_embedded_titles_isSet = true;
}

bool OAILibraryOptions::is_enable_embedded_titles_Set() const{
    return m_enable_embedded_titles_isSet;
}

bool OAILibraryOptions::is_enable_embedded_titles_Valid() const{
    return m_enable_embedded_titles_isValid;
}

bool OAILibraryOptions::isEnableInternetProviders() const {
    return m_enable_internet_providers;
}
void OAILibraryOptions::setEnableInternetProviders(const bool &enable_internet_providers) {
    m_enable_internet_providers = enable_internet_providers;
    m_enable_internet_providers_isSet = true;
}

bool OAILibraryOptions::is_enable_internet_providers_Set() const{
    return m_enable_internet_providers_isSet;
}

bool OAILibraryOptions::is_enable_internet_providers_Valid() const{
    return m_enable_internet_providers_isValid;
}

bool OAILibraryOptions::isEnablePhotos() const {
    return m_enable_photos;
}
void OAILibraryOptions::setEnablePhotos(const bool &enable_photos) {
    m_enable_photos = enable_photos;
    m_enable_photos_isSet = true;
}

bool OAILibraryOptions::is_enable_photos_Set() const{
    return m_enable_photos_isSet;
}

bool OAILibraryOptions::is_enable_photos_Valid() const{
    return m_enable_photos_isValid;
}

bool OAILibraryOptions::isEnableRealtimeMonitor() const {
    return m_enable_realtime_monitor;
}
void OAILibraryOptions::setEnableRealtimeMonitor(const bool &enable_realtime_monitor) {
    m_enable_realtime_monitor = enable_realtime_monitor;
    m_enable_realtime_monitor_isSet = true;
}

bool OAILibraryOptions::is_enable_realtime_monitor_Set() const{
    return m_enable_realtime_monitor_isSet;
}

bool OAILibraryOptions::is_enable_realtime_monitor_Valid() const{
    return m_enable_realtime_monitor_isValid;
}

bool OAILibraryOptions::isExtractChapterImagesDuringLibraryScan() const {
    return m_extract_chapter_images_during_library_scan;
}
void OAILibraryOptions::setExtractChapterImagesDuringLibraryScan(const bool &extract_chapter_images_during_library_scan) {
    m_extract_chapter_images_during_library_scan = extract_chapter_images_during_library_scan;
    m_extract_chapter_images_during_library_scan_isSet = true;
}

bool OAILibraryOptions::is_extract_chapter_images_during_library_scan_Set() const{
    return m_extract_chapter_images_during_library_scan_isSet;
}

bool OAILibraryOptions::is_extract_chapter_images_during_library_scan_Valid() const{
    return m_extract_chapter_images_during_library_scan_isValid;
}

QList<QString> OAILibraryOptions::getLocalMetadataReaderOrder() const {
    return m_local_metadata_reader_order;
}
void OAILibraryOptions::setLocalMetadataReaderOrder(const QList<QString> &local_metadata_reader_order) {
    m_local_metadata_reader_order = local_metadata_reader_order;
    m_local_metadata_reader_order_isSet = true;
}

bool OAILibraryOptions::is_local_metadata_reader_order_Set() const{
    return m_local_metadata_reader_order_isSet;
}

bool OAILibraryOptions::is_local_metadata_reader_order_Valid() const{
    return m_local_metadata_reader_order_isValid;
}

QString OAILibraryOptions::getMetadataCountryCode() const {
    return m_metadata_country_code;
}
void OAILibraryOptions::setMetadataCountryCode(const QString &metadata_country_code) {
    m_metadata_country_code = metadata_country_code;
    m_metadata_country_code_isSet = true;
}

bool OAILibraryOptions::is_metadata_country_code_Set() const{
    return m_metadata_country_code_isSet;
}

bool OAILibraryOptions::is_metadata_country_code_Valid() const{
    return m_metadata_country_code_isValid;
}

QList<QString> OAILibraryOptions::getMetadataSavers() const {
    return m_metadata_savers;
}
void OAILibraryOptions::setMetadataSavers(const QList<QString> &metadata_savers) {
    m_metadata_savers = metadata_savers;
    m_metadata_savers_isSet = true;
}

bool OAILibraryOptions::is_metadata_savers_Set() const{
    return m_metadata_savers_isSet;
}

bool OAILibraryOptions::is_metadata_savers_Valid() const{
    return m_metadata_savers_isValid;
}

QList<OAIMediaPathInfo> OAILibraryOptions::getPathInfos() const {
    return m_path_infos;
}
void OAILibraryOptions::setPathInfos(const QList<OAIMediaPathInfo> &path_infos) {
    m_path_infos = path_infos;
    m_path_infos_isSet = true;
}

bool OAILibraryOptions::is_path_infos_Set() const{
    return m_path_infos_isSet;
}

bool OAILibraryOptions::is_path_infos_Valid() const{
    return m_path_infos_isValid;
}

QString OAILibraryOptions::getPreferredMetadataLanguage() const {
    return m_preferred_metadata_language;
}
void OAILibraryOptions::setPreferredMetadataLanguage(const QString &preferred_metadata_language) {
    m_preferred_metadata_language = preferred_metadata_language;
    m_preferred_metadata_language_isSet = true;
}

bool OAILibraryOptions::is_preferred_metadata_language_Set() const{
    return m_preferred_metadata_language_isSet;
}

bool OAILibraryOptions::is_preferred_metadata_language_Valid() const{
    return m_preferred_metadata_language_isValid;
}

bool OAILibraryOptions::isRequirePerfectSubtitleMatch() const {
    return m_require_perfect_subtitle_match;
}
void OAILibraryOptions::setRequirePerfectSubtitleMatch(const bool &require_perfect_subtitle_match) {
    m_require_perfect_subtitle_match = require_perfect_subtitle_match;
    m_require_perfect_subtitle_match_isSet = true;
}

bool OAILibraryOptions::is_require_perfect_subtitle_match_Set() const{
    return m_require_perfect_subtitle_match_isSet;
}

bool OAILibraryOptions::is_require_perfect_subtitle_match_Valid() const{
    return m_require_perfect_subtitle_match_isValid;
}

bool OAILibraryOptions::isSaveLocalMetadata() const {
    return m_save_local_metadata;
}
void OAILibraryOptions::setSaveLocalMetadata(const bool &save_local_metadata) {
    m_save_local_metadata = save_local_metadata;
    m_save_local_metadata_isSet = true;
}

bool OAILibraryOptions::is_save_local_metadata_Set() const{
    return m_save_local_metadata_isSet;
}

bool OAILibraryOptions::is_save_local_metadata_Valid() const{
    return m_save_local_metadata_isValid;
}

bool OAILibraryOptions::isSaveSubtitlesWithMedia() const {
    return m_save_subtitles_with_media;
}
void OAILibraryOptions::setSaveSubtitlesWithMedia(const bool &save_subtitles_with_media) {
    m_save_subtitles_with_media = save_subtitles_with_media;
    m_save_subtitles_with_media_isSet = true;
}

bool OAILibraryOptions::is_save_subtitles_with_media_Set() const{
    return m_save_subtitles_with_media_isSet;
}

bool OAILibraryOptions::is_save_subtitles_with_media_Valid() const{
    return m_save_subtitles_with_media_isValid;
}

QString OAILibraryOptions::getSeasonZeroDisplayName() const {
    return m_season_zero_display_name;
}
void OAILibraryOptions::setSeasonZeroDisplayName(const QString &season_zero_display_name) {
    m_season_zero_display_name = season_zero_display_name;
    m_season_zero_display_name_isSet = true;
}

bool OAILibraryOptions::is_season_zero_display_name_Set() const{
    return m_season_zero_display_name_isSet;
}

bool OAILibraryOptions::is_season_zero_display_name_Valid() const{
    return m_season_zero_display_name_isValid;
}

bool OAILibraryOptions::isSkipSubtitlesIfAudioTrackMatches() const {
    return m_skip_subtitles_if_audio_track_matches;
}
void OAILibraryOptions::setSkipSubtitlesIfAudioTrackMatches(const bool &skip_subtitles_if_audio_track_matches) {
    m_skip_subtitles_if_audio_track_matches = skip_subtitles_if_audio_track_matches;
    m_skip_subtitles_if_audio_track_matches_isSet = true;
}

bool OAILibraryOptions::is_skip_subtitles_if_audio_track_matches_Set() const{
    return m_skip_subtitles_if_audio_track_matches_isSet;
}

bool OAILibraryOptions::is_skip_subtitles_if_audio_track_matches_Valid() const{
    return m_skip_subtitles_if_audio_track_matches_isValid;
}

bool OAILibraryOptions::isSkipSubtitlesIfEmbeddedSubtitlesPresent() const {
    return m_skip_subtitles_if_embedded_subtitles_present;
}
void OAILibraryOptions::setSkipSubtitlesIfEmbeddedSubtitlesPresent(const bool &skip_subtitles_if_embedded_subtitles_present) {
    m_skip_subtitles_if_embedded_subtitles_present = skip_subtitles_if_embedded_subtitles_present;
    m_skip_subtitles_if_embedded_subtitles_present_isSet = true;
}

bool OAILibraryOptions::is_skip_subtitles_if_embedded_subtitles_present_Set() const{
    return m_skip_subtitles_if_embedded_subtitles_present_isSet;
}

bool OAILibraryOptions::is_skip_subtitles_if_embedded_subtitles_present_Valid() const{
    return m_skip_subtitles_if_embedded_subtitles_present_isValid;
}

QList<QString> OAILibraryOptions::getSubtitleDownloadLanguages() const {
    return m_subtitle_download_languages;
}
void OAILibraryOptions::setSubtitleDownloadLanguages(const QList<QString> &subtitle_download_languages) {
    m_subtitle_download_languages = subtitle_download_languages;
    m_subtitle_download_languages_isSet = true;
}

bool OAILibraryOptions::is_subtitle_download_languages_Set() const{
    return m_subtitle_download_languages_isSet;
}

bool OAILibraryOptions::is_subtitle_download_languages_Valid() const{
    return m_subtitle_download_languages_isValid;
}

QList<QString> OAILibraryOptions::getSubtitleFetcherOrder() const {
    return m_subtitle_fetcher_order;
}
void OAILibraryOptions::setSubtitleFetcherOrder(const QList<QString> &subtitle_fetcher_order) {
    m_subtitle_fetcher_order = subtitle_fetcher_order;
    m_subtitle_fetcher_order_isSet = true;
}

bool OAILibraryOptions::is_subtitle_fetcher_order_Set() const{
    return m_subtitle_fetcher_order_isSet;
}

bool OAILibraryOptions::is_subtitle_fetcher_order_Valid() const{
    return m_subtitle_fetcher_order_isValid;
}

QList<OAITypeOptions> OAILibraryOptions::getTypeOptions() const {
    return m_type_options;
}
void OAILibraryOptions::setTypeOptions(const QList<OAITypeOptions> &type_options) {
    m_type_options = type_options;
    m_type_options_isSet = true;
}

bool OAILibraryOptions::is_type_options_Set() const{
    return m_type_options_isSet;
}

bool OAILibraryOptions::is_type_options_Valid() const{
    return m_type_options_isValid;
}

bool OAILibraryOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_refresh_interval_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_local_metadata_readers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_subtitle_fetchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_automatic_series_grouping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_chapter_image_extraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_embedded_episode_infos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_embedded_titles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_internet_providers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_photos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_realtime_monitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extract_chapter_images_during_library_scan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_metadata_reader_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_savers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_metadata_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_perfect_subtitle_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_local_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_subtitles_with_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_zero_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_subtitles_if_audio_track_matches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_subtitles_if_embedded_subtitles_present_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_download_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_fetcher_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILibraryOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
