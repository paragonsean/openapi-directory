/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBaseItemDto_ImageBlurHashes.h
 *
 * Gets or sets the blurhashes for the image tags.  Maps image type to dictionary mapping image tag to blurhash value.
 */

#ifndef OAIBaseItemDto_ImageBlurHashes_H
#define OAIBaseItemDto_ImageBlurHashes_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBaseItemDto_ImageBlurHashes : public OAIObject {
public:
    OAIBaseItemDto_ImageBlurHashes();
    OAIBaseItemDto_ImageBlurHashes(QString json);
    ~OAIBaseItemDto_ImageBlurHashes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getArt() const;
    void setArt(const QMap<QString, QString> &art);
    bool is_art_Set() const;
    bool is_art_Valid() const;

    QMap<QString, QString> getBackdrop() const;
    void setBackdrop(const QMap<QString, QString> &backdrop);
    bool is_backdrop_Set() const;
    bool is_backdrop_Valid() const;

    QMap<QString, QString> getBanner() const;
    void setBanner(const QMap<QString, QString> &banner);
    bool is_banner_Set() const;
    bool is_banner_Valid() const;

    QMap<QString, QString> getBox() const;
    void setBox(const QMap<QString, QString> &box);
    bool is_box_Set() const;
    bool is_box_Valid() const;

    QMap<QString, QString> getBoxRear() const;
    void setBoxRear(const QMap<QString, QString> &box_rear);
    bool is_box_rear_Set() const;
    bool is_box_rear_Valid() const;

    QMap<QString, QString> getChapter() const;
    void setChapter(const QMap<QString, QString> &chapter);
    bool is_chapter_Set() const;
    bool is_chapter_Valid() const;

    QMap<QString, QString> getDisc() const;
    void setDisc(const QMap<QString, QString> &disc);
    bool is_disc_Set() const;
    bool is_disc_Valid() const;

    QMap<QString, QString> getLogo() const;
    void setLogo(const QMap<QString, QString> &logo);
    bool is_logo_Set() const;
    bool is_logo_Valid() const;

    QMap<QString, QString> getMenu() const;
    void setMenu(const QMap<QString, QString> &menu);
    bool is_menu_Set() const;
    bool is_menu_Valid() const;

    QMap<QString, QString> getPrimary() const;
    void setPrimary(const QMap<QString, QString> &primary);
    bool is_primary_Set() const;
    bool is_primary_Valid() const;

    QMap<QString, QString> getProfile() const;
    void setProfile(const QMap<QString, QString> &profile);
    bool is_profile_Set() const;
    bool is_profile_Valid() const;

    QMap<QString, QString> getScreenshot() const;
    void setScreenshot(const QMap<QString, QString> &screenshot);
    bool is_screenshot_Set() const;
    bool is_screenshot_Valid() const;

    QMap<QString, QString> getThumb() const;
    void setThumb(const QMap<QString, QString> &thumb);
    bool is_thumb_Set() const;
    bool is_thumb_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_art;
    bool m_art_isSet;
    bool m_art_isValid;

    QMap<QString, QString> m_backdrop;
    bool m_backdrop_isSet;
    bool m_backdrop_isValid;

    QMap<QString, QString> m_banner;
    bool m_banner_isSet;
    bool m_banner_isValid;

    QMap<QString, QString> m_box;
    bool m_box_isSet;
    bool m_box_isValid;

    QMap<QString, QString> m_box_rear;
    bool m_box_rear_isSet;
    bool m_box_rear_isValid;

    QMap<QString, QString> m_chapter;
    bool m_chapter_isSet;
    bool m_chapter_isValid;

    QMap<QString, QString> m_disc;
    bool m_disc_isSet;
    bool m_disc_isValid;

    QMap<QString, QString> m_logo;
    bool m_logo_isSet;
    bool m_logo_isValid;

    QMap<QString, QString> m_menu;
    bool m_menu_isSet;
    bool m_menu_isValid;

    QMap<QString, QString> m_primary;
    bool m_primary_isSet;
    bool m_primary_isValid;

    QMap<QString, QString> m_profile;
    bool m_profile_isSet;
    bool m_profile_isValid;

    QMap<QString, QString> m_screenshot;
    bool m_screenshot_isSet;
    bool m_screenshot_isValid;

    QMap<QString, QString> m_thumb;
    bool m_thumb_isSet;
    bool m_thumb_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBaseItemDto_ImageBlurHashes)

#endif // OAIBaseItemDto_ImageBlurHashes_H
