/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationDto::OAINotificationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationDto::OAINotificationDto() {
    this->initializeModel();
}

OAINotificationDto::~OAINotificationDto() {}

void OAINotificationDto::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_read_isSet = false;
    m_is_read_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAINotificationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationDto::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_read_isValid = ::OpenAPI::fromJsonValue(m_is_read, json[QString("IsRead")]);
    m_is_read_isSet = !json[QString("IsRead")].isNull() && m_is_read_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("Level")]);
    m_level_isSet = !json[QString("Level")].isNull() && m_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAINotificationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_read_isSet) {
        obj.insert(QString("IsRead"), ::OpenAPI::toJsonValue(m_is_read));
    }
    if (m_level.isSet()) {
        obj.insert(QString("Level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAINotificationDto::getDate() const {
    return m_date;
}
void OAINotificationDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAINotificationDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAINotificationDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAINotificationDto::getDescription() const {
    return m_description;
}
void OAINotificationDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINotificationDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAINotificationDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINotificationDto::getId() const {
    return m_id;
}
void OAINotificationDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotificationDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotificationDto::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINotificationDto::isIsRead() const {
    return m_is_read;
}
void OAINotificationDto::setIsRead(const bool &is_read) {
    m_is_read = is_read;
    m_is_read_isSet = true;
}

bool OAINotificationDto::is_is_read_Set() const{
    return m_is_read_isSet;
}

bool OAINotificationDto::is_is_read_Valid() const{
    return m_is_read_isValid;
}

OAINotificationLevel OAINotificationDto::getLevel() const {
    return m_level;
}
void OAINotificationDto::setLevel(const OAINotificationLevel &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAINotificationDto::is_level_Set() const{
    return m_level_isSet;
}

bool OAINotificationDto::is_level_Valid() const{
    return m_level_isValid;
}

QString OAINotificationDto::getName() const {
    return m_name;
}
void OAINotificationDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotificationDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotificationDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINotificationDto::getUrl() const {
    return m_url;
}
void OAINotificationDto::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINotificationDto::is_url_Set() const{
    return m_url_isSet;
}

bool OAINotificationDto::is_url_Valid() const{
    return m_url_isValid;
}

QString OAINotificationDto::getUserId() const {
    return m_user_id;
}
void OAINotificationDto::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAINotificationDto::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAINotificationDto::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAINotificationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
