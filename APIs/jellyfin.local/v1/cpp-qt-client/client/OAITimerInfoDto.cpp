/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimerInfoDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimerInfoDto::OAITimerInfoDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimerInfoDto::OAITimerInfoDto() {
    this->initializeModel();
}

OAITimerInfoDto::~OAITimerInfoDto() {}

void OAITimerInfoDto::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_channel_primary_image_tag_isSet = false;
    m_channel_primary_image_tag_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_external_channel_id_isSet = false;
    m_external_channel_id_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_external_program_id_isSet = false;
    m_external_program_id_isValid = false;

    m_external_series_timer_id_isSet = false;
    m_external_series_timer_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_post_padding_required_isSet = false;
    m_is_post_padding_required_isValid = false;

    m_is_pre_padding_required_isSet = false;
    m_is_pre_padding_required_isValid = false;

    m_keep_until_isSet = false;
    m_keep_until_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_parent_backdrop_image_tags_isSet = false;
    m_parent_backdrop_image_tags_isValid = false;

    m_parent_backdrop_item_id_isSet = false;
    m_parent_backdrop_item_id_isValid = false;

    m_post_padding_seconds_isSet = false;
    m_post_padding_seconds_isValid = false;

    m_pre_padding_seconds_isSet = false;
    m_pre_padding_seconds_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_program_id_isSet = false;
    m_program_id_isValid = false;

    m_program_info_isSet = false;
    m_program_info_isValid = false;

    m_run_time_ticks_isSet = false;
    m_run_time_ticks_isValid = false;

    m_series_timer_id_isSet = false;
    m_series_timer_id_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITimerInfoDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimerInfoDto::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("ChannelId")]);
    m_channel_id_isSet = !json[QString("ChannelId")].isNull() && m_channel_id_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_channel_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_channel_primary_image_tag, json[QString("ChannelPrimaryImageTag")]);
    m_channel_primary_image_tag_isSet = !json[QString("ChannelPrimaryImageTag")].isNull() && m_channel_primary_image_tag_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_external_channel_id_isValid = ::OpenAPI::fromJsonValue(m_external_channel_id, json[QString("ExternalChannelId")]);
    m_external_channel_id_isSet = !json[QString("ExternalChannelId")].isNull() && m_external_channel_id_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("ExternalId")]);
    m_external_id_isSet = !json[QString("ExternalId")].isNull() && m_external_id_isValid;

    m_external_program_id_isValid = ::OpenAPI::fromJsonValue(m_external_program_id, json[QString("ExternalProgramId")]);
    m_external_program_id_isSet = !json[QString("ExternalProgramId")].isNull() && m_external_program_id_isValid;

    m_external_series_timer_id_isValid = ::OpenAPI::fromJsonValue(m_external_series_timer_id, json[QString("ExternalSeriesTimerId")]);
    m_external_series_timer_id_isSet = !json[QString("ExternalSeriesTimerId")].isNull() && m_external_series_timer_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_post_padding_required_isValid = ::OpenAPI::fromJsonValue(m_is_post_padding_required, json[QString("IsPostPaddingRequired")]);
    m_is_post_padding_required_isSet = !json[QString("IsPostPaddingRequired")].isNull() && m_is_post_padding_required_isValid;

    m_is_pre_padding_required_isValid = ::OpenAPI::fromJsonValue(m_is_pre_padding_required, json[QString("IsPrePaddingRequired")]);
    m_is_pre_padding_required_isSet = !json[QString("IsPrePaddingRequired")].isNull() && m_is_pre_padding_required_isValid;

    m_keep_until_isValid = ::OpenAPI::fromJsonValue(m_keep_until, json[QString("KeepUntil")]);
    m_keep_until_isSet = !json[QString("KeepUntil")].isNull() && m_keep_until_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("Overview")]);
    m_overview_isSet = !json[QString("Overview")].isNull() && m_overview_isValid;

    m_parent_backdrop_image_tags_isValid = ::OpenAPI::fromJsonValue(m_parent_backdrop_image_tags, json[QString("ParentBackdropImageTags")]);
    m_parent_backdrop_image_tags_isSet = !json[QString("ParentBackdropImageTags")].isNull() && m_parent_backdrop_image_tags_isValid;

    m_parent_backdrop_item_id_isValid = ::OpenAPI::fromJsonValue(m_parent_backdrop_item_id, json[QString("ParentBackdropItemId")]);
    m_parent_backdrop_item_id_isSet = !json[QString("ParentBackdropItemId")].isNull() && m_parent_backdrop_item_id_isValid;

    m_post_padding_seconds_isValid = ::OpenAPI::fromJsonValue(m_post_padding_seconds, json[QString("PostPaddingSeconds")]);
    m_post_padding_seconds_isSet = !json[QString("PostPaddingSeconds")].isNull() && m_post_padding_seconds_isValid;

    m_pre_padding_seconds_isValid = ::OpenAPI::fromJsonValue(m_pre_padding_seconds, json[QString("PrePaddingSeconds")]);
    m_pre_padding_seconds_isSet = !json[QString("PrePaddingSeconds")].isNull() && m_pre_padding_seconds_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_program_id_isValid = ::OpenAPI::fromJsonValue(m_program_id, json[QString("ProgramId")]);
    m_program_id_isSet = !json[QString("ProgramId")].isNull() && m_program_id_isValid;

    m_program_info_isValid = ::OpenAPI::fromJsonValue(m_program_info, json[QString("ProgramInfo")]);
    m_program_info_isSet = !json[QString("ProgramInfo")].isNull() && m_program_info_isValid;

    m_run_time_ticks_isValid = ::OpenAPI::fromJsonValue(m_run_time_ticks, json[QString("RunTimeTicks")]);
    m_run_time_ticks_isSet = !json[QString("RunTimeTicks")].isNull() && m_run_time_ticks_isValid;

    m_series_timer_id_isValid = ::OpenAPI::fromJsonValue(m_series_timer_id, json[QString("SeriesTimerId")]);
    m_series_timer_id_isSet = !json[QString("SeriesTimerId")].isNull() && m_series_timer_id_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAITimerInfoDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimerInfoDto::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("ChannelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_channel_primary_image_tag_isSet) {
        obj.insert(QString("ChannelPrimaryImageTag"), ::OpenAPI::toJsonValue(m_channel_primary_image_tag));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_external_channel_id_isSet) {
        obj.insert(QString("ExternalChannelId"), ::OpenAPI::toJsonValue(m_external_channel_id));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("ExternalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_external_program_id_isSet) {
        obj.insert(QString("ExternalProgramId"), ::OpenAPI::toJsonValue(m_external_program_id));
    }
    if (m_external_series_timer_id_isSet) {
        obj.insert(QString("ExternalSeriesTimerId"), ::OpenAPI::toJsonValue(m_external_series_timer_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_post_padding_required_isSet) {
        obj.insert(QString("IsPostPaddingRequired"), ::OpenAPI::toJsonValue(m_is_post_padding_required));
    }
    if (m_is_pre_padding_required_isSet) {
        obj.insert(QString("IsPrePaddingRequired"), ::OpenAPI::toJsonValue(m_is_pre_padding_required));
    }
    if (m_keep_until.isSet()) {
        obj.insert(QString("KeepUntil"), ::OpenAPI::toJsonValue(m_keep_until));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overview_isSet) {
        obj.insert(QString("Overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_parent_backdrop_image_tags.size() > 0) {
        obj.insert(QString("ParentBackdropImageTags"), ::OpenAPI::toJsonValue(m_parent_backdrop_image_tags));
    }
    if (m_parent_backdrop_item_id_isSet) {
        obj.insert(QString("ParentBackdropItemId"), ::OpenAPI::toJsonValue(m_parent_backdrop_item_id));
    }
    if (m_post_padding_seconds_isSet) {
        obj.insert(QString("PostPaddingSeconds"), ::OpenAPI::toJsonValue(m_post_padding_seconds));
    }
    if (m_pre_padding_seconds_isSet) {
        obj.insert(QString("PrePaddingSeconds"), ::OpenAPI::toJsonValue(m_pre_padding_seconds));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_program_id_isSet) {
        obj.insert(QString("ProgramId"), ::OpenAPI::toJsonValue(m_program_id));
    }
    if (m_program_info.isSet()) {
        obj.insert(QString("ProgramInfo"), ::OpenAPI::toJsonValue(m_program_info));
    }
    if (m_run_time_ticks_isSet) {
        obj.insert(QString("RunTimeTicks"), ::OpenAPI::toJsonValue(m_run_time_ticks));
    }
    if (m_series_timer_id_isSet) {
        obj.insert(QString("SeriesTimerId"), ::OpenAPI::toJsonValue(m_series_timer_id));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITimerInfoDto::getChannelId() const {
    return m_channel_id;
}
void OAITimerInfoDto::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAITimerInfoDto::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAITimerInfoDto::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAITimerInfoDto::getChannelName() const {
    return m_channel_name;
}
void OAITimerInfoDto::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAITimerInfoDto::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAITimerInfoDto::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QString OAITimerInfoDto::getChannelPrimaryImageTag() const {
    return m_channel_primary_image_tag;
}
void OAITimerInfoDto::setChannelPrimaryImageTag(const QString &channel_primary_image_tag) {
    m_channel_primary_image_tag = channel_primary_image_tag;
    m_channel_primary_image_tag_isSet = true;
}

bool OAITimerInfoDto::is_channel_primary_image_tag_Set() const{
    return m_channel_primary_image_tag_isSet;
}

bool OAITimerInfoDto::is_channel_primary_image_tag_Valid() const{
    return m_channel_primary_image_tag_isValid;
}

QDateTime OAITimerInfoDto::getEndDate() const {
    return m_end_date;
}
void OAITimerInfoDto::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAITimerInfoDto::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAITimerInfoDto::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAITimerInfoDto::getExternalChannelId() const {
    return m_external_channel_id;
}
void OAITimerInfoDto::setExternalChannelId(const QString &external_channel_id) {
    m_external_channel_id = external_channel_id;
    m_external_channel_id_isSet = true;
}

bool OAITimerInfoDto::is_external_channel_id_Set() const{
    return m_external_channel_id_isSet;
}

bool OAITimerInfoDto::is_external_channel_id_Valid() const{
    return m_external_channel_id_isValid;
}

QString OAITimerInfoDto::getExternalId() const {
    return m_external_id;
}
void OAITimerInfoDto::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAITimerInfoDto::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAITimerInfoDto::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAITimerInfoDto::getExternalProgramId() const {
    return m_external_program_id;
}
void OAITimerInfoDto::setExternalProgramId(const QString &external_program_id) {
    m_external_program_id = external_program_id;
    m_external_program_id_isSet = true;
}

bool OAITimerInfoDto::is_external_program_id_Set() const{
    return m_external_program_id_isSet;
}

bool OAITimerInfoDto::is_external_program_id_Valid() const{
    return m_external_program_id_isValid;
}

QString OAITimerInfoDto::getExternalSeriesTimerId() const {
    return m_external_series_timer_id;
}
void OAITimerInfoDto::setExternalSeriesTimerId(const QString &external_series_timer_id) {
    m_external_series_timer_id = external_series_timer_id;
    m_external_series_timer_id_isSet = true;
}

bool OAITimerInfoDto::is_external_series_timer_id_Set() const{
    return m_external_series_timer_id_isSet;
}

bool OAITimerInfoDto::is_external_series_timer_id_Valid() const{
    return m_external_series_timer_id_isValid;
}

QString OAITimerInfoDto::getId() const {
    return m_id;
}
void OAITimerInfoDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimerInfoDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimerInfoDto::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITimerInfoDto::isIsPostPaddingRequired() const {
    return m_is_post_padding_required;
}
void OAITimerInfoDto::setIsPostPaddingRequired(const bool &is_post_padding_required) {
    m_is_post_padding_required = is_post_padding_required;
    m_is_post_padding_required_isSet = true;
}

bool OAITimerInfoDto::is_is_post_padding_required_Set() const{
    return m_is_post_padding_required_isSet;
}

bool OAITimerInfoDto::is_is_post_padding_required_Valid() const{
    return m_is_post_padding_required_isValid;
}

bool OAITimerInfoDto::isIsPrePaddingRequired() const {
    return m_is_pre_padding_required;
}
void OAITimerInfoDto::setIsPrePaddingRequired(const bool &is_pre_padding_required) {
    m_is_pre_padding_required = is_pre_padding_required;
    m_is_pre_padding_required_isSet = true;
}

bool OAITimerInfoDto::is_is_pre_padding_required_Set() const{
    return m_is_pre_padding_required_isSet;
}

bool OAITimerInfoDto::is_is_pre_padding_required_Valid() const{
    return m_is_pre_padding_required_isValid;
}

OAIKeepUntil OAITimerInfoDto::getKeepUntil() const {
    return m_keep_until;
}
void OAITimerInfoDto::setKeepUntil(const OAIKeepUntil &keep_until) {
    m_keep_until = keep_until;
    m_keep_until_isSet = true;
}

bool OAITimerInfoDto::is_keep_until_Set() const{
    return m_keep_until_isSet;
}

bool OAITimerInfoDto::is_keep_until_Valid() const{
    return m_keep_until_isValid;
}

QString OAITimerInfoDto::getName() const {
    return m_name;
}
void OAITimerInfoDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITimerInfoDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAITimerInfoDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITimerInfoDto::getOverview() const {
    return m_overview;
}
void OAITimerInfoDto::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAITimerInfoDto::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAITimerInfoDto::is_overview_Valid() const{
    return m_overview_isValid;
}

QList<QString> OAITimerInfoDto::getParentBackdropImageTags() const {
    return m_parent_backdrop_image_tags;
}
void OAITimerInfoDto::setParentBackdropImageTags(const QList<QString> &parent_backdrop_image_tags) {
    m_parent_backdrop_image_tags = parent_backdrop_image_tags;
    m_parent_backdrop_image_tags_isSet = true;
}

bool OAITimerInfoDto::is_parent_backdrop_image_tags_Set() const{
    return m_parent_backdrop_image_tags_isSet;
}

bool OAITimerInfoDto::is_parent_backdrop_image_tags_Valid() const{
    return m_parent_backdrop_image_tags_isValid;
}

QString OAITimerInfoDto::getParentBackdropItemId() const {
    return m_parent_backdrop_item_id;
}
void OAITimerInfoDto::setParentBackdropItemId(const QString &parent_backdrop_item_id) {
    m_parent_backdrop_item_id = parent_backdrop_item_id;
    m_parent_backdrop_item_id_isSet = true;
}

bool OAITimerInfoDto::is_parent_backdrop_item_id_Set() const{
    return m_parent_backdrop_item_id_isSet;
}

bool OAITimerInfoDto::is_parent_backdrop_item_id_Valid() const{
    return m_parent_backdrop_item_id_isValid;
}

qint32 OAITimerInfoDto::getPostPaddingSeconds() const {
    return m_post_padding_seconds;
}
void OAITimerInfoDto::setPostPaddingSeconds(const qint32 &post_padding_seconds) {
    m_post_padding_seconds = post_padding_seconds;
    m_post_padding_seconds_isSet = true;
}

bool OAITimerInfoDto::is_post_padding_seconds_Set() const{
    return m_post_padding_seconds_isSet;
}

bool OAITimerInfoDto::is_post_padding_seconds_Valid() const{
    return m_post_padding_seconds_isValid;
}

qint32 OAITimerInfoDto::getPrePaddingSeconds() const {
    return m_pre_padding_seconds;
}
void OAITimerInfoDto::setPrePaddingSeconds(const qint32 &pre_padding_seconds) {
    m_pre_padding_seconds = pre_padding_seconds;
    m_pre_padding_seconds_isSet = true;
}

bool OAITimerInfoDto::is_pre_padding_seconds_Set() const{
    return m_pre_padding_seconds_isSet;
}

bool OAITimerInfoDto::is_pre_padding_seconds_Valid() const{
    return m_pre_padding_seconds_isValid;
}

qint32 OAITimerInfoDto::getPriority() const {
    return m_priority;
}
void OAITimerInfoDto::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITimerInfoDto::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITimerInfoDto::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAITimerInfoDto::getProgramId() const {
    return m_program_id;
}
void OAITimerInfoDto::setProgramId(const QString &program_id) {
    m_program_id = program_id;
    m_program_id_isSet = true;
}

bool OAITimerInfoDto::is_program_id_Set() const{
    return m_program_id_isSet;
}

bool OAITimerInfoDto::is_program_id_Valid() const{
    return m_program_id_isValid;
}

OAIBaseItemDto OAITimerInfoDto::getProgramInfo() const {
    return m_program_info;
}
void OAITimerInfoDto::setProgramInfo(const OAIBaseItemDto &program_info) {
    m_program_info = program_info;
    m_program_info_isSet = true;
}

bool OAITimerInfoDto::is_program_info_Set() const{
    return m_program_info_isSet;
}

bool OAITimerInfoDto::is_program_info_Valid() const{
    return m_program_info_isValid;
}

qint64 OAITimerInfoDto::getRunTimeTicks() const {
    return m_run_time_ticks;
}
void OAITimerInfoDto::setRunTimeTicks(const qint64 &run_time_ticks) {
    m_run_time_ticks = run_time_ticks;
    m_run_time_ticks_isSet = true;
}

bool OAITimerInfoDto::is_run_time_ticks_Set() const{
    return m_run_time_ticks_isSet;
}

bool OAITimerInfoDto::is_run_time_ticks_Valid() const{
    return m_run_time_ticks_isValid;
}

QString OAITimerInfoDto::getSeriesTimerId() const {
    return m_series_timer_id;
}
void OAITimerInfoDto::setSeriesTimerId(const QString &series_timer_id) {
    m_series_timer_id = series_timer_id;
    m_series_timer_id_isSet = true;
}

bool OAITimerInfoDto::is_series_timer_id_Set() const{
    return m_series_timer_id_isSet;
}

bool OAITimerInfoDto::is_series_timer_id_Valid() const{
    return m_series_timer_id_isValid;
}

QString OAITimerInfoDto::getServerId() const {
    return m_server_id;
}
void OAITimerInfoDto::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAITimerInfoDto::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAITimerInfoDto::is_server_id_Valid() const{
    return m_server_id_isValid;
}

QString OAITimerInfoDto::getServiceName() const {
    return m_service_name;
}
void OAITimerInfoDto::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAITimerInfoDto::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAITimerInfoDto::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QDateTime OAITimerInfoDto::getStartDate() const {
    return m_start_date;
}
void OAITimerInfoDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITimerInfoDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITimerInfoDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIRecordingStatus OAITimerInfoDto::getStatus() const {
    return m_status;
}
void OAITimerInfoDto::setStatus(const OAIRecordingStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITimerInfoDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAITimerInfoDto::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITimerInfoDto::getType() const {
    return m_type;
}
void OAITimerInfoDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITimerInfoDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAITimerInfoDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITimerInfoDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_series_timer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_post_padding_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pre_padding_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_until.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_backdrop_image_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_backdrop_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_padding_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_padding_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_time_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_timer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimerInfoDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
