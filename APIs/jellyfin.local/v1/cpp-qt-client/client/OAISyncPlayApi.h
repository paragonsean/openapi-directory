/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISyncPlayApi_H
#define OAI_OAISyncPlayApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBufferRequestDto.h"
#include "OAIGroupInfoDto.h"
#include "OAIIgnoreWaitRequestDto.h"
#include "OAIJoinGroupRequestDto.h"
#include "OAIMovePlaylistItemRequestDto.h"
#include "OAINewGroupRequestDto.h"
#include "OAINextItemRequestDto.h"
#include "OAIPingRequestDto.h"
#include "OAIPlayRequestDto.h"
#include "OAIPreviousItemRequestDto.h"
#include "OAIQueueRequestDto.h"
#include "OAIReadyRequestDto.h"
#include "OAIRemoveFromPlaylistRequestDto.h"
#include "OAISeekRequestDto.h"
#include "OAISetPlaylistItemRequestDto.h"
#include "OAISetRepeatModeRequestDto.h"
#include "OAISetShuffleModeRequestDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISyncPlayApi : public QObject {
    Q_OBJECT

public:
    OAISyncPlayApi(const int timeOut = 0);
    ~OAISyncPlayApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_buffer_request_dto OAIBufferRequestDto [required]
    */
    virtual void syncPlayBuffering(const OAIBufferRequestDto &oai_buffer_request_dto);

    /**
    * @param[in]  oai_new_group_request_dto OAINewGroupRequestDto [required]
    */
    virtual void syncPlayCreateGroup(const OAINewGroupRequestDto &oai_new_group_request_dto);


    virtual void syncPlayGetGroups();

    /**
    * @param[in]  oai_join_group_request_dto OAIJoinGroupRequestDto [required]
    */
    virtual void syncPlayJoinGroup(const OAIJoinGroupRequestDto &oai_join_group_request_dto);


    virtual void syncPlayLeaveGroup();

    /**
    * @param[in]  oai_move_playlist_item_request_dto OAIMovePlaylistItemRequestDto [required]
    */
    virtual void syncPlayMovePlaylistItem(const OAIMovePlaylistItemRequestDto &oai_move_playlist_item_request_dto);

    /**
    * @param[in]  oai_next_item_request_dto OAINextItemRequestDto [required]
    */
    virtual void syncPlayNextItem(const OAINextItemRequestDto &oai_next_item_request_dto);


    virtual void syncPlayPause();

    /**
    * @param[in]  oai_ping_request_dto OAIPingRequestDto [required]
    */
    virtual void syncPlayPing(const OAIPingRequestDto &oai_ping_request_dto);

    /**
    * @param[in]  oai_previous_item_request_dto OAIPreviousItemRequestDto [required]
    */
    virtual void syncPlayPreviousItem(const OAIPreviousItemRequestDto &oai_previous_item_request_dto);

    /**
    * @param[in]  oai_queue_request_dto OAIQueueRequestDto [required]
    */
    virtual void syncPlayQueue(const OAIQueueRequestDto &oai_queue_request_dto);

    /**
    * @param[in]  oai_ready_request_dto OAIReadyRequestDto [required]
    */
    virtual void syncPlayReady(const OAIReadyRequestDto &oai_ready_request_dto);

    /**
    * @param[in]  oai_remove_from_playlist_request_dto OAIRemoveFromPlaylistRequestDto [required]
    */
    virtual void syncPlayRemoveFromPlaylist(const OAIRemoveFromPlaylistRequestDto &oai_remove_from_playlist_request_dto);

    /**
    * @param[in]  oai_seek_request_dto OAISeekRequestDto [required]
    */
    virtual void syncPlaySeek(const OAISeekRequestDto &oai_seek_request_dto);

    /**
    * @param[in]  oai_ignore_wait_request_dto OAIIgnoreWaitRequestDto [required]
    */
    virtual void syncPlaySetIgnoreWait(const OAIIgnoreWaitRequestDto &oai_ignore_wait_request_dto);

    /**
    * @param[in]  oai_play_request_dto OAIPlayRequestDto [required]
    */
    virtual void syncPlaySetNewQueue(const OAIPlayRequestDto &oai_play_request_dto);

    /**
    * @param[in]  oai_set_playlist_item_request_dto OAISetPlaylistItemRequestDto [required]
    */
    virtual void syncPlaySetPlaylistItem(const OAISetPlaylistItemRequestDto &oai_set_playlist_item_request_dto);

    /**
    * @param[in]  oai_set_repeat_mode_request_dto OAISetRepeatModeRequestDto [required]
    */
    virtual void syncPlaySetRepeatMode(const OAISetRepeatModeRequestDto &oai_set_repeat_mode_request_dto);

    /**
    * @param[in]  oai_set_shuffle_mode_request_dto OAISetShuffleModeRequestDto [required]
    */
    virtual void syncPlaySetShuffleMode(const OAISetShuffleModeRequestDto &oai_set_shuffle_mode_request_dto);


    virtual void syncPlayStop();


    virtual void syncPlayUnpause();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void syncPlayBufferingCallback(OAIHttpRequestWorker *worker);
    void syncPlayCreateGroupCallback(OAIHttpRequestWorker *worker);
    void syncPlayGetGroupsCallback(OAIHttpRequestWorker *worker);
    void syncPlayJoinGroupCallback(OAIHttpRequestWorker *worker);
    void syncPlayLeaveGroupCallback(OAIHttpRequestWorker *worker);
    void syncPlayMovePlaylistItemCallback(OAIHttpRequestWorker *worker);
    void syncPlayNextItemCallback(OAIHttpRequestWorker *worker);
    void syncPlayPauseCallback(OAIHttpRequestWorker *worker);
    void syncPlayPingCallback(OAIHttpRequestWorker *worker);
    void syncPlayPreviousItemCallback(OAIHttpRequestWorker *worker);
    void syncPlayQueueCallback(OAIHttpRequestWorker *worker);
    void syncPlayReadyCallback(OAIHttpRequestWorker *worker);
    void syncPlayRemoveFromPlaylistCallback(OAIHttpRequestWorker *worker);
    void syncPlaySeekCallback(OAIHttpRequestWorker *worker);
    void syncPlaySetIgnoreWaitCallback(OAIHttpRequestWorker *worker);
    void syncPlaySetNewQueueCallback(OAIHttpRequestWorker *worker);
    void syncPlaySetPlaylistItemCallback(OAIHttpRequestWorker *worker);
    void syncPlaySetRepeatModeCallback(OAIHttpRequestWorker *worker);
    void syncPlaySetShuffleModeCallback(OAIHttpRequestWorker *worker);
    void syncPlayStopCallback(OAIHttpRequestWorker *worker);
    void syncPlayUnpauseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void syncPlayBufferingSignal();
    void syncPlayCreateGroupSignal();
    void syncPlayGetGroupsSignal(QList<OAIGroupInfoDto> summary);
    void syncPlayJoinGroupSignal();
    void syncPlayLeaveGroupSignal();
    void syncPlayMovePlaylistItemSignal();
    void syncPlayNextItemSignal();
    void syncPlayPauseSignal();
    void syncPlayPingSignal();
    void syncPlayPreviousItemSignal();
    void syncPlayQueueSignal();
    void syncPlayReadySignal();
    void syncPlayRemoveFromPlaylistSignal();
    void syncPlaySeekSignal();
    void syncPlaySetIgnoreWaitSignal();
    void syncPlaySetNewQueueSignal();
    void syncPlaySetPlaylistItemSignal();
    void syncPlaySetRepeatModeSignal();
    void syncPlaySetShuffleModeSignal();
    void syncPlayStopSignal();
    void syncPlayUnpauseSignal();


    void syncPlayBufferingSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayCreateGroupSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayGetGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupInfoDto> summary);
    void syncPlayJoinGroupSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayLeaveGroupSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayMovePlaylistItemSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayNextItemSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayPauseSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayPingSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayPreviousItemSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayQueueSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayReadySignalFull(OAIHttpRequestWorker *worker);
    void syncPlayRemoveFromPlaylistSignalFull(OAIHttpRequestWorker *worker);
    void syncPlaySeekSignalFull(OAIHttpRequestWorker *worker);
    void syncPlaySetIgnoreWaitSignalFull(OAIHttpRequestWorker *worker);
    void syncPlaySetNewQueueSignalFull(OAIHttpRequestWorker *worker);
    void syncPlaySetPlaylistItemSignalFull(OAIHttpRequestWorker *worker);
    void syncPlaySetRepeatModeSignalFull(OAIHttpRequestWorker *worker);
    void syncPlaySetShuffleModeSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayStopSignalFull(OAIHttpRequestWorker *worker);
    void syncPlayUnpauseSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use syncPlayBufferingSignalError() instead")
    void syncPlayBufferingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayBufferingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayCreateGroupSignalError() instead")
    void syncPlayCreateGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayCreateGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayGetGroupsSignalError() instead")
    void syncPlayGetGroupsSignalE(QList<OAIGroupInfoDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayGetGroupsSignalError(QList<OAIGroupInfoDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayJoinGroupSignalError() instead")
    void syncPlayJoinGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayJoinGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayLeaveGroupSignalError() instead")
    void syncPlayLeaveGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayLeaveGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayMovePlaylistItemSignalError() instead")
    void syncPlayMovePlaylistItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayMovePlaylistItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayNextItemSignalError() instead")
    void syncPlayNextItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayNextItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayPauseSignalError() instead")
    void syncPlayPauseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayPauseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayPingSignalError() instead")
    void syncPlayPingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayPingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayPreviousItemSignalError() instead")
    void syncPlayPreviousItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayPreviousItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayQueueSignalError() instead")
    void syncPlayQueueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayQueueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayReadySignalError() instead")
    void syncPlayReadySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayReadySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayRemoveFromPlaylistSignalError() instead")
    void syncPlayRemoveFromPlaylistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayRemoveFromPlaylistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySeekSignalError() instead")
    void syncPlaySeekSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySeekSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetIgnoreWaitSignalError() instead")
    void syncPlaySetIgnoreWaitSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetIgnoreWaitSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetNewQueueSignalError() instead")
    void syncPlaySetNewQueueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetNewQueueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetPlaylistItemSignalError() instead")
    void syncPlaySetPlaylistItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetPlaylistItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetRepeatModeSignalError() instead")
    void syncPlaySetRepeatModeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetRepeatModeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetShuffleModeSignalError() instead")
    void syncPlaySetShuffleModeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetShuffleModeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayStopSignalError() instead")
    void syncPlayStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayUnpauseSignalError() instead")
    void syncPlayUnpauseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayUnpauseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use syncPlayBufferingSignalErrorFull() instead")
    void syncPlayBufferingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayBufferingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayCreateGroupSignalErrorFull() instead")
    void syncPlayCreateGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayCreateGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayGetGroupsSignalErrorFull() instead")
    void syncPlayGetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayGetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayJoinGroupSignalErrorFull() instead")
    void syncPlayJoinGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayJoinGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayLeaveGroupSignalErrorFull() instead")
    void syncPlayLeaveGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayLeaveGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayMovePlaylistItemSignalErrorFull() instead")
    void syncPlayMovePlaylistItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayMovePlaylistItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayNextItemSignalErrorFull() instead")
    void syncPlayNextItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayNextItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayPauseSignalErrorFull() instead")
    void syncPlayPauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayPauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayPingSignalErrorFull() instead")
    void syncPlayPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayPreviousItemSignalErrorFull() instead")
    void syncPlayPreviousItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayPreviousItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayQueueSignalErrorFull() instead")
    void syncPlayQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayReadySignalErrorFull() instead")
    void syncPlayReadySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayReadySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayRemoveFromPlaylistSignalErrorFull() instead")
    void syncPlayRemoveFromPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayRemoveFromPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySeekSignalErrorFull() instead")
    void syncPlaySeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetIgnoreWaitSignalErrorFull() instead")
    void syncPlaySetIgnoreWaitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetIgnoreWaitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetNewQueueSignalErrorFull() instead")
    void syncPlaySetNewQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetNewQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetPlaylistItemSignalErrorFull() instead")
    void syncPlaySetPlaylistItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetPlaylistItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetRepeatModeSignalErrorFull() instead")
    void syncPlaySetRepeatModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetRepeatModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlaySetShuffleModeSignalErrorFull() instead")
    void syncPlaySetShuffleModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlaySetShuffleModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayStopSignalErrorFull() instead")
    void syncPlayStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncPlayUnpauseSignalErrorFull() instead")
    void syncPlayUnpauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncPlayUnpauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
