/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeriesTimerInfoDtoQueryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeriesTimerInfoDtoQueryResult::OAISeriesTimerInfoDtoQueryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeriesTimerInfoDtoQueryResult::OAISeriesTimerInfoDtoQueryResult() {
    this->initializeModel();
}

OAISeriesTimerInfoDtoQueryResult::~OAISeriesTimerInfoDtoQueryResult() {}

void OAISeriesTimerInfoDtoQueryResult::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_total_record_count_isSet = false;
    m_total_record_count_isValid = false;
}

void OAISeriesTimerInfoDtoQueryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeriesTimerInfoDtoQueryResult::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("StartIndex")]);
    m_start_index_isSet = !json[QString("StartIndex")].isNull() && m_start_index_isValid;

    m_total_record_count_isValid = ::OpenAPI::fromJsonValue(m_total_record_count, json[QString("TotalRecordCount")]);
    m_total_record_count_isSet = !json[QString("TotalRecordCount")].isNull() && m_total_record_count_isValid;
}

QString OAISeriesTimerInfoDtoQueryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeriesTimerInfoDtoQueryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("StartIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_total_record_count_isSet) {
        obj.insert(QString("TotalRecordCount"), ::OpenAPI::toJsonValue(m_total_record_count));
    }
    return obj;
}

QList<OAISeriesTimerInfoDto> OAISeriesTimerInfoDtoQueryResult::getItems() const {
    return m_items;
}
void OAISeriesTimerInfoDtoQueryResult::setItems(const QList<OAISeriesTimerInfoDto> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISeriesTimerInfoDtoQueryResult::is_items_Set() const{
    return m_items_isSet;
}

bool OAISeriesTimerInfoDtoQueryResult::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAISeriesTimerInfoDtoQueryResult::getStartIndex() const {
    return m_start_index;
}
void OAISeriesTimerInfoDtoQueryResult::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAISeriesTimerInfoDtoQueryResult::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAISeriesTimerInfoDtoQueryResult::is_start_index_Valid() const{
    return m_start_index_isValid;
}

qint32 OAISeriesTimerInfoDtoQueryResult::getTotalRecordCount() const {
    return m_total_record_count;
}
void OAISeriesTimerInfoDtoQueryResult::setTotalRecordCount(const qint32 &total_record_count) {
    m_total_record_count = total_record_count;
    m_total_record_count_isSet = true;
}

bool OAISeriesTimerInfoDtoQueryResult::is_total_record_count_Set() const{
    return m_total_record_count_isSet;
}

bool OAISeriesTimerInfoDtoQueryResult::is_total_record_count_Valid() const{
    return m_total_record_count_isValid;
}

bool OAISeriesTimerInfoDtoQueryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeriesTimerInfoDtoQueryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
