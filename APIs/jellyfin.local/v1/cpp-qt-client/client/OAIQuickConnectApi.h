/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQuickConnectApi_H
#define OAI_OAIQuickConnectApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProblemDetails.h"
#include "OAIQuickConnectResult.h"
#include "OAIQuickConnectState.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQuickConnectApi : public QObject {
    Q_OBJECT

public:
    OAIQuickConnectApi(const int timeOut = 0);
    ~OAIQuickConnectApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void activate();

    /**
    * @param[in]  code QString [required]
    */
    virtual void authorize(const QString &code);

    /**
    * @param[in]  status OAIQuickConnectState [optional]
    */
    virtual void available(const ::OpenAPI::OptionalParam<OAIQuickConnectState> &status = ::OpenAPI::OptionalParam<OAIQuickConnectState>());

    /**
    * @param[in]  secret QString [required]
    */
    virtual void connect(const QString &secret);


    virtual void deauthorize();


    virtual void getStatus();


    virtual void initiate();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateCallback(OAIHttpRequestWorker *worker);
    void authorizeCallback(OAIHttpRequestWorker *worker);
    void availableCallback(OAIHttpRequestWorker *worker);
    void connectCallback(OAIHttpRequestWorker *worker);
    void deauthorizeCallback(OAIHttpRequestWorker *worker);
    void getStatusCallback(OAIHttpRequestWorker *worker);
    void initiateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateSignal();
    void authorizeSignal(bool summary);
    void availableSignal();
    void connectSignal(OAIQuickConnectResult summary);
    void deauthorizeSignal(qint32 summary);
    void getStatusSignal(OAIQuickConnectState summary);
    void initiateSignal(OAIQuickConnectResult summary);


    void activateSignalFull(OAIHttpRequestWorker *worker);
    void authorizeSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void availableSignalFull(OAIHttpRequestWorker *worker);
    void connectSignalFull(OAIHttpRequestWorker *worker, OAIQuickConnectResult summary);
    void deauthorizeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getStatusSignalFull(OAIHttpRequestWorker *worker, OAIQuickConnectState summary);
    void initiateSignalFull(OAIHttpRequestWorker *worker, OAIQuickConnectResult summary);

    Q_DECL_DEPRECATED_X("Use activateSignalError() instead")
    void activateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizeSignalError() instead")
    void authorizeSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availableSignalError() instead")
    void availableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void availableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectSignalError() instead")
    void connectSignalE(OAIQuickConnectResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectSignalError(OAIQuickConnectResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deauthorizeSignalError() instead")
    void deauthorizeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deauthorizeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalError() instead")
    void getStatusSignalE(OAIQuickConnectState summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalError(OAIQuickConnectState summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateSignalError() instead")
    void initiateSignalE(OAIQuickConnectResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateSignalError(OAIQuickConnectResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateSignalErrorFull() instead")
    void activateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizeSignalErrorFull() instead")
    void authorizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availableSignalErrorFull() instead")
    void availableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectSignalErrorFull() instead")
    void connectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deauthorizeSignalErrorFull() instead")
    void deauthorizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deauthorizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalErrorFull() instead")
    void getStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateSignalErrorFull() instead")
    void initiateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
