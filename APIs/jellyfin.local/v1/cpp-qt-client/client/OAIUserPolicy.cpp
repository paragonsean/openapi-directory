/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPolicy::OAIUserPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPolicy::OAIUserPolicy() {
    this->initializeModel();
}

OAIUserPolicy::~OAIUserPolicy() {}

void OAIUserPolicy::initializeModel() {

    m_access_schedules_isSet = false;
    m_access_schedules_isValid = false;

    m_authentication_provider_id_isSet = false;
    m_authentication_provider_id_isValid = false;

    m_block_unrated_items_isSet = false;
    m_block_unrated_items_isValid = false;

    m_blocked_channels_isSet = false;
    m_blocked_channels_isValid = false;

    m_blocked_media_folders_isSet = false;
    m_blocked_media_folders_isValid = false;

    m_blocked_tags_isSet = false;
    m_blocked_tags_isValid = false;

    m_enable_all_channels_isSet = false;
    m_enable_all_channels_isValid = false;

    m_enable_all_devices_isSet = false;
    m_enable_all_devices_isValid = false;

    m_enable_all_folders_isSet = false;
    m_enable_all_folders_isValid = false;

    m_enable_audio_playback_transcoding_isSet = false;
    m_enable_audio_playback_transcoding_isValid = false;

    m_enable_content_deletion_isSet = false;
    m_enable_content_deletion_isValid = false;

    m_enable_content_deletion_from_folders_isSet = false;
    m_enable_content_deletion_from_folders_isValid = false;

    m_enable_content_downloading_isSet = false;
    m_enable_content_downloading_isValid = false;

    m_enable_live_tv_access_isSet = false;
    m_enable_live_tv_access_isValid = false;

    m_enable_live_tv_management_isSet = false;
    m_enable_live_tv_management_isValid = false;

    m_enable_media_conversion_isSet = false;
    m_enable_media_conversion_isValid = false;

    m_enable_media_playback_isSet = false;
    m_enable_media_playback_isValid = false;

    m_enable_playback_remuxing_isSet = false;
    m_enable_playback_remuxing_isValid = false;

    m_enable_public_sharing_isSet = false;
    m_enable_public_sharing_isValid = false;

    m_enable_remote_access_isSet = false;
    m_enable_remote_access_isValid = false;

    m_enable_remote_control_of_other_users_isSet = false;
    m_enable_remote_control_of_other_users_isValid = false;

    m_enable_shared_device_control_isSet = false;
    m_enable_shared_device_control_isValid = false;

    m_enable_sync_transcoding_isSet = false;
    m_enable_sync_transcoding_isValid = false;

    m_enable_user_preference_access_isSet = false;
    m_enable_user_preference_access_isValid = false;

    m_enable_video_playback_transcoding_isSet = false;
    m_enable_video_playback_transcoding_isValid = false;

    m_enabled_channels_isSet = false;
    m_enabled_channels_isValid = false;

    m_enabled_devices_isSet = false;
    m_enabled_devices_isValid = false;

    m_enabled_folders_isSet = false;
    m_enabled_folders_isValid = false;

    m_force_remote_source_transcoding_isSet = false;
    m_force_remote_source_transcoding_isValid = false;

    m_invalid_login_attempt_count_isSet = false;
    m_invalid_login_attempt_count_isValid = false;

    m_is_administrator_isSet = false;
    m_is_administrator_isValid = false;

    m_is_disabled_isSet = false;
    m_is_disabled_isValid = false;

    m_is_hidden_isSet = false;
    m_is_hidden_isValid = false;

    m_login_attempts_before_lockout_isSet = false;
    m_login_attempts_before_lockout_isValid = false;

    m_max_active_sessions_isSet = false;
    m_max_active_sessions_isValid = false;

    m_max_parental_rating_isSet = false;
    m_max_parental_rating_isValid = false;

    m_password_reset_provider_id_isSet = false;
    m_password_reset_provider_id_isValid = false;

    m_remote_client_bitrate_limit_isSet = false;
    m_remote_client_bitrate_limit_isValid = false;

    m_sync_play_access_isSet = false;
    m_sync_play_access_isValid = false;
}

void OAIUserPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPolicy::fromJsonObject(QJsonObject json) {

    m_access_schedules_isValid = ::OpenAPI::fromJsonValue(m_access_schedules, json[QString("AccessSchedules")]);
    m_access_schedules_isSet = !json[QString("AccessSchedules")].isNull() && m_access_schedules_isValid;

    m_authentication_provider_id_isValid = ::OpenAPI::fromJsonValue(m_authentication_provider_id, json[QString("AuthenticationProviderId")]);
    m_authentication_provider_id_isSet = !json[QString("AuthenticationProviderId")].isNull() && m_authentication_provider_id_isValid;

    m_block_unrated_items_isValid = ::OpenAPI::fromJsonValue(m_block_unrated_items, json[QString("BlockUnratedItems")]);
    m_block_unrated_items_isSet = !json[QString("BlockUnratedItems")].isNull() && m_block_unrated_items_isValid;

    m_blocked_channels_isValid = ::OpenAPI::fromJsonValue(m_blocked_channels, json[QString("BlockedChannels")]);
    m_blocked_channels_isSet = !json[QString("BlockedChannels")].isNull() && m_blocked_channels_isValid;

    m_blocked_media_folders_isValid = ::OpenAPI::fromJsonValue(m_blocked_media_folders, json[QString("BlockedMediaFolders")]);
    m_blocked_media_folders_isSet = !json[QString("BlockedMediaFolders")].isNull() && m_blocked_media_folders_isValid;

    m_blocked_tags_isValid = ::OpenAPI::fromJsonValue(m_blocked_tags, json[QString("BlockedTags")]);
    m_blocked_tags_isSet = !json[QString("BlockedTags")].isNull() && m_blocked_tags_isValid;

    m_enable_all_channels_isValid = ::OpenAPI::fromJsonValue(m_enable_all_channels, json[QString("EnableAllChannels")]);
    m_enable_all_channels_isSet = !json[QString("EnableAllChannels")].isNull() && m_enable_all_channels_isValid;

    m_enable_all_devices_isValid = ::OpenAPI::fromJsonValue(m_enable_all_devices, json[QString("EnableAllDevices")]);
    m_enable_all_devices_isSet = !json[QString("EnableAllDevices")].isNull() && m_enable_all_devices_isValid;

    m_enable_all_folders_isValid = ::OpenAPI::fromJsonValue(m_enable_all_folders, json[QString("EnableAllFolders")]);
    m_enable_all_folders_isSet = !json[QString("EnableAllFolders")].isNull() && m_enable_all_folders_isValid;

    m_enable_audio_playback_transcoding_isValid = ::OpenAPI::fromJsonValue(m_enable_audio_playback_transcoding, json[QString("EnableAudioPlaybackTranscoding")]);
    m_enable_audio_playback_transcoding_isSet = !json[QString("EnableAudioPlaybackTranscoding")].isNull() && m_enable_audio_playback_transcoding_isValid;

    m_enable_content_deletion_isValid = ::OpenAPI::fromJsonValue(m_enable_content_deletion, json[QString("EnableContentDeletion")]);
    m_enable_content_deletion_isSet = !json[QString("EnableContentDeletion")].isNull() && m_enable_content_deletion_isValid;

    m_enable_content_deletion_from_folders_isValid = ::OpenAPI::fromJsonValue(m_enable_content_deletion_from_folders, json[QString("EnableContentDeletionFromFolders")]);
    m_enable_content_deletion_from_folders_isSet = !json[QString("EnableContentDeletionFromFolders")].isNull() && m_enable_content_deletion_from_folders_isValid;

    m_enable_content_downloading_isValid = ::OpenAPI::fromJsonValue(m_enable_content_downloading, json[QString("EnableContentDownloading")]);
    m_enable_content_downloading_isSet = !json[QString("EnableContentDownloading")].isNull() && m_enable_content_downloading_isValid;

    m_enable_live_tv_access_isValid = ::OpenAPI::fromJsonValue(m_enable_live_tv_access, json[QString("EnableLiveTvAccess")]);
    m_enable_live_tv_access_isSet = !json[QString("EnableLiveTvAccess")].isNull() && m_enable_live_tv_access_isValid;

    m_enable_live_tv_management_isValid = ::OpenAPI::fromJsonValue(m_enable_live_tv_management, json[QString("EnableLiveTvManagement")]);
    m_enable_live_tv_management_isSet = !json[QString("EnableLiveTvManagement")].isNull() && m_enable_live_tv_management_isValid;

    m_enable_media_conversion_isValid = ::OpenAPI::fromJsonValue(m_enable_media_conversion, json[QString("EnableMediaConversion")]);
    m_enable_media_conversion_isSet = !json[QString("EnableMediaConversion")].isNull() && m_enable_media_conversion_isValid;

    m_enable_media_playback_isValid = ::OpenAPI::fromJsonValue(m_enable_media_playback, json[QString("EnableMediaPlayback")]);
    m_enable_media_playback_isSet = !json[QString("EnableMediaPlayback")].isNull() && m_enable_media_playback_isValid;

    m_enable_playback_remuxing_isValid = ::OpenAPI::fromJsonValue(m_enable_playback_remuxing, json[QString("EnablePlaybackRemuxing")]);
    m_enable_playback_remuxing_isSet = !json[QString("EnablePlaybackRemuxing")].isNull() && m_enable_playback_remuxing_isValid;

    m_enable_public_sharing_isValid = ::OpenAPI::fromJsonValue(m_enable_public_sharing, json[QString("EnablePublicSharing")]);
    m_enable_public_sharing_isSet = !json[QString("EnablePublicSharing")].isNull() && m_enable_public_sharing_isValid;

    m_enable_remote_access_isValid = ::OpenAPI::fromJsonValue(m_enable_remote_access, json[QString("EnableRemoteAccess")]);
    m_enable_remote_access_isSet = !json[QString("EnableRemoteAccess")].isNull() && m_enable_remote_access_isValid;

    m_enable_remote_control_of_other_users_isValid = ::OpenAPI::fromJsonValue(m_enable_remote_control_of_other_users, json[QString("EnableRemoteControlOfOtherUsers")]);
    m_enable_remote_control_of_other_users_isSet = !json[QString("EnableRemoteControlOfOtherUsers")].isNull() && m_enable_remote_control_of_other_users_isValid;

    m_enable_shared_device_control_isValid = ::OpenAPI::fromJsonValue(m_enable_shared_device_control, json[QString("EnableSharedDeviceControl")]);
    m_enable_shared_device_control_isSet = !json[QString("EnableSharedDeviceControl")].isNull() && m_enable_shared_device_control_isValid;

    m_enable_sync_transcoding_isValid = ::OpenAPI::fromJsonValue(m_enable_sync_transcoding, json[QString("EnableSyncTranscoding")]);
    m_enable_sync_transcoding_isSet = !json[QString("EnableSyncTranscoding")].isNull() && m_enable_sync_transcoding_isValid;

    m_enable_user_preference_access_isValid = ::OpenAPI::fromJsonValue(m_enable_user_preference_access, json[QString("EnableUserPreferenceAccess")]);
    m_enable_user_preference_access_isSet = !json[QString("EnableUserPreferenceAccess")].isNull() && m_enable_user_preference_access_isValid;

    m_enable_video_playback_transcoding_isValid = ::OpenAPI::fromJsonValue(m_enable_video_playback_transcoding, json[QString("EnableVideoPlaybackTranscoding")]);
    m_enable_video_playback_transcoding_isSet = !json[QString("EnableVideoPlaybackTranscoding")].isNull() && m_enable_video_playback_transcoding_isValid;

    m_enabled_channels_isValid = ::OpenAPI::fromJsonValue(m_enabled_channels, json[QString("EnabledChannels")]);
    m_enabled_channels_isSet = !json[QString("EnabledChannels")].isNull() && m_enabled_channels_isValid;

    m_enabled_devices_isValid = ::OpenAPI::fromJsonValue(m_enabled_devices, json[QString("EnabledDevices")]);
    m_enabled_devices_isSet = !json[QString("EnabledDevices")].isNull() && m_enabled_devices_isValid;

    m_enabled_folders_isValid = ::OpenAPI::fromJsonValue(m_enabled_folders, json[QString("EnabledFolders")]);
    m_enabled_folders_isSet = !json[QString("EnabledFolders")].isNull() && m_enabled_folders_isValid;

    m_force_remote_source_transcoding_isValid = ::OpenAPI::fromJsonValue(m_force_remote_source_transcoding, json[QString("ForceRemoteSourceTranscoding")]);
    m_force_remote_source_transcoding_isSet = !json[QString("ForceRemoteSourceTranscoding")].isNull() && m_force_remote_source_transcoding_isValid;

    m_invalid_login_attempt_count_isValid = ::OpenAPI::fromJsonValue(m_invalid_login_attempt_count, json[QString("InvalidLoginAttemptCount")]);
    m_invalid_login_attempt_count_isSet = !json[QString("InvalidLoginAttemptCount")].isNull() && m_invalid_login_attempt_count_isValid;

    m_is_administrator_isValid = ::OpenAPI::fromJsonValue(m_is_administrator, json[QString("IsAdministrator")]);
    m_is_administrator_isSet = !json[QString("IsAdministrator")].isNull() && m_is_administrator_isValid;

    m_is_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_disabled, json[QString("IsDisabled")]);
    m_is_disabled_isSet = !json[QString("IsDisabled")].isNull() && m_is_disabled_isValid;

    m_is_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_hidden, json[QString("IsHidden")]);
    m_is_hidden_isSet = !json[QString("IsHidden")].isNull() && m_is_hidden_isValid;

    m_login_attempts_before_lockout_isValid = ::OpenAPI::fromJsonValue(m_login_attempts_before_lockout, json[QString("LoginAttemptsBeforeLockout")]);
    m_login_attempts_before_lockout_isSet = !json[QString("LoginAttemptsBeforeLockout")].isNull() && m_login_attempts_before_lockout_isValid;

    m_max_active_sessions_isValid = ::OpenAPI::fromJsonValue(m_max_active_sessions, json[QString("MaxActiveSessions")]);
    m_max_active_sessions_isSet = !json[QString("MaxActiveSessions")].isNull() && m_max_active_sessions_isValid;

    m_max_parental_rating_isValid = ::OpenAPI::fromJsonValue(m_max_parental_rating, json[QString("MaxParentalRating")]);
    m_max_parental_rating_isSet = !json[QString("MaxParentalRating")].isNull() && m_max_parental_rating_isValid;

    m_password_reset_provider_id_isValid = ::OpenAPI::fromJsonValue(m_password_reset_provider_id, json[QString("PasswordResetProviderId")]);
    m_password_reset_provider_id_isSet = !json[QString("PasswordResetProviderId")].isNull() && m_password_reset_provider_id_isValid;

    m_remote_client_bitrate_limit_isValid = ::OpenAPI::fromJsonValue(m_remote_client_bitrate_limit, json[QString("RemoteClientBitrateLimit")]);
    m_remote_client_bitrate_limit_isSet = !json[QString("RemoteClientBitrateLimit")].isNull() && m_remote_client_bitrate_limit_isValid;

    m_sync_play_access_isValid = ::OpenAPI::fromJsonValue(m_sync_play_access, json[QString("SyncPlayAccess")]);
    m_sync_play_access_isSet = !json[QString("SyncPlayAccess")].isNull() && m_sync_play_access_isValid;
}

QString OAIUserPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_access_schedules.size() > 0) {
        obj.insert(QString("AccessSchedules"), ::OpenAPI::toJsonValue(m_access_schedules));
    }
    if (m_authentication_provider_id_isSet) {
        obj.insert(QString("AuthenticationProviderId"), ::OpenAPI::toJsonValue(m_authentication_provider_id));
    }
    if (m_block_unrated_items.size() > 0) {
        obj.insert(QString("BlockUnratedItems"), ::OpenAPI::toJsonValue(m_block_unrated_items));
    }
    if (m_blocked_channels.size() > 0) {
        obj.insert(QString("BlockedChannels"), ::OpenAPI::toJsonValue(m_blocked_channels));
    }
    if (m_blocked_media_folders.size() > 0) {
        obj.insert(QString("BlockedMediaFolders"), ::OpenAPI::toJsonValue(m_blocked_media_folders));
    }
    if (m_blocked_tags.size() > 0) {
        obj.insert(QString("BlockedTags"), ::OpenAPI::toJsonValue(m_blocked_tags));
    }
    if (m_enable_all_channels_isSet) {
        obj.insert(QString("EnableAllChannels"), ::OpenAPI::toJsonValue(m_enable_all_channels));
    }
    if (m_enable_all_devices_isSet) {
        obj.insert(QString("EnableAllDevices"), ::OpenAPI::toJsonValue(m_enable_all_devices));
    }
    if (m_enable_all_folders_isSet) {
        obj.insert(QString("EnableAllFolders"), ::OpenAPI::toJsonValue(m_enable_all_folders));
    }
    if (m_enable_audio_playback_transcoding_isSet) {
        obj.insert(QString("EnableAudioPlaybackTranscoding"), ::OpenAPI::toJsonValue(m_enable_audio_playback_transcoding));
    }
    if (m_enable_content_deletion_isSet) {
        obj.insert(QString("EnableContentDeletion"), ::OpenAPI::toJsonValue(m_enable_content_deletion));
    }
    if (m_enable_content_deletion_from_folders.size() > 0) {
        obj.insert(QString("EnableContentDeletionFromFolders"), ::OpenAPI::toJsonValue(m_enable_content_deletion_from_folders));
    }
    if (m_enable_content_downloading_isSet) {
        obj.insert(QString("EnableContentDownloading"), ::OpenAPI::toJsonValue(m_enable_content_downloading));
    }
    if (m_enable_live_tv_access_isSet) {
        obj.insert(QString("EnableLiveTvAccess"), ::OpenAPI::toJsonValue(m_enable_live_tv_access));
    }
    if (m_enable_live_tv_management_isSet) {
        obj.insert(QString("EnableLiveTvManagement"), ::OpenAPI::toJsonValue(m_enable_live_tv_management));
    }
    if (m_enable_media_conversion_isSet) {
        obj.insert(QString("EnableMediaConversion"), ::OpenAPI::toJsonValue(m_enable_media_conversion));
    }
    if (m_enable_media_playback_isSet) {
        obj.insert(QString("EnableMediaPlayback"), ::OpenAPI::toJsonValue(m_enable_media_playback));
    }
    if (m_enable_playback_remuxing_isSet) {
        obj.insert(QString("EnablePlaybackRemuxing"), ::OpenAPI::toJsonValue(m_enable_playback_remuxing));
    }
    if (m_enable_public_sharing_isSet) {
        obj.insert(QString("EnablePublicSharing"), ::OpenAPI::toJsonValue(m_enable_public_sharing));
    }
    if (m_enable_remote_access_isSet) {
        obj.insert(QString("EnableRemoteAccess"), ::OpenAPI::toJsonValue(m_enable_remote_access));
    }
    if (m_enable_remote_control_of_other_users_isSet) {
        obj.insert(QString("EnableRemoteControlOfOtherUsers"), ::OpenAPI::toJsonValue(m_enable_remote_control_of_other_users));
    }
    if (m_enable_shared_device_control_isSet) {
        obj.insert(QString("EnableSharedDeviceControl"), ::OpenAPI::toJsonValue(m_enable_shared_device_control));
    }
    if (m_enable_sync_transcoding_isSet) {
        obj.insert(QString("EnableSyncTranscoding"), ::OpenAPI::toJsonValue(m_enable_sync_transcoding));
    }
    if (m_enable_user_preference_access_isSet) {
        obj.insert(QString("EnableUserPreferenceAccess"), ::OpenAPI::toJsonValue(m_enable_user_preference_access));
    }
    if (m_enable_video_playback_transcoding_isSet) {
        obj.insert(QString("EnableVideoPlaybackTranscoding"), ::OpenAPI::toJsonValue(m_enable_video_playback_transcoding));
    }
    if (m_enabled_channels.size() > 0) {
        obj.insert(QString("EnabledChannels"), ::OpenAPI::toJsonValue(m_enabled_channels));
    }
    if (m_enabled_devices.size() > 0) {
        obj.insert(QString("EnabledDevices"), ::OpenAPI::toJsonValue(m_enabled_devices));
    }
    if (m_enabled_folders.size() > 0) {
        obj.insert(QString("EnabledFolders"), ::OpenAPI::toJsonValue(m_enabled_folders));
    }
    if (m_force_remote_source_transcoding_isSet) {
        obj.insert(QString("ForceRemoteSourceTranscoding"), ::OpenAPI::toJsonValue(m_force_remote_source_transcoding));
    }
    if (m_invalid_login_attempt_count_isSet) {
        obj.insert(QString("InvalidLoginAttemptCount"), ::OpenAPI::toJsonValue(m_invalid_login_attempt_count));
    }
    if (m_is_administrator_isSet) {
        obj.insert(QString("IsAdministrator"), ::OpenAPI::toJsonValue(m_is_administrator));
    }
    if (m_is_disabled_isSet) {
        obj.insert(QString("IsDisabled"), ::OpenAPI::toJsonValue(m_is_disabled));
    }
    if (m_is_hidden_isSet) {
        obj.insert(QString("IsHidden"), ::OpenAPI::toJsonValue(m_is_hidden));
    }
    if (m_login_attempts_before_lockout_isSet) {
        obj.insert(QString("LoginAttemptsBeforeLockout"), ::OpenAPI::toJsonValue(m_login_attempts_before_lockout));
    }
    if (m_max_active_sessions_isSet) {
        obj.insert(QString("MaxActiveSessions"), ::OpenAPI::toJsonValue(m_max_active_sessions));
    }
    if (m_max_parental_rating_isSet) {
        obj.insert(QString("MaxParentalRating"), ::OpenAPI::toJsonValue(m_max_parental_rating));
    }
    if (m_password_reset_provider_id_isSet) {
        obj.insert(QString("PasswordResetProviderId"), ::OpenAPI::toJsonValue(m_password_reset_provider_id));
    }
    if (m_remote_client_bitrate_limit_isSet) {
        obj.insert(QString("RemoteClientBitrateLimit"), ::OpenAPI::toJsonValue(m_remote_client_bitrate_limit));
    }
    if (m_sync_play_access.isSet()) {
        obj.insert(QString("SyncPlayAccess"), ::OpenAPI::toJsonValue(m_sync_play_access));
    }
    return obj;
}

QList<OAIAccessSchedule> OAIUserPolicy::getAccessSchedules() const {
    return m_access_schedules;
}
void OAIUserPolicy::setAccessSchedules(const QList<OAIAccessSchedule> &access_schedules) {
    m_access_schedules = access_schedules;
    m_access_schedules_isSet = true;
}

bool OAIUserPolicy::is_access_schedules_Set() const{
    return m_access_schedules_isSet;
}

bool OAIUserPolicy::is_access_schedules_Valid() const{
    return m_access_schedules_isValid;
}

QString OAIUserPolicy::getAuthenticationProviderId() const {
    return m_authentication_provider_id;
}
void OAIUserPolicy::setAuthenticationProviderId(const QString &authentication_provider_id) {
    m_authentication_provider_id = authentication_provider_id;
    m_authentication_provider_id_isSet = true;
}

bool OAIUserPolicy::is_authentication_provider_id_Set() const{
    return m_authentication_provider_id_isSet;
}

bool OAIUserPolicy::is_authentication_provider_id_Valid() const{
    return m_authentication_provider_id_isValid;
}

QList<OAIUnratedItem> OAIUserPolicy::getBlockUnratedItems() const {
    return m_block_unrated_items;
}
void OAIUserPolicy::setBlockUnratedItems(const QList<OAIUnratedItem> &block_unrated_items) {
    m_block_unrated_items = block_unrated_items;
    m_block_unrated_items_isSet = true;
}

bool OAIUserPolicy::is_block_unrated_items_Set() const{
    return m_block_unrated_items_isSet;
}

bool OAIUserPolicy::is_block_unrated_items_Valid() const{
    return m_block_unrated_items_isValid;
}

QList<QString> OAIUserPolicy::getBlockedChannels() const {
    return m_blocked_channels;
}
void OAIUserPolicy::setBlockedChannels(const QList<QString> &blocked_channels) {
    m_blocked_channels = blocked_channels;
    m_blocked_channels_isSet = true;
}

bool OAIUserPolicy::is_blocked_channels_Set() const{
    return m_blocked_channels_isSet;
}

bool OAIUserPolicy::is_blocked_channels_Valid() const{
    return m_blocked_channels_isValid;
}

QList<QString> OAIUserPolicy::getBlockedMediaFolders() const {
    return m_blocked_media_folders;
}
void OAIUserPolicy::setBlockedMediaFolders(const QList<QString> &blocked_media_folders) {
    m_blocked_media_folders = blocked_media_folders;
    m_blocked_media_folders_isSet = true;
}

bool OAIUserPolicy::is_blocked_media_folders_Set() const{
    return m_blocked_media_folders_isSet;
}

bool OAIUserPolicy::is_blocked_media_folders_Valid() const{
    return m_blocked_media_folders_isValid;
}

QList<QString> OAIUserPolicy::getBlockedTags() const {
    return m_blocked_tags;
}
void OAIUserPolicy::setBlockedTags(const QList<QString> &blocked_tags) {
    m_blocked_tags = blocked_tags;
    m_blocked_tags_isSet = true;
}

bool OAIUserPolicy::is_blocked_tags_Set() const{
    return m_blocked_tags_isSet;
}

bool OAIUserPolicy::is_blocked_tags_Valid() const{
    return m_blocked_tags_isValid;
}

bool OAIUserPolicy::isEnableAllChannels() const {
    return m_enable_all_channels;
}
void OAIUserPolicy::setEnableAllChannels(const bool &enable_all_channels) {
    m_enable_all_channels = enable_all_channels;
    m_enable_all_channels_isSet = true;
}

bool OAIUserPolicy::is_enable_all_channels_Set() const{
    return m_enable_all_channels_isSet;
}

bool OAIUserPolicy::is_enable_all_channels_Valid() const{
    return m_enable_all_channels_isValid;
}

bool OAIUserPolicy::isEnableAllDevices() const {
    return m_enable_all_devices;
}
void OAIUserPolicy::setEnableAllDevices(const bool &enable_all_devices) {
    m_enable_all_devices = enable_all_devices;
    m_enable_all_devices_isSet = true;
}

bool OAIUserPolicy::is_enable_all_devices_Set() const{
    return m_enable_all_devices_isSet;
}

bool OAIUserPolicy::is_enable_all_devices_Valid() const{
    return m_enable_all_devices_isValid;
}

bool OAIUserPolicy::isEnableAllFolders() const {
    return m_enable_all_folders;
}
void OAIUserPolicy::setEnableAllFolders(const bool &enable_all_folders) {
    m_enable_all_folders = enable_all_folders;
    m_enable_all_folders_isSet = true;
}

bool OAIUserPolicy::is_enable_all_folders_Set() const{
    return m_enable_all_folders_isSet;
}

bool OAIUserPolicy::is_enable_all_folders_Valid() const{
    return m_enable_all_folders_isValid;
}

bool OAIUserPolicy::isEnableAudioPlaybackTranscoding() const {
    return m_enable_audio_playback_transcoding;
}
void OAIUserPolicy::setEnableAudioPlaybackTranscoding(const bool &enable_audio_playback_transcoding) {
    m_enable_audio_playback_transcoding = enable_audio_playback_transcoding;
    m_enable_audio_playback_transcoding_isSet = true;
}

bool OAIUserPolicy::is_enable_audio_playback_transcoding_Set() const{
    return m_enable_audio_playback_transcoding_isSet;
}

bool OAIUserPolicy::is_enable_audio_playback_transcoding_Valid() const{
    return m_enable_audio_playback_transcoding_isValid;
}

bool OAIUserPolicy::isEnableContentDeletion() const {
    return m_enable_content_deletion;
}
void OAIUserPolicy::setEnableContentDeletion(const bool &enable_content_deletion) {
    m_enable_content_deletion = enable_content_deletion;
    m_enable_content_deletion_isSet = true;
}

bool OAIUserPolicy::is_enable_content_deletion_Set() const{
    return m_enable_content_deletion_isSet;
}

bool OAIUserPolicy::is_enable_content_deletion_Valid() const{
    return m_enable_content_deletion_isValid;
}

QList<QString> OAIUserPolicy::getEnableContentDeletionFromFolders() const {
    return m_enable_content_deletion_from_folders;
}
void OAIUserPolicy::setEnableContentDeletionFromFolders(const QList<QString> &enable_content_deletion_from_folders) {
    m_enable_content_deletion_from_folders = enable_content_deletion_from_folders;
    m_enable_content_deletion_from_folders_isSet = true;
}

bool OAIUserPolicy::is_enable_content_deletion_from_folders_Set() const{
    return m_enable_content_deletion_from_folders_isSet;
}

bool OAIUserPolicy::is_enable_content_deletion_from_folders_Valid() const{
    return m_enable_content_deletion_from_folders_isValid;
}

bool OAIUserPolicy::isEnableContentDownloading() const {
    return m_enable_content_downloading;
}
void OAIUserPolicy::setEnableContentDownloading(const bool &enable_content_downloading) {
    m_enable_content_downloading = enable_content_downloading;
    m_enable_content_downloading_isSet = true;
}

bool OAIUserPolicy::is_enable_content_downloading_Set() const{
    return m_enable_content_downloading_isSet;
}

bool OAIUserPolicy::is_enable_content_downloading_Valid() const{
    return m_enable_content_downloading_isValid;
}

bool OAIUserPolicy::isEnableLiveTvAccess() const {
    return m_enable_live_tv_access;
}
void OAIUserPolicy::setEnableLiveTvAccess(const bool &enable_live_tv_access) {
    m_enable_live_tv_access = enable_live_tv_access;
    m_enable_live_tv_access_isSet = true;
}

bool OAIUserPolicy::is_enable_live_tv_access_Set() const{
    return m_enable_live_tv_access_isSet;
}

bool OAIUserPolicy::is_enable_live_tv_access_Valid() const{
    return m_enable_live_tv_access_isValid;
}

bool OAIUserPolicy::isEnableLiveTvManagement() const {
    return m_enable_live_tv_management;
}
void OAIUserPolicy::setEnableLiveTvManagement(const bool &enable_live_tv_management) {
    m_enable_live_tv_management = enable_live_tv_management;
    m_enable_live_tv_management_isSet = true;
}

bool OAIUserPolicy::is_enable_live_tv_management_Set() const{
    return m_enable_live_tv_management_isSet;
}

bool OAIUserPolicy::is_enable_live_tv_management_Valid() const{
    return m_enable_live_tv_management_isValid;
}

bool OAIUserPolicy::isEnableMediaConversion() const {
    return m_enable_media_conversion;
}
void OAIUserPolicy::setEnableMediaConversion(const bool &enable_media_conversion) {
    m_enable_media_conversion = enable_media_conversion;
    m_enable_media_conversion_isSet = true;
}

bool OAIUserPolicy::is_enable_media_conversion_Set() const{
    return m_enable_media_conversion_isSet;
}

bool OAIUserPolicy::is_enable_media_conversion_Valid() const{
    return m_enable_media_conversion_isValid;
}

bool OAIUserPolicy::isEnableMediaPlayback() const {
    return m_enable_media_playback;
}
void OAIUserPolicy::setEnableMediaPlayback(const bool &enable_media_playback) {
    m_enable_media_playback = enable_media_playback;
    m_enable_media_playback_isSet = true;
}

bool OAIUserPolicy::is_enable_media_playback_Set() const{
    return m_enable_media_playback_isSet;
}

bool OAIUserPolicy::is_enable_media_playback_Valid() const{
    return m_enable_media_playback_isValid;
}

bool OAIUserPolicy::isEnablePlaybackRemuxing() const {
    return m_enable_playback_remuxing;
}
void OAIUserPolicy::setEnablePlaybackRemuxing(const bool &enable_playback_remuxing) {
    m_enable_playback_remuxing = enable_playback_remuxing;
    m_enable_playback_remuxing_isSet = true;
}

bool OAIUserPolicy::is_enable_playback_remuxing_Set() const{
    return m_enable_playback_remuxing_isSet;
}

bool OAIUserPolicy::is_enable_playback_remuxing_Valid() const{
    return m_enable_playback_remuxing_isValid;
}

bool OAIUserPolicy::isEnablePublicSharing() const {
    return m_enable_public_sharing;
}
void OAIUserPolicy::setEnablePublicSharing(const bool &enable_public_sharing) {
    m_enable_public_sharing = enable_public_sharing;
    m_enable_public_sharing_isSet = true;
}

bool OAIUserPolicy::is_enable_public_sharing_Set() const{
    return m_enable_public_sharing_isSet;
}

bool OAIUserPolicy::is_enable_public_sharing_Valid() const{
    return m_enable_public_sharing_isValid;
}

bool OAIUserPolicy::isEnableRemoteAccess() const {
    return m_enable_remote_access;
}
void OAIUserPolicy::setEnableRemoteAccess(const bool &enable_remote_access) {
    m_enable_remote_access = enable_remote_access;
    m_enable_remote_access_isSet = true;
}

bool OAIUserPolicy::is_enable_remote_access_Set() const{
    return m_enable_remote_access_isSet;
}

bool OAIUserPolicy::is_enable_remote_access_Valid() const{
    return m_enable_remote_access_isValid;
}

bool OAIUserPolicy::isEnableRemoteControlOfOtherUsers() const {
    return m_enable_remote_control_of_other_users;
}
void OAIUserPolicy::setEnableRemoteControlOfOtherUsers(const bool &enable_remote_control_of_other_users) {
    m_enable_remote_control_of_other_users = enable_remote_control_of_other_users;
    m_enable_remote_control_of_other_users_isSet = true;
}

bool OAIUserPolicy::is_enable_remote_control_of_other_users_Set() const{
    return m_enable_remote_control_of_other_users_isSet;
}

bool OAIUserPolicy::is_enable_remote_control_of_other_users_Valid() const{
    return m_enable_remote_control_of_other_users_isValid;
}

bool OAIUserPolicy::isEnableSharedDeviceControl() const {
    return m_enable_shared_device_control;
}
void OAIUserPolicy::setEnableSharedDeviceControl(const bool &enable_shared_device_control) {
    m_enable_shared_device_control = enable_shared_device_control;
    m_enable_shared_device_control_isSet = true;
}

bool OAIUserPolicy::is_enable_shared_device_control_Set() const{
    return m_enable_shared_device_control_isSet;
}

bool OAIUserPolicy::is_enable_shared_device_control_Valid() const{
    return m_enable_shared_device_control_isValid;
}

bool OAIUserPolicy::isEnableSyncTranscoding() const {
    return m_enable_sync_transcoding;
}
void OAIUserPolicy::setEnableSyncTranscoding(const bool &enable_sync_transcoding) {
    m_enable_sync_transcoding = enable_sync_transcoding;
    m_enable_sync_transcoding_isSet = true;
}

bool OAIUserPolicy::is_enable_sync_transcoding_Set() const{
    return m_enable_sync_transcoding_isSet;
}

bool OAIUserPolicy::is_enable_sync_transcoding_Valid() const{
    return m_enable_sync_transcoding_isValid;
}

bool OAIUserPolicy::isEnableUserPreferenceAccess() const {
    return m_enable_user_preference_access;
}
void OAIUserPolicy::setEnableUserPreferenceAccess(const bool &enable_user_preference_access) {
    m_enable_user_preference_access = enable_user_preference_access;
    m_enable_user_preference_access_isSet = true;
}

bool OAIUserPolicy::is_enable_user_preference_access_Set() const{
    return m_enable_user_preference_access_isSet;
}

bool OAIUserPolicy::is_enable_user_preference_access_Valid() const{
    return m_enable_user_preference_access_isValid;
}

bool OAIUserPolicy::isEnableVideoPlaybackTranscoding() const {
    return m_enable_video_playback_transcoding;
}
void OAIUserPolicy::setEnableVideoPlaybackTranscoding(const bool &enable_video_playback_transcoding) {
    m_enable_video_playback_transcoding = enable_video_playback_transcoding;
    m_enable_video_playback_transcoding_isSet = true;
}

bool OAIUserPolicy::is_enable_video_playback_transcoding_Set() const{
    return m_enable_video_playback_transcoding_isSet;
}

bool OAIUserPolicy::is_enable_video_playback_transcoding_Valid() const{
    return m_enable_video_playback_transcoding_isValid;
}

QList<QString> OAIUserPolicy::getEnabledChannels() const {
    return m_enabled_channels;
}
void OAIUserPolicy::setEnabledChannels(const QList<QString> &enabled_channels) {
    m_enabled_channels = enabled_channels;
    m_enabled_channels_isSet = true;
}

bool OAIUserPolicy::is_enabled_channels_Set() const{
    return m_enabled_channels_isSet;
}

bool OAIUserPolicy::is_enabled_channels_Valid() const{
    return m_enabled_channels_isValid;
}

QList<QString> OAIUserPolicy::getEnabledDevices() const {
    return m_enabled_devices;
}
void OAIUserPolicy::setEnabledDevices(const QList<QString> &enabled_devices) {
    m_enabled_devices = enabled_devices;
    m_enabled_devices_isSet = true;
}

bool OAIUserPolicy::is_enabled_devices_Set() const{
    return m_enabled_devices_isSet;
}

bool OAIUserPolicy::is_enabled_devices_Valid() const{
    return m_enabled_devices_isValid;
}

QList<QString> OAIUserPolicy::getEnabledFolders() const {
    return m_enabled_folders;
}
void OAIUserPolicy::setEnabledFolders(const QList<QString> &enabled_folders) {
    m_enabled_folders = enabled_folders;
    m_enabled_folders_isSet = true;
}

bool OAIUserPolicy::is_enabled_folders_Set() const{
    return m_enabled_folders_isSet;
}

bool OAIUserPolicy::is_enabled_folders_Valid() const{
    return m_enabled_folders_isValid;
}

bool OAIUserPolicy::isForceRemoteSourceTranscoding() const {
    return m_force_remote_source_transcoding;
}
void OAIUserPolicy::setForceRemoteSourceTranscoding(const bool &force_remote_source_transcoding) {
    m_force_remote_source_transcoding = force_remote_source_transcoding;
    m_force_remote_source_transcoding_isSet = true;
}

bool OAIUserPolicy::is_force_remote_source_transcoding_Set() const{
    return m_force_remote_source_transcoding_isSet;
}

bool OAIUserPolicy::is_force_remote_source_transcoding_Valid() const{
    return m_force_remote_source_transcoding_isValid;
}

qint32 OAIUserPolicy::getInvalidLoginAttemptCount() const {
    return m_invalid_login_attempt_count;
}
void OAIUserPolicy::setInvalidLoginAttemptCount(const qint32 &invalid_login_attempt_count) {
    m_invalid_login_attempt_count = invalid_login_attempt_count;
    m_invalid_login_attempt_count_isSet = true;
}

bool OAIUserPolicy::is_invalid_login_attempt_count_Set() const{
    return m_invalid_login_attempt_count_isSet;
}

bool OAIUserPolicy::is_invalid_login_attempt_count_Valid() const{
    return m_invalid_login_attempt_count_isValid;
}

bool OAIUserPolicy::isIsAdministrator() const {
    return m_is_administrator;
}
void OAIUserPolicy::setIsAdministrator(const bool &is_administrator) {
    m_is_administrator = is_administrator;
    m_is_administrator_isSet = true;
}

bool OAIUserPolicy::is_is_administrator_Set() const{
    return m_is_administrator_isSet;
}

bool OAIUserPolicy::is_is_administrator_Valid() const{
    return m_is_administrator_isValid;
}

bool OAIUserPolicy::isIsDisabled() const {
    return m_is_disabled;
}
void OAIUserPolicy::setIsDisabled(const bool &is_disabled) {
    m_is_disabled = is_disabled;
    m_is_disabled_isSet = true;
}

bool OAIUserPolicy::is_is_disabled_Set() const{
    return m_is_disabled_isSet;
}

bool OAIUserPolicy::is_is_disabled_Valid() const{
    return m_is_disabled_isValid;
}

bool OAIUserPolicy::isIsHidden() const {
    return m_is_hidden;
}
void OAIUserPolicy::setIsHidden(const bool &is_hidden) {
    m_is_hidden = is_hidden;
    m_is_hidden_isSet = true;
}

bool OAIUserPolicy::is_is_hidden_Set() const{
    return m_is_hidden_isSet;
}

bool OAIUserPolicy::is_is_hidden_Valid() const{
    return m_is_hidden_isValid;
}

qint32 OAIUserPolicy::getLoginAttemptsBeforeLockout() const {
    return m_login_attempts_before_lockout;
}
void OAIUserPolicy::setLoginAttemptsBeforeLockout(const qint32 &login_attempts_before_lockout) {
    m_login_attempts_before_lockout = login_attempts_before_lockout;
    m_login_attempts_before_lockout_isSet = true;
}

bool OAIUserPolicy::is_login_attempts_before_lockout_Set() const{
    return m_login_attempts_before_lockout_isSet;
}

bool OAIUserPolicy::is_login_attempts_before_lockout_Valid() const{
    return m_login_attempts_before_lockout_isValid;
}

qint32 OAIUserPolicy::getMaxActiveSessions() const {
    return m_max_active_sessions;
}
void OAIUserPolicy::setMaxActiveSessions(const qint32 &max_active_sessions) {
    m_max_active_sessions = max_active_sessions;
    m_max_active_sessions_isSet = true;
}

bool OAIUserPolicy::is_max_active_sessions_Set() const{
    return m_max_active_sessions_isSet;
}

bool OAIUserPolicy::is_max_active_sessions_Valid() const{
    return m_max_active_sessions_isValid;
}

qint32 OAIUserPolicy::getMaxParentalRating() const {
    return m_max_parental_rating;
}
void OAIUserPolicy::setMaxParentalRating(const qint32 &max_parental_rating) {
    m_max_parental_rating = max_parental_rating;
    m_max_parental_rating_isSet = true;
}

bool OAIUserPolicy::is_max_parental_rating_Set() const{
    return m_max_parental_rating_isSet;
}

bool OAIUserPolicy::is_max_parental_rating_Valid() const{
    return m_max_parental_rating_isValid;
}

QString OAIUserPolicy::getPasswordResetProviderId() const {
    return m_password_reset_provider_id;
}
void OAIUserPolicy::setPasswordResetProviderId(const QString &password_reset_provider_id) {
    m_password_reset_provider_id = password_reset_provider_id;
    m_password_reset_provider_id_isSet = true;
}

bool OAIUserPolicy::is_password_reset_provider_id_Set() const{
    return m_password_reset_provider_id_isSet;
}

bool OAIUserPolicy::is_password_reset_provider_id_Valid() const{
    return m_password_reset_provider_id_isValid;
}

qint32 OAIUserPolicy::getRemoteClientBitrateLimit() const {
    return m_remote_client_bitrate_limit;
}
void OAIUserPolicy::setRemoteClientBitrateLimit(const qint32 &remote_client_bitrate_limit) {
    m_remote_client_bitrate_limit = remote_client_bitrate_limit;
    m_remote_client_bitrate_limit_isSet = true;
}

bool OAIUserPolicy::is_remote_client_bitrate_limit_Set() const{
    return m_remote_client_bitrate_limit_isSet;
}

bool OAIUserPolicy::is_remote_client_bitrate_limit_Valid() const{
    return m_remote_client_bitrate_limit_isValid;
}

OAISyncPlayUserAccessType OAIUserPolicy::getSyncPlayAccess() const {
    return m_sync_play_access;
}
void OAIUserPolicy::setSyncPlayAccess(const OAISyncPlayUserAccessType &sync_play_access) {
    m_sync_play_access = sync_play_access;
    m_sync_play_access_isSet = true;
}

bool OAIUserPolicy::is_sync_play_access_Set() const{
    return m_sync_play_access_isSet;
}

bool OAIUserPolicy::is_sync_play_access_Valid() const{
    return m_sync_play_access_isValid;
}

bool OAIUserPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_unrated_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_media_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_all_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_all_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_all_folders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_audio_playback_transcoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_content_deletion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_content_deletion_from_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_content_downloading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_live_tv_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_live_tv_management_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_media_conversion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_media_playback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_playback_remuxing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_public_sharing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_remote_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_remote_control_of_other_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_shared_device_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_sync_transcoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_user_preference_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_video_playback_transcoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_remote_source_transcoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_login_attempt_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_administrator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_attempts_before_lockout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_active_sessions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_parental_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_reset_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_client_bitrate_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_play_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
