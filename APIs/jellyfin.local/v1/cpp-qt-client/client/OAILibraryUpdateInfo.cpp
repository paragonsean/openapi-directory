/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILibraryUpdateInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILibraryUpdateInfo::OAILibraryUpdateInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILibraryUpdateInfo::OAILibraryUpdateInfo() {
    this->initializeModel();
}

OAILibraryUpdateInfo::~OAILibraryUpdateInfo() {}

void OAILibraryUpdateInfo::initializeModel() {

    m_collection_folders_isSet = false;
    m_collection_folders_isValid = false;

    m_folders_added_to_isSet = false;
    m_folders_added_to_isValid = false;

    m_folders_removed_from_isSet = false;
    m_folders_removed_from_isValid = false;

    m_is_empty_isSet = false;
    m_is_empty_isValid = false;

    m_items_added_isSet = false;
    m_items_added_isValid = false;

    m_items_removed_isSet = false;
    m_items_removed_isValid = false;

    m_items_updated_isSet = false;
    m_items_updated_isValid = false;
}

void OAILibraryUpdateInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILibraryUpdateInfo::fromJsonObject(QJsonObject json) {

    m_collection_folders_isValid = ::OpenAPI::fromJsonValue(m_collection_folders, json[QString("CollectionFolders")]);
    m_collection_folders_isSet = !json[QString("CollectionFolders")].isNull() && m_collection_folders_isValid;

    m_folders_added_to_isValid = ::OpenAPI::fromJsonValue(m_folders_added_to, json[QString("FoldersAddedTo")]);
    m_folders_added_to_isSet = !json[QString("FoldersAddedTo")].isNull() && m_folders_added_to_isValid;

    m_folders_removed_from_isValid = ::OpenAPI::fromJsonValue(m_folders_removed_from, json[QString("FoldersRemovedFrom")]);
    m_folders_removed_from_isSet = !json[QString("FoldersRemovedFrom")].isNull() && m_folders_removed_from_isValid;

    m_is_empty_isValid = ::OpenAPI::fromJsonValue(m_is_empty, json[QString("IsEmpty")]);
    m_is_empty_isSet = !json[QString("IsEmpty")].isNull() && m_is_empty_isValid;

    m_items_added_isValid = ::OpenAPI::fromJsonValue(m_items_added, json[QString("ItemsAdded")]);
    m_items_added_isSet = !json[QString("ItemsAdded")].isNull() && m_items_added_isValid;

    m_items_removed_isValid = ::OpenAPI::fromJsonValue(m_items_removed, json[QString("ItemsRemoved")]);
    m_items_removed_isSet = !json[QString("ItemsRemoved")].isNull() && m_items_removed_isValid;

    m_items_updated_isValid = ::OpenAPI::fromJsonValue(m_items_updated, json[QString("ItemsUpdated")]);
    m_items_updated_isSet = !json[QString("ItemsUpdated")].isNull() && m_items_updated_isValid;
}

QString OAILibraryUpdateInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILibraryUpdateInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_folders.size() > 0) {
        obj.insert(QString("CollectionFolders"), ::OpenAPI::toJsonValue(m_collection_folders));
    }
    if (m_folders_added_to.size() > 0) {
        obj.insert(QString("FoldersAddedTo"), ::OpenAPI::toJsonValue(m_folders_added_to));
    }
    if (m_folders_removed_from.size() > 0) {
        obj.insert(QString("FoldersRemovedFrom"), ::OpenAPI::toJsonValue(m_folders_removed_from));
    }
    if (m_is_empty_isSet) {
        obj.insert(QString("IsEmpty"), ::OpenAPI::toJsonValue(m_is_empty));
    }
    if (m_items_added.size() > 0) {
        obj.insert(QString("ItemsAdded"), ::OpenAPI::toJsonValue(m_items_added));
    }
    if (m_items_removed.size() > 0) {
        obj.insert(QString("ItemsRemoved"), ::OpenAPI::toJsonValue(m_items_removed));
    }
    if (m_items_updated.size() > 0) {
        obj.insert(QString("ItemsUpdated"), ::OpenAPI::toJsonValue(m_items_updated));
    }
    return obj;
}

QList<QString> OAILibraryUpdateInfo::getCollectionFolders() const {
    return m_collection_folders;
}
void OAILibraryUpdateInfo::setCollectionFolders(const QList<QString> &collection_folders) {
    m_collection_folders = collection_folders;
    m_collection_folders_isSet = true;
}

bool OAILibraryUpdateInfo::is_collection_folders_Set() const{
    return m_collection_folders_isSet;
}

bool OAILibraryUpdateInfo::is_collection_folders_Valid() const{
    return m_collection_folders_isValid;
}

QList<QString> OAILibraryUpdateInfo::getFoldersAddedTo() const {
    return m_folders_added_to;
}
void OAILibraryUpdateInfo::setFoldersAddedTo(const QList<QString> &folders_added_to) {
    m_folders_added_to = folders_added_to;
    m_folders_added_to_isSet = true;
}

bool OAILibraryUpdateInfo::is_folders_added_to_Set() const{
    return m_folders_added_to_isSet;
}

bool OAILibraryUpdateInfo::is_folders_added_to_Valid() const{
    return m_folders_added_to_isValid;
}

QList<QString> OAILibraryUpdateInfo::getFoldersRemovedFrom() const {
    return m_folders_removed_from;
}
void OAILibraryUpdateInfo::setFoldersRemovedFrom(const QList<QString> &folders_removed_from) {
    m_folders_removed_from = folders_removed_from;
    m_folders_removed_from_isSet = true;
}

bool OAILibraryUpdateInfo::is_folders_removed_from_Set() const{
    return m_folders_removed_from_isSet;
}

bool OAILibraryUpdateInfo::is_folders_removed_from_Valid() const{
    return m_folders_removed_from_isValid;
}

bool OAILibraryUpdateInfo::isIsEmpty() const {
    return m_is_empty;
}
void OAILibraryUpdateInfo::setIsEmpty(const bool &is_empty) {
    m_is_empty = is_empty;
    m_is_empty_isSet = true;
}

bool OAILibraryUpdateInfo::is_is_empty_Set() const{
    return m_is_empty_isSet;
}

bool OAILibraryUpdateInfo::is_is_empty_Valid() const{
    return m_is_empty_isValid;
}

QList<QString> OAILibraryUpdateInfo::getItemsAdded() const {
    return m_items_added;
}
void OAILibraryUpdateInfo::setItemsAdded(const QList<QString> &items_added) {
    m_items_added = items_added;
    m_items_added_isSet = true;
}

bool OAILibraryUpdateInfo::is_items_added_Set() const{
    return m_items_added_isSet;
}

bool OAILibraryUpdateInfo::is_items_added_Valid() const{
    return m_items_added_isValid;
}

QList<QString> OAILibraryUpdateInfo::getItemsRemoved() const {
    return m_items_removed;
}
void OAILibraryUpdateInfo::setItemsRemoved(const QList<QString> &items_removed) {
    m_items_removed = items_removed;
    m_items_removed_isSet = true;
}

bool OAILibraryUpdateInfo::is_items_removed_Set() const{
    return m_items_removed_isSet;
}

bool OAILibraryUpdateInfo::is_items_removed_Valid() const{
    return m_items_removed_isValid;
}

QList<QString> OAILibraryUpdateInfo::getItemsUpdated() const {
    return m_items_updated;
}
void OAILibraryUpdateInfo::setItemsUpdated(const QList<QString> &items_updated) {
    m_items_updated = items_updated;
    m_items_updated_isSet = true;
}

bool OAILibraryUpdateInfo::is_items_updated_Set() const{
    return m_items_updated_isSet;
}

bool OAILibraryUpdateInfo::is_items_updated_Valid() const{
    return m_items_updated_isValid;
}

bool OAILibraryUpdateInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_folders_added_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_folders_removed_from.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_added.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_removed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_updated.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILibraryUpdateInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
