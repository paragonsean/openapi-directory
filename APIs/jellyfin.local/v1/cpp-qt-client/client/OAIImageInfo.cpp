/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageInfo::OAIImageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageInfo::OAIImageInfo() {
    this->initializeModel();
}

OAIImageInfo::~OAIImageInfo() {}

void OAIImageInfo::initializeModel() {

    m_blur_hash_isSet = false;
    m_blur_hash_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_image_index_isSet = false;
    m_image_index_isValid = false;

    m_image_tag_isSet = false;
    m_image_tag_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIImageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageInfo::fromJsonObject(QJsonObject json) {

    m_blur_hash_isValid = ::OpenAPI::fromJsonValue(m_blur_hash, json[QString("BlurHash")]);
    m_blur_hash_isSet = !json[QString("BlurHash")].isNull() && m_blur_hash_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_image_index_isValid = ::OpenAPI::fromJsonValue(m_image_index, json[QString("ImageIndex")]);
    m_image_index_isSet = !json[QString("ImageIndex")].isNull() && m_image_index_isValid;

    m_image_tag_isValid = ::OpenAPI::fromJsonValue(m_image_tag, json[QString("ImageTag")]);
    m_image_tag_isSet = !json[QString("ImageTag")].isNull() && m_image_tag_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("ImageType")]);
    m_image_type_isSet = !json[QString("ImageType")].isNull() && m_image_type_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAIImageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_blur_hash_isSet) {
        obj.insert(QString("BlurHash"), ::OpenAPI::toJsonValue(m_blur_hash));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_image_index_isSet) {
        obj.insert(QString("ImageIndex"), ::OpenAPI::toJsonValue(m_image_index));
    }
    if (m_image_tag_isSet) {
        obj.insert(QString("ImageTag"), ::OpenAPI::toJsonValue(m_image_tag));
    }
    if (m_image_type.isSet()) {
        obj.insert(QString("ImageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIImageInfo::getBlurHash() const {
    return m_blur_hash;
}
void OAIImageInfo::setBlurHash(const QString &blur_hash) {
    m_blur_hash = blur_hash;
    m_blur_hash_isSet = true;
}

bool OAIImageInfo::is_blur_hash_Set() const{
    return m_blur_hash_isSet;
}

bool OAIImageInfo::is_blur_hash_Valid() const{
    return m_blur_hash_isValid;
}

qint32 OAIImageInfo::getHeight() const {
    return m_height;
}
void OAIImageInfo::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIImageInfo::is_height_Set() const{
    return m_height_isSet;
}

bool OAIImageInfo::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIImageInfo::getImageIndex() const {
    return m_image_index;
}
void OAIImageInfo::setImageIndex(const qint32 &image_index) {
    m_image_index = image_index;
    m_image_index_isSet = true;
}

bool OAIImageInfo::is_image_index_Set() const{
    return m_image_index_isSet;
}

bool OAIImageInfo::is_image_index_Valid() const{
    return m_image_index_isValid;
}

QString OAIImageInfo::getImageTag() const {
    return m_image_tag;
}
void OAIImageInfo::setImageTag(const QString &image_tag) {
    m_image_tag = image_tag;
    m_image_tag_isSet = true;
}

bool OAIImageInfo::is_image_tag_Set() const{
    return m_image_tag_isSet;
}

bool OAIImageInfo::is_image_tag_Valid() const{
    return m_image_tag_isValid;
}

OAIImageType OAIImageInfo::getImageType() const {
    return m_image_type;
}
void OAIImageInfo::setImageType(const OAIImageType &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIImageInfo::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIImageInfo::is_image_type_Valid() const{
    return m_image_type_isValid;
}

QString OAIImageInfo::getPath() const {
    return m_path;
}
void OAIImageInfo::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIImageInfo::is_path_Set() const{
    return m_path_isSet;
}

bool OAIImageInfo::is_path_Valid() const{
    return m_path_isValid;
}

qint64 OAIImageInfo::getSize() const {
    return m_size;
}
void OAIImageInfo::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIImageInfo::is_size_Set() const{
    return m_size_isSet;
}

bool OAIImageInfo::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAIImageInfo::getWidth() const {
    return m_width;
}
void OAIImageInfo::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIImageInfo::is_width_Set() const{
    return m_width_isSet;
}

bool OAIImageInfo::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIImageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blur_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
