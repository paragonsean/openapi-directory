/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetProgramsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetProgramsDto::OAIGetProgramsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetProgramsDto::OAIGetProgramsDto() {
    this->initializeModel();
}

OAIGetProgramsDto::~OAIGetProgramsDto() {}

void OAIGetProgramsDto::initializeModel() {

    m_channel_ids_isSet = false;
    m_channel_ids_isValid = false;

    m_enable_image_types_isSet = false;
    m_enable_image_types_isValid = false;

    m_enable_images_isSet = false;
    m_enable_images_isValid = false;

    m_enable_total_record_count_isSet = false;
    m_enable_total_record_count_isValid = false;

    m_enable_user_data_isSet = false;
    m_enable_user_data_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_genre_ids_isSet = false;
    m_genre_ids_isValid = false;

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_has_aired_isSet = false;
    m_has_aired_isValid = false;

    m_image_type_limit_isSet = false;
    m_image_type_limit_isValid = false;

    m_is_airing_isSet = false;
    m_is_airing_isValid = false;

    m_is_kids_isSet = false;
    m_is_kids_isValid = false;

    m_is_movie_isSet = false;
    m_is_movie_isValid = false;

    m_is_news_isSet = false;
    m_is_news_isValid = false;

    m_is_series_isSet = false;
    m_is_series_isValid = false;

    m_is_sports_isSet = false;
    m_is_sports_isValid = false;

    m_library_series_id_isSet = false;
    m_library_series_id_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_max_end_date_isSet = false;
    m_max_end_date_isValid = false;

    m_max_start_date_isSet = false;
    m_max_start_date_isValid = false;

    m_min_end_date_isSet = false;
    m_min_end_date_isValid = false;

    m_min_start_date_isSet = false;
    m_min_start_date_isValid = false;

    m_series_timer_id_isSet = false;
    m_series_timer_id_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIGetProgramsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetProgramsDto::fromJsonObject(QJsonObject json) {

    m_channel_ids_isValid = ::OpenAPI::fromJsonValue(m_channel_ids, json[QString("ChannelIds")]);
    m_channel_ids_isSet = !json[QString("ChannelIds")].isNull() && m_channel_ids_isValid;

    m_enable_image_types_isValid = ::OpenAPI::fromJsonValue(m_enable_image_types, json[QString("EnableImageTypes")]);
    m_enable_image_types_isSet = !json[QString("EnableImageTypes")].isNull() && m_enable_image_types_isValid;

    m_enable_images_isValid = ::OpenAPI::fromJsonValue(m_enable_images, json[QString("EnableImages")]);
    m_enable_images_isSet = !json[QString("EnableImages")].isNull() && m_enable_images_isValid;

    m_enable_total_record_count_isValid = ::OpenAPI::fromJsonValue(m_enable_total_record_count, json[QString("EnableTotalRecordCount")]);
    m_enable_total_record_count_isSet = !json[QString("EnableTotalRecordCount")].isNull() && m_enable_total_record_count_isValid;

    m_enable_user_data_isValid = ::OpenAPI::fromJsonValue(m_enable_user_data, json[QString("EnableUserData")]);
    m_enable_user_data_isSet = !json[QString("EnableUserData")].isNull() && m_enable_user_data_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("Fields")]);
    m_fields_isSet = !json[QString("Fields")].isNull() && m_fields_isValid;

    m_genre_ids_isValid = ::OpenAPI::fromJsonValue(m_genre_ids, json[QString("GenreIds")]);
    m_genre_ids_isSet = !json[QString("GenreIds")].isNull() && m_genre_ids_isValid;

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("Genres")]);
    m_genres_isSet = !json[QString("Genres")].isNull() && m_genres_isValid;

    m_has_aired_isValid = ::OpenAPI::fromJsonValue(m_has_aired, json[QString("HasAired")]);
    m_has_aired_isSet = !json[QString("HasAired")].isNull() && m_has_aired_isValid;

    m_image_type_limit_isValid = ::OpenAPI::fromJsonValue(m_image_type_limit, json[QString("ImageTypeLimit")]);
    m_image_type_limit_isSet = !json[QString("ImageTypeLimit")].isNull() && m_image_type_limit_isValid;

    m_is_airing_isValid = ::OpenAPI::fromJsonValue(m_is_airing, json[QString("IsAiring")]);
    m_is_airing_isSet = !json[QString("IsAiring")].isNull() && m_is_airing_isValid;

    m_is_kids_isValid = ::OpenAPI::fromJsonValue(m_is_kids, json[QString("IsKids")]);
    m_is_kids_isSet = !json[QString("IsKids")].isNull() && m_is_kids_isValid;

    m_is_movie_isValid = ::OpenAPI::fromJsonValue(m_is_movie, json[QString("IsMovie")]);
    m_is_movie_isSet = !json[QString("IsMovie")].isNull() && m_is_movie_isValid;

    m_is_news_isValid = ::OpenAPI::fromJsonValue(m_is_news, json[QString("IsNews")]);
    m_is_news_isSet = !json[QString("IsNews")].isNull() && m_is_news_isValid;

    m_is_series_isValid = ::OpenAPI::fromJsonValue(m_is_series, json[QString("IsSeries")]);
    m_is_series_isSet = !json[QString("IsSeries")].isNull() && m_is_series_isValid;

    m_is_sports_isValid = ::OpenAPI::fromJsonValue(m_is_sports, json[QString("IsSports")]);
    m_is_sports_isSet = !json[QString("IsSports")].isNull() && m_is_sports_isValid;

    m_library_series_id_isValid = ::OpenAPI::fromJsonValue(m_library_series_id, json[QString("LibrarySeriesId")]);
    m_library_series_id_isSet = !json[QString("LibrarySeriesId")].isNull() && m_library_series_id_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_max_end_date_isValid = ::OpenAPI::fromJsonValue(m_max_end_date, json[QString("MaxEndDate")]);
    m_max_end_date_isSet = !json[QString("MaxEndDate")].isNull() && m_max_end_date_isValid;

    m_max_start_date_isValid = ::OpenAPI::fromJsonValue(m_max_start_date, json[QString("MaxStartDate")]);
    m_max_start_date_isSet = !json[QString("MaxStartDate")].isNull() && m_max_start_date_isValid;

    m_min_end_date_isValid = ::OpenAPI::fromJsonValue(m_min_end_date, json[QString("MinEndDate")]);
    m_min_end_date_isSet = !json[QString("MinEndDate")].isNull() && m_min_end_date_isValid;

    m_min_start_date_isValid = ::OpenAPI::fromJsonValue(m_min_start_date, json[QString("MinStartDate")]);
    m_min_start_date_isSet = !json[QString("MinStartDate")].isNull() && m_min_start_date_isValid;

    m_series_timer_id_isValid = ::OpenAPI::fromJsonValue(m_series_timer_id, json[QString("SeriesTimerId")]);
    m_series_timer_id_isSet = !json[QString("SeriesTimerId")].isNull() && m_series_timer_id_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("StartIndex")]);
    m_start_index_isSet = !json[QString("StartIndex")].isNull() && m_start_index_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIGetProgramsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetProgramsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_ids.size() > 0) {
        obj.insert(QString("ChannelIds"), ::OpenAPI::toJsonValue(m_channel_ids));
    }
    if (m_enable_image_types.size() > 0) {
        obj.insert(QString("EnableImageTypes"), ::OpenAPI::toJsonValue(m_enable_image_types));
    }
    if (m_enable_images_isSet) {
        obj.insert(QString("EnableImages"), ::OpenAPI::toJsonValue(m_enable_images));
    }
    if (m_enable_total_record_count_isSet) {
        obj.insert(QString("EnableTotalRecordCount"), ::OpenAPI::toJsonValue(m_enable_total_record_count));
    }
    if (m_enable_user_data_isSet) {
        obj.insert(QString("EnableUserData"), ::OpenAPI::toJsonValue(m_enable_user_data));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("Fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_genre_ids.size() > 0) {
        obj.insert(QString("GenreIds"), ::OpenAPI::toJsonValue(m_genre_ids));
    }
    if (m_genres.size() > 0) {
        obj.insert(QString("Genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_has_aired_isSet) {
        obj.insert(QString("HasAired"), ::OpenAPI::toJsonValue(m_has_aired));
    }
    if (m_image_type_limit_isSet) {
        obj.insert(QString("ImageTypeLimit"), ::OpenAPI::toJsonValue(m_image_type_limit));
    }
    if (m_is_airing_isSet) {
        obj.insert(QString("IsAiring"), ::OpenAPI::toJsonValue(m_is_airing));
    }
    if (m_is_kids_isSet) {
        obj.insert(QString("IsKids"), ::OpenAPI::toJsonValue(m_is_kids));
    }
    if (m_is_movie_isSet) {
        obj.insert(QString("IsMovie"), ::OpenAPI::toJsonValue(m_is_movie));
    }
    if (m_is_news_isSet) {
        obj.insert(QString("IsNews"), ::OpenAPI::toJsonValue(m_is_news));
    }
    if (m_is_series_isSet) {
        obj.insert(QString("IsSeries"), ::OpenAPI::toJsonValue(m_is_series));
    }
    if (m_is_sports_isSet) {
        obj.insert(QString("IsSports"), ::OpenAPI::toJsonValue(m_is_sports));
    }
    if (m_library_series_id_isSet) {
        obj.insert(QString("LibrarySeriesId"), ::OpenAPI::toJsonValue(m_library_series_id));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_max_end_date_isSet) {
        obj.insert(QString("MaxEndDate"), ::OpenAPI::toJsonValue(m_max_end_date));
    }
    if (m_max_start_date_isSet) {
        obj.insert(QString("MaxStartDate"), ::OpenAPI::toJsonValue(m_max_start_date));
    }
    if (m_min_end_date_isSet) {
        obj.insert(QString("MinEndDate"), ::OpenAPI::toJsonValue(m_min_end_date));
    }
    if (m_min_start_date_isSet) {
        obj.insert(QString("MinStartDate"), ::OpenAPI::toJsonValue(m_min_start_date));
    }
    if (m_series_timer_id_isSet) {
        obj.insert(QString("SeriesTimerId"), ::OpenAPI::toJsonValue(m_series_timer_id));
    }
    if (m_sort_by_isSet) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("StartIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QList<QString> OAIGetProgramsDto::getChannelIds() const {
    return m_channel_ids;
}
void OAIGetProgramsDto::setChannelIds(const QList<QString> &channel_ids) {
    m_channel_ids = channel_ids;
    m_channel_ids_isSet = true;
}

bool OAIGetProgramsDto::is_channel_ids_Set() const{
    return m_channel_ids_isSet;
}

bool OAIGetProgramsDto::is_channel_ids_Valid() const{
    return m_channel_ids_isValid;
}

QList<OAIImageType> OAIGetProgramsDto::getEnableImageTypes() const {
    return m_enable_image_types;
}
void OAIGetProgramsDto::setEnableImageTypes(const QList<OAIImageType> &enable_image_types) {
    m_enable_image_types = enable_image_types;
    m_enable_image_types_isSet = true;
}

bool OAIGetProgramsDto::is_enable_image_types_Set() const{
    return m_enable_image_types_isSet;
}

bool OAIGetProgramsDto::is_enable_image_types_Valid() const{
    return m_enable_image_types_isValid;
}

bool OAIGetProgramsDto::isEnableImages() const {
    return m_enable_images;
}
void OAIGetProgramsDto::setEnableImages(const bool &enable_images) {
    m_enable_images = enable_images;
    m_enable_images_isSet = true;
}

bool OAIGetProgramsDto::is_enable_images_Set() const{
    return m_enable_images_isSet;
}

bool OAIGetProgramsDto::is_enable_images_Valid() const{
    return m_enable_images_isValid;
}

bool OAIGetProgramsDto::isEnableTotalRecordCount() const {
    return m_enable_total_record_count;
}
void OAIGetProgramsDto::setEnableTotalRecordCount(const bool &enable_total_record_count) {
    m_enable_total_record_count = enable_total_record_count;
    m_enable_total_record_count_isSet = true;
}

bool OAIGetProgramsDto::is_enable_total_record_count_Set() const{
    return m_enable_total_record_count_isSet;
}

bool OAIGetProgramsDto::is_enable_total_record_count_Valid() const{
    return m_enable_total_record_count_isValid;
}

bool OAIGetProgramsDto::isEnableUserData() const {
    return m_enable_user_data;
}
void OAIGetProgramsDto::setEnableUserData(const bool &enable_user_data) {
    m_enable_user_data = enable_user_data;
    m_enable_user_data_isSet = true;
}

bool OAIGetProgramsDto::is_enable_user_data_Set() const{
    return m_enable_user_data_isSet;
}

bool OAIGetProgramsDto::is_enable_user_data_Valid() const{
    return m_enable_user_data_isValid;
}

QList<OAIItemFields> OAIGetProgramsDto::getFields() const {
    return m_fields;
}
void OAIGetProgramsDto::setFields(const QList<OAIItemFields> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIGetProgramsDto::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIGetProgramsDto::is_fields_Valid() const{
    return m_fields_isValid;
}

QList<QString> OAIGetProgramsDto::getGenreIds() const {
    return m_genre_ids;
}
void OAIGetProgramsDto::setGenreIds(const QList<QString> &genre_ids) {
    m_genre_ids = genre_ids;
    m_genre_ids_isSet = true;
}

bool OAIGetProgramsDto::is_genre_ids_Set() const{
    return m_genre_ids_isSet;
}

bool OAIGetProgramsDto::is_genre_ids_Valid() const{
    return m_genre_ids_isValid;
}

QList<QString> OAIGetProgramsDto::getGenres() const {
    return m_genres;
}
void OAIGetProgramsDto::setGenres(const QList<QString> &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAIGetProgramsDto::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAIGetProgramsDto::is_genres_Valid() const{
    return m_genres_isValid;
}

bool OAIGetProgramsDto::isHasAired() const {
    return m_has_aired;
}
void OAIGetProgramsDto::setHasAired(const bool &has_aired) {
    m_has_aired = has_aired;
    m_has_aired_isSet = true;
}

bool OAIGetProgramsDto::is_has_aired_Set() const{
    return m_has_aired_isSet;
}

bool OAIGetProgramsDto::is_has_aired_Valid() const{
    return m_has_aired_isValid;
}

qint32 OAIGetProgramsDto::getImageTypeLimit() const {
    return m_image_type_limit;
}
void OAIGetProgramsDto::setImageTypeLimit(const qint32 &image_type_limit) {
    m_image_type_limit = image_type_limit;
    m_image_type_limit_isSet = true;
}

bool OAIGetProgramsDto::is_image_type_limit_Set() const{
    return m_image_type_limit_isSet;
}

bool OAIGetProgramsDto::is_image_type_limit_Valid() const{
    return m_image_type_limit_isValid;
}

bool OAIGetProgramsDto::isIsAiring() const {
    return m_is_airing;
}
void OAIGetProgramsDto::setIsAiring(const bool &is_airing) {
    m_is_airing = is_airing;
    m_is_airing_isSet = true;
}

bool OAIGetProgramsDto::is_is_airing_Set() const{
    return m_is_airing_isSet;
}

bool OAIGetProgramsDto::is_is_airing_Valid() const{
    return m_is_airing_isValid;
}

bool OAIGetProgramsDto::isIsKids() const {
    return m_is_kids;
}
void OAIGetProgramsDto::setIsKids(const bool &is_kids) {
    m_is_kids = is_kids;
    m_is_kids_isSet = true;
}

bool OAIGetProgramsDto::is_is_kids_Set() const{
    return m_is_kids_isSet;
}

bool OAIGetProgramsDto::is_is_kids_Valid() const{
    return m_is_kids_isValid;
}

bool OAIGetProgramsDto::isIsMovie() const {
    return m_is_movie;
}
void OAIGetProgramsDto::setIsMovie(const bool &is_movie) {
    m_is_movie = is_movie;
    m_is_movie_isSet = true;
}

bool OAIGetProgramsDto::is_is_movie_Set() const{
    return m_is_movie_isSet;
}

bool OAIGetProgramsDto::is_is_movie_Valid() const{
    return m_is_movie_isValid;
}

bool OAIGetProgramsDto::isIsNews() const {
    return m_is_news;
}
void OAIGetProgramsDto::setIsNews(const bool &is_news) {
    m_is_news = is_news;
    m_is_news_isSet = true;
}

bool OAIGetProgramsDto::is_is_news_Set() const{
    return m_is_news_isSet;
}

bool OAIGetProgramsDto::is_is_news_Valid() const{
    return m_is_news_isValid;
}

bool OAIGetProgramsDto::isIsSeries() const {
    return m_is_series;
}
void OAIGetProgramsDto::setIsSeries(const bool &is_series) {
    m_is_series = is_series;
    m_is_series_isSet = true;
}

bool OAIGetProgramsDto::is_is_series_Set() const{
    return m_is_series_isSet;
}

bool OAIGetProgramsDto::is_is_series_Valid() const{
    return m_is_series_isValid;
}

bool OAIGetProgramsDto::isIsSports() const {
    return m_is_sports;
}
void OAIGetProgramsDto::setIsSports(const bool &is_sports) {
    m_is_sports = is_sports;
    m_is_sports_isSet = true;
}

bool OAIGetProgramsDto::is_is_sports_Set() const{
    return m_is_sports_isSet;
}

bool OAIGetProgramsDto::is_is_sports_Valid() const{
    return m_is_sports_isValid;
}

QString OAIGetProgramsDto::getLibrarySeriesId() const {
    return m_library_series_id;
}
void OAIGetProgramsDto::setLibrarySeriesId(const QString &library_series_id) {
    m_library_series_id = library_series_id;
    m_library_series_id_isSet = true;
}

bool OAIGetProgramsDto::is_library_series_id_Set() const{
    return m_library_series_id_isSet;
}

bool OAIGetProgramsDto::is_library_series_id_Valid() const{
    return m_library_series_id_isValid;
}

qint32 OAIGetProgramsDto::getLimit() const {
    return m_limit;
}
void OAIGetProgramsDto::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIGetProgramsDto::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIGetProgramsDto::is_limit_Valid() const{
    return m_limit_isValid;
}

QDateTime OAIGetProgramsDto::getMaxEndDate() const {
    return m_max_end_date;
}
void OAIGetProgramsDto::setMaxEndDate(const QDateTime &max_end_date) {
    m_max_end_date = max_end_date;
    m_max_end_date_isSet = true;
}

bool OAIGetProgramsDto::is_max_end_date_Set() const{
    return m_max_end_date_isSet;
}

bool OAIGetProgramsDto::is_max_end_date_Valid() const{
    return m_max_end_date_isValid;
}

QDateTime OAIGetProgramsDto::getMaxStartDate() const {
    return m_max_start_date;
}
void OAIGetProgramsDto::setMaxStartDate(const QDateTime &max_start_date) {
    m_max_start_date = max_start_date;
    m_max_start_date_isSet = true;
}

bool OAIGetProgramsDto::is_max_start_date_Set() const{
    return m_max_start_date_isSet;
}

bool OAIGetProgramsDto::is_max_start_date_Valid() const{
    return m_max_start_date_isValid;
}

QDateTime OAIGetProgramsDto::getMinEndDate() const {
    return m_min_end_date;
}
void OAIGetProgramsDto::setMinEndDate(const QDateTime &min_end_date) {
    m_min_end_date = min_end_date;
    m_min_end_date_isSet = true;
}

bool OAIGetProgramsDto::is_min_end_date_Set() const{
    return m_min_end_date_isSet;
}

bool OAIGetProgramsDto::is_min_end_date_Valid() const{
    return m_min_end_date_isValid;
}

QDateTime OAIGetProgramsDto::getMinStartDate() const {
    return m_min_start_date;
}
void OAIGetProgramsDto::setMinStartDate(const QDateTime &min_start_date) {
    m_min_start_date = min_start_date;
    m_min_start_date_isSet = true;
}

bool OAIGetProgramsDto::is_min_start_date_Set() const{
    return m_min_start_date_isSet;
}

bool OAIGetProgramsDto::is_min_start_date_Valid() const{
    return m_min_start_date_isValid;
}

QString OAIGetProgramsDto::getSeriesTimerId() const {
    return m_series_timer_id;
}
void OAIGetProgramsDto::setSeriesTimerId(const QString &series_timer_id) {
    m_series_timer_id = series_timer_id;
    m_series_timer_id_isSet = true;
}

bool OAIGetProgramsDto::is_series_timer_id_Set() const{
    return m_series_timer_id_isSet;
}

bool OAIGetProgramsDto::is_series_timer_id_Valid() const{
    return m_series_timer_id_isValid;
}

QString OAIGetProgramsDto::getSortBy() const {
    return m_sort_by;
}
void OAIGetProgramsDto::setSortBy(const QString &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIGetProgramsDto::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIGetProgramsDto::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

QString OAIGetProgramsDto::getSortOrder() const {
    return m_sort_order;
}
void OAIGetProgramsDto::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIGetProgramsDto::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIGetProgramsDto::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

qint32 OAIGetProgramsDto::getStartIndex() const {
    return m_start_index;
}
void OAIGetProgramsDto::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIGetProgramsDto::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIGetProgramsDto::is_start_index_Valid() const{
    return m_start_index_isValid;
}

QString OAIGetProgramsDto::getUserId() const {
    return m_user_id;
}
void OAIGetProgramsDto::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGetProgramsDto::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGetProgramsDto::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIGetProgramsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_image_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_total_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_user_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_genres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_aired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_airing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_kids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_movie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_news_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_series_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_timer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetProgramsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
