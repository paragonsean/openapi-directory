/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsSegmentApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIHlsSegmentApi::OAIHlsSegmentApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIHlsSegmentApi::~OAIHlsSegmentApi() {
}

void OAIHlsSegmentApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://jellyfin.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://localhost"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getHlsAudioSegmentLegacyAac", defaultConf);
    _serverIndices.insert("getHlsAudioSegmentLegacyAac", 0);
    _serverConfigs.insert("getHlsAudioSegmentLegacyMp3", defaultConf);
    _serverIndices.insert("getHlsAudioSegmentLegacyMp3", 0);
    _serverConfigs.insert("getHlsPlaylistLegacy", defaultConf);
    _serverIndices.insert("getHlsPlaylistLegacy", 0);
    _serverConfigs.insert("getHlsVideoSegmentLegacy", defaultConf);
    _serverIndices.insert("getHlsVideoSegmentLegacy", 0);
    _serverConfigs.insert("stopEncodingProcess", defaultConf);
    _serverIndices.insert("stopEncodingProcess", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIHlsSegmentApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIHlsSegmentApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIHlsSegmentApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIHlsSegmentApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIHlsSegmentApi::setUsername(const QString &username) {
    _username = username;
}

void OAIHlsSegmentApi::setPassword(const QString &password) {
    _password = password;
}


void OAIHlsSegmentApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIHlsSegmentApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIHlsSegmentApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIHlsSegmentApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIHlsSegmentApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIHlsSegmentApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIHlsSegmentApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIHlsSegmentApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIHlsSegmentApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIHlsSegmentApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIHlsSegmentApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIHlsSegmentApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIHlsSegmentApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIHlsSegmentApi::getHlsAudioSegmentLegacyAac(const QString &item_id, const QString &segment_id) {
    QString fullPath = QString(_serverConfigs["getHlsAudioSegmentLegacyAac"][_serverIndices.value("getHlsAudioSegmentLegacyAac")].URL()+"/Audio/{itemId}/hls/{segmentId}/stream.aac");
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString segment_idPathParam("{");
        segment_idPathParam.append("segmentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "segmentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"segmentId"+pathSuffix : pathPrefix;
        fullPath.replace(segment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(segment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHlsSegmentApi::getHlsAudioSegmentLegacyAacCallback);
    connect(this, &OAIHlsSegmentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHlsSegmentApi::getHlsAudioSegmentLegacyAacCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHlsAudioSegmentLegacyAacSignal(output);
        Q_EMIT getHlsAudioSegmentLegacyAacSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHlsAudioSegmentLegacyAacSignalE(output, error_type, error_str);
        Q_EMIT getHlsAudioSegmentLegacyAacSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHlsAudioSegmentLegacyAacSignalError(output, error_type, error_str);
        Q_EMIT getHlsAudioSegmentLegacyAacSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHlsSegmentApi::getHlsAudioSegmentLegacyMp3(const QString &item_id, const QString &segment_id) {
    QString fullPath = QString(_serverConfigs["getHlsAudioSegmentLegacyMp3"][_serverIndices.value("getHlsAudioSegmentLegacyMp3")].URL()+"/Audio/{itemId}/hls/{segmentId}/stream.mp3");
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString segment_idPathParam("{");
        segment_idPathParam.append("segmentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "segmentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"segmentId"+pathSuffix : pathPrefix;
        fullPath.replace(segment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(segment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHlsSegmentApi::getHlsAudioSegmentLegacyMp3Callback);
    connect(this, &OAIHlsSegmentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHlsSegmentApi::getHlsAudioSegmentLegacyMp3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHlsAudioSegmentLegacyMp3Signal(output);
        Q_EMIT getHlsAudioSegmentLegacyMp3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHlsAudioSegmentLegacyMp3SignalE(output, error_type, error_str);
        Q_EMIT getHlsAudioSegmentLegacyMp3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHlsAudioSegmentLegacyMp3SignalError(output, error_type, error_str);
        Q_EMIT getHlsAudioSegmentLegacyMp3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHlsSegmentApi::getHlsPlaylistLegacy(const QString &item_id, const QString &playlist_id) {
    QString fullPath = QString(_serverConfigs["getHlsPlaylistLegacy"][_serverIndices.value("getHlsPlaylistLegacy")].URL()+"/Videos/{itemId}/hls/{playlistId}/stream.m3u8");
    
    if (_apiKeys.contains("CustomAuthentication")) {
        addHeaders("CustomAuthentication",_apiKeys.find("CustomAuthentication").value());
    }
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString playlist_idPathParam("{");
        playlist_idPathParam.append("playlistId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "playlistId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"playlistId"+pathSuffix : pathPrefix;
        fullPath.replace(playlist_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playlist_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHlsSegmentApi::getHlsPlaylistLegacyCallback);
    connect(this, &OAIHlsSegmentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHlsSegmentApi::getHlsPlaylistLegacyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHlsPlaylistLegacySignal(output);
        Q_EMIT getHlsPlaylistLegacySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHlsPlaylistLegacySignalE(output, error_type, error_str);
        Q_EMIT getHlsPlaylistLegacySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHlsPlaylistLegacySignalError(output, error_type, error_str);
        Q_EMIT getHlsPlaylistLegacySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHlsSegmentApi::getHlsVideoSegmentLegacy(const QString &item_id, const QString &playlist_id, const QString &segment_id, const QString &segment_container) {
    QString fullPath = QString(_serverConfigs["getHlsVideoSegmentLegacy"][_serverIndices.value("getHlsVideoSegmentLegacy")].URL()+"/Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}");
    
    
    {
        QString item_idPathParam("{");
        item_idPathParam.append("itemId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "itemId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"itemId"+pathSuffix : pathPrefix;
        fullPath.replace(item_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item_id)));
    }
    
    {
        QString playlist_idPathParam("{");
        playlist_idPathParam.append("playlistId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "playlistId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"playlistId"+pathSuffix : pathPrefix;
        fullPath.replace(playlist_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playlist_id)));
    }
    
    {
        QString segment_idPathParam("{");
        segment_idPathParam.append("segmentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "segmentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"segmentId"+pathSuffix : pathPrefix;
        fullPath.replace(segment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(segment_id)));
    }
    
    {
        QString segment_containerPathParam("{");
        segment_containerPathParam.append("segmentContainer").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "segmentContainer", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"segmentContainer"+pathSuffix : pathPrefix;
        fullPath.replace(segment_containerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(segment_container)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHlsSegmentApi::getHlsVideoSegmentLegacyCallback);
    connect(this, &OAIHlsSegmentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHlsSegmentApi::getHlsVideoSegmentLegacyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHlsVideoSegmentLegacySignal(output);
        Q_EMIT getHlsVideoSegmentLegacySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHlsVideoSegmentLegacySignalE(output, error_type, error_str);
        Q_EMIT getHlsVideoSegmentLegacySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHlsVideoSegmentLegacySignalError(output, error_type, error_str);
        Q_EMIT getHlsVideoSegmentLegacySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHlsSegmentApi::stopEncodingProcess(const ::OpenAPI::OptionalParam<QString> &device_id, const ::OpenAPI::OptionalParam<QString> &play_session_id) {
    QString fullPath = QString(_serverConfigs["stopEncodingProcess"][_serverIndices.value("stopEncodingProcess")].URL()+"/Videos/ActiveEncodings");
    
    if (_apiKeys.contains("CustomAuthentication")) {
        addHeaders("CustomAuthentication",_apiKeys.find("CustomAuthentication").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (device_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deviceId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deviceId")).append(querySuffix).append(QUrl::toPercentEncoding(device_id.stringValue()));
    }
    if (play_session_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "playSessionId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("playSessionId")).append(querySuffix).append(QUrl::toPercentEncoding(play_session_id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHlsSegmentApi::stopEncodingProcessCallback);
    connect(this, &OAIHlsSegmentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHlsSegmentApi::stopEncodingProcessCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stopEncodingProcessSignal();
        Q_EMIT stopEncodingProcessSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stopEncodingProcessSignalE(error_type, error_str);
        Q_EMIT stopEncodingProcessSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stopEncodingProcessSignalError(error_type, error_str);
        Q_EMIT stopEncodingProcessSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHlsSegmentApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
