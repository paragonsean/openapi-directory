/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteSubtitleInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteSubtitleInfo::OAIRemoteSubtitleInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteSubtitleInfo::OAIRemoteSubtitleInfo() {
    this->initializeModel();
}

OAIRemoteSubtitleInfo::~OAIRemoteSubtitleInfo() {}

void OAIRemoteSubtitleInfo::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_community_rating_isSet = false;
    m_community_rating_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_download_count_isSet = false;
    m_download_count_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_hash_match_isSet = false;
    m_is_hash_match_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_three_letter_iso_language_name_isSet = false;
    m_three_letter_iso_language_name_isValid = false;
}

void OAIRemoteSubtitleInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteSubtitleInfo::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("Author")]);
    m_author_isSet = !json[QString("Author")].isNull() && m_author_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_community_rating_isValid = ::OpenAPI::fromJsonValue(m_community_rating, json[QString("CommunityRating")]);
    m_community_rating_isSet = !json[QString("CommunityRating")].isNull() && m_community_rating_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_download_count_isValid = ::OpenAPI::fromJsonValue(m_download_count, json[QString("DownloadCount")]);
    m_download_count_isSet = !json[QString("DownloadCount")].isNull() && m_download_count_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_hash_match_isValid = ::OpenAPI::fromJsonValue(m_is_hash_match, json[QString("IsHashMatch")]);
    m_is_hash_match_isSet = !json[QString("IsHashMatch")].isNull() && m_is_hash_match_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("ProviderName")]);
    m_provider_name_isSet = !json[QString("ProviderName")].isNull() && m_provider_name_isValid;

    m_three_letter_iso_language_name_isValid = ::OpenAPI::fromJsonValue(m_three_letter_iso_language_name, json[QString("ThreeLetterISOLanguageName")]);
    m_three_letter_iso_language_name_isSet = !json[QString("ThreeLetterISOLanguageName")].isNull() && m_three_letter_iso_language_name_isValid;
}

QString OAIRemoteSubtitleInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteSubtitleInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("Author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_community_rating_isSet) {
        obj.insert(QString("CommunityRating"), ::OpenAPI::toJsonValue(m_community_rating));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_download_count_isSet) {
        obj.insert(QString("DownloadCount"), ::OpenAPI::toJsonValue(m_download_count));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_hash_match_isSet) {
        obj.insert(QString("IsHashMatch"), ::OpenAPI::toJsonValue(m_is_hash_match));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("ProviderName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_three_letter_iso_language_name_isSet) {
        obj.insert(QString("ThreeLetterISOLanguageName"), ::OpenAPI::toJsonValue(m_three_letter_iso_language_name));
    }
    return obj;
}

QString OAIRemoteSubtitleInfo::getAuthor() const {
    return m_author;
}
void OAIRemoteSubtitleInfo::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_author_Set() const{
    return m_author_isSet;
}

bool OAIRemoteSubtitleInfo::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIRemoteSubtitleInfo::getComment() const {
    return m_comment;
}
void OAIRemoteSubtitleInfo::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIRemoteSubtitleInfo::is_comment_Valid() const{
    return m_comment_isValid;
}

float OAIRemoteSubtitleInfo::getCommunityRating() const {
    return m_community_rating;
}
void OAIRemoteSubtitleInfo::setCommunityRating(const float &community_rating) {
    m_community_rating = community_rating;
    m_community_rating_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_community_rating_Set() const{
    return m_community_rating_isSet;
}

bool OAIRemoteSubtitleInfo::is_community_rating_Valid() const{
    return m_community_rating_isValid;
}

QDateTime OAIRemoteSubtitleInfo::getDateCreated() const {
    return m_date_created;
}
void OAIRemoteSubtitleInfo::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIRemoteSubtitleInfo::is_date_created_Valid() const{
    return m_date_created_isValid;
}

qint32 OAIRemoteSubtitleInfo::getDownloadCount() const {
    return m_download_count;
}
void OAIRemoteSubtitleInfo::setDownloadCount(const qint32 &download_count) {
    m_download_count = download_count;
    m_download_count_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_download_count_Set() const{
    return m_download_count_isSet;
}

bool OAIRemoteSubtitleInfo::is_download_count_Valid() const{
    return m_download_count_isValid;
}

QString OAIRemoteSubtitleInfo::getFormat() const {
    return m_format;
}
void OAIRemoteSubtitleInfo::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_format_Set() const{
    return m_format_isSet;
}

bool OAIRemoteSubtitleInfo::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIRemoteSubtitleInfo::getId() const {
    return m_id;
}
void OAIRemoteSubtitleInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRemoteSubtitleInfo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRemoteSubtitleInfo::isIsHashMatch() const {
    return m_is_hash_match;
}
void OAIRemoteSubtitleInfo::setIsHashMatch(const bool &is_hash_match) {
    m_is_hash_match = is_hash_match;
    m_is_hash_match_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_is_hash_match_Set() const{
    return m_is_hash_match_isSet;
}

bool OAIRemoteSubtitleInfo::is_is_hash_match_Valid() const{
    return m_is_hash_match_isValid;
}

QString OAIRemoteSubtitleInfo::getName() const {
    return m_name;
}
void OAIRemoteSubtitleInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRemoteSubtitleInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRemoteSubtitleInfo::getProviderName() const {
    return m_provider_name;
}
void OAIRemoteSubtitleInfo::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIRemoteSubtitleInfo::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

QString OAIRemoteSubtitleInfo::getThreeLetterIsoLanguageName() const {
    return m_three_letter_iso_language_name;
}
void OAIRemoteSubtitleInfo::setThreeLetterIsoLanguageName(const QString &three_letter_iso_language_name) {
    m_three_letter_iso_language_name = three_letter_iso_language_name;
    m_three_letter_iso_language_name_isSet = true;
}

bool OAIRemoteSubtitleInfo::is_three_letter_iso_language_name_Set() const{
    return m_three_letter_iso_language_name_isSet;
}

bool OAIRemoteSubtitleInfo::is_three_letter_iso_language_name_Valid() const{
    return m_three_letter_iso_language_name_isValid;
}

bool OAIRemoteSubtitleInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hash_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_letter_iso_language_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteSubtitleInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
