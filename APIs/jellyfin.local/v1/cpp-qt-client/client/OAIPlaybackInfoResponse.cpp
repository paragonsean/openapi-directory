/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaybackInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaybackInfoResponse::OAIPlaybackInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaybackInfoResponse::OAIPlaybackInfoResponse() {
    this->initializeModel();
}

OAIPlaybackInfoResponse::~OAIPlaybackInfoResponse() {}

void OAIPlaybackInfoResponse::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_media_sources_isSet = false;
    m_media_sources_isValid = false;

    m_play_session_id_isSet = false;
    m_play_session_id_isValid = false;
}

void OAIPlaybackInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaybackInfoResponse::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_media_sources_isValid = ::OpenAPI::fromJsonValue(m_media_sources, json[QString("MediaSources")]);
    m_media_sources_isSet = !json[QString("MediaSources")].isNull() && m_media_sources_isValid;

    m_play_session_id_isValid = ::OpenAPI::fromJsonValue(m_play_session_id, json[QString("PlaySessionId")]);
    m_play_session_id_isSet = !json[QString("PlaySessionId")].isNull() && m_play_session_id_isValid;
}

QString OAIPlaybackInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaybackInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code.isSet()) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_media_sources.size() > 0) {
        obj.insert(QString("MediaSources"), ::OpenAPI::toJsonValue(m_media_sources));
    }
    if (m_play_session_id_isSet) {
        obj.insert(QString("PlaySessionId"), ::OpenAPI::toJsonValue(m_play_session_id));
    }
    return obj;
}

OAIPlaybackErrorCode OAIPlaybackInfoResponse::getErrorCode() const {
    return m_error_code;
}
void OAIPlaybackInfoResponse::setErrorCode(const OAIPlaybackErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIPlaybackInfoResponse::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIPlaybackInfoResponse::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QList<OAIMediaSourceInfo> OAIPlaybackInfoResponse::getMediaSources() const {
    return m_media_sources;
}
void OAIPlaybackInfoResponse::setMediaSources(const QList<OAIMediaSourceInfo> &media_sources) {
    m_media_sources = media_sources;
    m_media_sources_isSet = true;
}

bool OAIPlaybackInfoResponse::is_media_sources_Set() const{
    return m_media_sources_isSet;
}

bool OAIPlaybackInfoResponse::is_media_sources_Valid() const{
    return m_media_sources_isValid;
}

QString OAIPlaybackInfoResponse::getPlaySessionId() const {
    return m_play_session_id;
}
void OAIPlaybackInfoResponse::setPlaySessionId(const QString &play_session_id) {
    m_play_session_id = play_session_id;
    m_play_session_id_isSet = true;
}

bool OAIPlaybackInfoResponse::is_play_session_id_Set() const{
    return m_play_session_id_isSet;
}

bool OAIPlaybackInfoResponse::is_play_session_id_Valid() const{
    return m_play_session_id_isValid;
}

bool OAIPlaybackInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaybackInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
