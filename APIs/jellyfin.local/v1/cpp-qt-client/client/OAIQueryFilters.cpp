/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryFilters::OAIQueryFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryFilters::OAIQueryFilters() {
    this->initializeModel();
}

OAIQueryFilters::~OAIQueryFilters() {}

void OAIQueryFilters::initializeModel() {

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIQueryFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryFilters::fromJsonObject(QJsonObject json) {

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("Genres")]);
    m_genres_isSet = !json[QString("Genres")].isNull() && m_genres_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIQueryFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_genres.size() > 0) {
        obj.insert(QString("Genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<OAINameGuidPair> OAIQueryFilters::getGenres() const {
    return m_genres;
}
void OAIQueryFilters::setGenres(const QList<OAINameGuidPair> &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAIQueryFilters::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAIQueryFilters::is_genres_Valid() const{
    return m_genres_isValid;
}

QList<QString> OAIQueryFilters::getTags() const {
    return m_tags;
}
void OAIQueryFilters::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIQueryFilters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIQueryFilters::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIQueryFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_genres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
