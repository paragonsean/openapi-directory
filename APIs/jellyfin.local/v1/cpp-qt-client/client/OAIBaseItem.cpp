/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseItem::OAIBaseItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseItem::OAIBaseItem() {
    this->initializeModel();
}

OAIBaseItem::~OAIBaseItem() {}

void OAIBaseItem::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_date_last_saved_isSet = false;
    m_date_last_saved_isValid = false;

    m_extra_ids_isSet = false;
    m_extra_ids_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_is_hd_isSet = false;
    m_is_hd_isValid = false;

    m_is_shortcut_isSet = false;
    m_is_shortcut_isValid = false;

    m_remote_trailers_isSet = false;
    m_remote_trailers_isValid = false;

    m_shortcut_path_isSet = false;
    m_shortcut_path_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_supports_external_transfer_isSet = false;
    m_supports_external_transfer_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIBaseItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseItem::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("Container")]);
    m_container_isSet = !json[QString("Container")].isNull() && m_container_isValid;

    m_date_last_saved_isValid = ::OpenAPI::fromJsonValue(m_date_last_saved, json[QString("DateLastSaved")]);
    m_date_last_saved_isSet = !json[QString("DateLastSaved")].isNull() && m_date_last_saved_isValid;

    m_extra_ids_isValid = ::OpenAPI::fromJsonValue(m_extra_ids, json[QString("ExtraIds")]);
    m_extra_ids_isSet = !json[QString("ExtraIds")].isNull() && m_extra_ids_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_is_hd_isValid = ::OpenAPI::fromJsonValue(m_is_hd, json[QString("IsHD")]);
    m_is_hd_isSet = !json[QString("IsHD")].isNull() && m_is_hd_isValid;

    m_is_shortcut_isValid = ::OpenAPI::fromJsonValue(m_is_shortcut, json[QString("IsShortcut")]);
    m_is_shortcut_isSet = !json[QString("IsShortcut")].isNull() && m_is_shortcut_isValid;

    m_remote_trailers_isValid = ::OpenAPI::fromJsonValue(m_remote_trailers, json[QString("RemoteTrailers")]);
    m_remote_trailers_isSet = !json[QString("RemoteTrailers")].isNull() && m_remote_trailers_isValid;

    m_shortcut_path_isValid = ::OpenAPI::fromJsonValue(m_shortcut_path, json[QString("ShortcutPath")]);
    m_shortcut_path_isSet = !json[QString("ShortcutPath")].isNull() && m_shortcut_path_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_supports_external_transfer_isValid = ::OpenAPI::fromJsonValue(m_supports_external_transfer, json[QString("SupportsExternalTransfer")]);
    m_supports_external_transfer_isSet = !json[QString("SupportsExternalTransfer")].isNull() && m_supports_external_transfer_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAIBaseItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseItem::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("Container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_date_last_saved_isSet) {
        obj.insert(QString("DateLastSaved"), ::OpenAPI::toJsonValue(m_date_last_saved));
    }
    if (m_extra_ids.size() > 0) {
        obj.insert(QString("ExtraIds"), ::OpenAPI::toJsonValue(m_extra_ids));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_is_hd_isSet) {
        obj.insert(QString("IsHD"), ::OpenAPI::toJsonValue(m_is_hd));
    }
    if (m_is_shortcut_isSet) {
        obj.insert(QString("IsShortcut"), ::OpenAPI::toJsonValue(m_is_shortcut));
    }
    if (m_remote_trailers.size() > 0) {
        obj.insert(QString("RemoteTrailers"), ::OpenAPI::toJsonValue(m_remote_trailers));
    }
    if (m_shortcut_path_isSet) {
        obj.insert(QString("ShortcutPath"), ::OpenAPI::toJsonValue(m_shortcut_path));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_supports_external_transfer_isSet) {
        obj.insert(QString("SupportsExternalTransfer"), ::OpenAPI::toJsonValue(m_supports_external_transfer));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIBaseItem::getContainer() const {
    return m_container;
}
void OAIBaseItem::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIBaseItem::is_container_Set() const{
    return m_container_isSet;
}

bool OAIBaseItem::is_container_Valid() const{
    return m_container_isValid;
}

QDateTime OAIBaseItem::getDateLastSaved() const {
    return m_date_last_saved;
}
void OAIBaseItem::setDateLastSaved(const QDateTime &date_last_saved) {
    m_date_last_saved = date_last_saved;
    m_date_last_saved_isSet = true;
}

bool OAIBaseItem::is_date_last_saved_Set() const{
    return m_date_last_saved_isSet;
}

bool OAIBaseItem::is_date_last_saved_Valid() const{
    return m_date_last_saved_isValid;
}

QList<QString> OAIBaseItem::getExtraIds() const {
    return m_extra_ids;
}
void OAIBaseItem::setExtraIds(const QList<QString> &extra_ids) {
    m_extra_ids = extra_ids;
    m_extra_ids_isSet = true;
}

bool OAIBaseItem::is_extra_ids_Set() const{
    return m_extra_ids_isSet;
}

bool OAIBaseItem::is_extra_ids_Valid() const{
    return m_extra_ids_isValid;
}

qint32 OAIBaseItem::getHeight() const {
    return m_height;
}
void OAIBaseItem::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIBaseItem::is_height_Set() const{
    return m_height_isSet;
}

bool OAIBaseItem::is_height_Valid() const{
    return m_height_isValid;
}

bool OAIBaseItem::isIsHd() const {
    return m_is_hd;
}
void OAIBaseItem::setIsHd(const bool &is_hd) {
    m_is_hd = is_hd;
    m_is_hd_isSet = true;
}

bool OAIBaseItem::is_is_hd_Set() const{
    return m_is_hd_isSet;
}

bool OAIBaseItem::is_is_hd_Valid() const{
    return m_is_hd_isValid;
}

bool OAIBaseItem::isIsShortcut() const {
    return m_is_shortcut;
}
void OAIBaseItem::setIsShortcut(const bool &is_shortcut) {
    m_is_shortcut = is_shortcut;
    m_is_shortcut_isSet = true;
}

bool OAIBaseItem::is_is_shortcut_Set() const{
    return m_is_shortcut_isSet;
}

bool OAIBaseItem::is_is_shortcut_Valid() const{
    return m_is_shortcut_isValid;
}

QList<OAIMediaUrl> OAIBaseItem::getRemoteTrailers() const {
    return m_remote_trailers;
}
void OAIBaseItem::setRemoteTrailers(const QList<OAIMediaUrl> &remote_trailers) {
    m_remote_trailers = remote_trailers;
    m_remote_trailers_isSet = true;
}

bool OAIBaseItem::is_remote_trailers_Set() const{
    return m_remote_trailers_isSet;
}

bool OAIBaseItem::is_remote_trailers_Valid() const{
    return m_remote_trailers_isValid;
}

QString OAIBaseItem::getShortcutPath() const {
    return m_shortcut_path;
}
void OAIBaseItem::setShortcutPath(const QString &shortcut_path) {
    m_shortcut_path = shortcut_path;
    m_shortcut_path_isSet = true;
}

bool OAIBaseItem::is_shortcut_path_Set() const{
    return m_shortcut_path_isSet;
}

bool OAIBaseItem::is_shortcut_path_Valid() const{
    return m_shortcut_path_isValid;
}

qint64 OAIBaseItem::getSize() const {
    return m_size;
}
void OAIBaseItem::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIBaseItem::is_size_Set() const{
    return m_size_isSet;
}

bool OAIBaseItem::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIBaseItem::isSupportsExternalTransfer() const {
    return m_supports_external_transfer;
}
void OAIBaseItem::setSupportsExternalTransfer(const bool &supports_external_transfer) {
    m_supports_external_transfer = supports_external_transfer;
    m_supports_external_transfer_isSet = true;
}

bool OAIBaseItem::is_supports_external_transfer_Set() const{
    return m_supports_external_transfer_isSet;
}

bool OAIBaseItem::is_supports_external_transfer_Valid() const{
    return m_supports_external_transfer_isValid;
}

qint32 OAIBaseItem::getWidth() const {
    return m_width;
}
void OAIBaseItem::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIBaseItem::is_width_Set() const{
    return m_width_isSet;
}

bool OAIBaseItem::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIBaseItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_saved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shortcut_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_trailers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shortcut_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_external_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
