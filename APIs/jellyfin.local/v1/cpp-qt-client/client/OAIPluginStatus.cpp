/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginStatus::OAIPluginStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginStatus::OAIPluginStatus() {
    this->initializeModel();
}

OAIPluginStatus::~OAIPluginStatus() {}

void OAIPluginStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPluginStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPluginStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Active", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPluginStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Restart", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPluginStatus::RESTART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPluginStatus::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Superceded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPluginStatus::SUPERCEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Malfunctioned", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPluginStatus::MALFUNCTIONED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPluginStatus::NOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Disabled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPluginStatus::DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPluginStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPluginStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPluginStatus::ACTIVE:
            val = "Active";
            break;
        case eOAIPluginStatus::RESTART:
            val = "Restart";
            break;
        case eOAIPluginStatus::DELETED:
            val = "Deleted";
            break;
        case eOAIPluginStatus::SUPERCEDED:
            val = "Superceded";
            break;
        case eOAIPluginStatus::MALFUNCTIONED:
            val = "Malfunctioned";
            break;
        case eOAIPluginStatus::NOTSUPPORTED:
            val = "NotSupported";
            break;
        case eOAIPluginStatus::DISABLED:
            val = "Disabled";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPluginStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPluginStatus::eOAIPluginStatus OAIPluginStatus::getValue() const {
    return m_value;
}

void OAIPluginStatus::setValue(const OAIPluginStatus::eOAIPluginStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPluginStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIPluginStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
