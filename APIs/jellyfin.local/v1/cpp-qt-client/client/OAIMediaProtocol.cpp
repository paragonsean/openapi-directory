/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaProtocol.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaProtocol::OAIMediaProtocol(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaProtocol::OAIMediaProtocol() {
    this->initializeModel();
}

OAIMediaProtocol::~OAIMediaProtocol() {}

void OAIMediaProtocol::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMediaProtocol::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMediaProtocol::fromJson(QString jsonString) {
    
    if ( jsonString.compare("File", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaProtocol::FILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Http", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaProtocol::HTTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Rtmp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaProtocol::RTMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Rtsp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaProtocol::RTSP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Udp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaProtocol::UDP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Rtp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaProtocol::RTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ftp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaProtocol::FTP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMediaProtocol::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMediaProtocol::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMediaProtocol::FILE:
            val = "File";
            break;
        case eOAIMediaProtocol::HTTP:
            val = "Http";
            break;
        case eOAIMediaProtocol::RTMP:
            val = "Rtmp";
            break;
        case eOAIMediaProtocol::RTSP:
            val = "Rtsp";
            break;
        case eOAIMediaProtocol::UDP:
            val = "Udp";
            break;
        case eOAIMediaProtocol::RTP:
            val = "Rtp";
            break;
        case eOAIMediaProtocol::FTP:
            val = "Ftp";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMediaProtocol::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMediaProtocol::eOAIMediaProtocol OAIMediaProtocol::getValue() const {
    return m_value;
}

void OAIMediaProtocol::setValue(const OAIMediaProtocol::eOAIMediaProtocol& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMediaProtocol::isSet() const {
    
    return m_value_isSet;
}

bool OAIMediaProtocol::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
