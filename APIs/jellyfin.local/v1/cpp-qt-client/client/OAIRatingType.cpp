/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatingType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatingType::OAIRatingType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatingType::OAIRatingType() {
    this->initializeModel();
}

OAIRatingType::~OAIRatingType() {}

void OAIRatingType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRatingType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRatingType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Score", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatingType::SCORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Likes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRatingType::LIKES;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRatingType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRatingType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRatingType::SCORE:
            val = "Score";
            break;
        case eOAIRatingType::LIKES:
            val = "Likes";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRatingType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRatingType::eOAIRatingType OAIRatingType::getValue() const {
    return m_value;
}

void OAIRatingType::setValue(const OAIRatingType::eOAIRatingType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRatingType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRatingType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
