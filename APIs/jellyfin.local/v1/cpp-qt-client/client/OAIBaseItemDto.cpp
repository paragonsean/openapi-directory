/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseItemDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseItemDto::OAIBaseItemDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseItemDto::OAIBaseItemDto() {
    this->initializeModel();
}

OAIBaseItemDto::~OAIBaseItemDto() {}

void OAIBaseItemDto::initializeModel() {

    m_air_days_isSet = false;
    m_air_days_isValid = false;

    m_air_time_isSet = false;
    m_air_time_isValid = false;

    m_airs_after_season_number_isSet = false;
    m_airs_after_season_number_isValid = false;

    m_airs_before_episode_number_isSet = false;
    m_airs_before_episode_number_isValid = false;

    m_airs_before_season_number_isSet = false;
    m_airs_before_season_number_isValid = false;

    m_album_isSet = false;
    m_album_isValid = false;

    m_album_artist_isSet = false;
    m_album_artist_isValid = false;

    m_album_artists_isSet = false;
    m_album_artists_isValid = false;

    m_album_count_isSet = false;
    m_album_count_isValid = false;

    m_album_id_isSet = false;
    m_album_id_isValid = false;

    m_album_primary_image_tag_isSet = false;
    m_album_primary_image_tag_isValid = false;

    m_altitude_isSet = false;
    m_altitude_isValid = false;

    m_aperture_isSet = false;
    m_aperture_isValid = false;

    m_artist_count_isSet = false;
    m_artist_count_isValid = false;

    m_artist_items_isSet = false;
    m_artist_items_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_backdrop_image_tags_isSet = false;
    m_backdrop_image_tags_isValid = false;

    m_camera_make_isSet = false;
    m_camera_make_isValid = false;

    m_camera_model_isSet = false;
    m_camera_model_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_download_isSet = false;
    m_can_download_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_channel_number_isSet = false;
    m_channel_number_isValid = false;

    m_channel_primary_image_tag_isSet = false;
    m_channel_primary_image_tag_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_chapters_isSet = false;
    m_chapters_isValid = false;

    m_child_count_isSet = false;
    m_child_count_isValid = false;

    m_collection_type_isSet = false;
    m_collection_type_isValid = false;

    m_community_rating_isSet = false;
    m_community_rating_isValid = false;

    m_completion_percentage_isSet = false;
    m_completion_percentage_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_critic_rating_isSet = false;
    m_critic_rating_isValid = false;

    m_cumulative_run_time_ticks_isSet = false;
    m_cumulative_run_time_ticks_isValid = false;

    m_current_program_isSet = false;
    m_current_program_isValid = false;

    m_custom_rating_isSet = false;
    m_custom_rating_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_last_media_added_isSet = false;
    m_date_last_media_added_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_display_preferences_id_isSet = false;
    m_display_preferences_id_isValid = false;

    m_enable_media_source_display_isSet = false;
    m_enable_media_source_display_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_episode_count_isSet = false;
    m_episode_count_isValid = false;

    m_episode_title_isSet = false;
    m_episode_title_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_exposure_time_isSet = false;
    m_exposure_time_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_extra_type_isSet = false;
    m_extra_type_isValid = false;

    m_focal_length_isSet = false;
    m_focal_length_isValid = false;

    m_forced_sort_name_isSet = false;
    m_forced_sort_name_isValid = false;

    m_genre_items_isSet = false;
    m_genre_items_isValid = false;

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_has_subtitles_isSet = false;
    m_has_subtitles_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_blur_hashes_isSet = false;
    m_image_blur_hashes_isValid = false;

    m_image_orientation_isSet = false;
    m_image_orientation_isValid = false;

    m_image_tags_isSet = false;
    m_image_tags_isValid = false;

    m_index_number_isSet = false;
    m_index_number_isValid = false;

    m_index_number_end_isSet = false;
    m_index_number_end_isValid = false;

    m_is_folder_isSet = false;
    m_is_folder_isValid = false;

    m_is_hd_isSet = false;
    m_is_hd_isValid = false;

    m_is_kids_isSet = false;
    m_is_kids_isValid = false;

    m_is_live_isSet = false;
    m_is_live_isValid = false;

    m_is_movie_isSet = false;
    m_is_movie_isValid = false;

    m_is_news_isSet = false;
    m_is_news_isValid = false;

    m_is_place_holder_isSet = false;
    m_is_place_holder_isValid = false;

    m_is_premiere_isSet = false;
    m_is_premiere_isValid = false;

    m_is_repeat_isSet = false;
    m_is_repeat_isValid = false;

    m_is_series_isSet = false;
    m_is_series_isValid = false;

    m_is_sports_isSet = false;
    m_is_sports_isValid = false;

    m_iso_speed_rating_isSet = false;
    m_iso_speed_rating_isValid = false;

    m_iso_type_isSet = false;
    m_iso_type_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_local_trailer_count_isSet = false;
    m_local_trailer_count_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_lock_data_isSet = false;
    m_lock_data_isValid = false;

    m_locked_fields_isSet = false;
    m_locked_fields_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_media_source_count_isSet = false;
    m_media_source_count_isValid = false;

    m_media_sources_isSet = false;
    m_media_sources_isValid = false;

    m_media_streams_isSet = false;
    m_media_streams_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_movie_count_isSet = false;
    m_movie_count_isValid = false;

    m_music_video_count_isSet = false;
    m_music_video_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_official_rating_isSet = false;
    m_official_rating_isValid = false;

    m_original_title_isSet = false;
    m_original_title_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_parent_art_image_tag_isSet = false;
    m_parent_art_image_tag_isValid = false;

    m_parent_art_item_id_isSet = false;
    m_parent_art_item_id_isValid = false;

    m_parent_backdrop_image_tags_isSet = false;
    m_parent_backdrop_image_tags_isValid = false;

    m_parent_backdrop_item_id_isSet = false;
    m_parent_backdrop_item_id_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_parent_index_number_isSet = false;
    m_parent_index_number_isValid = false;

    m_parent_logo_image_tag_isSet = false;
    m_parent_logo_image_tag_isValid = false;

    m_parent_logo_item_id_isSet = false;
    m_parent_logo_item_id_isValid = false;

    m_parent_primary_image_item_id_isSet = false;
    m_parent_primary_image_item_id_isValid = false;

    m_parent_primary_image_tag_isSet = false;
    m_parent_primary_image_tag_isValid = false;

    m_parent_thumb_image_tag_isSet = false;
    m_parent_thumb_image_tag_isValid = false;

    m_parent_thumb_item_id_isSet = false;
    m_parent_thumb_item_id_isValid = false;

    m_part_count_isSet = false;
    m_part_count_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_people_isSet = false;
    m_people_isValid = false;

    m_play_access_isSet = false;
    m_play_access_isValid = false;

    m_playlist_item_id_isSet = false;
    m_playlist_item_id_isValid = false;

    m_preferred_metadata_country_code_isSet = false;
    m_preferred_metadata_country_code_isValid = false;

    m_preferred_metadata_language_isSet = false;
    m_preferred_metadata_language_isValid = false;

    m_premiere_date_isSet = false;
    m_premiere_date_isValid = false;

    m_primary_image_aspect_ratio_isSet = false;
    m_primary_image_aspect_ratio_isValid = false;

    m_production_locations_isSet = false;
    m_production_locations_isValid = false;

    m_production_year_isSet = false;
    m_production_year_isValid = false;

    m_program_count_isSet = false;
    m_program_count_isValid = false;

    m_program_id_isSet = false;
    m_program_id_isValid = false;

    m_provider_ids_isSet = false;
    m_provider_ids_isValid = false;

    m_recursive_item_count_isSet = false;
    m_recursive_item_count_isValid = false;

    m_remote_trailers_isSet = false;
    m_remote_trailers_isValid = false;

    m_run_time_ticks_isSet = false;
    m_run_time_ticks_isValid = false;

    m_screenshot_image_tags_isSet = false;
    m_screenshot_image_tags_isValid = false;

    m_season_id_isSet = false;
    m_season_id_isValid = false;

    m_season_name_isSet = false;
    m_season_name_isValid = false;

    m_series_count_isSet = false;
    m_series_count_isValid = false;

    m_series_id_isSet = false;
    m_series_id_isValid = false;

    m_series_name_isSet = false;
    m_series_name_isValid = false;

    m_series_primary_image_tag_isSet = false;
    m_series_primary_image_tag_isValid = false;

    m_series_studio_isSet = false;
    m_series_studio_isValid = false;

    m_series_thumb_image_tag_isSet = false;
    m_series_thumb_image_tag_isValid = false;

    m_series_timer_id_isSet = false;
    m_series_timer_id_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_shutter_speed_isSet = false;
    m_shutter_speed_isValid = false;

    m_software_isSet = false;
    m_software_isValid = false;

    m_song_count_isSet = false;
    m_song_count_isValid = false;

    m_sort_name_isSet = false;
    m_sort_name_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_special_feature_count_isSet = false;
    m_special_feature_count_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_studios_isSet = false;
    m_studios_isValid = false;

    m_supports_sync_isSet = false;
    m_supports_sync_isValid = false;

    m_taglines_isSet = false;
    m_taglines_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_timer_id_isSet = false;
    m_timer_id_isValid = false;

    m_trailer_count_isSet = false;
    m_trailer_count_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;

    m_video3_d_format_isSet = false;
    m_video3_d_format_isValid = false;

    m_video_type_isSet = false;
    m_video_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIBaseItemDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseItemDto::fromJsonObject(QJsonObject json) {

    m_air_days_isValid = ::OpenAPI::fromJsonValue(m_air_days, json[QString("AirDays")]);
    m_air_days_isSet = !json[QString("AirDays")].isNull() && m_air_days_isValid;

    m_air_time_isValid = ::OpenAPI::fromJsonValue(m_air_time, json[QString("AirTime")]);
    m_air_time_isSet = !json[QString("AirTime")].isNull() && m_air_time_isValid;

    m_airs_after_season_number_isValid = ::OpenAPI::fromJsonValue(m_airs_after_season_number, json[QString("AirsAfterSeasonNumber")]);
    m_airs_after_season_number_isSet = !json[QString("AirsAfterSeasonNumber")].isNull() && m_airs_after_season_number_isValid;

    m_airs_before_episode_number_isValid = ::OpenAPI::fromJsonValue(m_airs_before_episode_number, json[QString("AirsBeforeEpisodeNumber")]);
    m_airs_before_episode_number_isSet = !json[QString("AirsBeforeEpisodeNumber")].isNull() && m_airs_before_episode_number_isValid;

    m_airs_before_season_number_isValid = ::OpenAPI::fromJsonValue(m_airs_before_season_number, json[QString("AirsBeforeSeasonNumber")]);
    m_airs_before_season_number_isSet = !json[QString("AirsBeforeSeasonNumber")].isNull() && m_airs_before_season_number_isValid;

    m_album_isValid = ::OpenAPI::fromJsonValue(m_album, json[QString("Album")]);
    m_album_isSet = !json[QString("Album")].isNull() && m_album_isValid;

    m_album_artist_isValid = ::OpenAPI::fromJsonValue(m_album_artist, json[QString("AlbumArtist")]);
    m_album_artist_isSet = !json[QString("AlbumArtist")].isNull() && m_album_artist_isValid;

    m_album_artists_isValid = ::OpenAPI::fromJsonValue(m_album_artists, json[QString("AlbumArtists")]);
    m_album_artists_isSet = !json[QString("AlbumArtists")].isNull() && m_album_artists_isValid;

    m_album_count_isValid = ::OpenAPI::fromJsonValue(m_album_count, json[QString("AlbumCount")]);
    m_album_count_isSet = !json[QString("AlbumCount")].isNull() && m_album_count_isValid;

    m_album_id_isValid = ::OpenAPI::fromJsonValue(m_album_id, json[QString("AlbumId")]);
    m_album_id_isSet = !json[QString("AlbumId")].isNull() && m_album_id_isValid;

    m_album_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_album_primary_image_tag, json[QString("AlbumPrimaryImageTag")]);
    m_album_primary_image_tag_isSet = !json[QString("AlbumPrimaryImageTag")].isNull() && m_album_primary_image_tag_isValid;

    m_altitude_isValid = ::OpenAPI::fromJsonValue(m_altitude, json[QString("Altitude")]);
    m_altitude_isSet = !json[QString("Altitude")].isNull() && m_altitude_isValid;

    m_aperture_isValid = ::OpenAPI::fromJsonValue(m_aperture, json[QString("Aperture")]);
    m_aperture_isSet = !json[QString("Aperture")].isNull() && m_aperture_isValid;

    m_artist_count_isValid = ::OpenAPI::fromJsonValue(m_artist_count, json[QString("ArtistCount")]);
    m_artist_count_isSet = !json[QString("ArtistCount")].isNull() && m_artist_count_isValid;

    m_artist_items_isValid = ::OpenAPI::fromJsonValue(m_artist_items, json[QString("ArtistItems")]);
    m_artist_items_isSet = !json[QString("ArtistItems")].isNull() && m_artist_items_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("Artists")]);
    m_artists_isSet = !json[QString("Artists")].isNull() && m_artists_isValid;

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("AspectRatio")]);
    m_aspect_ratio_isSet = !json[QString("AspectRatio")].isNull() && m_aspect_ratio_isValid;

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("Audio")]);
    m_audio_isSet = !json[QString("Audio")].isNull() && m_audio_isValid;

    m_backdrop_image_tags_isValid = ::OpenAPI::fromJsonValue(m_backdrop_image_tags, json[QString("BackdropImageTags")]);
    m_backdrop_image_tags_isSet = !json[QString("BackdropImageTags")].isNull() && m_backdrop_image_tags_isValid;

    m_camera_make_isValid = ::OpenAPI::fromJsonValue(m_camera_make, json[QString("CameraMake")]);
    m_camera_make_isSet = !json[QString("CameraMake")].isNull() && m_camera_make_isValid;

    m_camera_model_isValid = ::OpenAPI::fromJsonValue(m_camera_model, json[QString("CameraModel")]);
    m_camera_model_isSet = !json[QString("CameraModel")].isNull() && m_camera_model_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("CanDelete")]);
    m_can_delete_isSet = !json[QString("CanDelete")].isNull() && m_can_delete_isValid;

    m_can_download_isValid = ::OpenAPI::fromJsonValue(m_can_download, json[QString("CanDownload")]);
    m_can_download_isSet = !json[QString("CanDownload")].isNull() && m_can_download_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("ChannelId")]);
    m_channel_id_isSet = !json[QString("ChannelId")].isNull() && m_channel_id_isValid;

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("ChannelName")]);
    m_channel_name_isSet = !json[QString("ChannelName")].isNull() && m_channel_name_isValid;

    m_channel_number_isValid = ::OpenAPI::fromJsonValue(m_channel_number, json[QString("ChannelNumber")]);
    m_channel_number_isSet = !json[QString("ChannelNumber")].isNull() && m_channel_number_isValid;

    m_channel_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_channel_primary_image_tag, json[QString("ChannelPrimaryImageTag")]);
    m_channel_primary_image_tag_isSet = !json[QString("ChannelPrimaryImageTag")].isNull() && m_channel_primary_image_tag_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("ChannelType")]);
    m_channel_type_isSet = !json[QString("ChannelType")].isNull() && m_channel_type_isValid;

    m_chapters_isValid = ::OpenAPI::fromJsonValue(m_chapters, json[QString("Chapters")]);
    m_chapters_isSet = !json[QString("Chapters")].isNull() && m_chapters_isValid;

    m_child_count_isValid = ::OpenAPI::fromJsonValue(m_child_count, json[QString("ChildCount")]);
    m_child_count_isSet = !json[QString("ChildCount")].isNull() && m_child_count_isValid;

    m_collection_type_isValid = ::OpenAPI::fromJsonValue(m_collection_type, json[QString("CollectionType")]);
    m_collection_type_isSet = !json[QString("CollectionType")].isNull() && m_collection_type_isValid;

    m_community_rating_isValid = ::OpenAPI::fromJsonValue(m_community_rating, json[QString("CommunityRating")]);
    m_community_rating_isSet = !json[QString("CommunityRating")].isNull() && m_community_rating_isValid;

    m_completion_percentage_isValid = ::OpenAPI::fromJsonValue(m_completion_percentage, json[QString("CompletionPercentage")]);
    m_completion_percentage_isSet = !json[QString("CompletionPercentage")].isNull() && m_completion_percentage_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("Container")]);
    m_container_isSet = !json[QString("Container")].isNull() && m_container_isValid;

    m_critic_rating_isValid = ::OpenAPI::fromJsonValue(m_critic_rating, json[QString("CriticRating")]);
    m_critic_rating_isSet = !json[QString("CriticRating")].isNull() && m_critic_rating_isValid;

    m_cumulative_run_time_ticks_isValid = ::OpenAPI::fromJsonValue(m_cumulative_run_time_ticks, json[QString("CumulativeRunTimeTicks")]);
    m_cumulative_run_time_ticks_isSet = !json[QString("CumulativeRunTimeTicks")].isNull() && m_cumulative_run_time_ticks_isValid;

    m_current_program_isValid = ::OpenAPI::fromJsonValue(m_current_program, json[QString("CurrentProgram")]);
    m_current_program_isSet = !json[QString("CurrentProgram")].isNull() && m_current_program_isValid;

    m_custom_rating_isValid = ::OpenAPI::fromJsonValue(m_custom_rating, json[QString("CustomRating")]);
    m_custom_rating_isSet = !json[QString("CustomRating")].isNull() && m_custom_rating_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_last_media_added_isValid = ::OpenAPI::fromJsonValue(m_date_last_media_added, json[QString("DateLastMediaAdded")]);
    m_date_last_media_added_isSet = !json[QString("DateLastMediaAdded")].isNull() && m_date_last_media_added_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("DisplayOrder")]);
    m_display_order_isSet = !json[QString("DisplayOrder")].isNull() && m_display_order_isValid;

    m_display_preferences_id_isValid = ::OpenAPI::fromJsonValue(m_display_preferences_id, json[QString("DisplayPreferencesId")]);
    m_display_preferences_id_isSet = !json[QString("DisplayPreferencesId")].isNull() && m_display_preferences_id_isValid;

    m_enable_media_source_display_isValid = ::OpenAPI::fromJsonValue(m_enable_media_source_display, json[QString("EnableMediaSourceDisplay")]);
    m_enable_media_source_display_isSet = !json[QString("EnableMediaSourceDisplay")].isNull() && m_enable_media_source_display_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_episode_count_isValid = ::OpenAPI::fromJsonValue(m_episode_count, json[QString("EpisodeCount")]);
    m_episode_count_isSet = !json[QString("EpisodeCount")].isNull() && m_episode_count_isValid;

    m_episode_title_isValid = ::OpenAPI::fromJsonValue(m_episode_title, json[QString("EpisodeTitle")]);
    m_episode_title_isSet = !json[QString("EpisodeTitle")].isNull() && m_episode_title_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("Etag")]);
    m_etag_isSet = !json[QString("Etag")].isNull() && m_etag_isValid;

    m_exposure_time_isValid = ::OpenAPI::fromJsonValue(m_exposure_time, json[QString("ExposureTime")]);
    m_exposure_time_isSet = !json[QString("ExposureTime")].isNull() && m_exposure_time_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("ExternalUrls")]);
    m_external_urls_isSet = !json[QString("ExternalUrls")].isNull() && m_external_urls_isValid;

    m_extra_type_isValid = ::OpenAPI::fromJsonValue(m_extra_type, json[QString("ExtraType")]);
    m_extra_type_isSet = !json[QString("ExtraType")].isNull() && m_extra_type_isValid;

    m_focal_length_isValid = ::OpenAPI::fromJsonValue(m_focal_length, json[QString("FocalLength")]);
    m_focal_length_isSet = !json[QString("FocalLength")].isNull() && m_focal_length_isValid;

    m_forced_sort_name_isValid = ::OpenAPI::fromJsonValue(m_forced_sort_name, json[QString("ForcedSortName")]);
    m_forced_sort_name_isSet = !json[QString("ForcedSortName")].isNull() && m_forced_sort_name_isValid;

    m_genre_items_isValid = ::OpenAPI::fromJsonValue(m_genre_items, json[QString("GenreItems")]);
    m_genre_items_isSet = !json[QString("GenreItems")].isNull() && m_genre_items_isValid;

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("Genres")]);
    m_genres_isSet = !json[QString("Genres")].isNull() && m_genres_isValid;

    m_has_subtitles_isValid = ::OpenAPI::fromJsonValue(m_has_subtitles, json[QString("HasSubtitles")]);
    m_has_subtitles_isSet = !json[QString("HasSubtitles")].isNull() && m_has_subtitles_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_image_blur_hashes_isValid = ::OpenAPI::fromJsonValue(m_image_blur_hashes, json[QString("ImageBlurHashes")]);
    m_image_blur_hashes_isSet = !json[QString("ImageBlurHashes")].isNull() && m_image_blur_hashes_isValid;

    m_image_orientation_isValid = ::OpenAPI::fromJsonValue(m_image_orientation, json[QString("ImageOrientation")]);
    m_image_orientation_isSet = !json[QString("ImageOrientation")].isNull() && m_image_orientation_isValid;

    m_image_tags_isValid = ::OpenAPI::fromJsonValue(m_image_tags, json[QString("ImageTags")]);
    m_image_tags_isSet = !json[QString("ImageTags")].isNull() && m_image_tags_isValid;

    m_index_number_isValid = ::OpenAPI::fromJsonValue(m_index_number, json[QString("IndexNumber")]);
    m_index_number_isSet = !json[QString("IndexNumber")].isNull() && m_index_number_isValid;

    m_index_number_end_isValid = ::OpenAPI::fromJsonValue(m_index_number_end, json[QString("IndexNumberEnd")]);
    m_index_number_end_isSet = !json[QString("IndexNumberEnd")].isNull() && m_index_number_end_isValid;

    m_is_folder_isValid = ::OpenAPI::fromJsonValue(m_is_folder, json[QString("IsFolder")]);
    m_is_folder_isSet = !json[QString("IsFolder")].isNull() && m_is_folder_isValid;

    m_is_hd_isValid = ::OpenAPI::fromJsonValue(m_is_hd, json[QString("IsHD")]);
    m_is_hd_isSet = !json[QString("IsHD")].isNull() && m_is_hd_isValid;

    m_is_kids_isValid = ::OpenAPI::fromJsonValue(m_is_kids, json[QString("IsKids")]);
    m_is_kids_isSet = !json[QString("IsKids")].isNull() && m_is_kids_isValid;

    m_is_live_isValid = ::OpenAPI::fromJsonValue(m_is_live, json[QString("IsLive")]);
    m_is_live_isSet = !json[QString("IsLive")].isNull() && m_is_live_isValid;

    m_is_movie_isValid = ::OpenAPI::fromJsonValue(m_is_movie, json[QString("IsMovie")]);
    m_is_movie_isSet = !json[QString("IsMovie")].isNull() && m_is_movie_isValid;

    m_is_news_isValid = ::OpenAPI::fromJsonValue(m_is_news, json[QString("IsNews")]);
    m_is_news_isSet = !json[QString("IsNews")].isNull() && m_is_news_isValid;

    m_is_place_holder_isValid = ::OpenAPI::fromJsonValue(m_is_place_holder, json[QString("IsPlaceHolder")]);
    m_is_place_holder_isSet = !json[QString("IsPlaceHolder")].isNull() && m_is_place_holder_isValid;

    m_is_premiere_isValid = ::OpenAPI::fromJsonValue(m_is_premiere, json[QString("IsPremiere")]);
    m_is_premiere_isSet = !json[QString("IsPremiere")].isNull() && m_is_premiere_isValid;

    m_is_repeat_isValid = ::OpenAPI::fromJsonValue(m_is_repeat, json[QString("IsRepeat")]);
    m_is_repeat_isSet = !json[QString("IsRepeat")].isNull() && m_is_repeat_isValid;

    m_is_series_isValid = ::OpenAPI::fromJsonValue(m_is_series, json[QString("IsSeries")]);
    m_is_series_isSet = !json[QString("IsSeries")].isNull() && m_is_series_isValid;

    m_is_sports_isValid = ::OpenAPI::fromJsonValue(m_is_sports, json[QString("IsSports")]);
    m_is_sports_isSet = !json[QString("IsSports")].isNull() && m_is_sports_isValid;

    m_iso_speed_rating_isValid = ::OpenAPI::fromJsonValue(m_iso_speed_rating, json[QString("IsoSpeedRating")]);
    m_iso_speed_rating_isSet = !json[QString("IsoSpeedRating")].isNull() && m_iso_speed_rating_isValid;

    m_iso_type_isValid = ::OpenAPI::fromJsonValue(m_iso_type, json[QString("IsoType")]);
    m_iso_type_isSet = !json[QString("IsoType")].isNull() && m_iso_type_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("Latitude")]);
    m_latitude_isSet = !json[QString("Latitude")].isNull() && m_latitude_isValid;

    m_local_trailer_count_isValid = ::OpenAPI::fromJsonValue(m_local_trailer_count, json[QString("LocalTrailerCount")]);
    m_local_trailer_count_isSet = !json[QString("LocalTrailerCount")].isNull() && m_local_trailer_count_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("LocationType")]);
    m_location_type_isSet = !json[QString("LocationType")].isNull() && m_location_type_isValid;

    m_lock_data_isValid = ::OpenAPI::fromJsonValue(m_lock_data, json[QString("LockData")]);
    m_lock_data_isSet = !json[QString("LockData")].isNull() && m_lock_data_isValid;

    m_locked_fields_isValid = ::OpenAPI::fromJsonValue(m_locked_fields, json[QString("LockedFields")]);
    m_locked_fields_isSet = !json[QString("LockedFields")].isNull() && m_locked_fields_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("Longitude")]);
    m_longitude_isSet = !json[QString("Longitude")].isNull() && m_longitude_isValid;

    m_media_source_count_isValid = ::OpenAPI::fromJsonValue(m_media_source_count, json[QString("MediaSourceCount")]);
    m_media_source_count_isSet = !json[QString("MediaSourceCount")].isNull() && m_media_source_count_isValid;

    m_media_sources_isValid = ::OpenAPI::fromJsonValue(m_media_sources, json[QString("MediaSources")]);
    m_media_sources_isSet = !json[QString("MediaSources")].isNull() && m_media_sources_isValid;

    m_media_streams_isValid = ::OpenAPI::fromJsonValue(m_media_streams, json[QString("MediaStreams")]);
    m_media_streams_isSet = !json[QString("MediaStreams")].isNull() && m_media_streams_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("MediaType")]);
    m_media_type_isSet = !json[QString("MediaType")].isNull() && m_media_type_isValid;

    m_movie_count_isValid = ::OpenAPI::fromJsonValue(m_movie_count, json[QString("MovieCount")]);
    m_movie_count_isSet = !json[QString("MovieCount")].isNull() && m_movie_count_isValid;

    m_music_video_count_isValid = ::OpenAPI::fromJsonValue(m_music_video_count, json[QString("MusicVideoCount")]);
    m_music_video_count_isSet = !json[QString("MusicVideoCount")].isNull() && m_music_video_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_official_rating_isValid = ::OpenAPI::fromJsonValue(m_official_rating, json[QString("OfficialRating")]);
    m_official_rating_isSet = !json[QString("OfficialRating")].isNull() && m_official_rating_isValid;

    m_original_title_isValid = ::OpenAPI::fromJsonValue(m_original_title, json[QString("OriginalTitle")]);
    m_original_title_isSet = !json[QString("OriginalTitle")].isNull() && m_original_title_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("Overview")]);
    m_overview_isSet = !json[QString("Overview")].isNull() && m_overview_isValid;

    m_parent_art_image_tag_isValid = ::OpenAPI::fromJsonValue(m_parent_art_image_tag, json[QString("ParentArtImageTag")]);
    m_parent_art_image_tag_isSet = !json[QString("ParentArtImageTag")].isNull() && m_parent_art_image_tag_isValid;

    m_parent_art_item_id_isValid = ::OpenAPI::fromJsonValue(m_parent_art_item_id, json[QString("ParentArtItemId")]);
    m_parent_art_item_id_isSet = !json[QString("ParentArtItemId")].isNull() && m_parent_art_item_id_isValid;

    m_parent_backdrop_image_tags_isValid = ::OpenAPI::fromJsonValue(m_parent_backdrop_image_tags, json[QString("ParentBackdropImageTags")]);
    m_parent_backdrop_image_tags_isSet = !json[QString("ParentBackdropImageTags")].isNull() && m_parent_backdrop_image_tags_isValid;

    m_parent_backdrop_item_id_isValid = ::OpenAPI::fromJsonValue(m_parent_backdrop_item_id, json[QString("ParentBackdropItemId")]);
    m_parent_backdrop_item_id_isSet = !json[QString("ParentBackdropItemId")].isNull() && m_parent_backdrop_item_id_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("ParentId")]);
    m_parent_id_isSet = !json[QString("ParentId")].isNull() && m_parent_id_isValid;

    m_parent_index_number_isValid = ::OpenAPI::fromJsonValue(m_parent_index_number, json[QString("ParentIndexNumber")]);
    m_parent_index_number_isSet = !json[QString("ParentIndexNumber")].isNull() && m_parent_index_number_isValid;

    m_parent_logo_image_tag_isValid = ::OpenAPI::fromJsonValue(m_parent_logo_image_tag, json[QString("ParentLogoImageTag")]);
    m_parent_logo_image_tag_isSet = !json[QString("ParentLogoImageTag")].isNull() && m_parent_logo_image_tag_isValid;

    m_parent_logo_item_id_isValid = ::OpenAPI::fromJsonValue(m_parent_logo_item_id, json[QString("ParentLogoItemId")]);
    m_parent_logo_item_id_isSet = !json[QString("ParentLogoItemId")].isNull() && m_parent_logo_item_id_isValid;

    m_parent_primary_image_item_id_isValid = ::OpenAPI::fromJsonValue(m_parent_primary_image_item_id, json[QString("ParentPrimaryImageItemId")]);
    m_parent_primary_image_item_id_isSet = !json[QString("ParentPrimaryImageItemId")].isNull() && m_parent_primary_image_item_id_isValid;

    m_parent_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_parent_primary_image_tag, json[QString("ParentPrimaryImageTag")]);
    m_parent_primary_image_tag_isSet = !json[QString("ParentPrimaryImageTag")].isNull() && m_parent_primary_image_tag_isValid;

    m_parent_thumb_image_tag_isValid = ::OpenAPI::fromJsonValue(m_parent_thumb_image_tag, json[QString("ParentThumbImageTag")]);
    m_parent_thumb_image_tag_isSet = !json[QString("ParentThumbImageTag")].isNull() && m_parent_thumb_image_tag_isValid;

    m_parent_thumb_item_id_isValid = ::OpenAPI::fromJsonValue(m_parent_thumb_item_id, json[QString("ParentThumbItemId")]);
    m_parent_thumb_item_id_isSet = !json[QString("ParentThumbItemId")].isNull() && m_parent_thumb_item_id_isValid;

    m_part_count_isValid = ::OpenAPI::fromJsonValue(m_part_count, json[QString("PartCount")]);
    m_part_count_isSet = !json[QString("PartCount")].isNull() && m_part_count_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_people_isValid = ::OpenAPI::fromJsonValue(m_people, json[QString("People")]);
    m_people_isSet = !json[QString("People")].isNull() && m_people_isValid;

    m_play_access_isValid = ::OpenAPI::fromJsonValue(m_play_access, json[QString("PlayAccess")]);
    m_play_access_isSet = !json[QString("PlayAccess")].isNull() && m_play_access_isValid;

    m_playlist_item_id_isValid = ::OpenAPI::fromJsonValue(m_playlist_item_id, json[QString("PlaylistItemId")]);
    m_playlist_item_id_isSet = !json[QString("PlaylistItemId")].isNull() && m_playlist_item_id_isValid;

    m_preferred_metadata_country_code_isValid = ::OpenAPI::fromJsonValue(m_preferred_metadata_country_code, json[QString("PreferredMetadataCountryCode")]);
    m_preferred_metadata_country_code_isSet = !json[QString("PreferredMetadataCountryCode")].isNull() && m_preferred_metadata_country_code_isValid;

    m_preferred_metadata_language_isValid = ::OpenAPI::fromJsonValue(m_preferred_metadata_language, json[QString("PreferredMetadataLanguage")]);
    m_preferred_metadata_language_isSet = !json[QString("PreferredMetadataLanguage")].isNull() && m_preferred_metadata_language_isValid;

    m_premiere_date_isValid = ::OpenAPI::fromJsonValue(m_premiere_date, json[QString("PremiereDate")]);
    m_premiere_date_isSet = !json[QString("PremiereDate")].isNull() && m_premiere_date_isValid;

    m_primary_image_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_primary_image_aspect_ratio, json[QString("PrimaryImageAspectRatio")]);
    m_primary_image_aspect_ratio_isSet = !json[QString("PrimaryImageAspectRatio")].isNull() && m_primary_image_aspect_ratio_isValid;

    m_production_locations_isValid = ::OpenAPI::fromJsonValue(m_production_locations, json[QString("ProductionLocations")]);
    m_production_locations_isSet = !json[QString("ProductionLocations")].isNull() && m_production_locations_isValid;

    m_production_year_isValid = ::OpenAPI::fromJsonValue(m_production_year, json[QString("ProductionYear")]);
    m_production_year_isSet = !json[QString("ProductionYear")].isNull() && m_production_year_isValid;

    m_program_count_isValid = ::OpenAPI::fromJsonValue(m_program_count, json[QString("ProgramCount")]);
    m_program_count_isSet = !json[QString("ProgramCount")].isNull() && m_program_count_isValid;

    m_program_id_isValid = ::OpenAPI::fromJsonValue(m_program_id, json[QString("ProgramId")]);
    m_program_id_isSet = !json[QString("ProgramId")].isNull() && m_program_id_isValid;

    m_provider_ids_isValid = ::OpenAPI::fromJsonValue(m_provider_ids, json[QString("ProviderIds")]);
    m_provider_ids_isSet = !json[QString("ProviderIds")].isNull() && m_provider_ids_isValid;

    m_recursive_item_count_isValid = ::OpenAPI::fromJsonValue(m_recursive_item_count, json[QString("RecursiveItemCount")]);
    m_recursive_item_count_isSet = !json[QString("RecursiveItemCount")].isNull() && m_recursive_item_count_isValid;

    m_remote_trailers_isValid = ::OpenAPI::fromJsonValue(m_remote_trailers, json[QString("RemoteTrailers")]);
    m_remote_trailers_isSet = !json[QString("RemoteTrailers")].isNull() && m_remote_trailers_isValid;

    m_run_time_ticks_isValid = ::OpenAPI::fromJsonValue(m_run_time_ticks, json[QString("RunTimeTicks")]);
    m_run_time_ticks_isSet = !json[QString("RunTimeTicks")].isNull() && m_run_time_ticks_isValid;

    m_screenshot_image_tags_isValid = ::OpenAPI::fromJsonValue(m_screenshot_image_tags, json[QString("ScreenshotImageTags")]);
    m_screenshot_image_tags_isSet = !json[QString("ScreenshotImageTags")].isNull() && m_screenshot_image_tags_isValid;

    m_season_id_isValid = ::OpenAPI::fromJsonValue(m_season_id, json[QString("SeasonId")]);
    m_season_id_isSet = !json[QString("SeasonId")].isNull() && m_season_id_isValid;

    m_season_name_isValid = ::OpenAPI::fromJsonValue(m_season_name, json[QString("SeasonName")]);
    m_season_name_isSet = !json[QString("SeasonName")].isNull() && m_season_name_isValid;

    m_series_count_isValid = ::OpenAPI::fromJsonValue(m_series_count, json[QString("SeriesCount")]);
    m_series_count_isSet = !json[QString("SeriesCount")].isNull() && m_series_count_isValid;

    m_series_id_isValid = ::OpenAPI::fromJsonValue(m_series_id, json[QString("SeriesId")]);
    m_series_id_isSet = !json[QString("SeriesId")].isNull() && m_series_id_isValid;

    m_series_name_isValid = ::OpenAPI::fromJsonValue(m_series_name, json[QString("SeriesName")]);
    m_series_name_isSet = !json[QString("SeriesName")].isNull() && m_series_name_isValid;

    m_series_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_series_primary_image_tag, json[QString("SeriesPrimaryImageTag")]);
    m_series_primary_image_tag_isSet = !json[QString("SeriesPrimaryImageTag")].isNull() && m_series_primary_image_tag_isValid;

    m_series_studio_isValid = ::OpenAPI::fromJsonValue(m_series_studio, json[QString("SeriesStudio")]);
    m_series_studio_isSet = !json[QString("SeriesStudio")].isNull() && m_series_studio_isValid;

    m_series_thumb_image_tag_isValid = ::OpenAPI::fromJsonValue(m_series_thumb_image_tag, json[QString("SeriesThumbImageTag")]);
    m_series_thumb_image_tag_isSet = !json[QString("SeriesThumbImageTag")].isNull() && m_series_thumb_image_tag_isValid;

    m_series_timer_id_isValid = ::OpenAPI::fromJsonValue(m_series_timer_id, json[QString("SeriesTimerId")]);
    m_series_timer_id_isSet = !json[QString("SeriesTimerId")].isNull() && m_series_timer_id_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_shutter_speed_isValid = ::OpenAPI::fromJsonValue(m_shutter_speed, json[QString("ShutterSpeed")]);
    m_shutter_speed_isSet = !json[QString("ShutterSpeed")].isNull() && m_shutter_speed_isValid;

    m_software_isValid = ::OpenAPI::fromJsonValue(m_software, json[QString("Software")]);
    m_software_isSet = !json[QString("Software")].isNull() && m_software_isValid;

    m_song_count_isValid = ::OpenAPI::fromJsonValue(m_song_count, json[QString("SongCount")]);
    m_song_count_isSet = !json[QString("SongCount")].isNull() && m_song_count_isValid;

    m_sort_name_isValid = ::OpenAPI::fromJsonValue(m_sort_name, json[QString("SortName")]);
    m_sort_name_isSet = !json[QString("SortName")].isNull() && m_sort_name_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_special_feature_count_isValid = ::OpenAPI::fromJsonValue(m_special_feature_count, json[QString("SpecialFeatureCount")]);
    m_special_feature_count_isSet = !json[QString("SpecialFeatureCount")].isNull() && m_special_feature_count_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_studios_isValid = ::OpenAPI::fromJsonValue(m_studios, json[QString("Studios")]);
    m_studios_isSet = !json[QString("Studios")].isNull() && m_studios_isValid;

    m_supports_sync_isValid = ::OpenAPI::fromJsonValue(m_supports_sync, json[QString("SupportsSync")]);
    m_supports_sync_isSet = !json[QString("SupportsSync")].isNull() && m_supports_sync_isValid;

    m_taglines_isValid = ::OpenAPI::fromJsonValue(m_taglines, json[QString("Taglines")]);
    m_taglines_isSet = !json[QString("Taglines")].isNull() && m_taglines_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_timer_id_isValid = ::OpenAPI::fromJsonValue(m_timer_id, json[QString("TimerId")]);
    m_timer_id_isSet = !json[QString("TimerId")].isNull() && m_timer_id_isValid;

    m_trailer_count_isValid = ::OpenAPI::fromJsonValue(m_trailer_count, json[QString("TrailerCount")]);
    m_trailer_count_isSet = !json[QString("TrailerCount")].isNull() && m_trailer_count_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(m_user_data, json[QString("UserData")]);
    m_user_data_isSet = !json[QString("UserData")].isNull() && m_user_data_isValid;

    m_video3_d_format_isValid = ::OpenAPI::fromJsonValue(m_video3_d_format, json[QString("Video3DFormat")]);
    m_video3_d_format_isSet = !json[QString("Video3DFormat")].isNull() && m_video3_d_format_isValid;

    m_video_type_isValid = ::OpenAPI::fromJsonValue(m_video_type, json[QString("VideoType")]);
    m_video_type_isSet = !json[QString("VideoType")].isNull() && m_video_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAIBaseItemDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseItemDto::asJsonObject() const {
    QJsonObject obj;
    if (m_air_days.size() > 0) {
        obj.insert(QString("AirDays"), ::OpenAPI::toJsonValue(m_air_days));
    }
    if (m_air_time_isSet) {
        obj.insert(QString("AirTime"), ::OpenAPI::toJsonValue(m_air_time));
    }
    if (m_airs_after_season_number_isSet) {
        obj.insert(QString("AirsAfterSeasonNumber"), ::OpenAPI::toJsonValue(m_airs_after_season_number));
    }
    if (m_airs_before_episode_number_isSet) {
        obj.insert(QString("AirsBeforeEpisodeNumber"), ::OpenAPI::toJsonValue(m_airs_before_episode_number));
    }
    if (m_airs_before_season_number_isSet) {
        obj.insert(QString("AirsBeforeSeasonNumber"), ::OpenAPI::toJsonValue(m_airs_before_season_number));
    }
    if (m_album_isSet) {
        obj.insert(QString("Album"), ::OpenAPI::toJsonValue(m_album));
    }
    if (m_album_artist_isSet) {
        obj.insert(QString("AlbumArtist"), ::OpenAPI::toJsonValue(m_album_artist));
    }
    if (m_album_artists.size() > 0) {
        obj.insert(QString("AlbumArtists"), ::OpenAPI::toJsonValue(m_album_artists));
    }
    if (m_album_count_isSet) {
        obj.insert(QString("AlbumCount"), ::OpenAPI::toJsonValue(m_album_count));
    }
    if (m_album_id_isSet) {
        obj.insert(QString("AlbumId"), ::OpenAPI::toJsonValue(m_album_id));
    }
    if (m_album_primary_image_tag_isSet) {
        obj.insert(QString("AlbumPrimaryImageTag"), ::OpenAPI::toJsonValue(m_album_primary_image_tag));
    }
    if (m_altitude_isSet) {
        obj.insert(QString("Altitude"), ::OpenAPI::toJsonValue(m_altitude));
    }
    if (m_aperture_isSet) {
        obj.insert(QString("Aperture"), ::OpenAPI::toJsonValue(m_aperture));
    }
    if (m_artist_count_isSet) {
        obj.insert(QString("ArtistCount"), ::OpenAPI::toJsonValue(m_artist_count));
    }
    if (m_artist_items.size() > 0) {
        obj.insert(QString("ArtistItems"), ::OpenAPI::toJsonValue(m_artist_items));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("Artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("AspectRatio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_audio.isSet()) {
        obj.insert(QString("Audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_backdrop_image_tags.size() > 0) {
        obj.insert(QString("BackdropImageTags"), ::OpenAPI::toJsonValue(m_backdrop_image_tags));
    }
    if (m_camera_make_isSet) {
        obj.insert(QString("CameraMake"), ::OpenAPI::toJsonValue(m_camera_make));
    }
    if (m_camera_model_isSet) {
        obj.insert(QString("CameraModel"), ::OpenAPI::toJsonValue(m_camera_model));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("CanDelete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_download_isSet) {
        obj.insert(QString("CanDownload"), ::OpenAPI::toJsonValue(m_can_download));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("ChannelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_name_isSet) {
        obj.insert(QString("ChannelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_channel_number_isSet) {
        obj.insert(QString("ChannelNumber"), ::OpenAPI::toJsonValue(m_channel_number));
    }
    if (m_channel_primary_image_tag_isSet) {
        obj.insert(QString("ChannelPrimaryImageTag"), ::OpenAPI::toJsonValue(m_channel_primary_image_tag));
    }
    if (m_channel_type.isSet()) {
        obj.insert(QString("ChannelType"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_chapters.size() > 0) {
        obj.insert(QString("Chapters"), ::OpenAPI::toJsonValue(m_chapters));
    }
    if (m_child_count_isSet) {
        obj.insert(QString("ChildCount"), ::OpenAPI::toJsonValue(m_child_count));
    }
    if (m_collection_type_isSet) {
        obj.insert(QString("CollectionType"), ::OpenAPI::toJsonValue(m_collection_type));
    }
    if (m_community_rating_isSet) {
        obj.insert(QString("CommunityRating"), ::OpenAPI::toJsonValue(m_community_rating));
    }
    if (m_completion_percentage_isSet) {
        obj.insert(QString("CompletionPercentage"), ::OpenAPI::toJsonValue(m_completion_percentage));
    }
    if (m_container_isSet) {
        obj.insert(QString("Container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_critic_rating_isSet) {
        obj.insert(QString("CriticRating"), ::OpenAPI::toJsonValue(m_critic_rating));
    }
    if (m_cumulative_run_time_ticks_isSet) {
        obj.insert(QString("CumulativeRunTimeTicks"), ::OpenAPI::toJsonValue(m_cumulative_run_time_ticks));
    }
    if (m_current_program.isSet()) {
        obj.insert(QString("CurrentProgram"), ::OpenAPI::toJsonValue(m_current_program));
    }
    if (m_custom_rating_isSet) {
        obj.insert(QString("CustomRating"), ::OpenAPI::toJsonValue(m_custom_rating));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_last_media_added_isSet) {
        obj.insert(QString("DateLastMediaAdded"), ::OpenAPI::toJsonValue(m_date_last_media_added));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("DisplayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_display_preferences_id_isSet) {
        obj.insert(QString("DisplayPreferencesId"), ::OpenAPI::toJsonValue(m_display_preferences_id));
    }
    if (m_enable_media_source_display_isSet) {
        obj.insert(QString("EnableMediaSourceDisplay"), ::OpenAPI::toJsonValue(m_enable_media_source_display));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_episode_count_isSet) {
        obj.insert(QString("EpisodeCount"), ::OpenAPI::toJsonValue(m_episode_count));
    }
    if (m_episode_title_isSet) {
        obj.insert(QString("EpisodeTitle"), ::OpenAPI::toJsonValue(m_episode_title));
    }
    if (m_etag_isSet) {
        obj.insert(QString("Etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_exposure_time_isSet) {
        obj.insert(QString("ExposureTime"), ::OpenAPI::toJsonValue(m_exposure_time));
    }
    if (m_external_urls.size() > 0) {
        obj.insert(QString("ExternalUrls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_extra_type_isSet) {
        obj.insert(QString("ExtraType"), ::OpenAPI::toJsonValue(m_extra_type));
    }
    if (m_focal_length_isSet) {
        obj.insert(QString("FocalLength"), ::OpenAPI::toJsonValue(m_focal_length));
    }
    if (m_forced_sort_name_isSet) {
        obj.insert(QString("ForcedSortName"), ::OpenAPI::toJsonValue(m_forced_sort_name));
    }
    if (m_genre_items.size() > 0) {
        obj.insert(QString("GenreItems"), ::OpenAPI::toJsonValue(m_genre_items));
    }
    if (m_genres.size() > 0) {
        obj.insert(QString("Genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_has_subtitles_isSet) {
        obj.insert(QString("HasSubtitles"), ::OpenAPI::toJsonValue(m_has_subtitles));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_blur_hashes.isSet()) {
        obj.insert(QString("ImageBlurHashes"), ::OpenAPI::toJsonValue(m_image_blur_hashes));
    }
    if (m_image_orientation.isSet()) {
        obj.insert(QString("ImageOrientation"), ::OpenAPI::toJsonValue(m_image_orientation));
    }
    if (m_image_tags.size() > 0) {
        obj.insert(QString("ImageTags"), ::OpenAPI::toJsonValue(m_image_tags));
    }
    if (m_index_number_isSet) {
        obj.insert(QString("IndexNumber"), ::OpenAPI::toJsonValue(m_index_number));
    }
    if (m_index_number_end_isSet) {
        obj.insert(QString("IndexNumberEnd"), ::OpenAPI::toJsonValue(m_index_number_end));
    }
    if (m_is_folder_isSet) {
        obj.insert(QString("IsFolder"), ::OpenAPI::toJsonValue(m_is_folder));
    }
    if (m_is_hd_isSet) {
        obj.insert(QString("IsHD"), ::OpenAPI::toJsonValue(m_is_hd));
    }
    if (m_is_kids_isSet) {
        obj.insert(QString("IsKids"), ::OpenAPI::toJsonValue(m_is_kids));
    }
    if (m_is_live_isSet) {
        obj.insert(QString("IsLive"), ::OpenAPI::toJsonValue(m_is_live));
    }
    if (m_is_movie_isSet) {
        obj.insert(QString("IsMovie"), ::OpenAPI::toJsonValue(m_is_movie));
    }
    if (m_is_news_isSet) {
        obj.insert(QString("IsNews"), ::OpenAPI::toJsonValue(m_is_news));
    }
    if (m_is_place_holder_isSet) {
        obj.insert(QString("IsPlaceHolder"), ::OpenAPI::toJsonValue(m_is_place_holder));
    }
    if (m_is_premiere_isSet) {
        obj.insert(QString("IsPremiere"), ::OpenAPI::toJsonValue(m_is_premiere));
    }
    if (m_is_repeat_isSet) {
        obj.insert(QString("IsRepeat"), ::OpenAPI::toJsonValue(m_is_repeat));
    }
    if (m_is_series_isSet) {
        obj.insert(QString("IsSeries"), ::OpenAPI::toJsonValue(m_is_series));
    }
    if (m_is_sports_isSet) {
        obj.insert(QString("IsSports"), ::OpenAPI::toJsonValue(m_is_sports));
    }
    if (m_iso_speed_rating_isSet) {
        obj.insert(QString("IsoSpeedRating"), ::OpenAPI::toJsonValue(m_iso_speed_rating));
    }
    if (m_iso_type.isSet()) {
        obj.insert(QString("IsoType"), ::OpenAPI::toJsonValue(m_iso_type));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("Latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_local_trailer_count_isSet) {
        obj.insert(QString("LocalTrailerCount"), ::OpenAPI::toJsonValue(m_local_trailer_count));
    }
    if (m_location_type.isSet()) {
        obj.insert(QString("LocationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_lock_data_isSet) {
        obj.insert(QString("LockData"), ::OpenAPI::toJsonValue(m_lock_data));
    }
    if (m_locked_fields.size() > 0) {
        obj.insert(QString("LockedFields"), ::OpenAPI::toJsonValue(m_locked_fields));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("Longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_media_source_count_isSet) {
        obj.insert(QString("MediaSourceCount"), ::OpenAPI::toJsonValue(m_media_source_count));
    }
    if (m_media_sources.size() > 0) {
        obj.insert(QString("MediaSources"), ::OpenAPI::toJsonValue(m_media_sources));
    }
    if (m_media_streams.size() > 0) {
        obj.insert(QString("MediaStreams"), ::OpenAPI::toJsonValue(m_media_streams));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("MediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_movie_count_isSet) {
        obj.insert(QString("MovieCount"), ::OpenAPI::toJsonValue(m_movie_count));
    }
    if (m_music_video_count_isSet) {
        obj.insert(QString("MusicVideoCount"), ::OpenAPI::toJsonValue(m_music_video_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_official_rating_isSet) {
        obj.insert(QString("OfficialRating"), ::OpenAPI::toJsonValue(m_official_rating));
    }
    if (m_original_title_isSet) {
        obj.insert(QString("OriginalTitle"), ::OpenAPI::toJsonValue(m_original_title));
    }
    if (m_overview_isSet) {
        obj.insert(QString("Overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_parent_art_image_tag_isSet) {
        obj.insert(QString("ParentArtImageTag"), ::OpenAPI::toJsonValue(m_parent_art_image_tag));
    }
    if (m_parent_art_item_id_isSet) {
        obj.insert(QString("ParentArtItemId"), ::OpenAPI::toJsonValue(m_parent_art_item_id));
    }
    if (m_parent_backdrop_image_tags.size() > 0) {
        obj.insert(QString("ParentBackdropImageTags"), ::OpenAPI::toJsonValue(m_parent_backdrop_image_tags));
    }
    if (m_parent_backdrop_item_id_isSet) {
        obj.insert(QString("ParentBackdropItemId"), ::OpenAPI::toJsonValue(m_parent_backdrop_item_id));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("ParentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_parent_index_number_isSet) {
        obj.insert(QString("ParentIndexNumber"), ::OpenAPI::toJsonValue(m_parent_index_number));
    }
    if (m_parent_logo_image_tag_isSet) {
        obj.insert(QString("ParentLogoImageTag"), ::OpenAPI::toJsonValue(m_parent_logo_image_tag));
    }
    if (m_parent_logo_item_id_isSet) {
        obj.insert(QString("ParentLogoItemId"), ::OpenAPI::toJsonValue(m_parent_logo_item_id));
    }
    if (m_parent_primary_image_item_id_isSet) {
        obj.insert(QString("ParentPrimaryImageItemId"), ::OpenAPI::toJsonValue(m_parent_primary_image_item_id));
    }
    if (m_parent_primary_image_tag_isSet) {
        obj.insert(QString("ParentPrimaryImageTag"), ::OpenAPI::toJsonValue(m_parent_primary_image_tag));
    }
    if (m_parent_thumb_image_tag_isSet) {
        obj.insert(QString("ParentThumbImageTag"), ::OpenAPI::toJsonValue(m_parent_thumb_image_tag));
    }
    if (m_parent_thumb_item_id_isSet) {
        obj.insert(QString("ParentThumbItemId"), ::OpenAPI::toJsonValue(m_parent_thumb_item_id));
    }
    if (m_part_count_isSet) {
        obj.insert(QString("PartCount"), ::OpenAPI::toJsonValue(m_part_count));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_people.size() > 0) {
        obj.insert(QString("People"), ::OpenAPI::toJsonValue(m_people));
    }
    if (m_play_access.isSet()) {
        obj.insert(QString("PlayAccess"), ::OpenAPI::toJsonValue(m_play_access));
    }
    if (m_playlist_item_id_isSet) {
        obj.insert(QString("PlaylistItemId"), ::OpenAPI::toJsonValue(m_playlist_item_id));
    }
    if (m_preferred_metadata_country_code_isSet) {
        obj.insert(QString("PreferredMetadataCountryCode"), ::OpenAPI::toJsonValue(m_preferred_metadata_country_code));
    }
    if (m_preferred_metadata_language_isSet) {
        obj.insert(QString("PreferredMetadataLanguage"), ::OpenAPI::toJsonValue(m_preferred_metadata_language));
    }
    if (m_premiere_date_isSet) {
        obj.insert(QString("PremiereDate"), ::OpenAPI::toJsonValue(m_premiere_date));
    }
    if (m_primary_image_aspect_ratio_isSet) {
        obj.insert(QString("PrimaryImageAspectRatio"), ::OpenAPI::toJsonValue(m_primary_image_aspect_ratio));
    }
    if (m_production_locations.size() > 0) {
        obj.insert(QString("ProductionLocations"), ::OpenAPI::toJsonValue(m_production_locations));
    }
    if (m_production_year_isSet) {
        obj.insert(QString("ProductionYear"), ::OpenAPI::toJsonValue(m_production_year));
    }
    if (m_program_count_isSet) {
        obj.insert(QString("ProgramCount"), ::OpenAPI::toJsonValue(m_program_count));
    }
    if (m_program_id_isSet) {
        obj.insert(QString("ProgramId"), ::OpenAPI::toJsonValue(m_program_id));
    }
    if (m_provider_ids.size() > 0) {
        obj.insert(QString("ProviderIds"), ::OpenAPI::toJsonValue(m_provider_ids));
    }
    if (m_recursive_item_count_isSet) {
        obj.insert(QString("RecursiveItemCount"), ::OpenAPI::toJsonValue(m_recursive_item_count));
    }
    if (m_remote_trailers.size() > 0) {
        obj.insert(QString("RemoteTrailers"), ::OpenAPI::toJsonValue(m_remote_trailers));
    }
    if (m_run_time_ticks_isSet) {
        obj.insert(QString("RunTimeTicks"), ::OpenAPI::toJsonValue(m_run_time_ticks));
    }
    if (m_screenshot_image_tags.size() > 0) {
        obj.insert(QString("ScreenshotImageTags"), ::OpenAPI::toJsonValue(m_screenshot_image_tags));
    }
    if (m_season_id_isSet) {
        obj.insert(QString("SeasonId"), ::OpenAPI::toJsonValue(m_season_id));
    }
    if (m_season_name_isSet) {
        obj.insert(QString("SeasonName"), ::OpenAPI::toJsonValue(m_season_name));
    }
    if (m_series_count_isSet) {
        obj.insert(QString("SeriesCount"), ::OpenAPI::toJsonValue(m_series_count));
    }
    if (m_series_id_isSet) {
        obj.insert(QString("SeriesId"), ::OpenAPI::toJsonValue(m_series_id));
    }
    if (m_series_name_isSet) {
        obj.insert(QString("SeriesName"), ::OpenAPI::toJsonValue(m_series_name));
    }
    if (m_series_primary_image_tag_isSet) {
        obj.insert(QString("SeriesPrimaryImageTag"), ::OpenAPI::toJsonValue(m_series_primary_image_tag));
    }
    if (m_series_studio_isSet) {
        obj.insert(QString("SeriesStudio"), ::OpenAPI::toJsonValue(m_series_studio));
    }
    if (m_series_thumb_image_tag_isSet) {
        obj.insert(QString("SeriesThumbImageTag"), ::OpenAPI::toJsonValue(m_series_thumb_image_tag));
    }
    if (m_series_timer_id_isSet) {
        obj.insert(QString("SeriesTimerId"), ::OpenAPI::toJsonValue(m_series_timer_id));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_shutter_speed_isSet) {
        obj.insert(QString("ShutterSpeed"), ::OpenAPI::toJsonValue(m_shutter_speed));
    }
    if (m_software_isSet) {
        obj.insert(QString("Software"), ::OpenAPI::toJsonValue(m_software));
    }
    if (m_song_count_isSet) {
        obj.insert(QString("SongCount"), ::OpenAPI::toJsonValue(m_song_count));
    }
    if (m_sort_name_isSet) {
        obj.insert(QString("SortName"), ::OpenAPI::toJsonValue(m_sort_name));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_special_feature_count_isSet) {
        obj.insert(QString("SpecialFeatureCount"), ::OpenAPI::toJsonValue(m_special_feature_count));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_studios.size() > 0) {
        obj.insert(QString("Studios"), ::OpenAPI::toJsonValue(m_studios));
    }
    if (m_supports_sync_isSet) {
        obj.insert(QString("SupportsSync"), ::OpenAPI::toJsonValue(m_supports_sync));
    }
    if (m_taglines.size() > 0) {
        obj.insert(QString("Taglines"), ::OpenAPI::toJsonValue(m_taglines));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_timer_id_isSet) {
        obj.insert(QString("TimerId"), ::OpenAPI::toJsonValue(m_timer_id));
    }
    if (m_trailer_count_isSet) {
        obj.insert(QString("TrailerCount"), ::OpenAPI::toJsonValue(m_trailer_count));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_data.isSet()) {
        obj.insert(QString("UserData"), ::OpenAPI::toJsonValue(m_user_data));
    }
    if (m_video3_d_format.isSet()) {
        obj.insert(QString("Video3DFormat"), ::OpenAPI::toJsonValue(m_video3_d_format));
    }
    if (m_video_type.isSet()) {
        obj.insert(QString("VideoType"), ::OpenAPI::toJsonValue(m_video_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList<OAIDayOfWeek> OAIBaseItemDto::getAirDays() const {
    return m_air_days;
}
void OAIBaseItemDto::setAirDays(const QList<OAIDayOfWeek> &air_days) {
    m_air_days = air_days;
    m_air_days_isSet = true;
}

bool OAIBaseItemDto::is_air_days_Set() const{
    return m_air_days_isSet;
}

bool OAIBaseItemDto::is_air_days_Valid() const{
    return m_air_days_isValid;
}

QString OAIBaseItemDto::getAirTime() const {
    return m_air_time;
}
void OAIBaseItemDto::setAirTime(const QString &air_time) {
    m_air_time = air_time;
    m_air_time_isSet = true;
}

bool OAIBaseItemDto::is_air_time_Set() const{
    return m_air_time_isSet;
}

bool OAIBaseItemDto::is_air_time_Valid() const{
    return m_air_time_isValid;
}

qint32 OAIBaseItemDto::getAirsAfterSeasonNumber() const {
    return m_airs_after_season_number;
}
void OAIBaseItemDto::setAirsAfterSeasonNumber(const qint32 &airs_after_season_number) {
    m_airs_after_season_number = airs_after_season_number;
    m_airs_after_season_number_isSet = true;
}

bool OAIBaseItemDto::is_airs_after_season_number_Set() const{
    return m_airs_after_season_number_isSet;
}

bool OAIBaseItemDto::is_airs_after_season_number_Valid() const{
    return m_airs_after_season_number_isValid;
}

qint32 OAIBaseItemDto::getAirsBeforeEpisodeNumber() const {
    return m_airs_before_episode_number;
}
void OAIBaseItemDto::setAirsBeforeEpisodeNumber(const qint32 &airs_before_episode_number) {
    m_airs_before_episode_number = airs_before_episode_number;
    m_airs_before_episode_number_isSet = true;
}

bool OAIBaseItemDto::is_airs_before_episode_number_Set() const{
    return m_airs_before_episode_number_isSet;
}

bool OAIBaseItemDto::is_airs_before_episode_number_Valid() const{
    return m_airs_before_episode_number_isValid;
}

qint32 OAIBaseItemDto::getAirsBeforeSeasonNumber() const {
    return m_airs_before_season_number;
}
void OAIBaseItemDto::setAirsBeforeSeasonNumber(const qint32 &airs_before_season_number) {
    m_airs_before_season_number = airs_before_season_number;
    m_airs_before_season_number_isSet = true;
}

bool OAIBaseItemDto::is_airs_before_season_number_Set() const{
    return m_airs_before_season_number_isSet;
}

bool OAIBaseItemDto::is_airs_before_season_number_Valid() const{
    return m_airs_before_season_number_isValid;
}

QString OAIBaseItemDto::getAlbum() const {
    return m_album;
}
void OAIBaseItemDto::setAlbum(const QString &album) {
    m_album = album;
    m_album_isSet = true;
}

bool OAIBaseItemDto::is_album_Set() const{
    return m_album_isSet;
}

bool OAIBaseItemDto::is_album_Valid() const{
    return m_album_isValid;
}

QString OAIBaseItemDto::getAlbumArtist() const {
    return m_album_artist;
}
void OAIBaseItemDto::setAlbumArtist(const QString &album_artist) {
    m_album_artist = album_artist;
    m_album_artist_isSet = true;
}

bool OAIBaseItemDto::is_album_artist_Set() const{
    return m_album_artist_isSet;
}

bool OAIBaseItemDto::is_album_artist_Valid() const{
    return m_album_artist_isValid;
}

QList<OAINameGuidPair> OAIBaseItemDto::getAlbumArtists() const {
    return m_album_artists;
}
void OAIBaseItemDto::setAlbumArtists(const QList<OAINameGuidPair> &album_artists) {
    m_album_artists = album_artists;
    m_album_artists_isSet = true;
}

bool OAIBaseItemDto::is_album_artists_Set() const{
    return m_album_artists_isSet;
}

bool OAIBaseItemDto::is_album_artists_Valid() const{
    return m_album_artists_isValid;
}

qint32 OAIBaseItemDto::getAlbumCount() const {
    return m_album_count;
}
void OAIBaseItemDto::setAlbumCount(const qint32 &album_count) {
    m_album_count = album_count;
    m_album_count_isSet = true;
}

bool OAIBaseItemDto::is_album_count_Set() const{
    return m_album_count_isSet;
}

bool OAIBaseItemDto::is_album_count_Valid() const{
    return m_album_count_isValid;
}

QString OAIBaseItemDto::getAlbumId() const {
    return m_album_id;
}
void OAIBaseItemDto::setAlbumId(const QString &album_id) {
    m_album_id = album_id;
    m_album_id_isSet = true;
}

bool OAIBaseItemDto::is_album_id_Set() const{
    return m_album_id_isSet;
}

bool OAIBaseItemDto::is_album_id_Valid() const{
    return m_album_id_isValid;
}

QString OAIBaseItemDto::getAlbumPrimaryImageTag() const {
    return m_album_primary_image_tag;
}
void OAIBaseItemDto::setAlbumPrimaryImageTag(const QString &album_primary_image_tag) {
    m_album_primary_image_tag = album_primary_image_tag;
    m_album_primary_image_tag_isSet = true;
}

bool OAIBaseItemDto::is_album_primary_image_tag_Set() const{
    return m_album_primary_image_tag_isSet;
}

bool OAIBaseItemDto::is_album_primary_image_tag_Valid() const{
    return m_album_primary_image_tag_isValid;
}

double OAIBaseItemDto::getAltitude() const {
    return m_altitude;
}
void OAIBaseItemDto::setAltitude(const double &altitude) {
    m_altitude = altitude;
    m_altitude_isSet = true;
}

bool OAIBaseItemDto::is_altitude_Set() const{
    return m_altitude_isSet;
}

bool OAIBaseItemDto::is_altitude_Valid() const{
    return m_altitude_isValid;
}

double OAIBaseItemDto::getAperture() const {
    return m_aperture;
}
void OAIBaseItemDto::setAperture(const double &aperture) {
    m_aperture = aperture;
    m_aperture_isSet = true;
}

bool OAIBaseItemDto::is_aperture_Set() const{
    return m_aperture_isSet;
}

bool OAIBaseItemDto::is_aperture_Valid() const{
    return m_aperture_isValid;
}

qint32 OAIBaseItemDto::getArtistCount() const {
    return m_artist_count;
}
void OAIBaseItemDto::setArtistCount(const qint32 &artist_count) {
    m_artist_count = artist_count;
    m_artist_count_isSet = true;
}

bool OAIBaseItemDto::is_artist_count_Set() const{
    return m_artist_count_isSet;
}

bool OAIBaseItemDto::is_artist_count_Valid() const{
    return m_artist_count_isValid;
}

QList<OAINameGuidPair> OAIBaseItemDto::getArtistItems() const {
    return m_artist_items;
}
void OAIBaseItemDto::setArtistItems(const QList<OAINameGuidPair> &artist_items) {
    m_artist_items = artist_items;
    m_artist_items_isSet = true;
}

bool OAIBaseItemDto::is_artist_items_Set() const{
    return m_artist_items_isSet;
}

bool OAIBaseItemDto::is_artist_items_Valid() const{
    return m_artist_items_isValid;
}

QList<QString> OAIBaseItemDto::getArtists() const {
    return m_artists;
}
void OAIBaseItemDto::setArtists(const QList<QString> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAIBaseItemDto::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAIBaseItemDto::is_artists_Valid() const{
    return m_artists_isValid;
}

QString OAIBaseItemDto::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIBaseItemDto::setAspectRatio(const QString &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIBaseItemDto::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIBaseItemDto::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

OAIProgramAudio OAIBaseItemDto::getAudio() const {
    return m_audio;
}
void OAIBaseItemDto::setAudio(const OAIProgramAudio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIBaseItemDto::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIBaseItemDto::is_audio_Valid() const{
    return m_audio_isValid;
}

QList<QString> OAIBaseItemDto::getBackdropImageTags() const {
    return m_backdrop_image_tags;
}
void OAIBaseItemDto::setBackdropImageTags(const QList<QString> &backdrop_image_tags) {
    m_backdrop_image_tags = backdrop_image_tags;
    m_backdrop_image_tags_isSet = true;
}

bool OAIBaseItemDto::is_backdrop_image_tags_Set() const{
    return m_backdrop_image_tags_isSet;
}

bool OAIBaseItemDto::is_backdrop_image_tags_Valid() const{
    return m_backdrop_image_tags_isValid;
}

QString OAIBaseItemDto::getCameraMake() const {
    return m_camera_make;
}
void OAIBaseItemDto::setCameraMake(const QString &camera_make) {
    m_camera_make = camera_make;
    m_camera_make_isSet = true;
}

bool OAIBaseItemDto::is_camera_make_Set() const{
    return m_camera_make_isSet;
}

bool OAIBaseItemDto::is_camera_make_Valid() const{
    return m_camera_make_isValid;
}

QString OAIBaseItemDto::getCameraModel() const {
    return m_camera_model;
}
void OAIBaseItemDto::setCameraModel(const QString &camera_model) {
    m_camera_model = camera_model;
    m_camera_model_isSet = true;
}

bool OAIBaseItemDto::is_camera_model_Set() const{
    return m_camera_model_isSet;
}

bool OAIBaseItemDto::is_camera_model_Valid() const{
    return m_camera_model_isValid;
}

bool OAIBaseItemDto::isCanDelete() const {
    return m_can_delete;
}
void OAIBaseItemDto::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAIBaseItemDto::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAIBaseItemDto::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAIBaseItemDto::isCanDownload() const {
    return m_can_download;
}
void OAIBaseItemDto::setCanDownload(const bool &can_download) {
    m_can_download = can_download;
    m_can_download_isSet = true;
}

bool OAIBaseItemDto::is_can_download_Set() const{
    return m_can_download_isSet;
}

bool OAIBaseItemDto::is_can_download_Valid() const{
    return m_can_download_isValid;
}

QString OAIBaseItemDto::getChannelId() const {
    return m_channel_id;
}
void OAIBaseItemDto::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIBaseItemDto::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIBaseItemDto::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIBaseItemDto::getChannelName() const {
    return m_channel_name;
}
void OAIBaseItemDto::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIBaseItemDto::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIBaseItemDto::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QString OAIBaseItemDto::getChannelNumber() const {
    return m_channel_number;
}
void OAIBaseItemDto::setChannelNumber(const QString &channel_number) {
    m_channel_number = channel_number;
    m_channel_number_isSet = true;
}

bool OAIBaseItemDto::is_channel_number_Set() const{
    return m_channel_number_isSet;
}

bool OAIBaseItemDto::is_channel_number_Valid() const{
    return m_channel_number_isValid;
}

QString OAIBaseItemDto::getChannelPrimaryImageTag() const {
    return m_channel_primary_image_tag;
}
void OAIBaseItemDto::setChannelPrimaryImageTag(const QString &channel_primary_image_tag) {
    m_channel_primary_image_tag = channel_primary_image_tag;
    m_channel_primary_image_tag_isSet = true;
}

bool OAIBaseItemDto::is_channel_primary_image_tag_Set() const{
    return m_channel_primary_image_tag_isSet;
}

bool OAIBaseItemDto::is_channel_primary_image_tag_Valid() const{
    return m_channel_primary_image_tag_isValid;
}

OAIChannelType OAIBaseItemDto::getChannelType() const {
    return m_channel_type;
}
void OAIBaseItemDto::setChannelType(const OAIChannelType &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAIBaseItemDto::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAIBaseItemDto::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QList<OAIChapterInfo> OAIBaseItemDto::getChapters() const {
    return m_chapters;
}
void OAIBaseItemDto::setChapters(const QList<OAIChapterInfo> &chapters) {
    m_chapters = chapters;
    m_chapters_isSet = true;
}

bool OAIBaseItemDto::is_chapters_Set() const{
    return m_chapters_isSet;
}

bool OAIBaseItemDto::is_chapters_Valid() const{
    return m_chapters_isValid;
}

qint32 OAIBaseItemDto::getChildCount() const {
    return m_child_count;
}
void OAIBaseItemDto::setChildCount(const qint32 &child_count) {
    m_child_count = child_count;
    m_child_count_isSet = true;
}

bool OAIBaseItemDto::is_child_count_Set() const{
    return m_child_count_isSet;
}

bool OAIBaseItemDto::is_child_count_Valid() const{
    return m_child_count_isValid;
}

QString OAIBaseItemDto::getCollectionType() const {
    return m_collection_type;
}
void OAIBaseItemDto::setCollectionType(const QString &collection_type) {
    m_collection_type = collection_type;
    m_collection_type_isSet = true;
}

bool OAIBaseItemDto::is_collection_type_Set() const{
    return m_collection_type_isSet;
}

bool OAIBaseItemDto::is_collection_type_Valid() const{
    return m_collection_type_isValid;
}

float OAIBaseItemDto::getCommunityRating() const {
    return m_community_rating;
}
void OAIBaseItemDto::setCommunityRating(const float &community_rating) {
    m_community_rating = community_rating;
    m_community_rating_isSet = true;
}

bool OAIBaseItemDto::is_community_rating_Set() const{
    return m_community_rating_isSet;
}

bool OAIBaseItemDto::is_community_rating_Valid() const{
    return m_community_rating_isValid;
}

double OAIBaseItemDto::getCompletionPercentage() const {
    return m_completion_percentage;
}
void OAIBaseItemDto::setCompletionPercentage(const double &completion_percentage) {
    m_completion_percentage = completion_percentage;
    m_completion_percentage_isSet = true;
}

bool OAIBaseItemDto::is_completion_percentage_Set() const{
    return m_completion_percentage_isSet;
}

bool OAIBaseItemDto::is_completion_percentage_Valid() const{
    return m_completion_percentage_isValid;
}

QString OAIBaseItemDto::getContainer() const {
    return m_container;
}
void OAIBaseItemDto::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIBaseItemDto::is_container_Set() const{
    return m_container_isSet;
}

bool OAIBaseItemDto::is_container_Valid() const{
    return m_container_isValid;
}

float OAIBaseItemDto::getCriticRating() const {
    return m_critic_rating;
}
void OAIBaseItemDto::setCriticRating(const float &critic_rating) {
    m_critic_rating = critic_rating;
    m_critic_rating_isSet = true;
}

bool OAIBaseItemDto::is_critic_rating_Set() const{
    return m_critic_rating_isSet;
}

bool OAIBaseItemDto::is_critic_rating_Valid() const{
    return m_critic_rating_isValid;
}

qint64 OAIBaseItemDto::getCumulativeRunTimeTicks() const {
    return m_cumulative_run_time_ticks;
}
void OAIBaseItemDto::setCumulativeRunTimeTicks(const qint64 &cumulative_run_time_ticks) {
    m_cumulative_run_time_ticks = cumulative_run_time_ticks;
    m_cumulative_run_time_ticks_isSet = true;
}

bool OAIBaseItemDto::is_cumulative_run_time_ticks_Set() const{
    return m_cumulative_run_time_ticks_isSet;
}

bool OAIBaseItemDto::is_cumulative_run_time_ticks_Valid() const{
    return m_cumulative_run_time_ticks_isValid;
}

OAIBaseItemDto OAIBaseItemDto::getCurrentProgram() const {
    return m_current_program;
}
void OAIBaseItemDto::setCurrentProgram(const OAIBaseItemDto &current_program) {
    m_current_program = current_program;
    m_current_program_isSet = true;
}

bool OAIBaseItemDto::is_current_program_Set() const{
    return m_current_program_isSet;
}

bool OAIBaseItemDto::is_current_program_Valid() const{
    return m_current_program_isValid;
}

QString OAIBaseItemDto::getCustomRating() const {
    return m_custom_rating;
}
void OAIBaseItemDto::setCustomRating(const QString &custom_rating) {
    m_custom_rating = custom_rating;
    m_custom_rating_isSet = true;
}

bool OAIBaseItemDto::is_custom_rating_Set() const{
    return m_custom_rating_isSet;
}

bool OAIBaseItemDto::is_custom_rating_Valid() const{
    return m_custom_rating_isValid;
}

QDateTime OAIBaseItemDto::getDateCreated() const {
    return m_date_created;
}
void OAIBaseItemDto::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIBaseItemDto::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIBaseItemDto::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIBaseItemDto::getDateLastMediaAdded() const {
    return m_date_last_media_added;
}
void OAIBaseItemDto::setDateLastMediaAdded(const QDateTime &date_last_media_added) {
    m_date_last_media_added = date_last_media_added;
    m_date_last_media_added_isSet = true;
}

bool OAIBaseItemDto::is_date_last_media_added_Set() const{
    return m_date_last_media_added_isSet;
}

bool OAIBaseItemDto::is_date_last_media_added_Valid() const{
    return m_date_last_media_added_isValid;
}

QString OAIBaseItemDto::getDisplayOrder() const {
    return m_display_order;
}
void OAIBaseItemDto::setDisplayOrder(const QString &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAIBaseItemDto::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAIBaseItemDto::is_display_order_Valid() const{
    return m_display_order_isValid;
}

QString OAIBaseItemDto::getDisplayPreferencesId() const {
    return m_display_preferences_id;
}
void OAIBaseItemDto::setDisplayPreferencesId(const QString &display_preferences_id) {
    m_display_preferences_id = display_preferences_id;
    m_display_preferences_id_isSet = true;
}

bool OAIBaseItemDto::is_display_preferences_id_Set() const{
    return m_display_preferences_id_isSet;
}

bool OAIBaseItemDto::is_display_preferences_id_Valid() const{
    return m_display_preferences_id_isValid;
}

bool OAIBaseItemDto::isEnableMediaSourceDisplay() const {
    return m_enable_media_source_display;
}
void OAIBaseItemDto::setEnableMediaSourceDisplay(const bool &enable_media_source_display) {
    m_enable_media_source_display = enable_media_source_display;
    m_enable_media_source_display_isSet = true;
}

bool OAIBaseItemDto::is_enable_media_source_display_Set() const{
    return m_enable_media_source_display_isSet;
}

bool OAIBaseItemDto::is_enable_media_source_display_Valid() const{
    return m_enable_media_source_display_isValid;
}

QDateTime OAIBaseItemDto::getEndDate() const {
    return m_end_date;
}
void OAIBaseItemDto::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIBaseItemDto::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIBaseItemDto::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIBaseItemDto::getEpisodeCount() const {
    return m_episode_count;
}
void OAIBaseItemDto::setEpisodeCount(const qint32 &episode_count) {
    m_episode_count = episode_count;
    m_episode_count_isSet = true;
}

bool OAIBaseItemDto::is_episode_count_Set() const{
    return m_episode_count_isSet;
}

bool OAIBaseItemDto::is_episode_count_Valid() const{
    return m_episode_count_isValid;
}

QString OAIBaseItemDto::getEpisodeTitle() const {
    return m_episode_title;
}
void OAIBaseItemDto::setEpisodeTitle(const QString &episode_title) {
    m_episode_title = episode_title;
    m_episode_title_isSet = true;
}

bool OAIBaseItemDto::is_episode_title_Set() const{
    return m_episode_title_isSet;
}

bool OAIBaseItemDto::is_episode_title_Valid() const{
    return m_episode_title_isValid;
}

QString OAIBaseItemDto::getEtag() const {
    return m_etag;
}
void OAIBaseItemDto::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIBaseItemDto::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIBaseItemDto::is_etag_Valid() const{
    return m_etag_isValid;
}

double OAIBaseItemDto::getExposureTime() const {
    return m_exposure_time;
}
void OAIBaseItemDto::setExposureTime(const double &exposure_time) {
    m_exposure_time = exposure_time;
    m_exposure_time_isSet = true;
}

bool OAIBaseItemDto::is_exposure_time_Set() const{
    return m_exposure_time_isSet;
}

bool OAIBaseItemDto::is_exposure_time_Valid() const{
    return m_exposure_time_isValid;
}

QList<OAIExternalUrl> OAIBaseItemDto::getExternalUrls() const {
    return m_external_urls;
}
void OAIBaseItemDto::setExternalUrls(const QList<OAIExternalUrl> &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAIBaseItemDto::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAIBaseItemDto::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

QString OAIBaseItemDto::getExtraType() const {
    return m_extra_type;
}
void OAIBaseItemDto::setExtraType(const QString &extra_type) {
    m_extra_type = extra_type;
    m_extra_type_isSet = true;
}

bool OAIBaseItemDto::is_extra_type_Set() const{
    return m_extra_type_isSet;
}

bool OAIBaseItemDto::is_extra_type_Valid() const{
    return m_extra_type_isValid;
}

double OAIBaseItemDto::getFocalLength() const {
    return m_focal_length;
}
void OAIBaseItemDto::setFocalLength(const double &focal_length) {
    m_focal_length = focal_length;
    m_focal_length_isSet = true;
}

bool OAIBaseItemDto::is_focal_length_Set() const{
    return m_focal_length_isSet;
}

bool OAIBaseItemDto::is_focal_length_Valid() const{
    return m_focal_length_isValid;
}

QString OAIBaseItemDto::getForcedSortName() const {
    return m_forced_sort_name;
}
void OAIBaseItemDto::setForcedSortName(const QString &forced_sort_name) {
    m_forced_sort_name = forced_sort_name;
    m_forced_sort_name_isSet = true;
}

bool OAIBaseItemDto::is_forced_sort_name_Set() const{
    return m_forced_sort_name_isSet;
}

bool OAIBaseItemDto::is_forced_sort_name_Valid() const{
    return m_forced_sort_name_isValid;
}

QList<OAINameGuidPair> OAIBaseItemDto::getGenreItems() const {
    return m_genre_items;
}
void OAIBaseItemDto::setGenreItems(const QList<OAINameGuidPair> &genre_items) {
    m_genre_items = genre_items;
    m_genre_items_isSet = true;
}

bool OAIBaseItemDto::is_genre_items_Set() const{
    return m_genre_items_isSet;
}

bool OAIBaseItemDto::is_genre_items_Valid() const{
    return m_genre_items_isValid;
}

QList<QString> OAIBaseItemDto::getGenres() const {
    return m_genres;
}
void OAIBaseItemDto::setGenres(const QList<QString> &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAIBaseItemDto::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAIBaseItemDto::is_genres_Valid() const{
    return m_genres_isValid;
}

bool OAIBaseItemDto::isHasSubtitles() const {
    return m_has_subtitles;
}
void OAIBaseItemDto::setHasSubtitles(const bool &has_subtitles) {
    m_has_subtitles = has_subtitles;
    m_has_subtitles_isSet = true;
}

bool OAIBaseItemDto::is_has_subtitles_Set() const{
    return m_has_subtitles_isSet;
}

bool OAIBaseItemDto::is_has_subtitles_Valid() const{
    return m_has_subtitles_isValid;
}

qint32 OAIBaseItemDto::getHeight() const {
    return m_height;
}
void OAIBaseItemDto::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIBaseItemDto::is_height_Set() const{
    return m_height_isSet;
}

bool OAIBaseItemDto::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIBaseItemDto::getId() const {
    return m_id;
}
void OAIBaseItemDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBaseItemDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBaseItemDto::is_id_Valid() const{
    return m_id_isValid;
}

OAIBaseItemDto_ImageBlurHashes OAIBaseItemDto::getImageBlurHashes() const {
    return m_image_blur_hashes;
}
void OAIBaseItemDto::setImageBlurHashes(const OAIBaseItemDto_ImageBlurHashes &image_blur_hashes) {
    m_image_blur_hashes = image_blur_hashes;
    m_image_blur_hashes_isSet = true;
}

bool OAIBaseItemDto::is_image_blur_hashes_Set() const{
    return m_image_blur_hashes_isSet;
}

bool OAIBaseItemDto::is_image_blur_hashes_Valid() const{
    return m_image_blur_hashes_isValid;
}

OAIImageOrientation OAIBaseItemDto::getImageOrientation() const {
    return m_image_orientation;
}
void OAIBaseItemDto::setImageOrientation(const OAIImageOrientation &image_orientation) {
    m_image_orientation = image_orientation;
    m_image_orientation_isSet = true;
}

bool OAIBaseItemDto::is_image_orientation_Set() const{
    return m_image_orientation_isSet;
}

bool OAIBaseItemDto::is_image_orientation_Valid() const{
    return m_image_orientation_isValid;
}

QMap<QString, QString> OAIBaseItemDto::getImageTags() const {
    return m_image_tags;
}
void OAIBaseItemDto::setImageTags(const QMap<QString, QString> &image_tags) {
    m_image_tags = image_tags;
    m_image_tags_isSet = true;
}

bool OAIBaseItemDto::is_image_tags_Set() const{
    return m_image_tags_isSet;
}

bool OAIBaseItemDto::is_image_tags_Valid() const{
    return m_image_tags_isValid;
}

qint32 OAIBaseItemDto::getIndexNumber() const {
    return m_index_number;
}
void OAIBaseItemDto::setIndexNumber(const qint32 &index_number) {
    m_index_number = index_number;
    m_index_number_isSet = true;
}

bool OAIBaseItemDto::is_index_number_Set() const{
    return m_index_number_isSet;
}

bool OAIBaseItemDto::is_index_number_Valid() const{
    return m_index_number_isValid;
}

qint32 OAIBaseItemDto::getIndexNumberEnd() const {
    return m_index_number_end;
}
void OAIBaseItemDto::setIndexNumberEnd(const qint32 &index_number_end) {
    m_index_number_end = index_number_end;
    m_index_number_end_isSet = true;
}

bool OAIBaseItemDto::is_index_number_end_Set() const{
    return m_index_number_end_isSet;
}

bool OAIBaseItemDto::is_index_number_end_Valid() const{
    return m_index_number_end_isValid;
}

bool OAIBaseItemDto::isIsFolder() const {
    return m_is_folder;
}
void OAIBaseItemDto::setIsFolder(const bool &is_folder) {
    m_is_folder = is_folder;
    m_is_folder_isSet = true;
}

bool OAIBaseItemDto::is_is_folder_Set() const{
    return m_is_folder_isSet;
}

bool OAIBaseItemDto::is_is_folder_Valid() const{
    return m_is_folder_isValid;
}

bool OAIBaseItemDto::isIsHd() const {
    return m_is_hd;
}
void OAIBaseItemDto::setIsHd(const bool &is_hd) {
    m_is_hd = is_hd;
    m_is_hd_isSet = true;
}

bool OAIBaseItemDto::is_is_hd_Set() const{
    return m_is_hd_isSet;
}

bool OAIBaseItemDto::is_is_hd_Valid() const{
    return m_is_hd_isValid;
}

bool OAIBaseItemDto::isIsKids() const {
    return m_is_kids;
}
void OAIBaseItemDto::setIsKids(const bool &is_kids) {
    m_is_kids = is_kids;
    m_is_kids_isSet = true;
}

bool OAIBaseItemDto::is_is_kids_Set() const{
    return m_is_kids_isSet;
}

bool OAIBaseItemDto::is_is_kids_Valid() const{
    return m_is_kids_isValid;
}

bool OAIBaseItemDto::isIsLive() const {
    return m_is_live;
}
void OAIBaseItemDto::setIsLive(const bool &is_live) {
    m_is_live = is_live;
    m_is_live_isSet = true;
}

bool OAIBaseItemDto::is_is_live_Set() const{
    return m_is_live_isSet;
}

bool OAIBaseItemDto::is_is_live_Valid() const{
    return m_is_live_isValid;
}

bool OAIBaseItemDto::isIsMovie() const {
    return m_is_movie;
}
void OAIBaseItemDto::setIsMovie(const bool &is_movie) {
    m_is_movie = is_movie;
    m_is_movie_isSet = true;
}

bool OAIBaseItemDto::is_is_movie_Set() const{
    return m_is_movie_isSet;
}

bool OAIBaseItemDto::is_is_movie_Valid() const{
    return m_is_movie_isValid;
}

bool OAIBaseItemDto::isIsNews() const {
    return m_is_news;
}
void OAIBaseItemDto::setIsNews(const bool &is_news) {
    m_is_news = is_news;
    m_is_news_isSet = true;
}

bool OAIBaseItemDto::is_is_news_Set() const{
    return m_is_news_isSet;
}

bool OAIBaseItemDto::is_is_news_Valid() const{
    return m_is_news_isValid;
}

bool OAIBaseItemDto::isIsPlaceHolder() const {
    return m_is_place_holder;
}
void OAIBaseItemDto::setIsPlaceHolder(const bool &is_place_holder) {
    m_is_place_holder = is_place_holder;
    m_is_place_holder_isSet = true;
}

bool OAIBaseItemDto::is_is_place_holder_Set() const{
    return m_is_place_holder_isSet;
}

bool OAIBaseItemDto::is_is_place_holder_Valid() const{
    return m_is_place_holder_isValid;
}

bool OAIBaseItemDto::isIsPremiere() const {
    return m_is_premiere;
}
void OAIBaseItemDto::setIsPremiere(const bool &is_premiere) {
    m_is_premiere = is_premiere;
    m_is_premiere_isSet = true;
}

bool OAIBaseItemDto::is_is_premiere_Set() const{
    return m_is_premiere_isSet;
}

bool OAIBaseItemDto::is_is_premiere_Valid() const{
    return m_is_premiere_isValid;
}

bool OAIBaseItemDto::isIsRepeat() const {
    return m_is_repeat;
}
void OAIBaseItemDto::setIsRepeat(const bool &is_repeat) {
    m_is_repeat = is_repeat;
    m_is_repeat_isSet = true;
}

bool OAIBaseItemDto::is_is_repeat_Set() const{
    return m_is_repeat_isSet;
}

bool OAIBaseItemDto::is_is_repeat_Valid() const{
    return m_is_repeat_isValid;
}

bool OAIBaseItemDto::isIsSeries() const {
    return m_is_series;
}
void OAIBaseItemDto::setIsSeries(const bool &is_series) {
    m_is_series = is_series;
    m_is_series_isSet = true;
}

bool OAIBaseItemDto::is_is_series_Set() const{
    return m_is_series_isSet;
}

bool OAIBaseItemDto::is_is_series_Valid() const{
    return m_is_series_isValid;
}

bool OAIBaseItemDto::isIsSports() const {
    return m_is_sports;
}
void OAIBaseItemDto::setIsSports(const bool &is_sports) {
    m_is_sports = is_sports;
    m_is_sports_isSet = true;
}

bool OAIBaseItemDto::is_is_sports_Set() const{
    return m_is_sports_isSet;
}

bool OAIBaseItemDto::is_is_sports_Valid() const{
    return m_is_sports_isValid;
}

qint32 OAIBaseItemDto::getIsoSpeedRating() const {
    return m_iso_speed_rating;
}
void OAIBaseItemDto::setIsoSpeedRating(const qint32 &iso_speed_rating) {
    m_iso_speed_rating = iso_speed_rating;
    m_iso_speed_rating_isSet = true;
}

bool OAIBaseItemDto::is_iso_speed_rating_Set() const{
    return m_iso_speed_rating_isSet;
}

bool OAIBaseItemDto::is_iso_speed_rating_Valid() const{
    return m_iso_speed_rating_isValid;
}

OAIIsoType OAIBaseItemDto::getIsoType() const {
    return m_iso_type;
}
void OAIBaseItemDto::setIsoType(const OAIIsoType &iso_type) {
    m_iso_type = iso_type;
    m_iso_type_isSet = true;
}

bool OAIBaseItemDto::is_iso_type_Set() const{
    return m_iso_type_isSet;
}

bool OAIBaseItemDto::is_iso_type_Valid() const{
    return m_iso_type_isValid;
}

double OAIBaseItemDto::getLatitude() const {
    return m_latitude;
}
void OAIBaseItemDto::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIBaseItemDto::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIBaseItemDto::is_latitude_Valid() const{
    return m_latitude_isValid;
}

qint32 OAIBaseItemDto::getLocalTrailerCount() const {
    return m_local_trailer_count;
}
void OAIBaseItemDto::setLocalTrailerCount(const qint32 &local_trailer_count) {
    m_local_trailer_count = local_trailer_count;
    m_local_trailer_count_isSet = true;
}

bool OAIBaseItemDto::is_local_trailer_count_Set() const{
    return m_local_trailer_count_isSet;
}

bool OAIBaseItemDto::is_local_trailer_count_Valid() const{
    return m_local_trailer_count_isValid;
}

OAILocationType OAIBaseItemDto::getLocationType() const {
    return m_location_type;
}
void OAIBaseItemDto::setLocationType(const OAILocationType &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIBaseItemDto::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIBaseItemDto::is_location_type_Valid() const{
    return m_location_type_isValid;
}

bool OAIBaseItemDto::isLockData() const {
    return m_lock_data;
}
void OAIBaseItemDto::setLockData(const bool &lock_data) {
    m_lock_data = lock_data;
    m_lock_data_isSet = true;
}

bool OAIBaseItemDto::is_lock_data_Set() const{
    return m_lock_data_isSet;
}

bool OAIBaseItemDto::is_lock_data_Valid() const{
    return m_lock_data_isValid;
}

QList<OAIMetadataField> OAIBaseItemDto::getLockedFields() const {
    return m_locked_fields;
}
void OAIBaseItemDto::setLockedFields(const QList<OAIMetadataField> &locked_fields) {
    m_locked_fields = locked_fields;
    m_locked_fields_isSet = true;
}

bool OAIBaseItemDto::is_locked_fields_Set() const{
    return m_locked_fields_isSet;
}

bool OAIBaseItemDto::is_locked_fields_Valid() const{
    return m_locked_fields_isValid;
}

double OAIBaseItemDto::getLongitude() const {
    return m_longitude;
}
void OAIBaseItemDto::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIBaseItemDto::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIBaseItemDto::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAIBaseItemDto::getMediaSourceCount() const {
    return m_media_source_count;
}
void OAIBaseItemDto::setMediaSourceCount(const qint32 &media_source_count) {
    m_media_source_count = media_source_count;
    m_media_source_count_isSet = true;
}

bool OAIBaseItemDto::is_media_source_count_Set() const{
    return m_media_source_count_isSet;
}

bool OAIBaseItemDto::is_media_source_count_Valid() const{
    return m_media_source_count_isValid;
}

QList<OAIMediaSourceInfo> OAIBaseItemDto::getMediaSources() const {
    return m_media_sources;
}
void OAIBaseItemDto::setMediaSources(const QList<OAIMediaSourceInfo> &media_sources) {
    m_media_sources = media_sources;
    m_media_sources_isSet = true;
}

bool OAIBaseItemDto::is_media_sources_Set() const{
    return m_media_sources_isSet;
}

bool OAIBaseItemDto::is_media_sources_Valid() const{
    return m_media_sources_isValid;
}

QList<OAIMediaStream> OAIBaseItemDto::getMediaStreams() const {
    return m_media_streams;
}
void OAIBaseItemDto::setMediaStreams(const QList<OAIMediaStream> &media_streams) {
    m_media_streams = media_streams;
    m_media_streams_isSet = true;
}

bool OAIBaseItemDto::is_media_streams_Set() const{
    return m_media_streams_isSet;
}

bool OAIBaseItemDto::is_media_streams_Valid() const{
    return m_media_streams_isValid;
}

QString OAIBaseItemDto::getMediaType() const {
    return m_media_type;
}
void OAIBaseItemDto::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIBaseItemDto::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIBaseItemDto::is_media_type_Valid() const{
    return m_media_type_isValid;
}

qint32 OAIBaseItemDto::getMovieCount() const {
    return m_movie_count;
}
void OAIBaseItemDto::setMovieCount(const qint32 &movie_count) {
    m_movie_count = movie_count;
    m_movie_count_isSet = true;
}

bool OAIBaseItemDto::is_movie_count_Set() const{
    return m_movie_count_isSet;
}

bool OAIBaseItemDto::is_movie_count_Valid() const{
    return m_movie_count_isValid;
}

qint32 OAIBaseItemDto::getMusicVideoCount() const {
    return m_music_video_count;
}
void OAIBaseItemDto::setMusicVideoCount(const qint32 &music_video_count) {
    m_music_video_count = music_video_count;
    m_music_video_count_isSet = true;
}

bool OAIBaseItemDto::is_music_video_count_Set() const{
    return m_music_video_count_isSet;
}

bool OAIBaseItemDto::is_music_video_count_Valid() const{
    return m_music_video_count_isValid;
}

QString OAIBaseItemDto::getName() const {
    return m_name;
}
void OAIBaseItemDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBaseItemDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBaseItemDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBaseItemDto::getNumber() const {
    return m_number;
}
void OAIBaseItemDto::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIBaseItemDto::is_number_Set() const{
    return m_number_isSet;
}

bool OAIBaseItemDto::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIBaseItemDto::getOfficialRating() const {
    return m_official_rating;
}
void OAIBaseItemDto::setOfficialRating(const QString &official_rating) {
    m_official_rating = official_rating;
    m_official_rating_isSet = true;
}

bool OAIBaseItemDto::is_official_rating_Set() const{
    return m_official_rating_isSet;
}

bool OAIBaseItemDto::is_official_rating_Valid() const{
    return m_official_rating_isValid;
}

QString OAIBaseItemDto::getOriginalTitle() const {
    return m_original_title;
}
void OAIBaseItemDto::setOriginalTitle(const QString &original_title) {
    m_original_title = original_title;
    m_original_title_isSet = true;
}

bool OAIBaseItemDto::is_original_title_Set() const{
    return m_original_title_isSet;
}

bool OAIBaseItemDto::is_original_title_Valid() const{
    return m_original_title_isValid;
}

QString OAIBaseItemDto::getOverview() const {
    return m_overview;
}
void OAIBaseItemDto::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIBaseItemDto::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIBaseItemDto::is_overview_Valid() const{
    return m_overview_isValid;
}

QString OAIBaseItemDto::getParentArtImageTag() const {
    return m_parent_art_image_tag;
}
void OAIBaseItemDto::setParentArtImageTag(const QString &parent_art_image_tag) {
    m_parent_art_image_tag = parent_art_image_tag;
    m_parent_art_image_tag_isSet = true;
}

bool OAIBaseItemDto::is_parent_art_image_tag_Set() const{
    return m_parent_art_image_tag_isSet;
}

bool OAIBaseItemDto::is_parent_art_image_tag_Valid() const{
    return m_parent_art_image_tag_isValid;
}

QString OAIBaseItemDto::getParentArtItemId() const {
    return m_parent_art_item_id;
}
void OAIBaseItemDto::setParentArtItemId(const QString &parent_art_item_id) {
    m_parent_art_item_id = parent_art_item_id;
    m_parent_art_item_id_isSet = true;
}

bool OAIBaseItemDto::is_parent_art_item_id_Set() const{
    return m_parent_art_item_id_isSet;
}

bool OAIBaseItemDto::is_parent_art_item_id_Valid() const{
    return m_parent_art_item_id_isValid;
}

QList<QString> OAIBaseItemDto::getParentBackdropImageTags() const {
    return m_parent_backdrop_image_tags;
}
void OAIBaseItemDto::setParentBackdropImageTags(const QList<QString> &parent_backdrop_image_tags) {
    m_parent_backdrop_image_tags = parent_backdrop_image_tags;
    m_parent_backdrop_image_tags_isSet = true;
}

bool OAIBaseItemDto::is_parent_backdrop_image_tags_Set() const{
    return m_parent_backdrop_image_tags_isSet;
}

bool OAIBaseItemDto::is_parent_backdrop_image_tags_Valid() const{
    return m_parent_backdrop_image_tags_isValid;
}

QString OAIBaseItemDto::getParentBackdropItemId() const {
    return m_parent_backdrop_item_id;
}
void OAIBaseItemDto::setParentBackdropItemId(const QString &parent_backdrop_item_id) {
    m_parent_backdrop_item_id = parent_backdrop_item_id;
    m_parent_backdrop_item_id_isSet = true;
}

bool OAIBaseItemDto::is_parent_backdrop_item_id_Set() const{
    return m_parent_backdrop_item_id_isSet;
}

bool OAIBaseItemDto::is_parent_backdrop_item_id_Valid() const{
    return m_parent_backdrop_item_id_isValid;
}

QString OAIBaseItemDto::getParentId() const {
    return m_parent_id;
}
void OAIBaseItemDto::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIBaseItemDto::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIBaseItemDto::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

qint32 OAIBaseItemDto::getParentIndexNumber() const {
    return m_parent_index_number;
}
void OAIBaseItemDto::setParentIndexNumber(const qint32 &parent_index_number) {
    m_parent_index_number = parent_index_number;
    m_parent_index_number_isSet = true;
}

bool OAIBaseItemDto::is_parent_index_number_Set() const{
    return m_parent_index_number_isSet;
}

bool OAIBaseItemDto::is_parent_index_number_Valid() const{
    return m_parent_index_number_isValid;
}

QString OAIBaseItemDto::getParentLogoImageTag() const {
    return m_parent_logo_image_tag;
}
void OAIBaseItemDto::setParentLogoImageTag(const QString &parent_logo_image_tag) {
    m_parent_logo_image_tag = parent_logo_image_tag;
    m_parent_logo_image_tag_isSet = true;
}

bool OAIBaseItemDto::is_parent_logo_image_tag_Set() const{
    return m_parent_logo_image_tag_isSet;
}

bool OAIBaseItemDto::is_parent_logo_image_tag_Valid() const{
    return m_parent_logo_image_tag_isValid;
}

QString OAIBaseItemDto::getParentLogoItemId() const {
    return m_parent_logo_item_id;
}
void OAIBaseItemDto::setParentLogoItemId(const QString &parent_logo_item_id) {
    m_parent_logo_item_id = parent_logo_item_id;
    m_parent_logo_item_id_isSet = true;
}

bool OAIBaseItemDto::is_parent_logo_item_id_Set() const{
    return m_parent_logo_item_id_isSet;
}

bool OAIBaseItemDto::is_parent_logo_item_id_Valid() const{
    return m_parent_logo_item_id_isValid;
}

QString OAIBaseItemDto::getParentPrimaryImageItemId() const {
    return m_parent_primary_image_item_id;
}
void OAIBaseItemDto::setParentPrimaryImageItemId(const QString &parent_primary_image_item_id) {
    m_parent_primary_image_item_id = parent_primary_image_item_id;
    m_parent_primary_image_item_id_isSet = true;
}

bool OAIBaseItemDto::is_parent_primary_image_item_id_Set() const{
    return m_parent_primary_image_item_id_isSet;
}

bool OAIBaseItemDto::is_parent_primary_image_item_id_Valid() const{
    return m_parent_primary_image_item_id_isValid;
}

QString OAIBaseItemDto::getParentPrimaryImageTag() const {
    return m_parent_primary_image_tag;
}
void OAIBaseItemDto::setParentPrimaryImageTag(const QString &parent_primary_image_tag) {
    m_parent_primary_image_tag = parent_primary_image_tag;
    m_parent_primary_image_tag_isSet = true;
}

bool OAIBaseItemDto::is_parent_primary_image_tag_Set() const{
    return m_parent_primary_image_tag_isSet;
}

bool OAIBaseItemDto::is_parent_primary_image_tag_Valid() const{
    return m_parent_primary_image_tag_isValid;
}

QString OAIBaseItemDto::getParentThumbImageTag() const {
    return m_parent_thumb_image_tag;
}
void OAIBaseItemDto::setParentThumbImageTag(const QString &parent_thumb_image_tag) {
    m_parent_thumb_image_tag = parent_thumb_image_tag;
    m_parent_thumb_image_tag_isSet = true;
}

bool OAIBaseItemDto::is_parent_thumb_image_tag_Set() const{
    return m_parent_thumb_image_tag_isSet;
}

bool OAIBaseItemDto::is_parent_thumb_image_tag_Valid() const{
    return m_parent_thumb_image_tag_isValid;
}

QString OAIBaseItemDto::getParentThumbItemId() const {
    return m_parent_thumb_item_id;
}
void OAIBaseItemDto::setParentThumbItemId(const QString &parent_thumb_item_id) {
    m_parent_thumb_item_id = parent_thumb_item_id;
    m_parent_thumb_item_id_isSet = true;
}

bool OAIBaseItemDto::is_parent_thumb_item_id_Set() const{
    return m_parent_thumb_item_id_isSet;
}

bool OAIBaseItemDto::is_parent_thumb_item_id_Valid() const{
    return m_parent_thumb_item_id_isValid;
}

qint32 OAIBaseItemDto::getPartCount() const {
    return m_part_count;
}
void OAIBaseItemDto::setPartCount(const qint32 &part_count) {
    m_part_count = part_count;
    m_part_count_isSet = true;
}

bool OAIBaseItemDto::is_part_count_Set() const{
    return m_part_count_isSet;
}

bool OAIBaseItemDto::is_part_count_Valid() const{
    return m_part_count_isValid;
}

QString OAIBaseItemDto::getPath() const {
    return m_path;
}
void OAIBaseItemDto::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIBaseItemDto::is_path_Set() const{
    return m_path_isSet;
}

bool OAIBaseItemDto::is_path_Valid() const{
    return m_path_isValid;
}

QList<OAIBaseItemPerson> OAIBaseItemDto::getPeople() const {
    return m_people;
}
void OAIBaseItemDto::setPeople(const QList<OAIBaseItemPerson> &people) {
    m_people = people;
    m_people_isSet = true;
}

bool OAIBaseItemDto::is_people_Set() const{
    return m_people_isSet;
}

bool OAIBaseItemDto::is_people_Valid() const{
    return m_people_isValid;
}

OAIPlayAccess OAIBaseItemDto::getPlayAccess() const {
    return m_play_access;
}
void OAIBaseItemDto::setPlayAccess(const OAIPlayAccess &play_access) {
    m_play_access = play_access;
    m_play_access_isSet = true;
}

bool OAIBaseItemDto::is_play_access_Set() const{
    return m_play_access_isSet;
}

bool OAIBaseItemDto::is_play_access_Valid() const{
    return m_play_access_isValid;
}

QString OAIBaseItemDto::getPlaylistItemId() const {
    return m_playlist_item_id;
}
void OAIBaseItemDto::setPlaylistItemId(const QString &playlist_item_id) {
    m_playlist_item_id = playlist_item_id;
    m_playlist_item_id_isSet = true;
}

bool OAIBaseItemDto::is_playlist_item_id_Set() const{
    return m_playlist_item_id_isSet;
}

bool OAIBaseItemDto::is_playlist_item_id_Valid() const{
    return m_playlist_item_id_isValid;
}

QString OAIBaseItemDto::getPreferredMetadataCountryCode() const {
    return m_preferred_metadata_country_code;
}
void OAIBaseItemDto::setPreferredMetadataCountryCode(const QString &preferred_metadata_country_code) {
    m_preferred_metadata_country_code = preferred_metadata_country_code;
    m_preferred_metadata_country_code_isSet = true;
}

bool OAIBaseItemDto::is_preferred_metadata_country_code_Set() const{
    return m_preferred_metadata_country_code_isSet;
}

bool OAIBaseItemDto::is_preferred_metadata_country_code_Valid() const{
    return m_preferred_metadata_country_code_isValid;
}

QString OAIBaseItemDto::getPreferredMetadataLanguage() const {
    return m_preferred_metadata_language;
}
void OAIBaseItemDto::setPreferredMetadataLanguage(const QString &preferred_metadata_language) {
    m_preferred_metadata_language = preferred_metadata_language;
    m_preferred_metadata_language_isSet = true;
}

bool OAIBaseItemDto::is_preferred_metadata_language_Set() const{
    return m_preferred_metadata_language_isSet;
}

bool OAIBaseItemDto::is_preferred_metadata_language_Valid() const{
    return m_preferred_metadata_language_isValid;
}

QDateTime OAIBaseItemDto::getPremiereDate() const {
    return m_premiere_date;
}
void OAIBaseItemDto::setPremiereDate(const QDateTime &premiere_date) {
    m_premiere_date = premiere_date;
    m_premiere_date_isSet = true;
}

bool OAIBaseItemDto::is_premiere_date_Set() const{
    return m_premiere_date_isSet;
}

bool OAIBaseItemDto::is_premiere_date_Valid() const{
    return m_premiere_date_isValid;
}

double OAIBaseItemDto::getPrimaryImageAspectRatio() const {
    return m_primary_image_aspect_ratio;
}
void OAIBaseItemDto::setPrimaryImageAspectRatio(const double &primary_image_aspect_ratio) {
    m_primary_image_aspect_ratio = primary_image_aspect_ratio;
    m_primary_image_aspect_ratio_isSet = true;
}

bool OAIBaseItemDto::is_primary_image_aspect_ratio_Set() const{
    return m_primary_image_aspect_ratio_isSet;
}

bool OAIBaseItemDto::is_primary_image_aspect_ratio_Valid() const{
    return m_primary_image_aspect_ratio_isValid;
}

QList<QString> OAIBaseItemDto::getProductionLocations() const {
    return m_production_locations;
}
void OAIBaseItemDto::setProductionLocations(const QList<QString> &production_locations) {
    m_production_locations = production_locations;
    m_production_locations_isSet = true;
}

bool OAIBaseItemDto::is_production_locations_Set() const{
    return m_production_locations_isSet;
}

bool OAIBaseItemDto::is_production_locations_Valid() const{
    return m_production_locations_isValid;
}

qint32 OAIBaseItemDto::getProductionYear() const {
    return m_production_year;
}
void OAIBaseItemDto::setProductionYear(const qint32 &production_year) {
    m_production_year = production_year;
    m_production_year_isSet = true;
}

bool OAIBaseItemDto::is_production_year_Set() const{
    return m_production_year_isSet;
}

bool OAIBaseItemDto::is_production_year_Valid() const{
    return m_production_year_isValid;
}

qint32 OAIBaseItemDto::getProgramCount() const {
    return m_program_count;
}
void OAIBaseItemDto::setProgramCount(const qint32 &program_count) {
    m_program_count = program_count;
    m_program_count_isSet = true;
}

bool OAIBaseItemDto::is_program_count_Set() const{
    return m_program_count_isSet;
}

bool OAIBaseItemDto::is_program_count_Valid() const{
    return m_program_count_isValid;
}

QString OAIBaseItemDto::getProgramId() const {
    return m_program_id;
}
void OAIBaseItemDto::setProgramId(const QString &program_id) {
    m_program_id = program_id;
    m_program_id_isSet = true;
}

bool OAIBaseItemDto::is_program_id_Set() const{
    return m_program_id_isSet;
}

bool OAIBaseItemDto::is_program_id_Valid() const{
    return m_program_id_isValid;
}

QMap<QString, QString> OAIBaseItemDto::getProviderIds() const {
    return m_provider_ids;
}
void OAIBaseItemDto::setProviderIds(const QMap<QString, QString> &provider_ids) {
    m_provider_ids = provider_ids;
    m_provider_ids_isSet = true;
}

bool OAIBaseItemDto::is_provider_ids_Set() const{
    return m_provider_ids_isSet;
}

bool OAIBaseItemDto::is_provider_ids_Valid() const{
    return m_provider_ids_isValid;
}

qint32 OAIBaseItemDto::getRecursiveItemCount() const {
    return m_recursive_item_count;
}
void OAIBaseItemDto::setRecursiveItemCount(const qint32 &recursive_item_count) {
    m_recursive_item_count = recursive_item_count;
    m_recursive_item_count_isSet = true;
}

bool OAIBaseItemDto::is_recursive_item_count_Set() const{
    return m_recursive_item_count_isSet;
}

bool OAIBaseItemDto::is_recursive_item_count_Valid() const{
    return m_recursive_item_count_isValid;
}

QList<OAIMediaUrl> OAIBaseItemDto::getRemoteTrailers() const {
    return m_remote_trailers;
}
void OAIBaseItemDto::setRemoteTrailers(const QList<OAIMediaUrl> &remote_trailers) {
    m_remote_trailers = remote_trailers;
    m_remote_trailers_isSet = true;
}

bool OAIBaseItemDto::is_remote_trailers_Set() const{
    return m_remote_trailers_isSet;
}

bool OAIBaseItemDto::is_remote_trailers_Valid() const{
    return m_remote_trailers_isValid;
}

qint64 OAIBaseItemDto::getRunTimeTicks() const {
    return m_run_time_ticks;
}
void OAIBaseItemDto::setRunTimeTicks(const qint64 &run_time_ticks) {
    m_run_time_ticks = run_time_ticks;
    m_run_time_ticks_isSet = true;
}

bool OAIBaseItemDto::is_run_time_ticks_Set() const{
    return m_run_time_ticks_isSet;
}

bool OAIBaseItemDto::is_run_time_ticks_Valid() const{
    return m_run_time_ticks_isValid;
}

QList<QString> OAIBaseItemDto::getScreenshotImageTags() const {
    return m_screenshot_image_tags;
}
void OAIBaseItemDto::setScreenshotImageTags(const QList<QString> &screenshot_image_tags) {
    m_screenshot_image_tags = screenshot_image_tags;
    m_screenshot_image_tags_isSet = true;
}

bool OAIBaseItemDto::is_screenshot_image_tags_Set() const{
    return m_screenshot_image_tags_isSet;
}

bool OAIBaseItemDto::is_screenshot_image_tags_Valid() const{
    return m_screenshot_image_tags_isValid;
}

QString OAIBaseItemDto::getSeasonId() const {
    return m_season_id;
}
void OAIBaseItemDto::setSeasonId(const QString &season_id) {
    m_season_id = season_id;
    m_season_id_isSet = true;
}

bool OAIBaseItemDto::is_season_id_Set() const{
    return m_season_id_isSet;
}

bool OAIBaseItemDto::is_season_id_Valid() const{
    return m_season_id_isValid;
}

QString OAIBaseItemDto::getSeasonName() const {
    return m_season_name;
}
void OAIBaseItemDto::setSeasonName(const QString &season_name) {
    m_season_name = season_name;
    m_season_name_isSet = true;
}

bool OAIBaseItemDto::is_season_name_Set() const{
    return m_season_name_isSet;
}

bool OAIBaseItemDto::is_season_name_Valid() const{
    return m_season_name_isValid;
}

qint32 OAIBaseItemDto::getSeriesCount() const {
    return m_series_count;
}
void OAIBaseItemDto::setSeriesCount(const qint32 &series_count) {
    m_series_count = series_count;
    m_series_count_isSet = true;
}

bool OAIBaseItemDto::is_series_count_Set() const{
    return m_series_count_isSet;
}

bool OAIBaseItemDto::is_series_count_Valid() const{
    return m_series_count_isValid;
}

QString OAIBaseItemDto::getSeriesId() const {
    return m_series_id;
}
void OAIBaseItemDto::setSeriesId(const QString &series_id) {
    m_series_id = series_id;
    m_series_id_isSet = true;
}

bool OAIBaseItemDto::is_series_id_Set() const{
    return m_series_id_isSet;
}

bool OAIBaseItemDto::is_series_id_Valid() const{
    return m_series_id_isValid;
}

QString OAIBaseItemDto::getSeriesName() const {
    return m_series_name;
}
void OAIBaseItemDto::setSeriesName(const QString &series_name) {
    m_series_name = series_name;
    m_series_name_isSet = true;
}

bool OAIBaseItemDto::is_series_name_Set() const{
    return m_series_name_isSet;
}

bool OAIBaseItemDto::is_series_name_Valid() const{
    return m_series_name_isValid;
}

QString OAIBaseItemDto::getSeriesPrimaryImageTag() const {
    return m_series_primary_image_tag;
}
void OAIBaseItemDto::setSeriesPrimaryImageTag(const QString &series_primary_image_tag) {
    m_series_primary_image_tag = series_primary_image_tag;
    m_series_primary_image_tag_isSet = true;
}

bool OAIBaseItemDto::is_series_primary_image_tag_Set() const{
    return m_series_primary_image_tag_isSet;
}

bool OAIBaseItemDto::is_series_primary_image_tag_Valid() const{
    return m_series_primary_image_tag_isValid;
}

QString OAIBaseItemDto::getSeriesStudio() const {
    return m_series_studio;
}
void OAIBaseItemDto::setSeriesStudio(const QString &series_studio) {
    m_series_studio = series_studio;
    m_series_studio_isSet = true;
}

bool OAIBaseItemDto::is_series_studio_Set() const{
    return m_series_studio_isSet;
}

bool OAIBaseItemDto::is_series_studio_Valid() const{
    return m_series_studio_isValid;
}

QString OAIBaseItemDto::getSeriesThumbImageTag() const {
    return m_series_thumb_image_tag;
}
void OAIBaseItemDto::setSeriesThumbImageTag(const QString &series_thumb_image_tag) {
    m_series_thumb_image_tag = series_thumb_image_tag;
    m_series_thumb_image_tag_isSet = true;
}

bool OAIBaseItemDto::is_series_thumb_image_tag_Set() const{
    return m_series_thumb_image_tag_isSet;
}

bool OAIBaseItemDto::is_series_thumb_image_tag_Valid() const{
    return m_series_thumb_image_tag_isValid;
}

QString OAIBaseItemDto::getSeriesTimerId() const {
    return m_series_timer_id;
}
void OAIBaseItemDto::setSeriesTimerId(const QString &series_timer_id) {
    m_series_timer_id = series_timer_id;
    m_series_timer_id_isSet = true;
}

bool OAIBaseItemDto::is_series_timer_id_Set() const{
    return m_series_timer_id_isSet;
}

bool OAIBaseItemDto::is_series_timer_id_Valid() const{
    return m_series_timer_id_isValid;
}

QString OAIBaseItemDto::getServerId() const {
    return m_server_id;
}
void OAIBaseItemDto::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIBaseItemDto::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIBaseItemDto::is_server_id_Valid() const{
    return m_server_id_isValid;
}

double OAIBaseItemDto::getShutterSpeed() const {
    return m_shutter_speed;
}
void OAIBaseItemDto::setShutterSpeed(const double &shutter_speed) {
    m_shutter_speed = shutter_speed;
    m_shutter_speed_isSet = true;
}

bool OAIBaseItemDto::is_shutter_speed_Set() const{
    return m_shutter_speed_isSet;
}

bool OAIBaseItemDto::is_shutter_speed_Valid() const{
    return m_shutter_speed_isValid;
}

QString OAIBaseItemDto::getSoftware() const {
    return m_software;
}
void OAIBaseItemDto::setSoftware(const QString &software) {
    m_software = software;
    m_software_isSet = true;
}

bool OAIBaseItemDto::is_software_Set() const{
    return m_software_isSet;
}

bool OAIBaseItemDto::is_software_Valid() const{
    return m_software_isValid;
}

qint32 OAIBaseItemDto::getSongCount() const {
    return m_song_count;
}
void OAIBaseItemDto::setSongCount(const qint32 &song_count) {
    m_song_count = song_count;
    m_song_count_isSet = true;
}

bool OAIBaseItemDto::is_song_count_Set() const{
    return m_song_count_isSet;
}

bool OAIBaseItemDto::is_song_count_Valid() const{
    return m_song_count_isValid;
}

QString OAIBaseItemDto::getSortName() const {
    return m_sort_name;
}
void OAIBaseItemDto::setSortName(const QString &sort_name) {
    m_sort_name = sort_name;
    m_sort_name_isSet = true;
}

bool OAIBaseItemDto::is_sort_name_Set() const{
    return m_sort_name_isSet;
}

bool OAIBaseItemDto::is_sort_name_Valid() const{
    return m_sort_name_isValid;
}

QString OAIBaseItemDto::getSourceType() const {
    return m_source_type;
}
void OAIBaseItemDto::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIBaseItemDto::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIBaseItemDto::is_source_type_Valid() const{
    return m_source_type_isValid;
}

qint32 OAIBaseItemDto::getSpecialFeatureCount() const {
    return m_special_feature_count;
}
void OAIBaseItemDto::setSpecialFeatureCount(const qint32 &special_feature_count) {
    m_special_feature_count = special_feature_count;
    m_special_feature_count_isSet = true;
}

bool OAIBaseItemDto::is_special_feature_count_Set() const{
    return m_special_feature_count_isSet;
}

bool OAIBaseItemDto::is_special_feature_count_Valid() const{
    return m_special_feature_count_isValid;
}

QDateTime OAIBaseItemDto::getStartDate() const {
    return m_start_date;
}
void OAIBaseItemDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIBaseItemDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIBaseItemDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIBaseItemDto::getStatus() const {
    return m_status;
}
void OAIBaseItemDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBaseItemDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBaseItemDto::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINameGuidPair> OAIBaseItemDto::getStudios() const {
    return m_studios;
}
void OAIBaseItemDto::setStudios(const QList<OAINameGuidPair> &studios) {
    m_studios = studios;
    m_studios_isSet = true;
}

bool OAIBaseItemDto::is_studios_Set() const{
    return m_studios_isSet;
}

bool OAIBaseItemDto::is_studios_Valid() const{
    return m_studios_isValid;
}

bool OAIBaseItemDto::isSupportsSync() const {
    return m_supports_sync;
}
void OAIBaseItemDto::setSupportsSync(const bool &supports_sync) {
    m_supports_sync = supports_sync;
    m_supports_sync_isSet = true;
}

bool OAIBaseItemDto::is_supports_sync_Set() const{
    return m_supports_sync_isSet;
}

bool OAIBaseItemDto::is_supports_sync_Valid() const{
    return m_supports_sync_isValid;
}

QList<QString> OAIBaseItemDto::getTaglines() const {
    return m_taglines;
}
void OAIBaseItemDto::setTaglines(const QList<QString> &taglines) {
    m_taglines = taglines;
    m_taglines_isSet = true;
}

bool OAIBaseItemDto::is_taglines_Set() const{
    return m_taglines_isSet;
}

bool OAIBaseItemDto::is_taglines_Valid() const{
    return m_taglines_isValid;
}

QList<QString> OAIBaseItemDto::getTags() const {
    return m_tags;
}
void OAIBaseItemDto::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIBaseItemDto::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIBaseItemDto::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIBaseItemDto::getTimerId() const {
    return m_timer_id;
}
void OAIBaseItemDto::setTimerId(const QString &timer_id) {
    m_timer_id = timer_id;
    m_timer_id_isSet = true;
}

bool OAIBaseItemDto::is_timer_id_Set() const{
    return m_timer_id_isSet;
}

bool OAIBaseItemDto::is_timer_id_Valid() const{
    return m_timer_id_isValid;
}

qint32 OAIBaseItemDto::getTrailerCount() const {
    return m_trailer_count;
}
void OAIBaseItemDto::setTrailerCount(const qint32 &trailer_count) {
    m_trailer_count = trailer_count;
    m_trailer_count_isSet = true;
}

bool OAIBaseItemDto::is_trailer_count_Set() const{
    return m_trailer_count_isSet;
}

bool OAIBaseItemDto::is_trailer_count_Valid() const{
    return m_trailer_count_isValid;
}

QString OAIBaseItemDto::getType() const {
    return m_type;
}
void OAIBaseItemDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBaseItemDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBaseItemDto::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserItemDataDto OAIBaseItemDto::getUserData() const {
    return m_user_data;
}
void OAIBaseItemDto::setUserData(const OAIUserItemDataDto &user_data) {
    m_user_data = user_data;
    m_user_data_isSet = true;
}

bool OAIBaseItemDto::is_user_data_Set() const{
    return m_user_data_isSet;
}

bool OAIBaseItemDto::is_user_data_Valid() const{
    return m_user_data_isValid;
}

OAIVideo3DFormat OAIBaseItemDto::getVideo3DFormat() const {
    return m_video3_d_format;
}
void OAIBaseItemDto::setVideo3DFormat(const OAIVideo3DFormat &video3_d_format) {
    m_video3_d_format = video3_d_format;
    m_video3_d_format_isSet = true;
}

bool OAIBaseItemDto::is_video3_d_format_Set() const{
    return m_video3_d_format_isSet;
}

bool OAIBaseItemDto::is_video3_d_format_Valid() const{
    return m_video3_d_format_isValid;
}

OAIVideoType OAIBaseItemDto::getVideoType() const {
    return m_video_type;
}
void OAIBaseItemDto::setVideoType(const OAIVideoType &video_type) {
    m_video_type = video_type;
    m_video_type_isSet = true;
}

bool OAIBaseItemDto::is_video_type_Set() const{
    return m_video_type_isSet;
}

bool OAIBaseItemDto::is_video_type_Valid() const{
    return m_video_type_isValid;
}

qint32 OAIBaseItemDto::getWidth() const {
    return m_width;
}
void OAIBaseItemDto::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIBaseItemDto::is_width_Set() const{
    return m_width_isSet;
}

bool OAIBaseItemDto::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIBaseItemDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_air_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airs_after_season_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airs_before_episode_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airs_before_season_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aperture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backdrop_image_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_camera_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_camera_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_critic_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cumulative_run_time_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_program.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_media_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_preferences_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_media_source_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposure_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_focal_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forced_sort_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_genres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_subtitles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_blur_hashes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_orientation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_number_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_kids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_movie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_news_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_place_holder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_premiere_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_repeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_speed_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_trailer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_source_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_movie_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_music_video_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_official_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_art_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_art_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_backdrop_image_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_backdrop_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_index_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_logo_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_logo_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_primary_image_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_thumb_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_thumb_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_metadata_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_metadata_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premiere_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursive_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_trailers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_time_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot_image_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_studio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_thumb_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_timer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shutter_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_feature_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_studios.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taglines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trailer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video3_d_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseItemDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
