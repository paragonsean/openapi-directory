/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITranscodingProfile.h
 *
 * 
 */

#ifndef OAITranscodingProfile_H
#define OAITranscodingProfile_H

#include <QJsonObject>

#include "OAIDlnaProfileType.h"
#include "OAIEncodingContext.h"
#include "OAITranscodeSeekInfo.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITranscodingProfile : public OAIObject {
public:
    OAITranscodingProfile();
    OAITranscodingProfile(QString json);
    ~OAITranscodingProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAudioCodec() const;
    void setAudioCodec(const QString &audio_codec);
    bool is_audio_codec_Set() const;
    bool is_audio_codec_Valid() const;

    bool isBreakOnNonKeyFrames() const;
    void setBreakOnNonKeyFrames(const bool &break_on_non_key_frames);
    bool is_break_on_non_key_frames_Set() const;
    bool is_break_on_non_key_frames_Valid() const;

    QString getContainer() const;
    void setContainer(const QString &container);
    bool is_container_Set() const;
    bool is_container_Valid() const;

    OAIEncodingContext getContext() const;
    void setContext(const OAIEncodingContext &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    bool isCopyTimestamps() const;
    void setCopyTimestamps(const bool &copy_timestamps);
    bool is_copy_timestamps_Set() const;
    bool is_copy_timestamps_Valid() const;

    bool isEnableMpegtsM2TsMode() const;
    void setEnableMpegtsM2TsMode(const bool &enable_mpegts_m2_ts_mode);
    bool is_enable_mpegts_m2_ts_mode_Set() const;
    bool is_enable_mpegts_m2_ts_mode_Valid() const;

    bool isEnableSubtitlesInManifest() const;
    void setEnableSubtitlesInManifest(const bool &enable_subtitles_in_manifest);
    bool is_enable_subtitles_in_manifest_Set() const;
    bool is_enable_subtitles_in_manifest_Valid() const;

    bool isEstimateContentLength() const;
    void setEstimateContentLength(const bool &estimate_content_length);
    bool is_estimate_content_length_Set() const;
    bool is_estimate_content_length_Valid() const;

    QString getMaxAudioChannels() const;
    void setMaxAudioChannels(const QString &max_audio_channels);
    bool is_max_audio_channels_Set() const;
    bool is_max_audio_channels_Valid() const;

    qint32 getMinSegments() const;
    void setMinSegments(const qint32 &min_segments);
    bool is_min_segments_Set() const;
    bool is_min_segments_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    qint32 getSegmentLength() const;
    void setSegmentLength(const qint32 &segment_length);
    bool is_segment_length_Set() const;
    bool is_segment_length_Valid() const;

    OAITranscodeSeekInfo getTranscodeSeekInfo() const;
    void setTranscodeSeekInfo(const OAITranscodeSeekInfo &transcode_seek_info);
    bool is_transcode_seek_info_Set() const;
    bool is_transcode_seek_info_Valid() const;

    OAIDlnaProfileType getType() const;
    void setType(const OAIDlnaProfileType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVideoCodec() const;
    void setVideoCodec(const QString &video_codec);
    bool is_video_codec_Set() const;
    bool is_video_codec_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_audio_codec;
    bool m_audio_codec_isSet;
    bool m_audio_codec_isValid;

    bool m_break_on_non_key_frames;
    bool m_break_on_non_key_frames_isSet;
    bool m_break_on_non_key_frames_isValid;

    QString m_container;
    bool m_container_isSet;
    bool m_container_isValid;

    OAIEncodingContext m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    bool m_copy_timestamps;
    bool m_copy_timestamps_isSet;
    bool m_copy_timestamps_isValid;

    bool m_enable_mpegts_m2_ts_mode;
    bool m_enable_mpegts_m2_ts_mode_isSet;
    bool m_enable_mpegts_m2_ts_mode_isValid;

    bool m_enable_subtitles_in_manifest;
    bool m_enable_subtitles_in_manifest_isSet;
    bool m_enable_subtitles_in_manifest_isValid;

    bool m_estimate_content_length;
    bool m_estimate_content_length_isSet;
    bool m_estimate_content_length_isValid;

    QString m_max_audio_channels;
    bool m_max_audio_channels_isSet;
    bool m_max_audio_channels_isValid;

    qint32 m_min_segments;
    bool m_min_segments_isSet;
    bool m_min_segments_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    qint32 m_segment_length;
    bool m_segment_length_isSet;
    bool m_segment_length_isValid;

    OAITranscodeSeekInfo m_transcode_seek_info;
    bool m_transcode_seek_info_isSet;
    bool m_transcode_seek_info_isValid;

    OAIDlnaProfileType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_video_codec;
    bool m_video_codec_isSet;
    bool m_video_codec_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITranscodingProfile)

#endif // OAITranscodingProfile_H
