/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageByNameInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageByNameInfo::OAIImageByNameInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageByNameInfo::OAIImageByNameInfo() {
    this->initializeModel();
}

OAIImageByNameInfo::~OAIImageByNameInfo() {}

void OAIImageByNameInfo::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_file_length_isSet = false;
    m_file_length_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;
}

void OAIImageByNameInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageByNameInfo::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_file_length_isValid = ::OpenAPI::fromJsonValue(m_file_length, json[QString("FileLength")]);
    m_file_length_isSet = !json[QString("FileLength")].isNull() && m_file_length_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("Theme")]);
    m_theme_isSet = !json[QString("Theme")].isNull() && m_theme_isValid;
}

QString OAIImageByNameInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageByNameInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_file_length_isSet) {
        obj.insert(QString("FileLength"), ::OpenAPI::toJsonValue(m_file_length));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_theme_isSet) {
        obj.insert(QString("Theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    return obj;
}

QString OAIImageByNameInfo::getContext() const {
    return m_context;
}
void OAIImageByNameInfo::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIImageByNameInfo::is_context_Set() const{
    return m_context_isSet;
}

bool OAIImageByNameInfo::is_context_Valid() const{
    return m_context_isValid;
}

qint64 OAIImageByNameInfo::getFileLength() const {
    return m_file_length;
}
void OAIImageByNameInfo::setFileLength(const qint64 &file_length) {
    m_file_length = file_length;
    m_file_length_isSet = true;
}

bool OAIImageByNameInfo::is_file_length_Set() const{
    return m_file_length_isSet;
}

bool OAIImageByNameInfo::is_file_length_Valid() const{
    return m_file_length_isValid;
}

QString OAIImageByNameInfo::getFormat() const {
    return m_format;
}
void OAIImageByNameInfo::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIImageByNameInfo::is_format_Set() const{
    return m_format_isSet;
}

bool OAIImageByNameInfo::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIImageByNameInfo::getName() const {
    return m_name;
}
void OAIImageByNameInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageByNameInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageByNameInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageByNameInfo::getTheme() const {
    return m_theme;
}
void OAIImageByNameInfo::setTheme(const QString &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIImageByNameInfo::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIImageByNameInfo::is_theme_Valid() const{
    return m_theme_isValid;
}

bool OAIImageByNameInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageByNameInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
