/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILibraryTypeOptionsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILibraryTypeOptionsDto::OAILibraryTypeOptionsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILibraryTypeOptionsDto::OAILibraryTypeOptionsDto() {
    this->initializeModel();
}

OAILibraryTypeOptionsDto::~OAILibraryTypeOptionsDto() {}

void OAILibraryTypeOptionsDto::initializeModel() {

    m_default_image_options_isSet = false;
    m_default_image_options_isValid = false;

    m_image_fetchers_isSet = false;
    m_image_fetchers_isValid = false;

    m_metadata_fetchers_isSet = false;
    m_metadata_fetchers_isValid = false;

    m_supported_image_types_isSet = false;
    m_supported_image_types_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILibraryTypeOptionsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILibraryTypeOptionsDto::fromJsonObject(QJsonObject json) {

    m_default_image_options_isValid = ::OpenAPI::fromJsonValue(m_default_image_options, json[QString("DefaultImageOptions")]);
    m_default_image_options_isSet = !json[QString("DefaultImageOptions")].isNull() && m_default_image_options_isValid;

    m_image_fetchers_isValid = ::OpenAPI::fromJsonValue(m_image_fetchers, json[QString("ImageFetchers")]);
    m_image_fetchers_isSet = !json[QString("ImageFetchers")].isNull() && m_image_fetchers_isValid;

    m_metadata_fetchers_isValid = ::OpenAPI::fromJsonValue(m_metadata_fetchers, json[QString("MetadataFetchers")]);
    m_metadata_fetchers_isSet = !json[QString("MetadataFetchers")].isNull() && m_metadata_fetchers_isValid;

    m_supported_image_types_isValid = ::OpenAPI::fromJsonValue(m_supported_image_types, json[QString("SupportedImageTypes")]);
    m_supported_image_types_isSet = !json[QString("SupportedImageTypes")].isNull() && m_supported_image_types_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAILibraryTypeOptionsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILibraryTypeOptionsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_default_image_options.size() > 0) {
        obj.insert(QString("DefaultImageOptions"), ::OpenAPI::toJsonValue(m_default_image_options));
    }
    if (m_image_fetchers.size() > 0) {
        obj.insert(QString("ImageFetchers"), ::OpenAPI::toJsonValue(m_image_fetchers));
    }
    if (m_metadata_fetchers.size() > 0) {
        obj.insert(QString("MetadataFetchers"), ::OpenAPI::toJsonValue(m_metadata_fetchers));
    }
    if (m_supported_image_types.size() > 0) {
        obj.insert(QString("SupportedImageTypes"), ::OpenAPI::toJsonValue(m_supported_image_types));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIImageOption> OAILibraryTypeOptionsDto::getDefaultImageOptions() const {
    return m_default_image_options;
}
void OAILibraryTypeOptionsDto::setDefaultImageOptions(const QList<OAIImageOption> &default_image_options) {
    m_default_image_options = default_image_options;
    m_default_image_options_isSet = true;
}

bool OAILibraryTypeOptionsDto::is_default_image_options_Set() const{
    return m_default_image_options_isSet;
}

bool OAILibraryTypeOptionsDto::is_default_image_options_Valid() const{
    return m_default_image_options_isValid;
}

QList<OAILibraryOptionInfoDto> OAILibraryTypeOptionsDto::getImageFetchers() const {
    return m_image_fetchers;
}
void OAILibraryTypeOptionsDto::setImageFetchers(const QList<OAILibraryOptionInfoDto> &image_fetchers) {
    m_image_fetchers = image_fetchers;
    m_image_fetchers_isSet = true;
}

bool OAILibraryTypeOptionsDto::is_image_fetchers_Set() const{
    return m_image_fetchers_isSet;
}

bool OAILibraryTypeOptionsDto::is_image_fetchers_Valid() const{
    return m_image_fetchers_isValid;
}

QList<OAILibraryOptionInfoDto> OAILibraryTypeOptionsDto::getMetadataFetchers() const {
    return m_metadata_fetchers;
}
void OAILibraryTypeOptionsDto::setMetadataFetchers(const QList<OAILibraryOptionInfoDto> &metadata_fetchers) {
    m_metadata_fetchers = metadata_fetchers;
    m_metadata_fetchers_isSet = true;
}

bool OAILibraryTypeOptionsDto::is_metadata_fetchers_Set() const{
    return m_metadata_fetchers_isSet;
}

bool OAILibraryTypeOptionsDto::is_metadata_fetchers_Valid() const{
    return m_metadata_fetchers_isValid;
}

QList<OAIImageType> OAILibraryTypeOptionsDto::getSupportedImageTypes() const {
    return m_supported_image_types;
}
void OAILibraryTypeOptionsDto::setSupportedImageTypes(const QList<OAIImageType> &supported_image_types) {
    m_supported_image_types = supported_image_types;
    m_supported_image_types_isSet = true;
}

bool OAILibraryTypeOptionsDto::is_supported_image_types_Set() const{
    return m_supported_image_types_isSet;
}

bool OAILibraryTypeOptionsDto::is_supported_image_types_Valid() const{
    return m_supported_image_types_isValid;
}

QString OAILibraryTypeOptionsDto::getType() const {
    return m_type;
}
void OAILibraryTypeOptionsDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILibraryTypeOptionsDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAILibraryTypeOptionsDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILibraryTypeOptionsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_image_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_fetchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_fetchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_image_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILibraryTypeOptionsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
