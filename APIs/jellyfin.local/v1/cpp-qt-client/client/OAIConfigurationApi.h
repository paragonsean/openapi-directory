/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigurationApi_H
#define OAI_OAIConfigurationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIMediaEncoderPathDto.h"
#include "OAIMetadataOptions.h"
#include "OAIServerConfiguration.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConfigurationApi : public QObject {
    Q_OBJECT

public:
    OAIConfigurationApi(const int timeOut = 0);
    ~OAIConfigurationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getConfiguration();


    virtual void getDefaultMetadataOptions();

    /**
    * @param[in]  key QString [required]
    */
    virtual void getNamedConfiguration(const QString &key);

    /**
    * @param[in]  oai_server_configuration OAIServerConfiguration [required]
    */
    virtual void updateConfiguration(const OAIServerConfiguration &oai_server_configuration);

    /**
    * @param[in]  oai_media_encoder_path_dto OAIMediaEncoderPathDto [required]
    */
    virtual void updateMediaEncoderPath(const OAIMediaEncoderPathDto &oai_media_encoder_path_dto);

    /**
    * @param[in]  key QString [required]
    */
    virtual void updateNamedConfiguration(const QString &key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getConfigurationCallback(OAIHttpRequestWorker *worker);
    void getDefaultMetadataOptionsCallback(OAIHttpRequestWorker *worker);
    void getNamedConfigurationCallback(OAIHttpRequestWorker *worker);
    void updateConfigurationCallback(OAIHttpRequestWorker *worker);
    void updateMediaEncoderPathCallback(OAIHttpRequestWorker *worker);
    void updateNamedConfigurationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getConfigurationSignal(OAIServerConfiguration summary);
    void getDefaultMetadataOptionsSignal(OAIMetadataOptions summary);
    void getNamedConfigurationSignal(OAIHttpFileElement summary);
    void updateConfigurationSignal();
    void updateMediaEncoderPathSignal();
    void updateNamedConfigurationSignal();


    void getConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIServerConfiguration summary);
    void getDefaultMetadataOptionsSignalFull(OAIHttpRequestWorker *worker, OAIMetadataOptions summary);
    void getNamedConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void updateConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void updateMediaEncoderPathSignalFull(OAIHttpRequestWorker *worker);
    void updateNamedConfigurationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getConfigurationSignalError() instead")
    void getConfigurationSignalE(OAIServerConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigurationSignalError(OAIServerConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultMetadataOptionsSignalError() instead")
    void getDefaultMetadataOptionsSignalE(OAIMetadataOptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultMetadataOptionsSignalError(OAIMetadataOptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamedConfigurationSignalError() instead")
    void getNamedConfigurationSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamedConfigurationSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationSignalError() instead")
    void updateConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMediaEncoderPathSignalError() instead")
    void updateMediaEncoderPathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateMediaEncoderPathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNamedConfigurationSignalError() instead")
    void updateNamedConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateNamedConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getConfigurationSignalErrorFull() instead")
    void getConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultMetadataOptionsSignalErrorFull() instead")
    void getDefaultMetadataOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultMetadataOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamedConfigurationSignalErrorFull() instead")
    void getNamedConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamedConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationSignalErrorFull() instead")
    void updateConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMediaEncoderPathSignalErrorFull() instead")
    void updateMediaEncoderPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMediaEncoderPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNamedConfigurationSignalErrorFull() instead")
    void updateNamedConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNamedConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
