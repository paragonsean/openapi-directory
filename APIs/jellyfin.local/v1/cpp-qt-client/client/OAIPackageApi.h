/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPackageApi_H
#define OAI_OAIPackageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPackageInfo.h"
#include "OAIProblemDetails.h"
#include "OAIRepositoryInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPackageApi : public QObject {
    Q_OBJECT

public:
    OAIPackageApi(const int timeOut = 0);
    ~OAIPackageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  package_id QString [required]
    */
    virtual void cancelPackageInstallation(const QString &package_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  assembly_guid QString [optional]
    */
    virtual void getPackageInfo(const QString &name, const ::OpenAPI::OptionalParam<QString> &assembly_guid = ::OpenAPI::OptionalParam<QString>());


    virtual void getPackages();


    virtual void getRepositories();

    /**
    * @param[in]  name QString [required]
    * @param[in]  assembly_guid QString [optional]
    * @param[in]  version QString [optional]
    * @param[in]  repository_url QString [optional]
    */
    virtual void installPackage(const QString &name, const ::OpenAPI::OptionalParam<QString> &assembly_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &repository_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_repository_info QList<OAIRepositoryInfo> [optional]
    */
    virtual void setRepositories(const ::OpenAPI::OptionalParam<QList<OAIRepositoryInfo>> &oai_repository_info = ::OpenAPI::OptionalParam<QList<OAIRepositoryInfo>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelPackageInstallationCallback(OAIHttpRequestWorker *worker);
    void getPackageInfoCallback(OAIHttpRequestWorker *worker);
    void getPackagesCallback(OAIHttpRequestWorker *worker);
    void getRepositoriesCallback(OAIHttpRequestWorker *worker);
    void installPackageCallback(OAIHttpRequestWorker *worker);
    void setRepositoriesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelPackageInstallationSignal();
    void getPackageInfoSignal(OAIPackageInfo summary);
    void getPackagesSignal(QList<OAIPackageInfo> summary);
    void getRepositoriesSignal(QList<OAIRepositoryInfo> summary);
    void installPackageSignal();
    void setRepositoriesSignal();


    void cancelPackageInstallationSignalFull(OAIHttpRequestWorker *worker);
    void getPackageInfoSignalFull(OAIHttpRequestWorker *worker, OAIPackageInfo summary);
    void getPackagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPackageInfo> summary);
    void getRepositoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepositoryInfo> summary);
    void installPackageSignalFull(OAIHttpRequestWorker *worker);
    void setRepositoriesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cancelPackageInstallationSignalError() instead")
    void cancelPackageInstallationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelPackageInstallationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageInfoSignalError() instead")
    void getPackageInfoSignalE(OAIPackageInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageInfoSignalError(OAIPackageInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackagesSignalError() instead")
    void getPackagesSignalE(QList<OAIPackageInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackagesSignalError(QList<OAIPackageInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoriesSignalError() instead")
    void getRepositoriesSignalE(QList<OAIRepositoryInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoriesSignalError(QList<OAIRepositoryInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use installPackageSignalError() instead")
    void installPackageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void installPackageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRepositoriesSignalError() instead")
    void setRepositoriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRepositoriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelPackageInstallationSignalErrorFull() instead")
    void cancelPackageInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelPackageInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageInfoSignalErrorFull() instead")
    void getPackageInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackagesSignalErrorFull() instead")
    void getPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoriesSignalErrorFull() instead")
    void getRepositoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use installPackageSignalErrorFull() instead")
    void installPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void installPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRepositoriesSignalErrorFull() instead")
    void setRepositoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRepositoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
