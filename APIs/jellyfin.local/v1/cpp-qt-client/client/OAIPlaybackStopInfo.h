/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlaybackStopInfo.h
 *
 * Class PlaybackStopInfo.
 */

#ifndef OAIPlaybackStopInfo_H
#define OAIPlaybackStopInfo_H

#include <QJsonObject>

#include "OAIBaseItemDto.h"
#include "OAIQueueItem.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBaseItemDto;
class OAIQueueItem;

class OAIPlaybackStopInfo : public OAIObject {
public:
    OAIPlaybackStopInfo();
    OAIPlaybackStopInfo(QString json);
    ~OAIPlaybackStopInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isFailed() const;
    void setFailed(const bool &failed);
    bool is_failed_Set() const;
    bool is_failed_Valid() const;

    OAIBaseItemDto getItem() const;
    void setItem(const OAIBaseItemDto &item);
    bool is_item_Set() const;
    bool is_item_Valid() const;

    QString getItemId() const;
    void setItemId(const QString &item_id);
    bool is_item_id_Set() const;
    bool is_item_id_Valid() const;

    QString getLiveStreamId() const;
    void setLiveStreamId(const QString &live_stream_id);
    bool is_live_stream_id_Set() const;
    bool is_live_stream_id_Valid() const;

    QString getMediaSourceId() const;
    void setMediaSourceId(const QString &media_source_id);
    bool is_media_source_id_Set() const;
    bool is_media_source_id_Valid() const;

    QString getNextMediaType() const;
    void setNextMediaType(const QString &next_media_type);
    bool is_next_media_type_Set() const;
    bool is_next_media_type_Valid() const;

    QList<OAIQueueItem> getNowPlayingQueue() const;
    void setNowPlayingQueue(const QList<OAIQueueItem> &now_playing_queue);
    bool is_now_playing_queue_Set() const;
    bool is_now_playing_queue_Valid() const;

    QString getPlaySessionId() const;
    void setPlaySessionId(const QString &play_session_id);
    bool is_play_session_id_Set() const;
    bool is_play_session_id_Valid() const;

    QString getPlaylistItemId() const;
    void setPlaylistItemId(const QString &playlist_item_id);
    bool is_playlist_item_id_Set() const;
    bool is_playlist_item_id_Valid() const;

    qint64 getPositionTicks() const;
    void setPositionTicks(const qint64 &position_ticks);
    bool is_position_ticks_Set() const;
    bool is_position_ticks_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_failed;
    bool m_failed_isSet;
    bool m_failed_isValid;

    OAIBaseItemDto m_item;
    bool m_item_isSet;
    bool m_item_isValid;

    QString m_item_id;
    bool m_item_id_isSet;
    bool m_item_id_isValid;

    QString m_live_stream_id;
    bool m_live_stream_id_isSet;
    bool m_live_stream_id_isValid;

    QString m_media_source_id;
    bool m_media_source_id_isSet;
    bool m_media_source_id_isValid;

    QString m_next_media_type;
    bool m_next_media_type_isSet;
    bool m_next_media_type_isValid;

    QList<OAIQueueItem> m_now_playing_queue;
    bool m_now_playing_queue_isSet;
    bool m_now_playing_queue_isValid;

    QString m_play_session_id;
    bool m_play_session_id_isSet;
    bool m_play_session_id_isValid;

    QString m_playlist_item_id;
    bool m_playlist_item_id_isSet;
    bool m_playlist_item_id_isValid;

    qint64 m_position_ticks;
    bool m_position_ticks_isSet;
    bool m_position_ticks_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlaybackStopInfo)

#endif // OAIPlaybackStopInfo_H
