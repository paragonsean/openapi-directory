/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionInfo::OAIVersionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionInfo::OAIVersionInfo() {
    this->initializeModel();
}

OAIVersionInfo::~OAIVersionInfo() {}

void OAIVersionInfo::initializeModel() {

    m_version_number_isSet = false;
    m_version_number_isValid = false;

    m_changelog_isSet = false;
    m_changelog_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_target_abi_isSet = false;
    m_target_abi_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVersionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionInfo::fromJsonObject(QJsonObject json) {

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("VersionNumber")]);
    m_version_number_isSet = !json[QString("VersionNumber")].isNull() && m_version_number_isValid;

    m_changelog_isValid = ::OpenAPI::fromJsonValue(m_changelog, json[QString("changelog")]);
    m_changelog_isSet = !json[QString("changelog")].isNull() && m_changelog_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("repositoryUrl")]);
    m_repository_url_isSet = !json[QString("repositoryUrl")].isNull() && m_repository_url_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;

    m_target_abi_isValid = ::OpenAPI::fromJsonValue(m_target_abi, json[QString("targetAbi")]);
    m_target_abi_isSet = !json[QString("targetAbi")].isNull() && m_target_abi_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVersionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_version_number.isSet()) {
        obj.insert(QString("VersionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    if (m_changelog_isSet) {
        obj.insert(QString("changelog"), ::OpenAPI::toJsonValue(m_changelog));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_repository_url_isSet) {
        obj.insert(QString("repositoryUrl"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_target_abi_isSet) {
        obj.insert(QString("targetAbi"), ::OpenAPI::toJsonValue(m_target_abi));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIVersion OAIVersionInfo::getVersionNumber() const {
    return m_version_number;
}
void OAIVersionInfo::setVersionNumber(const OAIVersion &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIVersionInfo::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIVersionInfo::is_version_number_Valid() const{
    return m_version_number_isValid;
}

QString OAIVersionInfo::getChangelog() const {
    return m_changelog;
}
void OAIVersionInfo::setChangelog(const QString &changelog) {
    m_changelog = changelog;
    m_changelog_isSet = true;
}

bool OAIVersionInfo::is_changelog_Set() const{
    return m_changelog_isSet;
}

bool OAIVersionInfo::is_changelog_Valid() const{
    return m_changelog_isValid;
}

QString OAIVersionInfo::getChecksum() const {
    return m_checksum;
}
void OAIVersionInfo::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIVersionInfo::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIVersionInfo::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAIVersionInfo::getRepositoryName() const {
    return m_repository_name;
}
void OAIVersionInfo::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIVersionInfo::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIVersionInfo::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIVersionInfo::getRepositoryUrl() const {
    return m_repository_url;
}
void OAIVersionInfo::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAIVersionInfo::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAIVersionInfo::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

QString OAIVersionInfo::getSourceUrl() const {
    return m_source_url;
}
void OAIVersionInfo::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIVersionInfo::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIVersionInfo::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIVersionInfo::getTargetAbi() const {
    return m_target_abi;
}
void OAIVersionInfo::setTargetAbi(const QString &target_abi) {
    m_target_abi = target_abi;
    m_target_abi_isSet = true;
}

bool OAIVersionInfo::is_target_abi_Set() const{
    return m_target_abi_isSet;
}

bool OAIVersionInfo::is_target_abi_Valid() const{
    return m_target_abi_isValid;
}

QString OAIVersionInfo::getTimestamp() const {
    return m_timestamp;
}
void OAIVersionInfo::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIVersionInfo::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIVersionInfo::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIVersionInfo::getVersion() const {
    return m_version;
}
void OAIVersionInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVersionInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVersionInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVersionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_changelog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_abi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
