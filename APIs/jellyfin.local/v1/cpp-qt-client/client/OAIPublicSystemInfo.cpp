/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicSystemInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicSystemInfo::OAIPublicSystemInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicSystemInfo::OAIPublicSystemInfo() {
    this->initializeModel();
}

OAIPublicSystemInfo::~OAIPublicSystemInfo() {}

void OAIPublicSystemInfo::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_local_address_isSet = false;
    m_local_address_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_startup_wizard_completed_isSet = false;
    m_startup_wizard_completed_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPublicSystemInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicSystemInfo::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_local_address_isValid = ::OpenAPI::fromJsonValue(m_local_address, json[QString("LocalAddress")]);
    m_local_address_isSet = !json[QString("LocalAddress")].isNull() && m_local_address_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("OperatingSystem")]);
    m_operating_system_isSet = !json[QString("OperatingSystem")].isNull() && m_operating_system_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("ProductName")]);
    m_product_name_isSet = !json[QString("ProductName")].isNull() && m_product_name_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("ServerName")]);
    m_server_name_isSet = !json[QString("ServerName")].isNull() && m_server_name_isValid;

    m_startup_wizard_completed_isValid = ::OpenAPI::fromJsonValue(m_startup_wizard_completed, json[QString("StartupWizardCompleted")]);
    m_startup_wizard_completed_isSet = !json[QString("StartupWizardCompleted")].isNull() && m_startup_wizard_completed_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIPublicSystemInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicSystemInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_local_address_isSet) {
        obj.insert(QString("LocalAddress"), ::OpenAPI::toJsonValue(m_local_address));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("OperatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("ProductName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("ServerName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_startup_wizard_completed_isSet) {
        obj.insert(QString("StartupWizardCompleted"), ::OpenAPI::toJsonValue(m_startup_wizard_completed));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIPublicSystemInfo::getId() const {
    return m_id;
}
void OAIPublicSystemInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublicSystemInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublicSystemInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPublicSystemInfo::getLocalAddress() const {
    return m_local_address;
}
void OAIPublicSystemInfo::setLocalAddress(const QString &local_address) {
    m_local_address = local_address;
    m_local_address_isSet = true;
}

bool OAIPublicSystemInfo::is_local_address_Set() const{
    return m_local_address_isSet;
}

bool OAIPublicSystemInfo::is_local_address_Valid() const{
    return m_local_address_isValid;
}

QString OAIPublicSystemInfo::getOperatingSystem() const {
    return m_operating_system;
}
void OAIPublicSystemInfo::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIPublicSystemInfo::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIPublicSystemInfo::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

QString OAIPublicSystemInfo::getProductName() const {
    return m_product_name;
}
void OAIPublicSystemInfo::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIPublicSystemInfo::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIPublicSystemInfo::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAIPublicSystemInfo::getServerName() const {
    return m_server_name;
}
void OAIPublicSystemInfo::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIPublicSystemInfo::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIPublicSystemInfo::is_server_name_Valid() const{
    return m_server_name_isValid;
}

bool OAIPublicSystemInfo::isStartupWizardCompleted() const {
    return m_startup_wizard_completed;
}
void OAIPublicSystemInfo::setStartupWizardCompleted(const bool &startup_wizard_completed) {
    m_startup_wizard_completed = startup_wizard_completed;
    m_startup_wizard_completed_isSet = true;
}

bool OAIPublicSystemInfo::is_startup_wizard_completed_Set() const{
    return m_startup_wizard_completed_isSet;
}

bool OAIPublicSystemInfo::is_startup_wizard_completed_Valid() const{
    return m_startup_wizard_completed_isValid;
}

QString OAIPublicSystemInfo::getVersion() const {
    return m_version;
}
void OAIPublicSystemInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPublicSystemInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPublicSystemInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPublicSystemInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_wizard_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicSystemInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
