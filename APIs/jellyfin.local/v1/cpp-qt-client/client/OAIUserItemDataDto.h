/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserItemDataDto.h
 *
 * Class UserItemDataDto.
 */

#ifndef OAIUserItemDataDto_H
#define OAIUserItemDataDto_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUserItemDataDto : public OAIObject {
public:
    OAIUserItemDataDto();
    OAIUserItemDataDto(QString json);
    ~OAIUserItemDataDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIsFavorite() const;
    void setIsFavorite(const bool &is_favorite);
    bool is_is_favorite_Set() const;
    bool is_is_favorite_Valid() const;

    QString getItemId() const;
    void setItemId(const QString &item_id);
    bool is_item_id_Set() const;
    bool is_item_id_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QDateTime getLastPlayedDate() const;
    void setLastPlayedDate(const QDateTime &last_played_date);
    bool is_last_played_date_Set() const;
    bool is_last_played_date_Valid() const;

    bool isLikes() const;
    void setLikes(const bool &likes);
    bool is_likes_Set() const;
    bool is_likes_Valid() const;

    qint32 getPlayCount() const;
    void setPlayCount(const qint32 &play_count);
    bool is_play_count_Set() const;
    bool is_play_count_Valid() const;

    qint64 getPlaybackPositionTicks() const;
    void setPlaybackPositionTicks(const qint64 &playback_position_ticks);
    bool is_playback_position_ticks_Set() const;
    bool is_playback_position_ticks_Valid() const;

    bool isPlayed() const;
    void setPlayed(const bool &played);
    bool is_played_Set() const;
    bool is_played_Valid() const;

    double getPlayedPercentage() const;
    void setPlayedPercentage(const double &played_percentage);
    bool is_played_percentage_Set() const;
    bool is_played_percentage_Valid() const;

    double getRating() const;
    void setRating(const double &rating);
    bool is_rating_Set() const;
    bool is_rating_Valid() const;

    qint32 getUnplayedItemCount() const;
    void setUnplayedItemCount(const qint32 &unplayed_item_count);
    bool is_unplayed_item_count_Set() const;
    bool is_unplayed_item_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_is_favorite;
    bool m_is_favorite_isSet;
    bool m_is_favorite_isValid;

    QString m_item_id;
    bool m_item_id_isSet;
    bool m_item_id_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    QDateTime m_last_played_date;
    bool m_last_played_date_isSet;
    bool m_last_played_date_isValid;

    bool m_likes;
    bool m_likes_isSet;
    bool m_likes_isValid;

    qint32 m_play_count;
    bool m_play_count_isSet;
    bool m_play_count_isValid;

    qint64 m_playback_position_ticks;
    bool m_playback_position_ticks_isSet;
    bool m_playback_position_ticks_isValid;

    bool m_played;
    bool m_played_isSet;
    bool m_played_isValid;

    double m_played_percentage;
    bool m_played_percentage_isSet;
    bool m_played_percentage_isValid;

    double m_rating;
    bool m_rating_isSet;
    bool m_rating_isValid;

    qint32 m_unplayed_item_count;
    bool m_unplayed_item_count_isSet;
    bool m_unplayed_item_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserItemDataDto)

#endif // OAIUserItemDataDto_H
