/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInstantMixApi_H
#define OAI_OAIInstantMixApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaseItemDtoQueryResult.h"
#include "OAIImageType.h"
#include "OAIItemFields.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInstantMixApi : public QObject {
    Q_OBJECT

public:
    OAIInstantMixApi(const int timeOut = 0);
    ~OAIInstantMixApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    */
    virtual void getInstantMixFromAlbum(const QString &id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    */
    virtual void getInstantMixFromArtists(const QString &id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    */
    virtual void getInstantMixFromItem(const QString &id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    */
    virtual void getInstantMixFromMusicGenre(const QString &name, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    */
    virtual void getInstantMixFromMusicGenres(const QString &id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    */
    virtual void getInstantMixFromPlaylist(const QString &id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    */
    virtual void getInstantMixFromSong(const QString &id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getInstantMixFromAlbumCallback(OAIHttpRequestWorker *worker);
    void getInstantMixFromArtistsCallback(OAIHttpRequestWorker *worker);
    void getInstantMixFromItemCallback(OAIHttpRequestWorker *worker);
    void getInstantMixFromMusicGenreCallback(OAIHttpRequestWorker *worker);
    void getInstantMixFromMusicGenresCallback(OAIHttpRequestWorker *worker);
    void getInstantMixFromPlaylistCallback(OAIHttpRequestWorker *worker);
    void getInstantMixFromSongCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getInstantMixFromAlbumSignal(OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromArtistsSignal(OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromItemSignal(OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromMusicGenreSignal(OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromMusicGenresSignal(OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromPlaylistSignal(OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromSongSignal(OAIBaseItemDtoQueryResult summary);


    void getInstantMixFromAlbumSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromArtistsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromItemSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromMusicGenreSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromMusicGenresSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getInstantMixFromSongSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);

    Q_DECL_DEPRECATED_X("Use getInstantMixFromAlbumSignalError() instead")
    void getInstantMixFromAlbumSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromAlbumSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromArtistsSignalError() instead")
    void getInstantMixFromArtistsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromArtistsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromItemSignalError() instead")
    void getInstantMixFromItemSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromItemSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromMusicGenreSignalError() instead")
    void getInstantMixFromMusicGenreSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromMusicGenreSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromMusicGenresSignalError() instead")
    void getInstantMixFromMusicGenresSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromMusicGenresSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromPlaylistSignalError() instead")
    void getInstantMixFromPlaylistSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromPlaylistSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromSongSignalError() instead")
    void getInstantMixFromSongSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromSongSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getInstantMixFromAlbumSignalErrorFull() instead")
    void getInstantMixFromAlbumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromAlbumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromArtistsSignalErrorFull() instead")
    void getInstantMixFromArtistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromArtistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromItemSignalErrorFull() instead")
    void getInstantMixFromItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromMusicGenreSignalErrorFull() instead")
    void getInstantMixFromMusicGenreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromMusicGenreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromMusicGenresSignalErrorFull() instead")
    void getInstantMixFromMusicGenresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromMusicGenresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromPlaylistSignalErrorFull() instead")
    void getInstantMixFromPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstantMixFromSongSignalErrorFull() instead")
    void getInstantMixFromSongSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstantMixFromSongSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
