/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionInfo::OAISessionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionInfo::OAISessionInfo() {
    this->initializeModel();
}

OAISessionInfo::~OAISessionInfo() {}

void OAISessionInfo::initializeModel() {

    m_additional_users_isSet = false;
    m_additional_users_isValid = false;

    m_application_version_isSet = false;
    m_application_version_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_full_now_playing_item_isSet = false;
    m_full_now_playing_item_isValid = false;

    m_has_custom_device_name_isSet = false;
    m_has_custom_device_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_last_activity_date_isSet = false;
    m_last_activity_date_isValid = false;

    m_last_playback_check_in_isSet = false;
    m_last_playback_check_in_isValid = false;

    m_now_playing_item_isSet = false;
    m_now_playing_item_isValid = false;

    m_now_playing_queue_isSet = false;
    m_now_playing_queue_isValid = false;

    m_now_viewing_item_isSet = false;
    m_now_viewing_item_isValid = false;

    m_play_state_isSet = false;
    m_play_state_isValid = false;

    m_playable_media_types_isSet = false;
    m_playable_media_types_isValid = false;

    m_playlist_item_id_isSet = false;
    m_playlist_item_id_isValid = false;

    m_remote_end_point_isSet = false;
    m_remote_end_point_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_supported_commands_isSet = false;
    m_supported_commands_isValid = false;

    m_supports_media_control_isSet = false;
    m_supports_media_control_isValid = false;

    m_supports_remote_control_isSet = false;
    m_supports_remote_control_isValid = false;

    m_transcoding_info_isSet = false;
    m_transcoding_info_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_user_primary_image_tag_isSet = false;
    m_user_primary_image_tag_isValid = false;
}

void OAISessionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionInfo::fromJsonObject(QJsonObject json) {

    m_additional_users_isValid = ::OpenAPI::fromJsonValue(m_additional_users, json[QString("AdditionalUsers")]);
    m_additional_users_isSet = !json[QString("AdditionalUsers")].isNull() && m_additional_users_isValid;

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("ApplicationVersion")]);
    m_application_version_isSet = !json[QString("ApplicationVersion")].isNull() && m_application_version_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("Client")]);
    m_client_isSet = !json[QString("Client")].isNull() && m_client_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("DeviceName")]);
    m_device_name_isSet = !json[QString("DeviceName")].isNull() && m_device_name_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("DeviceType")]);
    m_device_type_isSet = !json[QString("DeviceType")].isNull() && m_device_type_isValid;

    m_full_now_playing_item_isValid = ::OpenAPI::fromJsonValue(m_full_now_playing_item, json[QString("FullNowPlayingItem")]);
    m_full_now_playing_item_isSet = !json[QString("FullNowPlayingItem")].isNull() && m_full_now_playing_item_isValid;

    m_has_custom_device_name_isValid = ::OpenAPI::fromJsonValue(m_has_custom_device_name, json[QString("HasCustomDeviceName")]);
    m_has_custom_device_name_isSet = !json[QString("HasCustomDeviceName")].isNull() && m_has_custom_device_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("IsActive")]);
    m_is_active_isSet = !json[QString("IsActive")].isNull() && m_is_active_isValid;

    m_last_activity_date_isValid = ::OpenAPI::fromJsonValue(m_last_activity_date, json[QString("LastActivityDate")]);
    m_last_activity_date_isSet = !json[QString("LastActivityDate")].isNull() && m_last_activity_date_isValid;

    m_last_playback_check_in_isValid = ::OpenAPI::fromJsonValue(m_last_playback_check_in, json[QString("LastPlaybackCheckIn")]);
    m_last_playback_check_in_isSet = !json[QString("LastPlaybackCheckIn")].isNull() && m_last_playback_check_in_isValid;

    m_now_playing_item_isValid = ::OpenAPI::fromJsonValue(m_now_playing_item, json[QString("NowPlayingItem")]);
    m_now_playing_item_isSet = !json[QString("NowPlayingItem")].isNull() && m_now_playing_item_isValid;

    m_now_playing_queue_isValid = ::OpenAPI::fromJsonValue(m_now_playing_queue, json[QString("NowPlayingQueue")]);
    m_now_playing_queue_isSet = !json[QString("NowPlayingQueue")].isNull() && m_now_playing_queue_isValid;

    m_now_viewing_item_isValid = ::OpenAPI::fromJsonValue(m_now_viewing_item, json[QString("NowViewingItem")]);
    m_now_viewing_item_isSet = !json[QString("NowViewingItem")].isNull() && m_now_viewing_item_isValid;

    m_play_state_isValid = ::OpenAPI::fromJsonValue(m_play_state, json[QString("PlayState")]);
    m_play_state_isSet = !json[QString("PlayState")].isNull() && m_play_state_isValid;

    m_playable_media_types_isValid = ::OpenAPI::fromJsonValue(m_playable_media_types, json[QString("PlayableMediaTypes")]);
    m_playable_media_types_isSet = !json[QString("PlayableMediaTypes")].isNull() && m_playable_media_types_isValid;

    m_playlist_item_id_isValid = ::OpenAPI::fromJsonValue(m_playlist_item_id, json[QString("PlaylistItemId")]);
    m_playlist_item_id_isSet = !json[QString("PlaylistItemId")].isNull() && m_playlist_item_id_isValid;

    m_remote_end_point_isValid = ::OpenAPI::fromJsonValue(m_remote_end_point, json[QString("RemoteEndPoint")]);
    m_remote_end_point_isSet = !json[QString("RemoteEndPoint")].isNull() && m_remote_end_point_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_supported_commands_isValid = ::OpenAPI::fromJsonValue(m_supported_commands, json[QString("SupportedCommands")]);
    m_supported_commands_isSet = !json[QString("SupportedCommands")].isNull() && m_supported_commands_isValid;

    m_supports_media_control_isValid = ::OpenAPI::fromJsonValue(m_supports_media_control, json[QString("SupportsMediaControl")]);
    m_supports_media_control_isSet = !json[QString("SupportsMediaControl")].isNull() && m_supports_media_control_isValid;

    m_supports_remote_control_isValid = ::OpenAPI::fromJsonValue(m_supports_remote_control, json[QString("SupportsRemoteControl")]);
    m_supports_remote_control_isSet = !json[QString("SupportsRemoteControl")].isNull() && m_supports_remote_control_isValid;

    m_transcoding_info_isValid = ::OpenAPI::fromJsonValue(m_transcoding_info, json[QString("TranscodingInfo")]);
    m_transcoding_info_isSet = !json[QString("TranscodingInfo")].isNull() && m_transcoding_info_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_user_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_user_primary_image_tag, json[QString("UserPrimaryImageTag")]);
    m_user_primary_image_tag_isSet = !json[QString("UserPrimaryImageTag")].isNull() && m_user_primary_image_tag_isValid;
}

QString OAISessionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_users.size() > 0) {
        obj.insert(QString("AdditionalUsers"), ::OpenAPI::toJsonValue(m_additional_users));
    }
    if (m_application_version_isSet) {
        obj.insert(QString("ApplicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_client_isSet) {
        obj.insert(QString("Client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("DeviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("DeviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_full_now_playing_item.isSet()) {
        obj.insert(QString("FullNowPlayingItem"), ::OpenAPI::toJsonValue(m_full_now_playing_item));
    }
    if (m_has_custom_device_name_isSet) {
        obj.insert(QString("HasCustomDeviceName"), ::OpenAPI::toJsonValue(m_has_custom_device_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("IsActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_last_activity_date_isSet) {
        obj.insert(QString("LastActivityDate"), ::OpenAPI::toJsonValue(m_last_activity_date));
    }
    if (m_last_playback_check_in_isSet) {
        obj.insert(QString("LastPlaybackCheckIn"), ::OpenAPI::toJsonValue(m_last_playback_check_in));
    }
    if (m_now_playing_item.isSet()) {
        obj.insert(QString("NowPlayingItem"), ::OpenAPI::toJsonValue(m_now_playing_item));
    }
    if (m_now_playing_queue.size() > 0) {
        obj.insert(QString("NowPlayingQueue"), ::OpenAPI::toJsonValue(m_now_playing_queue));
    }
    if (m_now_viewing_item.isSet()) {
        obj.insert(QString("NowViewingItem"), ::OpenAPI::toJsonValue(m_now_viewing_item));
    }
    if (m_play_state.isSet()) {
        obj.insert(QString("PlayState"), ::OpenAPI::toJsonValue(m_play_state));
    }
    if (m_playable_media_types.size() > 0) {
        obj.insert(QString("PlayableMediaTypes"), ::OpenAPI::toJsonValue(m_playable_media_types));
    }
    if (m_playlist_item_id_isSet) {
        obj.insert(QString("PlaylistItemId"), ::OpenAPI::toJsonValue(m_playlist_item_id));
    }
    if (m_remote_end_point_isSet) {
        obj.insert(QString("RemoteEndPoint"), ::OpenAPI::toJsonValue(m_remote_end_point));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_supported_commands.size() > 0) {
        obj.insert(QString("SupportedCommands"), ::OpenAPI::toJsonValue(m_supported_commands));
    }
    if (m_supports_media_control_isSet) {
        obj.insert(QString("SupportsMediaControl"), ::OpenAPI::toJsonValue(m_supports_media_control));
    }
    if (m_supports_remote_control_isSet) {
        obj.insert(QString("SupportsRemoteControl"), ::OpenAPI::toJsonValue(m_supports_remote_control));
    }
    if (m_transcoding_info.isSet()) {
        obj.insert(QString("TranscodingInfo"), ::OpenAPI::toJsonValue(m_transcoding_info));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_user_primary_image_tag_isSet) {
        obj.insert(QString("UserPrimaryImageTag"), ::OpenAPI::toJsonValue(m_user_primary_image_tag));
    }
    return obj;
}

QList<OAISessionUserInfo> OAISessionInfo::getAdditionalUsers() const {
    return m_additional_users;
}
void OAISessionInfo::setAdditionalUsers(const QList<OAISessionUserInfo> &additional_users) {
    m_additional_users = additional_users;
    m_additional_users_isSet = true;
}

bool OAISessionInfo::is_additional_users_Set() const{
    return m_additional_users_isSet;
}

bool OAISessionInfo::is_additional_users_Valid() const{
    return m_additional_users_isValid;
}

QString OAISessionInfo::getApplicationVersion() const {
    return m_application_version;
}
void OAISessionInfo::setApplicationVersion(const QString &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAISessionInfo::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAISessionInfo::is_application_version_Valid() const{
    return m_application_version_isValid;
}

OAIClientCapabilities OAISessionInfo::getCapabilities() const {
    return m_capabilities;
}
void OAISessionInfo::setCapabilities(const OAIClientCapabilities &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAISessionInfo::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAISessionInfo::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAISessionInfo::getClient() const {
    return m_client;
}
void OAISessionInfo::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAISessionInfo::is_client_Set() const{
    return m_client_isSet;
}

bool OAISessionInfo::is_client_Valid() const{
    return m_client_isValid;
}

QString OAISessionInfo::getDeviceId() const {
    return m_device_id;
}
void OAISessionInfo::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAISessionInfo::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAISessionInfo::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAISessionInfo::getDeviceName() const {
    return m_device_name;
}
void OAISessionInfo::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAISessionInfo::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAISessionInfo::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAISessionInfo::getDeviceType() const {
    return m_device_type;
}
void OAISessionInfo::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAISessionInfo::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAISessionInfo::is_device_type_Valid() const{
    return m_device_type_isValid;
}

OAIBaseItem OAISessionInfo::getFullNowPlayingItem() const {
    return m_full_now_playing_item;
}
void OAISessionInfo::setFullNowPlayingItem(const OAIBaseItem &full_now_playing_item) {
    m_full_now_playing_item = full_now_playing_item;
    m_full_now_playing_item_isSet = true;
}

bool OAISessionInfo::is_full_now_playing_item_Set() const{
    return m_full_now_playing_item_isSet;
}

bool OAISessionInfo::is_full_now_playing_item_Valid() const{
    return m_full_now_playing_item_isValid;
}

bool OAISessionInfo::isHasCustomDeviceName() const {
    return m_has_custom_device_name;
}
void OAISessionInfo::setHasCustomDeviceName(const bool &has_custom_device_name) {
    m_has_custom_device_name = has_custom_device_name;
    m_has_custom_device_name_isSet = true;
}

bool OAISessionInfo::is_has_custom_device_name_Set() const{
    return m_has_custom_device_name_isSet;
}

bool OAISessionInfo::is_has_custom_device_name_Valid() const{
    return m_has_custom_device_name_isValid;
}

QString OAISessionInfo::getId() const {
    return m_id;
}
void OAISessionInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISessionInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAISessionInfo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISessionInfo::isIsActive() const {
    return m_is_active;
}
void OAISessionInfo::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAISessionInfo::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAISessionInfo::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QDateTime OAISessionInfo::getLastActivityDate() const {
    return m_last_activity_date;
}
void OAISessionInfo::setLastActivityDate(const QDateTime &last_activity_date) {
    m_last_activity_date = last_activity_date;
    m_last_activity_date_isSet = true;
}

bool OAISessionInfo::is_last_activity_date_Set() const{
    return m_last_activity_date_isSet;
}

bool OAISessionInfo::is_last_activity_date_Valid() const{
    return m_last_activity_date_isValid;
}

QDateTime OAISessionInfo::getLastPlaybackCheckIn() const {
    return m_last_playback_check_in;
}
void OAISessionInfo::setLastPlaybackCheckIn(const QDateTime &last_playback_check_in) {
    m_last_playback_check_in = last_playback_check_in;
    m_last_playback_check_in_isSet = true;
}

bool OAISessionInfo::is_last_playback_check_in_Set() const{
    return m_last_playback_check_in_isSet;
}

bool OAISessionInfo::is_last_playback_check_in_Valid() const{
    return m_last_playback_check_in_isValid;
}

OAIBaseItemDto OAISessionInfo::getNowPlayingItem() const {
    return m_now_playing_item;
}
void OAISessionInfo::setNowPlayingItem(const OAIBaseItemDto &now_playing_item) {
    m_now_playing_item = now_playing_item;
    m_now_playing_item_isSet = true;
}

bool OAISessionInfo::is_now_playing_item_Set() const{
    return m_now_playing_item_isSet;
}

bool OAISessionInfo::is_now_playing_item_Valid() const{
    return m_now_playing_item_isValid;
}

QList<OAIQueueItem> OAISessionInfo::getNowPlayingQueue() const {
    return m_now_playing_queue;
}
void OAISessionInfo::setNowPlayingQueue(const QList<OAIQueueItem> &now_playing_queue) {
    m_now_playing_queue = now_playing_queue;
    m_now_playing_queue_isSet = true;
}

bool OAISessionInfo::is_now_playing_queue_Set() const{
    return m_now_playing_queue_isSet;
}

bool OAISessionInfo::is_now_playing_queue_Valid() const{
    return m_now_playing_queue_isValid;
}

OAIBaseItemDto OAISessionInfo::getNowViewingItem() const {
    return m_now_viewing_item;
}
void OAISessionInfo::setNowViewingItem(const OAIBaseItemDto &now_viewing_item) {
    m_now_viewing_item = now_viewing_item;
    m_now_viewing_item_isSet = true;
}

bool OAISessionInfo::is_now_viewing_item_Set() const{
    return m_now_viewing_item_isSet;
}

bool OAISessionInfo::is_now_viewing_item_Valid() const{
    return m_now_viewing_item_isValid;
}

OAIPlayerStateInfo OAISessionInfo::getPlayState() const {
    return m_play_state;
}
void OAISessionInfo::setPlayState(const OAIPlayerStateInfo &play_state) {
    m_play_state = play_state;
    m_play_state_isSet = true;
}

bool OAISessionInfo::is_play_state_Set() const{
    return m_play_state_isSet;
}

bool OAISessionInfo::is_play_state_Valid() const{
    return m_play_state_isValid;
}

QList<QString> OAISessionInfo::getPlayableMediaTypes() const {
    return m_playable_media_types;
}
void OAISessionInfo::setPlayableMediaTypes(const QList<QString> &playable_media_types) {
    m_playable_media_types = playable_media_types;
    m_playable_media_types_isSet = true;
}

bool OAISessionInfo::is_playable_media_types_Set() const{
    return m_playable_media_types_isSet;
}

bool OAISessionInfo::is_playable_media_types_Valid() const{
    return m_playable_media_types_isValid;
}

QString OAISessionInfo::getPlaylistItemId() const {
    return m_playlist_item_id;
}
void OAISessionInfo::setPlaylistItemId(const QString &playlist_item_id) {
    m_playlist_item_id = playlist_item_id;
    m_playlist_item_id_isSet = true;
}

bool OAISessionInfo::is_playlist_item_id_Set() const{
    return m_playlist_item_id_isSet;
}

bool OAISessionInfo::is_playlist_item_id_Valid() const{
    return m_playlist_item_id_isValid;
}

QString OAISessionInfo::getRemoteEndPoint() const {
    return m_remote_end_point;
}
void OAISessionInfo::setRemoteEndPoint(const QString &remote_end_point) {
    m_remote_end_point = remote_end_point;
    m_remote_end_point_isSet = true;
}

bool OAISessionInfo::is_remote_end_point_Set() const{
    return m_remote_end_point_isSet;
}

bool OAISessionInfo::is_remote_end_point_Valid() const{
    return m_remote_end_point_isValid;
}

QString OAISessionInfo::getServerId() const {
    return m_server_id;
}
void OAISessionInfo::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAISessionInfo::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAISessionInfo::is_server_id_Valid() const{
    return m_server_id_isValid;
}

QList<OAIGeneralCommandType> OAISessionInfo::getSupportedCommands() const {
    return m_supported_commands;
}
void OAISessionInfo::setSupportedCommands(const QList<OAIGeneralCommandType> &supported_commands) {
    m_supported_commands = supported_commands;
    m_supported_commands_isSet = true;
}

bool OAISessionInfo::is_supported_commands_Set() const{
    return m_supported_commands_isSet;
}

bool OAISessionInfo::is_supported_commands_Valid() const{
    return m_supported_commands_isValid;
}

bool OAISessionInfo::isSupportsMediaControl() const {
    return m_supports_media_control;
}
void OAISessionInfo::setSupportsMediaControl(const bool &supports_media_control) {
    m_supports_media_control = supports_media_control;
    m_supports_media_control_isSet = true;
}

bool OAISessionInfo::is_supports_media_control_Set() const{
    return m_supports_media_control_isSet;
}

bool OAISessionInfo::is_supports_media_control_Valid() const{
    return m_supports_media_control_isValid;
}

bool OAISessionInfo::isSupportsRemoteControl() const {
    return m_supports_remote_control;
}
void OAISessionInfo::setSupportsRemoteControl(const bool &supports_remote_control) {
    m_supports_remote_control = supports_remote_control;
    m_supports_remote_control_isSet = true;
}

bool OAISessionInfo::is_supports_remote_control_Set() const{
    return m_supports_remote_control_isSet;
}

bool OAISessionInfo::is_supports_remote_control_Valid() const{
    return m_supports_remote_control_isValid;
}

OAITranscodingInfo OAISessionInfo::getTranscodingInfo() const {
    return m_transcoding_info;
}
void OAISessionInfo::setTranscodingInfo(const OAITranscodingInfo &transcoding_info) {
    m_transcoding_info = transcoding_info;
    m_transcoding_info_isSet = true;
}

bool OAISessionInfo::is_transcoding_info_Set() const{
    return m_transcoding_info_isSet;
}

bool OAISessionInfo::is_transcoding_info_Valid() const{
    return m_transcoding_info_isValid;
}

QString OAISessionInfo::getUserId() const {
    return m_user_id;
}
void OAISessionInfo::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISessionInfo::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISessionInfo::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAISessionInfo::getUserName() const {
    return m_user_name;
}
void OAISessionInfo::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAISessionInfo::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAISessionInfo::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAISessionInfo::getUserPrimaryImageTag() const {
    return m_user_primary_image_tag;
}
void OAISessionInfo::setUserPrimaryImageTag(const QString &user_primary_image_tag) {
    m_user_primary_image_tag = user_primary_image_tag;
    m_user_primary_image_tag_isSet = true;
}

bool OAISessionInfo::is_user_primary_image_tag_Set() const{
    return m_user_primary_image_tag_isSet;
}

bool OAISessionInfo::is_user_primary_image_tag_Valid() const{
    return m_user_primary_image_tag_isValid;
}

bool OAISessionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_now_playing_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_custom_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_playback_check_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_playing_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_playing_queue.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_viewing_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playable_media_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_end_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_media_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_remote_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcoding_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
