/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisplayPreferencesDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisplayPreferencesDto::OAIDisplayPreferencesDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisplayPreferencesDto::OAIDisplayPreferencesDto() {
    this->initializeModel();
}

OAIDisplayPreferencesDto::~OAIDisplayPreferencesDto() {}

void OAIDisplayPreferencesDto::initializeModel() {

    m_client_isSet = false;
    m_client_isValid = false;

    m_custom_prefs_isSet = false;
    m_custom_prefs_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_index_by_isSet = false;
    m_index_by_isValid = false;

    m_primary_image_height_isSet = false;
    m_primary_image_height_isValid = false;

    m_primary_image_width_isSet = false;
    m_primary_image_width_isValid = false;

    m_remember_indexing_isSet = false;
    m_remember_indexing_isValid = false;

    m_remember_sorting_isSet = false;
    m_remember_sorting_isValid = false;

    m_scroll_direction_isSet = false;
    m_scroll_direction_isValid = false;

    m_show_backdrop_isSet = false;
    m_show_backdrop_isValid = false;

    m_show_sidebar_isSet = false;
    m_show_sidebar_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_view_type_isSet = false;
    m_view_type_isValid = false;
}

void OAIDisplayPreferencesDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisplayPreferencesDto::fromJsonObject(QJsonObject json) {

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("Client")]);
    m_client_isSet = !json[QString("Client")].isNull() && m_client_isValid;

    m_custom_prefs_isValid = ::OpenAPI::fromJsonValue(m_custom_prefs, json[QString("CustomPrefs")]);
    m_custom_prefs_isSet = !json[QString("CustomPrefs")].isNull() && m_custom_prefs_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_index_by_isValid = ::OpenAPI::fromJsonValue(m_index_by, json[QString("IndexBy")]);
    m_index_by_isSet = !json[QString("IndexBy")].isNull() && m_index_by_isValid;

    m_primary_image_height_isValid = ::OpenAPI::fromJsonValue(m_primary_image_height, json[QString("PrimaryImageHeight")]);
    m_primary_image_height_isSet = !json[QString("PrimaryImageHeight")].isNull() && m_primary_image_height_isValid;

    m_primary_image_width_isValid = ::OpenAPI::fromJsonValue(m_primary_image_width, json[QString("PrimaryImageWidth")]);
    m_primary_image_width_isSet = !json[QString("PrimaryImageWidth")].isNull() && m_primary_image_width_isValid;

    m_remember_indexing_isValid = ::OpenAPI::fromJsonValue(m_remember_indexing, json[QString("RememberIndexing")]);
    m_remember_indexing_isSet = !json[QString("RememberIndexing")].isNull() && m_remember_indexing_isValid;

    m_remember_sorting_isValid = ::OpenAPI::fromJsonValue(m_remember_sorting, json[QString("RememberSorting")]);
    m_remember_sorting_isSet = !json[QString("RememberSorting")].isNull() && m_remember_sorting_isValid;

    m_scroll_direction_isValid = ::OpenAPI::fromJsonValue(m_scroll_direction, json[QString("ScrollDirection")]);
    m_scroll_direction_isSet = !json[QString("ScrollDirection")].isNull() && m_scroll_direction_isValid;

    m_show_backdrop_isValid = ::OpenAPI::fromJsonValue(m_show_backdrop, json[QString("ShowBackdrop")]);
    m_show_backdrop_isSet = !json[QString("ShowBackdrop")].isNull() && m_show_backdrop_isValid;

    m_show_sidebar_isValid = ::OpenAPI::fromJsonValue(m_show_sidebar, json[QString("ShowSidebar")]);
    m_show_sidebar_isSet = !json[QString("ShowSidebar")].isNull() && m_show_sidebar_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;

    m_view_type_isValid = ::OpenAPI::fromJsonValue(m_view_type, json[QString("ViewType")]);
    m_view_type_isSet = !json[QString("ViewType")].isNull() && m_view_type_isValid;
}

QString OAIDisplayPreferencesDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisplayPreferencesDto::asJsonObject() const {
    QJsonObject obj;
    if (m_client_isSet) {
        obj.insert(QString("Client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_custom_prefs.size() > 0) {
        obj.insert(QString("CustomPrefs"), ::OpenAPI::toJsonValue(m_custom_prefs));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_index_by_isSet) {
        obj.insert(QString("IndexBy"), ::OpenAPI::toJsonValue(m_index_by));
    }
    if (m_primary_image_height_isSet) {
        obj.insert(QString("PrimaryImageHeight"), ::OpenAPI::toJsonValue(m_primary_image_height));
    }
    if (m_primary_image_width_isSet) {
        obj.insert(QString("PrimaryImageWidth"), ::OpenAPI::toJsonValue(m_primary_image_width));
    }
    if (m_remember_indexing_isSet) {
        obj.insert(QString("RememberIndexing"), ::OpenAPI::toJsonValue(m_remember_indexing));
    }
    if (m_remember_sorting_isSet) {
        obj.insert(QString("RememberSorting"), ::OpenAPI::toJsonValue(m_remember_sorting));
    }
    if (m_scroll_direction.isSet()) {
        obj.insert(QString("ScrollDirection"), ::OpenAPI::toJsonValue(m_scroll_direction));
    }
    if (m_show_backdrop_isSet) {
        obj.insert(QString("ShowBackdrop"), ::OpenAPI::toJsonValue(m_show_backdrop));
    }
    if (m_show_sidebar_isSet) {
        obj.insert(QString("ShowSidebar"), ::OpenAPI::toJsonValue(m_show_sidebar));
    }
    if (m_sort_by_isSet) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_view_type_isSet) {
        obj.insert(QString("ViewType"), ::OpenAPI::toJsonValue(m_view_type));
    }
    return obj;
}

QString OAIDisplayPreferencesDto::getClient() const {
    return m_client;
}
void OAIDisplayPreferencesDto::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIDisplayPreferencesDto::is_client_Set() const{
    return m_client_isSet;
}

bool OAIDisplayPreferencesDto::is_client_Valid() const{
    return m_client_isValid;
}

QMap<QString, QString> OAIDisplayPreferencesDto::getCustomPrefs() const {
    return m_custom_prefs;
}
void OAIDisplayPreferencesDto::setCustomPrefs(const QMap<QString, QString> &custom_prefs) {
    m_custom_prefs = custom_prefs;
    m_custom_prefs_isSet = true;
}

bool OAIDisplayPreferencesDto::is_custom_prefs_Set() const{
    return m_custom_prefs_isSet;
}

bool OAIDisplayPreferencesDto::is_custom_prefs_Valid() const{
    return m_custom_prefs_isValid;
}

QString OAIDisplayPreferencesDto::getId() const {
    return m_id;
}
void OAIDisplayPreferencesDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDisplayPreferencesDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDisplayPreferencesDto::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDisplayPreferencesDto::getIndexBy() const {
    return m_index_by;
}
void OAIDisplayPreferencesDto::setIndexBy(const QString &index_by) {
    m_index_by = index_by;
    m_index_by_isSet = true;
}

bool OAIDisplayPreferencesDto::is_index_by_Set() const{
    return m_index_by_isSet;
}

bool OAIDisplayPreferencesDto::is_index_by_Valid() const{
    return m_index_by_isValid;
}

qint32 OAIDisplayPreferencesDto::getPrimaryImageHeight() const {
    return m_primary_image_height;
}
void OAIDisplayPreferencesDto::setPrimaryImageHeight(const qint32 &primary_image_height) {
    m_primary_image_height = primary_image_height;
    m_primary_image_height_isSet = true;
}

bool OAIDisplayPreferencesDto::is_primary_image_height_Set() const{
    return m_primary_image_height_isSet;
}

bool OAIDisplayPreferencesDto::is_primary_image_height_Valid() const{
    return m_primary_image_height_isValid;
}

qint32 OAIDisplayPreferencesDto::getPrimaryImageWidth() const {
    return m_primary_image_width;
}
void OAIDisplayPreferencesDto::setPrimaryImageWidth(const qint32 &primary_image_width) {
    m_primary_image_width = primary_image_width;
    m_primary_image_width_isSet = true;
}

bool OAIDisplayPreferencesDto::is_primary_image_width_Set() const{
    return m_primary_image_width_isSet;
}

bool OAIDisplayPreferencesDto::is_primary_image_width_Valid() const{
    return m_primary_image_width_isValid;
}

bool OAIDisplayPreferencesDto::isRememberIndexing() const {
    return m_remember_indexing;
}
void OAIDisplayPreferencesDto::setRememberIndexing(const bool &remember_indexing) {
    m_remember_indexing = remember_indexing;
    m_remember_indexing_isSet = true;
}

bool OAIDisplayPreferencesDto::is_remember_indexing_Set() const{
    return m_remember_indexing_isSet;
}

bool OAIDisplayPreferencesDto::is_remember_indexing_Valid() const{
    return m_remember_indexing_isValid;
}

bool OAIDisplayPreferencesDto::isRememberSorting() const {
    return m_remember_sorting;
}
void OAIDisplayPreferencesDto::setRememberSorting(const bool &remember_sorting) {
    m_remember_sorting = remember_sorting;
    m_remember_sorting_isSet = true;
}

bool OAIDisplayPreferencesDto::is_remember_sorting_Set() const{
    return m_remember_sorting_isSet;
}

bool OAIDisplayPreferencesDto::is_remember_sorting_Valid() const{
    return m_remember_sorting_isValid;
}

OAIScrollDirection OAIDisplayPreferencesDto::getScrollDirection() const {
    return m_scroll_direction;
}
void OAIDisplayPreferencesDto::setScrollDirection(const OAIScrollDirection &scroll_direction) {
    m_scroll_direction = scroll_direction;
    m_scroll_direction_isSet = true;
}

bool OAIDisplayPreferencesDto::is_scroll_direction_Set() const{
    return m_scroll_direction_isSet;
}

bool OAIDisplayPreferencesDto::is_scroll_direction_Valid() const{
    return m_scroll_direction_isValid;
}

bool OAIDisplayPreferencesDto::isShowBackdrop() const {
    return m_show_backdrop;
}
void OAIDisplayPreferencesDto::setShowBackdrop(const bool &show_backdrop) {
    m_show_backdrop = show_backdrop;
    m_show_backdrop_isSet = true;
}

bool OAIDisplayPreferencesDto::is_show_backdrop_Set() const{
    return m_show_backdrop_isSet;
}

bool OAIDisplayPreferencesDto::is_show_backdrop_Valid() const{
    return m_show_backdrop_isValid;
}

bool OAIDisplayPreferencesDto::isShowSidebar() const {
    return m_show_sidebar;
}
void OAIDisplayPreferencesDto::setShowSidebar(const bool &show_sidebar) {
    m_show_sidebar = show_sidebar;
    m_show_sidebar_isSet = true;
}

bool OAIDisplayPreferencesDto::is_show_sidebar_Set() const{
    return m_show_sidebar_isSet;
}

bool OAIDisplayPreferencesDto::is_show_sidebar_Valid() const{
    return m_show_sidebar_isValid;
}

QString OAIDisplayPreferencesDto::getSortBy() const {
    return m_sort_by;
}
void OAIDisplayPreferencesDto::setSortBy(const QString &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIDisplayPreferencesDto::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIDisplayPreferencesDto::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIDisplayPreferencesDto::getSortOrder() const {
    return m_sort_order;
}
void OAIDisplayPreferencesDto::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIDisplayPreferencesDto::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIDisplayPreferencesDto::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIDisplayPreferencesDto::getViewType() const {
    return m_view_type;
}
void OAIDisplayPreferencesDto::setViewType(const QString &view_type) {
    m_view_type = view_type;
    m_view_type_isSet = true;
}

bool OAIDisplayPreferencesDto::is_view_type_Set() const{
    return m_view_type_isSet;
}

bool OAIDisplayPreferencesDto::is_view_type_Valid() const{
    return m_view_type_isValid;
}

bool OAIDisplayPreferencesDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_prefs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remember_indexing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remember_sorting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scroll_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_backdrop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_sidebar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisplayPreferencesDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
