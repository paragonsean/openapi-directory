/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISystemInfo.h
 *
 * Class SystemInfo.
 */

#ifndef OAISystemInfo_H
#define OAISystemInfo_H

#include <QJsonObject>

#include "OAIArchitecture.h"
#include "OAIFFmpegLocation.h"
#include "OAIInstallationInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInstallationInfo;

class OAISystemInfo : public OAIObject {
public:
    OAISystemInfo();
    OAISystemInfo(QString json);
    ~OAISystemInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCachePath() const;
    void setCachePath(const QString &cache_path);
    bool is_cache_path_Set() const;
    bool is_cache_path_Valid() const;

    bool isCanLaunchWebBrowser() const;
    void setCanLaunchWebBrowser(const bool &can_launch_web_browser);
    bool is_can_launch_web_browser_Set() const;
    bool is_can_launch_web_browser_Valid() const;

    bool isCanSelfRestart() const;
    void setCanSelfRestart(const bool &can_self_restart);
    bool is_can_self_restart_Set() const;
    bool is_can_self_restart_Valid() const;

    QList<OAIInstallationInfo> getCompletedInstallations() const;
    void setCompletedInstallations(const QList<OAIInstallationInfo> &completed_installations);
    bool is_completed_installations_Set() const;
    bool is_completed_installations_Valid() const;

    OAIFFmpegLocation getEncoderLocation() const;
    void setEncoderLocation(const OAIFFmpegLocation &encoder_location);
    bool is_encoder_location_Set() const;
    bool is_encoder_location_Valid() const;

    bool isHasPendingRestart() const;
    void setHasPendingRestart(const bool &has_pending_restart);
    bool is_has_pending_restart_Set() const;
    bool is_has_pending_restart_Valid() const;

    bool isHasUpdateAvailable() const;
    void setHasUpdateAvailable(const bool &has_update_available);
    bool is_has_update_available_Set() const;
    bool is_has_update_available_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getInternalMetadataPath() const;
    void setInternalMetadataPath(const QString &internal_metadata_path);
    bool is_internal_metadata_path_Set() const;
    bool is_internal_metadata_path_Valid() const;

    bool isIsShuttingDown() const;
    void setIsShuttingDown(const bool &is_shutting_down);
    bool is_is_shutting_down_Set() const;
    bool is_is_shutting_down_Valid() const;

    QString getItemsByNamePath() const;
    void setItemsByNamePath(const QString &items_by_name_path);
    bool is_items_by_name_path_Set() const;
    bool is_items_by_name_path_Valid() const;

    QString getLocalAddress() const;
    void setLocalAddress(const QString &local_address);
    bool is_local_address_Set() const;
    bool is_local_address_Valid() const;

    QString getLogPath() const;
    void setLogPath(const QString &log_path);
    bool is_log_path_Set() const;
    bool is_log_path_Valid() const;

    QString getOperatingSystem() const;
    void setOperatingSystem(const QString &operating_system);
    bool is_operating_system_Set() const;
    bool is_operating_system_Valid() const;

    QString getOperatingSystemDisplayName() const;
    void setOperatingSystemDisplayName(const QString &operating_system_display_name);
    bool is_operating_system_display_name_Set() const;
    bool is_operating_system_display_name_Valid() const;

    QString getPackageName() const;
    void setPackageName(const QString &package_name);
    bool is_package_name_Set() const;
    bool is_package_name_Valid() const;

    QString getProductName() const;
    void setProductName(const QString &product_name);
    bool is_product_name_Set() const;
    bool is_product_name_Valid() const;

    QString getProgramDataPath() const;
    void setProgramDataPath(const QString &program_data_path);
    bool is_program_data_path_Set() const;
    bool is_program_data_path_Valid() const;

    QString getServerName() const;
    void setServerName(const QString &server_name);
    bool is_server_name_Set() const;
    bool is_server_name_Valid() const;

    bool isStartupWizardCompleted() const;
    void setStartupWizardCompleted(const bool &startup_wizard_completed);
    bool is_startup_wizard_completed_Set() const;
    bool is_startup_wizard_completed_Valid() const;

    bool isSupportsLibraryMonitor() const;
    void setSupportsLibraryMonitor(const bool &supports_library_monitor);
    bool is_supports_library_monitor_Set() const;
    bool is_supports_library_monitor_Valid() const;

    OAIArchitecture getSystemArchitecture() const;
    void setSystemArchitecture(const OAIArchitecture &system_architecture);
    bool is_system_architecture_Set() const;
    bool is_system_architecture_Valid() const;

    QString getTranscodingTempPath() const;
    void setTranscodingTempPath(const QString &transcoding_temp_path);
    bool is_transcoding_temp_path_Set() const;
    bool is_transcoding_temp_path_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getWebPath() const;
    void setWebPath(const QString &web_path);
    bool is_web_path_Set() const;
    bool is_web_path_Valid() const;

    qint32 getWebSocketPortNumber() const;
    void setWebSocketPortNumber(const qint32 &web_socket_port_number);
    bool is_web_socket_port_number_Set() const;
    bool is_web_socket_port_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cache_path;
    bool m_cache_path_isSet;
    bool m_cache_path_isValid;

    bool m_can_launch_web_browser;
    bool m_can_launch_web_browser_isSet;
    bool m_can_launch_web_browser_isValid;

    bool m_can_self_restart;
    bool m_can_self_restart_isSet;
    bool m_can_self_restart_isValid;

    QList<OAIInstallationInfo> m_completed_installations;
    bool m_completed_installations_isSet;
    bool m_completed_installations_isValid;

    OAIFFmpegLocation m_encoder_location;
    bool m_encoder_location_isSet;
    bool m_encoder_location_isValid;

    bool m_has_pending_restart;
    bool m_has_pending_restart_isSet;
    bool m_has_pending_restart_isValid;

    bool m_has_update_available;
    bool m_has_update_available_isSet;
    bool m_has_update_available_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_internal_metadata_path;
    bool m_internal_metadata_path_isSet;
    bool m_internal_metadata_path_isValid;

    bool m_is_shutting_down;
    bool m_is_shutting_down_isSet;
    bool m_is_shutting_down_isValid;

    QString m_items_by_name_path;
    bool m_items_by_name_path_isSet;
    bool m_items_by_name_path_isValid;

    QString m_local_address;
    bool m_local_address_isSet;
    bool m_local_address_isValid;

    QString m_log_path;
    bool m_log_path_isSet;
    bool m_log_path_isValid;

    QString m_operating_system;
    bool m_operating_system_isSet;
    bool m_operating_system_isValid;

    QString m_operating_system_display_name;
    bool m_operating_system_display_name_isSet;
    bool m_operating_system_display_name_isValid;

    QString m_package_name;
    bool m_package_name_isSet;
    bool m_package_name_isValid;

    QString m_product_name;
    bool m_product_name_isSet;
    bool m_product_name_isValid;

    QString m_program_data_path;
    bool m_program_data_path_isSet;
    bool m_program_data_path_isValid;

    QString m_server_name;
    bool m_server_name_isSet;
    bool m_server_name_isValid;

    bool m_startup_wizard_completed;
    bool m_startup_wizard_completed_isSet;
    bool m_startup_wizard_completed_isValid;

    bool m_supports_library_monitor;
    bool m_supports_library_monitor_isSet;
    bool m_supports_library_monitor_isValid;

    OAIArchitecture m_system_architecture;
    bool m_system_architecture_isSet;
    bool m_system_architecture_isValid;

    QString m_transcoding_temp_path;
    bool m_transcoding_temp_path_isSet;
    bool m_transcoding_temp_path_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_web_path;
    bool m_web_path_isSet;
    bool m_web_path_isValid;

    qint32 m_web_socket_port_number;
    bool m_web_socket_port_number_isSet;
    bool m_web_socket_port_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISystemInfo)

#endif // OAISystemInfo_H
