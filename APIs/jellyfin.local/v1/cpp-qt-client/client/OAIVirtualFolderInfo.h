/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualFolderInfo.h
 *
 * Used to hold information about a user&#39;s list of configured virtual folders.
 */

#ifndef OAIVirtualFolderInfo_H
#define OAIVirtualFolderInfo_H

#include <QJsonObject>

#include "OAILibraryOptions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILibraryOptions;

class OAIVirtualFolderInfo : public OAIObject {
public:
    OAIVirtualFolderInfo();
    OAIVirtualFolderInfo(QString json);
    ~OAIVirtualFolderInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCollectionType() const;
    void setCollectionType(const QString &collection_type);
    bool is_collection_type_Set() const;
    bool is_collection_type_Valid() const;

    QString getItemId() const;
    void setItemId(const QString &item_id);
    bool is_item_id_Set() const;
    bool is_item_id_Valid() const;

    OAILibraryOptions getLibraryOptions() const;
    void setLibraryOptions(const OAILibraryOptions &library_options);
    bool is_library_options_Set() const;
    bool is_library_options_Valid() const;

    QList<QString> getLocations() const;
    void setLocations(const QList<QString> &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPrimaryImageItemId() const;
    void setPrimaryImageItemId(const QString &primary_image_item_id);
    bool is_primary_image_item_id_Set() const;
    bool is_primary_image_item_id_Valid() const;

    double getRefreshProgress() const;
    void setRefreshProgress(const double &refresh_progress);
    bool is_refresh_progress_Set() const;
    bool is_refresh_progress_Valid() const;

    QString getRefreshStatus() const;
    void setRefreshStatus(const QString &refresh_status);
    bool is_refresh_status_Set() const;
    bool is_refresh_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_collection_type;
    bool m_collection_type_isSet;
    bool m_collection_type_isValid;

    QString m_item_id;
    bool m_item_id_isSet;
    bool m_item_id_isValid;

    OAILibraryOptions m_library_options;
    bool m_library_options_isSet;
    bool m_library_options_isValid;

    QList<QString> m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_primary_image_item_id;
    bool m_primary_image_item_id_isSet;
    bool m_primary_image_item_id_isValid;

    double m_refresh_progress;
    bool m_refresh_progress_isSet;
    bool m_refresh_progress_isValid;

    QString m_refresh_status;
    bool m_refresh_status_isSet;
    bool m_refresh_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualFolderInfo)

#endif // OAIVirtualFolderInfo_H
