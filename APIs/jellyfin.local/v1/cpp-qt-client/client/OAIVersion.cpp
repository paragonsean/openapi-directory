/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_major_isSet = false;
    m_major_isValid = false;

    m_major_revision_isSet = false;
    m_major_revision_isValid = false;

    m_minor_isSet = false;
    m_minor_isValid = false;

    m_minor_revision_isSet = false;
    m_minor_revision_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("Build")]);
    m_build_isSet = !json[QString("Build")].isNull() && m_build_isValid;

    m_major_isValid = ::OpenAPI::fromJsonValue(m_major, json[QString("Major")]);
    m_major_isSet = !json[QString("Major")].isNull() && m_major_isValid;

    m_major_revision_isValid = ::OpenAPI::fromJsonValue(m_major_revision, json[QString("MajorRevision")]);
    m_major_revision_isSet = !json[QString("MajorRevision")].isNull() && m_major_revision_isValid;

    m_minor_isValid = ::OpenAPI::fromJsonValue(m_minor, json[QString("Minor")]);
    m_minor_isSet = !json[QString("Minor")].isNull() && m_minor_isValid;

    m_minor_revision_isValid = ::OpenAPI::fromJsonValue(m_minor_revision, json[QString("MinorRevision")]);
    m_minor_revision_isSet = !json[QString("MinorRevision")].isNull() && m_minor_revision_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_build_isSet) {
        obj.insert(QString("Build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_major_isSet) {
        obj.insert(QString("Major"), ::OpenAPI::toJsonValue(m_major));
    }
    if (m_major_revision_isSet) {
        obj.insert(QString("MajorRevision"), ::OpenAPI::toJsonValue(m_major_revision));
    }
    if (m_minor_isSet) {
        obj.insert(QString("Minor"), ::OpenAPI::toJsonValue(m_minor));
    }
    if (m_minor_revision_isSet) {
        obj.insert(QString("MinorRevision"), ::OpenAPI::toJsonValue(m_minor_revision));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

qint32 OAIVersion::getBuild() const {
    return m_build;
}
void OAIVersion::setBuild(const qint32 &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIVersion::is_build_Set() const{
    return m_build_isSet;
}

bool OAIVersion::is_build_Valid() const{
    return m_build_isValid;
}

qint32 OAIVersion::getMajor() const {
    return m_major;
}
void OAIVersion::setMajor(const qint32 &major) {
    m_major = major;
    m_major_isSet = true;
}

bool OAIVersion::is_major_Set() const{
    return m_major_isSet;
}

bool OAIVersion::is_major_Valid() const{
    return m_major_isValid;
}

qint32 OAIVersion::getMajorRevision() const {
    return m_major_revision;
}
void OAIVersion::setMajorRevision(const qint32 &major_revision) {
    m_major_revision = major_revision;
    m_major_revision_isSet = true;
}

bool OAIVersion::is_major_revision_Set() const{
    return m_major_revision_isSet;
}

bool OAIVersion::is_major_revision_Valid() const{
    return m_major_revision_isValid;
}

qint32 OAIVersion::getMinor() const {
    return m_minor;
}
void OAIVersion::setMinor(const qint32 &minor) {
    m_minor = minor;
    m_minor_isSet = true;
}

bool OAIVersion::is_minor_Set() const{
    return m_minor_isSet;
}

bool OAIVersion::is_minor_Valid() const{
    return m_minor_isValid;
}

qint32 OAIVersion::getMinorRevision() const {
    return m_minor_revision;
}
void OAIVersion::setMinorRevision(const qint32 &minor_revision) {
    m_minor_revision = minor_revision;
    m_minor_revision_isSet = true;
}

bool OAIVersion::is_minor_revision_Set() const{
    return m_minor_revision_isSet;
}

bool OAIVersion::is_minor_revision_Valid() const{
    return m_minor_revision_isValid;
}

qint32 OAIVersion::getRevision() const {
    return m_revision;
}
void OAIVersion::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIVersion::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIVersion::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minor_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
