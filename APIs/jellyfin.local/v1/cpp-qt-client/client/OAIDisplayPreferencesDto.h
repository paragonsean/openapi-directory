/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDisplayPreferencesDto.h
 *
 * Defines the display preferences for any item that supports them (usually Folders).
 */

#ifndef OAIDisplayPreferencesDto_H
#define OAIDisplayPreferencesDto_H

#include <QJsonObject>

#include "OAIScrollDirection.h"
#include "OAISortOrder.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDisplayPreferencesDto : public OAIObject {
public:
    OAIDisplayPreferencesDto();
    OAIDisplayPreferencesDto(QString json);
    ~OAIDisplayPreferencesDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClient() const;
    void setClient(const QString &client);
    bool is_client_Set() const;
    bool is_client_Valid() const;

    QMap<QString, QString> getCustomPrefs() const;
    void setCustomPrefs(const QMap<QString, QString> &custom_prefs);
    bool is_custom_prefs_Set() const;
    bool is_custom_prefs_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIndexBy() const;
    void setIndexBy(const QString &index_by);
    bool is_index_by_Set() const;
    bool is_index_by_Valid() const;

    qint32 getPrimaryImageHeight() const;
    void setPrimaryImageHeight(const qint32 &primary_image_height);
    bool is_primary_image_height_Set() const;
    bool is_primary_image_height_Valid() const;

    qint32 getPrimaryImageWidth() const;
    void setPrimaryImageWidth(const qint32 &primary_image_width);
    bool is_primary_image_width_Set() const;
    bool is_primary_image_width_Valid() const;

    bool isRememberIndexing() const;
    void setRememberIndexing(const bool &remember_indexing);
    bool is_remember_indexing_Set() const;
    bool is_remember_indexing_Valid() const;

    bool isRememberSorting() const;
    void setRememberSorting(const bool &remember_sorting);
    bool is_remember_sorting_Set() const;
    bool is_remember_sorting_Valid() const;

    OAIScrollDirection getScrollDirection() const;
    void setScrollDirection(const OAIScrollDirection &scroll_direction);
    bool is_scroll_direction_Set() const;
    bool is_scroll_direction_Valid() const;

    bool isShowBackdrop() const;
    void setShowBackdrop(const bool &show_backdrop);
    bool is_show_backdrop_Set() const;
    bool is_show_backdrop_Valid() const;

    bool isShowSidebar() const;
    void setShowSidebar(const bool &show_sidebar);
    bool is_show_sidebar_Set() const;
    bool is_show_sidebar_Valid() const;

    QString getSortBy() const;
    void setSortBy(const QString &sort_by);
    bool is_sort_by_Set() const;
    bool is_sort_by_Valid() const;

    OAISortOrder getSortOrder() const;
    void setSortOrder(const OAISortOrder &sort_order);
    bool is_sort_order_Set() const;
    bool is_sort_order_Valid() const;

    QString getViewType() const;
    void setViewType(const QString &view_type);
    bool is_view_type_Set() const;
    bool is_view_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client;
    bool m_client_isSet;
    bool m_client_isValid;

    QMap<QString, QString> m_custom_prefs;
    bool m_custom_prefs_isSet;
    bool m_custom_prefs_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_index_by;
    bool m_index_by_isSet;
    bool m_index_by_isValid;

    qint32 m_primary_image_height;
    bool m_primary_image_height_isSet;
    bool m_primary_image_height_isValid;

    qint32 m_primary_image_width;
    bool m_primary_image_width_isSet;
    bool m_primary_image_width_isValid;

    bool m_remember_indexing;
    bool m_remember_indexing_isSet;
    bool m_remember_indexing_isValid;

    bool m_remember_sorting;
    bool m_remember_sorting_isSet;
    bool m_remember_sorting_isValid;

    OAIScrollDirection m_scroll_direction;
    bool m_scroll_direction_isSet;
    bool m_scroll_direction_isValid;

    bool m_show_backdrop;
    bool m_show_backdrop_isSet;
    bool m_show_backdrop_isValid;

    bool m_show_sidebar;
    bool m_show_sidebar_isSet;
    bool m_show_sidebar_isValid;

    QString m_sort_by;
    bool m_sort_by_isSet;
    bool m_sort_by_isValid;

    OAISortOrder m_sort_order;
    bool m_sort_order_isSet;
    bool m_sort_order_isValid;

    QString m_view_type;
    bool m_view_type_isSet;
    bool m_view_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDisplayPreferencesDto)

#endif // OAIDisplayPreferencesDto_H
