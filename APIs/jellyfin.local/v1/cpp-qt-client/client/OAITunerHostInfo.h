/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITunerHostInfo.h
 *
 * 
 */

#ifndef OAITunerHostInfo_H
#define OAITunerHostInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITunerHostInfo : public OAIObject {
public:
    OAITunerHostInfo();
    OAITunerHostInfo(QString json);
    ~OAITunerHostInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowHwTranscoding() const;
    void setAllowHwTranscoding(const bool &allow_hw_transcoding);
    bool is_allow_hw_transcoding_Set() const;
    bool is_allow_hw_transcoding_Valid() const;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    bool isEnableStreamLooping() const;
    void setEnableStreamLooping(const bool &enable_stream_looping);
    bool is_enable_stream_looping_Set() const;
    bool is_enable_stream_looping_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isImportFavoritesOnly() const;
    void setImportFavoritesOnly(const bool &import_favorites_only);
    bool is_import_favorites_only_Set() const;
    bool is_import_favorites_only_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    qint32 getTunerCount() const;
    void setTunerCount(const qint32 &tuner_count);
    bool is_tuner_count_Set() const;
    bool is_tuner_count_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUserAgent() const;
    void setUserAgent(const QString &user_agent);
    bool is_user_agent_Set() const;
    bool is_user_agent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_hw_transcoding;
    bool m_allow_hw_transcoding_isSet;
    bool m_allow_hw_transcoding_isValid;

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    bool m_enable_stream_looping;
    bool m_enable_stream_looping_isSet;
    bool m_enable_stream_looping_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_import_favorites_only;
    bool m_import_favorites_only_isSet;
    bool m_import_favorites_only_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    qint32 m_tuner_count;
    bool m_tuner_count_isSet;
    bool m_tuner_count_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_user_agent;
    bool m_user_agent_isSet;
    bool m_user_agent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITunerHostInfo)

#endif // OAITunerHostInfo_H
