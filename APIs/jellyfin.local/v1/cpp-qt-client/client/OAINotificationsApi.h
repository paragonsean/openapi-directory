/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationsApi_H
#define OAI_OAINotificationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINameIdPair.h"
#include "OAINotificationLevel.h"
#include "OAINotificationResultDto.h"
#include "OAINotificationTypeInfo.h"
#include "OAINotificationsSummaryDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationsApi : public QObject {
    Q_OBJECT

public:
    OAINotificationsApi(const int timeOut = 0);
    ~OAINotificationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [optional]
    * @param[in]  level OAINotificationLevel [optional]
    * @param[in]  name QString [optional]
    * @param[in]  description QString [optional]
    */
    virtual void createAdminNotification(const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINotificationLevel> &level = ::OpenAPI::OptionalParam<OAINotificationLevel>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());


    virtual void getNotificationServices();


    virtual void getNotificationTypes();

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getNotifications(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getNotificationsSummary(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void setRead(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void setUnread(const QString &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAdminNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationServicesCallback(OAIHttpRequestWorker *worker);
    void getNotificationTypesCallback(OAIHttpRequestWorker *worker);
    void getNotificationsCallback(OAIHttpRequestWorker *worker);
    void getNotificationsSummaryCallback(OAIHttpRequestWorker *worker);
    void setReadCallback(OAIHttpRequestWorker *worker);
    void setUnreadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAdminNotificationSignal();
    void getNotificationServicesSignal(QList<OAINameIdPair> summary);
    void getNotificationTypesSignal(QList<OAINotificationTypeInfo> summary);
    void getNotificationsSignal(OAINotificationResultDto summary);
    void getNotificationsSummarySignal(OAINotificationsSummaryDto summary);
    void setReadSignal();
    void setUnreadSignal();


    void createAdminNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationServicesSignalFull(OAIHttpRequestWorker *worker, QList<OAINameIdPair> summary);
    void getNotificationTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAINotificationTypeInfo> summary);
    void getNotificationsSignalFull(OAIHttpRequestWorker *worker, OAINotificationResultDto summary);
    void getNotificationsSummarySignalFull(OAIHttpRequestWorker *worker, OAINotificationsSummaryDto summary);
    void setReadSignalFull(OAIHttpRequestWorker *worker);
    void setUnreadSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createAdminNotificationSignalError() instead")
    void createAdminNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createAdminNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationServicesSignalError() instead")
    void getNotificationServicesSignalE(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationServicesSignalError(QList<OAINameIdPair> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationTypesSignalError() instead")
    void getNotificationTypesSignalE(QList<OAINotificationTypeInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationTypesSignalError(QList<OAINotificationTypeInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsSignalError() instead")
    void getNotificationsSignalE(OAINotificationResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsSignalError(OAINotificationResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsSummarySignalError() instead")
    void getNotificationsSummarySignalE(OAINotificationsSummaryDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsSummarySignalError(OAINotificationsSummaryDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReadSignalError() instead")
    void setReadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setReadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUnreadSignalError() instead")
    void setUnreadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setUnreadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAdminNotificationSignalErrorFull() instead")
    void createAdminNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdminNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationServicesSignalErrorFull() instead")
    void getNotificationServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationTypesSignalErrorFull() instead")
    void getNotificationTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsSignalErrorFull() instead")
    void getNotificationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsSummarySignalErrorFull() instead")
    void getNotificationsSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setReadSignalErrorFull() instead")
    void setReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUnreadSignalErrorFull() instead")
    void setUnreadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setUnreadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
