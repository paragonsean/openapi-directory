/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILibraryOptionsResultDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILibraryOptionsResultDto::OAILibraryOptionsResultDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILibraryOptionsResultDto::OAILibraryOptionsResultDto() {
    this->initializeModel();
}

OAILibraryOptionsResultDto::~OAILibraryOptionsResultDto() {}

void OAILibraryOptionsResultDto::initializeModel() {

    m_metadata_readers_isSet = false;
    m_metadata_readers_isValid = false;

    m_metadata_savers_isSet = false;
    m_metadata_savers_isValid = false;

    m_subtitle_fetchers_isSet = false;
    m_subtitle_fetchers_isValid = false;

    m_type_options_isSet = false;
    m_type_options_isValid = false;
}

void OAILibraryOptionsResultDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILibraryOptionsResultDto::fromJsonObject(QJsonObject json) {

    m_metadata_readers_isValid = ::OpenAPI::fromJsonValue(m_metadata_readers, json[QString("MetadataReaders")]);
    m_metadata_readers_isSet = !json[QString("MetadataReaders")].isNull() && m_metadata_readers_isValid;

    m_metadata_savers_isValid = ::OpenAPI::fromJsonValue(m_metadata_savers, json[QString("MetadataSavers")]);
    m_metadata_savers_isSet = !json[QString("MetadataSavers")].isNull() && m_metadata_savers_isValid;

    m_subtitle_fetchers_isValid = ::OpenAPI::fromJsonValue(m_subtitle_fetchers, json[QString("SubtitleFetchers")]);
    m_subtitle_fetchers_isSet = !json[QString("SubtitleFetchers")].isNull() && m_subtitle_fetchers_isValid;

    m_type_options_isValid = ::OpenAPI::fromJsonValue(m_type_options, json[QString("TypeOptions")]);
    m_type_options_isSet = !json[QString("TypeOptions")].isNull() && m_type_options_isValid;
}

QString OAILibraryOptionsResultDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILibraryOptionsResultDto::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata_readers.size() > 0) {
        obj.insert(QString("MetadataReaders"), ::OpenAPI::toJsonValue(m_metadata_readers));
    }
    if (m_metadata_savers.size() > 0) {
        obj.insert(QString("MetadataSavers"), ::OpenAPI::toJsonValue(m_metadata_savers));
    }
    if (m_subtitle_fetchers.size() > 0) {
        obj.insert(QString("SubtitleFetchers"), ::OpenAPI::toJsonValue(m_subtitle_fetchers));
    }
    if (m_type_options.size() > 0) {
        obj.insert(QString("TypeOptions"), ::OpenAPI::toJsonValue(m_type_options));
    }
    return obj;
}

QList<OAILibraryOptionInfoDto> OAILibraryOptionsResultDto::getMetadataReaders() const {
    return m_metadata_readers;
}
void OAILibraryOptionsResultDto::setMetadataReaders(const QList<OAILibraryOptionInfoDto> &metadata_readers) {
    m_metadata_readers = metadata_readers;
    m_metadata_readers_isSet = true;
}

bool OAILibraryOptionsResultDto::is_metadata_readers_Set() const{
    return m_metadata_readers_isSet;
}

bool OAILibraryOptionsResultDto::is_metadata_readers_Valid() const{
    return m_metadata_readers_isValid;
}

QList<OAILibraryOptionInfoDto> OAILibraryOptionsResultDto::getMetadataSavers() const {
    return m_metadata_savers;
}
void OAILibraryOptionsResultDto::setMetadataSavers(const QList<OAILibraryOptionInfoDto> &metadata_savers) {
    m_metadata_savers = metadata_savers;
    m_metadata_savers_isSet = true;
}

bool OAILibraryOptionsResultDto::is_metadata_savers_Set() const{
    return m_metadata_savers_isSet;
}

bool OAILibraryOptionsResultDto::is_metadata_savers_Valid() const{
    return m_metadata_savers_isValid;
}

QList<OAILibraryOptionInfoDto> OAILibraryOptionsResultDto::getSubtitleFetchers() const {
    return m_subtitle_fetchers;
}
void OAILibraryOptionsResultDto::setSubtitleFetchers(const QList<OAILibraryOptionInfoDto> &subtitle_fetchers) {
    m_subtitle_fetchers = subtitle_fetchers;
    m_subtitle_fetchers_isSet = true;
}

bool OAILibraryOptionsResultDto::is_subtitle_fetchers_Set() const{
    return m_subtitle_fetchers_isSet;
}

bool OAILibraryOptionsResultDto::is_subtitle_fetchers_Valid() const{
    return m_subtitle_fetchers_isValid;
}

QList<OAILibraryTypeOptionsDto> OAILibraryOptionsResultDto::getTypeOptions() const {
    return m_type_options;
}
void OAILibraryOptionsResultDto::setTypeOptions(const QList<OAILibraryTypeOptionsDto> &type_options) {
    m_type_options = type_options;
    m_type_options_isSet = true;
}

bool OAILibraryOptionsResultDto::is_type_options_Set() const{
    return m_type_options_isSet;
}

bool OAILibraryOptionsResultDto::is_type_options_Valid() const{
    return m_type_options_isValid;
}

bool OAILibraryOptionsResultDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata_readers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_savers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_fetchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILibraryOptionsResultDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
