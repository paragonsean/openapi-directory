/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartupConfigurationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartupConfigurationDto::OAIStartupConfigurationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartupConfigurationDto::OAIStartupConfigurationDto() {
    this->initializeModel();
}

OAIStartupConfigurationDto::~OAIStartupConfigurationDto() {}

void OAIStartupConfigurationDto::initializeModel() {

    m_metadata_country_code_isSet = false;
    m_metadata_country_code_isValid = false;

    m_preferred_metadata_language_isSet = false;
    m_preferred_metadata_language_isValid = false;

    m_ui_culture_isSet = false;
    m_ui_culture_isValid = false;
}

void OAIStartupConfigurationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartupConfigurationDto::fromJsonObject(QJsonObject json) {

    m_metadata_country_code_isValid = ::OpenAPI::fromJsonValue(m_metadata_country_code, json[QString("MetadataCountryCode")]);
    m_metadata_country_code_isSet = !json[QString("MetadataCountryCode")].isNull() && m_metadata_country_code_isValid;

    m_preferred_metadata_language_isValid = ::OpenAPI::fromJsonValue(m_preferred_metadata_language, json[QString("PreferredMetadataLanguage")]);
    m_preferred_metadata_language_isSet = !json[QString("PreferredMetadataLanguage")].isNull() && m_preferred_metadata_language_isValid;

    m_ui_culture_isValid = ::OpenAPI::fromJsonValue(m_ui_culture, json[QString("UICulture")]);
    m_ui_culture_isSet = !json[QString("UICulture")].isNull() && m_ui_culture_isValid;
}

QString OAIStartupConfigurationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartupConfigurationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata_country_code_isSet) {
        obj.insert(QString("MetadataCountryCode"), ::OpenAPI::toJsonValue(m_metadata_country_code));
    }
    if (m_preferred_metadata_language_isSet) {
        obj.insert(QString("PreferredMetadataLanguage"), ::OpenAPI::toJsonValue(m_preferred_metadata_language));
    }
    if (m_ui_culture_isSet) {
        obj.insert(QString("UICulture"), ::OpenAPI::toJsonValue(m_ui_culture));
    }
    return obj;
}

QString OAIStartupConfigurationDto::getMetadataCountryCode() const {
    return m_metadata_country_code;
}
void OAIStartupConfigurationDto::setMetadataCountryCode(const QString &metadata_country_code) {
    m_metadata_country_code = metadata_country_code;
    m_metadata_country_code_isSet = true;
}

bool OAIStartupConfigurationDto::is_metadata_country_code_Set() const{
    return m_metadata_country_code_isSet;
}

bool OAIStartupConfigurationDto::is_metadata_country_code_Valid() const{
    return m_metadata_country_code_isValid;
}

QString OAIStartupConfigurationDto::getPreferredMetadataLanguage() const {
    return m_preferred_metadata_language;
}
void OAIStartupConfigurationDto::setPreferredMetadataLanguage(const QString &preferred_metadata_language) {
    m_preferred_metadata_language = preferred_metadata_language;
    m_preferred_metadata_language_isSet = true;
}

bool OAIStartupConfigurationDto::is_preferred_metadata_language_Set() const{
    return m_preferred_metadata_language_isSet;
}

bool OAIStartupConfigurationDto::is_preferred_metadata_language_Valid() const{
    return m_preferred_metadata_language_isValid;
}

QString OAIStartupConfigurationDto::getUiCulture() const {
    return m_ui_culture;
}
void OAIStartupConfigurationDto::setUiCulture(const QString &ui_culture) {
    m_ui_culture = ui_culture;
    m_ui_culture_isSet = true;
}

bool OAIStartupConfigurationDto::is_ui_culture_Set() const{
    return m_ui_culture_isSet;
}

bool OAIStartupConfigurationDto::is_ui_culture_Valid() const{
    return m_ui_culture_isValid;
}

bool OAIStartupConfigurationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_metadata_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_culture_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartupConfigurationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
