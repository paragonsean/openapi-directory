/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILibraryApi_H
#define OAI_OAILibraryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAllThemeMediaResult.h"
#include "OAIBaseItemDto.h"
#include "OAIBaseItemDtoQueryResult.h"
#include "OAIHttpFileElement.h"
#include "OAIItemCounts.h"
#include "OAIItemFields.h"
#include "OAILibraryOptionsResultDto.h"
#include "OAIMediaUpdateInfoDto.h"
#include "OAIProblemDetails.h"
#include "OAIThemeMediaResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILibraryApi : public QObject {
    Q_OBJECT

public:
    OAILibraryApi(const int timeOut = 0);
    ~OAILibraryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void deleteItem(const QString &item_id);

    /**
    * @param[in]  ids QList<QString> [optional]
    */
    virtual void deleteItems(const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    virtual void getAncestors(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getCriticReviews(const QString &item_id);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void getDownload(const QString &item_id);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void getFile(const QString &item_id);

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  is_favorite bool [optional]
    */
    virtual void getItemCounts(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_favorite = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  library_content_type QString [optional]
    * @param[in]  is_new_library bool [optional]
    */
    virtual void getLibraryOptionsInfo(const ::OpenAPI::OptionalParam<QString> &library_content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_new_library = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  is_hidden bool [optional]
    */
    virtual void getMediaFolders(const ::OpenAPI::OptionalParam<bool> &is_hidden = ::OpenAPI::OptionalParam<bool>());


    virtual void getPhysicalPaths();

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  exclude_artist_ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    */
    virtual void getSimilarAlbums(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &exclude_artist_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  exclude_artist_ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    */
    virtual void getSimilarArtists(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &exclude_artist_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  exclude_artist_ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    */
    virtual void getSimilarItems(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &exclude_artist_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  exclude_artist_ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    */
    virtual void getSimilarMovies(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &exclude_artist_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  exclude_artist_ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    */
    virtual void getSimilarShows(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &exclude_artist_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  exclude_artist_ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    */
    virtual void getSimilarTrailers(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &exclude_artist_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  inherit_from_parent bool [optional]
    */
    virtual void getThemeMedia(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &inherit_from_parent = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  inherit_from_parent bool [optional]
    */
    virtual void getThemeSongs(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &inherit_from_parent = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  inherit_from_parent bool [optional]
    */
    virtual void getThemeVideos(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &inherit_from_parent = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  tmdb_id QString [optional]
    * @param[in]  imdb_id QString [optional]
    */
    virtual void postAddedMovies(const ::OpenAPI::OptionalParam<QString> &tmdb_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imdb_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tvdb_id QString [optional]
    */
    virtual void postAddedSeries(const ::OpenAPI::OptionalParam<QString> &tvdb_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_media_update_info_dto QList<OAIMediaUpdateInfoDto> [required]
    */
    virtual void postUpdatedMedia(const QList<OAIMediaUpdateInfoDto> &oai_media_update_info_dto);

    /**
    * @param[in]  tmdb_id QString [optional]
    * @param[in]  imdb_id QString [optional]
    */
    virtual void postUpdatedMovies(const ::OpenAPI::OptionalParam<QString> &tmdb_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imdb_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tvdb_id QString [optional]
    */
    virtual void postUpdatedSeries(const ::OpenAPI::OptionalParam<QString> &tvdb_id = ::OpenAPI::OptionalParam<QString>());


    virtual void refreshLibrary();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteItemCallback(OAIHttpRequestWorker *worker);
    void deleteItemsCallback(OAIHttpRequestWorker *worker);
    void getAncestorsCallback(OAIHttpRequestWorker *worker);
    void getCriticReviewsCallback(OAIHttpRequestWorker *worker);
    void getDownloadCallback(OAIHttpRequestWorker *worker);
    void getFileCallback(OAIHttpRequestWorker *worker);
    void getItemCountsCallback(OAIHttpRequestWorker *worker);
    void getLibraryOptionsInfoCallback(OAIHttpRequestWorker *worker);
    void getMediaFoldersCallback(OAIHttpRequestWorker *worker);
    void getPhysicalPathsCallback(OAIHttpRequestWorker *worker);
    void getSimilarAlbumsCallback(OAIHttpRequestWorker *worker);
    void getSimilarArtistsCallback(OAIHttpRequestWorker *worker);
    void getSimilarItemsCallback(OAIHttpRequestWorker *worker);
    void getSimilarMoviesCallback(OAIHttpRequestWorker *worker);
    void getSimilarShowsCallback(OAIHttpRequestWorker *worker);
    void getSimilarTrailersCallback(OAIHttpRequestWorker *worker);
    void getThemeMediaCallback(OAIHttpRequestWorker *worker);
    void getThemeSongsCallback(OAIHttpRequestWorker *worker);
    void getThemeVideosCallback(OAIHttpRequestWorker *worker);
    void postAddedMoviesCallback(OAIHttpRequestWorker *worker);
    void postAddedSeriesCallback(OAIHttpRequestWorker *worker);
    void postUpdatedMediaCallback(OAIHttpRequestWorker *worker);
    void postUpdatedMoviesCallback(OAIHttpRequestWorker *worker);
    void postUpdatedSeriesCallback(OAIHttpRequestWorker *worker);
    void refreshLibraryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteItemSignal();
    void deleteItemsSignal();
    void getAncestorsSignal(QList<OAIBaseItemDto> summary);
    void getCriticReviewsSignal(OAIBaseItemDtoQueryResult summary);
    void getDownloadSignal(OAIHttpFileElement summary);
    void getFileSignal(OAIHttpFileElement summary);
    void getItemCountsSignal(OAIItemCounts summary);
    void getLibraryOptionsInfoSignal(OAILibraryOptionsResultDto summary);
    void getMediaFoldersSignal(OAIBaseItemDtoQueryResult summary);
    void getPhysicalPathsSignal(QList<QString> summary);
    void getSimilarAlbumsSignal(OAIBaseItemDtoQueryResult summary);
    void getSimilarArtistsSignal(OAIBaseItemDtoQueryResult summary);
    void getSimilarItemsSignal(OAIBaseItemDtoQueryResult summary);
    void getSimilarMoviesSignal(OAIBaseItemDtoQueryResult summary);
    void getSimilarShowsSignal(OAIBaseItemDtoQueryResult summary);
    void getSimilarTrailersSignal(OAIBaseItemDtoQueryResult summary);
    void getThemeMediaSignal(OAIAllThemeMediaResult summary);
    void getThemeSongsSignal(OAIThemeMediaResult summary);
    void getThemeVideosSignal(OAIThemeMediaResult summary);
    void postAddedMoviesSignal();
    void postAddedSeriesSignal();
    void postUpdatedMediaSignal();
    void postUpdatedMoviesSignal();
    void postUpdatedSeriesSignal();
    void refreshLibrarySignal();


    void deleteItemSignalFull(OAIHttpRequestWorker *worker);
    void deleteItemsSignalFull(OAIHttpRequestWorker *worker);
    void getAncestorsSignalFull(OAIHttpRequestWorker *worker, QList<OAIBaseItemDto> summary);
    void getCriticReviewsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getDownloadSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getItemCountsSignalFull(OAIHttpRequestWorker *worker, OAIItemCounts summary);
    void getLibraryOptionsInfoSignalFull(OAIHttpRequestWorker *worker, OAILibraryOptionsResultDto summary);
    void getMediaFoldersSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getPhysicalPathsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getSimilarAlbumsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getSimilarArtistsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getSimilarItemsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getSimilarMoviesSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getSimilarShowsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getSimilarTrailersSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getThemeMediaSignalFull(OAIHttpRequestWorker *worker, OAIAllThemeMediaResult summary);
    void getThemeSongsSignalFull(OAIHttpRequestWorker *worker, OAIThemeMediaResult summary);
    void getThemeVideosSignalFull(OAIHttpRequestWorker *worker, OAIThemeMediaResult summary);
    void postAddedMoviesSignalFull(OAIHttpRequestWorker *worker);
    void postAddedSeriesSignalFull(OAIHttpRequestWorker *worker);
    void postUpdatedMediaSignalFull(OAIHttpRequestWorker *worker);
    void postUpdatedMoviesSignalFull(OAIHttpRequestWorker *worker);
    void postUpdatedSeriesSignalFull(OAIHttpRequestWorker *worker);
    void refreshLibrarySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteItemSignalError() instead")
    void deleteItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteItemsSignalError() instead")
    void deleteItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAncestorsSignalError() instead")
    void getAncestorsSignalE(QList<OAIBaseItemDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAncestorsSignalError(QList<OAIBaseItemDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCriticReviewsSignalError() instead")
    void getCriticReviewsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCriticReviewsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDownloadSignalError() instead")
    void getDownloadSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDownloadSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileSignalError() instead")
    void getFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemCountsSignalError() instead")
    void getItemCountsSignalE(OAIItemCounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemCountsSignalError(OAIItemCounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLibraryOptionsInfoSignalError() instead")
    void getLibraryOptionsInfoSignalE(OAILibraryOptionsResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLibraryOptionsInfoSignalError(OAILibraryOptionsResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaFoldersSignalError() instead")
    void getMediaFoldersSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaFoldersSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhysicalPathsSignalError() instead")
    void getPhysicalPathsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhysicalPathsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarAlbumsSignalError() instead")
    void getSimilarAlbumsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarAlbumsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarArtistsSignalError() instead")
    void getSimilarArtistsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarArtistsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarItemsSignalError() instead")
    void getSimilarItemsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarItemsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarMoviesSignalError() instead")
    void getSimilarMoviesSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarMoviesSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarShowsSignalError() instead")
    void getSimilarShowsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarShowsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarTrailersSignalError() instead")
    void getSimilarTrailersSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarTrailersSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThemeMediaSignalError() instead")
    void getThemeMediaSignalE(OAIAllThemeMediaResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemeMediaSignalError(OAIAllThemeMediaResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThemeSongsSignalError() instead")
    void getThemeSongsSignalE(OAIThemeMediaResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemeSongsSignalError(OAIThemeMediaResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThemeVideosSignalError() instead")
    void getThemeVideosSignalE(OAIThemeMediaResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemeVideosSignalError(OAIThemeMediaResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAddedMoviesSignalError() instead")
    void postAddedMoviesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postAddedMoviesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAddedSeriesSignalError() instead")
    void postAddedSeriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postAddedSeriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdatedMediaSignalError() instead")
    void postUpdatedMediaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdatedMediaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdatedMoviesSignalError() instead")
    void postUpdatedMoviesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdatedMoviesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdatedSeriesSignalError() instead")
    void postUpdatedSeriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdatedSeriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshLibrarySignalError() instead")
    void refreshLibrarySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void refreshLibrarySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteItemSignalErrorFull() instead")
    void deleteItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteItemsSignalErrorFull() instead")
    void deleteItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAncestorsSignalErrorFull() instead")
    void getAncestorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAncestorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCriticReviewsSignalErrorFull() instead")
    void getCriticReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCriticReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDownloadSignalErrorFull() instead")
    void getDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileSignalErrorFull() instead")
    void getFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemCountsSignalErrorFull() instead")
    void getItemCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLibraryOptionsInfoSignalErrorFull() instead")
    void getLibraryOptionsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLibraryOptionsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaFoldersSignalErrorFull() instead")
    void getMediaFoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaFoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhysicalPathsSignalErrorFull() instead")
    void getPhysicalPathsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhysicalPathsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarAlbumsSignalErrorFull() instead")
    void getSimilarAlbumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarAlbumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarArtistsSignalErrorFull() instead")
    void getSimilarArtistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarArtistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarItemsSignalErrorFull() instead")
    void getSimilarItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarMoviesSignalErrorFull() instead")
    void getSimilarMoviesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarMoviesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarShowsSignalErrorFull() instead")
    void getSimilarShowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarShowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarTrailersSignalErrorFull() instead")
    void getSimilarTrailersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarTrailersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThemeMediaSignalErrorFull() instead")
    void getThemeMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemeMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThemeSongsSignalErrorFull() instead")
    void getThemeSongsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemeSongsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThemeVideosSignalErrorFull() instead")
    void getThemeVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThemeVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAddedMoviesSignalErrorFull() instead")
    void postAddedMoviesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAddedMoviesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAddedSeriesSignalErrorFull() instead")
    void postAddedSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAddedSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdatedMediaSignalErrorFull() instead")
    void postUpdatedMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdatedMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdatedMoviesSignalErrorFull() instead")
    void postUpdatedMoviesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdatedMoviesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdatedSeriesSignalErrorFull() instead")
    void postUpdatedSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdatedSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshLibrarySignalErrorFull() instead")
    void refreshLibrarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshLibrarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
