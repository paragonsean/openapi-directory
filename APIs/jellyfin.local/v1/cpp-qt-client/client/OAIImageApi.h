/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImageApi_H
#define OAI_OAIImageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIImageFormat.h"
#include "OAIImageInfo.h"
#include "OAIImageType.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImageApi : public QObject {
    Q_OBJECT

public:
    OAIImageApi(const int timeOut = 0);
    ~OAIImageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void deleteItemImage(const QString &item_id, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    */
    virtual void deleteItemImageByIndex(const QString &item_id, const OAIImageType &image_type, const qint32 &image_index);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  index qint32 [optional]
    */
    virtual void deleteUserImage(const QString &user_id, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<qint32> &index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  index qint32 [required]
    */
    virtual void deleteUserImageByIndex(const QString &user_id, const OAIImageType &image_type, const qint32 &index);

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void getArtistImage(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void getGenreImage(const QString &name, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void getGenreImageByIndex(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void getItemImage(const QString &item_id, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  max_width qint32 [required]
    * @param[in]  max_height qint32 [required]
    * @param[in]  tag QString [required]
    * @param[in]  format OAIImageFormat [required]
    * @param[in]  percent_played double [required]
    * @param[in]  unplayed_count qint32 [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void getItemImage2(const QString &item_id, const OAIImageType &image_type, const qint32 &max_width, const qint32 &max_height, const QString &tag, const OAIImageFormat &format, const double &percent_played, const qint32 &unplayed_count, const qint32 &image_index, const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void getItemImageByIndex(const QString &item_id, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void getItemImageInfos(const QString &item_id);

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void getMusicGenreImage(const QString &name, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void getMusicGenreImageByIndex(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void getPersonImage(const QString &name, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void getPersonImageByIndex(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void getStudioImage(const QString &name, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void getStudioImageByIndex(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void getUserImage(const QString &user_id, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void getUserImageByIndex(const QString &user_id, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void headArtistImage(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void headGenreImage(const QString &name, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void headGenreImageByIndex(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void headItemImage(const QString &item_id, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  max_width qint32 [required]
    * @param[in]  max_height qint32 [required]
    * @param[in]  tag QString [required]
    * @param[in]  format OAIImageFormat [required]
    * @param[in]  percent_played double [required]
    * @param[in]  unplayed_count qint32 [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void headItemImage2(const QString &item_id, const OAIImageType &image_type, const qint32 &max_width, const qint32 &max_height, const QString &tag, const OAIImageFormat &format, const double &percent_played, const qint32 &unplayed_count, const qint32 &image_index, const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void headItemImageByIndex(const QString &item_id, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void headMusicGenreImage(const QString &name, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void headMusicGenreImageByIndex(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void headPersonImage(const QString &name, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void headPersonImageByIndex(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void headStudioImage(const QString &name, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void headStudioImageByIndex(const QString &name, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    * @param[in]  image_index qint32 [optional]
    */
    virtual void headUserImage(const QString &user_id, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &image_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  tag QString [optional]
    * @param[in]  format OAIImageFormat [optional]
    * @param[in]  max_width qint32 [optional]
    * @param[in]  max_height qint32 [optional]
    * @param[in]  percent_played double [optional]
    * @param[in]  unplayed_count qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  crop_whitespace bool [optional]
    * @param[in]  add_played_indicator bool [optional]
    * @param[in]  blur qint32 [optional]
    * @param[in]  background_color QString [optional]
    * @param[in]  foreground_layer QString [optional]
    */
    virtual void headUserImageByIndex(const QString &user_id, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImageFormat> &format = ::OpenAPI::OptionalParam<OAIImageFormat>(), const ::OpenAPI::OptionalParam<qint32> &max_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &percent_played = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &unplayed_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &crop_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_played_indicator = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &blur = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &foreground_layer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  index qint32 [optional]
    */
    virtual void postUserImage(const QString &user_id, const OAIImageType &image_type, const ::OpenAPI::OptionalParam<qint32> &index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  index qint32 [required]
    */
    virtual void postUserImageByIndex(const QString &user_id, const OAIImageType &image_type, const qint32 &index);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    */
    virtual void setItemImage(const QString &item_id, const OAIImageType &image_type);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    */
    virtual void setItemImageByIndex(const QString &item_id, const OAIImageType &image_type, const qint32 &image_index);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  image_type OAIImageType [required]
    * @param[in]  image_index qint32 [required]
    * @param[in]  new_index qint32 [optional]
    */
    virtual void updateItemImageIndex(const QString &item_id, const OAIImageType &image_type, const qint32 &image_index, const ::OpenAPI::OptionalParam<qint32> &new_index = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteItemImageCallback(OAIHttpRequestWorker *worker);
    void deleteItemImageByIndexCallback(OAIHttpRequestWorker *worker);
    void deleteUserImageCallback(OAIHttpRequestWorker *worker);
    void deleteUserImageByIndexCallback(OAIHttpRequestWorker *worker);
    void getArtistImageCallback(OAIHttpRequestWorker *worker);
    void getGenreImageCallback(OAIHttpRequestWorker *worker);
    void getGenreImageByIndexCallback(OAIHttpRequestWorker *worker);
    void getItemImageCallback(OAIHttpRequestWorker *worker);
    void getItemImage2Callback(OAIHttpRequestWorker *worker);
    void getItemImageByIndexCallback(OAIHttpRequestWorker *worker);
    void getItemImageInfosCallback(OAIHttpRequestWorker *worker);
    void getMusicGenreImageCallback(OAIHttpRequestWorker *worker);
    void getMusicGenreImageByIndexCallback(OAIHttpRequestWorker *worker);
    void getPersonImageCallback(OAIHttpRequestWorker *worker);
    void getPersonImageByIndexCallback(OAIHttpRequestWorker *worker);
    void getStudioImageCallback(OAIHttpRequestWorker *worker);
    void getStudioImageByIndexCallback(OAIHttpRequestWorker *worker);
    void getUserImageCallback(OAIHttpRequestWorker *worker);
    void getUserImageByIndexCallback(OAIHttpRequestWorker *worker);
    void headArtistImageCallback(OAIHttpRequestWorker *worker);
    void headGenreImageCallback(OAIHttpRequestWorker *worker);
    void headGenreImageByIndexCallback(OAIHttpRequestWorker *worker);
    void headItemImageCallback(OAIHttpRequestWorker *worker);
    void headItemImage2Callback(OAIHttpRequestWorker *worker);
    void headItemImageByIndexCallback(OAIHttpRequestWorker *worker);
    void headMusicGenreImageCallback(OAIHttpRequestWorker *worker);
    void headMusicGenreImageByIndexCallback(OAIHttpRequestWorker *worker);
    void headPersonImageCallback(OAIHttpRequestWorker *worker);
    void headPersonImageByIndexCallback(OAIHttpRequestWorker *worker);
    void headStudioImageCallback(OAIHttpRequestWorker *worker);
    void headStudioImageByIndexCallback(OAIHttpRequestWorker *worker);
    void headUserImageCallback(OAIHttpRequestWorker *worker);
    void headUserImageByIndexCallback(OAIHttpRequestWorker *worker);
    void postUserImageCallback(OAIHttpRequestWorker *worker);
    void postUserImageByIndexCallback(OAIHttpRequestWorker *worker);
    void setItemImageCallback(OAIHttpRequestWorker *worker);
    void setItemImageByIndexCallback(OAIHttpRequestWorker *worker);
    void updateItemImageIndexCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteItemImageSignal();
    void deleteItemImageByIndexSignal();
    void deleteUserImageSignal();
    void deleteUserImageByIndexSignal();
    void getArtistImageSignal(OAIHttpFileElement summary);
    void getGenreImageSignal(OAIHttpFileElement summary);
    void getGenreImageByIndexSignal(OAIHttpFileElement summary);
    void getItemImageSignal(OAIHttpFileElement summary);
    void getItemImage2Signal(OAIHttpFileElement summary);
    void getItemImageByIndexSignal(OAIHttpFileElement summary);
    void getItemImageInfosSignal(QList<OAIImageInfo> summary);
    void getMusicGenreImageSignal(OAIHttpFileElement summary);
    void getMusicGenreImageByIndexSignal(OAIHttpFileElement summary);
    void getPersonImageSignal(OAIHttpFileElement summary);
    void getPersonImageByIndexSignal(OAIHttpFileElement summary);
    void getStudioImageSignal(OAIHttpFileElement summary);
    void getStudioImageByIndexSignal(OAIHttpFileElement summary);
    void getUserImageSignal(OAIHttpFileElement summary);
    void getUserImageByIndexSignal(OAIHttpFileElement summary);
    void headArtistImageSignal(OAIHttpFileElement summary);
    void headGenreImageSignal(OAIHttpFileElement summary);
    void headGenreImageByIndexSignal(OAIHttpFileElement summary);
    void headItemImageSignal(OAIHttpFileElement summary);
    void headItemImage2Signal(OAIHttpFileElement summary);
    void headItemImageByIndexSignal(OAIHttpFileElement summary);
    void headMusicGenreImageSignal(OAIHttpFileElement summary);
    void headMusicGenreImageByIndexSignal(OAIHttpFileElement summary);
    void headPersonImageSignal(OAIHttpFileElement summary);
    void headPersonImageByIndexSignal(OAIHttpFileElement summary);
    void headStudioImageSignal(OAIHttpFileElement summary);
    void headStudioImageByIndexSignal(OAIHttpFileElement summary);
    void headUserImageSignal(OAIHttpFileElement summary);
    void headUserImageByIndexSignal(OAIHttpFileElement summary);
    void postUserImageSignal();
    void postUserImageByIndexSignal();
    void setItemImageSignal();
    void setItemImageByIndexSignal();
    void updateItemImageIndexSignal();


    void deleteItemImageSignalFull(OAIHttpRequestWorker *worker);
    void deleteItemImageByIndexSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserImageSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserImageByIndexSignalFull(OAIHttpRequestWorker *worker);
    void getArtistImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getGenreImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getGenreImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getItemImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getItemImage2SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getItemImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getItemImageInfosSignalFull(OAIHttpRequestWorker *worker, QList<OAIImageInfo> summary);
    void getMusicGenreImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getMusicGenreImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPersonImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPersonImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getStudioImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getStudioImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getUserImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getUserImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headArtistImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headGenreImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headGenreImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headItemImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headItemImage2SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headItemImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headMusicGenreImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headMusicGenreImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headPersonImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headPersonImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headStudioImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headStudioImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headUserImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headUserImageByIndexSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void postUserImageSignalFull(OAIHttpRequestWorker *worker);
    void postUserImageByIndexSignalFull(OAIHttpRequestWorker *worker);
    void setItemImageSignalFull(OAIHttpRequestWorker *worker);
    void setItemImageByIndexSignalFull(OAIHttpRequestWorker *worker);
    void updateItemImageIndexSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteItemImageSignalError() instead")
    void deleteItemImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteItemImageByIndexSignalError() instead")
    void deleteItemImageByIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemImageByIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserImageSignalError() instead")
    void deleteUserImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserImageByIndexSignalError() instead")
    void deleteUserImageByIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserImageByIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtistImageSignalError() instead")
    void getArtistImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtistImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenreImageSignalError() instead")
    void getGenreImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenreImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenreImageByIndexSignalError() instead")
    void getGenreImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenreImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemImageSignalError() instead")
    void getItemImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemImage2SignalError() instead")
    void getItemImage2SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemImage2SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemImageByIndexSignalError() instead")
    void getItemImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemImageInfosSignalError() instead")
    void getItemImageInfosSignalE(QList<OAIImageInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemImageInfosSignalError(QList<OAIImageInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicGenreImageSignalError() instead")
    void getMusicGenreImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicGenreImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicGenreImageByIndexSignalError() instead")
    void getMusicGenreImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicGenreImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonImageSignalError() instead")
    void getPersonImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonImageByIndexSignalError() instead")
    void getPersonImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioImageSignalError() instead")
    void getStudioImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioImageByIndexSignalError() instead")
    void getStudioImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserImageSignalError() instead")
    void getUserImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserImageByIndexSignalError() instead")
    void getUserImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headArtistImageSignalError() instead")
    void headArtistImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headArtistImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headGenreImageSignalError() instead")
    void headGenreImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headGenreImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headGenreImageByIndexSignalError() instead")
    void headGenreImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headGenreImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headItemImageSignalError() instead")
    void headItemImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headItemImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headItemImage2SignalError() instead")
    void headItemImage2SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headItemImage2SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headItemImageByIndexSignalError() instead")
    void headItemImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headItemImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headMusicGenreImageSignalError() instead")
    void headMusicGenreImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headMusicGenreImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headMusicGenreImageByIndexSignalError() instead")
    void headMusicGenreImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headMusicGenreImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headPersonImageSignalError() instead")
    void headPersonImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headPersonImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headPersonImageByIndexSignalError() instead")
    void headPersonImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headPersonImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headStudioImageSignalError() instead")
    void headStudioImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headStudioImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headStudioImageByIndexSignalError() instead")
    void headStudioImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headStudioImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headUserImageSignalError() instead")
    void headUserImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headUserImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headUserImageByIndexSignalError() instead")
    void headUserImageByIndexSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headUserImageByIndexSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserImageSignalError() instead")
    void postUserImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUserImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserImageByIndexSignalError() instead")
    void postUserImageByIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUserImageByIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setItemImageSignalError() instead")
    void setItemImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setItemImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setItemImageByIndexSignalError() instead")
    void setItemImageByIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setItemImageByIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemImageIndexSignalError() instead")
    void updateItemImageIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemImageIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteItemImageSignalErrorFull() instead")
    void deleteItemImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteItemImageByIndexSignalErrorFull() instead")
    void deleteItemImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserImageSignalErrorFull() instead")
    void deleteUserImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserImageByIndexSignalErrorFull() instead")
    void deleteUserImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtistImageSignalErrorFull() instead")
    void getArtistImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtistImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenreImageSignalErrorFull() instead")
    void getGenreImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenreImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenreImageByIndexSignalErrorFull() instead")
    void getGenreImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenreImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemImageSignalErrorFull() instead")
    void getItemImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemImage2SignalErrorFull() instead")
    void getItemImage2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemImage2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemImageByIndexSignalErrorFull() instead")
    void getItemImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemImageInfosSignalErrorFull() instead")
    void getItemImageInfosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemImageInfosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicGenreImageSignalErrorFull() instead")
    void getMusicGenreImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicGenreImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicGenreImageByIndexSignalErrorFull() instead")
    void getMusicGenreImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicGenreImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonImageSignalErrorFull() instead")
    void getPersonImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonImageByIndexSignalErrorFull() instead")
    void getPersonImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioImageSignalErrorFull() instead")
    void getStudioImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioImageByIndexSignalErrorFull() instead")
    void getStudioImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserImageSignalErrorFull() instead")
    void getUserImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserImageByIndexSignalErrorFull() instead")
    void getUserImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headArtistImageSignalErrorFull() instead")
    void headArtistImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headArtistImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headGenreImageSignalErrorFull() instead")
    void headGenreImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headGenreImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headGenreImageByIndexSignalErrorFull() instead")
    void headGenreImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headGenreImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headItemImageSignalErrorFull() instead")
    void headItemImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headItemImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headItemImage2SignalErrorFull() instead")
    void headItemImage2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headItemImage2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headItemImageByIndexSignalErrorFull() instead")
    void headItemImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headItemImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headMusicGenreImageSignalErrorFull() instead")
    void headMusicGenreImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headMusicGenreImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headMusicGenreImageByIndexSignalErrorFull() instead")
    void headMusicGenreImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headMusicGenreImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headPersonImageSignalErrorFull() instead")
    void headPersonImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headPersonImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headPersonImageByIndexSignalErrorFull() instead")
    void headPersonImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headPersonImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headStudioImageSignalErrorFull() instead")
    void headStudioImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headStudioImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headStudioImageByIndexSignalErrorFull() instead")
    void headStudioImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headStudioImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headUserImageSignalErrorFull() instead")
    void headUserImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headUserImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headUserImageByIndexSignalErrorFull() instead")
    void headUserImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headUserImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserImageSignalErrorFull() instead")
    void postUserImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserImageByIndexSignalErrorFull() instead")
    void postUserImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setItemImageSignalErrorFull() instead")
    void setItemImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setItemImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setItemImageByIndexSignalErrorFull() instead")
    void setItemImageByIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setItemImageByIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemImageIndexSignalErrorFull() instead")
    void updateItemImageIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemImageIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
