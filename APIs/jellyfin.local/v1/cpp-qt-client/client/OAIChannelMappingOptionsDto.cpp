/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelMappingOptionsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelMappingOptionsDto::OAIChannelMappingOptionsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelMappingOptionsDto::OAIChannelMappingOptionsDto() {
    this->initializeModel();
}

OAIChannelMappingOptionsDto::~OAIChannelMappingOptionsDto() {}

void OAIChannelMappingOptionsDto::initializeModel() {

    m_mappings_isSet = false;
    m_mappings_isValid = false;

    m_provider_channels_isSet = false;
    m_provider_channels_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_tuner_channels_isSet = false;
    m_tuner_channels_isValid = false;
}

void OAIChannelMappingOptionsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelMappingOptionsDto::fromJsonObject(QJsonObject json) {

    m_mappings_isValid = ::OpenAPI::fromJsonValue(m_mappings, json[QString("Mappings")]);
    m_mappings_isSet = !json[QString("Mappings")].isNull() && m_mappings_isValid;

    m_provider_channels_isValid = ::OpenAPI::fromJsonValue(m_provider_channels, json[QString("ProviderChannels")]);
    m_provider_channels_isSet = !json[QString("ProviderChannels")].isNull() && m_provider_channels_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("ProviderName")]);
    m_provider_name_isSet = !json[QString("ProviderName")].isNull() && m_provider_name_isValid;

    m_tuner_channels_isValid = ::OpenAPI::fromJsonValue(m_tuner_channels, json[QString("TunerChannels")]);
    m_tuner_channels_isSet = !json[QString("TunerChannels")].isNull() && m_tuner_channels_isValid;
}

QString OAIChannelMappingOptionsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelMappingOptionsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_mappings.size() > 0) {
        obj.insert(QString("Mappings"), ::OpenAPI::toJsonValue(m_mappings));
    }
    if (m_provider_channels.size() > 0) {
        obj.insert(QString("ProviderChannels"), ::OpenAPI::toJsonValue(m_provider_channels));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("ProviderName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_tuner_channels.size() > 0) {
        obj.insert(QString("TunerChannels"), ::OpenAPI::toJsonValue(m_tuner_channels));
    }
    return obj;
}

QList<OAINameValuePair> OAIChannelMappingOptionsDto::getMappings() const {
    return m_mappings;
}
void OAIChannelMappingOptionsDto::setMappings(const QList<OAINameValuePair> &mappings) {
    m_mappings = mappings;
    m_mappings_isSet = true;
}

bool OAIChannelMappingOptionsDto::is_mappings_Set() const{
    return m_mappings_isSet;
}

bool OAIChannelMappingOptionsDto::is_mappings_Valid() const{
    return m_mappings_isValid;
}

QList<OAINameIdPair> OAIChannelMappingOptionsDto::getProviderChannels() const {
    return m_provider_channels;
}
void OAIChannelMappingOptionsDto::setProviderChannels(const QList<OAINameIdPair> &provider_channels) {
    m_provider_channels = provider_channels;
    m_provider_channels_isSet = true;
}

bool OAIChannelMappingOptionsDto::is_provider_channels_Set() const{
    return m_provider_channels_isSet;
}

bool OAIChannelMappingOptionsDto::is_provider_channels_Valid() const{
    return m_provider_channels_isValid;
}

QString OAIChannelMappingOptionsDto::getProviderName() const {
    return m_provider_name;
}
void OAIChannelMappingOptionsDto::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIChannelMappingOptionsDto::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIChannelMappingOptionsDto::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

QList<OAITunerChannelMapping> OAIChannelMappingOptionsDto::getTunerChannels() const {
    return m_tuner_channels;
}
void OAIChannelMappingOptionsDto::setTunerChannels(const QList<OAITunerChannelMapping> &tuner_channels) {
    m_tuner_channels = tuner_channels;
    m_tuner_channels_isSet = true;
}

bool OAIChannelMappingOptionsDto::is_tuner_channels_Set() const{
    return m_tuner_channels_isSet;
}

bool OAIChannelMappingOptionsDto::is_tuner_channels_Valid() const{
    return m_tuner_channels_isValid;
}

bool OAIChannelMappingOptionsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuner_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelMappingOptionsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
