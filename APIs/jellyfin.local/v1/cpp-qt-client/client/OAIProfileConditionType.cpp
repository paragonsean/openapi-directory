/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileConditionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileConditionType::OAIProfileConditionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileConditionType::OAIProfileConditionType() {
    this->initializeModel();
}

OAIProfileConditionType::~OAIProfileConditionType() {}

void OAIProfileConditionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProfileConditionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProfileConditionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Equals", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionType::EQUALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotEquals", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionType::NOTEQUALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LessThanEqual", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionType::LESSTHANEQUAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GreaterThanEqual", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionType::GREATERTHANEQUAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EqualsAny", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProfileConditionType::EQUALSANY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProfileConditionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProfileConditionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProfileConditionType::EQUALS:
            val = "Equals";
            break;
        case eOAIProfileConditionType::NOTEQUALS:
            val = "NotEquals";
            break;
        case eOAIProfileConditionType::LESSTHANEQUAL:
            val = "LessThanEqual";
            break;
        case eOAIProfileConditionType::GREATERTHANEQUAL:
            val = "GreaterThanEqual";
            break;
        case eOAIProfileConditionType::EQUALSANY:
            val = "EqualsAny";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProfileConditionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProfileConditionType::eOAIProfileConditionType OAIProfileConditionType::getValue() const {
    return m_value;
}

void OAIProfileConditionType::setValue(const OAIProfileConditionType::eOAIProfileConditionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProfileConditionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIProfileConditionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
