/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDlnaServerApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDlnaServerApi::OAIDlnaServerApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDlnaServerApi::~OAIDlnaServerApi() {
}

void OAIDlnaServerApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://jellyfin.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://localhost"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getConnectionManager", defaultConf);
    _serverIndices.insert("getConnectionManager", 0);
    _serverConfigs.insert("getConnectionManager2", defaultConf);
    _serverIndices.insert("getConnectionManager2", 0);
    _serverConfigs.insert("getConnectionManager3", defaultConf);
    _serverIndices.insert("getConnectionManager3", 0);
    _serverConfigs.insert("getContentDirectory", defaultConf);
    _serverIndices.insert("getContentDirectory", 0);
    _serverConfigs.insert("getContentDirectory2", defaultConf);
    _serverIndices.insert("getContentDirectory2", 0);
    _serverConfigs.insert("getContentDirectory3", defaultConf);
    _serverIndices.insert("getContentDirectory3", 0);
    _serverConfigs.insert("getDescriptionXml", defaultConf);
    _serverIndices.insert("getDescriptionXml", 0);
    _serverConfigs.insert("getDescriptionXml2", defaultConf);
    _serverIndices.insert("getDescriptionXml2", 0);
    _serverConfigs.insert("getIcon", defaultConf);
    _serverIndices.insert("getIcon", 0);
    _serverConfigs.insert("getIconId", defaultConf);
    _serverIndices.insert("getIconId", 0);
    _serverConfigs.insert("getMediaReceiverRegistrar", defaultConf);
    _serverIndices.insert("getMediaReceiverRegistrar", 0);
    _serverConfigs.insert("getMediaReceiverRegistrar2", defaultConf);
    _serverIndices.insert("getMediaReceiverRegistrar2", 0);
    _serverConfigs.insert("getMediaReceiverRegistrar3", defaultConf);
    _serverIndices.insert("getMediaReceiverRegistrar3", 0);
    _serverConfigs.insert("processConnectionManagerControlRequest", defaultConf);
    _serverIndices.insert("processConnectionManagerControlRequest", 0);
    _serverConfigs.insert("processContentDirectoryControlRequest", defaultConf);
    _serverIndices.insert("processContentDirectoryControlRequest", 0);
    _serverConfigs.insert("processMediaReceiverRegistrarControlRequest", defaultConf);
    _serverIndices.insert("processMediaReceiverRegistrarControlRequest", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDlnaServerApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDlnaServerApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDlnaServerApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDlnaServerApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDlnaServerApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDlnaServerApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDlnaServerApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDlnaServerApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDlnaServerApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDlnaServerApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDlnaServerApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDlnaServerApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDlnaServerApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDlnaServerApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDlnaServerApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDlnaServerApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDlnaServerApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDlnaServerApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDlnaServerApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDlnaServerApi::getConnectionManager(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getConnectionManager"][_serverIndices.value("getConnectionManager")].URL()+"/Dlna/{serverId}/ConnectionManager");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getConnectionManagerCallback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getConnectionManagerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getConnectionManagerSignal(output);
        Q_EMIT getConnectionManagerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getConnectionManagerSignalE(output, error_type, error_str);
        Q_EMIT getConnectionManagerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getConnectionManagerSignalError(output, error_type, error_str);
        Q_EMIT getConnectionManagerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getConnectionManager2(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getConnectionManager2"][_serverIndices.value("getConnectionManager2")].URL()+"/Dlna/{serverId}/ConnectionManager/ConnectionManager");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getConnectionManager2Callback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getConnectionManager2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getConnectionManager2Signal(output);
        Q_EMIT getConnectionManager2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getConnectionManager2SignalE(output, error_type, error_str);
        Q_EMIT getConnectionManager2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getConnectionManager2SignalError(output, error_type, error_str);
        Q_EMIT getConnectionManager2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getConnectionManager3(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getConnectionManager3"][_serverIndices.value("getConnectionManager3")].URL()+"/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getConnectionManager3Callback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getConnectionManager3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getConnectionManager3Signal(output);
        Q_EMIT getConnectionManager3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getConnectionManager3SignalE(output, error_type, error_str);
        Q_EMIT getConnectionManager3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getConnectionManager3SignalError(output, error_type, error_str);
        Q_EMIT getConnectionManager3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getContentDirectory(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getContentDirectory"][_serverIndices.value("getContentDirectory")].URL()+"/Dlna/{serverId}/ContentDirectory");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getContentDirectoryCallback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getContentDirectoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getContentDirectorySignal(output);
        Q_EMIT getContentDirectorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getContentDirectorySignalE(output, error_type, error_str);
        Q_EMIT getContentDirectorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getContentDirectorySignalError(output, error_type, error_str);
        Q_EMIT getContentDirectorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getContentDirectory2(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getContentDirectory2"][_serverIndices.value("getContentDirectory2")].URL()+"/Dlna/{serverId}/ContentDirectory/ContentDirectory");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getContentDirectory2Callback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getContentDirectory2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getContentDirectory2Signal(output);
        Q_EMIT getContentDirectory2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getContentDirectory2SignalE(output, error_type, error_str);
        Q_EMIT getContentDirectory2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getContentDirectory2SignalError(output, error_type, error_str);
        Q_EMIT getContentDirectory2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getContentDirectory3(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getContentDirectory3"][_serverIndices.value("getContentDirectory3")].URL()+"/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getContentDirectory3Callback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getContentDirectory3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getContentDirectory3Signal(output);
        Q_EMIT getContentDirectory3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getContentDirectory3SignalE(output, error_type, error_str);
        Q_EMIT getContentDirectory3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getContentDirectory3SignalError(output, error_type, error_str);
        Q_EMIT getContentDirectory3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getDescriptionXml(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getDescriptionXml"][_serverIndices.value("getDescriptionXml")].URL()+"/Dlna/{serverId}/description");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getDescriptionXmlCallback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getDescriptionXmlCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDescriptionXmlSignal(output);
        Q_EMIT getDescriptionXmlSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDescriptionXmlSignalE(output, error_type, error_str);
        Q_EMIT getDescriptionXmlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDescriptionXmlSignalError(output, error_type, error_str);
        Q_EMIT getDescriptionXmlSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getDescriptionXml2(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getDescriptionXml2"][_serverIndices.value("getDescriptionXml2")].URL()+"/Dlna/{serverId}/description.xml");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getDescriptionXml2Callback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getDescriptionXml2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDescriptionXml2Signal(output);
        Q_EMIT getDescriptionXml2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDescriptionXml2SignalE(output, error_type, error_str);
        Q_EMIT getDescriptionXml2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDescriptionXml2SignalError(output, error_type, error_str);
        Q_EMIT getDescriptionXml2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getIcon(const QString &file_name) {
    QString fullPath = QString(_serverConfigs["getIcon"][_serverIndices.value("getIcon")].URL()+"/Dlna/icons/{fileName}");
    
    
    {
        QString file_namePathParam("{");
        file_namePathParam.append("fileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "fileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"fileName"+pathSuffix : pathPrefix;
        fullPath.replace(file_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getIconCallback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getIconCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getIconSignal(output);
        Q_EMIT getIconSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getIconSignalE(output, error_type, error_str);
        Q_EMIT getIconSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getIconSignalError(output, error_type, error_str);
        Q_EMIT getIconSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getIconId(const QString &server_id, const QString &file_name) {
    QString fullPath = QString(_serverConfigs["getIconId"][_serverIndices.value("getIconId")].URL()+"/Dlna/{serverId}/icons/{fileName}");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    
    {
        QString file_namePathParam("{");
        file_namePathParam.append("fileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "fileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"fileName"+pathSuffix : pathPrefix;
        fullPath.replace(file_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getIconIdCallback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getIconIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getIconIdSignal(output);
        Q_EMIT getIconIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getIconIdSignalE(output, error_type, error_str);
        Q_EMIT getIconIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getIconIdSignalError(output, error_type, error_str);
        Q_EMIT getIconIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getMediaReceiverRegistrar(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getMediaReceiverRegistrar"][_serverIndices.value("getMediaReceiverRegistrar")].URL()+"/Dlna/{serverId}/MediaReceiverRegistrar");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getMediaReceiverRegistrarCallback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getMediaReceiverRegistrarCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMediaReceiverRegistrarSignal(output);
        Q_EMIT getMediaReceiverRegistrarSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMediaReceiverRegistrarSignalE(output, error_type, error_str);
        Q_EMIT getMediaReceiverRegistrarSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMediaReceiverRegistrarSignalError(output, error_type, error_str);
        Q_EMIT getMediaReceiverRegistrarSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getMediaReceiverRegistrar2(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getMediaReceiverRegistrar2"][_serverIndices.value("getMediaReceiverRegistrar2")].URL()+"/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getMediaReceiverRegistrar2Callback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getMediaReceiverRegistrar2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMediaReceiverRegistrar2Signal(output);
        Q_EMIT getMediaReceiverRegistrar2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMediaReceiverRegistrar2SignalE(output, error_type, error_str);
        Q_EMIT getMediaReceiverRegistrar2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMediaReceiverRegistrar2SignalError(output, error_type, error_str);
        Q_EMIT getMediaReceiverRegistrar2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::getMediaReceiverRegistrar3(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["getMediaReceiverRegistrar3"][_serverIndices.value("getMediaReceiverRegistrar3")].URL()+"/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::getMediaReceiverRegistrar3Callback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::getMediaReceiverRegistrar3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMediaReceiverRegistrar3Signal(output);
        Q_EMIT getMediaReceiverRegistrar3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMediaReceiverRegistrar3SignalE(output, error_type, error_str);
        Q_EMIT getMediaReceiverRegistrar3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMediaReceiverRegistrar3SignalError(output, error_type, error_str);
        Q_EMIT getMediaReceiverRegistrar3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::processConnectionManagerControlRequest(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["processConnectionManagerControlRequest"][_serverIndices.value("processConnectionManagerControlRequest")].URL()+"/Dlna/{serverId}/ConnectionManager/Control");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::processConnectionManagerControlRequestCallback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::processConnectionManagerControlRequestCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT processConnectionManagerControlRequestSignal(output);
        Q_EMIT processConnectionManagerControlRequestSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT processConnectionManagerControlRequestSignalE(output, error_type, error_str);
        Q_EMIT processConnectionManagerControlRequestSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT processConnectionManagerControlRequestSignalError(output, error_type, error_str);
        Q_EMIT processConnectionManagerControlRequestSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::processContentDirectoryControlRequest(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["processContentDirectoryControlRequest"][_serverIndices.value("processContentDirectoryControlRequest")].URL()+"/Dlna/{serverId}/ContentDirectory/Control");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::processContentDirectoryControlRequestCallback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::processContentDirectoryControlRequestCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT processContentDirectoryControlRequestSignal(output);
        Q_EMIT processContentDirectoryControlRequestSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT processContentDirectoryControlRequestSignalE(output, error_type, error_str);
        Q_EMIT processContentDirectoryControlRequestSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT processContentDirectoryControlRequestSignalError(output, error_type, error_str);
        Q_EMIT processContentDirectoryControlRequestSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::processMediaReceiverRegistrarControlRequest(const QString &server_id) {
    QString fullPath = QString(_serverConfigs["processMediaReceiverRegistrarControlRequest"][_serverIndices.value("processMediaReceiverRegistrarControlRequest")].URL()+"/Dlna/{serverId}/MediaReceiverRegistrar/Control");
    
    
    {
        QString server_idPathParam("{");
        server_idPathParam.append("serverId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "serverId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"serverId"+pathSuffix : pathPrefix;
        fullPath.replace(server_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(server_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDlnaServerApi::processMediaReceiverRegistrarControlRequestCallback);
    connect(this, &OAIDlnaServerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDlnaServerApi::processMediaReceiverRegistrarControlRequestCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT processMediaReceiverRegistrarControlRequestSignal(output);
        Q_EMIT processMediaReceiverRegistrarControlRequestSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT processMediaReceiverRegistrarControlRequestSignalE(output, error_type, error_str);
        Q_EMIT processMediaReceiverRegistrarControlRequestSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT processMediaReceiverRegistrarControlRequestSignalError(output, error_type, error_str);
        Q_EMIT processMediaReceiverRegistrarControlRequestSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDlnaServerApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
