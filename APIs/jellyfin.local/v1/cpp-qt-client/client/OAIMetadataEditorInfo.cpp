/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataEditorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataEditorInfo::OAIMetadataEditorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataEditorInfo::OAIMetadataEditorInfo() {
    this->initializeModel();
}

OAIMetadataEditorInfo::~OAIMetadataEditorInfo() {}

void OAIMetadataEditorInfo::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_content_type_options_isSet = false;
    m_content_type_options_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_cultures_isSet = false;
    m_cultures_isValid = false;

    m_external_id_infos_isSet = false;
    m_external_id_infos_isValid = false;

    m_parental_rating_options_isSet = false;
    m_parental_rating_options_isValid = false;
}

void OAIMetadataEditorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataEditorInfo::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_content_type_options_isValid = ::OpenAPI::fromJsonValue(m_content_type_options, json[QString("ContentTypeOptions")]);
    m_content_type_options_isSet = !json[QString("ContentTypeOptions")].isNull() && m_content_type_options_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("Countries")]);
    m_countries_isSet = !json[QString("Countries")].isNull() && m_countries_isValid;

    m_cultures_isValid = ::OpenAPI::fromJsonValue(m_cultures, json[QString("Cultures")]);
    m_cultures_isSet = !json[QString("Cultures")].isNull() && m_cultures_isValid;

    m_external_id_infos_isValid = ::OpenAPI::fromJsonValue(m_external_id_infos, json[QString("ExternalIdInfos")]);
    m_external_id_infos_isSet = !json[QString("ExternalIdInfos")].isNull() && m_external_id_infos_isValid;

    m_parental_rating_options_isValid = ::OpenAPI::fromJsonValue(m_parental_rating_options, json[QString("ParentalRatingOptions")]);
    m_parental_rating_options_isSet = !json[QString("ParentalRatingOptions")].isNull() && m_parental_rating_options_isValid;
}

QString OAIMetadataEditorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataEditorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_content_type_options.size() > 0) {
        obj.insert(QString("ContentTypeOptions"), ::OpenAPI::toJsonValue(m_content_type_options));
    }
    if (m_countries.size() > 0) {
        obj.insert(QString("Countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_cultures.size() > 0) {
        obj.insert(QString("Cultures"), ::OpenAPI::toJsonValue(m_cultures));
    }
    if (m_external_id_infos.size() > 0) {
        obj.insert(QString("ExternalIdInfos"), ::OpenAPI::toJsonValue(m_external_id_infos));
    }
    if (m_parental_rating_options.size() > 0) {
        obj.insert(QString("ParentalRatingOptions"), ::OpenAPI::toJsonValue(m_parental_rating_options));
    }
    return obj;
}

QString OAIMetadataEditorInfo::getContentType() const {
    return m_content_type;
}
void OAIMetadataEditorInfo::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIMetadataEditorInfo::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIMetadataEditorInfo::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QList<OAINameValuePair> OAIMetadataEditorInfo::getContentTypeOptions() const {
    return m_content_type_options;
}
void OAIMetadataEditorInfo::setContentTypeOptions(const QList<OAINameValuePair> &content_type_options) {
    m_content_type_options = content_type_options;
    m_content_type_options_isSet = true;
}

bool OAIMetadataEditorInfo::is_content_type_options_Set() const{
    return m_content_type_options_isSet;
}

bool OAIMetadataEditorInfo::is_content_type_options_Valid() const{
    return m_content_type_options_isValid;
}

QList<OAICountryInfo> OAIMetadataEditorInfo::getCountries() const {
    return m_countries;
}
void OAIMetadataEditorInfo::setCountries(const QList<OAICountryInfo> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAIMetadataEditorInfo::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIMetadataEditorInfo::is_countries_Valid() const{
    return m_countries_isValid;
}

QList<OAICultureDto> OAIMetadataEditorInfo::getCultures() const {
    return m_cultures;
}
void OAIMetadataEditorInfo::setCultures(const QList<OAICultureDto> &cultures) {
    m_cultures = cultures;
    m_cultures_isSet = true;
}

bool OAIMetadataEditorInfo::is_cultures_Set() const{
    return m_cultures_isSet;
}

bool OAIMetadataEditorInfo::is_cultures_Valid() const{
    return m_cultures_isValid;
}

QList<OAIExternalIdInfo> OAIMetadataEditorInfo::getExternalIdInfos() const {
    return m_external_id_infos;
}
void OAIMetadataEditorInfo::setExternalIdInfos(const QList<OAIExternalIdInfo> &external_id_infos) {
    m_external_id_infos = external_id_infos;
    m_external_id_infos_isSet = true;
}

bool OAIMetadataEditorInfo::is_external_id_infos_Set() const{
    return m_external_id_infos_isSet;
}

bool OAIMetadataEditorInfo::is_external_id_infos_Valid() const{
    return m_external_id_infos_isValid;
}

QList<OAIParentalRating> OAIMetadataEditorInfo::getParentalRatingOptions() const {
    return m_parental_rating_options;
}
void OAIMetadataEditorInfo::setParentalRatingOptions(const QList<OAIParentalRating> &parental_rating_options) {
    m_parental_rating_options = parental_rating_options;
    m_parental_rating_options_isSet = true;
}

bool OAIMetadataEditorInfo::is_parental_rating_options_Set() const{
    return m_parental_rating_options_isSet;
}

bool OAIMetadataEditorInfo::is_parental_rating_options_Valid() const{
    return m_parental_rating_options_isValid;
}

bool OAIMetadataEditorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cultures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parental_rating_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataEditorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
