/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurationPageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurationPageInfo::OAIConfigurationPageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurationPageInfo::OAIConfigurationPageInfo() {
    this->initializeModel();
}

OAIConfigurationPageInfo::~OAIConfigurationPageInfo() {}

void OAIConfigurationPageInfo::initializeModel() {

    m_configuration_page_type_isSet = false;
    m_configuration_page_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_in_main_menu_isSet = false;
    m_enable_in_main_menu_isValid = false;

    m_menu_icon_isSet = false;
    m_menu_icon_isValid = false;

    m_menu_section_isSet = false;
    m_menu_section_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_plugin_id_isSet = false;
    m_plugin_id_isValid = false;
}

void OAIConfigurationPageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurationPageInfo::fromJsonObject(QJsonObject json) {

    m_configuration_page_type_isValid = ::OpenAPI::fromJsonValue(m_configuration_page_type, json[QString("ConfigurationPageType")]);
    m_configuration_page_type_isSet = !json[QString("ConfigurationPageType")].isNull() && m_configuration_page_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_enable_in_main_menu_isValid = ::OpenAPI::fromJsonValue(m_enable_in_main_menu, json[QString("EnableInMainMenu")]);
    m_enable_in_main_menu_isSet = !json[QString("EnableInMainMenu")].isNull() && m_enable_in_main_menu_isValid;

    m_menu_icon_isValid = ::OpenAPI::fromJsonValue(m_menu_icon, json[QString("MenuIcon")]);
    m_menu_icon_isSet = !json[QString("MenuIcon")].isNull() && m_menu_icon_isValid;

    m_menu_section_isValid = ::OpenAPI::fromJsonValue(m_menu_section, json[QString("MenuSection")]);
    m_menu_section_isSet = !json[QString("MenuSection")].isNull() && m_menu_section_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_plugin_id_isValid = ::OpenAPI::fromJsonValue(m_plugin_id, json[QString("PluginId")]);
    m_plugin_id_isSet = !json[QString("PluginId")].isNull() && m_plugin_id_isValid;
}

QString OAIConfigurationPageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurationPageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_page_type.isSet()) {
        obj.insert(QString("ConfigurationPageType"), ::OpenAPI::toJsonValue(m_configuration_page_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_in_main_menu_isSet) {
        obj.insert(QString("EnableInMainMenu"), ::OpenAPI::toJsonValue(m_enable_in_main_menu));
    }
    if (m_menu_icon_isSet) {
        obj.insert(QString("MenuIcon"), ::OpenAPI::toJsonValue(m_menu_icon));
    }
    if (m_menu_section_isSet) {
        obj.insert(QString("MenuSection"), ::OpenAPI::toJsonValue(m_menu_section));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_plugin_id_isSet) {
        obj.insert(QString("PluginId"), ::OpenAPI::toJsonValue(m_plugin_id));
    }
    return obj;
}

OAIConfigurationPageType OAIConfigurationPageInfo::getConfigurationPageType() const {
    return m_configuration_page_type;
}
void OAIConfigurationPageInfo::setConfigurationPageType(const OAIConfigurationPageType &configuration_page_type) {
    m_configuration_page_type = configuration_page_type;
    m_configuration_page_type_isSet = true;
}

bool OAIConfigurationPageInfo::is_configuration_page_type_Set() const{
    return m_configuration_page_type_isSet;
}

bool OAIConfigurationPageInfo::is_configuration_page_type_Valid() const{
    return m_configuration_page_type_isValid;
}

QString OAIConfigurationPageInfo::getDisplayName() const {
    return m_display_name;
}
void OAIConfigurationPageInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConfigurationPageInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConfigurationPageInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIConfigurationPageInfo::isEnableInMainMenu() const {
    return m_enable_in_main_menu;
}
void OAIConfigurationPageInfo::setEnableInMainMenu(const bool &enable_in_main_menu) {
    m_enable_in_main_menu = enable_in_main_menu;
    m_enable_in_main_menu_isSet = true;
}

bool OAIConfigurationPageInfo::is_enable_in_main_menu_Set() const{
    return m_enable_in_main_menu_isSet;
}

bool OAIConfigurationPageInfo::is_enable_in_main_menu_Valid() const{
    return m_enable_in_main_menu_isValid;
}

QString OAIConfigurationPageInfo::getMenuIcon() const {
    return m_menu_icon;
}
void OAIConfigurationPageInfo::setMenuIcon(const QString &menu_icon) {
    m_menu_icon = menu_icon;
    m_menu_icon_isSet = true;
}

bool OAIConfigurationPageInfo::is_menu_icon_Set() const{
    return m_menu_icon_isSet;
}

bool OAIConfigurationPageInfo::is_menu_icon_Valid() const{
    return m_menu_icon_isValid;
}

QString OAIConfigurationPageInfo::getMenuSection() const {
    return m_menu_section;
}
void OAIConfigurationPageInfo::setMenuSection(const QString &menu_section) {
    m_menu_section = menu_section;
    m_menu_section_isSet = true;
}

bool OAIConfigurationPageInfo::is_menu_section_Set() const{
    return m_menu_section_isSet;
}

bool OAIConfigurationPageInfo::is_menu_section_Valid() const{
    return m_menu_section_isValid;
}

QString OAIConfigurationPageInfo::getName() const {
    return m_name;
}
void OAIConfigurationPageInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConfigurationPageInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConfigurationPageInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConfigurationPageInfo::getPluginId() const {
    return m_plugin_id;
}
void OAIConfigurationPageInfo::setPluginId(const QString &plugin_id) {
    m_plugin_id = plugin_id;
    m_plugin_id_isSet = true;
}

bool OAIConfigurationPageInfo::is_plugin_id_Set() const{
    return m_plugin_id_isSet;
}

bool OAIConfigurationPageInfo::is_plugin_id_Valid() const{
    return m_plugin_id_isValid;
}

bool OAIConfigurationPageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_page_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_in_main_menu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugin_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurationPageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
