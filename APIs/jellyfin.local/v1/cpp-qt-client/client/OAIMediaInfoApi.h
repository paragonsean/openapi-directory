/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMediaInfoApi_H
#define OAI_OAIMediaInfoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAILiveStreamResponse.h"
#include "OAIOpenLiveStreamDto.h"
#include "OAIPlaybackInfoDto.h"
#include "OAIPlaybackInfoResponse.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMediaInfoApi : public QObject {
    Q_OBJECT

public:
    OAIMediaInfoApi(const int timeOut = 0);
    ~OAIMediaInfoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void closeLiveStream(const QString &live_stream_id);

    /**
    * @param[in]  size qint32 [optional]
    */
    virtual void getBitrateTestBytes(const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getPlaybackInfo(const QString &item_id, const QString &user_id);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  max_streaming_bitrate qint32 [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  auto_open_live_stream bool [optional]
    * @param[in]  enable_direct_play bool [optional]
    * @param[in]  enable_direct_stream bool [optional]
    * @param[in]  enable_transcoding bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  oai_playback_info_dto OAIPlaybackInfoDto [optional]
    */
    virtual void getPostedPlaybackInfo(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_streaming_bitrate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_open_live_stream = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_direct_play = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_direct_stream = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_transcoding = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPlaybackInfoDto> &oai_playback_info_dto = ::OpenAPI::OptionalParam<OAIPlaybackInfoDto>());

    /**
    * @param[in]  open_token QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  max_streaming_bitrate qint32 [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  item_id QString [optional]
    * @param[in]  enable_direct_play bool [optional]
    * @param[in]  enable_direct_stream bool [optional]
    * @param[in]  oai_open_live_stream_dto OAIOpenLiveStreamDto [optional]
    */
    virtual void openLiveStream(const ::OpenAPI::OptionalParam<QString> &open_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_streaming_bitrate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &item_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_direct_play = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_direct_stream = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIOpenLiveStreamDto> &oai_open_live_stream_dto = ::OpenAPI::OptionalParam<OAIOpenLiveStreamDto>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void closeLiveStreamCallback(OAIHttpRequestWorker *worker);
    void getBitrateTestBytesCallback(OAIHttpRequestWorker *worker);
    void getPlaybackInfoCallback(OAIHttpRequestWorker *worker);
    void getPostedPlaybackInfoCallback(OAIHttpRequestWorker *worker);
    void openLiveStreamCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void closeLiveStreamSignal();
    void getBitrateTestBytesSignal(OAIHttpFileElement summary);
    void getPlaybackInfoSignal(OAIPlaybackInfoResponse summary);
    void getPostedPlaybackInfoSignal(OAIPlaybackInfoResponse summary);
    void openLiveStreamSignal(OAILiveStreamResponse summary);


    void closeLiveStreamSignalFull(OAIHttpRequestWorker *worker);
    void getBitrateTestBytesSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPlaybackInfoSignalFull(OAIHttpRequestWorker *worker, OAIPlaybackInfoResponse summary);
    void getPostedPlaybackInfoSignalFull(OAIHttpRequestWorker *worker, OAIPlaybackInfoResponse summary);
    void openLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAILiveStreamResponse summary);

    Q_DECL_DEPRECATED_X("Use closeLiveStreamSignalError() instead")
    void closeLiveStreamSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void closeLiveStreamSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBitrateTestBytesSignalError() instead")
    void getBitrateTestBytesSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBitrateTestBytesSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaybackInfoSignalError() instead")
    void getPlaybackInfoSignalE(OAIPlaybackInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaybackInfoSignalError(OAIPlaybackInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostedPlaybackInfoSignalError() instead")
    void getPostedPlaybackInfoSignalE(OAIPlaybackInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostedPlaybackInfoSignalError(OAIPlaybackInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openLiveStreamSignalError() instead")
    void openLiveStreamSignalE(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void openLiveStreamSignalError(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use closeLiveStreamSignalErrorFull() instead")
    void closeLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void closeLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBitrateTestBytesSignalErrorFull() instead")
    void getBitrateTestBytesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBitrateTestBytesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlaybackInfoSignalErrorFull() instead")
    void getPlaybackInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlaybackInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostedPlaybackInfoSignalErrorFull() instead")
    void getPostedPlaybackInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostedPlaybackInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openLiveStreamSignalErrorFull() instead")
    void openLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
