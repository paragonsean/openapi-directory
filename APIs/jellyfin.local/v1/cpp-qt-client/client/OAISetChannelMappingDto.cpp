/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetChannelMappingDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetChannelMappingDto::OAISetChannelMappingDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetChannelMappingDto::OAISetChannelMappingDto() {
    this->initializeModel();
}

OAISetChannelMappingDto::~OAISetChannelMappingDto() {}

void OAISetChannelMappingDto::initializeModel() {

    m_provider_channel_id_isSet = false;
    m_provider_channel_id_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_tuner_channel_id_isSet = false;
    m_tuner_channel_id_isValid = false;
}

void OAISetChannelMappingDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetChannelMappingDto::fromJsonObject(QJsonObject json) {

    m_provider_channel_id_isValid = ::OpenAPI::fromJsonValue(m_provider_channel_id, json[QString("ProviderChannelId")]);
    m_provider_channel_id_isSet = !json[QString("ProviderChannelId")].isNull() && m_provider_channel_id_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("ProviderId")]);
    m_provider_id_isSet = !json[QString("ProviderId")].isNull() && m_provider_id_isValid;

    m_tuner_channel_id_isValid = ::OpenAPI::fromJsonValue(m_tuner_channel_id, json[QString("TunerChannelId")]);
    m_tuner_channel_id_isSet = !json[QString("TunerChannelId")].isNull() && m_tuner_channel_id_isValid;
}

QString OAISetChannelMappingDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetChannelMappingDto::asJsonObject() const {
    QJsonObject obj;
    if (m_provider_channel_id_isSet) {
        obj.insert(QString("ProviderChannelId"), ::OpenAPI::toJsonValue(m_provider_channel_id));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("ProviderId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_tuner_channel_id_isSet) {
        obj.insert(QString("TunerChannelId"), ::OpenAPI::toJsonValue(m_tuner_channel_id));
    }
    return obj;
}

QString OAISetChannelMappingDto::getProviderChannelId() const {
    return m_provider_channel_id;
}
void OAISetChannelMappingDto::setProviderChannelId(const QString &provider_channel_id) {
    m_provider_channel_id = provider_channel_id;
    m_provider_channel_id_isSet = true;
}

bool OAISetChannelMappingDto::is_provider_channel_id_Set() const{
    return m_provider_channel_id_isSet;
}

bool OAISetChannelMappingDto::is_provider_channel_id_Valid() const{
    return m_provider_channel_id_isValid;
}

QString OAISetChannelMappingDto::getProviderId() const {
    return m_provider_id;
}
void OAISetChannelMappingDto::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAISetChannelMappingDto::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAISetChannelMappingDto::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAISetChannelMappingDto::getTunerChannelId() const {
    return m_tuner_channel_id;
}
void OAISetChannelMappingDto::setTunerChannelId(const QString &tuner_channel_id) {
    m_tuner_channel_id = tuner_channel_id;
    m_tuner_channel_id_isSet = true;
}

bool OAISetChannelMappingDto::is_tuner_channel_id_Set() const{
    return m_tuner_channel_id_isSet;
}

bool OAISetChannelMappingDto::is_tuner_channel_id_Valid() const{
    return m_tuner_channel_id_isValid;
}

bool OAISetChannelMappingDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provider_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuner_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetChannelMappingDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_provider_channel_id_isValid && m_provider_id_isValid && m_tuner_channel_id_isValid && true;
}

} // namespace OpenAPI
