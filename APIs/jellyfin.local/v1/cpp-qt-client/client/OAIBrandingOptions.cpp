/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrandingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrandingOptions::OAIBrandingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrandingOptions::OAIBrandingOptions() {
    this->initializeModel();
}

OAIBrandingOptions::~OAIBrandingOptions() {}

void OAIBrandingOptions::initializeModel() {

    m_custom_css_isSet = false;
    m_custom_css_isValid = false;

    m_login_disclaimer_isSet = false;
    m_login_disclaimer_isValid = false;
}

void OAIBrandingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrandingOptions::fromJsonObject(QJsonObject json) {

    m_custom_css_isValid = ::OpenAPI::fromJsonValue(m_custom_css, json[QString("CustomCss")]);
    m_custom_css_isSet = !json[QString("CustomCss")].isNull() && m_custom_css_isValid;

    m_login_disclaimer_isValid = ::OpenAPI::fromJsonValue(m_login_disclaimer, json[QString("LoginDisclaimer")]);
    m_login_disclaimer_isSet = !json[QString("LoginDisclaimer")].isNull() && m_login_disclaimer_isValid;
}

QString OAIBrandingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrandingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_css_isSet) {
        obj.insert(QString("CustomCss"), ::OpenAPI::toJsonValue(m_custom_css));
    }
    if (m_login_disclaimer_isSet) {
        obj.insert(QString("LoginDisclaimer"), ::OpenAPI::toJsonValue(m_login_disclaimer));
    }
    return obj;
}

QString OAIBrandingOptions::getCustomCss() const {
    return m_custom_css;
}
void OAIBrandingOptions::setCustomCss(const QString &custom_css) {
    m_custom_css = custom_css;
    m_custom_css_isSet = true;
}

bool OAIBrandingOptions::is_custom_css_Set() const{
    return m_custom_css_isSet;
}

bool OAIBrandingOptions::is_custom_css_Valid() const{
    return m_custom_css_isValid;
}

QString OAIBrandingOptions::getLoginDisclaimer() const {
    return m_login_disclaimer;
}
void OAIBrandingOptions::setLoginDisclaimer(const QString &login_disclaimer) {
    m_login_disclaimer = login_disclaimer;
    m_login_disclaimer_isSet = true;
}

bool OAIBrandingOptions::is_login_disclaimer_Set() const{
    return m_login_disclaimer_isSet;
}

bool OAIBrandingOptions::is_login_disclaimer_Valid() const{
    return m_login_disclaimer_isValid;
}

bool OAIBrandingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_disclaimer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrandingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
