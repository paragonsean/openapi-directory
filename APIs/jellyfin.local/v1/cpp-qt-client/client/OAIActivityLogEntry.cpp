/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityLogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityLogEntry::OAIActivityLogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityLogEntry::OAIActivityLogEntry() {
    this->initializeModel();
}

OAIActivityLogEntry::~OAIActivityLogEntry() {}

void OAIActivityLogEntry::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_short_overview_isSet = false;
    m_short_overview_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_primary_image_tag_isSet = false;
    m_user_primary_image_tag_isValid = false;
}

void OAIActivityLogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityLogEntry::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemId")]);
    m_item_id_isSet = !json[QString("ItemId")].isNull() && m_item_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("Overview")]);
    m_overview_isSet = !json[QString("Overview")].isNull() && m_overview_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_short_overview_isValid = ::OpenAPI::fromJsonValue(m_short_overview, json[QString("ShortOverview")]);
    m_short_overview_isSet = !json[QString("ShortOverview")].isNull() && m_short_overview_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_user_primary_image_tag_isValid = ::OpenAPI::fromJsonValue(m_user_primary_image_tag, json[QString("UserPrimaryImageTag")]);
    m_user_primary_image_tag_isSet = !json[QString("UserPrimaryImageTag")].isNull() && m_user_primary_image_tag_isValid;
}

QString OAIActivityLogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityLogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overview_isSet) {
        obj.insert(QString("Overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_short_overview_isSet) {
        obj.insert(QString("ShortOverview"), ::OpenAPI::toJsonValue(m_short_overview));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_primary_image_tag_isSet) {
        obj.insert(QString("UserPrimaryImageTag"), ::OpenAPI::toJsonValue(m_user_primary_image_tag));
    }
    return obj;
}

QDateTime OAIActivityLogEntry::getDate() const {
    return m_date;
}
void OAIActivityLogEntry::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIActivityLogEntry::is_date_Set() const{
    return m_date_isSet;
}

bool OAIActivityLogEntry::is_date_Valid() const{
    return m_date_isValid;
}

qint64 OAIActivityLogEntry::getId() const {
    return m_id;
}
void OAIActivityLogEntry::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivityLogEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivityLogEntry::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActivityLogEntry::getItemId() const {
    return m_item_id;
}
void OAIActivityLogEntry::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIActivityLogEntry::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIActivityLogEntry::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIActivityLogEntry::getName() const {
    return m_name;
}
void OAIActivityLogEntry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActivityLogEntry::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActivityLogEntry::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIActivityLogEntry::getOverview() const {
    return m_overview;
}
void OAIActivityLogEntry::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIActivityLogEntry::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIActivityLogEntry::is_overview_Valid() const{
    return m_overview_isValid;
}

OAILogLevel OAIActivityLogEntry::getSeverity() const {
    return m_severity;
}
void OAIActivityLogEntry::setSeverity(const OAILogLevel &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIActivityLogEntry::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIActivityLogEntry::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIActivityLogEntry::getShortOverview() const {
    return m_short_overview;
}
void OAIActivityLogEntry::setShortOverview(const QString &short_overview) {
    m_short_overview = short_overview;
    m_short_overview_isSet = true;
}

bool OAIActivityLogEntry::is_short_overview_Set() const{
    return m_short_overview_isSet;
}

bool OAIActivityLogEntry::is_short_overview_Valid() const{
    return m_short_overview_isValid;
}

QString OAIActivityLogEntry::getType() const {
    return m_type;
}
void OAIActivityLogEntry::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActivityLogEntry::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActivityLogEntry::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIActivityLogEntry::getUserId() const {
    return m_user_id;
}
void OAIActivityLogEntry::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIActivityLogEntry::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIActivityLogEntry::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIActivityLogEntry::getUserPrimaryImageTag() const {
    return m_user_primary_image_tag;
}
void OAIActivityLogEntry::setUserPrimaryImageTag(const QString &user_primary_image_tag) {
    m_user_primary_image_tag = user_primary_image_tag;
    m_user_primary_image_tag_isSet = true;
}

bool OAIActivityLogEntry::is_user_primary_image_tag_Set() const{
    return m_user_primary_image_tag_isSet;
}

bool OAIActivityLogEntry::is_user_primary_image_tag_Valid() const{
    return m_user_primary_image_tag_isValid;
}

bool OAIActivityLogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_primary_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityLogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
