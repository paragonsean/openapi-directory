/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaStream::OAIMediaStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaStream::OAIMediaStream() {
    this->initializeModel();
}

OAIMediaStream::~OAIMediaStream() {}

void OAIMediaStream::initializeModel() {

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_average_frame_rate_isSet = false;
    m_average_frame_rate_isValid = false;

    m_bit_depth_isSet = false;
    m_bit_depth_isValid = false;

    m_bit_rate_isSet = false;
    m_bit_rate_isValid = false;

    m_channel_layout_isSet = false;
    m_channel_layout_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_codec_tag_isSet = false;
    m_codec_tag_isValid = false;

    m_codec_time_base_isSet = false;
    m_codec_time_base_isValid = false;

    m_color_primaries_isSet = false;
    m_color_primaries_isValid = false;

    m_color_range_isSet = false;
    m_color_range_isValid = false;

    m_color_space_isSet = false;
    m_color_space_isValid = false;

    m_color_transfer_isSet = false;
    m_color_transfer_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_delivery_method_isSet = false;
    m_delivery_method_isValid = false;

    m_delivery_url_isSet = false;
    m_delivery_url_isValid = false;

    m_display_title_isSet = false;
    m_display_title_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_is_avc_isSet = false;
    m_is_avc_isValid = false;

    m_is_anamorphic_isSet = false;
    m_is_anamorphic_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_external_isSet = false;
    m_is_external_isValid = false;

    m_is_external_url_isSet = false;
    m_is_external_url_isValid = false;

    m_is_forced_isSet = false;
    m_is_forced_isValid = false;

    m_is_interlaced_isSet = false;
    m_is_interlaced_isValid = false;

    m_is_text_subtitle_stream_isSet = false;
    m_is_text_subtitle_stream_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_nal_length_size_isSet = false;
    m_nal_length_size_isValid = false;

    m_packet_length_isSet = false;
    m_packet_length_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_pixel_format_isSet = false;
    m_pixel_format_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_real_frame_rate_isSet = false;
    m_real_frame_rate_isValid = false;

    m_ref_frames_isSet = false;
    m_ref_frames_isValid = false;

    m_sample_rate_isSet = false;
    m_sample_rate_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_supports_external_stream_isSet = false;
    m_supports_external_stream_isValid = false;

    m_time_base_isSet = false;
    m_time_base_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_video_range_isSet = false;
    m_video_range_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_localized_default_isSet = false;
    m_localized_default_isValid = false;

    m_localized_forced_isSet = false;
    m_localized_forced_isValid = false;

    m_localized_undefined_isSet = false;
    m_localized_undefined_isValid = false;
}

void OAIMediaStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaStream::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("AspectRatio")]);
    m_aspect_ratio_isSet = !json[QString("AspectRatio")].isNull() && m_aspect_ratio_isValid;

    m_average_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_average_frame_rate, json[QString("AverageFrameRate")]);
    m_average_frame_rate_isSet = !json[QString("AverageFrameRate")].isNull() && m_average_frame_rate_isValid;

    m_bit_depth_isValid = ::OpenAPI::fromJsonValue(m_bit_depth, json[QString("BitDepth")]);
    m_bit_depth_isSet = !json[QString("BitDepth")].isNull() && m_bit_depth_isValid;

    m_bit_rate_isValid = ::OpenAPI::fromJsonValue(m_bit_rate, json[QString("BitRate")]);
    m_bit_rate_isSet = !json[QString("BitRate")].isNull() && m_bit_rate_isValid;

    m_channel_layout_isValid = ::OpenAPI::fromJsonValue(m_channel_layout, json[QString("ChannelLayout")]);
    m_channel_layout_isSet = !json[QString("ChannelLayout")].isNull() && m_channel_layout_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("Channels")]);
    m_channels_isSet = !json[QString("Channels")].isNull() && m_channels_isValid;

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("Codec")]);
    m_codec_isSet = !json[QString("Codec")].isNull() && m_codec_isValid;

    m_codec_tag_isValid = ::OpenAPI::fromJsonValue(m_codec_tag, json[QString("CodecTag")]);
    m_codec_tag_isSet = !json[QString("CodecTag")].isNull() && m_codec_tag_isValid;

    m_codec_time_base_isValid = ::OpenAPI::fromJsonValue(m_codec_time_base, json[QString("CodecTimeBase")]);
    m_codec_time_base_isSet = !json[QString("CodecTimeBase")].isNull() && m_codec_time_base_isValid;

    m_color_primaries_isValid = ::OpenAPI::fromJsonValue(m_color_primaries, json[QString("ColorPrimaries")]);
    m_color_primaries_isSet = !json[QString("ColorPrimaries")].isNull() && m_color_primaries_isValid;

    m_color_range_isValid = ::OpenAPI::fromJsonValue(m_color_range, json[QString("ColorRange")]);
    m_color_range_isSet = !json[QString("ColorRange")].isNull() && m_color_range_isValid;

    m_color_space_isValid = ::OpenAPI::fromJsonValue(m_color_space, json[QString("ColorSpace")]);
    m_color_space_isSet = !json[QString("ColorSpace")].isNull() && m_color_space_isValid;

    m_color_transfer_isValid = ::OpenAPI::fromJsonValue(m_color_transfer, json[QString("ColorTransfer")]);
    m_color_transfer_isSet = !json[QString("ColorTransfer")].isNull() && m_color_transfer_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_delivery_method_isValid = ::OpenAPI::fromJsonValue(m_delivery_method, json[QString("DeliveryMethod")]);
    m_delivery_method_isSet = !json[QString("DeliveryMethod")].isNull() && m_delivery_method_isValid;

    m_delivery_url_isValid = ::OpenAPI::fromJsonValue(m_delivery_url, json[QString("DeliveryUrl")]);
    m_delivery_url_isSet = !json[QString("DeliveryUrl")].isNull() && m_delivery_url_isValid;

    m_display_title_isValid = ::OpenAPI::fromJsonValue(m_display_title, json[QString("DisplayTitle")]);
    m_display_title_isSet = !json[QString("DisplayTitle")].isNull() && m_display_title_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("Index")]);
    m_index_isSet = !json[QString("Index")].isNull() && m_index_isValid;

    m_is_avc_isValid = ::OpenAPI::fromJsonValue(m_is_avc, json[QString("IsAVC")]);
    m_is_avc_isSet = !json[QString("IsAVC")].isNull() && m_is_avc_isValid;

    m_is_anamorphic_isValid = ::OpenAPI::fromJsonValue(m_is_anamorphic, json[QString("IsAnamorphic")]);
    m_is_anamorphic_isSet = !json[QString("IsAnamorphic")].isNull() && m_is_anamorphic_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("IsDefault")]);
    m_is_default_isSet = !json[QString("IsDefault")].isNull() && m_is_default_isValid;

    m_is_external_isValid = ::OpenAPI::fromJsonValue(m_is_external, json[QString("IsExternal")]);
    m_is_external_isSet = !json[QString("IsExternal")].isNull() && m_is_external_isValid;

    m_is_external_url_isValid = ::OpenAPI::fromJsonValue(m_is_external_url, json[QString("IsExternalUrl")]);
    m_is_external_url_isSet = !json[QString("IsExternalUrl")].isNull() && m_is_external_url_isValid;

    m_is_forced_isValid = ::OpenAPI::fromJsonValue(m_is_forced, json[QString("IsForced")]);
    m_is_forced_isSet = !json[QString("IsForced")].isNull() && m_is_forced_isValid;

    m_is_interlaced_isValid = ::OpenAPI::fromJsonValue(m_is_interlaced, json[QString("IsInterlaced")]);
    m_is_interlaced_isSet = !json[QString("IsInterlaced")].isNull() && m_is_interlaced_isValid;

    m_is_text_subtitle_stream_isValid = ::OpenAPI::fromJsonValue(m_is_text_subtitle_stream, json[QString("IsTextSubtitleStream")]);
    m_is_text_subtitle_stream_isSet = !json[QString("IsTextSubtitleStream")].isNull() && m_is_text_subtitle_stream_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("Level")]);
    m_level_isSet = !json[QString("Level")].isNull() && m_level_isValid;

    m_nal_length_size_isValid = ::OpenAPI::fromJsonValue(m_nal_length_size, json[QString("NalLengthSize")]);
    m_nal_length_size_isSet = !json[QString("NalLengthSize")].isNull() && m_nal_length_size_isValid;

    m_packet_length_isValid = ::OpenAPI::fromJsonValue(m_packet_length, json[QString("PacketLength")]);
    m_packet_length_isSet = !json[QString("PacketLength")].isNull() && m_packet_length_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_pixel_format_isValid = ::OpenAPI::fromJsonValue(m_pixel_format, json[QString("PixelFormat")]);
    m_pixel_format_isSet = !json[QString("PixelFormat")].isNull() && m_pixel_format_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("Profile")]);
    m_profile_isSet = !json[QString("Profile")].isNull() && m_profile_isValid;

    m_real_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_real_frame_rate, json[QString("RealFrameRate")]);
    m_real_frame_rate_isSet = !json[QString("RealFrameRate")].isNull() && m_real_frame_rate_isValid;

    m_ref_frames_isValid = ::OpenAPI::fromJsonValue(m_ref_frames, json[QString("RefFrames")]);
    m_ref_frames_isSet = !json[QString("RefFrames")].isNull() && m_ref_frames_isValid;

    m_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_sample_rate, json[QString("SampleRate")]);
    m_sample_rate_isSet = !json[QString("SampleRate")].isNull() && m_sample_rate_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_supports_external_stream_isValid = ::OpenAPI::fromJsonValue(m_supports_external_stream, json[QString("SupportsExternalStream")]);
    m_supports_external_stream_isSet = !json[QString("SupportsExternalStream")].isNull() && m_supports_external_stream_isValid;

    m_time_base_isValid = ::OpenAPI::fromJsonValue(m_time_base, json[QString("TimeBase")]);
    m_time_base_isSet = !json[QString("TimeBase")].isNull() && m_time_base_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_video_range_isValid = ::OpenAPI::fromJsonValue(m_video_range, json[QString("VideoRange")]);
    m_video_range_isSet = !json[QString("VideoRange")].isNull() && m_video_range_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;

    m_localized_default_isValid = ::OpenAPI::fromJsonValue(m_localized_default, json[QString("localizedDefault")]);
    m_localized_default_isSet = !json[QString("localizedDefault")].isNull() && m_localized_default_isValid;

    m_localized_forced_isValid = ::OpenAPI::fromJsonValue(m_localized_forced, json[QString("localizedForced")]);
    m_localized_forced_isSet = !json[QString("localizedForced")].isNull() && m_localized_forced_isValid;

    m_localized_undefined_isValid = ::OpenAPI::fromJsonValue(m_localized_undefined, json[QString("localizedUndefined")]);
    m_localized_undefined_isSet = !json[QString("localizedUndefined")].isNull() && m_localized_undefined_isValid;
}

QString OAIMediaStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaStream::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("AspectRatio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_average_frame_rate_isSet) {
        obj.insert(QString("AverageFrameRate"), ::OpenAPI::toJsonValue(m_average_frame_rate));
    }
    if (m_bit_depth_isSet) {
        obj.insert(QString("BitDepth"), ::OpenAPI::toJsonValue(m_bit_depth));
    }
    if (m_bit_rate_isSet) {
        obj.insert(QString("BitRate"), ::OpenAPI::toJsonValue(m_bit_rate));
    }
    if (m_channel_layout_isSet) {
        obj.insert(QString("ChannelLayout"), ::OpenAPI::toJsonValue(m_channel_layout));
    }
    if (m_channels_isSet) {
        obj.insert(QString("Channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_codec_isSet) {
        obj.insert(QString("Codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_codec_tag_isSet) {
        obj.insert(QString("CodecTag"), ::OpenAPI::toJsonValue(m_codec_tag));
    }
    if (m_codec_time_base_isSet) {
        obj.insert(QString("CodecTimeBase"), ::OpenAPI::toJsonValue(m_codec_time_base));
    }
    if (m_color_primaries_isSet) {
        obj.insert(QString("ColorPrimaries"), ::OpenAPI::toJsonValue(m_color_primaries));
    }
    if (m_color_range_isSet) {
        obj.insert(QString("ColorRange"), ::OpenAPI::toJsonValue(m_color_range));
    }
    if (m_color_space_isSet) {
        obj.insert(QString("ColorSpace"), ::OpenAPI::toJsonValue(m_color_space));
    }
    if (m_color_transfer_isSet) {
        obj.insert(QString("ColorTransfer"), ::OpenAPI::toJsonValue(m_color_transfer));
    }
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_delivery_method.isSet()) {
        obj.insert(QString("DeliveryMethod"), ::OpenAPI::toJsonValue(m_delivery_method));
    }
    if (m_delivery_url_isSet) {
        obj.insert(QString("DeliveryUrl"), ::OpenAPI::toJsonValue(m_delivery_url));
    }
    if (m_display_title_isSet) {
        obj.insert(QString("DisplayTitle"), ::OpenAPI::toJsonValue(m_display_title));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_index_isSet) {
        obj.insert(QString("Index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_is_avc_isSet) {
        obj.insert(QString("IsAVC"), ::OpenAPI::toJsonValue(m_is_avc));
    }
    if (m_is_anamorphic_isSet) {
        obj.insert(QString("IsAnamorphic"), ::OpenAPI::toJsonValue(m_is_anamorphic));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("IsDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_external_isSet) {
        obj.insert(QString("IsExternal"), ::OpenAPI::toJsonValue(m_is_external));
    }
    if (m_is_external_url_isSet) {
        obj.insert(QString("IsExternalUrl"), ::OpenAPI::toJsonValue(m_is_external_url));
    }
    if (m_is_forced_isSet) {
        obj.insert(QString("IsForced"), ::OpenAPI::toJsonValue(m_is_forced));
    }
    if (m_is_interlaced_isSet) {
        obj.insert(QString("IsInterlaced"), ::OpenAPI::toJsonValue(m_is_interlaced));
    }
    if (m_is_text_subtitle_stream_isSet) {
        obj.insert(QString("IsTextSubtitleStream"), ::OpenAPI::toJsonValue(m_is_text_subtitle_stream));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_level_isSet) {
        obj.insert(QString("Level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_nal_length_size_isSet) {
        obj.insert(QString("NalLengthSize"), ::OpenAPI::toJsonValue(m_nal_length_size));
    }
    if (m_packet_length_isSet) {
        obj.insert(QString("PacketLength"), ::OpenAPI::toJsonValue(m_packet_length));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_pixel_format_isSet) {
        obj.insert(QString("PixelFormat"), ::OpenAPI::toJsonValue(m_pixel_format));
    }
    if (m_profile_isSet) {
        obj.insert(QString("Profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_real_frame_rate_isSet) {
        obj.insert(QString("RealFrameRate"), ::OpenAPI::toJsonValue(m_real_frame_rate));
    }
    if (m_ref_frames_isSet) {
        obj.insert(QString("RefFrames"), ::OpenAPI::toJsonValue(m_ref_frames));
    }
    if (m_sample_rate_isSet) {
        obj.insert(QString("SampleRate"), ::OpenAPI::toJsonValue(m_sample_rate));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_supports_external_stream_isSet) {
        obj.insert(QString("SupportsExternalStream"), ::OpenAPI::toJsonValue(m_supports_external_stream));
    }
    if (m_time_base_isSet) {
        obj.insert(QString("TimeBase"), ::OpenAPI::toJsonValue(m_time_base));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_video_range_isSet) {
        obj.insert(QString("VideoRange"), ::OpenAPI::toJsonValue(m_video_range));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_localized_default_isSet) {
        obj.insert(QString("localizedDefault"), ::OpenAPI::toJsonValue(m_localized_default));
    }
    if (m_localized_forced_isSet) {
        obj.insert(QString("localizedForced"), ::OpenAPI::toJsonValue(m_localized_forced));
    }
    if (m_localized_undefined_isSet) {
        obj.insert(QString("localizedUndefined"), ::OpenAPI::toJsonValue(m_localized_undefined));
    }
    return obj;
}

QString OAIMediaStream::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIMediaStream::setAspectRatio(const QString &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIMediaStream::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIMediaStream::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

float OAIMediaStream::getAverageFrameRate() const {
    return m_average_frame_rate;
}
void OAIMediaStream::setAverageFrameRate(const float &average_frame_rate) {
    m_average_frame_rate = average_frame_rate;
    m_average_frame_rate_isSet = true;
}

bool OAIMediaStream::is_average_frame_rate_Set() const{
    return m_average_frame_rate_isSet;
}

bool OAIMediaStream::is_average_frame_rate_Valid() const{
    return m_average_frame_rate_isValid;
}

qint32 OAIMediaStream::getBitDepth() const {
    return m_bit_depth;
}
void OAIMediaStream::setBitDepth(const qint32 &bit_depth) {
    m_bit_depth = bit_depth;
    m_bit_depth_isSet = true;
}

bool OAIMediaStream::is_bit_depth_Set() const{
    return m_bit_depth_isSet;
}

bool OAIMediaStream::is_bit_depth_Valid() const{
    return m_bit_depth_isValid;
}

qint32 OAIMediaStream::getBitRate() const {
    return m_bit_rate;
}
void OAIMediaStream::setBitRate(const qint32 &bit_rate) {
    m_bit_rate = bit_rate;
    m_bit_rate_isSet = true;
}

bool OAIMediaStream::is_bit_rate_Set() const{
    return m_bit_rate_isSet;
}

bool OAIMediaStream::is_bit_rate_Valid() const{
    return m_bit_rate_isValid;
}

QString OAIMediaStream::getChannelLayout() const {
    return m_channel_layout;
}
void OAIMediaStream::setChannelLayout(const QString &channel_layout) {
    m_channel_layout = channel_layout;
    m_channel_layout_isSet = true;
}

bool OAIMediaStream::is_channel_layout_Set() const{
    return m_channel_layout_isSet;
}

bool OAIMediaStream::is_channel_layout_Valid() const{
    return m_channel_layout_isValid;
}

qint32 OAIMediaStream::getChannels() const {
    return m_channels;
}
void OAIMediaStream::setChannels(const qint32 &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIMediaStream::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIMediaStream::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIMediaStream::getCodec() const {
    return m_codec;
}
void OAIMediaStream::setCodec(const QString &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAIMediaStream::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAIMediaStream::is_codec_Valid() const{
    return m_codec_isValid;
}

QString OAIMediaStream::getCodecTag() const {
    return m_codec_tag;
}
void OAIMediaStream::setCodecTag(const QString &codec_tag) {
    m_codec_tag = codec_tag;
    m_codec_tag_isSet = true;
}

bool OAIMediaStream::is_codec_tag_Set() const{
    return m_codec_tag_isSet;
}

bool OAIMediaStream::is_codec_tag_Valid() const{
    return m_codec_tag_isValid;
}

QString OAIMediaStream::getCodecTimeBase() const {
    return m_codec_time_base;
}
void OAIMediaStream::setCodecTimeBase(const QString &codec_time_base) {
    m_codec_time_base = codec_time_base;
    m_codec_time_base_isSet = true;
}

bool OAIMediaStream::is_codec_time_base_Set() const{
    return m_codec_time_base_isSet;
}

bool OAIMediaStream::is_codec_time_base_Valid() const{
    return m_codec_time_base_isValid;
}

QString OAIMediaStream::getColorPrimaries() const {
    return m_color_primaries;
}
void OAIMediaStream::setColorPrimaries(const QString &color_primaries) {
    m_color_primaries = color_primaries;
    m_color_primaries_isSet = true;
}

bool OAIMediaStream::is_color_primaries_Set() const{
    return m_color_primaries_isSet;
}

bool OAIMediaStream::is_color_primaries_Valid() const{
    return m_color_primaries_isValid;
}

QString OAIMediaStream::getColorRange() const {
    return m_color_range;
}
void OAIMediaStream::setColorRange(const QString &color_range) {
    m_color_range = color_range;
    m_color_range_isSet = true;
}

bool OAIMediaStream::is_color_range_Set() const{
    return m_color_range_isSet;
}

bool OAIMediaStream::is_color_range_Valid() const{
    return m_color_range_isValid;
}

QString OAIMediaStream::getColorSpace() const {
    return m_color_space;
}
void OAIMediaStream::setColorSpace(const QString &color_space) {
    m_color_space = color_space;
    m_color_space_isSet = true;
}

bool OAIMediaStream::is_color_space_Set() const{
    return m_color_space_isSet;
}

bool OAIMediaStream::is_color_space_Valid() const{
    return m_color_space_isValid;
}

QString OAIMediaStream::getColorTransfer() const {
    return m_color_transfer;
}
void OAIMediaStream::setColorTransfer(const QString &color_transfer) {
    m_color_transfer = color_transfer;
    m_color_transfer_isSet = true;
}

bool OAIMediaStream::is_color_transfer_Set() const{
    return m_color_transfer_isSet;
}

bool OAIMediaStream::is_color_transfer_Valid() const{
    return m_color_transfer_isValid;
}

QString OAIMediaStream::getComment() const {
    return m_comment;
}
void OAIMediaStream::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIMediaStream::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIMediaStream::is_comment_Valid() const{
    return m_comment_isValid;
}

OAISubtitleDeliveryMethod OAIMediaStream::getDeliveryMethod() const {
    return m_delivery_method;
}
void OAIMediaStream::setDeliveryMethod(const OAISubtitleDeliveryMethod &delivery_method) {
    m_delivery_method = delivery_method;
    m_delivery_method_isSet = true;
}

bool OAIMediaStream::is_delivery_method_Set() const{
    return m_delivery_method_isSet;
}

bool OAIMediaStream::is_delivery_method_Valid() const{
    return m_delivery_method_isValid;
}

QString OAIMediaStream::getDeliveryUrl() const {
    return m_delivery_url;
}
void OAIMediaStream::setDeliveryUrl(const QString &delivery_url) {
    m_delivery_url = delivery_url;
    m_delivery_url_isSet = true;
}

bool OAIMediaStream::is_delivery_url_Set() const{
    return m_delivery_url_isSet;
}

bool OAIMediaStream::is_delivery_url_Valid() const{
    return m_delivery_url_isValid;
}

QString OAIMediaStream::getDisplayTitle() const {
    return m_display_title;
}
void OAIMediaStream::setDisplayTitle(const QString &display_title) {
    m_display_title = display_title;
    m_display_title_isSet = true;
}

bool OAIMediaStream::is_display_title_Set() const{
    return m_display_title_isSet;
}

bool OAIMediaStream::is_display_title_Valid() const{
    return m_display_title_isValid;
}

qint32 OAIMediaStream::getHeight() const {
    return m_height;
}
void OAIMediaStream::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIMediaStream::is_height_Set() const{
    return m_height_isSet;
}

bool OAIMediaStream::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIMediaStream::getIndex() const {
    return m_index;
}
void OAIMediaStream::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIMediaStream::is_index_Set() const{
    return m_index_isSet;
}

bool OAIMediaStream::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIMediaStream::isIsAvc() const {
    return m_is_avc;
}
void OAIMediaStream::setIsAvc(const bool &is_avc) {
    m_is_avc = is_avc;
    m_is_avc_isSet = true;
}

bool OAIMediaStream::is_is_avc_Set() const{
    return m_is_avc_isSet;
}

bool OAIMediaStream::is_is_avc_Valid() const{
    return m_is_avc_isValid;
}

bool OAIMediaStream::isIsAnamorphic() const {
    return m_is_anamorphic;
}
void OAIMediaStream::setIsAnamorphic(const bool &is_anamorphic) {
    m_is_anamorphic = is_anamorphic;
    m_is_anamorphic_isSet = true;
}

bool OAIMediaStream::is_is_anamorphic_Set() const{
    return m_is_anamorphic_isSet;
}

bool OAIMediaStream::is_is_anamorphic_Valid() const{
    return m_is_anamorphic_isValid;
}

bool OAIMediaStream::isIsDefault() const {
    return m_is_default;
}
void OAIMediaStream::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIMediaStream::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIMediaStream::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAIMediaStream::isIsExternal() const {
    return m_is_external;
}
void OAIMediaStream::setIsExternal(const bool &is_external) {
    m_is_external = is_external;
    m_is_external_isSet = true;
}

bool OAIMediaStream::is_is_external_Set() const{
    return m_is_external_isSet;
}

bool OAIMediaStream::is_is_external_Valid() const{
    return m_is_external_isValid;
}

bool OAIMediaStream::isIsExternalUrl() const {
    return m_is_external_url;
}
void OAIMediaStream::setIsExternalUrl(const bool &is_external_url) {
    m_is_external_url = is_external_url;
    m_is_external_url_isSet = true;
}

bool OAIMediaStream::is_is_external_url_Set() const{
    return m_is_external_url_isSet;
}

bool OAIMediaStream::is_is_external_url_Valid() const{
    return m_is_external_url_isValid;
}

bool OAIMediaStream::isIsForced() const {
    return m_is_forced;
}
void OAIMediaStream::setIsForced(const bool &is_forced) {
    m_is_forced = is_forced;
    m_is_forced_isSet = true;
}

bool OAIMediaStream::is_is_forced_Set() const{
    return m_is_forced_isSet;
}

bool OAIMediaStream::is_is_forced_Valid() const{
    return m_is_forced_isValid;
}

bool OAIMediaStream::isIsInterlaced() const {
    return m_is_interlaced;
}
void OAIMediaStream::setIsInterlaced(const bool &is_interlaced) {
    m_is_interlaced = is_interlaced;
    m_is_interlaced_isSet = true;
}

bool OAIMediaStream::is_is_interlaced_Set() const{
    return m_is_interlaced_isSet;
}

bool OAIMediaStream::is_is_interlaced_Valid() const{
    return m_is_interlaced_isValid;
}

bool OAIMediaStream::isIsTextSubtitleStream() const {
    return m_is_text_subtitle_stream;
}
void OAIMediaStream::setIsTextSubtitleStream(const bool &is_text_subtitle_stream) {
    m_is_text_subtitle_stream = is_text_subtitle_stream;
    m_is_text_subtitle_stream_isSet = true;
}

bool OAIMediaStream::is_is_text_subtitle_stream_Set() const{
    return m_is_text_subtitle_stream_isSet;
}

bool OAIMediaStream::is_is_text_subtitle_stream_Valid() const{
    return m_is_text_subtitle_stream_isValid;
}

QString OAIMediaStream::getLanguage() const {
    return m_language;
}
void OAIMediaStream::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIMediaStream::is_language_Set() const{
    return m_language_isSet;
}

bool OAIMediaStream::is_language_Valid() const{
    return m_language_isValid;
}

double OAIMediaStream::getLevel() const {
    return m_level;
}
void OAIMediaStream::setLevel(const double &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIMediaStream::is_level_Set() const{
    return m_level_isSet;
}

bool OAIMediaStream::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIMediaStream::getNalLengthSize() const {
    return m_nal_length_size;
}
void OAIMediaStream::setNalLengthSize(const QString &nal_length_size) {
    m_nal_length_size = nal_length_size;
    m_nal_length_size_isSet = true;
}

bool OAIMediaStream::is_nal_length_size_Set() const{
    return m_nal_length_size_isSet;
}

bool OAIMediaStream::is_nal_length_size_Valid() const{
    return m_nal_length_size_isValid;
}

qint32 OAIMediaStream::getPacketLength() const {
    return m_packet_length;
}
void OAIMediaStream::setPacketLength(const qint32 &packet_length) {
    m_packet_length = packet_length;
    m_packet_length_isSet = true;
}

bool OAIMediaStream::is_packet_length_Set() const{
    return m_packet_length_isSet;
}

bool OAIMediaStream::is_packet_length_Valid() const{
    return m_packet_length_isValid;
}

QString OAIMediaStream::getPath() const {
    return m_path;
}
void OAIMediaStream::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIMediaStream::is_path_Set() const{
    return m_path_isSet;
}

bool OAIMediaStream::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIMediaStream::getPixelFormat() const {
    return m_pixel_format;
}
void OAIMediaStream::setPixelFormat(const QString &pixel_format) {
    m_pixel_format = pixel_format;
    m_pixel_format_isSet = true;
}

bool OAIMediaStream::is_pixel_format_Set() const{
    return m_pixel_format_isSet;
}

bool OAIMediaStream::is_pixel_format_Valid() const{
    return m_pixel_format_isValid;
}

QString OAIMediaStream::getProfile() const {
    return m_profile;
}
void OAIMediaStream::setProfile(const QString &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIMediaStream::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIMediaStream::is_profile_Valid() const{
    return m_profile_isValid;
}

float OAIMediaStream::getRealFrameRate() const {
    return m_real_frame_rate;
}
void OAIMediaStream::setRealFrameRate(const float &real_frame_rate) {
    m_real_frame_rate = real_frame_rate;
    m_real_frame_rate_isSet = true;
}

bool OAIMediaStream::is_real_frame_rate_Set() const{
    return m_real_frame_rate_isSet;
}

bool OAIMediaStream::is_real_frame_rate_Valid() const{
    return m_real_frame_rate_isValid;
}

qint32 OAIMediaStream::getRefFrames() const {
    return m_ref_frames;
}
void OAIMediaStream::setRefFrames(const qint32 &ref_frames) {
    m_ref_frames = ref_frames;
    m_ref_frames_isSet = true;
}

bool OAIMediaStream::is_ref_frames_Set() const{
    return m_ref_frames_isSet;
}

bool OAIMediaStream::is_ref_frames_Valid() const{
    return m_ref_frames_isValid;
}

qint32 OAIMediaStream::getSampleRate() const {
    return m_sample_rate;
}
void OAIMediaStream::setSampleRate(const qint32 &sample_rate) {
    m_sample_rate = sample_rate;
    m_sample_rate_isSet = true;
}

bool OAIMediaStream::is_sample_rate_Set() const{
    return m_sample_rate_isSet;
}

bool OAIMediaStream::is_sample_rate_Valid() const{
    return m_sample_rate_isValid;
}

qint32 OAIMediaStream::getScore() const {
    return m_score;
}
void OAIMediaStream::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIMediaStream::is_score_Set() const{
    return m_score_isSet;
}

bool OAIMediaStream::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIMediaStream::isSupportsExternalStream() const {
    return m_supports_external_stream;
}
void OAIMediaStream::setSupportsExternalStream(const bool &supports_external_stream) {
    m_supports_external_stream = supports_external_stream;
    m_supports_external_stream_isSet = true;
}

bool OAIMediaStream::is_supports_external_stream_Set() const{
    return m_supports_external_stream_isSet;
}

bool OAIMediaStream::is_supports_external_stream_Valid() const{
    return m_supports_external_stream_isValid;
}

QString OAIMediaStream::getTimeBase() const {
    return m_time_base;
}
void OAIMediaStream::setTimeBase(const QString &time_base) {
    m_time_base = time_base;
    m_time_base_isSet = true;
}

bool OAIMediaStream::is_time_base_Set() const{
    return m_time_base_isSet;
}

bool OAIMediaStream::is_time_base_Valid() const{
    return m_time_base_isValid;
}

QString OAIMediaStream::getTitle() const {
    return m_title;
}
void OAIMediaStream::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMediaStream::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMediaStream::is_title_Valid() const{
    return m_title_isValid;
}

OAIMediaStreamType OAIMediaStream::getType() const {
    return m_type;
}
void OAIMediaStream::setType(const OAIMediaStreamType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMediaStream::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMediaStream::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMediaStream::getVideoRange() const {
    return m_video_range;
}
void OAIMediaStream::setVideoRange(const QString &video_range) {
    m_video_range = video_range;
    m_video_range_isSet = true;
}

bool OAIMediaStream::is_video_range_Set() const{
    return m_video_range_isSet;
}

bool OAIMediaStream::is_video_range_Valid() const{
    return m_video_range_isValid;
}

qint32 OAIMediaStream::getWidth() const {
    return m_width;
}
void OAIMediaStream::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIMediaStream::is_width_Set() const{
    return m_width_isSet;
}

bool OAIMediaStream::is_width_Valid() const{
    return m_width_isValid;
}

QString OAIMediaStream::getLocalizedDefault() const {
    return m_localized_default;
}
void OAIMediaStream::setLocalizedDefault(const QString &localized_default) {
    m_localized_default = localized_default;
    m_localized_default_isSet = true;
}

bool OAIMediaStream::is_localized_default_Set() const{
    return m_localized_default_isSet;
}

bool OAIMediaStream::is_localized_default_Valid() const{
    return m_localized_default_isValid;
}

QString OAIMediaStream::getLocalizedForced() const {
    return m_localized_forced;
}
void OAIMediaStream::setLocalizedForced(const QString &localized_forced) {
    m_localized_forced = localized_forced;
    m_localized_forced_isSet = true;
}

bool OAIMediaStream::is_localized_forced_Set() const{
    return m_localized_forced_isSet;
}

bool OAIMediaStream::is_localized_forced_Valid() const{
    return m_localized_forced_isValid;
}

QString OAIMediaStream::getLocalizedUndefined() const {
    return m_localized_undefined;
}
void OAIMediaStream::setLocalizedUndefined(const QString &localized_undefined) {
    m_localized_undefined = localized_undefined;
    m_localized_undefined_isSet = true;
}

bool OAIMediaStream::is_localized_undefined_Set() const{
    return m_localized_undefined_isSet;
}

bool OAIMediaStream::is_localized_undefined_Valid() const{
    return m_localized_undefined_isValid;
}

bool OAIMediaStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bit_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_time_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_primaries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_avc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_anamorphic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_external_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_interlaced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_text_subtitle_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nal_length_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packet_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pixel_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_external_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_undefined_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
