/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDynamicHlsApi_H
#define OAI_OAIDynamicHlsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEncodingContext.h"
#include "OAIHttpFileElement.h"
#include "OAISubtitleDeliveryMethod.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDynamicHlsApi : public QObject {
    Q_OBJECT

public:
    OAIDynamicHlsApi(const int timeOut = 0);
    ~OAIDynamicHlsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  playlist_id QString [required]
    * @param[in]  segment_id qint32 [required]
    * @param[in]  container QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  max_streaming_bitrate qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    */
    virtual void getHlsAudioSegment(const QString &item_id, const QString &playlist_id, const qint32 &segment_id, const QString &container, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_streaming_bitrate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  playlist_id QString [required]
    * @param[in]  segment_id qint32 [required]
    * @param[in]  container QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    */
    virtual void getHlsVideoSegment(const QString &item_id, const QString &playlist_id, const qint32 &segment_id, const QString &container, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  media_source_id QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  max_streaming_bitrate qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    * @param[in]  enable_adaptive_bitrate_streaming bool [optional]
    */
    virtual void getMasterHlsAudioPlaylist(const QString &item_id, const QString &media_source_id, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_streaming_bitrate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>(), const ::OpenAPI::OptionalParam<bool> &enable_adaptive_bitrate_streaming = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  media_source_id QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    * @param[in]  enable_adaptive_bitrate_streaming bool [optional]
    */
    virtual void getMasterHlsVideoPlaylist(const QString &item_id, const QString &media_source_id, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>(), const ::OpenAPI::OptionalParam<bool> &enable_adaptive_bitrate_streaming = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  max_streaming_bitrate qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    */
    virtual void getVariantHlsAudioPlaylist(const QString &item_id, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_streaming_bitrate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    */
    virtual void getVariantHlsVideoPlaylist(const QString &item_id, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  media_source_id QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  max_streaming_bitrate qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    * @param[in]  enable_adaptive_bitrate_streaming bool [optional]
    */
    virtual void headMasterHlsAudioPlaylist(const QString &item_id, const QString &media_source_id, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_streaming_bitrate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>(), const ::OpenAPI::OptionalParam<bool> &enable_adaptive_bitrate_streaming = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  media_source_id QString [required]
    * @param[in]  r_static bool [optional]
    * @param[in]  params QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_profile_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  segment_container QString [optional]
    * @param[in]  segment_length qint32 [optional]
    * @param[in]  min_segments qint32 [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  audio_codec QString [optional]
    * @param[in]  enable_auto_stream_copy bool [optional]
    * @param[in]  allow_video_stream_copy bool [optional]
    * @param[in]  allow_audio_stream_copy bool [optional]
    * @param[in]  break_on_non_key_frames bool [optional]
    * @param[in]  audio_sample_rate qint32 [optional]
    * @param[in]  max_audio_bit_depth qint32 [optional]
    * @param[in]  audio_bit_rate qint32 [optional]
    * @param[in]  audio_channels qint32 [optional]
    * @param[in]  max_audio_channels qint32 [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  framerate float [optional]
    * @param[in]  max_framerate float [optional]
    * @param[in]  copy_timestamps bool [optional]
    * @param[in]  start_time_ticks qint64 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  video_bit_rate qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  subtitle_method OAISubtitleDeliveryMethod [optional]
    * @param[in]  max_ref_frames qint32 [optional]
    * @param[in]  max_video_bit_depth qint32 [optional]
    * @param[in]  require_avc bool [optional]
    * @param[in]  de_interlace bool [optional]
    * @param[in]  require_non_anamorphic bool [optional]
    * @param[in]  transcoding_max_audio_channels qint32 [optional]
    * @param[in]  cpu_core_limit qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  enable_mpegts_m2_ts_mode bool [optional]
    * @param[in]  video_codec QString [optional]
    * @param[in]  subtitle_codec QString [optional]
    * @param[in]  transcode_reasons QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  video_stream_index qint32 [optional]
    * @param[in]  context OAIEncodingContext [optional]
    * @param[in]  stream_options QMap<QString, QString> [optional]
    * @param[in]  enable_adaptive_bitrate_streaming bool [optional]
    */
    virtual void headMasterHlsVideoPlaylist(const QString &item_id, const QString &media_source_id, const ::OpenAPI::OptionalParam<bool> &r_static = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_profile_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &segment_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_segments = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &audio_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_auto_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_video_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_audio_stream_copy = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &break_on_non_key_frames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &audio_sample_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_framerate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &copy_timestamps = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &start_time_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_bit_rate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod> &subtitle_method = ::OpenAPI::OptionalParam<OAISubtitleDeliveryMethod>(), const ::OpenAPI::OptionalParam<qint32> &max_ref_frames = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_video_bit_depth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &require_avc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &de_interlace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_non_anamorphic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &transcoding_max_audio_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &cpu_core_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_mpegts_m2_ts_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &video_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subtitle_codec = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transcode_reasons = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &video_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEncodingContext> &context = ::OpenAPI::OptionalParam<OAIEncodingContext>(), const ::OpenAPI::OptionalParam<QMap<QString, QString>> &stream_options = ::OpenAPI::OptionalParam<QMap<QString, QString>>(), const ::OpenAPI::OptionalParam<bool> &enable_adaptive_bitrate_streaming = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getHlsAudioSegmentCallback(OAIHttpRequestWorker *worker);
    void getHlsVideoSegmentCallback(OAIHttpRequestWorker *worker);
    void getMasterHlsAudioPlaylistCallback(OAIHttpRequestWorker *worker);
    void getMasterHlsVideoPlaylistCallback(OAIHttpRequestWorker *worker);
    void getVariantHlsAudioPlaylistCallback(OAIHttpRequestWorker *worker);
    void getVariantHlsVideoPlaylistCallback(OAIHttpRequestWorker *worker);
    void headMasterHlsAudioPlaylistCallback(OAIHttpRequestWorker *worker);
    void headMasterHlsVideoPlaylistCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getHlsAudioSegmentSignal(OAIHttpFileElement summary);
    void getHlsVideoSegmentSignal(OAIHttpFileElement summary);
    void getMasterHlsAudioPlaylistSignal(OAIHttpFileElement summary);
    void getMasterHlsVideoPlaylistSignal(OAIHttpFileElement summary);
    void getVariantHlsAudioPlaylistSignal(OAIHttpFileElement summary);
    void getVariantHlsVideoPlaylistSignal(OAIHttpFileElement summary);
    void headMasterHlsAudioPlaylistSignal(OAIHttpFileElement summary);
    void headMasterHlsVideoPlaylistSignal(OAIHttpFileElement summary);


    void getHlsAudioSegmentSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getHlsVideoSegmentSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getMasterHlsAudioPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getMasterHlsVideoPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getVariantHlsAudioPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getVariantHlsVideoPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headMasterHlsAudioPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void headMasterHlsVideoPlaylistSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use getHlsAudioSegmentSignalError() instead")
    void getHlsAudioSegmentSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsAudioSegmentSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHlsVideoSegmentSignalError() instead")
    void getHlsVideoSegmentSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsVideoSegmentSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMasterHlsAudioPlaylistSignalError() instead")
    void getMasterHlsAudioPlaylistSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMasterHlsAudioPlaylistSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMasterHlsVideoPlaylistSignalError() instead")
    void getMasterHlsVideoPlaylistSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMasterHlsVideoPlaylistSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantHlsAudioPlaylistSignalError() instead")
    void getVariantHlsAudioPlaylistSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantHlsAudioPlaylistSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantHlsVideoPlaylistSignalError() instead")
    void getVariantHlsVideoPlaylistSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantHlsVideoPlaylistSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headMasterHlsAudioPlaylistSignalError() instead")
    void headMasterHlsAudioPlaylistSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headMasterHlsAudioPlaylistSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headMasterHlsVideoPlaylistSignalError() instead")
    void headMasterHlsVideoPlaylistSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void headMasterHlsVideoPlaylistSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getHlsAudioSegmentSignalErrorFull() instead")
    void getHlsAudioSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsAudioSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHlsVideoSegmentSignalErrorFull() instead")
    void getHlsVideoSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHlsVideoSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMasterHlsAudioPlaylistSignalErrorFull() instead")
    void getMasterHlsAudioPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMasterHlsAudioPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMasterHlsVideoPlaylistSignalErrorFull() instead")
    void getMasterHlsVideoPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMasterHlsVideoPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantHlsAudioPlaylistSignalErrorFull() instead")
    void getVariantHlsAudioPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantHlsAudioPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariantHlsVideoPlaylistSignalErrorFull() instead")
    void getVariantHlsVideoPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariantHlsVideoPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headMasterHlsAudioPlaylistSignalErrorFull() instead")
    void headMasterHlsAudioPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headMasterHlsAudioPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use headMasterHlsVideoPlaylistSignalErrorFull() instead")
    void headMasterHlsVideoPlaylistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void headMasterHlsVideoPlaylistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
