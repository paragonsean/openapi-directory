/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaybackProgressInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaybackProgressInfo::OAIPlaybackProgressInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaybackProgressInfo::OAIPlaybackProgressInfo() {
    this->initializeModel();
}

OAIPlaybackProgressInfo::~OAIPlaybackProgressInfo() {}

void OAIPlaybackProgressInfo::initializeModel() {

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_audio_stream_index_isSet = false;
    m_audio_stream_index_isValid = false;

    m_brightness_isSet = false;
    m_brightness_isValid = false;

    m_can_seek_isSet = false;
    m_can_seek_isValid = false;

    m_is_muted_isSet = false;
    m_is_muted_isValid = false;

    m_is_paused_isSet = false;
    m_is_paused_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_live_stream_id_isSet = false;
    m_live_stream_id_isValid = false;

    m_media_source_id_isSet = false;
    m_media_source_id_isValid = false;

    m_now_playing_queue_isSet = false;
    m_now_playing_queue_isValid = false;

    m_play_method_isSet = false;
    m_play_method_isValid = false;

    m_play_session_id_isSet = false;
    m_play_session_id_isValid = false;

    m_playback_start_time_ticks_isSet = false;
    m_playback_start_time_ticks_isValid = false;

    m_playlist_item_id_isSet = false;
    m_playlist_item_id_isValid = false;

    m_position_ticks_isSet = false;
    m_position_ticks_isValid = false;

    m_repeat_mode_isSet = false;
    m_repeat_mode_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_subtitle_stream_index_isSet = false;
    m_subtitle_stream_index_isValid = false;

    m_volume_level_isSet = false;
    m_volume_level_isValid = false;
}

void OAIPlaybackProgressInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaybackProgressInfo::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("AspectRatio")]);
    m_aspect_ratio_isSet = !json[QString("AspectRatio")].isNull() && m_aspect_ratio_isValid;

    m_audio_stream_index_isValid = ::OpenAPI::fromJsonValue(m_audio_stream_index, json[QString("AudioStreamIndex")]);
    m_audio_stream_index_isSet = !json[QString("AudioStreamIndex")].isNull() && m_audio_stream_index_isValid;

    m_brightness_isValid = ::OpenAPI::fromJsonValue(m_brightness, json[QString("Brightness")]);
    m_brightness_isSet = !json[QString("Brightness")].isNull() && m_brightness_isValid;

    m_can_seek_isValid = ::OpenAPI::fromJsonValue(m_can_seek, json[QString("CanSeek")]);
    m_can_seek_isSet = !json[QString("CanSeek")].isNull() && m_can_seek_isValid;

    m_is_muted_isValid = ::OpenAPI::fromJsonValue(m_is_muted, json[QString("IsMuted")]);
    m_is_muted_isSet = !json[QString("IsMuted")].isNull() && m_is_muted_isValid;

    m_is_paused_isValid = ::OpenAPI::fromJsonValue(m_is_paused, json[QString("IsPaused")]);
    m_is_paused_isSet = !json[QString("IsPaused")].isNull() && m_is_paused_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("Item")]);
    m_item_isSet = !json[QString("Item")].isNull() && m_item_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemId")]);
    m_item_id_isSet = !json[QString("ItemId")].isNull() && m_item_id_isValid;

    m_live_stream_id_isValid = ::OpenAPI::fromJsonValue(m_live_stream_id, json[QString("LiveStreamId")]);
    m_live_stream_id_isSet = !json[QString("LiveStreamId")].isNull() && m_live_stream_id_isValid;

    m_media_source_id_isValid = ::OpenAPI::fromJsonValue(m_media_source_id, json[QString("MediaSourceId")]);
    m_media_source_id_isSet = !json[QString("MediaSourceId")].isNull() && m_media_source_id_isValid;

    m_now_playing_queue_isValid = ::OpenAPI::fromJsonValue(m_now_playing_queue, json[QString("NowPlayingQueue")]);
    m_now_playing_queue_isSet = !json[QString("NowPlayingQueue")].isNull() && m_now_playing_queue_isValid;

    m_play_method_isValid = ::OpenAPI::fromJsonValue(m_play_method, json[QString("PlayMethod")]);
    m_play_method_isSet = !json[QString("PlayMethod")].isNull() && m_play_method_isValid;

    m_play_session_id_isValid = ::OpenAPI::fromJsonValue(m_play_session_id, json[QString("PlaySessionId")]);
    m_play_session_id_isSet = !json[QString("PlaySessionId")].isNull() && m_play_session_id_isValid;

    m_playback_start_time_ticks_isValid = ::OpenAPI::fromJsonValue(m_playback_start_time_ticks, json[QString("PlaybackStartTimeTicks")]);
    m_playback_start_time_ticks_isSet = !json[QString("PlaybackStartTimeTicks")].isNull() && m_playback_start_time_ticks_isValid;

    m_playlist_item_id_isValid = ::OpenAPI::fromJsonValue(m_playlist_item_id, json[QString("PlaylistItemId")]);
    m_playlist_item_id_isSet = !json[QString("PlaylistItemId")].isNull() && m_playlist_item_id_isValid;

    m_position_ticks_isValid = ::OpenAPI::fromJsonValue(m_position_ticks, json[QString("PositionTicks")]);
    m_position_ticks_isSet = !json[QString("PositionTicks")].isNull() && m_position_ticks_isValid;

    m_repeat_mode_isValid = ::OpenAPI::fromJsonValue(m_repeat_mode, json[QString("RepeatMode")]);
    m_repeat_mode_isSet = !json[QString("RepeatMode")].isNull() && m_repeat_mode_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("SessionId")]);
    m_session_id_isSet = !json[QString("SessionId")].isNull() && m_session_id_isValid;

    m_subtitle_stream_index_isValid = ::OpenAPI::fromJsonValue(m_subtitle_stream_index, json[QString("SubtitleStreamIndex")]);
    m_subtitle_stream_index_isSet = !json[QString("SubtitleStreamIndex")].isNull() && m_subtitle_stream_index_isValid;

    m_volume_level_isValid = ::OpenAPI::fromJsonValue(m_volume_level, json[QString("VolumeLevel")]);
    m_volume_level_isSet = !json[QString("VolumeLevel")].isNull() && m_volume_level_isValid;
}

QString OAIPlaybackProgressInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaybackProgressInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("AspectRatio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_audio_stream_index_isSet) {
        obj.insert(QString("AudioStreamIndex"), ::OpenAPI::toJsonValue(m_audio_stream_index));
    }
    if (m_brightness_isSet) {
        obj.insert(QString("Brightness"), ::OpenAPI::toJsonValue(m_brightness));
    }
    if (m_can_seek_isSet) {
        obj.insert(QString("CanSeek"), ::OpenAPI::toJsonValue(m_can_seek));
    }
    if (m_is_muted_isSet) {
        obj.insert(QString("IsMuted"), ::OpenAPI::toJsonValue(m_is_muted));
    }
    if (m_is_paused_isSet) {
        obj.insert(QString("IsPaused"), ::OpenAPI::toJsonValue(m_is_paused));
    }
    if (m_item.isSet()) {
        obj.insert(QString("Item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_live_stream_id_isSet) {
        obj.insert(QString("LiveStreamId"), ::OpenAPI::toJsonValue(m_live_stream_id));
    }
    if (m_media_source_id_isSet) {
        obj.insert(QString("MediaSourceId"), ::OpenAPI::toJsonValue(m_media_source_id));
    }
    if (m_now_playing_queue.size() > 0) {
        obj.insert(QString("NowPlayingQueue"), ::OpenAPI::toJsonValue(m_now_playing_queue));
    }
    if (m_play_method.isSet()) {
        obj.insert(QString("PlayMethod"), ::OpenAPI::toJsonValue(m_play_method));
    }
    if (m_play_session_id_isSet) {
        obj.insert(QString("PlaySessionId"), ::OpenAPI::toJsonValue(m_play_session_id));
    }
    if (m_playback_start_time_ticks_isSet) {
        obj.insert(QString("PlaybackStartTimeTicks"), ::OpenAPI::toJsonValue(m_playback_start_time_ticks));
    }
    if (m_playlist_item_id_isSet) {
        obj.insert(QString("PlaylistItemId"), ::OpenAPI::toJsonValue(m_playlist_item_id));
    }
    if (m_position_ticks_isSet) {
        obj.insert(QString("PositionTicks"), ::OpenAPI::toJsonValue(m_position_ticks));
    }
    if (m_repeat_mode.isSet()) {
        obj.insert(QString("RepeatMode"), ::OpenAPI::toJsonValue(m_repeat_mode));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("SessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_subtitle_stream_index_isSet) {
        obj.insert(QString("SubtitleStreamIndex"), ::OpenAPI::toJsonValue(m_subtitle_stream_index));
    }
    if (m_volume_level_isSet) {
        obj.insert(QString("VolumeLevel"), ::OpenAPI::toJsonValue(m_volume_level));
    }
    return obj;
}

QString OAIPlaybackProgressInfo::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIPlaybackProgressInfo::setAspectRatio(const QString &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIPlaybackProgressInfo::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIPlaybackProgressInfo::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

qint32 OAIPlaybackProgressInfo::getAudioStreamIndex() const {
    return m_audio_stream_index;
}
void OAIPlaybackProgressInfo::setAudioStreamIndex(const qint32 &audio_stream_index) {
    m_audio_stream_index = audio_stream_index;
    m_audio_stream_index_isSet = true;
}

bool OAIPlaybackProgressInfo::is_audio_stream_index_Set() const{
    return m_audio_stream_index_isSet;
}

bool OAIPlaybackProgressInfo::is_audio_stream_index_Valid() const{
    return m_audio_stream_index_isValid;
}

qint32 OAIPlaybackProgressInfo::getBrightness() const {
    return m_brightness;
}
void OAIPlaybackProgressInfo::setBrightness(const qint32 &brightness) {
    m_brightness = brightness;
    m_brightness_isSet = true;
}

bool OAIPlaybackProgressInfo::is_brightness_Set() const{
    return m_brightness_isSet;
}

bool OAIPlaybackProgressInfo::is_brightness_Valid() const{
    return m_brightness_isValid;
}

bool OAIPlaybackProgressInfo::isCanSeek() const {
    return m_can_seek;
}
void OAIPlaybackProgressInfo::setCanSeek(const bool &can_seek) {
    m_can_seek = can_seek;
    m_can_seek_isSet = true;
}

bool OAIPlaybackProgressInfo::is_can_seek_Set() const{
    return m_can_seek_isSet;
}

bool OAIPlaybackProgressInfo::is_can_seek_Valid() const{
    return m_can_seek_isValid;
}

bool OAIPlaybackProgressInfo::isIsMuted() const {
    return m_is_muted;
}
void OAIPlaybackProgressInfo::setIsMuted(const bool &is_muted) {
    m_is_muted = is_muted;
    m_is_muted_isSet = true;
}

bool OAIPlaybackProgressInfo::is_is_muted_Set() const{
    return m_is_muted_isSet;
}

bool OAIPlaybackProgressInfo::is_is_muted_Valid() const{
    return m_is_muted_isValid;
}

bool OAIPlaybackProgressInfo::isIsPaused() const {
    return m_is_paused;
}
void OAIPlaybackProgressInfo::setIsPaused(const bool &is_paused) {
    m_is_paused = is_paused;
    m_is_paused_isSet = true;
}

bool OAIPlaybackProgressInfo::is_is_paused_Set() const{
    return m_is_paused_isSet;
}

bool OAIPlaybackProgressInfo::is_is_paused_Valid() const{
    return m_is_paused_isValid;
}

OAIBaseItemDto OAIPlaybackProgressInfo::getItem() const {
    return m_item;
}
void OAIPlaybackProgressInfo::setItem(const OAIBaseItemDto &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIPlaybackProgressInfo::is_item_Set() const{
    return m_item_isSet;
}

bool OAIPlaybackProgressInfo::is_item_Valid() const{
    return m_item_isValid;
}

QString OAIPlaybackProgressInfo::getItemId() const {
    return m_item_id;
}
void OAIPlaybackProgressInfo::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIPlaybackProgressInfo::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIPlaybackProgressInfo::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIPlaybackProgressInfo::getLiveStreamId() const {
    return m_live_stream_id;
}
void OAIPlaybackProgressInfo::setLiveStreamId(const QString &live_stream_id) {
    m_live_stream_id = live_stream_id;
    m_live_stream_id_isSet = true;
}

bool OAIPlaybackProgressInfo::is_live_stream_id_Set() const{
    return m_live_stream_id_isSet;
}

bool OAIPlaybackProgressInfo::is_live_stream_id_Valid() const{
    return m_live_stream_id_isValid;
}

QString OAIPlaybackProgressInfo::getMediaSourceId() const {
    return m_media_source_id;
}
void OAIPlaybackProgressInfo::setMediaSourceId(const QString &media_source_id) {
    m_media_source_id = media_source_id;
    m_media_source_id_isSet = true;
}

bool OAIPlaybackProgressInfo::is_media_source_id_Set() const{
    return m_media_source_id_isSet;
}

bool OAIPlaybackProgressInfo::is_media_source_id_Valid() const{
    return m_media_source_id_isValid;
}

QList<OAIQueueItem> OAIPlaybackProgressInfo::getNowPlayingQueue() const {
    return m_now_playing_queue;
}
void OAIPlaybackProgressInfo::setNowPlayingQueue(const QList<OAIQueueItem> &now_playing_queue) {
    m_now_playing_queue = now_playing_queue;
    m_now_playing_queue_isSet = true;
}

bool OAIPlaybackProgressInfo::is_now_playing_queue_Set() const{
    return m_now_playing_queue_isSet;
}

bool OAIPlaybackProgressInfo::is_now_playing_queue_Valid() const{
    return m_now_playing_queue_isValid;
}

OAIPlayMethod OAIPlaybackProgressInfo::getPlayMethod() const {
    return m_play_method;
}
void OAIPlaybackProgressInfo::setPlayMethod(const OAIPlayMethod &play_method) {
    m_play_method = play_method;
    m_play_method_isSet = true;
}

bool OAIPlaybackProgressInfo::is_play_method_Set() const{
    return m_play_method_isSet;
}

bool OAIPlaybackProgressInfo::is_play_method_Valid() const{
    return m_play_method_isValid;
}

QString OAIPlaybackProgressInfo::getPlaySessionId() const {
    return m_play_session_id;
}
void OAIPlaybackProgressInfo::setPlaySessionId(const QString &play_session_id) {
    m_play_session_id = play_session_id;
    m_play_session_id_isSet = true;
}

bool OAIPlaybackProgressInfo::is_play_session_id_Set() const{
    return m_play_session_id_isSet;
}

bool OAIPlaybackProgressInfo::is_play_session_id_Valid() const{
    return m_play_session_id_isValid;
}

qint64 OAIPlaybackProgressInfo::getPlaybackStartTimeTicks() const {
    return m_playback_start_time_ticks;
}
void OAIPlaybackProgressInfo::setPlaybackStartTimeTicks(const qint64 &playback_start_time_ticks) {
    m_playback_start_time_ticks = playback_start_time_ticks;
    m_playback_start_time_ticks_isSet = true;
}

bool OAIPlaybackProgressInfo::is_playback_start_time_ticks_Set() const{
    return m_playback_start_time_ticks_isSet;
}

bool OAIPlaybackProgressInfo::is_playback_start_time_ticks_Valid() const{
    return m_playback_start_time_ticks_isValid;
}

QString OAIPlaybackProgressInfo::getPlaylistItemId() const {
    return m_playlist_item_id;
}
void OAIPlaybackProgressInfo::setPlaylistItemId(const QString &playlist_item_id) {
    m_playlist_item_id = playlist_item_id;
    m_playlist_item_id_isSet = true;
}

bool OAIPlaybackProgressInfo::is_playlist_item_id_Set() const{
    return m_playlist_item_id_isSet;
}

bool OAIPlaybackProgressInfo::is_playlist_item_id_Valid() const{
    return m_playlist_item_id_isValid;
}

qint64 OAIPlaybackProgressInfo::getPositionTicks() const {
    return m_position_ticks;
}
void OAIPlaybackProgressInfo::setPositionTicks(const qint64 &position_ticks) {
    m_position_ticks = position_ticks;
    m_position_ticks_isSet = true;
}

bool OAIPlaybackProgressInfo::is_position_ticks_Set() const{
    return m_position_ticks_isSet;
}

bool OAIPlaybackProgressInfo::is_position_ticks_Valid() const{
    return m_position_ticks_isValid;
}

OAIRepeatMode OAIPlaybackProgressInfo::getRepeatMode() const {
    return m_repeat_mode;
}
void OAIPlaybackProgressInfo::setRepeatMode(const OAIRepeatMode &repeat_mode) {
    m_repeat_mode = repeat_mode;
    m_repeat_mode_isSet = true;
}

bool OAIPlaybackProgressInfo::is_repeat_mode_Set() const{
    return m_repeat_mode_isSet;
}

bool OAIPlaybackProgressInfo::is_repeat_mode_Valid() const{
    return m_repeat_mode_isValid;
}

QString OAIPlaybackProgressInfo::getSessionId() const {
    return m_session_id;
}
void OAIPlaybackProgressInfo::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIPlaybackProgressInfo::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIPlaybackProgressInfo::is_session_id_Valid() const{
    return m_session_id_isValid;
}

qint32 OAIPlaybackProgressInfo::getSubtitleStreamIndex() const {
    return m_subtitle_stream_index;
}
void OAIPlaybackProgressInfo::setSubtitleStreamIndex(const qint32 &subtitle_stream_index) {
    m_subtitle_stream_index = subtitle_stream_index;
    m_subtitle_stream_index_isSet = true;
}

bool OAIPlaybackProgressInfo::is_subtitle_stream_index_Set() const{
    return m_subtitle_stream_index_isSet;
}

bool OAIPlaybackProgressInfo::is_subtitle_stream_index_Valid() const{
    return m_subtitle_stream_index_isValid;
}

qint32 OAIPlaybackProgressInfo::getVolumeLevel() const {
    return m_volume_level;
}
void OAIPlaybackProgressInfo::setVolumeLevel(const qint32 &volume_level) {
    m_volume_level = volume_level;
    m_volume_level_isSet = true;
}

bool OAIPlaybackProgressInfo::is_volume_level_Set() const{
    return m_volume_level_isSet;
}

bool OAIPlaybackProgressInfo::is_volume_level_Valid() const{
    return m_volume_level_isValid;
}

bool OAIPlaybackProgressInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_stream_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brightness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_seek_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_muted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_paused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_playing_queue.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_start_time_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_stream_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaybackProgressInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
