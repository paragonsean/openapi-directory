/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationResultDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationResultDto::OAINotificationResultDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationResultDto::OAINotificationResultDto() {
    this->initializeModel();
}

OAINotificationResultDto::~OAINotificationResultDto() {}

void OAINotificationResultDto::initializeModel() {

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_total_record_count_isSet = false;
    m_total_record_count_isValid = false;
}

void OAINotificationResultDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationResultDto::fromJsonObject(QJsonObject json) {

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("Notifications")]);
    m_notifications_isSet = !json[QString("Notifications")].isNull() && m_notifications_isValid;

    m_total_record_count_isValid = ::OpenAPI::fromJsonValue(m_total_record_count, json[QString("TotalRecordCount")]);
    m_total_record_count_isSet = !json[QString("TotalRecordCount")].isNull() && m_total_record_count_isValid;
}

QString OAINotificationResultDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationResultDto::asJsonObject() const {
    QJsonObject obj;
    if (m_notifications.size() > 0) {
        obj.insert(QString("Notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_total_record_count_isSet) {
        obj.insert(QString("TotalRecordCount"), ::OpenAPI::toJsonValue(m_total_record_count));
    }
    return obj;
}

QList<OAINotificationDto> OAINotificationResultDto::getNotifications() const {
    return m_notifications;
}
void OAINotificationResultDto::setNotifications(const QList<OAINotificationDto> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAINotificationResultDto::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAINotificationResultDto::is_notifications_Valid() const{
    return m_notifications_isValid;
}

qint32 OAINotificationResultDto::getTotalRecordCount() const {
    return m_total_record_count;
}
void OAINotificationResultDto::setTotalRecordCount(const qint32 &total_record_count) {
    m_total_record_count = total_record_count;
    m_total_record_count_isSet = true;
}

bool OAINotificationResultDto::is_total_record_count_Set() const{
    return m_total_record_count_isSet;
}

bool OAINotificationResultDto::is_total_record_count_Valid() const{
    return m_total_record_count_isValid;
}

bool OAINotificationResultDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationResultDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
