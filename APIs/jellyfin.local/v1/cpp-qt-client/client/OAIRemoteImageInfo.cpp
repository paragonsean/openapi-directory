/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteImageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteImageInfo::OAIRemoteImageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteImageInfo::OAIRemoteImageInfo() {
    this->initializeModel();
}

OAIRemoteImageInfo::~OAIRemoteImageInfo() {}

void OAIRemoteImageInfo::initializeModel() {

    m_community_rating_isSet = false;
    m_community_rating_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_rating_type_isSet = false;
    m_rating_type_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_vote_count_isSet = false;
    m_vote_count_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIRemoteImageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteImageInfo::fromJsonObject(QJsonObject json) {

    m_community_rating_isValid = ::OpenAPI::fromJsonValue(m_community_rating, json[QString("CommunityRating")]);
    m_community_rating_isSet = !json[QString("CommunityRating")].isNull() && m_community_rating_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("ProviderName")]);
    m_provider_name_isSet = !json[QString("ProviderName")].isNull() && m_provider_name_isValid;

    m_rating_type_isValid = ::OpenAPI::fromJsonValue(m_rating_type, json[QString("RatingType")]);
    m_rating_type_isSet = !json[QString("RatingType")].isNull() && m_rating_type_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("ThumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("ThumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_vote_count_isValid = ::OpenAPI::fromJsonValue(m_vote_count, json[QString("VoteCount")]);
    m_vote_count_isSet = !json[QString("VoteCount")].isNull() && m_vote_count_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAIRemoteImageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteImageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_community_rating_isSet) {
        obj.insert(QString("CommunityRating"), ::OpenAPI::toJsonValue(m_community_rating));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("ProviderName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_rating_type.isSet()) {
        obj.insert(QString("RatingType"), ::OpenAPI::toJsonValue(m_rating_type));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("ThumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_vote_count_isSet) {
        obj.insert(QString("VoteCount"), ::OpenAPI::toJsonValue(m_vote_count));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

double OAIRemoteImageInfo::getCommunityRating() const {
    return m_community_rating;
}
void OAIRemoteImageInfo::setCommunityRating(const double &community_rating) {
    m_community_rating = community_rating;
    m_community_rating_isSet = true;
}

bool OAIRemoteImageInfo::is_community_rating_Set() const{
    return m_community_rating_isSet;
}

bool OAIRemoteImageInfo::is_community_rating_Valid() const{
    return m_community_rating_isValid;
}

qint32 OAIRemoteImageInfo::getHeight() const {
    return m_height;
}
void OAIRemoteImageInfo::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIRemoteImageInfo::is_height_Set() const{
    return m_height_isSet;
}

bool OAIRemoteImageInfo::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIRemoteImageInfo::getLanguage() const {
    return m_language;
}
void OAIRemoteImageInfo::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIRemoteImageInfo::is_language_Set() const{
    return m_language_isSet;
}

bool OAIRemoteImageInfo::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIRemoteImageInfo::getProviderName() const {
    return m_provider_name;
}
void OAIRemoteImageInfo::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIRemoteImageInfo::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIRemoteImageInfo::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

OAIRatingType OAIRemoteImageInfo::getRatingType() const {
    return m_rating_type;
}
void OAIRemoteImageInfo::setRatingType(const OAIRatingType &rating_type) {
    m_rating_type = rating_type;
    m_rating_type_isSet = true;
}

bool OAIRemoteImageInfo::is_rating_type_Set() const{
    return m_rating_type_isSet;
}

bool OAIRemoteImageInfo::is_rating_type_Valid() const{
    return m_rating_type_isValid;
}

QString OAIRemoteImageInfo::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIRemoteImageInfo::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIRemoteImageInfo::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIRemoteImageInfo::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

OAIImageType OAIRemoteImageInfo::getType() const {
    return m_type;
}
void OAIRemoteImageInfo::setType(const OAIImageType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRemoteImageInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRemoteImageInfo::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRemoteImageInfo::getUrl() const {
    return m_url;
}
void OAIRemoteImageInfo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRemoteImageInfo::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRemoteImageInfo::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIRemoteImageInfo::getVoteCount() const {
    return m_vote_count;
}
void OAIRemoteImageInfo::setVoteCount(const qint32 &vote_count) {
    m_vote_count = vote_count;
    m_vote_count_isSet = true;
}

bool OAIRemoteImageInfo::is_vote_count_Set() const{
    return m_vote_count_isSet;
}

bool OAIRemoteImageInfo::is_vote_count_Valid() const{
    return m_vote_count_isValid;
}

qint32 OAIRemoteImageInfo::getWidth() const {
    return m_width;
}
void OAIRemoteImageInfo::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIRemoteImageInfo::is_width_Set() const{
    return m_width_isSet;
}

bool OAIRemoteImageInfo::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIRemoteImageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_community_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteImageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
