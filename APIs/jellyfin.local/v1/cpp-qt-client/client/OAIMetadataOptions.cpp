/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataOptions::OAIMetadataOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataOptions::OAIMetadataOptions() {
    this->initializeModel();
}

OAIMetadataOptions::~OAIMetadataOptions() {}

void OAIMetadataOptions::initializeModel() {

    m_disabled_image_fetchers_isSet = false;
    m_disabled_image_fetchers_isValid = false;

    m_disabled_metadata_fetchers_isSet = false;
    m_disabled_metadata_fetchers_isValid = false;

    m_disabled_metadata_savers_isSet = false;
    m_disabled_metadata_savers_isValid = false;

    m_image_fetcher_order_isSet = false;
    m_image_fetcher_order_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_local_metadata_reader_order_isSet = false;
    m_local_metadata_reader_order_isValid = false;

    m_metadata_fetcher_order_isSet = false;
    m_metadata_fetcher_order_isValid = false;
}

void OAIMetadataOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataOptions::fromJsonObject(QJsonObject json) {

    m_disabled_image_fetchers_isValid = ::OpenAPI::fromJsonValue(m_disabled_image_fetchers, json[QString("DisabledImageFetchers")]);
    m_disabled_image_fetchers_isSet = !json[QString("DisabledImageFetchers")].isNull() && m_disabled_image_fetchers_isValid;

    m_disabled_metadata_fetchers_isValid = ::OpenAPI::fromJsonValue(m_disabled_metadata_fetchers, json[QString("DisabledMetadataFetchers")]);
    m_disabled_metadata_fetchers_isSet = !json[QString("DisabledMetadataFetchers")].isNull() && m_disabled_metadata_fetchers_isValid;

    m_disabled_metadata_savers_isValid = ::OpenAPI::fromJsonValue(m_disabled_metadata_savers, json[QString("DisabledMetadataSavers")]);
    m_disabled_metadata_savers_isSet = !json[QString("DisabledMetadataSavers")].isNull() && m_disabled_metadata_savers_isValid;

    m_image_fetcher_order_isValid = ::OpenAPI::fromJsonValue(m_image_fetcher_order, json[QString("ImageFetcherOrder")]);
    m_image_fetcher_order_isSet = !json[QString("ImageFetcherOrder")].isNull() && m_image_fetcher_order_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("ItemType")]);
    m_item_type_isSet = !json[QString("ItemType")].isNull() && m_item_type_isValid;

    m_local_metadata_reader_order_isValid = ::OpenAPI::fromJsonValue(m_local_metadata_reader_order, json[QString("LocalMetadataReaderOrder")]);
    m_local_metadata_reader_order_isSet = !json[QString("LocalMetadataReaderOrder")].isNull() && m_local_metadata_reader_order_isValid;

    m_metadata_fetcher_order_isValid = ::OpenAPI::fromJsonValue(m_metadata_fetcher_order, json[QString("MetadataFetcherOrder")]);
    m_metadata_fetcher_order_isSet = !json[QString("MetadataFetcherOrder")].isNull() && m_metadata_fetcher_order_isValid;
}

QString OAIMetadataOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_disabled_image_fetchers.size() > 0) {
        obj.insert(QString("DisabledImageFetchers"), ::OpenAPI::toJsonValue(m_disabled_image_fetchers));
    }
    if (m_disabled_metadata_fetchers.size() > 0) {
        obj.insert(QString("DisabledMetadataFetchers"), ::OpenAPI::toJsonValue(m_disabled_metadata_fetchers));
    }
    if (m_disabled_metadata_savers.size() > 0) {
        obj.insert(QString("DisabledMetadataSavers"), ::OpenAPI::toJsonValue(m_disabled_metadata_savers));
    }
    if (m_image_fetcher_order.size() > 0) {
        obj.insert(QString("ImageFetcherOrder"), ::OpenAPI::toJsonValue(m_image_fetcher_order));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("ItemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_local_metadata_reader_order.size() > 0) {
        obj.insert(QString("LocalMetadataReaderOrder"), ::OpenAPI::toJsonValue(m_local_metadata_reader_order));
    }
    if (m_metadata_fetcher_order.size() > 0) {
        obj.insert(QString("MetadataFetcherOrder"), ::OpenAPI::toJsonValue(m_metadata_fetcher_order));
    }
    return obj;
}

QList<QString> OAIMetadataOptions::getDisabledImageFetchers() const {
    return m_disabled_image_fetchers;
}
void OAIMetadataOptions::setDisabledImageFetchers(const QList<QString> &disabled_image_fetchers) {
    m_disabled_image_fetchers = disabled_image_fetchers;
    m_disabled_image_fetchers_isSet = true;
}

bool OAIMetadataOptions::is_disabled_image_fetchers_Set() const{
    return m_disabled_image_fetchers_isSet;
}

bool OAIMetadataOptions::is_disabled_image_fetchers_Valid() const{
    return m_disabled_image_fetchers_isValid;
}

QList<QString> OAIMetadataOptions::getDisabledMetadataFetchers() const {
    return m_disabled_metadata_fetchers;
}
void OAIMetadataOptions::setDisabledMetadataFetchers(const QList<QString> &disabled_metadata_fetchers) {
    m_disabled_metadata_fetchers = disabled_metadata_fetchers;
    m_disabled_metadata_fetchers_isSet = true;
}

bool OAIMetadataOptions::is_disabled_metadata_fetchers_Set() const{
    return m_disabled_metadata_fetchers_isSet;
}

bool OAIMetadataOptions::is_disabled_metadata_fetchers_Valid() const{
    return m_disabled_metadata_fetchers_isValid;
}

QList<QString> OAIMetadataOptions::getDisabledMetadataSavers() const {
    return m_disabled_metadata_savers;
}
void OAIMetadataOptions::setDisabledMetadataSavers(const QList<QString> &disabled_metadata_savers) {
    m_disabled_metadata_savers = disabled_metadata_savers;
    m_disabled_metadata_savers_isSet = true;
}

bool OAIMetadataOptions::is_disabled_metadata_savers_Set() const{
    return m_disabled_metadata_savers_isSet;
}

bool OAIMetadataOptions::is_disabled_metadata_savers_Valid() const{
    return m_disabled_metadata_savers_isValid;
}

QList<QString> OAIMetadataOptions::getImageFetcherOrder() const {
    return m_image_fetcher_order;
}
void OAIMetadataOptions::setImageFetcherOrder(const QList<QString> &image_fetcher_order) {
    m_image_fetcher_order = image_fetcher_order;
    m_image_fetcher_order_isSet = true;
}

bool OAIMetadataOptions::is_image_fetcher_order_Set() const{
    return m_image_fetcher_order_isSet;
}

bool OAIMetadataOptions::is_image_fetcher_order_Valid() const{
    return m_image_fetcher_order_isValid;
}

QString OAIMetadataOptions::getItemType() const {
    return m_item_type;
}
void OAIMetadataOptions::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIMetadataOptions::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIMetadataOptions::is_item_type_Valid() const{
    return m_item_type_isValid;
}

QList<QString> OAIMetadataOptions::getLocalMetadataReaderOrder() const {
    return m_local_metadata_reader_order;
}
void OAIMetadataOptions::setLocalMetadataReaderOrder(const QList<QString> &local_metadata_reader_order) {
    m_local_metadata_reader_order = local_metadata_reader_order;
    m_local_metadata_reader_order_isSet = true;
}

bool OAIMetadataOptions::is_local_metadata_reader_order_Set() const{
    return m_local_metadata_reader_order_isSet;
}

bool OAIMetadataOptions::is_local_metadata_reader_order_Valid() const{
    return m_local_metadata_reader_order_isValid;
}

QList<QString> OAIMetadataOptions::getMetadataFetcherOrder() const {
    return m_metadata_fetcher_order;
}
void OAIMetadataOptions::setMetadataFetcherOrder(const QList<QString> &metadata_fetcher_order) {
    m_metadata_fetcher_order = metadata_fetcher_order;
    m_metadata_fetcher_order_isSet = true;
}

bool OAIMetadataOptions::is_metadata_fetcher_order_Set() const{
    return m_metadata_fetcher_order_isSet;
}

bool OAIMetadataOptions::is_metadata_fetcher_order_Valid() const{
    return m_metadata_fetcher_order_isValid;
}

bool OAIMetadataOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disabled_image_fetchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_metadata_fetchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_metadata_savers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_fetcher_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_metadata_reader_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_fetcher_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
