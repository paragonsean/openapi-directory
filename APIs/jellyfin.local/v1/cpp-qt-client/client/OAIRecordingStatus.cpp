/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordingStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordingStatus::OAIRecordingStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordingStatus::OAIRecordingStatus() {
    this->initializeModel();
}

OAIRecordingStatus::~OAIRecordingStatus() {}

void OAIRecordingStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRecordingStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRecordingStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("New", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecordingStatus::NEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecordingStatus::INPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecordingStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancelled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecordingStatus::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ConflictedOk", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecordingStatus::CONFLICTEDOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ConflictedNotOk", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecordingStatus::CONFLICTEDNOTOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Error", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecordingStatus::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRecordingStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRecordingStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRecordingStatus::NEW:
            val = "New";
            break;
        case eOAIRecordingStatus::INPROGRESS:
            val = "InProgress";
            break;
        case eOAIRecordingStatus::COMPLETED:
            val = "Completed";
            break;
        case eOAIRecordingStatus::CANCELLED:
            val = "Cancelled";
            break;
        case eOAIRecordingStatus::CONFLICTEDOK:
            val = "ConflictedOk";
            break;
        case eOAIRecordingStatus::CONFLICTEDNOTOK:
            val = "ConflictedNotOk";
            break;
        case eOAIRecordingStatus::ERROR:
            val = "Error";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRecordingStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRecordingStatus::eOAIRecordingStatus OAIRecordingStatus::getValue() const {
    return m_value;
}

void OAIRecordingStatus::setValue(const OAIRecordingStatus::eOAIRecordingStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRecordingStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIRecordingStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
