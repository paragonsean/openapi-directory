/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControlResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControlResponse::OAIControlResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControlResponse::OAIControlResponse() {
    this->initializeModel();
}

OAIControlResponse::~OAIControlResponse() {}

void OAIControlResponse::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_is_successful_isSet = false;
    m_is_successful_isValid = false;

    m_xml_isSet = false;
    m_xml_isValid = false;
}

void OAIControlResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControlResponse::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;

    m_is_successful_isValid = ::OpenAPI::fromJsonValue(m_is_successful, json[QString("IsSuccessful")]);
    m_is_successful_isSet = !json[QString("IsSuccessful")].isNull() && m_is_successful_isValid;

    m_xml_isValid = ::OpenAPI::fromJsonValue(m_xml, json[QString("Xml")]);
    m_xml_isSet = !json[QString("Xml")].isNull() && m_xml_isValid;
}

QString OAIControlResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControlResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.size() > 0) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_is_successful_isSet) {
        obj.insert(QString("IsSuccessful"), ::OpenAPI::toJsonValue(m_is_successful));
    }
    if (m_xml_isSet) {
        obj.insert(QString("Xml"), ::OpenAPI::toJsonValue(m_xml));
    }
    return obj;
}

QMap<QString, QString> OAIControlResponse::getHeaders() const {
    return m_headers;
}
void OAIControlResponse::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIControlResponse::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIControlResponse::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAIControlResponse::isIsSuccessful() const {
    return m_is_successful;
}
void OAIControlResponse::setIsSuccessful(const bool &is_successful) {
    m_is_successful = is_successful;
    m_is_successful_isSet = true;
}

bool OAIControlResponse::is_is_successful_Set() const{
    return m_is_successful_isSet;
}

bool OAIControlResponse::is_is_successful_Valid() const{
    return m_is_successful_isValid;
}

QString OAIControlResponse::getXml() const {
    return m_xml;
}
void OAIControlResponse::setXml(const QString &xml) {
    m_xml = xml;
    m_xml_isSet = true;
}

bool OAIControlResponse::is_xml_Set() const{
    return m_xml_isSet;
}

bool OAIControlResponse::is_xml_Valid() const{
    return m_xml_isValid;
}

bool OAIControlResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_successful_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControlResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
