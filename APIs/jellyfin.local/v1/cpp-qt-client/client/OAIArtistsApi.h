/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArtistsApi_H
#define OAI_OAIArtistsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaseItemDto.h"
#include "OAIBaseItemDtoQueryResult.h"
#include "OAIImageType.h"
#include "OAIItemFields.h"
#include "OAIItemFilter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArtistsApi : public QObject {
    Q_OBJECT

public:
    OAIArtistsApi(const int timeOut = 0);
    ~OAIArtistsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  min_community_rating double [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  exclude_item_types QList<QString> [optional]
    * @param[in]  include_item_types QList<QString> [optional]
    * @param[in]  filters QList<OAIItemFilter> [optional]
    * @param[in]  is_favorite bool [optional]
    * @param[in]  media_types QList<QString> [optional]
    * @param[in]  genres QList<QString> [optional]
    * @param[in]  genre_ids QList<QString> [optional]
    * @param[in]  official_ratings QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  years QList<qint32> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  person QString [optional]
    * @param[in]  person_ids QList<QString> [optional]
    * @param[in]  person_types QList<QString> [optional]
    * @param[in]  studios QList<QString> [optional]
    * @param[in]  studio_ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  name_starts_with_or_greater QString [optional]
    * @param[in]  name_starts_with QString [optional]
    * @param[in]  name_less_than QString [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_total_record_count bool [optional]
    */
    virtual void getAlbumArtists(const ::OpenAPI::OptionalParam<double> &min_community_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_item_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include_item_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIItemFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAIItemFilter>>(), const ::OpenAPI::OptionalParam<bool> &is_favorite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &media_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genres = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genre_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &official_ratings = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &years = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<QString> &person = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &person_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &person_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &studios = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &studio_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_starts_with_or_greater = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_starts_with = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_less_than = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_total_record_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  user_id QString [optional]
    */
    virtual void getArtistByName(const QString &name, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  min_community_rating double [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  search_term QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  fields QList<OAIItemFields> [optional]
    * @param[in]  exclude_item_types QList<QString> [optional]
    * @param[in]  include_item_types QList<QString> [optional]
    * @param[in]  filters QList<OAIItemFilter> [optional]
    * @param[in]  is_favorite bool [optional]
    * @param[in]  media_types QList<QString> [optional]
    * @param[in]  genres QList<QString> [optional]
    * @param[in]  genre_ids QList<QString> [optional]
    * @param[in]  official_ratings QList<QString> [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  years QList<qint32> [optional]
    * @param[in]  enable_user_data bool [optional]
    * @param[in]  image_type_limit qint32 [optional]
    * @param[in]  enable_image_types QList<OAIImageType> [optional]
    * @param[in]  person QString [optional]
    * @param[in]  person_ids QList<QString> [optional]
    * @param[in]  person_types QList<QString> [optional]
    * @param[in]  studios QList<QString> [optional]
    * @param[in]  studio_ids QList<QString> [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  name_starts_with_or_greater QString [optional]
    * @param[in]  name_starts_with QString [optional]
    * @param[in]  name_less_than QString [optional]
    * @param[in]  enable_images bool [optional]
    * @param[in]  enable_total_record_count bool [optional]
    */
    virtual void getArtists(const ::OpenAPI::OptionalParam<double> &min_community_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIItemFields>> &fields = ::OpenAPI::OptionalParam<QList<OAIItemFields>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_item_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include_item_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIItemFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAIItemFilter>>(), const ::OpenAPI::OptionalParam<bool> &is_favorite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &media_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genres = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &genre_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &official_ratings = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &years = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &enable_user_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &image_type_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIImageType>> &enable_image_types = ::OpenAPI::OptionalParam<QList<OAIImageType>>(), const ::OpenAPI::OptionalParam<QString> &person = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &person_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &person_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &studios = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &studio_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_starts_with_or_greater = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_starts_with = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_less_than = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_total_record_count = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAlbumArtistsCallback(OAIHttpRequestWorker *worker);
    void getArtistByNameCallback(OAIHttpRequestWorker *worker);
    void getArtistsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAlbumArtistsSignal(OAIBaseItemDtoQueryResult summary);
    void getArtistByNameSignal(OAIBaseItemDto summary);
    void getArtistsSignal(OAIBaseItemDtoQueryResult summary);


    void getAlbumArtistsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);
    void getArtistByNameSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDto summary);
    void getArtistsSignalFull(OAIHttpRequestWorker *worker, OAIBaseItemDtoQueryResult summary);

    Q_DECL_DEPRECATED_X("Use getAlbumArtistsSignalError() instead")
    void getAlbumArtistsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumArtistsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtistByNameSignalError() instead")
    void getArtistByNameSignalE(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtistByNameSignalError(OAIBaseItemDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtistsSignalError() instead")
    void getArtistsSignalE(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtistsSignalError(OAIBaseItemDtoQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAlbumArtistsSignalErrorFull() instead")
    void getAlbumArtistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumArtistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtistByNameSignalErrorFull() instead")
    void getArtistByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtistByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArtistsSignalErrorFull() instead")
    void getArtistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArtistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
