/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlaystateApi_H
#define OAI_OAIPlaystateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPlayMethod.h"
#include "OAIPlaybackProgressInfo.h"
#include "OAIPlaybackStartInfo.h"
#include "OAIPlaybackStopInfo.h"
#include "OAIRepeatMode.h"
#include "OAIUserItemDataDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlaystateApi : public QObject {
    Q_OBJECT

public:
    OAIPlaystateApi(const int timeOut = 0);
    ~OAIPlaystateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  date_played QDateTime [optional]
    */
    virtual void markPlayedItem(const QString &user_id, const QString &item_id, const ::OpenAPI::OptionalParam<QDateTime> &date_played = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void markUnplayedItem(const QString &user_id, const QString &item_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  position_ticks qint64 [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  volume_level qint32 [optional]
    * @param[in]  play_method OAIPlayMethod [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  repeat_mode OAIRepeatMode [optional]
    * @param[in]  is_paused bool [optional]
    * @param[in]  is_muted bool [optional]
    */
    virtual void onPlaybackProgress(const QString &user_id, const QString &item_id, const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &position_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &volume_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIPlayMethod> &play_method = ::OpenAPI::OptionalParam<OAIPlayMethod>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRepeatMode> &repeat_mode = ::OpenAPI::OptionalParam<OAIRepeatMode>(), const ::OpenAPI::OptionalParam<bool> &is_paused = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_muted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  audio_stream_index qint32 [optional]
    * @param[in]  subtitle_stream_index qint32 [optional]
    * @param[in]  play_method OAIPlayMethod [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    * @param[in]  can_seek bool [optional]
    */
    virtual void onPlaybackStart(const QString &user_id, const QString &item_id, const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &audio_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &subtitle_stream_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIPlayMethod> &play_method = ::OpenAPI::OptionalParam<OAIPlayMethod>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &can_seek = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  media_source_id QString [optional]
    * @param[in]  next_media_type QString [optional]
    * @param[in]  position_ticks qint64 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  play_session_id QString [optional]
    */
    virtual void onPlaybackStopped(const QString &user_id, const QString &item_id, const ::OpenAPI::OptionalParam<QString> &media_source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &position_ticks = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  play_session_id QString [optional]
    */
    virtual void pingPlaybackSession(const ::OpenAPI::OptionalParam<QString> &play_session_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_playback_progress_info OAIPlaybackProgressInfo [optional]
    */
    virtual void reportPlaybackProgress(const ::OpenAPI::OptionalParam<OAIPlaybackProgressInfo> &oai_playback_progress_info = ::OpenAPI::OptionalParam<OAIPlaybackProgressInfo>());

    /**
    * @param[in]  oai_playback_start_info OAIPlaybackStartInfo [optional]
    */
    virtual void reportPlaybackStart(const ::OpenAPI::OptionalParam<OAIPlaybackStartInfo> &oai_playback_start_info = ::OpenAPI::OptionalParam<OAIPlaybackStartInfo>());

    /**
    * @param[in]  oai_playback_stop_info OAIPlaybackStopInfo [optional]
    */
    virtual void reportPlaybackStopped(const ::OpenAPI::OptionalParam<OAIPlaybackStopInfo> &oai_playback_stop_info = ::OpenAPI::OptionalParam<OAIPlaybackStopInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void markPlayedItemCallback(OAIHttpRequestWorker *worker);
    void markUnplayedItemCallback(OAIHttpRequestWorker *worker);
    void onPlaybackProgressCallback(OAIHttpRequestWorker *worker);
    void onPlaybackStartCallback(OAIHttpRequestWorker *worker);
    void onPlaybackStoppedCallback(OAIHttpRequestWorker *worker);
    void pingPlaybackSessionCallback(OAIHttpRequestWorker *worker);
    void reportPlaybackProgressCallback(OAIHttpRequestWorker *worker);
    void reportPlaybackStartCallback(OAIHttpRequestWorker *worker);
    void reportPlaybackStoppedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void markPlayedItemSignal(OAIUserItemDataDto summary);
    void markUnplayedItemSignal(OAIUserItemDataDto summary);
    void onPlaybackProgressSignal();
    void onPlaybackStartSignal();
    void onPlaybackStoppedSignal();
    void pingPlaybackSessionSignal();
    void reportPlaybackProgressSignal();
    void reportPlaybackStartSignal();
    void reportPlaybackStoppedSignal();


    void markPlayedItemSignalFull(OAIHttpRequestWorker *worker, OAIUserItemDataDto summary);
    void markUnplayedItemSignalFull(OAIHttpRequestWorker *worker, OAIUserItemDataDto summary);
    void onPlaybackProgressSignalFull(OAIHttpRequestWorker *worker);
    void onPlaybackStartSignalFull(OAIHttpRequestWorker *worker);
    void onPlaybackStoppedSignalFull(OAIHttpRequestWorker *worker);
    void pingPlaybackSessionSignalFull(OAIHttpRequestWorker *worker);
    void reportPlaybackProgressSignalFull(OAIHttpRequestWorker *worker);
    void reportPlaybackStartSignalFull(OAIHttpRequestWorker *worker);
    void reportPlaybackStoppedSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use markPlayedItemSignalError() instead")
    void markPlayedItemSignalE(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markPlayedItemSignalError(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markUnplayedItemSignalError() instead")
    void markUnplayedItemSignalE(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markUnplayedItemSignalError(OAIUserItemDataDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use onPlaybackProgressSignalError() instead")
    void onPlaybackProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void onPlaybackProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use onPlaybackStartSignalError() instead")
    void onPlaybackStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void onPlaybackStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use onPlaybackStoppedSignalError() instead")
    void onPlaybackStoppedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void onPlaybackStoppedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingPlaybackSessionSignalError() instead")
    void pingPlaybackSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pingPlaybackSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPlaybackProgressSignalError() instead")
    void reportPlaybackProgressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportPlaybackProgressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPlaybackStartSignalError() instead")
    void reportPlaybackStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportPlaybackStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPlaybackStoppedSignalError() instead")
    void reportPlaybackStoppedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportPlaybackStoppedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use markPlayedItemSignalErrorFull() instead")
    void markPlayedItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markPlayedItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markUnplayedItemSignalErrorFull() instead")
    void markUnplayedItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markUnplayedItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use onPlaybackProgressSignalErrorFull() instead")
    void onPlaybackProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void onPlaybackProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use onPlaybackStartSignalErrorFull() instead")
    void onPlaybackStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void onPlaybackStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use onPlaybackStoppedSignalErrorFull() instead")
    void onPlaybackStoppedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void onPlaybackStoppedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingPlaybackSessionSignalErrorFull() instead")
    void pingPlaybackSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pingPlaybackSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPlaybackProgressSignalErrorFull() instead")
    void reportPlaybackProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPlaybackProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPlaybackStartSignalErrorFull() instead")
    void reportPlaybackStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPlaybackStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPlaybackStoppedSignalErrorFull() instead")
    void reportPlaybackStoppedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPlaybackStoppedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
