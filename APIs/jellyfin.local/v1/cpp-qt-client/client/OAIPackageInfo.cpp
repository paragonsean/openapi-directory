/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageInfo::OAIPackageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageInfo::OAIPackageInfo() {
    this->initializeModel();
}

OAIPackageInfo::~OAIPackageInfo() {}

void OAIPackageInfo::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIPackageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageInfo::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("overview")]);
    m_overview_isSet = !json[QString("overview")].isNull() && m_overview_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIPackageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overview_isSet) {
        obj.insert(QString("overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

QString OAIPackageInfo::getCategory() const {
    return m_category;
}
void OAIPackageInfo::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPackageInfo::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPackageInfo::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIPackageInfo::getDescription() const {
    return m_description;
}
void OAIPackageInfo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPackageInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPackageInfo::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPackageInfo::getGuid() const {
    return m_guid;
}
void OAIPackageInfo::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIPackageInfo::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIPackageInfo::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAIPackageInfo::getImageUrl() const {
    return m_image_url;
}
void OAIPackageInfo::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIPackageInfo::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIPackageInfo::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIPackageInfo::getName() const {
    return m_name;
}
void OAIPackageInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPackageInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPackageInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPackageInfo::getOverview() const {
    return m_overview;
}
void OAIPackageInfo::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIPackageInfo::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIPackageInfo::is_overview_Valid() const{
    return m_overview_isValid;
}

QString OAIPackageInfo::getOwner() const {
    return m_owner;
}
void OAIPackageInfo::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPackageInfo::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPackageInfo::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<OAIVersionInfo> OAIPackageInfo::getVersions() const {
    return m_versions;
}
void OAIPackageInfo::setVersions(const QList<OAIVersionInfo> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIPackageInfo::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIPackageInfo::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIPackageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
