/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllThemeMediaResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllThemeMediaResult::OAIAllThemeMediaResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllThemeMediaResult::OAIAllThemeMediaResult() {
    this->initializeModel();
}

OAIAllThemeMediaResult::~OAIAllThemeMediaResult() {}

void OAIAllThemeMediaResult::initializeModel() {

    m_soundtrack_songs_result_isSet = false;
    m_soundtrack_songs_result_isValid = false;

    m_theme_songs_result_isSet = false;
    m_theme_songs_result_isValid = false;

    m_theme_videos_result_isSet = false;
    m_theme_videos_result_isValid = false;
}

void OAIAllThemeMediaResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllThemeMediaResult::fromJsonObject(QJsonObject json) {

    m_soundtrack_songs_result_isValid = ::OpenAPI::fromJsonValue(m_soundtrack_songs_result, json[QString("SoundtrackSongsResult")]);
    m_soundtrack_songs_result_isSet = !json[QString("SoundtrackSongsResult")].isNull() && m_soundtrack_songs_result_isValid;

    m_theme_songs_result_isValid = ::OpenAPI::fromJsonValue(m_theme_songs_result, json[QString("ThemeSongsResult")]);
    m_theme_songs_result_isSet = !json[QString("ThemeSongsResult")].isNull() && m_theme_songs_result_isValid;

    m_theme_videos_result_isValid = ::OpenAPI::fromJsonValue(m_theme_videos_result, json[QString("ThemeVideosResult")]);
    m_theme_videos_result_isSet = !json[QString("ThemeVideosResult")].isNull() && m_theme_videos_result_isValid;
}

QString OAIAllThemeMediaResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllThemeMediaResult::asJsonObject() const {
    QJsonObject obj;
    if (m_soundtrack_songs_result.isSet()) {
        obj.insert(QString("SoundtrackSongsResult"), ::OpenAPI::toJsonValue(m_soundtrack_songs_result));
    }
    if (m_theme_songs_result.isSet()) {
        obj.insert(QString("ThemeSongsResult"), ::OpenAPI::toJsonValue(m_theme_songs_result));
    }
    if (m_theme_videos_result.isSet()) {
        obj.insert(QString("ThemeVideosResult"), ::OpenAPI::toJsonValue(m_theme_videos_result));
    }
    return obj;
}

OAIThemeMediaResult OAIAllThemeMediaResult::getSoundtrackSongsResult() const {
    return m_soundtrack_songs_result;
}
void OAIAllThemeMediaResult::setSoundtrackSongsResult(const OAIThemeMediaResult &soundtrack_songs_result) {
    m_soundtrack_songs_result = soundtrack_songs_result;
    m_soundtrack_songs_result_isSet = true;
}

bool OAIAllThemeMediaResult::is_soundtrack_songs_result_Set() const{
    return m_soundtrack_songs_result_isSet;
}

bool OAIAllThemeMediaResult::is_soundtrack_songs_result_Valid() const{
    return m_soundtrack_songs_result_isValid;
}

OAIThemeMediaResult OAIAllThemeMediaResult::getThemeSongsResult() const {
    return m_theme_songs_result;
}
void OAIAllThemeMediaResult::setThemeSongsResult(const OAIThemeMediaResult &theme_songs_result) {
    m_theme_songs_result = theme_songs_result;
    m_theme_songs_result_isSet = true;
}

bool OAIAllThemeMediaResult::is_theme_songs_result_Set() const{
    return m_theme_songs_result_isSet;
}

bool OAIAllThemeMediaResult::is_theme_songs_result_Valid() const{
    return m_theme_songs_result_isValid;
}

OAIThemeMediaResult OAIAllThemeMediaResult::getThemeVideosResult() const {
    return m_theme_videos_result;
}
void OAIAllThemeMediaResult::setThemeVideosResult(const OAIThemeMediaResult &theme_videos_result) {
    m_theme_videos_result = theme_videos_result;
    m_theme_videos_result_isSet = true;
}

bool OAIAllThemeMediaResult::is_theme_videos_result_Set() const{
    return m_theme_videos_result_isSet;
}

bool OAIAllThemeMediaResult::is_theme_videos_result_Valid() const{
    return m_theme_videos_result_isValid;
}

bool OAIAllThemeMediaResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_soundtrack_songs_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_songs_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_videos_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllThemeMediaResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
