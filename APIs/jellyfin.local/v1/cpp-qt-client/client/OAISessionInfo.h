/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISessionInfo.h
 *
 * Class SessionInfo.
 */

#ifndef OAISessionInfo_H
#define OAISessionInfo_H

#include <QJsonObject>

#include "OAIBaseItem.h"
#include "OAIBaseItemDto.h"
#include "OAIClientCapabilities.h"
#include "OAIGeneralCommandType.h"
#include "OAIPlayerStateInfo.h"
#include "OAIQueueItem.h"
#include "OAISessionUserInfo.h"
#include "OAITranscodingInfo.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISessionUserInfo;
class OAIClientCapabilities;
class OAIBaseItem;
class OAIBaseItemDto;
class OAIQueueItem;
class OAIPlayerStateInfo;
class OAITranscodingInfo;

class OAISessionInfo : public OAIObject {
public:
    OAISessionInfo();
    OAISessionInfo(QString json);
    ~OAISessionInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAISessionUserInfo> getAdditionalUsers() const;
    void setAdditionalUsers(const QList<OAISessionUserInfo> &additional_users);
    bool is_additional_users_Set() const;
    bool is_additional_users_Valid() const;

    QString getApplicationVersion() const;
    void setApplicationVersion(const QString &application_version);
    bool is_application_version_Set() const;
    bool is_application_version_Valid() const;

    OAIClientCapabilities getCapabilities() const;
    void setCapabilities(const OAIClientCapabilities &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QString getClient() const;
    void setClient(const QString &client);
    bool is_client_Set() const;
    bool is_client_Valid() const;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    QString getDeviceName() const;
    void setDeviceName(const QString &device_name);
    bool is_device_name_Set() const;
    bool is_device_name_Valid() const;

    QString getDeviceType() const;
    void setDeviceType(const QString &device_type);
    bool is_device_type_Set() const;
    bool is_device_type_Valid() const;

    OAIBaseItem getFullNowPlayingItem() const;
    void setFullNowPlayingItem(const OAIBaseItem &full_now_playing_item);
    bool is_full_now_playing_item_Set() const;
    bool is_full_now_playing_item_Valid() const;

    bool isHasCustomDeviceName() const;
    void setHasCustomDeviceName(const bool &has_custom_device_name);
    bool is_has_custom_device_name_Set() const;
    bool is_has_custom_device_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    QDateTime getLastActivityDate() const;
    void setLastActivityDate(const QDateTime &last_activity_date);
    bool is_last_activity_date_Set() const;
    bool is_last_activity_date_Valid() const;

    QDateTime getLastPlaybackCheckIn() const;
    void setLastPlaybackCheckIn(const QDateTime &last_playback_check_in);
    bool is_last_playback_check_in_Set() const;
    bool is_last_playback_check_in_Valid() const;

    OAIBaseItemDto getNowPlayingItem() const;
    void setNowPlayingItem(const OAIBaseItemDto &now_playing_item);
    bool is_now_playing_item_Set() const;
    bool is_now_playing_item_Valid() const;

    QList<OAIQueueItem> getNowPlayingQueue() const;
    void setNowPlayingQueue(const QList<OAIQueueItem> &now_playing_queue);
    bool is_now_playing_queue_Set() const;
    bool is_now_playing_queue_Valid() const;

    OAIBaseItemDto getNowViewingItem() const;
    void setNowViewingItem(const OAIBaseItemDto &now_viewing_item);
    bool is_now_viewing_item_Set() const;
    bool is_now_viewing_item_Valid() const;

    OAIPlayerStateInfo getPlayState() const;
    void setPlayState(const OAIPlayerStateInfo &play_state);
    bool is_play_state_Set() const;
    bool is_play_state_Valid() const;

    QList<QString> getPlayableMediaTypes() const;
    void setPlayableMediaTypes(const QList<QString> &playable_media_types);
    bool is_playable_media_types_Set() const;
    bool is_playable_media_types_Valid() const;

    QString getPlaylistItemId() const;
    void setPlaylistItemId(const QString &playlist_item_id);
    bool is_playlist_item_id_Set() const;
    bool is_playlist_item_id_Valid() const;

    QString getRemoteEndPoint() const;
    void setRemoteEndPoint(const QString &remote_end_point);
    bool is_remote_end_point_Set() const;
    bool is_remote_end_point_Valid() const;

    QString getServerId() const;
    void setServerId(const QString &server_id);
    bool is_server_id_Set() const;
    bool is_server_id_Valid() const;

    QList<OAIGeneralCommandType> getSupportedCommands() const;
    void setSupportedCommands(const QList<OAIGeneralCommandType> &supported_commands);
    bool is_supported_commands_Set() const;
    bool is_supported_commands_Valid() const;

    bool isSupportsMediaControl() const;
    void setSupportsMediaControl(const bool &supports_media_control);
    bool is_supports_media_control_Set() const;
    bool is_supports_media_control_Valid() const;

    bool isSupportsRemoteControl() const;
    void setSupportsRemoteControl(const bool &supports_remote_control);
    bool is_supports_remote_control_Set() const;
    bool is_supports_remote_control_Valid() const;

    OAITranscodingInfo getTranscodingInfo() const;
    void setTranscodingInfo(const OAITranscodingInfo &transcoding_info);
    bool is_transcoding_info_Set() const;
    bool is_transcoding_info_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    QString getUserPrimaryImageTag() const;
    void setUserPrimaryImageTag(const QString &user_primary_image_tag);
    bool is_user_primary_image_tag_Set() const;
    bool is_user_primary_image_tag_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAISessionUserInfo> m_additional_users;
    bool m_additional_users_isSet;
    bool m_additional_users_isValid;

    QString m_application_version;
    bool m_application_version_isSet;
    bool m_application_version_isValid;

    OAIClientCapabilities m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QString m_client;
    bool m_client_isSet;
    bool m_client_isValid;

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    QString m_device_name;
    bool m_device_name_isSet;
    bool m_device_name_isValid;

    QString m_device_type;
    bool m_device_type_isSet;
    bool m_device_type_isValid;

    OAIBaseItem m_full_now_playing_item;
    bool m_full_now_playing_item_isSet;
    bool m_full_now_playing_item_isValid;

    bool m_has_custom_device_name;
    bool m_has_custom_device_name_isSet;
    bool m_has_custom_device_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    QDateTime m_last_activity_date;
    bool m_last_activity_date_isSet;
    bool m_last_activity_date_isValid;

    QDateTime m_last_playback_check_in;
    bool m_last_playback_check_in_isSet;
    bool m_last_playback_check_in_isValid;

    OAIBaseItemDto m_now_playing_item;
    bool m_now_playing_item_isSet;
    bool m_now_playing_item_isValid;

    QList<OAIQueueItem> m_now_playing_queue;
    bool m_now_playing_queue_isSet;
    bool m_now_playing_queue_isValid;

    OAIBaseItemDto m_now_viewing_item;
    bool m_now_viewing_item_isSet;
    bool m_now_viewing_item_isValid;

    OAIPlayerStateInfo m_play_state;
    bool m_play_state_isSet;
    bool m_play_state_isValid;

    QList<QString> m_playable_media_types;
    bool m_playable_media_types_isSet;
    bool m_playable_media_types_isValid;

    QString m_playlist_item_id;
    bool m_playlist_item_id_isSet;
    bool m_playlist_item_id_isValid;

    QString m_remote_end_point;
    bool m_remote_end_point_isSet;
    bool m_remote_end_point_isValid;

    QString m_server_id;
    bool m_server_id_isSet;
    bool m_server_id_isValid;

    QList<OAIGeneralCommandType> m_supported_commands;
    bool m_supported_commands_isSet;
    bool m_supported_commands_isValid;

    bool m_supports_media_control;
    bool m_supports_media_control_isSet;
    bool m_supports_media_control_isValid;

    bool m_supports_remote_control;
    bool m_supports_remote_control_isSet;
    bool m_supports_remote_control_isValid;

    OAITranscodingInfo m_transcoding_info;
    bool m_transcoding_info_isSet;
    bool m_transcoding_info_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;

    QString m_user_primary_image_tag;
    bool m_user_primary_image_tag_isSet;
    bool m_user_primary_image_tag_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISessionInfo)

#endif // OAISessionInfo_H
