/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerDebitNoteUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerDebitNoteUpdateDto::OAICustomerDebitNoteUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerDebitNoteUpdateDto::OAICustomerDebitNoteUpdateDto() {
    this->initializeModel();
}

OAICustomerDebitNoteUpdateDto::~OAICustomerDebitNoteUpdateDto() {}

void OAICustomerDebitNoteUpdateDto::initializeModel() {

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_cash_discount_date_isSet = false;
    m_cash_discount_date_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_credit_terms_id_isSet = false;
    m_credit_terms_id_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_number_isSet = false;
    m_customer_number_isValid = false;

    m_customer_ref_number_isSet = false;
    m_customer_ref_number_isValid = false;

    m_customer_vat_zone_id_isSet = false;
    m_customer_vat_zone_id_isValid = false;

    m_document_date_isSet = false;
    m_document_date_isValid = false;

    m_document_due_date_isSet = false;
    m_document_due_date_isValid = false;

    m_domestic_services_deductible_document_isSet = false;
    m_domestic_services_deductible_document_isValid = false;

    m_dont_email_isSet = false;
    m_dont_email_isValid = false;

    m_dont_print_isSet = false;
    m_dont_print_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_external_reference_isSet = false;
    m_external_reference_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_invoice_address_isSet = false;
    m_invoice_address_isValid = false;

    m_invoice_contact_isSet = false;
    m_invoice_contact_isValid = false;

    m_invoice_text_isSet = false;
    m_invoice_text_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_orig_invoice_date_isSet = false;
    m_orig_invoice_date_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_payment_method_id_isSet = false;
    m_payment_method_id_isValid = false;

    m_payment_reference_isSet = false;
    m_payment_reference_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_rot_rut_details_isSet = false;
    m_rot_rut_details_isValid = false;

    m_sales_person_id_isSet = false;
    m_sales_person_id_isValid = false;

    m_salesperson_isSet = false;
    m_salesperson_isValid = false;

    m_tax_detail_lines_isSet = false;
    m_tax_detail_lines_isValid = false;
}

void OAICustomerDebitNoteUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerDebitNoteUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_cash_discount_date_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_date, json[QString("cashDiscountDate")]);
    m_cash_discount_date_isSet = !json[QString("cashDiscountDate")].isNull() && m_cash_discount_date_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_credit_terms_id_isValid = ::OpenAPI::fromJsonValue(m_credit_terms_id, json[QString("creditTermsId")]);
    m_credit_terms_id_isSet = !json[QString("creditTermsId")].isNull() && m_credit_terms_id_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_number_isValid = ::OpenAPI::fromJsonValue(m_customer_number, json[QString("customerNumber")]);
    m_customer_number_isSet = !json[QString("customerNumber")].isNull() && m_customer_number_isValid;

    m_customer_ref_number_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_number, json[QString("customerRefNumber")]);
    m_customer_ref_number_isSet = !json[QString("customerRefNumber")].isNull() && m_customer_ref_number_isValid;

    m_customer_vat_zone_id_isValid = ::OpenAPI::fromJsonValue(m_customer_vat_zone_id, json[QString("customerVatZoneId")]);
    m_customer_vat_zone_id_isSet = !json[QString("customerVatZoneId")].isNull() && m_customer_vat_zone_id_isValid;

    m_document_date_isValid = ::OpenAPI::fromJsonValue(m_document_date, json[QString("documentDate")]);
    m_document_date_isSet = !json[QString("documentDate")].isNull() && m_document_date_isValid;

    m_document_due_date_isValid = ::OpenAPI::fromJsonValue(m_document_due_date, json[QString("documentDueDate")]);
    m_document_due_date_isSet = !json[QString("documentDueDate")].isNull() && m_document_due_date_isValid;

    m_domestic_services_deductible_document_isValid = ::OpenAPI::fromJsonValue(m_domestic_services_deductible_document, json[QString("domesticServicesDeductibleDocument")]);
    m_domestic_services_deductible_document_isSet = !json[QString("domesticServicesDeductibleDocument")].isNull() && m_domestic_services_deductible_document_isValid;

    m_dont_email_isValid = ::OpenAPI::fromJsonValue(m_dont_email, json[QString("dontEmail")]);
    m_dont_email_isSet = !json[QString("dontEmail")].isNull() && m_dont_email_isValid;

    m_dont_print_isValid = ::OpenAPI::fromJsonValue(m_dont_print, json[QString("dontPrint")]);
    m_dont_print_isSet = !json[QString("dontPrint")].isNull() && m_dont_print_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_external_reference_isValid = ::OpenAPI::fromJsonValue(m_external_reference, json[QString("externalReference")]);
    m_external_reference_isSet = !json[QString("externalReference")].isNull() && m_external_reference_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_invoice_address_isValid = ::OpenAPI::fromJsonValue(m_invoice_address, json[QString("invoiceAddress")]);
    m_invoice_address_isSet = !json[QString("invoiceAddress")].isNull() && m_invoice_address_isValid;

    m_invoice_contact_isValid = ::OpenAPI::fromJsonValue(m_invoice_contact, json[QString("invoiceContact")]);
    m_invoice_contact_isSet = !json[QString("invoiceContact")].isNull() && m_invoice_contact_isValid;

    m_invoice_text_isValid = ::OpenAPI::fromJsonValue(m_invoice_text, json[QString("invoiceText")]);
    m_invoice_text_isSet = !json[QString("invoiceText")].isNull() && m_invoice_text_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_orig_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_orig_invoice_date, json[QString("origInvoiceDate")]);
    m_orig_invoice_date_isSet = !json[QString("origInvoiceDate")].isNull() && m_orig_invoice_date_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_payment_method_id, json[QString("paymentMethodId")]);
    m_payment_method_id_isSet = !json[QString("paymentMethodId")].isNull() && m_payment_method_id_isValid;

    m_payment_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_reference, json[QString("paymentReference")]);
    m_payment_reference_isSet = !json[QString("paymentReference")].isNull() && m_payment_reference_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_rot_rut_details_isValid = ::OpenAPI::fromJsonValue(m_rot_rut_details, json[QString("rotRutDetails")]);
    m_rot_rut_details_isSet = !json[QString("rotRutDetails")].isNull() && m_rot_rut_details_isValid;

    m_sales_person_id_isValid = ::OpenAPI::fromJsonValue(m_sales_person_id, json[QString("salesPersonID")]);
    m_sales_person_id_isSet = !json[QString("salesPersonID")].isNull() && m_sales_person_id_isValid;

    m_salesperson_isValid = ::OpenAPI::fromJsonValue(m_salesperson, json[QString("salesperson")]);
    m_salesperson_isSet = !json[QString("salesperson")].isNull() && m_salesperson_isValid;

    m_tax_detail_lines_isValid = ::OpenAPI::fromJsonValue(m_tax_detail_lines, json[QString("taxDetailLines")]);
    m_tax_detail_lines_isSet = !json[QString("taxDetailLines")].isNull() && m_tax_detail_lines_isValid;
}

QString OAICustomerDebitNoteUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerDebitNoteUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_cash_discount_date.isSet()) {
        obj.insert(QString("cashDiscountDate"), ::OpenAPI::toJsonValue(m_cash_discount_date));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_credit_terms_id.isSet()) {
        obj.insert(QString("creditTermsId"), ::OpenAPI::toJsonValue(m_credit_terms_id));
    }
    if (m_currency_id.isSet()) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer_number.isSet()) {
        obj.insert(QString("customerNumber"), ::OpenAPI::toJsonValue(m_customer_number));
    }
    if (m_customer_ref_number.isSet()) {
        obj.insert(QString("customerRefNumber"), ::OpenAPI::toJsonValue(m_customer_ref_number));
    }
    if (m_customer_vat_zone_id.isSet()) {
        obj.insert(QString("customerVatZoneId"), ::OpenAPI::toJsonValue(m_customer_vat_zone_id));
    }
    if (m_document_date.isSet()) {
        obj.insert(QString("documentDate"), ::OpenAPI::toJsonValue(m_document_date));
    }
    if (m_document_due_date.isSet()) {
        obj.insert(QString("documentDueDate"), ::OpenAPI::toJsonValue(m_document_due_date));
    }
    if (m_domestic_services_deductible_document.isSet()) {
        obj.insert(QString("domesticServicesDeductibleDocument"), ::OpenAPI::toJsonValue(m_domestic_services_deductible_document));
    }
    if (m_dont_email.isSet()) {
        obj.insert(QString("dontEmail"), ::OpenAPI::toJsonValue(m_dont_email));
    }
    if (m_dont_print.isSet()) {
        obj.insert(QString("dontPrint"), ::OpenAPI::toJsonValue(m_dont_print));
    }
    if (m_exchange_rate.isSet()) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_external_reference.isSet()) {
        obj.insert(QString("externalReference"), ::OpenAPI::toJsonValue(m_external_reference));
    }
    if (m_financial_period.isSet()) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_invoice_address.isSet()) {
        obj.insert(QString("invoiceAddress"), ::OpenAPI::toJsonValue(m_invoice_address));
    }
    if (m_invoice_contact.isSet()) {
        obj.insert(QString("invoiceContact"), ::OpenAPI::toJsonValue(m_invoice_contact));
    }
    if (m_invoice_text.isSet()) {
        obj.insert(QString("invoiceText"), ::OpenAPI::toJsonValue(m_invoice_text));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_orig_invoice_date.isSet()) {
        obj.insert(QString("origInvoiceDate"), ::OpenAPI::toJsonValue(m_orig_invoice_date));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_payment_method_id.isSet()) {
        obj.insert(QString("paymentMethodId"), ::OpenAPI::toJsonValue(m_payment_method_id));
    }
    if (m_payment_reference.isSet()) {
        obj.insert(QString("paymentReference"), ::OpenAPI::toJsonValue(m_payment_reference));
    }
    if (m_post_period.isSet()) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_reference_number.isSet()) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_rot_rut_details.isSet()) {
        obj.insert(QString("rotRutDetails"), ::OpenAPI::toJsonValue(m_rot_rut_details));
    }
    if (m_sales_person_id.isSet()) {
        obj.insert(QString("salesPersonID"), ::OpenAPI::toJsonValue(m_sales_person_id));
    }
    if (m_salesperson.isSet()) {
        obj.insert(QString("salesperson"), ::OpenAPI::toJsonValue(m_salesperson));
    }
    if (m_tax_detail_lines.size() > 0) {
        obj.insert(QString("taxDetailLines"), ::OpenAPI::toJsonValue(m_tax_detail_lines));
    }
    return obj;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAICustomerDebitNoteUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getCashAccount() const {
    return m_cash_account;
}
void OAICustomerDebitNoteUpdateDto::setCashAccount(const OAIDtoValueOfString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

OAIDtoValueOfDateTime OAICustomerDebitNoteUpdateDto::getCashDiscountDate() const {
    return m_cash_discount_date;
}
void OAICustomerDebitNoteUpdateDto::setCashDiscountDate(const OAIDtoValueOfDateTime &cash_discount_date) {
    m_cash_discount_date = cash_discount_date;
    m_cash_discount_date_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_cash_discount_date_Set() const{
    return m_cash_discount_date_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_cash_discount_date_Valid() const{
    return m_cash_discount_date_isValid;
}

OAIDtoValueOfNullableOfInt32 OAICustomerDebitNoteUpdateDto::getContact() const {
    return m_contact;
}
void OAICustomerDebitNoteUpdateDto::setContact(const OAIDtoValueOfNullableOfInt32 &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_contact_Valid() const{
    return m_contact_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getCreditTermsId() const {
    return m_credit_terms_id;
}
void OAICustomerDebitNoteUpdateDto::setCreditTermsId(const OAIDtoValueOfString &credit_terms_id) {
    m_credit_terms_id = credit_terms_id;
    m_credit_terms_id_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_credit_terms_id_Set() const{
    return m_credit_terms_id_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_credit_terms_id_Valid() const{
    return m_credit_terms_id_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getCurrencyId() const {
    return m_currency_id;
}
void OAICustomerDebitNoteUpdateDto::setCurrencyId(const OAIDtoValueOfString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getCustomerNumber() const {
    return m_customer_number;
}
void OAICustomerDebitNoteUpdateDto::setCustomerNumber(const OAIDtoValueOfString &customer_number) {
    m_customer_number = customer_number;
    m_customer_number_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_customer_number_Set() const{
    return m_customer_number_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_customer_number_Valid() const{
    return m_customer_number_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getCustomerRefNumber() const {
    return m_customer_ref_number;
}
void OAICustomerDebitNoteUpdateDto::setCustomerRefNumber(const OAIDtoValueOfString &customer_ref_number) {
    m_customer_ref_number = customer_ref_number;
    m_customer_ref_number_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_customer_ref_number_Set() const{
    return m_customer_ref_number_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_customer_ref_number_Valid() const{
    return m_customer_ref_number_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getCustomerVatZoneId() const {
    return m_customer_vat_zone_id;
}
void OAICustomerDebitNoteUpdateDto::setCustomerVatZoneId(const OAIDtoValueOfString &customer_vat_zone_id) {
    m_customer_vat_zone_id = customer_vat_zone_id;
    m_customer_vat_zone_id_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_customer_vat_zone_id_Set() const{
    return m_customer_vat_zone_id_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_customer_vat_zone_id_Valid() const{
    return m_customer_vat_zone_id_isValid;
}

OAIDtoValueOfDateTime OAICustomerDebitNoteUpdateDto::getDocumentDate() const {
    return m_document_date;
}
void OAICustomerDebitNoteUpdateDto::setDocumentDate(const OAIDtoValueOfDateTime &document_date) {
    m_document_date = document_date;
    m_document_date_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_document_date_Set() const{
    return m_document_date_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_document_date_Valid() const{
    return m_document_date_isValid;
}

OAIDtoValueOfDateTime OAICustomerDebitNoteUpdateDto::getDocumentDueDate() const {
    return m_document_due_date;
}
void OAICustomerDebitNoteUpdateDto::setDocumentDueDate(const OAIDtoValueOfDateTime &document_due_date) {
    m_document_due_date = document_due_date;
    m_document_due_date_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_document_due_date_Set() const{
    return m_document_due_date_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_document_due_date_Valid() const{
    return m_document_due_date_isValid;
}

OAIDtoValueOfNullableOfBoolean OAICustomerDebitNoteUpdateDto::getDomesticServicesDeductibleDocument() const {
    return m_domestic_services_deductible_document;
}
void OAICustomerDebitNoteUpdateDto::setDomesticServicesDeductibleDocument(const OAIDtoValueOfNullableOfBoolean &domestic_services_deductible_document) {
    m_domestic_services_deductible_document = domestic_services_deductible_document;
    m_domestic_services_deductible_document_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_domestic_services_deductible_document_Set() const{
    return m_domestic_services_deductible_document_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_domestic_services_deductible_document_Valid() const{
    return m_domestic_services_deductible_document_isValid;
}

OAIDtoValueOfBoolean OAICustomerDebitNoteUpdateDto::getDontEmail() const {
    return m_dont_email;
}
void OAICustomerDebitNoteUpdateDto::setDontEmail(const OAIDtoValueOfBoolean &dont_email) {
    m_dont_email = dont_email;
    m_dont_email_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_dont_email_Set() const{
    return m_dont_email_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_dont_email_Valid() const{
    return m_dont_email_isValid;
}

OAIDtoValueOfBoolean OAICustomerDebitNoteUpdateDto::getDontPrint() const {
    return m_dont_print;
}
void OAICustomerDebitNoteUpdateDto::setDontPrint(const OAIDtoValueOfBoolean &dont_print) {
    m_dont_print = dont_print;
    m_dont_print_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_dont_print_Set() const{
    return m_dont_print_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_dont_print_Valid() const{
    return m_dont_print_isValid;
}

OAIDtoValueOfDecimal OAICustomerDebitNoteUpdateDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAICustomerDebitNoteUpdateDto::setExchangeRate(const OAIDtoValueOfDecimal &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getExternalReference() const {
    return m_external_reference;
}
void OAICustomerDebitNoteUpdateDto::setExternalReference(const OAIDtoValueOfString &external_reference) {
    m_external_reference = external_reference;
    m_external_reference_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_external_reference_Set() const{
    return m_external_reference_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_external_reference_Valid() const{
    return m_external_reference_isValid;
}

OAIFinancialPeriodInCustomerDebitNoteUpdateDto OAICustomerDebitNoteUpdateDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAICustomerDebitNoteUpdateDto::setFinancialPeriod(const OAIFinancialPeriodInCustomerDebitNoteUpdateDto &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

OAIDtoValueOfBoolean OAICustomerDebitNoteUpdateDto::getHold() const {
    return m_hold;
}
void OAICustomerDebitNoteUpdateDto::setHold(const OAIDtoValueOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIDtoValueOfSalesInvoiceAddressUpdateDto OAICustomerDebitNoteUpdateDto::getInvoiceAddress() const {
    return m_invoice_address;
}
void OAICustomerDebitNoteUpdateDto::setInvoiceAddress(const OAIDtoValueOfSalesInvoiceAddressUpdateDto &invoice_address) {
    m_invoice_address = invoice_address;
    m_invoice_address_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_invoice_address_Set() const{
    return m_invoice_address_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_invoice_address_Valid() const{
    return m_invoice_address_isValid;
}

OAIDtoValueOfSalesInvoiceContactUpdateDto OAICustomerDebitNoteUpdateDto::getInvoiceContact() const {
    return m_invoice_contact;
}
void OAICustomerDebitNoteUpdateDto::setInvoiceContact(const OAIDtoValueOfSalesInvoiceContactUpdateDto &invoice_contact) {
    m_invoice_contact = invoice_contact;
    m_invoice_contact_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_invoice_contact_Set() const{
    return m_invoice_contact_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_invoice_contact_Valid() const{
    return m_invoice_contact_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getInvoiceText() const {
    return m_invoice_text;
}
void OAICustomerDebitNoteUpdateDto::setInvoiceText(const OAIDtoValueOfString &invoice_text) {
    m_invoice_text = invoice_text;
    m_invoice_text_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_invoice_text_Set() const{
    return m_invoice_text_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_invoice_text_Valid() const{
    return m_invoice_text_isValid;
}

QList<OAICustomerDebitNoteLinesUpdateDto> OAICustomerDebitNoteUpdateDto::getLines() const {
    return m_lines;
}
void OAICustomerDebitNoteUpdateDto::setLines(const QList<OAICustomerDebitNoteLinesUpdateDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAICustomerDebitNoteUpdateDto::setLocationId(const OAIDtoValueOfString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getNote() const {
    return m_note;
}
void OAICustomerDebitNoteUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfDateTime OAICustomerDebitNoteUpdateDto::getOrigInvoiceDate() const {
    return m_orig_invoice_date;
}
void OAICustomerDebitNoteUpdateDto::setOrigInvoiceDate(const OAIDtoValueOfDateTime &orig_invoice_date) {
    m_orig_invoice_date = orig_invoice_date;
    m_orig_invoice_date_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_orig_invoice_date_Set() const{
    return m_orig_invoice_date_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_orig_invoice_date_Valid() const{
    return m_orig_invoice_date_isValid;
}

OAIDtoValueOfBoolean OAICustomerDebitNoteUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAICustomerDebitNoteUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getPaymentMethodId() const {
    return m_payment_method_id;
}
void OAICustomerDebitNoteUpdateDto::setPaymentMethodId(const OAIDtoValueOfString &payment_method_id) {
    m_payment_method_id = payment_method_id;
    m_payment_method_id_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_payment_method_id_Set() const{
    return m_payment_method_id_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_payment_method_id_Valid() const{
    return m_payment_method_id_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getPaymentReference() const {
    return m_payment_reference;
}
void OAICustomerDebitNoteUpdateDto::setPaymentReference(const OAIDtoValueOfString &payment_reference) {
    m_payment_reference = payment_reference;
    m_payment_reference_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_payment_reference_Set() const{
    return m_payment_reference_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_payment_reference_Valid() const{
    return m_payment_reference_isValid;
}

OAIPostPeriodInCustomerDebitNoteUpdateDto OAICustomerDebitNoteUpdateDto::getPostPeriod() const {
    return m_post_period;
}
void OAICustomerDebitNoteUpdateDto::setPostPeriod(const OAIPostPeriodInCustomerDebitNoteUpdateDto &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

OAIDtoValueOfString OAICustomerDebitNoteUpdateDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAICustomerDebitNoteUpdateDto::setReferenceNumber(const OAIDtoValueOfString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

OAIRotRutUpdateDto OAICustomerDebitNoteUpdateDto::getRotRutDetails() const {
    return m_rot_rut_details;
}
void OAICustomerDebitNoteUpdateDto::setRotRutDetails(const OAIRotRutUpdateDto &rot_rut_details) {
    m_rot_rut_details = rot_rut_details;
    m_rot_rut_details_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_rot_rut_details_Set() const{
    return m_rot_rut_details_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_rot_rut_details_Valid() const{
    return m_rot_rut_details_isValid;
}

OAISalesPersonIDInCustomerDebitNoteUpdateDto OAICustomerDebitNoteUpdateDto::getSalesPersonId() const {
    return m_sales_person_id;
}
void OAICustomerDebitNoteUpdateDto::setSalesPersonId(const OAISalesPersonIDInCustomerDebitNoteUpdateDto &sales_person_id) {
    m_sales_person_id = sales_person_id;
    m_sales_person_id_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_sales_person_id_Set() const{
    return m_sales_person_id_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_sales_person_id_Valid() const{
    return m_sales_person_id_isValid;
}

OAISalespersonInCustomerDebitNoteUpdateDto OAICustomerDebitNoteUpdateDto::getSalesperson() const {
    return m_salesperson;
}
void OAICustomerDebitNoteUpdateDto::setSalesperson(const OAISalespersonInCustomerDebitNoteUpdateDto &salesperson) {
    m_salesperson = salesperson;
    m_salesperson_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_salesperson_Set() const{
    return m_salesperson_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_salesperson_Valid() const{
    return m_salesperson_isValid;
}

QList<OAITaxDetailUpdateDto> OAICustomerDebitNoteUpdateDto::getTaxDetailLines() const {
    return m_tax_detail_lines;
}
void OAICustomerDebitNoteUpdateDto::setTaxDetailLines(const QList<OAITaxDetailUpdateDto> &tax_detail_lines) {
    m_tax_detail_lines = tax_detail_lines;
    m_tax_detail_lines_isSet = true;
}

bool OAICustomerDebitNoteUpdateDto::is_tax_detail_lines_Set() const{
    return m_tax_detail_lines_isSet;
}

bool OAICustomerDebitNoteUpdateDto::is_tax_detail_lines_Valid() const{
    return m_tax_detail_lines_isValid;
}

bool OAICustomerDebitNoteUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_terms_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_vat_zone_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_due_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic_services_deductible_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_print.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_invoice_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rot_rut_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesperson.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_detail_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerDebitNoteUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
