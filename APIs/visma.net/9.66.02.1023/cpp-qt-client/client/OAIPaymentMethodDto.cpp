/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethodDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethodDto::OAIPaymentMethodDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethodDto::OAIPaymentMethodDto() {
    this->initializeModel();
}

OAIPaymentMethodDto::~OAIPaymentMethodDto() {}

void OAIPaymentMethodDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_means_of_payment_isSet = false;
    m_means_of_payment_isValid = false;

    m_payment_method_id_isSet = false;
    m_payment_method_id_isValid = false;

    m_use_in_ap_isSet = false;
    m_use_in_ap_isValid = false;
}

void OAIPaymentMethodDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethodDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_means_of_payment_isValid = ::OpenAPI::fromJsonValue(m_means_of_payment, json[QString("meansOfPayment")]);
    m_means_of_payment_isSet = !json[QString("meansOfPayment")].isNull() && m_means_of_payment_isValid;

    m_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_payment_method_id, json[QString("paymentMethodID")]);
    m_payment_method_id_isSet = !json[QString("paymentMethodID")].isNull() && m_payment_method_id_isValid;

    m_use_in_ap_isValid = ::OpenAPI::fromJsonValue(m_use_in_ap, json[QString("useInAP")]);
    m_use_in_ap_isSet = !json[QString("useInAP")].isNull() && m_use_in_ap_isValid;
}

QString OAIPaymentMethodDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethodDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_means_of_payment_isSet) {
        obj.insert(QString("meansOfPayment"), ::OpenAPI::toJsonValue(m_means_of_payment));
    }
    if (m_payment_method_id_isSet) {
        obj.insert(QString("paymentMethodID"), ::OpenAPI::toJsonValue(m_payment_method_id));
    }
    if (m_use_in_ap_isSet) {
        obj.insert(QString("useInAP"), ::OpenAPI::toJsonValue(m_use_in_ap));
    }
    return obj;
}

bool OAIPaymentMethodDto::isActive() const {
    return m_active;
}
void OAIPaymentMethodDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPaymentMethodDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPaymentMethodDto::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIPaymentMethodDto::getDescription() const {
    return m_description;
}
void OAIPaymentMethodDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentMethodDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentMethodDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIPaymentMethodDetailDto> OAIPaymentMethodDto::getDetails() const {
    return m_details;
}
void OAIPaymentMethodDto::setDetails(const QList<OAIPaymentMethodDetailDto> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIPaymentMethodDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAIPaymentMethodDto::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIPaymentMethodDto::getMeansOfPayment() const {
    return m_means_of_payment;
}
void OAIPaymentMethodDto::setMeansOfPayment(const QString &means_of_payment) {
    m_means_of_payment = means_of_payment;
    m_means_of_payment_isSet = true;
}

bool OAIPaymentMethodDto::is_means_of_payment_Set() const{
    return m_means_of_payment_isSet;
}

bool OAIPaymentMethodDto::is_means_of_payment_Valid() const{
    return m_means_of_payment_isValid;
}

QString OAIPaymentMethodDto::getPaymentMethodId() const {
    return m_payment_method_id;
}
void OAIPaymentMethodDto::setPaymentMethodId(const QString &payment_method_id) {
    m_payment_method_id = payment_method_id;
    m_payment_method_id_isSet = true;
}

bool OAIPaymentMethodDto::is_payment_method_id_Set() const{
    return m_payment_method_id_isSet;
}

bool OAIPaymentMethodDto::is_payment_method_id_Valid() const{
    return m_payment_method_id_isValid;
}

bool OAIPaymentMethodDto::isUseInAp() const {
    return m_use_in_ap;
}
void OAIPaymentMethodDto::setUseInAp(const bool &use_in_ap) {
    m_use_in_ap = use_in_ap;
    m_use_in_ap_isSet = true;
}

bool OAIPaymentMethodDto::is_use_in_ap_Set() const{
    return m_use_in_ap_isSet;
}

bool OAIPaymentMethodDto::is_use_in_ap_Valid() const{
    return m_use_in_ap_isValid;
}

bool OAIPaymentMethodDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_means_of_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_in_ap_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethodDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
