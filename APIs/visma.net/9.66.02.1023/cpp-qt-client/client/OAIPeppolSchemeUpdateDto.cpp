/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeppolSchemeUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeppolSchemeUpdateDto::OAIPeppolSchemeUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeppolSchemeUpdateDto::OAIPeppolSchemeUpdateDto() {
    this->initializeModel();
}

OAIPeppolSchemeUpdateDto::~OAIPeppolSchemeUpdateDto() {}

void OAIPeppolSchemeUpdateDto::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_party_identification_isSet = false;
    m_party_identification_isValid = false;

    m_party_legal_isSet = false;
    m_party_legal_isValid = false;
}

void OAIPeppolSchemeUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeppolSchemeUpdateDto::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_party_identification_isValid = ::OpenAPI::fromJsonValue(m_party_identification, json[QString("partyIdentification")]);
    m_party_identification_isSet = !json[QString("partyIdentification")].isNull() && m_party_identification_isValid;

    m_party_legal_isValid = ::OpenAPI::fromJsonValue(m_party_legal, json[QString("partyLegal")]);
    m_party_legal_isSet = !json[QString("partyLegal")].isNull() && m_party_legal_isValid;
}

QString OAIPeppolSchemeUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeppolSchemeUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint.isSet()) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_party_identification.isSet()) {
        obj.insert(QString("partyIdentification"), ::OpenAPI::toJsonValue(m_party_identification));
    }
    if (m_party_legal.isSet()) {
        obj.insert(QString("partyLegal"), ::OpenAPI::toJsonValue(m_party_legal));
    }
    return obj;
}

OAIDtoValueOfString OAIPeppolSchemeUpdateDto::getEndpoint() const {
    return m_endpoint;
}
void OAIPeppolSchemeUpdateDto::setEndpoint(const OAIDtoValueOfString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIPeppolSchemeUpdateDto::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIPeppolSchemeUpdateDto::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

OAIDtoValueOfString OAIPeppolSchemeUpdateDto::getPartyIdentification() const {
    return m_party_identification;
}
void OAIPeppolSchemeUpdateDto::setPartyIdentification(const OAIDtoValueOfString &party_identification) {
    m_party_identification = party_identification;
    m_party_identification_isSet = true;
}

bool OAIPeppolSchemeUpdateDto::is_party_identification_Set() const{
    return m_party_identification_isSet;
}

bool OAIPeppolSchemeUpdateDto::is_party_identification_Valid() const{
    return m_party_identification_isValid;
}

OAIDtoValueOfString OAIPeppolSchemeUpdateDto::getPartyLegal() const {
    return m_party_legal;
}
void OAIPeppolSchemeUpdateDto::setPartyLegal(const OAIDtoValueOfString &party_legal) {
    m_party_legal = party_legal;
    m_party_legal_isSet = true;
}

bool OAIPeppolSchemeUpdateDto::is_party_legal_Set() const{
    return m_party_legal_isSet;
}

bool OAIPeppolSchemeUpdateDto::is_party_legal_Valid() const{
    return m_party_legal_isValid;
}

bool OAIPeppolSchemeUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_identification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_legal.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeppolSchemeUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
