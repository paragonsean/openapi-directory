/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentUpdateDto::OAIPaymentUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentUpdateDto::OAIPaymentUpdateDto() {
    this->initializeModel();
}

OAIPaymentUpdateDto::~OAIPaymentUpdateDto() {}

void OAIPaymentUpdateDto::initializeModel() {

    m_application_date_isSet = false;
    m_application_date_isValid = false;

    m_application_period_isSet = false;
    m_application_period_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_invoice_text_isSet = false;
    m_invoice_text_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_orders_to_apply_isSet = false;
    m_orders_to_apply_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_payment_amount_isSet = false;
    m_payment_amount_isValid = false;

    m_payment_lines_isSet = false;
    m_payment_lines_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_ref_isSet = false;
    m_payment_ref_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPaymentUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentUpdateDto::fromJsonObject(QJsonObject json) {

    m_application_date_isValid = ::OpenAPI::fromJsonValue(m_application_date, json[QString("applicationDate")]);
    m_application_date_isSet = !json[QString("applicationDate")].isNull() && m_application_date_isValid;

    m_application_period_isValid = ::OpenAPI::fromJsonValue(m_application_period, json[QString("applicationPeriod")]);
    m_application_period_isSet = !json[QString("applicationPeriod")].isNull() && m_application_period_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_invoice_text_isValid = ::OpenAPI::fromJsonValue(m_invoice_text, json[QString("invoiceText")]);
    m_invoice_text_isSet = !json[QString("invoiceText")].isNull() && m_invoice_text_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_orders_to_apply_isValid = ::OpenAPI::fromJsonValue(m_orders_to_apply, json[QString("ordersToApply")]);
    m_orders_to_apply_isSet = !json[QString("ordersToApply")].isNull() && m_orders_to_apply_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_payment_amount, json[QString("paymentAmount")]);
    m_payment_amount_isSet = !json[QString("paymentAmount")].isNull() && m_payment_amount_isValid;

    m_payment_lines_isValid = ::OpenAPI::fromJsonValue(m_payment_lines, json[QString("paymentLines")]);
    m_payment_lines_isSet = !json[QString("paymentLines")].isNull() && m_payment_lines_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_ref_isValid = ::OpenAPI::fromJsonValue(m_payment_ref, json[QString("paymentRef")]);
    m_payment_ref_isSet = !json[QString("paymentRef")].isNull() && m_payment_ref_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPaymentUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_application_date.isSet()) {
        obj.insert(QString("applicationDate"), ::OpenAPI::toJsonValue(m_application_date));
    }
    if (m_application_period.isSet()) {
        obj.insert(QString("applicationPeriod"), ::OpenAPI::toJsonValue(m_application_period));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_invoice_text.isSet()) {
        obj.insert(QString("invoiceText"), ::OpenAPI::toJsonValue(m_invoice_text));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_orders_to_apply.size() > 0) {
        obj.insert(QString("ordersToApply"), ::OpenAPI::toJsonValue(m_orders_to_apply));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_payment_amount.isSet()) {
        obj.insert(QString("paymentAmount"), ::OpenAPI::toJsonValue(m_payment_amount));
    }
    if (m_payment_lines.size() > 0) {
        obj.insert(QString("paymentLines"), ::OpenAPI::toJsonValue(m_payment_lines));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_ref.isSet()) {
        obj.insert(QString("paymentRef"), ::OpenAPI::toJsonValue(m_payment_ref));
    }
    if (m_reference_number.isSet()) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIApplicationDateInPaymentUpdateDto OAIPaymentUpdateDto::getApplicationDate() const {
    return m_application_date;
}
void OAIPaymentUpdateDto::setApplicationDate(const OAIApplicationDateInPaymentUpdateDto &application_date) {
    m_application_date = application_date;
    m_application_date_isSet = true;
}

bool OAIPaymentUpdateDto::is_application_date_Set() const{
    return m_application_date_isSet;
}

bool OAIPaymentUpdateDto::is_application_date_Valid() const{
    return m_application_date_isValid;
}

OAIApplicationPeriodInPaymentUpdateDto OAIPaymentUpdateDto::getApplicationPeriod() const {
    return m_application_period;
}
void OAIPaymentUpdateDto::setApplicationPeriod(const OAIApplicationPeriodInPaymentUpdateDto &application_period) {
    m_application_period = application_period;
    m_application_period_isSet = true;
}

bool OAIPaymentUpdateDto::is_application_period_Set() const{
    return m_application_period_isSet;
}

bool OAIPaymentUpdateDto::is_application_period_Valid() const{
    return m_application_period_isValid;
}

OAIDtoValueOfString OAIPaymentUpdateDto::getBranch() const {
    return m_branch;
}
void OAIPaymentUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIPaymentUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIPaymentUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAICashAccountInPaymentUpdateDto OAIPaymentUpdateDto::getCashAccount() const {
    return m_cash_account;
}
void OAIPaymentUpdateDto::setCashAccount(const OAICashAccountInPaymentUpdateDto &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAIPaymentUpdateDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAIPaymentUpdateDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

OAICurrencyInPaymentUpdateDto OAIPaymentUpdateDto::getCurrency() const {
    return m_currency;
}
void OAIPaymentUpdateDto::setCurrency(const OAICurrencyInPaymentUpdateDto &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPaymentUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPaymentUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerInPaymentUpdateDto OAIPaymentUpdateDto::getCustomer() const {
    return m_customer;
}
void OAIPaymentUpdateDto::setCustomer(const OAICustomerInPaymentUpdateDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIPaymentUpdateDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIPaymentUpdateDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIHoldInPaymentUpdateDto OAIPaymentUpdateDto::getHold() const {
    return m_hold;
}
void OAIPaymentUpdateDto::setHold(const OAIHoldInPaymentUpdateDto &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIPaymentUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIPaymentUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIInvoiceTextInPaymentUpdateDto OAIPaymentUpdateDto::getInvoiceText() const {
    return m_invoice_text;
}
void OAIPaymentUpdateDto::setInvoiceText(const OAIInvoiceTextInPaymentUpdateDto &invoice_text) {
    m_invoice_text = invoice_text;
    m_invoice_text_isSet = true;
}

bool OAIPaymentUpdateDto::is_invoice_text_Set() const{
    return m_invoice_text_isSet;
}

bool OAIPaymentUpdateDto::is_invoice_text_Valid() const{
    return m_invoice_text_isValid;
}

OAILocationInPaymentUpdateDto OAIPaymentUpdateDto::getLocation() const {
    return m_location;
}
void OAIPaymentUpdateDto::setLocation(const OAILocationInPaymentUpdateDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPaymentUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPaymentUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

QList<OAIPaymentOrdersLinesUpdateDto> OAIPaymentUpdateDto::getOrdersToApply() const {
    return m_orders_to_apply;
}
void OAIPaymentUpdateDto::setOrdersToApply(const QList<OAIPaymentOrdersLinesUpdateDto> &orders_to_apply) {
    m_orders_to_apply = orders_to_apply;
    m_orders_to_apply_isSet = true;
}

bool OAIPaymentUpdateDto::is_orders_to_apply_Set() const{
    return m_orders_to_apply_isSet;
}

bool OAIPaymentUpdateDto::is_orders_to_apply_Valid() const{
    return m_orders_to_apply_isValid;
}

OAIDtoValueOfBoolean OAIPaymentUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAIPaymentUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAIPaymentUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAIPaymentUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIPaymentAmountInPaymentUpdateDto OAIPaymentUpdateDto::getPaymentAmount() const {
    return m_payment_amount;
}
void OAIPaymentUpdateDto::setPaymentAmount(const OAIPaymentAmountInPaymentUpdateDto &payment_amount) {
    m_payment_amount = payment_amount;
    m_payment_amount_isSet = true;
}

bool OAIPaymentUpdateDto::is_payment_amount_Set() const{
    return m_payment_amount_isSet;
}

bool OAIPaymentUpdateDto::is_payment_amount_Valid() const{
    return m_payment_amount_isValid;
}

QList<OAIPaymentLinesUpdateDto> OAIPaymentUpdateDto::getPaymentLines() const {
    return m_payment_lines;
}
void OAIPaymentUpdateDto::setPaymentLines(const QList<OAIPaymentLinesUpdateDto> &payment_lines) {
    m_payment_lines = payment_lines;
    m_payment_lines_isSet = true;
}

bool OAIPaymentUpdateDto::is_payment_lines_Set() const{
    return m_payment_lines_isSet;
}

bool OAIPaymentUpdateDto::is_payment_lines_Valid() const{
    return m_payment_lines_isValid;
}

OAIPaymentMethodInPaymentUpdateDto OAIPaymentUpdateDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAIPaymentUpdateDto::setPaymentMethod(const OAIPaymentMethodInPaymentUpdateDto &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIPaymentUpdateDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIPaymentUpdateDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

OAIPaymentRefInPaymentUpdateDto OAIPaymentUpdateDto::getPaymentRef() const {
    return m_payment_ref;
}
void OAIPaymentUpdateDto::setPaymentRef(const OAIPaymentRefInPaymentUpdateDto &payment_ref) {
    m_payment_ref = payment_ref;
    m_payment_ref_isSet = true;
}

bool OAIPaymentUpdateDto::is_payment_ref_Set() const{
    return m_payment_ref_isSet;
}

bool OAIPaymentUpdateDto::is_payment_ref_Valid() const{
    return m_payment_ref_isValid;
}

OAIReferenceNumberInPaymentUpdateDto OAIPaymentUpdateDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAIPaymentUpdateDto::setReferenceNumber(const OAIReferenceNumberInPaymentUpdateDto &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAIPaymentUpdateDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAIPaymentUpdateDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

OAITypeInPaymentUpdateDto OAIPaymentUpdateDto::getType() const {
    return m_type;
}
void OAIPaymentUpdateDto::setType(const OAITypeInPaymentUpdateDto &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentUpdateDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentUpdateDto::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPaymentUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orders_to_apply.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
