/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomerApi_H
#define OAI_OAICustomerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAICashSaleDto.h"
#include "OAIChangeCustomerCdActionDto.h"
#include "OAIChangeCustomerCdActionResultDto.h"
#include "OAIContactDto.h"
#include "OAICreateDunningLetterActionDto.h"
#include "OAICreateDunningLetterActionResultDto.h"
#include "OAICustSalesPersonsDto.h"
#include "OAICustomerBalanceDto.h"
#include "OAICustomerClassDto.h"
#include "OAICustomerDirectDebitDto.h"
#include "OAICustomerDocumentDto.h"
#include "OAICustomerDto.h"
#include "OAICustomerInvoiceDto.h"
#include "OAICustomerUpdateDto.h"
#include "OAINoteDto.h"
#include "OAIObject.h"
#include "OAISalesOrderBasicDto.h"
#include "OAISalesOrderDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomerApi : public QObject {
    Q_OBJECT

public:
    OAICustomerApi(const int timeOut = 0);
    ~OAICustomerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  oai_change_customer_cd_action_dto OAIChangeCustomerCdActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerChangeCustomerNrActionByinternalId(const qint32 &internal_id, const OAIChangeCustomerCdActionDto &oai_change_customer_cd_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  oai_create_dunning_letter_action_dto OAICreateDunningLetterActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreateDunningLetterActionBycustomer(const QString &customer, const OAICreateDunningLetterActionDto &oai_create_dunning_letter_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  corporate_id QString [optional]
    * @param[in]  vat_registration_id QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  expand_account_information bool [optional]
    * @param[in]  expand_payment_methods bool [optional]
    * @param[in]  expand_direct_debit bool [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetAll(const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &corporate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vat_registration_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_account_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_payment_methods = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_direct_debit = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_number QString [required]
    * @param[in]  document_type QString [optional]
    * @param[in]  released qint32 [optional]
    * @param[in]  dunning_level qint32 [optional]
    * @param[in]  closed_financial_period QString [optional]
    * @param[in]  dunning_letter_date_time QString [optional]
    * @param[in]  dunning_letter_date_time_condition QString [optional]
    * @param[in]  project QString [optional]
    * @param[in]  expand_applications bool [optional]
    * @param[in]  expand_dunning_information bool [optional]
    * @param[in]  expand_attachments bool [optional]
    * @param[in]  expand_tax_details bool [optional]
    * @param[in]  expand_invoice_address bool [optional]
    * @param[in]  financial_period QString [optional]
    * @param[in]  document_due_date QDateTime [optional]
    * @param[in]  status QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  external_reference QString [optional]
    * @param[in]  payment_reference QString [optional]
    * @param[in]  customer_ref_number QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetAllCashSalesForCustomerBycustomerNumber(const QString &customer_number, const ::OpenAPI::OptionalParam<QString> &document_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &released = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &dunning_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &closed_financial_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dunning_letter_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dunning_letter_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_applications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_dunning_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_tax_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_invoice_address = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &financial_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &document_due_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &external_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_ref_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_cd QString [required]
    * @param[in]  display_name QString [optional]
    * @param[in]  active QString [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  business_account QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetAllContactsForCustomerBycustomerCd(const QString &customer_cd, const ::OpenAPI::OptionalParam<QString> &display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &active = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetAllCustomerBalance(const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_number QString [required]
    * @param[in]  document_type QString [optional]
    * @param[in]  released qint32 [optional]
    * @param[in]  dunning_level qint32 [optional]
    * @param[in]  closed_financial_period QString [optional]
    * @param[in]  dunning_letter_date_time QString [optional]
    * @param[in]  dunning_letter_date_time_condition QString [optional]
    * @param[in]  project QString [optional]
    * @param[in]  expand_applications bool [optional]
    * @param[in]  expand_dunning_information bool [optional]
    * @param[in]  expand_attachments bool [optional]
    * @param[in]  expand_tax_details bool [optional]
    * @param[in]  expand_invoice_address bool [optional]
    * @param[in]  financial_period QString [optional]
    * @param[in]  document_due_date QDateTime [optional]
    * @param[in]  status QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  external_reference QString [optional]
    * @param[in]  payment_reference QString [optional]
    * @param[in]  customer_ref_number QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetAllDocumentsForCustomerBycustomerNumber(const QString &customer_number, const ::OpenAPI::OptionalParam<QString> &document_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &released = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &dunning_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &closed_financial_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dunning_letter_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dunning_letter_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_applications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_dunning_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_tax_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_invoice_address = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &financial_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &document_due_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &external_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_ref_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_number QString [required]
    * @param[in]  document_type QString [optional]
    * @param[in]  released qint32 [optional]
    * @param[in]  dunning_level qint32 [optional]
    * @param[in]  closed_financial_period QString [optional]
    * @param[in]  dunning_letter_date_time QString [optional]
    * @param[in]  dunning_letter_date_time_condition QString [optional]
    * @param[in]  project QString [optional]
    * @param[in]  expand_applications bool [optional]
    * @param[in]  expand_dunning_information bool [optional]
    * @param[in]  expand_attachments bool [optional]
    * @param[in]  expand_tax_details bool [optional]
    * @param[in]  expand_invoice_address bool [optional]
    * @param[in]  financial_period QString [optional]
    * @param[in]  document_due_date QDateTime [optional]
    * @param[in]  status QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  external_reference QString [optional]
    * @param[in]  payment_reference QString [optional]
    * @param[in]  customer_ref_number QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetAllInvoicesForCustomerBycustomerNumber(const QString &customer_number, const ::OpenAPI::OptionalParam<QString> &document_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &released = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &dunning_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &closed_financial_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dunning_letter_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dunning_letter_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_applications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_dunning_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_tax_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_invoice_address = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &financial_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &document_due_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &external_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_ref_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_cd QString [required]
    * @param[in]  order_type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  show_notes bool [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetAllOrderForCustomerBycustomerCd(const QString &customer_cd, const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_notes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_cd QString [required]
    * @param[in]  order_type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  show_notes bool [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetAllSalesOrderBasicForCustomerBycustomerCd(const QString &customer_cd, const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_notes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_cd QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetBycustomerCd(const QString &customer_cd, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetByinternalID(const qint32 &internal_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_cd QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetCustomerBalanceBycustomerCd(const QString &customer_cd, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetCustomerClasses(const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_cd QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetCustomerDirectDebitBycustomerCd(const QString &customer_cd, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_cd QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetCustomerNoteBycustomerCd(const QString &customer_cd, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_cd QString [required]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetSalesPersonsForCustomerBycustomerCd(const QString &customer_cd, const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_class_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerGetSpecificCustomerClassBycustomerClassId(const QString &customer_class_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_customer_update_dto OAICustomerUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerPost(const OAICustomerUpdateDto &oai_customer_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_cd QString [required]
    * @param[in]  oai_customer_update_dto OAICustomerUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerPutBycustomerCd(const QString &customer_cd, const OAICustomerUpdateDto &oai_customer_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  oai_customer_update_dto OAICustomerUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerPutByinternalID(const qint32 &internal_id, const OAICustomerUpdateDto &oai_customer_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customerChangeCustomerNrActionByinternalIdCallback(OAIHttpRequestWorker *worker);
    void customerCreateDunningLetterActionBycustomerCallback(OAIHttpRequestWorker *worker);
    void customerGetAllCallback(OAIHttpRequestWorker *worker);
    void customerGetAllCashSalesForCustomerBycustomerNumberCallback(OAIHttpRequestWorker *worker);
    void customerGetAllContactsForCustomerBycustomerCdCallback(OAIHttpRequestWorker *worker);
    void customerGetAllCustomerBalanceCallback(OAIHttpRequestWorker *worker);
    void customerGetAllDocumentsForCustomerBycustomerNumberCallback(OAIHttpRequestWorker *worker);
    void customerGetAllInvoicesForCustomerBycustomerNumberCallback(OAIHttpRequestWorker *worker);
    void customerGetAllOrderForCustomerBycustomerCdCallback(OAIHttpRequestWorker *worker);
    void customerGetAllSalesOrderBasicForCustomerBycustomerCdCallback(OAIHttpRequestWorker *worker);
    void customerGetBycustomerCdCallback(OAIHttpRequestWorker *worker);
    void customerGetByinternalIDCallback(OAIHttpRequestWorker *worker);
    void customerGetCustomerBalanceBycustomerCdCallback(OAIHttpRequestWorker *worker);
    void customerGetCustomerClassesCallback(OAIHttpRequestWorker *worker);
    void customerGetCustomerDirectDebitBycustomerCdCallback(OAIHttpRequestWorker *worker);
    void customerGetCustomerNoteBycustomerCdCallback(OAIHttpRequestWorker *worker);
    void customerGetSalesPersonsForCustomerBycustomerCdCallback(OAIHttpRequestWorker *worker);
    void customerGetSpecificCustomerClassBycustomerClassIdCallback(OAIHttpRequestWorker *worker);
    void customerPostCallback(OAIHttpRequestWorker *worker);
    void customerPutBycustomerCdCallback(OAIHttpRequestWorker *worker);
    void customerPutByinternalIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customerChangeCustomerNrActionByinternalIdSignal(OAIChangeCustomerCdActionResultDto summary);
    void customerCreateDunningLetterActionBycustomerSignal(OAICreateDunningLetterActionResultDto summary);
    void customerGetAllSignal(QList<OAICustomerDto> summary);
    void customerGetAllCashSalesForCustomerBycustomerNumberSignal(QList<OAICashSaleDto> summary);
    void customerGetAllContactsForCustomerBycustomerCdSignal(QList<OAIContactDto> summary);
    void customerGetAllCustomerBalanceSignal(QList<OAICustomerBalanceDto> summary);
    void customerGetAllDocumentsForCustomerBycustomerNumberSignal(QList<OAICustomerDocumentDto> summary);
    void customerGetAllInvoicesForCustomerBycustomerNumberSignal(QList<OAICustomerInvoiceDto> summary);
    void customerGetAllOrderForCustomerBycustomerCdSignal(QList<OAISalesOrderDto> summary);
    void customerGetAllSalesOrderBasicForCustomerBycustomerCdSignal(QList<OAISalesOrderBasicDto> summary);
    void customerGetBycustomerCdSignal(OAICustomerDto summary);
    void customerGetByinternalIDSignal(OAICustomerDto summary);
    void customerGetCustomerBalanceBycustomerCdSignal(OAICustomerBalanceDto summary);
    void customerGetCustomerClassesSignal(QList<OAICustomerClassDto> summary);
    void customerGetCustomerDirectDebitBycustomerCdSignal(QList<OAICustomerDirectDebitDto> summary);
    void customerGetCustomerNoteBycustomerCdSignal(OAINoteDto summary);
    void customerGetSalesPersonsForCustomerBycustomerCdSignal(QList<OAICustSalesPersonsDto> summary);
    void customerGetSpecificCustomerClassBycustomerClassIdSignal(OAICustomerClassDto summary);
    void customerPostSignal(OAIObject summary);
    void customerPutBycustomerCdSignal(OAIBackgroundApiAcceptedDto summary);
    void customerPutByinternalIDSignal(OAIBackgroundApiAcceptedDto summary);


    void customerChangeCustomerNrActionByinternalIdSignalFull(OAIHttpRequestWorker *worker, OAIChangeCustomerCdActionResultDto summary);
    void customerCreateDunningLetterActionBycustomerSignalFull(OAIHttpRequestWorker *worker, OAICreateDunningLetterActionResultDto summary);
    void customerGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerDto> summary);
    void customerGetAllCashSalesForCustomerBycustomerNumberSignalFull(OAIHttpRequestWorker *worker, QList<OAICashSaleDto> summary);
    void customerGetAllContactsForCustomerBycustomerCdSignalFull(OAIHttpRequestWorker *worker, QList<OAIContactDto> summary);
    void customerGetAllCustomerBalanceSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerBalanceDto> summary);
    void customerGetAllDocumentsForCustomerBycustomerNumberSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerDocumentDto> summary);
    void customerGetAllInvoicesForCustomerBycustomerNumberSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerInvoiceDto> summary);
    void customerGetAllOrderForCustomerBycustomerCdSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesOrderDto> summary);
    void customerGetAllSalesOrderBasicForCustomerBycustomerCdSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesOrderBasicDto> summary);
    void customerGetBycustomerCdSignalFull(OAIHttpRequestWorker *worker, OAICustomerDto summary);
    void customerGetByinternalIDSignalFull(OAIHttpRequestWorker *worker, OAICustomerDto summary);
    void customerGetCustomerBalanceBycustomerCdSignalFull(OAIHttpRequestWorker *worker, OAICustomerBalanceDto summary);
    void customerGetCustomerClassesSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerClassDto> summary);
    void customerGetCustomerDirectDebitBycustomerCdSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerDirectDebitDto> summary);
    void customerGetCustomerNoteBycustomerCdSignalFull(OAIHttpRequestWorker *worker, OAINoteDto summary);
    void customerGetSalesPersonsForCustomerBycustomerCdSignalFull(OAIHttpRequestWorker *worker, QList<OAICustSalesPersonsDto> summary);
    void customerGetSpecificCustomerClassBycustomerClassIdSignalFull(OAIHttpRequestWorker *worker, OAICustomerClassDto summary);
    void customerPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerPutBycustomerCdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void customerPutByinternalIDSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use customerChangeCustomerNrActionByinternalIdSignalError() instead")
    void customerChangeCustomerNrActionByinternalIdSignalE(OAIChangeCustomerCdActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerChangeCustomerNrActionByinternalIdSignalError(OAIChangeCustomerCdActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreateDunningLetterActionBycustomerSignalError() instead")
    void customerCreateDunningLetterActionBycustomerSignalE(OAICreateDunningLetterActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreateDunningLetterActionBycustomerSignalError(OAICreateDunningLetterActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllSignalError() instead")
    void customerGetAllSignalE(QList<OAICustomerDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllSignalError(QList<OAICustomerDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllCashSalesForCustomerBycustomerNumberSignalError() instead")
    void customerGetAllCashSalesForCustomerBycustomerNumberSignalE(QList<OAICashSaleDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllCashSalesForCustomerBycustomerNumberSignalError(QList<OAICashSaleDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllContactsForCustomerBycustomerCdSignalError() instead")
    void customerGetAllContactsForCustomerBycustomerCdSignalE(QList<OAIContactDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllContactsForCustomerBycustomerCdSignalError(QList<OAIContactDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllCustomerBalanceSignalError() instead")
    void customerGetAllCustomerBalanceSignalE(QList<OAICustomerBalanceDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllCustomerBalanceSignalError(QList<OAICustomerBalanceDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllDocumentsForCustomerBycustomerNumberSignalError() instead")
    void customerGetAllDocumentsForCustomerBycustomerNumberSignalE(QList<OAICustomerDocumentDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllDocumentsForCustomerBycustomerNumberSignalError(QList<OAICustomerDocumentDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllInvoicesForCustomerBycustomerNumberSignalError() instead")
    void customerGetAllInvoicesForCustomerBycustomerNumberSignalE(QList<OAICustomerInvoiceDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllInvoicesForCustomerBycustomerNumberSignalError(QList<OAICustomerInvoiceDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllOrderForCustomerBycustomerCdSignalError() instead")
    void customerGetAllOrderForCustomerBycustomerCdSignalE(QList<OAISalesOrderDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllOrderForCustomerBycustomerCdSignalError(QList<OAISalesOrderDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllSalesOrderBasicForCustomerBycustomerCdSignalError() instead")
    void customerGetAllSalesOrderBasicForCustomerBycustomerCdSignalE(QList<OAISalesOrderBasicDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllSalesOrderBasicForCustomerBycustomerCdSignalError(QList<OAISalesOrderBasicDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetBycustomerCdSignalError() instead")
    void customerGetBycustomerCdSignalE(OAICustomerDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetBycustomerCdSignalError(OAICustomerDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetByinternalIDSignalError() instead")
    void customerGetByinternalIDSignalE(OAICustomerDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetByinternalIDSignalError(OAICustomerDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerBalanceBycustomerCdSignalError() instead")
    void customerGetCustomerBalanceBycustomerCdSignalE(OAICustomerBalanceDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerBalanceBycustomerCdSignalError(OAICustomerBalanceDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerClassesSignalError() instead")
    void customerGetCustomerClassesSignalE(QList<OAICustomerClassDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerClassesSignalError(QList<OAICustomerClassDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerDirectDebitBycustomerCdSignalError() instead")
    void customerGetCustomerDirectDebitBycustomerCdSignalE(QList<OAICustomerDirectDebitDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerDirectDebitBycustomerCdSignalError(QList<OAICustomerDirectDebitDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerNoteBycustomerCdSignalError() instead")
    void customerGetCustomerNoteBycustomerCdSignalE(OAINoteDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerNoteBycustomerCdSignalError(OAINoteDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetSalesPersonsForCustomerBycustomerCdSignalError() instead")
    void customerGetSalesPersonsForCustomerBycustomerCdSignalE(QList<OAICustSalesPersonsDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetSalesPersonsForCustomerBycustomerCdSignalError(QList<OAICustSalesPersonsDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetSpecificCustomerClassBycustomerClassIdSignalError() instead")
    void customerGetSpecificCustomerClassBycustomerClassIdSignalE(OAICustomerClassDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetSpecificCustomerClassBycustomerClassIdSignalError(OAICustomerClassDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerPostSignalError() instead")
    void customerPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerPutBycustomerCdSignalError() instead")
    void customerPutBycustomerCdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerPutBycustomerCdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerPutByinternalIDSignalError() instead")
    void customerPutByinternalIDSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerPutByinternalIDSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customerChangeCustomerNrActionByinternalIdSignalErrorFull() instead")
    void customerChangeCustomerNrActionByinternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerChangeCustomerNrActionByinternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreateDunningLetterActionBycustomerSignalErrorFull() instead")
    void customerCreateDunningLetterActionBycustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreateDunningLetterActionBycustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllSignalErrorFull() instead")
    void customerGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllCashSalesForCustomerBycustomerNumberSignalErrorFull() instead")
    void customerGetAllCashSalesForCustomerBycustomerNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllCashSalesForCustomerBycustomerNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllContactsForCustomerBycustomerCdSignalErrorFull() instead")
    void customerGetAllContactsForCustomerBycustomerCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllContactsForCustomerBycustomerCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllCustomerBalanceSignalErrorFull() instead")
    void customerGetAllCustomerBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllCustomerBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllDocumentsForCustomerBycustomerNumberSignalErrorFull() instead")
    void customerGetAllDocumentsForCustomerBycustomerNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllDocumentsForCustomerBycustomerNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllInvoicesForCustomerBycustomerNumberSignalErrorFull() instead")
    void customerGetAllInvoicesForCustomerBycustomerNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllInvoicesForCustomerBycustomerNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllOrderForCustomerBycustomerCdSignalErrorFull() instead")
    void customerGetAllOrderForCustomerBycustomerCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllOrderForCustomerBycustomerCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllSalesOrderBasicForCustomerBycustomerCdSignalErrorFull() instead")
    void customerGetAllSalesOrderBasicForCustomerBycustomerCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllSalesOrderBasicForCustomerBycustomerCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetBycustomerCdSignalErrorFull() instead")
    void customerGetBycustomerCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetBycustomerCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetByinternalIDSignalErrorFull() instead")
    void customerGetByinternalIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetByinternalIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerBalanceBycustomerCdSignalErrorFull() instead")
    void customerGetCustomerBalanceBycustomerCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerBalanceBycustomerCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerClassesSignalErrorFull() instead")
    void customerGetCustomerClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerDirectDebitBycustomerCdSignalErrorFull() instead")
    void customerGetCustomerDirectDebitBycustomerCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerDirectDebitBycustomerCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerNoteBycustomerCdSignalErrorFull() instead")
    void customerGetCustomerNoteBycustomerCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerNoteBycustomerCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetSalesPersonsForCustomerBycustomerCdSignalErrorFull() instead")
    void customerGetSalesPersonsForCustomerBycustomerCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetSalesPersonsForCustomerBycustomerCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetSpecificCustomerClassBycustomerClassIdSignalErrorFull() instead")
    void customerGetSpecificCustomerClassBycustomerClassIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetSpecificCustomerClassBycustomerClassIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerPostSignalErrorFull() instead")
    void customerPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerPutBycustomerCdSignalErrorFull() instead")
    void customerPutBycustomerCdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerPutBycustomerCdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerPutByinternalIDSignalErrorFull() instead")
    void customerPutByinternalIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerPutByinternalIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
