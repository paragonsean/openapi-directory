/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntrastatUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntrastatUpdateDto::OAIIntrastatUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntrastatUpdateDto::OAIIntrastatUpdateDto() {
    this->initializeModel();
}

OAIIntrastatUpdateDto::~OAIIntrastatUpdateDto() {}

void OAIIntrastatUpdateDto::initializeModel() {

    m_c_n8_isSet = false;
    m_c_n8_isValid = false;

    m_country_of_origin_isSet = false;
    m_country_of_origin_isValid = false;

    m_supplementary_measure_unit_isSet = false;
    m_supplementary_measure_unit_isValid = false;
}

void OAIIntrastatUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntrastatUpdateDto::fromJsonObject(QJsonObject json) {

    m_c_n8_isValid = ::OpenAPI::fromJsonValue(m_c_n8, json[QString("cN8")]);
    m_c_n8_isSet = !json[QString("cN8")].isNull() && m_c_n8_isValid;

    m_country_of_origin_isValid = ::OpenAPI::fromJsonValue(m_country_of_origin, json[QString("countryOfOrigin")]);
    m_country_of_origin_isSet = !json[QString("countryOfOrigin")].isNull() && m_country_of_origin_isValid;

    m_supplementary_measure_unit_isValid = ::OpenAPI::fromJsonValue(m_supplementary_measure_unit, json[QString("supplementaryMeasureUnit")]);
    m_supplementary_measure_unit_isSet = !json[QString("supplementaryMeasureUnit")].isNull() && m_supplementary_measure_unit_isValid;
}

QString OAIIntrastatUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntrastatUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_c_n8.isSet()) {
        obj.insert(QString("cN8"), ::OpenAPI::toJsonValue(m_c_n8));
    }
    if (m_country_of_origin.isSet()) {
        obj.insert(QString("countryOfOrigin"), ::OpenAPI::toJsonValue(m_country_of_origin));
    }
    if (m_supplementary_measure_unit.isSet()) {
        obj.insert(QString("supplementaryMeasureUnit"), ::OpenAPI::toJsonValue(m_supplementary_measure_unit));
    }
    return obj;
}

OAICN8InIntrastatUpdateDto OAIIntrastatUpdateDto::getCN8() const {
    return m_c_n8;
}
void OAIIntrastatUpdateDto::setCN8(const OAICN8InIntrastatUpdateDto &c_n8) {
    m_c_n8 = c_n8;
    m_c_n8_isSet = true;
}

bool OAIIntrastatUpdateDto::is_c_n8_Set() const{
    return m_c_n8_isSet;
}

bool OAIIntrastatUpdateDto::is_c_n8_Valid() const{
    return m_c_n8_isValid;
}

OAICountryOfOriginInIntrastatUpdateDto OAIIntrastatUpdateDto::getCountryOfOrigin() const {
    return m_country_of_origin;
}
void OAIIntrastatUpdateDto::setCountryOfOrigin(const OAICountryOfOriginInIntrastatUpdateDto &country_of_origin) {
    m_country_of_origin = country_of_origin;
    m_country_of_origin_isSet = true;
}

bool OAIIntrastatUpdateDto::is_country_of_origin_Set() const{
    return m_country_of_origin_isSet;
}

bool OAIIntrastatUpdateDto::is_country_of_origin_Valid() const{
    return m_country_of_origin_isValid;
}

OAISupplementaryMeasureUnitInIntrastatUpdateDto OAIIntrastatUpdateDto::getSupplementaryMeasureUnit() const {
    return m_supplementary_measure_unit;
}
void OAIIntrastatUpdateDto::setSupplementaryMeasureUnit(const OAISupplementaryMeasureUnitInIntrastatUpdateDto &supplementary_measure_unit) {
    m_supplementary_measure_unit = supplementary_measure_unit;
    m_supplementary_measure_unit_isSet = true;
}

bool OAIIntrastatUpdateDto::is_supplementary_measure_unit_Set() const{
    return m_supplementary_measure_unit_isSet;
}

bool OAIIntrastatUpdateDto::is_supplementary_measure_unit_Valid() const{
    return m_supplementary_measure_unit_isValid;
}

bool OAIIntrastatUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_c_n8.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_of_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplementary_measure_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntrastatUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
