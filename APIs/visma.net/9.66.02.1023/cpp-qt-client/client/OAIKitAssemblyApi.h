/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKitAssemblyApi_H
#define OAI_OAIKitAssemblyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIBasePaginationDtoOfKitAssemblyDto.h"
#include "OAIKitAssemblyDto.h"
#include "OAIKitAssemblyUpdateDto.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKitAssemblyApi : public QObject {
    Q_OBJECT

public:
    OAIKitAssemblyApi(const int timeOut = 0);
    ~OAIKitAssemblyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  ref_no QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitAssemblyDeleteBytyperefNo(const QString &type, const QString &ref_no, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  ref_no QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitAssemblyGetKitAssemblies(const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ref_no = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  ref_no QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitAssemblyGetKitAssemblyBytyperefNo(const QString &type, const QString &ref_no, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_kit_assembly_update_dto OAIKitAssemblyUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitAssemblyPost(const OAIKitAssemblyUpdateDto &oai_kit_assembly_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  ref_no QString [required]
    * @param[in]  oai_kit_assembly_update_dto OAIKitAssemblyUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitAssemblyPutBytyperefNo(const QString &type, const QString &ref_no, const OAIKitAssemblyUpdateDto &oai_kit_assembly_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  ref_no QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void kitAssemblyReleaseKitAssemblyBytyperefNo(const QString &type, const QString &ref_no, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void kitAssemblyDeleteBytyperefNoCallback(OAIHttpRequestWorker *worker);
    void kitAssemblyGetKitAssembliesCallback(OAIHttpRequestWorker *worker);
    void kitAssemblyGetKitAssemblyBytyperefNoCallback(OAIHttpRequestWorker *worker);
    void kitAssemblyPostCallback(OAIHttpRequestWorker *worker);
    void kitAssemblyPutBytyperefNoCallback(OAIHttpRequestWorker *worker);
    void kitAssemblyReleaseKitAssemblyBytyperefNoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void kitAssemblyDeleteBytyperefNoSignal(OAIBackgroundApiAcceptedDto summary);
    void kitAssemblyGetKitAssembliesSignal(OAIBasePaginationDtoOfKitAssemblyDto summary);
    void kitAssemblyGetKitAssemblyBytyperefNoSignal(OAIKitAssemblyDto summary);
    void kitAssemblyPostSignal(OAIObject summary);
    void kitAssemblyPutBytyperefNoSignal(OAIBackgroundApiAcceptedDto summary);
    void kitAssemblyReleaseKitAssemblyBytyperefNoSignal(OAIObject summary);


    void kitAssemblyDeleteBytyperefNoSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void kitAssemblyGetKitAssembliesSignalFull(OAIHttpRequestWorker *worker, OAIBasePaginationDtoOfKitAssemblyDto summary);
    void kitAssemblyGetKitAssemblyBytyperefNoSignalFull(OAIHttpRequestWorker *worker, OAIKitAssemblyDto summary);
    void kitAssemblyPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void kitAssemblyPutBytyperefNoSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void kitAssemblyReleaseKitAssemblyBytyperefNoSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use kitAssemblyDeleteBytyperefNoSignalError() instead")
    void kitAssemblyDeleteBytyperefNoSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyDeleteBytyperefNoSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyGetKitAssembliesSignalError() instead")
    void kitAssemblyGetKitAssembliesSignalE(OAIBasePaginationDtoOfKitAssemblyDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyGetKitAssembliesSignalError(OAIBasePaginationDtoOfKitAssemblyDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyGetKitAssemblyBytyperefNoSignalError() instead")
    void kitAssemblyGetKitAssemblyBytyperefNoSignalE(OAIKitAssemblyDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyGetKitAssemblyBytyperefNoSignalError(OAIKitAssemblyDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyPostSignalError() instead")
    void kitAssemblyPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyPutBytyperefNoSignalError() instead")
    void kitAssemblyPutBytyperefNoSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyPutBytyperefNoSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyReleaseKitAssemblyBytyperefNoSignalError() instead")
    void kitAssemblyReleaseKitAssemblyBytyperefNoSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyReleaseKitAssemblyBytyperefNoSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use kitAssemblyDeleteBytyperefNoSignalErrorFull() instead")
    void kitAssemblyDeleteBytyperefNoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyDeleteBytyperefNoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyGetKitAssembliesSignalErrorFull() instead")
    void kitAssemblyGetKitAssembliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyGetKitAssembliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyGetKitAssemblyBytyperefNoSignalErrorFull() instead")
    void kitAssemblyGetKitAssemblyBytyperefNoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyGetKitAssemblyBytyperefNoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyPostSignalErrorFull() instead")
    void kitAssemblyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyPutBytyperefNoSignalErrorFull() instead")
    void kitAssemblyPutBytyperefNoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyPutBytyperefNoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kitAssemblyReleaseKitAssemblyBytyperefNoSignalErrorFull() instead")
    void kitAssemblyReleaseKitAssemblyBytyperefNoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kitAssemblyReleaseKitAssemblyBytyperefNoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
