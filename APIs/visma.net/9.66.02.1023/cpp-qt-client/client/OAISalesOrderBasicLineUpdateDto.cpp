/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderBasicLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderBasicLineUpdateDto::OAISalesOrderBasicLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderBasicLineUpdateDto::OAISalesOrderBasicLineUpdateDto() {
    this->initializeModel();
}

OAISalesOrderBasicLineUpdateDto::~OAISalesOrderBasicLineUpdateDto() {}

void OAISalesOrderBasicLineUpdateDto::initializeModel() {

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_disc_unit_price_isSet = false;
    m_disc_unit_price_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_line_description_isSet = false;
    m_line_description_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAISalesOrderBasicLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderBasicLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_disc_unit_price_isValid = ::OpenAPI::fromJsonValue(m_disc_unit_price, json[QString("discUnitPrice")]);
    m_disc_unit_price_isSet = !json[QString("discUnitPrice")].isNull() && m_disc_unit_price_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_line_description_isValid = ::OpenAPI::fromJsonValue(m_line_description, json[QString("lineDescription")]);
    m_line_description_isSet = !json[QString("lineDescription")].isNull() && m_line_description_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAISalesOrderBasicLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderBasicLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_disc_unit_price.isSet()) {
        obj.insert(QString("discUnitPrice"), ::OpenAPI::toJsonValue(m_disc_unit_price));
    }
    if (m_discount_amount.isSet()) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_code.isSet()) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discount_percent.isSet()) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_inventory_id.isSet()) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_inventory_number.isSet()) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_line_description.isSet()) {
        obj.insert(QString("lineDescription"), ::OpenAPI::toJsonValue(m_line_description));
    }
    if (m_line_nbr.isSet()) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_manual_discount.isSet()) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

OAIDtoValueOfString OAISalesOrderBasicLineUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISalesOrderBasicLineUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderBasicLineUpdateDto::getDiscUnitPrice() const {
    return m_disc_unit_price;
}
void OAISalesOrderBasicLineUpdateDto::setDiscUnitPrice(const OAIDtoValueOfNullableOfDecimal &disc_unit_price) {
    m_disc_unit_price = disc_unit_price;
    m_disc_unit_price_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_disc_unit_price_Set() const{
    return m_disc_unit_price_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_disc_unit_price_Valid() const{
    return m_disc_unit_price_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderBasicLineUpdateDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISalesOrderBasicLineUpdateDto::setDiscountAmount(const OAIDtoValueOfNullableOfDecimal &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicLineUpdateDto::getDiscountCode() const {
    return m_discount_code;
}
void OAISalesOrderBasicLineUpdateDto::setDiscountCode(const OAIDtoValueOfString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderBasicLineUpdateDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAISalesOrderBasicLineUpdateDto::setDiscountPercent(const OAIDtoValueOfNullableOfDecimal &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

OAIInventoryIdInSalesOrderBasicLineUpdateDto OAISalesOrderBasicLineUpdateDto::getInventoryId() const {
    return m_inventory_id;
}
void OAISalesOrderBasicLineUpdateDto::setInventoryId(const OAIInventoryIdInSalesOrderBasicLineUpdateDto &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

OAIInventoryNumberInSalesOrderBasicLineUpdateDto OAISalesOrderBasicLineUpdateDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAISalesOrderBasicLineUpdateDto::setInventoryNumber(const OAIInventoryNumberInSalesOrderBasicLineUpdateDto &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicLineUpdateDto::getLineDescription() const {
    return m_line_description;
}
void OAISalesOrderBasicLineUpdateDto::setLineDescription(const OAIDtoValueOfString &line_description) {
    m_line_description = line_description;
    m_line_description_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_line_description_Set() const{
    return m_line_description_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_line_description_Valid() const{
    return m_line_description_isValid;
}

OAIDtoValueOfNullableOfInt32 OAISalesOrderBasicLineUpdateDto::getLineNbr() const {
    return m_line_nbr;
}
void OAISalesOrderBasicLineUpdateDto::setLineNbr(const OAIDtoValueOfNullableOfInt32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesOrderBasicLineUpdateDto::getManualDiscount() const {
    return m_manual_discount;
}
void OAISalesOrderBasicLineUpdateDto::setManualDiscount(const OAIDtoValueOfNullableOfBoolean &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicLineUpdateDto::getNote() const {
    return m_note;
}
void OAISalesOrderBasicLineUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISalesOrderBasicLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAISalesOrderBasicLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderBasicLineUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAISalesOrderBasicLineUpdateDto::setQuantity(const OAIDtoValueOfNullableOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderBasicLineUpdateDto::getUnitCost() const {
    return m_unit_cost;
}
void OAISalesOrderBasicLineUpdateDto::setUnitCost(const OAIDtoValueOfNullableOfDecimal &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISalesOrderBasicLineUpdateDto::getUnitPrice() const {
    return m_unit_price;
}
void OAISalesOrderBasicLineUpdateDto::setUnitPrice(const OAIDtoValueOfNullableOfDecimal &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicLineUpdateDto::getUom() const {
    return m_uom;
}
void OAISalesOrderBasicLineUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIDtoValueOfString OAISalesOrderBasicLineUpdateDto::getWarehouse() const {
    return m_warehouse;
}
void OAISalesOrderBasicLineUpdateDto::setWarehouse(const OAIDtoValueOfString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAISalesOrderBasicLineUpdateDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAISalesOrderBasicLineUpdateDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAISalesOrderBasicLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderBasicLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inventory_number_isValid && true;
}

} // namespace OpenAPI
