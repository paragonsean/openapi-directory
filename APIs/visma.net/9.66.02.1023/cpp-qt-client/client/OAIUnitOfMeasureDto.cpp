/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnitOfMeasureDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnitOfMeasureDto::OAIUnitOfMeasureDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnitOfMeasureDto::OAIUnitOfMeasureDto() {
    this->initializeModel();
}

OAIUnitOfMeasureDto::~OAIUnitOfMeasureDto() {}

void OAIUnitOfMeasureDto::initializeModel() {

    m_from_unit_isSet = false;
    m_from_unit_isValid = false;

    m_supplementary_measure_unit_isSet = false;
    m_supplementary_measure_unit_isValid = false;

    m_to_unit_isSet = false;
    m_to_unit_isValid = false;

    m_unit_mult_div_isSet = false;
    m_unit_mult_div_isValid = false;

    m_unit_rate_isSet = false;
    m_unit_rate_isValid = false;
}

void OAIUnitOfMeasureDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnitOfMeasureDto::fromJsonObject(QJsonObject json) {

    m_from_unit_isValid = ::OpenAPI::fromJsonValue(m_from_unit, json[QString("fromUnit")]);
    m_from_unit_isSet = !json[QString("fromUnit")].isNull() && m_from_unit_isValid;

    m_supplementary_measure_unit_isValid = ::OpenAPI::fromJsonValue(m_supplementary_measure_unit, json[QString("supplementaryMeasureUnit")]);
    m_supplementary_measure_unit_isSet = !json[QString("supplementaryMeasureUnit")].isNull() && m_supplementary_measure_unit_isValid;

    m_to_unit_isValid = ::OpenAPI::fromJsonValue(m_to_unit, json[QString("toUnit")]);
    m_to_unit_isSet = !json[QString("toUnit")].isNull() && m_to_unit_isValid;

    m_unit_mult_div_isValid = ::OpenAPI::fromJsonValue(m_unit_mult_div, json[QString("unitMultDiv")]);
    m_unit_mult_div_isSet = !json[QString("unitMultDiv")].isNull() && m_unit_mult_div_isValid;

    m_unit_rate_isValid = ::OpenAPI::fromJsonValue(m_unit_rate, json[QString("unitRate")]);
    m_unit_rate_isSet = !json[QString("unitRate")].isNull() && m_unit_rate_isValid;
}

QString OAIUnitOfMeasureDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnitOfMeasureDto::asJsonObject() const {
    QJsonObject obj;
    if (m_from_unit_isSet) {
        obj.insert(QString("fromUnit"), ::OpenAPI::toJsonValue(m_from_unit));
    }
    if (m_supplementary_measure_unit_isSet) {
        obj.insert(QString("supplementaryMeasureUnit"), ::OpenAPI::toJsonValue(m_supplementary_measure_unit));
    }
    if (m_to_unit_isSet) {
        obj.insert(QString("toUnit"), ::OpenAPI::toJsonValue(m_to_unit));
    }
    if (m_unit_mult_div_isSet) {
        obj.insert(QString("unitMultDiv"), ::OpenAPI::toJsonValue(m_unit_mult_div));
    }
    if (m_unit_rate_isSet) {
        obj.insert(QString("unitRate"), ::OpenAPI::toJsonValue(m_unit_rate));
    }
    return obj;
}

QString OAIUnitOfMeasureDto::getFromUnit() const {
    return m_from_unit;
}
void OAIUnitOfMeasureDto::setFromUnit(const QString &from_unit) {
    m_from_unit = from_unit;
    m_from_unit_isSet = true;
}

bool OAIUnitOfMeasureDto::is_from_unit_Set() const{
    return m_from_unit_isSet;
}

bool OAIUnitOfMeasureDto::is_from_unit_Valid() const{
    return m_from_unit_isValid;
}

QString OAIUnitOfMeasureDto::getSupplementaryMeasureUnit() const {
    return m_supplementary_measure_unit;
}
void OAIUnitOfMeasureDto::setSupplementaryMeasureUnit(const QString &supplementary_measure_unit) {
    m_supplementary_measure_unit = supplementary_measure_unit;
    m_supplementary_measure_unit_isSet = true;
}

bool OAIUnitOfMeasureDto::is_supplementary_measure_unit_Set() const{
    return m_supplementary_measure_unit_isSet;
}

bool OAIUnitOfMeasureDto::is_supplementary_measure_unit_Valid() const{
    return m_supplementary_measure_unit_isValid;
}

QString OAIUnitOfMeasureDto::getToUnit() const {
    return m_to_unit;
}
void OAIUnitOfMeasureDto::setToUnit(const QString &to_unit) {
    m_to_unit = to_unit;
    m_to_unit_isSet = true;
}

bool OAIUnitOfMeasureDto::is_to_unit_Set() const{
    return m_to_unit_isSet;
}

bool OAIUnitOfMeasureDto::is_to_unit_Valid() const{
    return m_to_unit_isValid;
}

QString OAIUnitOfMeasureDto::getUnitMultDiv() const {
    return m_unit_mult_div;
}
void OAIUnitOfMeasureDto::setUnitMultDiv(const QString &unit_mult_div) {
    m_unit_mult_div = unit_mult_div;
    m_unit_mult_div_isSet = true;
}

bool OAIUnitOfMeasureDto::is_unit_mult_div_Set() const{
    return m_unit_mult_div_isSet;
}

bool OAIUnitOfMeasureDto::is_unit_mult_div_Valid() const{
    return m_unit_mult_div_isValid;
}

double OAIUnitOfMeasureDto::getUnitRate() const {
    return m_unit_rate;
}
void OAIUnitOfMeasureDto::setUnitRate(const double &unit_rate) {
    m_unit_rate = unit_rate;
    m_unit_rate_isSet = true;
}

bool OAIUnitOfMeasureDto::is_unit_rate_Set() const{
    return m_unit_rate_isSet;
}

bool OAIUnitOfMeasureDto::is_unit_rate_Valid() const{
    return m_unit_rate_isValid;
}

bool OAIUnitOfMeasureDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplementary_measure_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_mult_div_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnitOfMeasureDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
