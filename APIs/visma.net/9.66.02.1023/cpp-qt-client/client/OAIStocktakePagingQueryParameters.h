/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStocktakePagingQueryParameters.h
 *
 * 
 */

#ifndef OAIStocktakePagingQueryParameters_H
#define OAIStocktakePagingQueryParameters_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStocktakePagingQueryParameters : public OAIObject {
public:
    OAIStocktakePagingQueryParameters();
    OAIStocktakePagingQueryParameters(QString json);
    ~OAIStocktakePagingQueryParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getEndWithLine() const;
    void setEndWithLine(const qint32 &end_with_line);
    bool is_end_with_line_Set() const;
    bool is_end_with_line_Valid() const;

    QString getExpirationDateTime() const;
    void setExpirationDateTime(const QString &expiration_date_time);
    bool is_expiration_date_time_Set() const;
    bool is_expiration_date_time_Valid() const;

    QString getExpirationDateTimeCondition() const;
    void setExpirationDateTimeCondition(const QString &expiration_date_time_condition);
    bool is_expiration_date_time_condition_Set() const;
    bool is_expiration_date_time_condition_Valid() const;

    QString getFreezeDateTime() const;
    void setFreezeDateTime(const QString &freeze_date_time);
    bool is_freeze_date_time_Set() const;
    bool is_freeze_date_time_Valid() const;

    QString getFreezeDateTimeCondition() const;
    void setFreezeDateTimeCondition(const QString &freeze_date_time_condition);
    bool is_freeze_date_time_condition_Set() const;
    bool is_freeze_date_time_condition_Valid() const;

    QString getInventory() const;
    void setInventory(const QString &inventory);
    bool is_inventory_Set() const;
    bool is_inventory_Valid() const;

    QString getLastModifiedDateTime() const;
    void setLastModifiedDateTime(const QString &last_modified_date_time);
    bool is_last_modified_date_time_Set() const;
    bool is_last_modified_date_time_Valid() const;

    QString getLastModifiedDateTimeCondition() const;
    void setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition);
    bool is_last_modified_date_time_condition_Set() const;
    bool is_last_modified_date_time_condition_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getLotSerialNumber() const;
    void setLotSerialNumber(const QString &lot_serial_number);
    bool is_lot_serial_number_Set() const;
    bool is_lot_serial_number_Valid() const;

    qint32 getPageNumber() const;
    void setPageNumber(const qint32 &page_number);
    bool is_page_number_Set() const;
    bool is_page_number_Valid() const;

    qint32 getPageSize() const;
    void setPageSize(const qint32 &page_size);
    bool is_page_size_Set() const;
    bool is_page_size_Valid() const;

    qint32 getStartWithLine() const;
    void setStartWithLine(const qint32 &start_with_line);
    bool is_start_with_line_Set() const;
    bool is_start_with_line_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSummaryStatus() const;
    void setSummaryStatus(const QString &summary_status);
    bool is_summary_status_Set() const;
    bool is_summary_status_Valid() const;

    QString getWarehouse() const;
    void setWarehouse(const QString &warehouse);
    bool is_warehouse_Set() const;
    bool is_warehouse_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_end_with_line;
    bool m_end_with_line_isSet;
    bool m_end_with_line_isValid;

    QString m_expiration_date_time;
    bool m_expiration_date_time_isSet;
    bool m_expiration_date_time_isValid;

    QString m_expiration_date_time_condition;
    bool m_expiration_date_time_condition_isSet;
    bool m_expiration_date_time_condition_isValid;

    QString m_freeze_date_time;
    bool m_freeze_date_time_isSet;
    bool m_freeze_date_time_isValid;

    QString m_freeze_date_time_condition;
    bool m_freeze_date_time_condition_isSet;
    bool m_freeze_date_time_condition_isValid;

    QString m_inventory;
    bool m_inventory_isSet;
    bool m_inventory_isValid;

    QString m_last_modified_date_time;
    bool m_last_modified_date_time_isSet;
    bool m_last_modified_date_time_isValid;

    QString m_last_modified_date_time_condition;
    bool m_last_modified_date_time_condition_isSet;
    bool m_last_modified_date_time_condition_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_lot_serial_number;
    bool m_lot_serial_number_isSet;
    bool m_lot_serial_number_isValid;

    qint32 m_page_number;
    bool m_page_number_isSet;
    bool m_page_number_isValid;

    qint32 m_page_size;
    bool m_page_size_isSet;
    bool m_page_size_isValid;

    qint32 m_start_with_line;
    bool m_start_with_line_isSet;
    bool m_start_with_line_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_summary_status;
    bool m_summary_status_isSet;
    bool m_summary_status_isValid;

    QString m_warehouse;
    bool m_warehouse_isSet;
    bool m_warehouse_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStocktakePagingQueryParameters)

#endif // OAIStocktakePagingQueryParameters_H
