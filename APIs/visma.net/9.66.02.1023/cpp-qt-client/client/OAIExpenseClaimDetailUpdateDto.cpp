/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseClaimDetailUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseClaimDetailUpdateDto::OAIExpenseClaimDetailUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseClaimDetailUpdateDto::OAIExpenseClaimDetailUpdateDto() {
    this->initializeModel();
}

OAIExpenseClaimDetailUpdateDto::~OAIExpenseClaimDetailUpdateDto() {}

void OAIExpenseClaimDetailUpdateDto::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_claim_detail_id_isSet = false;
    m_claim_detail_id_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employee_part_isSet = false;
    m_employee_part_isValid = false;

    m_expense_account_isSet = false;
    m_expense_account_isValid = false;

    m_expense_item_isSet = false;
    m_expense_item_isValid = false;

    m_expense_subaccount_isSet = false;
    m_expense_subaccount_isValid = false;

    m_invoiceable_isSet = false;
    m_invoiceable_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_ref_nbr_isSet = false;
    m_ref_nbr_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIExpenseClaimDetailUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseClaimDetailUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_claim_detail_id_isValid = ::OpenAPI::fromJsonValue(m_claim_detail_id, json[QString("claimDetailId")]);
    m_claim_detail_id_isSet = !json[QString("claimDetailId")].isNull() && m_claim_detail_id_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employee_part_isValid = ::OpenAPI::fromJsonValue(m_employee_part, json[QString("employeePart")]);
    m_employee_part_isSet = !json[QString("employeePart")].isNull() && m_employee_part_isValid;

    m_expense_account_isValid = ::OpenAPI::fromJsonValue(m_expense_account, json[QString("expenseAccount")]);
    m_expense_account_isSet = !json[QString("expenseAccount")].isNull() && m_expense_account_isValid;

    m_expense_item_isValid = ::OpenAPI::fromJsonValue(m_expense_item, json[QString("expenseItem")]);
    m_expense_item_isSet = !json[QString("expenseItem")].isNull() && m_expense_item_isValid;

    m_expense_subaccount_isValid = ::OpenAPI::fromJsonValue(m_expense_subaccount, json[QString("expenseSubaccount")]);
    m_expense_subaccount_isSet = !json[QString("expenseSubaccount")].isNull() && m_expense_subaccount_isValid;

    m_invoiceable_isValid = ::OpenAPI::fromJsonValue(m_invoiceable, json[QString("invoiceable")]);
    m_invoiceable_isSet = !json[QString("invoiceable")].isNull() && m_invoiceable_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ref_nbr, json[QString("refNbr")]);
    m_ref_nbr_isSet = !json[QString("refNbr")].isNull() && m_ref_nbr_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIExpenseClaimDetailUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseClaimDetailUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_claim_detail_id.isSet()) {
        obj.insert(QString("claimDetailId"), ::OpenAPI::toJsonValue(m_claim_detail_id));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employee_part.isSet()) {
        obj.insert(QString("employeePart"), ::OpenAPI::toJsonValue(m_employee_part));
    }
    if (m_expense_account.isSet()) {
        obj.insert(QString("expenseAccount"), ::OpenAPI::toJsonValue(m_expense_account));
    }
    if (m_expense_item.isSet()) {
        obj.insert(QString("expenseItem"), ::OpenAPI::toJsonValue(m_expense_item));
    }
    if (m_expense_subaccount.size() > 0) {
        obj.insert(QString("expenseSubaccount"), ::OpenAPI::toJsonValue(m_expense_subaccount));
    }
    if (m_invoiceable.isSet()) {
        obj.insert(QString("invoiceable"), ::OpenAPI::toJsonValue(m_invoiceable));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_ref_nbr.isSet()) {
        obj.insert(QString("refNbr"), ::OpenAPI::toJsonValue(m_ref_nbr));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_unit_cost.isSet()) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

OAIBranchInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getBranch() const {
    return m_branch;
}
void OAIExpenseClaimDetailUpdateDto::setBranch(const OAIBranchInExpenseClaimDetailUpdateDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIClaimDetailIdInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getClaimDetailId() const {
    return m_claim_detail_id;
}
void OAIExpenseClaimDetailUpdateDto::setClaimDetailId(const OAIClaimDetailIdInExpenseClaimDetailUpdateDto &claim_detail_id) {
    m_claim_detail_id = claim_detail_id;
    m_claim_detail_id_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_claim_detail_id_Set() const{
    return m_claim_detail_id_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_claim_detail_id_Valid() const{
    return m_claim_detail_id_isValid;
}

OAICustomerInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getCustomer() const {
    return m_customer;
}
void OAIExpenseClaimDetailUpdateDto::setCustomer(const OAICustomerInExpenseClaimDetailUpdateDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIDateInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getDate() const {
    return m_date;
}
void OAIExpenseClaimDetailUpdateDto::setDate(const OAIDateInExpenseClaimDetailUpdateDto &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDescriptionInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getDescription() const {
    return m_description;
}
void OAIExpenseClaimDetailUpdateDto::setDescription(const OAIDescriptionInExpenseClaimDetailUpdateDto &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIEmployeePartInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getEmployeePart() const {
    return m_employee_part;
}
void OAIExpenseClaimDetailUpdateDto::setEmployeePart(const OAIEmployeePartInExpenseClaimDetailUpdateDto &employee_part) {
    m_employee_part = employee_part;
    m_employee_part_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_employee_part_Set() const{
    return m_employee_part_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_employee_part_Valid() const{
    return m_employee_part_isValid;
}

OAIExpenseAccountInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getExpenseAccount() const {
    return m_expense_account;
}
void OAIExpenseClaimDetailUpdateDto::setExpenseAccount(const OAIExpenseAccountInExpenseClaimDetailUpdateDto &expense_account) {
    m_expense_account = expense_account;
    m_expense_account_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_expense_account_Set() const{
    return m_expense_account_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_expense_account_Valid() const{
    return m_expense_account_isValid;
}

OAIExpenseItemInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getExpenseItem() const {
    return m_expense_item;
}
void OAIExpenseClaimDetailUpdateDto::setExpenseItem(const OAIExpenseItemInExpenseClaimDetailUpdateDto &expense_item) {
    m_expense_item = expense_item;
    m_expense_item_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_expense_item_Set() const{
    return m_expense_item_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_expense_item_Valid() const{
    return m_expense_item_isValid;
}

QList<OAISegmentUpdateDto> OAIExpenseClaimDetailUpdateDto::getExpenseSubaccount() const {
    return m_expense_subaccount;
}
void OAIExpenseClaimDetailUpdateDto::setExpenseSubaccount(const QList<OAISegmentUpdateDto> &expense_subaccount) {
    m_expense_subaccount = expense_subaccount;
    m_expense_subaccount_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_expense_subaccount_Set() const{
    return m_expense_subaccount_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_expense_subaccount_Valid() const{
    return m_expense_subaccount_isValid;
}

OAIInvoiceableInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getInvoiceable() const {
    return m_invoiceable;
}
void OAIExpenseClaimDetailUpdateDto::setInvoiceable(const OAIInvoiceableInExpenseClaimDetailUpdateDto &invoiceable) {
    m_invoiceable = invoiceable;
    m_invoiceable_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_invoiceable_Set() const{
    return m_invoiceable_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_invoiceable_Valid() const{
    return m_invoiceable_isValid;
}

OAILocationInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getLocation() const {
    return m_location;
}
void OAIExpenseClaimDetailUpdateDto::setLocation(const OAILocationInExpenseClaimDetailUpdateDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIExpenseClaimDetailUpdateDto::getOperation() const {
    return m_operation;
}
void OAIExpenseClaimDetailUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIProjectInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getProject() const {
    return m_project;
}
void OAIExpenseClaimDetailUpdateDto::setProject(const OAIProjectInExpenseClaimDetailUpdateDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectTaskInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getProjectTask() const {
    return m_project_task;
}
void OAIExpenseClaimDetailUpdateDto::setProjectTask(const OAIProjectTaskInExpenseClaimDetailUpdateDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

OAIQuantityInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAIExpenseClaimDetailUpdateDto::setQuantity(const OAIQuantityInExpenseClaimDetailUpdateDto &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIRefNbrInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getRefNbr() const {
    return m_ref_nbr;
}
void OAIExpenseClaimDetailUpdateDto::setRefNbr(const OAIRefNbrInExpenseClaimDetailUpdateDto &ref_nbr) {
    m_ref_nbr = ref_nbr;
    m_ref_nbr_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_ref_nbr_Set() const{
    return m_ref_nbr_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_ref_nbr_Valid() const{
    return m_ref_nbr_isValid;
}

OAITaxCategoryInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getTaxCategory() const {
    return m_tax_category;
}
void OAIExpenseClaimDetailUpdateDto::setTaxCategory(const OAITaxCategoryInExpenseClaimDetailUpdateDto &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

OAIUnitCostInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getUnitCost() const {
    return m_unit_cost;
}
void OAIExpenseClaimDetailUpdateDto::setUnitCost(const OAIUnitCostInExpenseClaimDetailUpdateDto &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

OAIUomInExpenseClaimDetailUpdateDto OAIExpenseClaimDetailUpdateDto::getUom() const {
    return m_uom;
}
void OAIExpenseClaimDetailUpdateDto::setUom(const OAIUomInExpenseClaimDetailUpdateDto &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIExpenseClaimDetailUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIExpenseClaimDetailUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIExpenseClaimDetailUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_detail_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_part.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiceable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseClaimDetailUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
