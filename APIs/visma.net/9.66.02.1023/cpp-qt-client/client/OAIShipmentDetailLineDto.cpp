/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentDetailLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentDetailLineDto::OAIShipmentDetailLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentDetailLineDto::OAIShipmentDetailLineDto() {
    this->initializeModel();
}

OAIShipmentDetailLineDto::~OAIShipmentDetailLineDto() {}

void OAIShipmentDetailLineDto::initializeModel() {

    m_allocations_isSet = false;
    m_allocations_isValid = false;

    m_alternate_id_isSet = false;
    m_alternate_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_external_link_isSet = false;
    m_external_link_isValid = false;

    m_free_item_isSet = false;
    m_free_item_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lot_serial_nbr_isSet = false;
    m_lot_serial_nbr_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_open_qty_isSet = false;
    m_open_qty_isValid = false;

    m_order_line_nbr_isSet = false;
    m_order_line_nbr_isValid = false;

    m_order_nbr_isSet = false;
    m_order_nbr_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_ordered_qty_isSet = false;
    m_ordered_qty_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_shipped_qty_isSet = false;
    m_shipped_qty_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIShipmentDetailLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipmentDetailLineDto::fromJsonObject(QJsonObject json) {

    m_allocations_isValid = ::OpenAPI::fromJsonValue(m_allocations, json[QString("allocations")]);
    m_allocations_isSet = !json[QString("allocations")].isNull() && m_allocations_isValid;

    m_alternate_id_isValid = ::OpenAPI::fromJsonValue(m_alternate_id, json[QString("alternateID")]);
    m_alternate_id_isSet = !json[QString("alternateID")].isNull() && m_alternate_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_external_link_isValid = ::OpenAPI::fromJsonValue(m_external_link, json[QString("externalLink")]);
    m_external_link_isSet = !json[QString("externalLink")].isNull() && m_external_link_isValid;

    m_free_item_isValid = ::OpenAPI::fromJsonValue(m_free_item, json[QString("freeItem")]);
    m_free_item_isSet = !json[QString("freeItem")].isNull() && m_free_item_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lot_serial_nbr_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_nbr, json[QString("lotSerialNbr")]);
    m_lot_serial_nbr_isSet = !json[QString("lotSerialNbr")].isNull() && m_lot_serial_nbr_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_open_qty_isValid = ::OpenAPI::fromJsonValue(m_open_qty, json[QString("openQty")]);
    m_open_qty_isSet = !json[QString("openQty")].isNull() && m_open_qty_isValid;

    m_order_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_order_line_nbr, json[QString("orderLineNbr")]);
    m_order_line_nbr_isSet = !json[QString("orderLineNbr")].isNull() && m_order_line_nbr_isValid;

    m_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_order_nbr, json[QString("orderNbr")]);
    m_order_nbr_isSet = !json[QString("orderNbr")].isNull() && m_order_nbr_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_ordered_qty_isValid = ::OpenAPI::fromJsonValue(m_ordered_qty, json[QString("orderedQty")]);
    m_ordered_qty_isSet = !json[QString("orderedQty")].isNull() && m_ordered_qty_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_shipped_qty_isValid = ::OpenAPI::fromJsonValue(m_shipped_qty, json[QString("shippedQty")]);
    m_shipped_qty_isSet = !json[QString("shippedQty")].isNull() && m_shipped_qty_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIShipmentDetailLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipmentDetailLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allocations.size() > 0) {
        obj.insert(QString("allocations"), ::OpenAPI::toJsonValue(m_allocations));
    }
    if (m_alternate_id_isSet) {
        obj.insert(QString("alternateID"), ::OpenAPI::toJsonValue(m_alternate_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_external_link_isSet) {
        obj.insert(QString("externalLink"), ::OpenAPI::toJsonValue(m_external_link));
    }
    if (m_free_item_isSet) {
        obj.insert(QString("freeItem"), ::OpenAPI::toJsonValue(m_free_item));
    }
    if (m_inventory_number_isSet) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lot_serial_nbr_isSet) {
        obj.insert(QString("lotSerialNbr"), ::OpenAPI::toJsonValue(m_lot_serial_nbr));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_open_qty_isSet) {
        obj.insert(QString("openQty"), ::OpenAPI::toJsonValue(m_open_qty));
    }
    if (m_order_line_nbr_isSet) {
        obj.insert(QString("orderLineNbr"), ::OpenAPI::toJsonValue(m_order_line_nbr));
    }
    if (m_order_nbr_isSet) {
        obj.insert(QString("orderNbr"), ::OpenAPI::toJsonValue(m_order_nbr));
    }
    if (m_order_type_isSet) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_ordered_qty_isSet) {
        obj.insert(QString("orderedQty"), ::OpenAPI::toJsonValue(m_ordered_qty));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_shipped_qty_isSet) {
        obj.insert(QString("shippedQty"), ::OpenAPI::toJsonValue(m_shipped_qty));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

QList<OAIAllocationsDto> OAIShipmentDetailLineDto::getAllocations() const {
    return m_allocations;
}
void OAIShipmentDetailLineDto::setAllocations(const QList<OAIAllocationsDto> &allocations) {
    m_allocations = allocations;
    m_allocations_isSet = true;
}

bool OAIShipmentDetailLineDto::is_allocations_Set() const{
    return m_allocations_isSet;
}

bool OAIShipmentDetailLineDto::is_allocations_Valid() const{
    return m_allocations_isValid;
}

QString OAIShipmentDetailLineDto::getAlternateId() const {
    return m_alternate_id;
}
void OAIShipmentDetailLineDto::setAlternateId(const QString &alternate_id) {
    m_alternate_id = alternate_id;
    m_alternate_id_isSet = true;
}

bool OAIShipmentDetailLineDto::is_alternate_id_Set() const{
    return m_alternate_id_isSet;
}

bool OAIShipmentDetailLineDto::is_alternate_id_Valid() const{
    return m_alternate_id_isValid;
}

QString OAIShipmentDetailLineDto::getDescription() const {
    return m_description;
}
void OAIShipmentDetailLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIShipmentDetailLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIShipmentDetailLineDto::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIShipmentDetailLineDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIShipmentDetailLineDto::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIShipmentDetailLineDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIShipmentDetailLineDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIShipmentDetailLineDto::getExternalLink() const {
    return m_external_link;
}
void OAIShipmentDetailLineDto::setExternalLink(const QString &external_link) {
    m_external_link = external_link;
    m_external_link_isSet = true;
}

bool OAIShipmentDetailLineDto::is_external_link_Set() const{
    return m_external_link_isSet;
}

bool OAIShipmentDetailLineDto::is_external_link_Valid() const{
    return m_external_link_isValid;
}

bool OAIShipmentDetailLineDto::isFreeItem() const {
    return m_free_item;
}
void OAIShipmentDetailLineDto::setFreeItem(const bool &free_item) {
    m_free_item = free_item;
    m_free_item_isSet = true;
}

bool OAIShipmentDetailLineDto::is_free_item_Set() const{
    return m_free_item_isSet;
}

bool OAIShipmentDetailLineDto::is_free_item_Valid() const{
    return m_free_item_isValid;
}

QString OAIShipmentDetailLineDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAIShipmentDetailLineDto::setInventoryNumber(const QString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAIShipmentDetailLineDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAIShipmentDetailLineDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

qint32 OAIShipmentDetailLineDto::getLineNumber() const {
    return m_line_number;
}
void OAIShipmentDetailLineDto::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIShipmentDetailLineDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIShipmentDetailLineDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAILocationInShipmentDetailLineDto OAIShipmentDetailLineDto::getLocation() const {
    return m_location;
}
void OAIShipmentDetailLineDto::setLocation(const OAILocationInShipmentDetailLineDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIShipmentDetailLineDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIShipmentDetailLineDto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIShipmentDetailLineDto::getLotSerialNbr() const {
    return m_lot_serial_nbr;
}
void OAIShipmentDetailLineDto::setLotSerialNbr(const QString &lot_serial_nbr) {
    m_lot_serial_nbr = lot_serial_nbr;
    m_lot_serial_nbr_isSet = true;
}

bool OAIShipmentDetailLineDto::is_lot_serial_nbr_Set() const{
    return m_lot_serial_nbr_isSet;
}

bool OAIShipmentDetailLineDto::is_lot_serial_nbr_Valid() const{
    return m_lot_serial_nbr_isValid;
}

QString OAIShipmentDetailLineDto::getNote() const {
    return m_note;
}
void OAIShipmentDetailLineDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIShipmentDetailLineDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIShipmentDetailLineDto::is_note_Valid() const{
    return m_note_isValid;
}

double OAIShipmentDetailLineDto::getOpenQty() const {
    return m_open_qty;
}
void OAIShipmentDetailLineDto::setOpenQty(const double &open_qty) {
    m_open_qty = open_qty;
    m_open_qty_isSet = true;
}

bool OAIShipmentDetailLineDto::is_open_qty_Set() const{
    return m_open_qty_isSet;
}

bool OAIShipmentDetailLineDto::is_open_qty_Valid() const{
    return m_open_qty_isValid;
}

qint32 OAIShipmentDetailLineDto::getOrderLineNbr() const {
    return m_order_line_nbr;
}
void OAIShipmentDetailLineDto::setOrderLineNbr(const qint32 &order_line_nbr) {
    m_order_line_nbr = order_line_nbr;
    m_order_line_nbr_isSet = true;
}

bool OAIShipmentDetailLineDto::is_order_line_nbr_Set() const{
    return m_order_line_nbr_isSet;
}

bool OAIShipmentDetailLineDto::is_order_line_nbr_Valid() const{
    return m_order_line_nbr_isValid;
}

QString OAIShipmentDetailLineDto::getOrderNbr() const {
    return m_order_nbr;
}
void OAIShipmentDetailLineDto::setOrderNbr(const QString &order_nbr) {
    m_order_nbr = order_nbr;
    m_order_nbr_isSet = true;
}

bool OAIShipmentDetailLineDto::is_order_nbr_Set() const{
    return m_order_nbr_isSet;
}

bool OAIShipmentDetailLineDto::is_order_nbr_Valid() const{
    return m_order_nbr_isValid;
}

QString OAIShipmentDetailLineDto::getOrderType() const {
    return m_order_type;
}
void OAIShipmentDetailLineDto::setOrderType(const QString &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAIShipmentDetailLineDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAIShipmentDetailLineDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

double OAIShipmentDetailLineDto::getOrderedQty() const {
    return m_ordered_qty;
}
void OAIShipmentDetailLineDto::setOrderedQty(const double &ordered_qty) {
    m_ordered_qty = ordered_qty;
    m_ordered_qty_isSet = true;
}

bool OAIShipmentDetailLineDto::is_ordered_qty_Set() const{
    return m_ordered_qty_isSet;
}

bool OAIShipmentDetailLineDto::is_ordered_qty_Valid() const{
    return m_ordered_qty_isValid;
}

QString OAIShipmentDetailLineDto::getReasonCode() const {
    return m_reason_code;
}
void OAIShipmentDetailLineDto::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIShipmentDetailLineDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIShipmentDetailLineDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

double OAIShipmentDetailLineDto::getShippedQty() const {
    return m_shipped_qty;
}
void OAIShipmentDetailLineDto::setShippedQty(const double &shipped_qty) {
    m_shipped_qty = shipped_qty;
    m_shipped_qty_isSet = true;
}

bool OAIShipmentDetailLineDto::is_shipped_qty_Set() const{
    return m_shipped_qty_isSet;
}

bool OAIShipmentDetailLineDto::is_shipped_qty_Valid() const{
    return m_shipped_qty_isValid;
}

QString OAIShipmentDetailLineDto::getUom() const {
    return m_uom;
}
void OAIShipmentDetailLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIShipmentDetailLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIShipmentDetailLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIWarehouseInShipmentDetailLineDto OAIShipmentDetailLineDto::getWarehouse() const {
    return m_warehouse;
}
void OAIShipmentDetailLineDto::setWarehouse(const OAIWarehouseInShipmentDetailLineDto &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIShipmentDetailLineDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIShipmentDetailLineDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIShipmentDetailLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordered_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipmentDetailLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
