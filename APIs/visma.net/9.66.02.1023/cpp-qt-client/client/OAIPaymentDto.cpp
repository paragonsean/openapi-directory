/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentDto::OAIPaymentDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentDto::OAIPaymentDto() {
    this->initializeModel();
}

OAIPaymentDto::~OAIPaymentDto() {}

void OAIPaymentDto::initializeModel() {

    m_application_date_isSet = false;
    m_application_date_isValid = false;

    m_application_period_isSet = false;
    m_application_period_isValid = false;

    m_applied_to_documents_isSet = false;
    m_applied_to_documents_isValid = false;

    m_applied_to_orders_isSet = false;
    m_applied_to_orders_isValid = false;

    m_available_balance_isSet = false;
    m_available_balance_isValid = false;

    m_available_balance_in_currency_isSet = false;
    m_available_balance_in_currency_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_deducted_charges_isSet = false;
    m_deducted_charges_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_finance_charges_isSet = false;
    m_finance_charges_isValid = false;

    m_financial_details_isSet = false;
    m_financial_details_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_invoice_text_isSet = false;
    m_invoice_text_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_orders_to_apply_isSet = false;
    m_orders_to_apply_isValid = false;

    m_payment_amount_isSet = false;
    m_payment_amount_isValid = false;

    m_payment_amount_in_currency_isSet = false;
    m_payment_amount_in_currency_isValid = false;

    m_payment_lines_isSet = false;
    m_payment_lines_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_ref_isSet = false;
    m_payment_ref_isValid = false;

    m_ref_nbr_isSet = false;
    m_ref_nbr_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_write_off_amount_isSet = false;
    m_write_off_amount_isValid = false;
}

void OAIPaymentDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentDto::fromJsonObject(QJsonObject json) {

    m_application_date_isValid = ::OpenAPI::fromJsonValue(m_application_date, json[QString("applicationDate")]);
    m_application_date_isSet = !json[QString("applicationDate")].isNull() && m_application_date_isValid;

    m_application_period_isValid = ::OpenAPI::fromJsonValue(m_application_period, json[QString("applicationPeriod")]);
    m_application_period_isSet = !json[QString("applicationPeriod")].isNull() && m_application_period_isValid;

    m_applied_to_documents_isValid = ::OpenAPI::fromJsonValue(m_applied_to_documents, json[QString("appliedToDocuments")]);
    m_applied_to_documents_isSet = !json[QString("appliedToDocuments")].isNull() && m_applied_to_documents_isValid;

    m_applied_to_orders_isValid = ::OpenAPI::fromJsonValue(m_applied_to_orders, json[QString("appliedToOrders")]);
    m_applied_to_orders_isSet = !json[QString("appliedToOrders")].isNull() && m_applied_to_orders_isValid;

    m_available_balance_isValid = ::OpenAPI::fromJsonValue(m_available_balance, json[QString("availableBalance")]);
    m_available_balance_isSet = !json[QString("availableBalance")].isNull() && m_available_balance_isValid;

    m_available_balance_in_currency_isValid = ::OpenAPI::fromJsonValue(m_available_balance_in_currency, json[QString("availableBalanceInCurrency")]);
    m_available_balance_in_currency_isSet = !json[QString("availableBalanceInCurrency")].isNull() && m_available_balance_in_currency_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_deducted_charges_isValid = ::OpenAPI::fromJsonValue(m_deducted_charges, json[QString("deductedCharges")]);
    m_deducted_charges_isSet = !json[QString("deductedCharges")].isNull() && m_deducted_charges_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_finance_charges_isValid = ::OpenAPI::fromJsonValue(m_finance_charges, json[QString("financeCharges")]);
    m_finance_charges_isSet = !json[QString("financeCharges")].isNull() && m_finance_charges_isValid;

    m_financial_details_isValid = ::OpenAPI::fromJsonValue(m_financial_details, json[QString("financialDetails")]);
    m_financial_details_isSet = !json[QString("financialDetails")].isNull() && m_financial_details_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_invoice_text_isValid = ::OpenAPI::fromJsonValue(m_invoice_text, json[QString("invoiceText")]);
    m_invoice_text_isSet = !json[QString("invoiceText")].isNull() && m_invoice_text_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_orders_to_apply_isValid = ::OpenAPI::fromJsonValue(m_orders_to_apply, json[QString("ordersToApply")]);
    m_orders_to_apply_isSet = !json[QString("ordersToApply")].isNull() && m_orders_to_apply_isValid;

    m_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_payment_amount, json[QString("paymentAmount")]);
    m_payment_amount_isSet = !json[QString("paymentAmount")].isNull() && m_payment_amount_isValid;

    m_payment_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_payment_amount_in_currency, json[QString("paymentAmountInCurrency")]);
    m_payment_amount_in_currency_isSet = !json[QString("paymentAmountInCurrency")].isNull() && m_payment_amount_in_currency_isValid;

    m_payment_lines_isValid = ::OpenAPI::fromJsonValue(m_payment_lines, json[QString("paymentLines")]);
    m_payment_lines_isSet = !json[QString("paymentLines")].isNull() && m_payment_lines_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_ref_isValid = ::OpenAPI::fromJsonValue(m_payment_ref, json[QString("paymentRef")]);
    m_payment_ref_isSet = !json[QString("paymentRef")].isNull() && m_payment_ref_isValid;

    m_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ref_nbr, json[QString("refNbr")]);
    m_ref_nbr_isSet = !json[QString("refNbr")].isNull() && m_ref_nbr_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_write_off_amount_isValid = ::OpenAPI::fromJsonValue(m_write_off_amount, json[QString("writeOffAmount")]);
    m_write_off_amount_isSet = !json[QString("writeOffAmount")].isNull() && m_write_off_amount_isValid;
}

QString OAIPaymentDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentDto::asJsonObject() const {
    QJsonObject obj;
    if (m_application_date_isSet) {
        obj.insert(QString("applicationDate"), ::OpenAPI::toJsonValue(m_application_date));
    }
    if (m_application_period_isSet) {
        obj.insert(QString("applicationPeriod"), ::OpenAPI::toJsonValue(m_application_period));
    }
    if (m_applied_to_documents_isSet) {
        obj.insert(QString("appliedToDocuments"), ::OpenAPI::toJsonValue(m_applied_to_documents));
    }
    if (m_applied_to_orders_isSet) {
        obj.insert(QString("appliedToOrders"), ::OpenAPI::toJsonValue(m_applied_to_orders));
    }
    if (m_available_balance_isSet) {
        obj.insert(QString("availableBalance"), ::OpenAPI::toJsonValue(m_available_balance));
    }
    if (m_available_balance_in_currency_isSet) {
        obj.insert(QString("availableBalanceInCurrency"), ::OpenAPI::toJsonValue(m_available_balance_in_currency));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_cash_account_isSet) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_deducted_charges_isSet) {
        obj.insert(QString("deductedCharges"), ::OpenAPI::toJsonValue(m_deducted_charges));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_finance_charges_isSet) {
        obj.insert(QString("financeCharges"), ::OpenAPI::toJsonValue(m_finance_charges));
    }
    if (m_financial_details.isSet()) {
        obj.insert(QString("financialDetails"), ::OpenAPI::toJsonValue(m_financial_details));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_invoice_text_isSet) {
        obj.insert(QString("invoiceText"), ::OpenAPI::toJsonValue(m_invoice_text));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_orders_to_apply.size() > 0) {
        obj.insert(QString("ordersToApply"), ::OpenAPI::toJsonValue(m_orders_to_apply));
    }
    if (m_payment_amount_isSet) {
        obj.insert(QString("paymentAmount"), ::OpenAPI::toJsonValue(m_payment_amount));
    }
    if (m_payment_amount_in_currency_isSet) {
        obj.insert(QString("paymentAmountInCurrency"), ::OpenAPI::toJsonValue(m_payment_amount_in_currency));
    }
    if (m_payment_lines.size() > 0) {
        obj.insert(QString("paymentLines"), ::OpenAPI::toJsonValue(m_payment_lines));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_ref_isSet) {
        obj.insert(QString("paymentRef"), ::OpenAPI::toJsonValue(m_payment_ref));
    }
    if (m_ref_nbr_isSet) {
        obj.insert(QString("refNbr"), ::OpenAPI::toJsonValue(m_ref_nbr));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_write_off_amount_isSet) {
        obj.insert(QString("writeOffAmount"), ::OpenAPI::toJsonValue(m_write_off_amount));
    }
    return obj;
}

QDateTime OAIPaymentDto::getApplicationDate() const {
    return m_application_date;
}
void OAIPaymentDto::setApplicationDate(const QDateTime &application_date) {
    m_application_date = application_date;
    m_application_date_isSet = true;
}

bool OAIPaymentDto::is_application_date_Set() const{
    return m_application_date_isSet;
}

bool OAIPaymentDto::is_application_date_Valid() const{
    return m_application_date_isValid;
}

QString OAIPaymentDto::getApplicationPeriod() const {
    return m_application_period;
}
void OAIPaymentDto::setApplicationPeriod(const QString &application_period) {
    m_application_period = application_period;
    m_application_period_isSet = true;
}

bool OAIPaymentDto::is_application_period_Set() const{
    return m_application_period_isSet;
}

bool OAIPaymentDto::is_application_period_Valid() const{
    return m_application_period_isValid;
}

double OAIPaymentDto::getAppliedToDocuments() const {
    return m_applied_to_documents;
}
void OAIPaymentDto::setAppliedToDocuments(const double &applied_to_documents) {
    m_applied_to_documents = applied_to_documents;
    m_applied_to_documents_isSet = true;
}

bool OAIPaymentDto::is_applied_to_documents_Set() const{
    return m_applied_to_documents_isSet;
}

bool OAIPaymentDto::is_applied_to_documents_Valid() const{
    return m_applied_to_documents_isValid;
}

double OAIPaymentDto::getAppliedToOrders() const {
    return m_applied_to_orders;
}
void OAIPaymentDto::setAppliedToOrders(const double &applied_to_orders) {
    m_applied_to_orders = applied_to_orders;
    m_applied_to_orders_isSet = true;
}

bool OAIPaymentDto::is_applied_to_orders_Set() const{
    return m_applied_to_orders_isSet;
}

bool OAIPaymentDto::is_applied_to_orders_Valid() const{
    return m_applied_to_orders_isValid;
}

double OAIPaymentDto::getAvailableBalance() const {
    return m_available_balance;
}
void OAIPaymentDto::setAvailableBalance(const double &available_balance) {
    m_available_balance = available_balance;
    m_available_balance_isSet = true;
}

bool OAIPaymentDto::is_available_balance_Set() const{
    return m_available_balance_isSet;
}

bool OAIPaymentDto::is_available_balance_Valid() const{
    return m_available_balance_isValid;
}

double OAIPaymentDto::getAvailableBalanceInCurrency() const {
    return m_available_balance_in_currency;
}
void OAIPaymentDto::setAvailableBalanceInCurrency(const double &available_balance_in_currency) {
    m_available_balance_in_currency = available_balance_in_currency;
    m_available_balance_in_currency_isSet = true;
}

bool OAIPaymentDto::is_available_balance_in_currency_Set() const{
    return m_available_balance_in_currency_isSet;
}

bool OAIPaymentDto::is_available_balance_in_currency_Valid() const{
    return m_available_balance_in_currency_isValid;
}

QString OAIPaymentDto::getBranch() const {
    return m_branch;
}
void OAIPaymentDto::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIPaymentDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIPaymentDto::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIPaymentDto::getCashAccount() const {
    return m_cash_account;
}
void OAIPaymentDto::setCashAccount(const QString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAIPaymentDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAIPaymentDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

QString OAIPaymentDto::getCurrency() const {
    return m_currency;
}
void OAIPaymentDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPaymentDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPaymentDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerInPaymentDto OAIPaymentDto::getCustomer() const {
    return m_customer;
}
void OAIPaymentDto::setCustomer(const OAICustomerInPaymentDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIPaymentDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIPaymentDto::is_customer_Valid() const{
    return m_customer_isValid;
}

double OAIPaymentDto::getDeductedCharges() const {
    return m_deducted_charges;
}
void OAIPaymentDto::setDeductedCharges(const double &deducted_charges) {
    m_deducted_charges = deducted_charges;
    m_deducted_charges_isSet = true;
}

bool OAIPaymentDto::is_deducted_charges_Set() const{
    return m_deducted_charges_isSet;
}

bool OAIPaymentDto::is_deducted_charges_Valid() const{
    return m_deducted_charges_isValid;
}

QString OAIPaymentDto::getErrorInfo() const {
    return m_error_info;
}
void OAIPaymentDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIPaymentDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIPaymentDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAIPaymentDto::getFinanceCharges() const {
    return m_finance_charges;
}
void OAIPaymentDto::setFinanceCharges(const double &finance_charges) {
    m_finance_charges = finance_charges;
    m_finance_charges_isSet = true;
}

bool OAIPaymentDto::is_finance_charges_Set() const{
    return m_finance_charges_isSet;
}

bool OAIPaymentDto::is_finance_charges_Valid() const{
    return m_finance_charges_isValid;
}

OAIFinancialDetailsInPaymentDto OAIPaymentDto::getFinancialDetails() const {
    return m_financial_details;
}
void OAIPaymentDto::setFinancialDetails(const OAIFinancialDetailsInPaymentDto &financial_details) {
    m_financial_details = financial_details;
    m_financial_details_isSet = true;
}

bool OAIPaymentDto::is_financial_details_Set() const{
    return m_financial_details_isSet;
}

bool OAIPaymentDto::is_financial_details_Valid() const{
    return m_financial_details_isValid;
}

bool OAIPaymentDto::isHold() const {
    return m_hold;
}
void OAIPaymentDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIPaymentDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIPaymentDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QString OAIPaymentDto::getInvoiceText() const {
    return m_invoice_text;
}
void OAIPaymentDto::setInvoiceText(const QString &invoice_text) {
    m_invoice_text = invoice_text;
    m_invoice_text_isSet = true;
}

bool OAIPaymentDto::is_invoice_text_Set() const{
    return m_invoice_text_isSet;
}

bool OAIPaymentDto::is_invoice_text_Valid() const{
    return m_invoice_text_isValid;
}

QDateTime OAIPaymentDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIPaymentDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIPaymentDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIPaymentDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInPaymentDto OAIPaymentDto::getLocation() const {
    return m_location;
}
void OAIPaymentDto::setLocation(const OAILocationInPaymentDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPaymentDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPaymentDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIPaymentDto::getMetadata() const {
    return m_metadata;
}
void OAIPaymentDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPaymentDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPaymentDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIOrderToApplyDto> OAIPaymentDto::getOrdersToApply() const {
    return m_orders_to_apply;
}
void OAIPaymentDto::setOrdersToApply(const QList<OAIOrderToApplyDto> &orders_to_apply) {
    m_orders_to_apply = orders_to_apply;
    m_orders_to_apply_isSet = true;
}

bool OAIPaymentDto::is_orders_to_apply_Set() const{
    return m_orders_to_apply_isSet;
}

bool OAIPaymentDto::is_orders_to_apply_Valid() const{
    return m_orders_to_apply_isValid;
}

double OAIPaymentDto::getPaymentAmount() const {
    return m_payment_amount;
}
void OAIPaymentDto::setPaymentAmount(const double &payment_amount) {
    m_payment_amount = payment_amount;
    m_payment_amount_isSet = true;
}

bool OAIPaymentDto::is_payment_amount_Set() const{
    return m_payment_amount_isSet;
}

bool OAIPaymentDto::is_payment_amount_Valid() const{
    return m_payment_amount_isValid;
}

double OAIPaymentDto::getPaymentAmountInCurrency() const {
    return m_payment_amount_in_currency;
}
void OAIPaymentDto::setPaymentAmountInCurrency(const double &payment_amount_in_currency) {
    m_payment_amount_in_currency = payment_amount_in_currency;
    m_payment_amount_in_currency_isSet = true;
}

bool OAIPaymentDto::is_payment_amount_in_currency_Set() const{
    return m_payment_amount_in_currency_isSet;
}

bool OAIPaymentDto::is_payment_amount_in_currency_Valid() const{
    return m_payment_amount_in_currency_isValid;
}

QList<OAIPaymentLineDto> OAIPaymentDto::getPaymentLines() const {
    return m_payment_lines;
}
void OAIPaymentDto::setPaymentLines(const QList<OAIPaymentLineDto> &payment_lines) {
    m_payment_lines = payment_lines;
    m_payment_lines_isSet = true;
}

bool OAIPaymentDto::is_payment_lines_Set() const{
    return m_payment_lines_isSet;
}

bool OAIPaymentDto::is_payment_lines_Valid() const{
    return m_payment_lines_isValid;
}

OAIPaymentMethodInPaymentDto OAIPaymentDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAIPaymentDto::setPaymentMethod(const OAIPaymentMethodInPaymentDto &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIPaymentDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIPaymentDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIPaymentDto::getPaymentRef() const {
    return m_payment_ref;
}
void OAIPaymentDto::setPaymentRef(const QString &payment_ref) {
    m_payment_ref = payment_ref;
    m_payment_ref_isSet = true;
}

bool OAIPaymentDto::is_payment_ref_Set() const{
    return m_payment_ref_isSet;
}

bool OAIPaymentDto::is_payment_ref_Valid() const{
    return m_payment_ref_isValid;
}

QString OAIPaymentDto::getRefNbr() const {
    return m_ref_nbr;
}
void OAIPaymentDto::setRefNbr(const QString &ref_nbr) {
    m_ref_nbr = ref_nbr;
    m_ref_nbr_isSet = true;
}

bool OAIPaymentDto::is_ref_nbr_Set() const{
    return m_ref_nbr_isSet;
}

bool OAIPaymentDto::is_ref_nbr_Valid() const{
    return m_ref_nbr_isValid;
}

QString OAIPaymentDto::getStatus() const {
    return m_status;
}
void OAIPaymentDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPaymentDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPaymentDto::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPaymentDto::getType() const {
    return m_type;
}
void OAIPaymentDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentDto::is_type_Valid() const{
    return m_type_isValid;
}

double OAIPaymentDto::getWriteOffAmount() const {
    return m_write_off_amount;
}
void OAIPaymentDto::setWriteOffAmount(const double &write_off_amount) {
    m_write_off_amount = write_off_amount;
    m_write_off_amount_isSet = true;
}

bool OAIPaymentDto::is_write_off_amount_Set() const{
    return m_write_off_amount_isSet;
}

bool OAIPaymentDto::is_write_off_amount_Valid() const{
    return m_write_off_amount_isValid;
}

bool OAIPaymentDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_to_documents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_to_orders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_balance_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deducted_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finance_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orders_to_apply.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_amount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_off_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
