/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJournalTransactionDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJournalTransactionDto::OAIJournalTransactionDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJournalTransactionDto::OAIJournalTransactionDto() {
    this->initializeModel();
}

OAIJournalTransactionDto::~OAIJournalTransactionDto() {}

void OAIJournalTransactionDto::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_auto_reversing_isSet = false;
    m_auto_reversing_isValid = false;

    m_batch_number_isSet = false;
    m_batch_number_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_control_total_isSet = false;
    m_control_total_isValid = false;

    m_control_total_in_currency_isSet = false;
    m_control_total_in_currency_isValid = false;

    m_create_vat_transaction_isSet = false;
    m_create_vat_transaction_isValid = false;

    m_credit_total_isSet = false;
    m_credit_total_isValid = false;

    m_credit_total_in_currency_isSet = false;
    m_credit_total_in_currency_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_debit_total_isSet = false;
    m_debit_total_isValid = false;

    m_debit_total_in_currency_isSet = false;
    m_debit_total_in_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_journal_transaction_lines_isSet = false;
    m_journal_transaction_lines_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_ledger_isSet = false;
    m_ledger_isValid = false;

    m_ledger_description_isSet = false;
    m_ledger_description_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_original_batch_number_isSet = false;
    m_original_batch_number_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_reversing_entry_isSet = false;
    m_reversing_entry_isValid = false;

    m_skip_vat_amount_validation_isSet = false;
    m_skip_vat_amount_validation_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transaction_code_isSet = false;
    m_transaction_code_isValid = false;

    m_transaction_code_description_isSet = false;
    m_transaction_code_description_isValid = false;

    m_transaction_date_isSet = false;
    m_transaction_date_isValid = false;
}

void OAIJournalTransactionDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJournalTransactionDto::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_auto_reversing_isValid = ::OpenAPI::fromJsonValue(m_auto_reversing, json[QString("autoReversing")]);
    m_auto_reversing_isSet = !json[QString("autoReversing")].isNull() && m_auto_reversing_isValid;

    m_batch_number_isValid = ::OpenAPI::fromJsonValue(m_batch_number, json[QString("batchNumber")]);
    m_batch_number_isSet = !json[QString("batchNumber")].isNull() && m_batch_number_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_control_total_isValid = ::OpenAPI::fromJsonValue(m_control_total, json[QString("controlTotal")]);
    m_control_total_isSet = !json[QString("controlTotal")].isNull() && m_control_total_isValid;

    m_control_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_control_total_in_currency, json[QString("controlTotalInCurrency")]);
    m_control_total_in_currency_isSet = !json[QString("controlTotalInCurrency")].isNull() && m_control_total_in_currency_isValid;

    m_create_vat_transaction_isValid = ::OpenAPI::fromJsonValue(m_create_vat_transaction, json[QString("createVatTransaction")]);
    m_create_vat_transaction_isSet = !json[QString("createVatTransaction")].isNull() && m_create_vat_transaction_isValid;

    m_credit_total_isValid = ::OpenAPI::fromJsonValue(m_credit_total, json[QString("creditTotal")]);
    m_credit_total_isSet = !json[QString("creditTotal")].isNull() && m_credit_total_isValid;

    m_credit_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_credit_total_in_currency, json[QString("creditTotalInCurrency")]);
    m_credit_total_in_currency_isSet = !json[QString("creditTotalInCurrency")].isNull() && m_credit_total_in_currency_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_debit_total_isValid = ::OpenAPI::fromJsonValue(m_debit_total, json[QString("debitTotal")]);
    m_debit_total_isSet = !json[QString("debitTotal")].isNull() && m_debit_total_isValid;

    m_debit_total_in_currency_isValid = ::OpenAPI::fromJsonValue(m_debit_total_in_currency, json[QString("debitTotalInCurrency")]);
    m_debit_total_in_currency_isSet = !json[QString("debitTotalInCurrency")].isNull() && m_debit_total_in_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_journal_transaction_lines_isValid = ::OpenAPI::fromJsonValue(m_journal_transaction_lines, json[QString("journalTransactionLines")]);
    m_journal_transaction_lines_isSet = !json[QString("journalTransactionLines")].isNull() && m_journal_transaction_lines_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_ledger_isValid = ::OpenAPI::fromJsonValue(m_ledger, json[QString("ledger")]);
    m_ledger_isSet = !json[QString("ledger")].isNull() && m_ledger_isValid;

    m_ledger_description_isValid = ::OpenAPI::fromJsonValue(m_ledger_description, json[QString("ledgerDescription")]);
    m_ledger_description_isSet = !json[QString("ledgerDescription")].isNull() && m_ledger_description_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_original_batch_number_isValid = ::OpenAPI::fromJsonValue(m_original_batch_number, json[QString("originalBatchNumber")]);
    m_original_batch_number_isSet = !json[QString("originalBatchNumber")].isNull() && m_original_batch_number_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_reversing_entry_isValid = ::OpenAPI::fromJsonValue(m_reversing_entry, json[QString("reversingEntry")]);
    m_reversing_entry_isSet = !json[QString("reversingEntry")].isNull() && m_reversing_entry_isValid;

    m_skip_vat_amount_validation_isValid = ::OpenAPI::fromJsonValue(m_skip_vat_amount_validation, json[QString("skipVatAmountValidation")]);
    m_skip_vat_amount_validation_isSet = !json[QString("skipVatAmountValidation")].isNull() && m_skip_vat_amount_validation_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transaction_code_isValid = ::OpenAPI::fromJsonValue(m_transaction_code, json[QString("transactionCode")]);
    m_transaction_code_isSet = !json[QString("transactionCode")].isNull() && m_transaction_code_isValid;

    m_transaction_code_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_code_description, json[QString("transactionCodeDescription")]);
    m_transaction_code_description_isSet = !json[QString("transactionCodeDescription")].isNull() && m_transaction_code_description_isValid;

    m_transaction_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_date, json[QString("transactionDate")]);
    m_transaction_date_isSet = !json[QString("transactionDate")].isNull() && m_transaction_date_isValid;
}

QString OAIJournalTransactionDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJournalTransactionDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_auto_reversing_isSet) {
        obj.insert(QString("autoReversing"), ::OpenAPI::toJsonValue(m_auto_reversing));
    }
    if (m_batch_number_isSet) {
        obj.insert(QString("batchNumber"), ::OpenAPI::toJsonValue(m_batch_number));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_control_total_isSet) {
        obj.insert(QString("controlTotal"), ::OpenAPI::toJsonValue(m_control_total));
    }
    if (m_control_total_in_currency_isSet) {
        obj.insert(QString("controlTotalInCurrency"), ::OpenAPI::toJsonValue(m_control_total_in_currency));
    }
    if (m_create_vat_transaction_isSet) {
        obj.insert(QString("createVatTransaction"), ::OpenAPI::toJsonValue(m_create_vat_transaction));
    }
    if (m_credit_total_isSet) {
        obj.insert(QString("creditTotal"), ::OpenAPI::toJsonValue(m_credit_total));
    }
    if (m_credit_total_in_currency_isSet) {
        obj.insert(QString("creditTotalInCurrency"), ::OpenAPI::toJsonValue(m_credit_total_in_currency));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_debit_total_isSet) {
        obj.insert(QString("debitTotal"), ::OpenAPI::toJsonValue(m_debit_total));
    }
    if (m_debit_total_in_currency_isSet) {
        obj.insert(QString("debitTotalInCurrency"), ::OpenAPI::toJsonValue(m_debit_total_in_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_financial_period_isSet) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_journal_transaction_lines.size() > 0) {
        obj.insert(QString("journalTransactionLines"), ::OpenAPI::toJsonValue(m_journal_transaction_lines));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_ledger_isSet) {
        obj.insert(QString("ledger"), ::OpenAPI::toJsonValue(m_ledger));
    }
    if (m_ledger_description_isSet) {
        obj.insert(QString("ledgerDescription"), ::OpenAPI::toJsonValue(m_ledger_description));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_module_isSet) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_original_batch_number_isSet) {
        obj.insert(QString("originalBatchNumber"), ::OpenAPI::toJsonValue(m_original_batch_number));
    }
    if (m_post_period_isSet) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_reversing_entry_isSet) {
        obj.insert(QString("reversingEntry"), ::OpenAPI::toJsonValue(m_reversing_entry));
    }
    if (m_skip_vat_amount_validation_isSet) {
        obj.insert(QString("skipVatAmountValidation"), ::OpenAPI::toJsonValue(m_skip_vat_amount_validation));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transaction_code_isSet) {
        obj.insert(QString("transactionCode"), ::OpenAPI::toJsonValue(m_transaction_code));
    }
    if (m_transaction_code_description_isSet) {
        obj.insert(QString("transactionCodeDescription"), ::OpenAPI::toJsonValue(m_transaction_code_description));
    }
    if (m_transaction_date_isSet) {
        obj.insert(QString("transactionDate"), ::OpenAPI::toJsonValue(m_transaction_date));
    }
    return obj;
}

QList<OAIAttachmentDto> OAIJournalTransactionDto::getAttachments() const {
    return m_attachments;
}
void OAIJournalTransactionDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIJournalTransactionDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIJournalTransactionDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

bool OAIJournalTransactionDto::isAutoReversing() const {
    return m_auto_reversing;
}
void OAIJournalTransactionDto::setAutoReversing(const bool &auto_reversing) {
    m_auto_reversing = auto_reversing;
    m_auto_reversing_isSet = true;
}

bool OAIJournalTransactionDto::is_auto_reversing_Set() const{
    return m_auto_reversing_isSet;
}

bool OAIJournalTransactionDto::is_auto_reversing_Valid() const{
    return m_auto_reversing_isValid;
}

QString OAIJournalTransactionDto::getBatchNumber() const {
    return m_batch_number;
}
void OAIJournalTransactionDto::setBatchNumber(const QString &batch_number) {
    m_batch_number = batch_number;
    m_batch_number_isSet = true;
}

bool OAIJournalTransactionDto::is_batch_number_Set() const{
    return m_batch_number_isSet;
}

bool OAIJournalTransactionDto::is_batch_number_Valid() const{
    return m_batch_number_isValid;
}

QString OAIJournalTransactionDto::getBranch() const {
    return m_branch;
}
void OAIJournalTransactionDto::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIJournalTransactionDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIJournalTransactionDto::is_branch_Valid() const{
    return m_branch_isValid;
}

double OAIJournalTransactionDto::getControlTotal() const {
    return m_control_total;
}
void OAIJournalTransactionDto::setControlTotal(const double &control_total) {
    m_control_total = control_total;
    m_control_total_isSet = true;
}

bool OAIJournalTransactionDto::is_control_total_Set() const{
    return m_control_total_isSet;
}

bool OAIJournalTransactionDto::is_control_total_Valid() const{
    return m_control_total_isValid;
}

double OAIJournalTransactionDto::getControlTotalInCurrency() const {
    return m_control_total_in_currency;
}
void OAIJournalTransactionDto::setControlTotalInCurrency(const double &control_total_in_currency) {
    m_control_total_in_currency = control_total_in_currency;
    m_control_total_in_currency_isSet = true;
}

bool OAIJournalTransactionDto::is_control_total_in_currency_Set() const{
    return m_control_total_in_currency_isSet;
}

bool OAIJournalTransactionDto::is_control_total_in_currency_Valid() const{
    return m_control_total_in_currency_isValid;
}

bool OAIJournalTransactionDto::isCreateVatTransaction() const {
    return m_create_vat_transaction;
}
void OAIJournalTransactionDto::setCreateVatTransaction(const bool &create_vat_transaction) {
    m_create_vat_transaction = create_vat_transaction;
    m_create_vat_transaction_isSet = true;
}

bool OAIJournalTransactionDto::is_create_vat_transaction_Set() const{
    return m_create_vat_transaction_isSet;
}

bool OAIJournalTransactionDto::is_create_vat_transaction_Valid() const{
    return m_create_vat_transaction_isValid;
}

double OAIJournalTransactionDto::getCreditTotal() const {
    return m_credit_total;
}
void OAIJournalTransactionDto::setCreditTotal(const double &credit_total) {
    m_credit_total = credit_total;
    m_credit_total_isSet = true;
}

bool OAIJournalTransactionDto::is_credit_total_Set() const{
    return m_credit_total_isSet;
}

bool OAIJournalTransactionDto::is_credit_total_Valid() const{
    return m_credit_total_isValid;
}

double OAIJournalTransactionDto::getCreditTotalInCurrency() const {
    return m_credit_total_in_currency;
}
void OAIJournalTransactionDto::setCreditTotalInCurrency(const double &credit_total_in_currency) {
    m_credit_total_in_currency = credit_total_in_currency;
    m_credit_total_in_currency_isSet = true;
}

bool OAIJournalTransactionDto::is_credit_total_in_currency_Set() const{
    return m_credit_total_in_currency_isSet;
}

bool OAIJournalTransactionDto::is_credit_total_in_currency_Valid() const{
    return m_credit_total_in_currency_isValid;
}

QString OAIJournalTransactionDto::getCurrencyId() const {
    return m_currency_id;
}
void OAIJournalTransactionDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIJournalTransactionDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIJournalTransactionDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

double OAIJournalTransactionDto::getDebitTotal() const {
    return m_debit_total;
}
void OAIJournalTransactionDto::setDebitTotal(const double &debit_total) {
    m_debit_total = debit_total;
    m_debit_total_isSet = true;
}

bool OAIJournalTransactionDto::is_debit_total_Set() const{
    return m_debit_total_isSet;
}

bool OAIJournalTransactionDto::is_debit_total_Valid() const{
    return m_debit_total_isValid;
}

double OAIJournalTransactionDto::getDebitTotalInCurrency() const {
    return m_debit_total_in_currency;
}
void OAIJournalTransactionDto::setDebitTotalInCurrency(const double &debit_total_in_currency) {
    m_debit_total_in_currency = debit_total_in_currency;
    m_debit_total_in_currency_isSet = true;
}

bool OAIJournalTransactionDto::is_debit_total_in_currency_Set() const{
    return m_debit_total_in_currency_isSet;
}

bool OAIJournalTransactionDto::is_debit_total_in_currency_Valid() const{
    return m_debit_total_in_currency_isValid;
}

QString OAIJournalTransactionDto::getDescription() const {
    return m_description;
}
void OAIJournalTransactionDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJournalTransactionDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJournalTransactionDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIJournalTransactionDto::getErrorInfo() const {
    return m_error_info;
}
void OAIJournalTransactionDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIJournalTransactionDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIJournalTransactionDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAIJournalTransactionDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIJournalTransactionDto::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIJournalTransactionDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIJournalTransactionDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

QString OAIJournalTransactionDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAIJournalTransactionDto::setFinancialPeriod(const QString &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAIJournalTransactionDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAIJournalTransactionDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

bool OAIJournalTransactionDto::isHold() const {
    return m_hold;
}
void OAIJournalTransactionDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIJournalTransactionDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIJournalTransactionDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QList<OAIJournalTransactionLineDto> OAIJournalTransactionDto::getJournalTransactionLines() const {
    return m_journal_transaction_lines;
}
void OAIJournalTransactionDto::setJournalTransactionLines(const QList<OAIJournalTransactionLineDto> &journal_transaction_lines) {
    m_journal_transaction_lines = journal_transaction_lines;
    m_journal_transaction_lines_isSet = true;
}

bool OAIJournalTransactionDto::is_journal_transaction_lines_Set() const{
    return m_journal_transaction_lines_isSet;
}

bool OAIJournalTransactionDto::is_journal_transaction_lines_Valid() const{
    return m_journal_transaction_lines_isValid;
}

QDateTime OAIJournalTransactionDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIJournalTransactionDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIJournalTransactionDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIJournalTransactionDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIJournalTransactionDto::getLedger() const {
    return m_ledger;
}
void OAIJournalTransactionDto::setLedger(const QString &ledger) {
    m_ledger = ledger;
    m_ledger_isSet = true;
}

bool OAIJournalTransactionDto::is_ledger_Set() const{
    return m_ledger_isSet;
}

bool OAIJournalTransactionDto::is_ledger_Valid() const{
    return m_ledger_isValid;
}

QString OAIJournalTransactionDto::getLedgerDescription() const {
    return m_ledger_description;
}
void OAIJournalTransactionDto::setLedgerDescription(const QString &ledger_description) {
    m_ledger_description = ledger_description;
    m_ledger_description_isSet = true;
}

bool OAIJournalTransactionDto::is_ledger_description_Set() const{
    return m_ledger_description_isSet;
}

bool OAIJournalTransactionDto::is_ledger_description_Valid() const{
    return m_ledger_description_isValid;
}

OAIMetadataDto OAIJournalTransactionDto::getMetadata() const {
    return m_metadata;
}
void OAIJournalTransactionDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIJournalTransactionDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIJournalTransactionDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIJournalTransactionDto::getModule() const {
    return m_module;
}
void OAIJournalTransactionDto::setModule(const QString &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIJournalTransactionDto::is_module_Set() const{
    return m_module_isSet;
}

bool OAIJournalTransactionDto::is_module_Valid() const{
    return m_module_isValid;
}

QString OAIJournalTransactionDto::getOriginalBatchNumber() const {
    return m_original_batch_number;
}
void OAIJournalTransactionDto::setOriginalBatchNumber(const QString &original_batch_number) {
    m_original_batch_number = original_batch_number;
    m_original_batch_number_isSet = true;
}

bool OAIJournalTransactionDto::is_original_batch_number_Set() const{
    return m_original_batch_number_isSet;
}

bool OAIJournalTransactionDto::is_original_batch_number_Valid() const{
    return m_original_batch_number_isValid;
}

QString OAIJournalTransactionDto::getPostPeriod() const {
    return m_post_period;
}
void OAIJournalTransactionDto::setPostPeriod(const QString &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAIJournalTransactionDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAIJournalTransactionDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

bool OAIJournalTransactionDto::isReversingEntry() const {
    return m_reversing_entry;
}
void OAIJournalTransactionDto::setReversingEntry(const bool &reversing_entry) {
    m_reversing_entry = reversing_entry;
    m_reversing_entry_isSet = true;
}

bool OAIJournalTransactionDto::is_reversing_entry_Set() const{
    return m_reversing_entry_isSet;
}

bool OAIJournalTransactionDto::is_reversing_entry_Valid() const{
    return m_reversing_entry_isValid;
}

bool OAIJournalTransactionDto::isSkipVatAmountValidation() const {
    return m_skip_vat_amount_validation;
}
void OAIJournalTransactionDto::setSkipVatAmountValidation(const bool &skip_vat_amount_validation) {
    m_skip_vat_amount_validation = skip_vat_amount_validation;
    m_skip_vat_amount_validation_isSet = true;
}

bool OAIJournalTransactionDto::is_skip_vat_amount_validation_Set() const{
    return m_skip_vat_amount_validation_isSet;
}

bool OAIJournalTransactionDto::is_skip_vat_amount_validation_Valid() const{
    return m_skip_vat_amount_validation_isValid;
}

QString OAIJournalTransactionDto::getStatus() const {
    return m_status;
}
void OAIJournalTransactionDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJournalTransactionDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJournalTransactionDto::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIJournalTransactionDto::getTransactionCode() const {
    return m_transaction_code;
}
void OAIJournalTransactionDto::setTransactionCode(const QString &transaction_code) {
    m_transaction_code = transaction_code;
    m_transaction_code_isSet = true;
}

bool OAIJournalTransactionDto::is_transaction_code_Set() const{
    return m_transaction_code_isSet;
}

bool OAIJournalTransactionDto::is_transaction_code_Valid() const{
    return m_transaction_code_isValid;
}

QString OAIJournalTransactionDto::getTransactionCodeDescription() const {
    return m_transaction_code_description;
}
void OAIJournalTransactionDto::setTransactionCodeDescription(const QString &transaction_code_description) {
    m_transaction_code_description = transaction_code_description;
    m_transaction_code_description_isSet = true;
}

bool OAIJournalTransactionDto::is_transaction_code_description_Set() const{
    return m_transaction_code_description_isSet;
}

bool OAIJournalTransactionDto::is_transaction_code_description_Valid() const{
    return m_transaction_code_description_isValid;
}

QDateTime OAIJournalTransactionDto::getTransactionDate() const {
    return m_transaction_date;
}
void OAIJournalTransactionDto::setTransactionDate(const QDateTime &transaction_date) {
    m_transaction_date = transaction_date;
    m_transaction_date_isSet = true;
}

bool OAIJournalTransactionDto::is_transaction_date_Set() const{
    return m_transaction_date_isSet;
}

bool OAIJournalTransactionDto::is_transaction_date_Valid() const{
    return m_transaction_date_isValid;
}

bool OAIJournalTransactionDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_reversing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_vat_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_total_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_transaction_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ledger_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_batch_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reversing_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_vat_amount_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_code_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJournalTransactionDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
