/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDimensionApi_H
#define OAI_OAIDimensionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIDtoDimension.h"
#include "OAIDtoSegment.h"
#include "OAIDtoSegmentUpdateDto.h"
#include "OAIDtoSegmentValue.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDimensionApi : public QObject {
    Q_OBJECT

public:
    OAIDimensionApi(const int timeOut = 0);
    ~OAIDimensionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  dimension_id QString [required]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  expand_segments_values bool [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void dimensionGetDimensionBydimensionId(const QString &dimension_id, const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_segments_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void dimensionGetDimensionList(const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dimension_id QString [required]
    * @param[in]  segment_id qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void dimensionGetSegmentBydimensionIdsegmentId(const QString &dimension_id, const qint32 &segment_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dimension_id QString [required]
    * @param[in]  segment_id qint32 [required]
    * @param[in]  public_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void dimensionGetSegmentValueBydimensionIdsegmentIdpublicId(const QString &dimension_id, const qint32 &segment_id, const QString &public_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dimension_id QString [required]
    * @param[in]  segment_id qint32 [required]
    * @param[in]  value_id QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void dimensionGetSegmentValueBydimensionIdsegmentIdvalueId(const QString &dimension_id, const qint32 &segment_id, const QString &value_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dimension_id QString [required]
    * @param[in]  segment_id qint32 [required]
    * @param[in]  oai_dto_segment_update_dto OAIDtoSegmentUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void dimensionUpdateSegmentBydimensionIdsegmentId(const QString &dimension_id, const qint32 &segment_id, const OAIDtoSegmentUpdateDto &oai_dto_segment_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dimensionGetDimensionBydimensionIdCallback(OAIHttpRequestWorker *worker);
    void dimensionGetDimensionListCallback(OAIHttpRequestWorker *worker);
    void dimensionGetSegmentBydimensionIdsegmentIdCallback(OAIHttpRequestWorker *worker);
    void dimensionGetSegmentValueBydimensionIdsegmentIdpublicIdCallback(OAIHttpRequestWorker *worker);
    void dimensionGetSegmentValueBydimensionIdsegmentIdvalueIdCallback(OAIHttpRequestWorker *worker);
    void dimensionUpdateSegmentBydimensionIdsegmentIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dimensionGetDimensionBydimensionIdSignal(OAIDtoDimension summary);
    void dimensionGetDimensionListSignal(QList<QString> summary);
    void dimensionGetSegmentBydimensionIdsegmentIdSignal(OAIDtoSegment summary);
    void dimensionGetSegmentValueBydimensionIdsegmentIdpublicIdSignal(OAIDtoSegmentValue summary);
    void dimensionGetSegmentValueBydimensionIdsegmentIdvalueIdSignal(OAIDtoSegmentValue summary);
    void dimensionUpdateSegmentBydimensionIdsegmentIdSignal(OAIBackgroundApiAcceptedDto summary);


    void dimensionGetDimensionBydimensionIdSignalFull(OAIHttpRequestWorker *worker, OAIDtoDimension summary);
    void dimensionGetDimensionListSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void dimensionGetSegmentBydimensionIdsegmentIdSignalFull(OAIHttpRequestWorker *worker, OAIDtoSegment summary);
    void dimensionGetSegmentValueBydimensionIdsegmentIdpublicIdSignalFull(OAIHttpRequestWorker *worker, OAIDtoSegmentValue summary);
    void dimensionGetSegmentValueBydimensionIdsegmentIdvalueIdSignalFull(OAIHttpRequestWorker *worker, OAIDtoSegmentValue summary);
    void dimensionUpdateSegmentBydimensionIdsegmentIdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use dimensionGetDimensionBydimensionIdSignalError() instead")
    void dimensionGetDimensionBydimensionIdSignalE(OAIDtoDimension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetDimensionBydimensionIdSignalError(OAIDtoDimension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionGetDimensionListSignalError() instead")
    void dimensionGetDimensionListSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetDimensionListSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionGetSegmentBydimensionIdsegmentIdSignalError() instead")
    void dimensionGetSegmentBydimensionIdsegmentIdSignalE(OAIDtoSegment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetSegmentBydimensionIdsegmentIdSignalError(OAIDtoSegment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionGetSegmentValueBydimensionIdsegmentIdpublicIdSignalError() instead")
    void dimensionGetSegmentValueBydimensionIdsegmentIdpublicIdSignalE(OAIDtoSegmentValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetSegmentValueBydimensionIdsegmentIdpublicIdSignalError(OAIDtoSegmentValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionGetSegmentValueBydimensionIdsegmentIdvalueIdSignalError() instead")
    void dimensionGetSegmentValueBydimensionIdsegmentIdvalueIdSignalE(OAIDtoSegmentValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetSegmentValueBydimensionIdsegmentIdvalueIdSignalError(OAIDtoSegmentValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionUpdateSegmentBydimensionIdsegmentIdSignalError() instead")
    void dimensionUpdateSegmentBydimensionIdsegmentIdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionUpdateSegmentBydimensionIdsegmentIdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dimensionGetDimensionBydimensionIdSignalErrorFull() instead")
    void dimensionGetDimensionBydimensionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetDimensionBydimensionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionGetDimensionListSignalErrorFull() instead")
    void dimensionGetDimensionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetDimensionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionGetSegmentBydimensionIdsegmentIdSignalErrorFull() instead")
    void dimensionGetSegmentBydimensionIdsegmentIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetSegmentBydimensionIdsegmentIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionGetSegmentValueBydimensionIdsegmentIdpublicIdSignalErrorFull() instead")
    void dimensionGetSegmentValueBydimensionIdsegmentIdpublicIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetSegmentValueBydimensionIdsegmentIdpublicIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionGetSegmentValueBydimensionIdsegmentIdvalueIdSignalErrorFull() instead")
    void dimensionGetSegmentValueBydimensionIdsegmentIdvalueIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionGetSegmentValueBydimensionIdsegmentIdvalueIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionUpdateSegmentBydimensionIdsegmentIdSignalErrorFull() instead")
    void dimensionUpdateSegmentBydimensionIdsegmentIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionUpdateSegmentBydimensionIdsegmentIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
