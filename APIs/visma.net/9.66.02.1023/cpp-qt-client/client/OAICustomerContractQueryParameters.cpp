/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerContractQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerContractQueryParameters::OAICustomerContractQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerContractQueryParameters::OAICustomerContractQueryParameters() {
    this->initializeModel();
}

OAICustomerContractQueryParameters::~OAICustomerContractQueryParameters() {}

void OAICustomerContractQueryParameters::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_contract_template_isSet = false;
    m_contract_template_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_expand_attributes_isSet = false;
    m_expand_attributes_isValid = false;

    m_expand_details_isSet = false;
    m_expand_details_isValid = false;

    m_expand_summary_isSet = false;
    m_expand_summary_isValid = false;

    m_greater_than_value_isSet = false;
    m_greater_than_value_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICustomerContractQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerContractQueryParameters::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_contract_template_isValid = ::OpenAPI::fromJsonValue(m_contract_template, json[QString("contractTemplate")]);
    m_contract_template_isSet = !json[QString("contractTemplate")].isNull() && m_contract_template_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_expand_attributes_isValid = ::OpenAPI::fromJsonValue(m_expand_attributes, json[QString("expandAttributes")]);
    m_expand_attributes_isSet = !json[QString("expandAttributes")].isNull() && m_expand_attributes_isValid;

    m_expand_details_isValid = ::OpenAPI::fromJsonValue(m_expand_details, json[QString("expandDetails")]);
    m_expand_details_isSet = !json[QString("expandDetails")].isNull() && m_expand_details_isValid;

    m_expand_summary_isValid = ::OpenAPI::fromJsonValue(m_expand_summary, json[QString("expandSummary")]);
    m_expand_summary_isSet = !json[QString("expandSummary")].isNull() && m_expand_summary_isValid;

    m_greater_than_value_isValid = ::OpenAPI::fromJsonValue(m_greater_than_value, json[QString("greaterThanValue")]);
    m_greater_than_value_isSet = !json[QString("greaterThanValue")].isNull() && m_greater_than_value_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICustomerContractQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerContractQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_contract_template_isSet) {
        obj.insert(QString("contractTemplate"), ::OpenAPI::toJsonValue(m_contract_template));
    }
    if (m_customer_isSet) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_expand_attributes_isSet) {
        obj.insert(QString("expandAttributes"), ::OpenAPI::toJsonValue(m_expand_attributes));
    }
    if (m_expand_details_isSet) {
        obj.insert(QString("expandDetails"), ::OpenAPI::toJsonValue(m_expand_details));
    }
    if (m_expand_summary_isSet) {
        obj.insert(QString("expandSummary"), ::OpenAPI::toJsonValue(m_expand_summary));
    }
    if (m_greater_than_value_isSet) {
        obj.insert(QString("greaterThanValue"), ::OpenAPI::toJsonValue(m_greater_than_value));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICustomerContractQueryParameters::getAttributes() const {
    return m_attributes;
}
void OAICustomerContractQueryParameters::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICustomerContractQueryParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICustomerContractQueryParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAICustomerContractQueryParameters::getContractTemplate() const {
    return m_contract_template;
}
void OAICustomerContractQueryParameters::setContractTemplate(const QString &contract_template) {
    m_contract_template = contract_template;
    m_contract_template_isSet = true;
}

bool OAICustomerContractQueryParameters::is_contract_template_Set() const{
    return m_contract_template_isSet;
}

bool OAICustomerContractQueryParameters::is_contract_template_Valid() const{
    return m_contract_template_isValid;
}

QString OAICustomerContractQueryParameters::getCustomer() const {
    return m_customer;
}
void OAICustomerContractQueryParameters::setCustomer(const QString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomerContractQueryParameters::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomerContractQueryParameters::is_customer_Valid() const{
    return m_customer_isValid;
}

bool OAICustomerContractQueryParameters::isExpandAttributes() const {
    return m_expand_attributes;
}
void OAICustomerContractQueryParameters::setExpandAttributes(const bool &expand_attributes) {
    m_expand_attributes = expand_attributes;
    m_expand_attributes_isSet = true;
}

bool OAICustomerContractQueryParameters::is_expand_attributes_Set() const{
    return m_expand_attributes_isSet;
}

bool OAICustomerContractQueryParameters::is_expand_attributes_Valid() const{
    return m_expand_attributes_isValid;
}

bool OAICustomerContractQueryParameters::isExpandDetails() const {
    return m_expand_details;
}
void OAICustomerContractQueryParameters::setExpandDetails(const bool &expand_details) {
    m_expand_details = expand_details;
    m_expand_details_isSet = true;
}

bool OAICustomerContractQueryParameters::is_expand_details_Set() const{
    return m_expand_details_isSet;
}

bool OAICustomerContractQueryParameters::is_expand_details_Valid() const{
    return m_expand_details_isValid;
}

bool OAICustomerContractQueryParameters::isExpandSummary() const {
    return m_expand_summary;
}
void OAICustomerContractQueryParameters::setExpandSummary(const bool &expand_summary) {
    m_expand_summary = expand_summary;
    m_expand_summary_isSet = true;
}

bool OAICustomerContractQueryParameters::is_expand_summary_Set() const{
    return m_expand_summary_isSet;
}

bool OAICustomerContractQueryParameters::is_expand_summary_Valid() const{
    return m_expand_summary_isValid;
}

QString OAICustomerContractQueryParameters::getGreaterThanValue() const {
    return m_greater_than_value;
}
void OAICustomerContractQueryParameters::setGreaterThanValue(const QString &greater_than_value) {
    m_greater_than_value = greater_than_value;
    m_greater_than_value_isSet = true;
}

bool OAICustomerContractQueryParameters::is_greater_than_value_Set() const{
    return m_greater_than_value_isSet;
}

bool OAICustomerContractQueryParameters::is_greater_than_value_Valid() const{
    return m_greater_than_value_isValid;
}

QString OAICustomerContractQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAICustomerContractQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAICustomerContractQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAICustomerContractQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAICustomerContractQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAICustomerContractQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAICustomerContractQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAICustomerContractQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

qint32 OAICustomerContractQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAICustomerContractQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAICustomerContractQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAICustomerContractQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

QString OAICustomerContractQueryParameters::getOrderBy() const {
    return m_order_by;
}
void OAICustomerContractQueryParameters::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAICustomerContractQueryParameters::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAICustomerContractQueryParameters::is_order_by_Valid() const{
    return m_order_by_isValid;
}

qint32 OAICustomerContractQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAICustomerContractQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAICustomerContractQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAICustomerContractQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

QString OAICustomerContractQueryParameters::getStatus() const {
    return m_status;
}
void OAICustomerContractQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomerContractQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomerContractQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICustomerContractQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerContractQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
