/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationReceivedDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationReceivedDto::OAINotificationReceivedDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationReceivedDto::OAINotificationReceivedDto() {
    this->initializeModel();
}

OAINotificationReceivedDto::~OAINotificationReceivedDto() {}

void OAINotificationReceivedDto::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAINotificationReceivedDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationReceivedDto::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notificationId")]);
    m_notification_id_isSet = !json[QString("notificationId")].isNull() && m_notification_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAINotificationReceivedDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationReceivedDto::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_notification_id_isSet) {
        obj.insert(QString("notificationId"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAINotificationReceivedDto::getEntityId() const {
    return m_entity_id;
}
void OAINotificationReceivedDto::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAINotificationReceivedDto::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAINotificationReceivedDto::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAINotificationReceivedDto::getNotificationId() const {
    return m_notification_id;
}
void OAINotificationReceivedDto::setNotificationId(const QString &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAINotificationReceivedDto::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAINotificationReceivedDto::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

QString OAINotificationReceivedDto::getSource() const {
    return m_source;
}
void OAINotificationReceivedDto::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAINotificationReceivedDto::is_source_Set() const{
    return m_source_isSet;
}

bool OAINotificationReceivedDto::is_source_Valid() const{
    return m_source_isValid;
}

QString OAINotificationReceivedDto::getStatus() const {
    return m_status;
}
void OAINotificationReceivedDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINotificationReceivedDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAINotificationReceivedDto::is_status_Valid() const{
    return m_status_isValid;
}

bool OAINotificationReceivedDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationReceivedDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
