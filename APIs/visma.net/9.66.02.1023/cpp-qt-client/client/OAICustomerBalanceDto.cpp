/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerBalanceDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerBalanceDto::OAICustomerBalanceDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerBalanceDto::OAICustomerBalanceDto() {
    this->initializeModel();
}

OAICustomerBalanceDto::~OAICustomerBalanceDto() {}

void OAICustomerBalanceDto::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_total_discount_period_isSet = false;
    m_total_discount_period_isValid = false;

    m_total_discount_year_isSet = false;
    m_total_discount_year_isValid = false;

    m_total_loan_isSet = false;
    m_total_loan_isValid = false;

    m_total_order_isSet = false;
    m_total_order_isValid = false;

    m_total_sale_period_isSet = false;
    m_total_sale_period_isValid = false;

    m_total_sale_year_isSet = false;
    m_total_sale_year_isValid = false;
}

void OAICustomerBalanceDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerBalanceDto::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_total_discount_period_isValid = ::OpenAPI::fromJsonValue(m_total_discount_period, json[QString("totalDiscountPeriod")]);
    m_total_discount_period_isSet = !json[QString("totalDiscountPeriod")].isNull() && m_total_discount_period_isValid;

    m_total_discount_year_isValid = ::OpenAPI::fromJsonValue(m_total_discount_year, json[QString("totalDiscountYear")]);
    m_total_discount_year_isSet = !json[QString("totalDiscountYear")].isNull() && m_total_discount_year_isValid;

    m_total_loan_isValid = ::OpenAPI::fromJsonValue(m_total_loan, json[QString("totalLoan")]);
    m_total_loan_isSet = !json[QString("totalLoan")].isNull() && m_total_loan_isValid;

    m_total_order_isValid = ::OpenAPI::fromJsonValue(m_total_order, json[QString("totalOrder")]);
    m_total_order_isSet = !json[QString("totalOrder")].isNull() && m_total_order_isValid;

    m_total_sale_period_isValid = ::OpenAPI::fromJsonValue(m_total_sale_period, json[QString("totalSalePeriod")]);
    m_total_sale_period_isSet = !json[QString("totalSalePeriod")].isNull() && m_total_sale_period_isValid;

    m_total_sale_year_isValid = ::OpenAPI::fromJsonValue(m_total_sale_year, json[QString("totalSaleYear")]);
    m_total_sale_year_isSet = !json[QString("totalSaleYear")].isNull() && m_total_sale_year_isValid;
}

QString OAICustomerBalanceDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerBalanceDto::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_total_discount_period_isSet) {
        obj.insert(QString("totalDiscountPeriod"), ::OpenAPI::toJsonValue(m_total_discount_period));
    }
    if (m_total_discount_year_isSet) {
        obj.insert(QString("totalDiscountYear"), ::OpenAPI::toJsonValue(m_total_discount_year));
    }
    if (m_total_loan_isSet) {
        obj.insert(QString("totalLoan"), ::OpenAPI::toJsonValue(m_total_loan));
    }
    if (m_total_order_isSet) {
        obj.insert(QString("totalOrder"), ::OpenAPI::toJsonValue(m_total_order));
    }
    if (m_total_sale_period_isSet) {
        obj.insert(QString("totalSalePeriod"), ::OpenAPI::toJsonValue(m_total_sale_period));
    }
    if (m_total_sale_year_isSet) {
        obj.insert(QString("totalSaleYear"), ::OpenAPI::toJsonValue(m_total_sale_year));
    }
    return obj;
}

double OAICustomerBalanceDto::getBalance() const {
    return m_balance;
}
void OAICustomerBalanceDto::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAICustomerBalanceDto::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAICustomerBalanceDto::is_balance_Valid() const{
    return m_balance_isValid;
}

OAICustomerDescriptionDto OAICustomerBalanceDto::getCustomer() const {
    return m_customer;
}
void OAICustomerBalanceDto::setCustomer(const OAICustomerDescriptionDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomerBalanceDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomerBalanceDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QDateTime OAICustomerBalanceDto::getLastModified() const {
    return m_last_modified;
}
void OAICustomerBalanceDto::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAICustomerBalanceDto::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAICustomerBalanceDto::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

double OAICustomerBalanceDto::getTotalDiscountPeriod() const {
    return m_total_discount_period;
}
void OAICustomerBalanceDto::setTotalDiscountPeriod(const double &total_discount_period) {
    m_total_discount_period = total_discount_period;
    m_total_discount_period_isSet = true;
}

bool OAICustomerBalanceDto::is_total_discount_period_Set() const{
    return m_total_discount_period_isSet;
}

bool OAICustomerBalanceDto::is_total_discount_period_Valid() const{
    return m_total_discount_period_isValid;
}

double OAICustomerBalanceDto::getTotalDiscountYear() const {
    return m_total_discount_year;
}
void OAICustomerBalanceDto::setTotalDiscountYear(const double &total_discount_year) {
    m_total_discount_year = total_discount_year;
    m_total_discount_year_isSet = true;
}

bool OAICustomerBalanceDto::is_total_discount_year_Set() const{
    return m_total_discount_year_isSet;
}

bool OAICustomerBalanceDto::is_total_discount_year_Valid() const{
    return m_total_discount_year_isValid;
}

double OAICustomerBalanceDto::getTotalLoan() const {
    return m_total_loan;
}
void OAICustomerBalanceDto::setTotalLoan(const double &total_loan) {
    m_total_loan = total_loan;
    m_total_loan_isSet = true;
}

bool OAICustomerBalanceDto::is_total_loan_Set() const{
    return m_total_loan_isSet;
}

bool OAICustomerBalanceDto::is_total_loan_Valid() const{
    return m_total_loan_isValid;
}

double OAICustomerBalanceDto::getTotalOrder() const {
    return m_total_order;
}
void OAICustomerBalanceDto::setTotalOrder(const double &total_order) {
    m_total_order = total_order;
    m_total_order_isSet = true;
}

bool OAICustomerBalanceDto::is_total_order_Set() const{
    return m_total_order_isSet;
}

bool OAICustomerBalanceDto::is_total_order_Valid() const{
    return m_total_order_isValid;
}

double OAICustomerBalanceDto::getTotalSalePeriod() const {
    return m_total_sale_period;
}
void OAICustomerBalanceDto::setTotalSalePeriod(const double &total_sale_period) {
    m_total_sale_period = total_sale_period;
    m_total_sale_period_isSet = true;
}

bool OAICustomerBalanceDto::is_total_sale_period_Set() const{
    return m_total_sale_period_isSet;
}

bool OAICustomerBalanceDto::is_total_sale_period_Valid() const{
    return m_total_sale_period_isValid;
}

double OAICustomerBalanceDto::getTotalSaleYear() const {
    return m_total_sale_year;
}
void OAICustomerBalanceDto::setTotalSaleYear(const double &total_sale_year) {
    m_total_sale_year = total_sale_year;
    m_total_sale_year_isSet = true;
}

bool OAICustomerBalanceDto::is_total_sale_year_Set() const{
    return m_total_sale_year_isSet;
}

bool OAICustomerBalanceDto::is_total_sale_year_Valid() const{
    return m_total_sale_year_isValid;
}

bool OAICustomerBalanceDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_loan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_sale_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_sale_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerBalanceDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
