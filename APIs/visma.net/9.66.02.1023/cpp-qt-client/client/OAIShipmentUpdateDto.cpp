/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentUpdateDto::OAIShipmentUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentUpdateDto::OAIShipmentUpdateDto() {
    this->initializeModel();
}

OAIShipmentUpdateDto::~OAIShipmentUpdateDto() {}

void OAIShipmentUpdateDto::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_attention_isSet = false;
    m_attention_isValid = false;

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_control_quantity_isSet = false;
    m_control_quantity_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fob_point_isSet = false;
    m_fob_point_isValid = false;

    m_freight_amt_isSet = false;
    m_freight_amt_isValid = false;

    m_freight_cost_isSet = false;
    m_freight_cost_isValid = false;

    m_from_warehouse_isSet = false;
    m_from_warehouse_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_insurance_isSet = false;
    m_insurance_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_mode_of_trasport_isSet = false;
    m_mode_of_trasport_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_override_address_isSet = false;
    m_override_address_isValid = false;

    m_override_contact_isSet = false;
    m_override_contact_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_phone1_isSet = false;
    m_phone1_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_residential_delivery_isSet = false;
    m_residential_delivery_isValid = false;

    m_saturday_delivery_isSet = false;
    m_saturday_delivery_isValid = false;

    m_ship_via_isSet = false;
    m_ship_via_isValid = false;

    m_shipment_date_isSet = false;
    m_shipment_date_isValid = false;

    m_shipment_detail_lines_isSet = false;
    m_shipment_detail_lines_isValid = false;

    m_shipment_package_lines_isSet = false;
    m_shipment_package_lines_isValid = false;

    m_shipment_type_isSet = false;
    m_shipment_type_isValid = false;

    m_shipping_terms_isSet = false;
    m_shipping_terms_isValid = false;

    m_shipping_zone_isSet = false;
    m_shipping_zone_isValid = false;

    m_to_warehouse_isSet = false;
    m_to_warehouse_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;

    m_use_customer_account_isSet = false;
    m_use_customer_account_isValid = false;
}

void OAIShipmentUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipmentUpdateDto::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("addressLine2")]);
    m_address_line2_isSet = !json[QString("addressLine2")].isNull() && m_address_line2_isValid;

    m_attention_isValid = ::OpenAPI::fromJsonValue(m_attention, json[QString("attention")]);
    m_attention_isSet = !json[QString("attention")].isNull() && m_attention_isValid;

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("businessName")]);
    m_business_name_isSet = !json[QString("businessName")].isNull() && m_business_name_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_control_quantity_isValid = ::OpenAPI::fromJsonValue(m_control_quantity, json[QString("controlQuantity")]);
    m_control_quantity_isSet = !json[QString("controlQuantity")].isNull() && m_control_quantity_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fob_point_isValid = ::OpenAPI::fromJsonValue(m_fob_point, json[QString("fobPoint")]);
    m_fob_point_isSet = !json[QString("fobPoint")].isNull() && m_fob_point_isValid;

    m_freight_amt_isValid = ::OpenAPI::fromJsonValue(m_freight_amt, json[QString("freightAmt")]);
    m_freight_amt_isSet = !json[QString("freightAmt")].isNull() && m_freight_amt_isValid;

    m_freight_cost_isValid = ::OpenAPI::fromJsonValue(m_freight_cost, json[QString("freightCost")]);
    m_freight_cost_isSet = !json[QString("freightCost")].isNull() && m_freight_cost_isValid;

    m_from_warehouse_isValid = ::OpenAPI::fromJsonValue(m_from_warehouse, json[QString("fromWarehouse")]);
    m_from_warehouse_isSet = !json[QString("fromWarehouse")].isNull() && m_from_warehouse_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_insurance_isValid = ::OpenAPI::fromJsonValue(m_insurance, json[QString("insurance")]);
    m_insurance_isSet = !json[QString("insurance")].isNull() && m_insurance_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_mode_of_trasport_isValid = ::OpenAPI::fromJsonValue(m_mode_of_trasport, json[QString("modeOfTrasport")]);
    m_mode_of_trasport_isSet = !json[QString("modeOfTrasport")].isNull() && m_mode_of_trasport_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_override_address_isValid = ::OpenAPI::fromJsonValue(m_override_address, json[QString("overrideAddress")]);
    m_override_address_isSet = !json[QString("overrideAddress")].isNull() && m_override_address_isValid;

    m_override_contact_isValid = ::OpenAPI::fromJsonValue(m_override_contact, json[QString("overrideContact")]);
    m_override_contact_isSet = !json[QString("overrideContact")].isNull() && m_override_contact_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_phone1_isValid = ::OpenAPI::fromJsonValue(m_phone1, json[QString("phone1")]);
    m_phone1_isSet = !json[QString("phone1")].isNull() && m_phone1_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_residential_delivery_isValid = ::OpenAPI::fromJsonValue(m_residential_delivery, json[QString("residentialDelivery")]);
    m_residential_delivery_isSet = !json[QString("residentialDelivery")].isNull() && m_residential_delivery_isValid;

    m_saturday_delivery_isValid = ::OpenAPI::fromJsonValue(m_saturday_delivery, json[QString("saturdayDelivery")]);
    m_saturday_delivery_isSet = !json[QString("saturdayDelivery")].isNull() && m_saturday_delivery_isValid;

    m_ship_via_isValid = ::OpenAPI::fromJsonValue(m_ship_via, json[QString("shipVia")]);
    m_ship_via_isSet = !json[QString("shipVia")].isNull() && m_ship_via_isValid;

    m_shipment_date_isValid = ::OpenAPI::fromJsonValue(m_shipment_date, json[QString("shipmentDate")]);
    m_shipment_date_isSet = !json[QString("shipmentDate")].isNull() && m_shipment_date_isValid;

    m_shipment_detail_lines_isValid = ::OpenAPI::fromJsonValue(m_shipment_detail_lines, json[QString("shipmentDetailLines")]);
    m_shipment_detail_lines_isSet = !json[QString("shipmentDetailLines")].isNull() && m_shipment_detail_lines_isValid;

    m_shipment_package_lines_isValid = ::OpenAPI::fromJsonValue(m_shipment_package_lines, json[QString("shipmentPackageLines")]);
    m_shipment_package_lines_isSet = !json[QString("shipmentPackageLines")].isNull() && m_shipment_package_lines_isValid;

    m_shipment_type_isValid = ::OpenAPI::fromJsonValue(m_shipment_type, json[QString("shipmentType")]);
    m_shipment_type_isSet = !json[QString("shipmentType")].isNull() && m_shipment_type_isValid;

    m_shipping_terms_isValid = ::OpenAPI::fromJsonValue(m_shipping_terms, json[QString("shippingTerms")]);
    m_shipping_terms_isSet = !json[QString("shippingTerms")].isNull() && m_shipping_terms_isValid;

    m_shipping_zone_isValid = ::OpenAPI::fromJsonValue(m_shipping_zone, json[QString("shippingZone")]);
    m_shipping_zone_isSet = !json[QString("shippingZone")].isNull() && m_shipping_zone_isValid;

    m_to_warehouse_isValid = ::OpenAPI::fromJsonValue(m_to_warehouse, json[QString("toWarehouse")]);
    m_to_warehouse_isSet = !json[QString("toWarehouse")].isNull() && m_to_warehouse_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;

    m_use_customer_account_isValid = ::OpenAPI::fromJsonValue(m_use_customer_account, json[QString("useCustomerAccount")]);
    m_use_customer_account_isSet = !json[QString("useCustomerAccount")].isNull() && m_use_customer_account_isValid;
}

QString OAIShipmentUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipmentUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1.isSet()) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2.isSet()) {
        obj.insert(QString("addressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_attention.isSet()) {
        obj.insert(QString("attention"), ::OpenAPI::toJsonValue(m_attention));
    }
    if (m_business_name.isSet()) {
        obj.insert(QString("businessName"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_city.isSet()) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_container.isSet()) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_control_quantity.isSet()) {
        obj.insert(QString("controlQuantity"), ::OpenAPI::toJsonValue(m_control_quantity));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county.isSet()) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_email.isSet()) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fob_point.isSet()) {
        obj.insert(QString("fobPoint"), ::OpenAPI::toJsonValue(m_fob_point));
    }
    if (m_freight_amt.isSet()) {
        obj.insert(QString("freightAmt"), ::OpenAPI::toJsonValue(m_freight_amt));
    }
    if (m_freight_cost.isSet()) {
        obj.insert(QString("freightCost"), ::OpenAPI::toJsonValue(m_freight_cost));
    }
    if (m_from_warehouse.isSet()) {
        obj.insert(QString("fromWarehouse"), ::OpenAPI::toJsonValue(m_from_warehouse));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_insurance.isSet()) {
        obj.insert(QString("insurance"), ::OpenAPI::toJsonValue(m_insurance));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_mode_of_trasport.isSet()) {
        obj.insert(QString("modeOfTrasport"), ::OpenAPI::toJsonValue(m_mode_of_trasport));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_override_address.isSet()) {
        obj.insert(QString("overrideAddress"), ::OpenAPI::toJsonValue(m_override_address));
    }
    if (m_override_contact.isSet()) {
        obj.insert(QString("overrideContact"), ::OpenAPI::toJsonValue(m_override_contact));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_phone1.isSet()) {
        obj.insert(QString("phone1"), ::OpenAPI::toJsonValue(m_phone1));
    }
    if (m_postal_code.isSet()) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_residential_delivery.isSet()) {
        obj.insert(QString("residentialDelivery"), ::OpenAPI::toJsonValue(m_residential_delivery));
    }
    if (m_saturday_delivery.isSet()) {
        obj.insert(QString("saturdayDelivery"), ::OpenAPI::toJsonValue(m_saturday_delivery));
    }
    if (m_ship_via.isSet()) {
        obj.insert(QString("shipVia"), ::OpenAPI::toJsonValue(m_ship_via));
    }
    if (m_shipment_date.isSet()) {
        obj.insert(QString("shipmentDate"), ::OpenAPI::toJsonValue(m_shipment_date));
    }
    if (m_shipment_detail_lines.size() > 0) {
        obj.insert(QString("shipmentDetailLines"), ::OpenAPI::toJsonValue(m_shipment_detail_lines));
    }
    if (m_shipment_package_lines.size() > 0) {
        obj.insert(QString("shipmentPackageLines"), ::OpenAPI::toJsonValue(m_shipment_package_lines));
    }
    if (m_shipment_type.isSet()) {
        obj.insert(QString("shipmentType"), ::OpenAPI::toJsonValue(m_shipment_type));
    }
    if (m_shipping_terms.isSet()) {
        obj.insert(QString("shippingTerms"), ::OpenAPI::toJsonValue(m_shipping_terms));
    }
    if (m_shipping_zone.isSet()) {
        obj.insert(QString("shippingZone"), ::OpenAPI::toJsonValue(m_shipping_zone));
    }
    if (m_to_warehouse.isSet()) {
        obj.insert(QString("toWarehouse"), ::OpenAPI::toJsonValue(m_to_warehouse));
    }
    if (m_transaction_type.isSet()) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    if (m_use_customer_account.isSet()) {
        obj.insert(QString("useCustomerAccount"), ::OpenAPI::toJsonValue(m_use_customer_account));
    }
    return obj;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getAddressLine1() const {
    return m_address_line1;
}
void OAIShipmentUpdateDto::setAddressLine1(const OAIDtoValueOfString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIShipmentUpdateDto::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIShipmentUpdateDto::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getAddressLine2() const {
    return m_address_line2;
}
void OAIShipmentUpdateDto::setAddressLine2(const OAIDtoValueOfString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIShipmentUpdateDto::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIShipmentUpdateDto::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getAttention() const {
    return m_attention;
}
void OAIShipmentUpdateDto::setAttention(const OAIDtoValueOfString &attention) {
    m_attention = attention;
    m_attention_isSet = true;
}

bool OAIShipmentUpdateDto::is_attention_Set() const{
    return m_attention_isSet;
}

bool OAIShipmentUpdateDto::is_attention_Valid() const{
    return m_attention_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getBusinessName() const {
    return m_business_name;
}
void OAIShipmentUpdateDto::setBusinessName(const OAIDtoValueOfString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAIShipmentUpdateDto::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAIShipmentUpdateDto::is_business_name_Valid() const{
    return m_business_name_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getCity() const {
    return m_city;
}
void OAIShipmentUpdateDto::setCity(const OAIDtoValueOfString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIShipmentUpdateDto::is_city_Set() const{
    return m_city_isSet;
}

bool OAIShipmentUpdateDto::is_city_Valid() const{
    return m_city_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIShipmentUpdateDto::getContainer() const {
    return m_container;
}
void OAIShipmentUpdateDto::setContainer(const OAIDtoValueOfNullableOfBoolean &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIShipmentUpdateDto::is_container_Set() const{
    return m_container_isSet;
}

bool OAIShipmentUpdateDto::is_container_Valid() const{
    return m_container_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIShipmentUpdateDto::getControlQuantity() const {
    return m_control_quantity;
}
void OAIShipmentUpdateDto::setControlQuantity(const OAIDtoValueOfNullableOfDecimal &control_quantity) {
    m_control_quantity = control_quantity;
    m_control_quantity_isSet = true;
}

bool OAIShipmentUpdateDto::is_control_quantity_Set() const{
    return m_control_quantity_isSet;
}

bool OAIShipmentUpdateDto::is_control_quantity_Valid() const{
    return m_control_quantity_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getCountry() const {
    return m_country;
}
void OAIShipmentUpdateDto::setCountry(const OAIDtoValueOfString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIShipmentUpdateDto::is_country_Set() const{
    return m_country_isSet;
}

bool OAIShipmentUpdateDto::is_country_Valid() const{
    return m_country_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getCounty() const {
    return m_county;
}
void OAIShipmentUpdateDto::setCounty(const OAIDtoValueOfString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIShipmentUpdateDto::is_county_Set() const{
    return m_county_isSet;
}

bool OAIShipmentUpdateDto::is_county_Valid() const{
    return m_county_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getCustomer() const {
    return m_customer;
}
void OAIShipmentUpdateDto::setCustomer(const OAIDtoValueOfString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIShipmentUpdateDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIShipmentUpdateDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getEmail() const {
    return m_email;
}
void OAIShipmentUpdateDto::setEmail(const OAIDtoValueOfString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIShipmentUpdateDto::is_email_Set() const{
    return m_email_isSet;
}

bool OAIShipmentUpdateDto::is_email_Valid() const{
    return m_email_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getFobPoint() const {
    return m_fob_point;
}
void OAIShipmentUpdateDto::setFobPoint(const OAIDtoValueOfString &fob_point) {
    m_fob_point = fob_point;
    m_fob_point_isSet = true;
}

bool OAIShipmentUpdateDto::is_fob_point_Set() const{
    return m_fob_point_isSet;
}

bool OAIShipmentUpdateDto::is_fob_point_Valid() const{
    return m_fob_point_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIShipmentUpdateDto::getFreightAmt() const {
    return m_freight_amt;
}
void OAIShipmentUpdateDto::setFreightAmt(const OAIDtoValueOfNullableOfDecimal &freight_amt) {
    m_freight_amt = freight_amt;
    m_freight_amt_isSet = true;
}

bool OAIShipmentUpdateDto::is_freight_amt_Set() const{
    return m_freight_amt_isSet;
}

bool OAIShipmentUpdateDto::is_freight_amt_Valid() const{
    return m_freight_amt_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIShipmentUpdateDto::getFreightCost() const {
    return m_freight_cost;
}
void OAIShipmentUpdateDto::setFreightCost(const OAIDtoValueOfNullableOfDecimal &freight_cost) {
    m_freight_cost = freight_cost;
    m_freight_cost_isSet = true;
}

bool OAIShipmentUpdateDto::is_freight_cost_Set() const{
    return m_freight_cost_isSet;
}

bool OAIShipmentUpdateDto::is_freight_cost_Valid() const{
    return m_freight_cost_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getFromWarehouse() const {
    return m_from_warehouse;
}
void OAIShipmentUpdateDto::setFromWarehouse(const OAIDtoValueOfString &from_warehouse) {
    m_from_warehouse = from_warehouse;
    m_from_warehouse_isSet = true;
}

bool OAIShipmentUpdateDto::is_from_warehouse_Set() const{
    return m_from_warehouse_isSet;
}

bool OAIShipmentUpdateDto::is_from_warehouse_Valid() const{
    return m_from_warehouse_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIShipmentUpdateDto::getHold() const {
    return m_hold;
}
void OAIShipmentUpdateDto::setHold(const OAIDtoValueOfNullableOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIShipmentUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIShipmentUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIShipmentUpdateDto::getInsurance() const {
    return m_insurance;
}
void OAIShipmentUpdateDto::setInsurance(const OAIDtoValueOfNullableOfBoolean &insurance) {
    m_insurance = insurance;
    m_insurance_isSet = true;
}

bool OAIShipmentUpdateDto::is_insurance_Set() const{
    return m_insurance_isSet;
}

bool OAIShipmentUpdateDto::is_insurance_Valid() const{
    return m_insurance_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getLocation() const {
    return m_location;
}
void OAIShipmentUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIShipmentUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIShipmentUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfNullableOfTransportationModes OAIShipmentUpdateDto::getModeOfTrasport() const {
    return m_mode_of_trasport;
}
void OAIShipmentUpdateDto::setModeOfTrasport(const OAIDtoValueOfNullableOfTransportationModes &mode_of_trasport) {
    m_mode_of_trasport = mode_of_trasport;
    m_mode_of_trasport_isSet = true;
}

bool OAIShipmentUpdateDto::is_mode_of_trasport_Set() const{
    return m_mode_of_trasport_isSet;
}

bool OAIShipmentUpdateDto::is_mode_of_trasport_Valid() const{
    return m_mode_of_trasport_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getNote() const {
    return m_note;
}
void OAIShipmentUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIShipmentUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIShipmentUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfNullableOfShipmentOperations OAIShipmentUpdateDto::getOperation() const {
    return m_operation;
}
void OAIShipmentUpdateDto::setOperation(const OAIDtoValueOfNullableOfShipmentOperations &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIShipmentUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIShipmentUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIShipmentUpdateDto::getOverrideAddress() const {
    return m_override_address;
}
void OAIShipmentUpdateDto::setOverrideAddress(const OAIDtoValueOfNullableOfBoolean &override_address) {
    m_override_address = override_address;
    m_override_address_isSet = true;
}

bool OAIShipmentUpdateDto::is_override_address_Set() const{
    return m_override_address_isSet;
}

bool OAIShipmentUpdateDto::is_override_address_Valid() const{
    return m_override_address_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIShipmentUpdateDto::getOverrideContact() const {
    return m_override_contact;
}
void OAIShipmentUpdateDto::setOverrideContact(const OAIDtoValueOfNullableOfBoolean &override_contact) {
    m_override_contact = override_contact;
    m_override_contact_isSet = true;
}

bool OAIShipmentUpdateDto::is_override_contact_Set() const{
    return m_override_contact_isSet;
}

bool OAIShipmentUpdateDto::is_override_contact_Valid() const{
    return m_override_contact_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getOwner() const {
    return m_owner;
}
void OAIShipmentUpdateDto::setOwner(const OAIDtoValueOfString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIShipmentUpdateDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIShipmentUpdateDto::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getPhone1() const {
    return m_phone1;
}
void OAIShipmentUpdateDto::setPhone1(const OAIDtoValueOfString &phone1) {
    m_phone1 = phone1;
    m_phone1_isSet = true;
}

bool OAIShipmentUpdateDto::is_phone1_Set() const{
    return m_phone1_isSet;
}

bool OAIShipmentUpdateDto::is_phone1_Valid() const{
    return m_phone1_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getPostalCode() const {
    return m_postal_code;
}
void OAIShipmentUpdateDto::setPostalCode(const OAIDtoValueOfString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIShipmentUpdateDto::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIShipmentUpdateDto::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIShipmentUpdateDto::getResidentialDelivery() const {
    return m_residential_delivery;
}
void OAIShipmentUpdateDto::setResidentialDelivery(const OAIDtoValueOfNullableOfBoolean &residential_delivery) {
    m_residential_delivery = residential_delivery;
    m_residential_delivery_isSet = true;
}

bool OAIShipmentUpdateDto::is_residential_delivery_Set() const{
    return m_residential_delivery_isSet;
}

bool OAIShipmentUpdateDto::is_residential_delivery_Valid() const{
    return m_residential_delivery_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIShipmentUpdateDto::getSaturdayDelivery() const {
    return m_saturday_delivery;
}
void OAIShipmentUpdateDto::setSaturdayDelivery(const OAIDtoValueOfNullableOfBoolean &saturday_delivery) {
    m_saturday_delivery = saturday_delivery;
    m_saturday_delivery_isSet = true;
}

bool OAIShipmentUpdateDto::is_saturday_delivery_Set() const{
    return m_saturday_delivery_isSet;
}

bool OAIShipmentUpdateDto::is_saturday_delivery_Valid() const{
    return m_saturday_delivery_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getShipVia() const {
    return m_ship_via;
}
void OAIShipmentUpdateDto::setShipVia(const OAIDtoValueOfString &ship_via) {
    m_ship_via = ship_via;
    m_ship_via_isSet = true;
}

bool OAIShipmentUpdateDto::is_ship_via_Set() const{
    return m_ship_via_isSet;
}

bool OAIShipmentUpdateDto::is_ship_via_Valid() const{
    return m_ship_via_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIShipmentUpdateDto::getShipmentDate() const {
    return m_shipment_date;
}
void OAIShipmentUpdateDto::setShipmentDate(const OAIDtoValueOfNullableOfDateTime &shipment_date) {
    m_shipment_date = shipment_date;
    m_shipment_date_isSet = true;
}

bool OAIShipmentUpdateDto::is_shipment_date_Set() const{
    return m_shipment_date_isSet;
}

bool OAIShipmentUpdateDto::is_shipment_date_Valid() const{
    return m_shipment_date_isValid;
}

QList<OAIShipmentDetailLineUpdateDto> OAIShipmentUpdateDto::getShipmentDetailLines() const {
    return m_shipment_detail_lines;
}
void OAIShipmentUpdateDto::setShipmentDetailLines(const QList<OAIShipmentDetailLineUpdateDto> &shipment_detail_lines) {
    m_shipment_detail_lines = shipment_detail_lines;
    m_shipment_detail_lines_isSet = true;
}

bool OAIShipmentUpdateDto::is_shipment_detail_lines_Set() const{
    return m_shipment_detail_lines_isSet;
}

bool OAIShipmentUpdateDto::is_shipment_detail_lines_Valid() const{
    return m_shipment_detail_lines_isValid;
}

QList<OAIShipmentPackageLineUpdateDto> OAIShipmentUpdateDto::getShipmentPackageLines() const {
    return m_shipment_package_lines;
}
void OAIShipmentUpdateDto::setShipmentPackageLines(const QList<OAIShipmentPackageLineUpdateDto> &shipment_package_lines) {
    m_shipment_package_lines = shipment_package_lines;
    m_shipment_package_lines_isSet = true;
}

bool OAIShipmentUpdateDto::is_shipment_package_lines_Set() const{
    return m_shipment_package_lines_isSet;
}

bool OAIShipmentUpdateDto::is_shipment_package_lines_Valid() const{
    return m_shipment_package_lines_isValid;
}

OAIDtoValueOfNullableOfShipmentTypes OAIShipmentUpdateDto::getShipmentType() const {
    return m_shipment_type;
}
void OAIShipmentUpdateDto::setShipmentType(const OAIDtoValueOfNullableOfShipmentTypes &shipment_type) {
    m_shipment_type = shipment_type;
    m_shipment_type_isSet = true;
}

bool OAIShipmentUpdateDto::is_shipment_type_Set() const{
    return m_shipment_type_isSet;
}

bool OAIShipmentUpdateDto::is_shipment_type_Valid() const{
    return m_shipment_type_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getShippingTerms() const {
    return m_shipping_terms;
}
void OAIShipmentUpdateDto::setShippingTerms(const OAIDtoValueOfString &shipping_terms) {
    m_shipping_terms = shipping_terms;
    m_shipping_terms_isSet = true;
}

bool OAIShipmentUpdateDto::is_shipping_terms_Set() const{
    return m_shipping_terms_isSet;
}

bool OAIShipmentUpdateDto::is_shipping_terms_Valid() const{
    return m_shipping_terms_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getShippingZone() const {
    return m_shipping_zone;
}
void OAIShipmentUpdateDto::setShippingZone(const OAIDtoValueOfString &shipping_zone) {
    m_shipping_zone = shipping_zone;
    m_shipping_zone_isSet = true;
}

bool OAIShipmentUpdateDto::is_shipping_zone_Set() const{
    return m_shipping_zone_isSet;
}

bool OAIShipmentUpdateDto::is_shipping_zone_Valid() const{
    return m_shipping_zone_isValid;
}

OAIDtoValueOfString OAIShipmentUpdateDto::getToWarehouse() const {
    return m_to_warehouse;
}
void OAIShipmentUpdateDto::setToWarehouse(const OAIDtoValueOfString &to_warehouse) {
    m_to_warehouse = to_warehouse;
    m_to_warehouse_isSet = true;
}

bool OAIShipmentUpdateDto::is_to_warehouse_Set() const{
    return m_to_warehouse_isSet;
}

bool OAIShipmentUpdateDto::is_to_warehouse_Valid() const{
    return m_to_warehouse_isValid;
}

OAIDtoValueOfNullableOfInt32 OAIShipmentUpdateDto::getTransactionType() const {
    return m_transaction_type;
}
void OAIShipmentUpdateDto::setTransactionType(const OAIDtoValueOfNullableOfInt32 &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAIShipmentUpdateDto::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAIShipmentUpdateDto::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIShipmentUpdateDto::getUseCustomerAccount() const {
    return m_use_customer_account;
}
void OAIShipmentUpdateDto::setUseCustomerAccount(const OAIDtoValueOfNullableOfBoolean &use_customer_account) {
    m_use_customer_account = use_customer_account;
    m_use_customer_account_isSet = true;
}

bool OAIShipmentUpdateDto::is_use_customer_account_Set() const{
    return m_use_customer_account_isSet;
}

bool OAIShipmentUpdateDto::is_use_customer_account_Valid() const{
    return m_use_customer_account_isValid;
}

bool OAIShipmentUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_city.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_county.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fob_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_amt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_of_trasport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_residential_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_via.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_detail_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_package_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_customer_account.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipmentUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
