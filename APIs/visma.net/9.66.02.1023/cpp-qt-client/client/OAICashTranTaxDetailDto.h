/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICashTranTaxDetailDto.h
 *
 * 
 */

#ifndef OAICashTranTaxDetailDto_H
#define OAICashTranTaxDetailDto_H

#include <QJsonObject>

#include "OAITaxInCashTranTaxDetailDto.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITaxInCashTranTaxDetailDto;

class OAICashTranTaxDetailDto : public OAIObject {
public:
    OAICashTranTaxDetailDto();
    OAICashTranTaxDetailDto(QString json);
    ~OAICashTranTaxDetailDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getDeductibleTaxRate() const;
    void setDeductibleTaxRate(const double &deductible_tax_rate);
    bool is_deductible_tax_rate_Set() const;
    bool is_deductible_tax_rate_Valid() const;

    double getExpenseAmount() const;
    void setExpenseAmount(const double &expense_amount);
    bool is_expense_amount_Set() const;
    bool is_expense_amount_Valid() const;

    bool isIncludeInVatExemptTotal() const;
    void setIncludeInVatExemptTotal(const bool &include_in_vat_exempt_total);
    bool is_include_in_vat_exempt_total_Set() const;
    bool is_include_in_vat_exempt_total_Valid() const;

    bool isPendingVat() const;
    void setPendingVat(const bool &pending_vat);
    bool is_pending_vat_Set() const;
    bool is_pending_vat_Valid() const;

    bool isReverseVat() const;
    void setReverseVat(const bool &reverse_vat);
    bool is_reverse_vat_Set() const;
    bool is_reverse_vat_Valid() const;

    bool isStatisticalVat() const;
    void setStatisticalVat(const bool &statistical_vat);
    bool is_statistical_vat_Set() const;
    bool is_statistical_vat_Valid() const;

    OAITaxInCashTranTaxDetailDto getTax() const;
    void setTax(const OAITaxInCashTranTaxDetailDto &tax);
    bool is_tax_Set() const;
    bool is_tax_Valid() const;

    double getTaxAmount() const;
    void setTaxAmount(const double &tax_amount);
    bool is_tax_amount_Set() const;
    bool is_tax_amount_Valid() const;

    double getTaxRate() const;
    void setTaxRate(const double &tax_rate);
    bool is_tax_rate_Set() const;
    bool is_tax_rate_Valid() const;

    QString getTaxType() const;
    void setTaxType(const QString &tax_type);
    bool is_tax_type_Set() const;
    bool is_tax_type_Valid() const;

    double getTaxableAmount() const;
    void setTaxableAmount(const double &taxable_amount);
    bool is_taxable_amount_Set() const;
    bool is_taxable_amount_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_deductible_tax_rate;
    bool m_deductible_tax_rate_isSet;
    bool m_deductible_tax_rate_isValid;

    double m_expense_amount;
    bool m_expense_amount_isSet;
    bool m_expense_amount_isValid;

    bool m_include_in_vat_exempt_total;
    bool m_include_in_vat_exempt_total_isSet;
    bool m_include_in_vat_exempt_total_isValid;

    bool m_pending_vat;
    bool m_pending_vat_isSet;
    bool m_pending_vat_isValid;

    bool m_reverse_vat;
    bool m_reverse_vat_isSet;
    bool m_reverse_vat_isValid;

    bool m_statistical_vat;
    bool m_statistical_vat_isSet;
    bool m_statistical_vat_isValid;

    OAITaxInCashTranTaxDetailDto m_tax;
    bool m_tax_isSet;
    bool m_tax_isValid;

    double m_tax_amount;
    bool m_tax_amount_isSet;
    bool m_tax_amount_isValid;

    double m_tax_rate;
    bool m_tax_rate_isSet;
    bool m_tax_rate_isValid;

    QString m_tax_type;
    bool m_tax_type_isSet;
    bool m_tax_type_isValid;

    double m_taxable_amount;
    bool m_taxable_amount_isSet;
    bool m_taxable_amount_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICashTranTaxDetailDto)

#endif // OAICashTranTaxDetailDto_H
