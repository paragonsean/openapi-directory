/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseLocationUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseLocationUpdateDto::OAIWarehouseLocationUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseLocationUpdateDto::OAIWarehouseLocationUpdateDto() {
    this->initializeModel();
}

OAIWarehouseLocationUpdateDto::~OAIWarehouseLocationUpdateDto() {}

void OAIWarehouseLocationUpdateDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_assembly_valid_isSet = false;
    m_assembly_valid_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_incl_qty_avail_isSet = false;
    m_incl_qty_avail_isValid = false;

    m_is_costed_isSet = false;
    m_is_costed_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_pick_priority_isSet = false;
    m_pick_priority_isValid = false;

    m_primary_item_class_id_isSet = false;
    m_primary_item_class_id_isValid = false;

    m_primary_item_id_isSet = false;
    m_primary_item_id_isValid = false;

    m_primary_item_valid_isSet = false;
    m_primary_item_valid_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_task_id_isSet = false;
    m_project_task_id_isValid = false;

    m_receipts_valid_isSet = false;
    m_receipts_valid_isValid = false;

    m_sales_valid_isSet = false;
    m_sales_valid_isValid = false;

    m_transfers_valid_isSet = false;
    m_transfers_valid_isValid = false;
}

void OAIWarehouseLocationUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseLocationUpdateDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_assembly_valid_isValid = ::OpenAPI::fromJsonValue(m_assembly_valid, json[QString("assemblyValid")]);
    m_assembly_valid_isSet = !json[QString("assemblyValid")].isNull() && m_assembly_valid_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_incl_qty_avail_isValid = ::OpenAPI::fromJsonValue(m_incl_qty_avail, json[QString("inclQtyAvail")]);
    m_incl_qty_avail_isSet = !json[QString("inclQtyAvail")].isNull() && m_incl_qty_avail_isValid;

    m_is_costed_isValid = ::OpenAPI::fromJsonValue(m_is_costed, json[QString("isCosted")]);
    m_is_costed_isSet = !json[QString("isCosted")].isNull() && m_is_costed_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_pick_priority_isValid = ::OpenAPI::fromJsonValue(m_pick_priority, json[QString("pickPriority")]);
    m_pick_priority_isSet = !json[QString("pickPriority")].isNull() && m_pick_priority_isValid;

    m_primary_item_class_id_isValid = ::OpenAPI::fromJsonValue(m_primary_item_class_id, json[QString("primaryItemClassId")]);
    m_primary_item_class_id_isSet = !json[QString("primaryItemClassId")].isNull() && m_primary_item_class_id_isValid;

    m_primary_item_id_isValid = ::OpenAPI::fromJsonValue(m_primary_item_id, json[QString("primaryItemId")]);
    m_primary_item_id_isSet = !json[QString("primaryItemId")].isNull() && m_primary_item_id_isValid;

    m_primary_item_valid_isValid = ::OpenAPI::fromJsonValue(m_primary_item_valid, json[QString("primaryItemValid")]);
    m_primary_item_valid_isSet = !json[QString("primaryItemValid")].isNull() && m_primary_item_valid_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_project_task_id_isValid = ::OpenAPI::fromJsonValue(m_project_task_id, json[QString("projectTaskId")]);
    m_project_task_id_isSet = !json[QString("projectTaskId")].isNull() && m_project_task_id_isValid;

    m_receipts_valid_isValid = ::OpenAPI::fromJsonValue(m_receipts_valid, json[QString("receiptsValid")]);
    m_receipts_valid_isSet = !json[QString("receiptsValid")].isNull() && m_receipts_valid_isValid;

    m_sales_valid_isValid = ::OpenAPI::fromJsonValue(m_sales_valid, json[QString("salesValid")]);
    m_sales_valid_isSet = !json[QString("salesValid")].isNull() && m_sales_valid_isValid;

    m_transfers_valid_isValid = ::OpenAPI::fromJsonValue(m_transfers_valid, json[QString("transfersValid")]);
    m_transfers_valid_isSet = !json[QString("transfersValid")].isNull() && m_transfers_valid_isValid;
}

QString OAIWarehouseLocationUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseLocationUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active.isSet()) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_assembly_valid.isSet()) {
        obj.insert(QString("assemblyValid"), ::OpenAPI::toJsonValue(m_assembly_valid));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_incl_qty_avail.isSet()) {
        obj.insert(QString("inclQtyAvail"), ::OpenAPI::toJsonValue(m_incl_qty_avail));
    }
    if (m_is_costed.isSet()) {
        obj.insert(QString("isCosted"), ::OpenAPI::toJsonValue(m_is_costed));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_pick_priority.isSet()) {
        obj.insert(QString("pickPriority"), ::OpenAPI::toJsonValue(m_pick_priority));
    }
    if (m_primary_item_class_id.isSet()) {
        obj.insert(QString("primaryItemClassId"), ::OpenAPI::toJsonValue(m_primary_item_class_id));
    }
    if (m_primary_item_id.isSet()) {
        obj.insert(QString("primaryItemId"), ::OpenAPI::toJsonValue(m_primary_item_id));
    }
    if (m_primary_item_valid.isSet()) {
        obj.insert(QString("primaryItemValid"), ::OpenAPI::toJsonValue(m_primary_item_valid));
    }
    if (m_project_id.isSet()) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_task_id.isSet()) {
        obj.insert(QString("projectTaskId"), ::OpenAPI::toJsonValue(m_project_task_id));
    }
    if (m_receipts_valid.isSet()) {
        obj.insert(QString("receiptsValid"), ::OpenAPI::toJsonValue(m_receipts_valid));
    }
    if (m_sales_valid.isSet()) {
        obj.insert(QString("salesValid"), ::OpenAPI::toJsonValue(m_sales_valid));
    }
    if (m_transfers_valid.isSet()) {
        obj.insert(QString("transfersValid"), ::OpenAPI::toJsonValue(m_transfers_valid));
    }
    return obj;
}

OAIActiveInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getActive() const {
    return m_active;
}
void OAIWarehouseLocationUpdateDto::setActive(const OAIActiveInWarehouseLocationUpdateDto &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_active_Valid() const{
    return m_active_isValid;
}

OAIAssemblyValidInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getAssemblyValid() const {
    return m_assembly_valid;
}
void OAIWarehouseLocationUpdateDto::setAssemblyValid(const OAIAssemblyValidInWarehouseLocationUpdateDto &assembly_valid) {
    m_assembly_valid = assembly_valid;
    m_assembly_valid_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_assembly_valid_Set() const{
    return m_assembly_valid_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_assembly_valid_Valid() const{
    return m_assembly_valid_isValid;
}

OAIDescriptionInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getDescription() const {
    return m_description;
}
void OAIWarehouseLocationUpdateDto::setDescription(const OAIDescriptionInWarehouseLocationUpdateDto &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIInclQtyAvailInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getInclQtyAvail() const {
    return m_incl_qty_avail;
}
void OAIWarehouseLocationUpdateDto::setInclQtyAvail(const OAIInclQtyAvailInWarehouseLocationUpdateDto &incl_qty_avail) {
    m_incl_qty_avail = incl_qty_avail;
    m_incl_qty_avail_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_incl_qty_avail_Set() const{
    return m_incl_qty_avail_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_incl_qty_avail_Valid() const{
    return m_incl_qty_avail_isValid;
}

OAIIsCostedInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getIsCosted() const {
    return m_is_costed;
}
void OAIWarehouseLocationUpdateDto::setIsCosted(const OAIIsCostedInWarehouseLocationUpdateDto &is_costed) {
    m_is_costed = is_costed;
    m_is_costed_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_is_costed_Set() const{
    return m_is_costed_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_is_costed_Valid() const{
    return m_is_costed_isValid;
}

OAILocationIdInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAIWarehouseLocationUpdateDto::setLocationId(const OAILocationIdInWarehouseLocationUpdateDto &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIPickPriorityInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getPickPriority() const {
    return m_pick_priority;
}
void OAIWarehouseLocationUpdateDto::setPickPriority(const OAIPickPriorityInWarehouseLocationUpdateDto &pick_priority) {
    m_pick_priority = pick_priority;
    m_pick_priority_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_pick_priority_Set() const{
    return m_pick_priority_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_pick_priority_Valid() const{
    return m_pick_priority_isValid;
}

OAIPrimaryItemClassIdInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getPrimaryItemClassId() const {
    return m_primary_item_class_id;
}
void OAIWarehouseLocationUpdateDto::setPrimaryItemClassId(const OAIPrimaryItemClassIdInWarehouseLocationUpdateDto &primary_item_class_id) {
    m_primary_item_class_id = primary_item_class_id;
    m_primary_item_class_id_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_primary_item_class_id_Set() const{
    return m_primary_item_class_id_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_primary_item_class_id_Valid() const{
    return m_primary_item_class_id_isValid;
}

OAIPrimaryItemIdInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getPrimaryItemId() const {
    return m_primary_item_id;
}
void OAIWarehouseLocationUpdateDto::setPrimaryItemId(const OAIPrimaryItemIdInWarehouseLocationUpdateDto &primary_item_id) {
    m_primary_item_id = primary_item_id;
    m_primary_item_id_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_primary_item_id_Set() const{
    return m_primary_item_id_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_primary_item_id_Valid() const{
    return m_primary_item_id_isValid;
}

OAIPrimaryItemValidInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getPrimaryItemValid() const {
    return m_primary_item_valid;
}
void OAIWarehouseLocationUpdateDto::setPrimaryItemValid(const OAIPrimaryItemValidInWarehouseLocationUpdateDto &primary_item_valid) {
    m_primary_item_valid = primary_item_valid;
    m_primary_item_valid_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_primary_item_valid_Set() const{
    return m_primary_item_valid_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_primary_item_valid_Valid() const{
    return m_primary_item_valid_isValid;
}

OAIProjectIdInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getProjectId() const {
    return m_project_id;
}
void OAIWarehouseLocationUpdateDto::setProjectId(const OAIProjectIdInWarehouseLocationUpdateDto &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIProjectTaskIdInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getProjectTaskId() const {
    return m_project_task_id;
}
void OAIWarehouseLocationUpdateDto::setProjectTaskId(const OAIProjectTaskIdInWarehouseLocationUpdateDto &project_task_id) {
    m_project_task_id = project_task_id;
    m_project_task_id_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_project_task_id_Set() const{
    return m_project_task_id_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_project_task_id_Valid() const{
    return m_project_task_id_isValid;
}

OAIReceiptsValidInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getReceiptsValid() const {
    return m_receipts_valid;
}
void OAIWarehouseLocationUpdateDto::setReceiptsValid(const OAIReceiptsValidInWarehouseLocationUpdateDto &receipts_valid) {
    m_receipts_valid = receipts_valid;
    m_receipts_valid_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_receipts_valid_Set() const{
    return m_receipts_valid_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_receipts_valid_Valid() const{
    return m_receipts_valid_isValid;
}

OAISalesValidInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getSalesValid() const {
    return m_sales_valid;
}
void OAIWarehouseLocationUpdateDto::setSalesValid(const OAISalesValidInWarehouseLocationUpdateDto &sales_valid) {
    m_sales_valid = sales_valid;
    m_sales_valid_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_sales_valid_Set() const{
    return m_sales_valid_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_sales_valid_Valid() const{
    return m_sales_valid_isValid;
}

OAITransfersValidInWarehouseLocationUpdateDto OAIWarehouseLocationUpdateDto::getTransfersValid() const {
    return m_transfers_valid;
}
void OAIWarehouseLocationUpdateDto::setTransfersValid(const OAITransfersValidInWarehouseLocationUpdateDto &transfers_valid) {
    m_transfers_valid = transfers_valid;
    m_transfers_valid_isSet = true;
}

bool OAIWarehouseLocationUpdateDto::is_transfers_valid_Set() const{
    return m_transfers_valid_isSet;
}

bool OAIWarehouseLocationUpdateDto::is_transfers_valid_Valid() const{
    return m_transfers_valid_isValid;
}

bool OAIWarehouseLocationUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_valid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_incl_qty_avail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_costed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pick_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_item_class_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_item_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_item_valid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts_valid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_valid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_valid.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseLocationUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
