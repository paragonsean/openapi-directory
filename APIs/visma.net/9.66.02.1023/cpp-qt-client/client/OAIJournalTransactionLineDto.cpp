/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJournalTransactionLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJournalTransactionLineDto::OAIJournalTransactionLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJournalTransactionLineDto::OAIJournalTransactionLineDto() {
    this->initializeModel();
}

OAIJournalTransactionLineDto::~OAIJournalTransactionLineDto() {}

void OAIJournalTransactionLineDto::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_credit_amount_isSet = false;
    m_credit_amount_isValid = false;

    m_credit_amount_in_currency_isSet = false;
    m_credit_amount_in_currency_isValid = false;

    m_customer_supplier_isSet = false;
    m_customer_supplier_isValid = false;

    m_debit_amount_isSet = false;
    m_debit_amount_isValid = false;

    m_debit_amount_in_currency_isSet = false;
    m_debit_amount_in_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_task_isSet = false;
    m_project_task_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_transaction_description_isSet = false;
    m_transaction_description_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;

    m_vat_code_isSet = false;
    m_vat_code_isValid = false;
}

void OAIJournalTransactionLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJournalTransactionLineDto::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_credit_amount_isValid = ::OpenAPI::fromJsonValue(m_credit_amount, json[QString("creditAmount")]);
    m_credit_amount_isSet = !json[QString("creditAmount")].isNull() && m_credit_amount_isValid;

    m_credit_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_credit_amount_in_currency, json[QString("creditAmountInCurrency")]);
    m_credit_amount_in_currency_isSet = !json[QString("creditAmountInCurrency")].isNull() && m_credit_amount_in_currency_isValid;

    m_customer_supplier_isValid = ::OpenAPI::fromJsonValue(m_customer_supplier, json[QString("customerSupplier")]);
    m_customer_supplier_isSet = !json[QString("customerSupplier")].isNull() && m_customer_supplier_isValid;

    m_debit_amount_isValid = ::OpenAPI::fromJsonValue(m_debit_amount, json[QString("debitAmount")]);
    m_debit_amount_isSet = !json[QString("debitAmount")].isNull() && m_debit_amount_isValid;

    m_debit_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_debit_amount_in_currency, json[QString("debitAmountInCurrency")]);
    m_debit_amount_in_currency_isSet = !json[QString("debitAmountInCurrency")].isNull() && m_debit_amount_in_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_task_isValid = ::OpenAPI::fromJsonValue(m_project_task, json[QString("projectTask")]);
    m_project_task_isSet = !json[QString("projectTask")].isNull() && m_project_task_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_transaction_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_description, json[QString("transactionDescription")]);
    m_transaction_description_isSet = !json[QString("transactionDescription")].isNull() && m_transaction_description_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;

    m_vat_code_isValid = ::OpenAPI::fromJsonValue(m_vat_code, json[QString("vatCode")]);
    m_vat_code_isSet = !json[QString("vatCode")].isNull() && m_vat_code_isValid;
}

QString OAIJournalTransactionLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJournalTransactionLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_credit_amount_isSet) {
        obj.insert(QString("creditAmount"), ::OpenAPI::toJsonValue(m_credit_amount));
    }
    if (m_credit_amount_in_currency_isSet) {
        obj.insert(QString("creditAmountInCurrency"), ::OpenAPI::toJsonValue(m_credit_amount_in_currency));
    }
    if (m_customer_supplier_isSet) {
        obj.insert(QString("customerSupplier"), ::OpenAPI::toJsonValue(m_customer_supplier));
    }
    if (m_debit_amount_isSet) {
        obj.insert(QString("debitAmount"), ::OpenAPI::toJsonValue(m_debit_amount));
    }
    if (m_debit_amount_in_currency_isSet) {
        obj.insert(QString("debitAmountInCurrency"), ::OpenAPI::toJsonValue(m_debit_amount_in_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_inventory_number_isSet) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_module_isSet) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_task.isSet()) {
        obj.insert(QString("projectTask"), ::OpenAPI::toJsonValue(m_project_task));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_subaccount.isSet()) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_transaction_description_isSet) {
        obj.insert(QString("transactionDescription"), ::OpenAPI::toJsonValue(m_transaction_description));
    }
    if (m_transaction_type_isSet) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_vat.isSet()) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    if (m_vat_code.isSet()) {
        obj.insert(QString("vatCode"), ::OpenAPI::toJsonValue(m_vat_code));
    }
    return obj;
}

QString OAIJournalTransactionLineDto::getAccountNumber() const {
    return m_account_number;
}
void OAIJournalTransactionLineDto::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIJournalTransactionLineDto::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIJournalTransactionLineDto::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QList<OAIAttachmentDto> OAIJournalTransactionLineDto::getAttachments() const {
    return m_attachments;
}
void OAIJournalTransactionLineDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIJournalTransactionLineDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIJournalTransactionLineDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIJournalTransactionLineDto::getBranch() const {
    return m_branch;
}
void OAIJournalTransactionLineDto::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIJournalTransactionLineDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIJournalTransactionLineDto::is_branch_Valid() const{
    return m_branch_isValid;
}

double OAIJournalTransactionLineDto::getCreditAmount() const {
    return m_credit_amount;
}
void OAIJournalTransactionLineDto::setCreditAmount(const double &credit_amount) {
    m_credit_amount = credit_amount;
    m_credit_amount_isSet = true;
}

bool OAIJournalTransactionLineDto::is_credit_amount_Set() const{
    return m_credit_amount_isSet;
}

bool OAIJournalTransactionLineDto::is_credit_amount_Valid() const{
    return m_credit_amount_isValid;
}

double OAIJournalTransactionLineDto::getCreditAmountInCurrency() const {
    return m_credit_amount_in_currency;
}
void OAIJournalTransactionLineDto::setCreditAmountInCurrency(const double &credit_amount_in_currency) {
    m_credit_amount_in_currency = credit_amount_in_currency;
    m_credit_amount_in_currency_isSet = true;
}

bool OAIJournalTransactionLineDto::is_credit_amount_in_currency_Set() const{
    return m_credit_amount_in_currency_isSet;
}

bool OAIJournalTransactionLineDto::is_credit_amount_in_currency_Valid() const{
    return m_credit_amount_in_currency_isValid;
}

QString OAIJournalTransactionLineDto::getCustomerSupplier() const {
    return m_customer_supplier;
}
void OAIJournalTransactionLineDto::setCustomerSupplier(const QString &customer_supplier) {
    m_customer_supplier = customer_supplier;
    m_customer_supplier_isSet = true;
}

bool OAIJournalTransactionLineDto::is_customer_supplier_Set() const{
    return m_customer_supplier_isSet;
}

bool OAIJournalTransactionLineDto::is_customer_supplier_Valid() const{
    return m_customer_supplier_isValid;
}

double OAIJournalTransactionLineDto::getDebitAmount() const {
    return m_debit_amount;
}
void OAIJournalTransactionLineDto::setDebitAmount(const double &debit_amount) {
    m_debit_amount = debit_amount;
    m_debit_amount_isSet = true;
}

bool OAIJournalTransactionLineDto::is_debit_amount_Set() const{
    return m_debit_amount_isSet;
}

bool OAIJournalTransactionLineDto::is_debit_amount_Valid() const{
    return m_debit_amount_isValid;
}

double OAIJournalTransactionLineDto::getDebitAmountInCurrency() const {
    return m_debit_amount_in_currency;
}
void OAIJournalTransactionLineDto::setDebitAmountInCurrency(const double &debit_amount_in_currency) {
    m_debit_amount_in_currency = debit_amount_in_currency;
    m_debit_amount_in_currency_isSet = true;
}

bool OAIJournalTransactionLineDto::is_debit_amount_in_currency_Set() const{
    return m_debit_amount_in_currency_isSet;
}

bool OAIJournalTransactionLineDto::is_debit_amount_in_currency_Valid() const{
    return m_debit_amount_in_currency_isValid;
}

QString OAIJournalTransactionLineDto::getDescription() const {
    return m_description;
}
void OAIJournalTransactionLineDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJournalTransactionLineDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJournalTransactionLineDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIJournalTransactionLineDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAIJournalTransactionLineDto::setInventoryNumber(const QString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAIJournalTransactionLineDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAIJournalTransactionLineDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

qint32 OAIJournalTransactionLineDto::getLineNumber() const {
    return m_line_number;
}
void OAIJournalTransactionLineDto::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIJournalTransactionLineDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIJournalTransactionLineDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAIJournalTransactionLineDto::getModule() const {
    return m_module;
}
void OAIJournalTransactionLineDto::setModule(const QString &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIJournalTransactionLineDto::is_module_Set() const{
    return m_module_isSet;
}

bool OAIJournalTransactionLineDto::is_module_Valid() const{
    return m_module_isValid;
}

QString OAIJournalTransactionLineDto::getNote() const {
    return m_note;
}
void OAIJournalTransactionLineDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIJournalTransactionLineDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIJournalTransactionLineDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIProjectInJournalTransactionLineDto OAIJournalTransactionLineDto::getProject() const {
    return m_project;
}
void OAIJournalTransactionLineDto::setProject(const OAIProjectInJournalTransactionLineDto &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIJournalTransactionLineDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAIJournalTransactionLineDto::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectTaskInJournalTransactionLineDto OAIJournalTransactionLineDto::getProjectTask() const {
    return m_project_task;
}
void OAIJournalTransactionLineDto::setProjectTask(const OAIProjectTaskInJournalTransactionLineDto &project_task) {
    m_project_task = project_task;
    m_project_task_isSet = true;
}

bool OAIJournalTransactionLineDto::is_project_task_Set() const{
    return m_project_task_isSet;
}

bool OAIJournalTransactionLineDto::is_project_task_Valid() const{
    return m_project_task_isValid;
}

double OAIJournalTransactionLineDto::getQuantity() const {
    return m_quantity;
}
void OAIJournalTransactionLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIJournalTransactionLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIJournalTransactionLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIJournalTransactionLineDto::getReferenceNumber() const {
    return m_reference_number;
}
void OAIJournalTransactionLineDto::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAIJournalTransactionLineDto::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAIJournalTransactionLineDto::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

OAISubaccountInJournalTransactionLineDto OAIJournalTransactionLineDto::getSubaccount() const {
    return m_subaccount;
}
void OAIJournalTransactionLineDto::setSubaccount(const OAISubaccountInJournalTransactionLineDto &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAIJournalTransactionLineDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAIJournalTransactionLineDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

QString OAIJournalTransactionLineDto::getTransactionDescription() const {
    return m_transaction_description;
}
void OAIJournalTransactionLineDto::setTransactionDescription(const QString &transaction_description) {
    m_transaction_description = transaction_description;
    m_transaction_description_isSet = true;
}

bool OAIJournalTransactionLineDto::is_transaction_description_Set() const{
    return m_transaction_description_isSet;
}

bool OAIJournalTransactionLineDto::is_transaction_description_Valid() const{
    return m_transaction_description_isValid;
}

QString OAIJournalTransactionLineDto::getTransactionType() const {
    return m_transaction_type;
}
void OAIJournalTransactionLineDto::setTransactionType(const QString &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAIJournalTransactionLineDto::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAIJournalTransactionLineDto::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

QString OAIJournalTransactionLineDto::getUom() const {
    return m_uom;
}
void OAIJournalTransactionLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIJournalTransactionLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIJournalTransactionLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIVatInJournalTransactionLineDto OAIJournalTransactionLineDto::getVat() const {
    return m_vat;
}
void OAIJournalTransactionLineDto::setVat(const OAIVatInJournalTransactionLineDto &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIJournalTransactionLineDto::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIJournalTransactionLineDto::is_vat_Valid() const{
    return m_vat_isValid;
}

OAIVatCodeInJournalTransactionLineDto OAIJournalTransactionLineDto::getVatCode() const {
    return m_vat_code;
}
void OAIJournalTransactionLineDto::setVatCode(const OAIVatCodeInJournalTransactionLineDto &vat_code) {
    m_vat_code = vat_code;
    m_vat_code_isSet = true;
}

bool OAIJournalTransactionLineDto::is_vat_code_Set() const{
    return m_vat_code_isSet;
}

bool OAIJournalTransactionLineDto::is_vat_code_Valid() const{
    return m_vat_code_isValid;
}

bool OAIJournalTransactionLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_amount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_supplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_amount_in_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJournalTransactionLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
