/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaseAndRentInfoDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaseAndRentInfoDto::OAILeaseAndRentInfoDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaseAndRentInfoDto::OAILeaseAndRentInfoDto() {
    this->initializeModel();
}

OAILeaseAndRentInfoDto::~OAILeaseAndRentInfoDto() {}

void OAILeaseAndRentInfoDto::initializeModel() {

    m_lease_number_isSet = false;
    m_lease_number_isValid = false;

    m_lease_rent_term_isSet = false;
    m_lease_rent_term_isValid = false;

    m_lessor_id_isSet = false;
    m_lessor_id_isValid = false;

    m_lessor_name_isSet = false;
    m_lessor_name_isValid = false;

    m_manufacturing_year_isSet = false;
    m_manufacturing_year_isValid = false;

    m_rent_amount_isSet = false;
    m_rent_amount_isValid = false;

    m_retail_cost_isSet = false;
    m_retail_cost_isValid = false;
}

void OAILeaseAndRentInfoDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaseAndRentInfoDto::fromJsonObject(QJsonObject json) {

    m_lease_number_isValid = ::OpenAPI::fromJsonValue(m_lease_number, json[QString("leaseNumber")]);
    m_lease_number_isSet = !json[QString("leaseNumber")].isNull() && m_lease_number_isValid;

    m_lease_rent_term_isValid = ::OpenAPI::fromJsonValue(m_lease_rent_term, json[QString("leaseRentTerm")]);
    m_lease_rent_term_isSet = !json[QString("leaseRentTerm")].isNull() && m_lease_rent_term_isValid;

    m_lessor_id_isValid = ::OpenAPI::fromJsonValue(m_lessor_id, json[QString("lessorID")]);
    m_lessor_id_isSet = !json[QString("lessorID")].isNull() && m_lessor_id_isValid;

    m_lessor_name_isValid = ::OpenAPI::fromJsonValue(m_lessor_name, json[QString("lessorName")]);
    m_lessor_name_isSet = !json[QString("lessorName")].isNull() && m_lessor_name_isValid;

    m_manufacturing_year_isValid = ::OpenAPI::fromJsonValue(m_manufacturing_year, json[QString("manufacturingYear")]);
    m_manufacturing_year_isSet = !json[QString("manufacturingYear")].isNull() && m_manufacturing_year_isValid;

    m_rent_amount_isValid = ::OpenAPI::fromJsonValue(m_rent_amount, json[QString("rentAmount")]);
    m_rent_amount_isSet = !json[QString("rentAmount")].isNull() && m_rent_amount_isValid;

    m_retail_cost_isValid = ::OpenAPI::fromJsonValue(m_retail_cost, json[QString("retailCost")]);
    m_retail_cost_isSet = !json[QString("retailCost")].isNull() && m_retail_cost_isValid;
}

QString OAILeaseAndRentInfoDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaseAndRentInfoDto::asJsonObject() const {
    QJsonObject obj;
    if (m_lease_number_isSet) {
        obj.insert(QString("leaseNumber"), ::OpenAPI::toJsonValue(m_lease_number));
    }
    if (m_lease_rent_term_isSet) {
        obj.insert(QString("leaseRentTerm"), ::OpenAPI::toJsonValue(m_lease_rent_term));
    }
    if (m_lessor_id_isSet) {
        obj.insert(QString("lessorID"), ::OpenAPI::toJsonValue(m_lessor_id));
    }
    if (m_lessor_name_isSet) {
        obj.insert(QString("lessorName"), ::OpenAPI::toJsonValue(m_lessor_name));
    }
    if (m_manufacturing_year_isSet) {
        obj.insert(QString("manufacturingYear"), ::OpenAPI::toJsonValue(m_manufacturing_year));
    }
    if (m_rent_amount_isSet) {
        obj.insert(QString("rentAmount"), ::OpenAPI::toJsonValue(m_rent_amount));
    }
    if (m_retail_cost_isSet) {
        obj.insert(QString("retailCost"), ::OpenAPI::toJsonValue(m_retail_cost));
    }
    return obj;
}

QString OAILeaseAndRentInfoDto::getLeaseNumber() const {
    return m_lease_number;
}
void OAILeaseAndRentInfoDto::setLeaseNumber(const QString &lease_number) {
    m_lease_number = lease_number;
    m_lease_number_isSet = true;
}

bool OAILeaseAndRentInfoDto::is_lease_number_Set() const{
    return m_lease_number_isSet;
}

bool OAILeaseAndRentInfoDto::is_lease_number_Valid() const{
    return m_lease_number_isValid;
}

qint32 OAILeaseAndRentInfoDto::getLeaseRentTerm() const {
    return m_lease_rent_term;
}
void OAILeaseAndRentInfoDto::setLeaseRentTerm(const qint32 &lease_rent_term) {
    m_lease_rent_term = lease_rent_term;
    m_lease_rent_term_isSet = true;
}

bool OAILeaseAndRentInfoDto::is_lease_rent_term_Set() const{
    return m_lease_rent_term_isSet;
}

bool OAILeaseAndRentInfoDto::is_lease_rent_term_Valid() const{
    return m_lease_rent_term_isValid;
}

QString OAILeaseAndRentInfoDto::getLessorId() const {
    return m_lessor_id;
}
void OAILeaseAndRentInfoDto::setLessorId(const QString &lessor_id) {
    m_lessor_id = lessor_id;
    m_lessor_id_isSet = true;
}

bool OAILeaseAndRentInfoDto::is_lessor_id_Set() const{
    return m_lessor_id_isSet;
}

bool OAILeaseAndRentInfoDto::is_lessor_id_Valid() const{
    return m_lessor_id_isValid;
}

QString OAILeaseAndRentInfoDto::getLessorName() const {
    return m_lessor_name;
}
void OAILeaseAndRentInfoDto::setLessorName(const QString &lessor_name) {
    m_lessor_name = lessor_name;
    m_lessor_name_isSet = true;
}

bool OAILeaseAndRentInfoDto::is_lessor_name_Set() const{
    return m_lessor_name_isSet;
}

bool OAILeaseAndRentInfoDto::is_lessor_name_Valid() const{
    return m_lessor_name_isValid;
}

QString OAILeaseAndRentInfoDto::getManufacturingYear() const {
    return m_manufacturing_year;
}
void OAILeaseAndRentInfoDto::setManufacturingYear(const QString &manufacturing_year) {
    m_manufacturing_year = manufacturing_year;
    m_manufacturing_year_isSet = true;
}

bool OAILeaseAndRentInfoDto::is_manufacturing_year_Set() const{
    return m_manufacturing_year_isSet;
}

bool OAILeaseAndRentInfoDto::is_manufacturing_year_Valid() const{
    return m_manufacturing_year_isValid;
}

double OAILeaseAndRentInfoDto::getRentAmount() const {
    return m_rent_amount;
}
void OAILeaseAndRentInfoDto::setRentAmount(const double &rent_amount) {
    m_rent_amount = rent_amount;
    m_rent_amount_isSet = true;
}

bool OAILeaseAndRentInfoDto::is_rent_amount_Set() const{
    return m_rent_amount_isSet;
}

bool OAILeaseAndRentInfoDto::is_rent_amount_Valid() const{
    return m_rent_amount_isValid;
}

double OAILeaseAndRentInfoDto::getRetailCost() const {
    return m_retail_cost;
}
void OAILeaseAndRentInfoDto::setRetailCost(const double &retail_cost) {
    m_retail_cost = retail_cost;
    m_retail_cost_isSet = true;
}

bool OAILeaseAndRentInfoDto::is_retail_cost_Set() const{
    return m_retail_cost_isSet;
}

bool OAILeaseAndRentInfoDto::is_retail_cost_Valid() const{
    return m_retail_cost_isValid;
}

bool OAILeaseAndRentInfoDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lease_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_rent_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lessor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lessor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturing_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retail_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaseAndRentInfoDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
