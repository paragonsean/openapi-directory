/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerQueryParameters::OAICustomerQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerQueryParameters::OAICustomerQueryParameters() {
    this->initializeModel();
}

OAICustomerQueryParameters::~OAICustomerQueryParameters() {}

void OAICustomerQueryParameters::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_corporate_id_isSet = false;
    m_corporate_id_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_created_date_time_condition_isSet = false;
    m_created_date_time_condition_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expand_account_information_isSet = false;
    m_expand_account_information_isValid = false;

    m_expand_direct_debit_isSet = false;
    m_expand_direct_debit_isValid = false;

    m_expand_payment_methods_isSet = false;
    m_expand_payment_methods_isValid = false;

    m_greater_than_value_isSet = false;
    m_greater_than_value_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vat_registration_id_isSet = false;
    m_vat_registration_id_isValid = false;
}

void OAICustomerQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerQueryParameters::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_corporate_id_isValid = ::OpenAPI::fromJsonValue(m_corporate_id, json[QString("corporateId")]);
    m_corporate_id_isSet = !json[QString("corporateId")].isNull() && m_corporate_id_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_created_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_created_date_time_condition, json[QString("createdDateTimeCondition")]);
    m_created_date_time_condition_isSet = !json[QString("createdDateTimeCondition")].isNull() && m_created_date_time_condition_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expand_account_information_isValid = ::OpenAPI::fromJsonValue(m_expand_account_information, json[QString("expandAccountInformation")]);
    m_expand_account_information_isSet = !json[QString("expandAccountInformation")].isNull() && m_expand_account_information_isValid;

    m_expand_direct_debit_isValid = ::OpenAPI::fromJsonValue(m_expand_direct_debit, json[QString("expandDirectDebit")]);
    m_expand_direct_debit_isSet = !json[QString("expandDirectDebit")].isNull() && m_expand_direct_debit_isValid;

    m_expand_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_expand_payment_methods, json[QString("expandPaymentMethods")]);
    m_expand_payment_methods_isSet = !json[QString("expandPaymentMethods")].isNull() && m_expand_payment_methods_isValid;

    m_greater_than_value_isValid = ::OpenAPI::fromJsonValue(m_greater_than_value, json[QString("greaterThanValue")]);
    m_greater_than_value_isSet = !json[QString("greaterThanValue")].isNull() && m_greater_than_value_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vat_registration_id_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_id, json[QString("vatRegistrationId")]);
    m_vat_registration_id_isSet = !json[QString("vatRegistrationId")].isNull() && m_vat_registration_id_isValid;
}

QString OAICustomerQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_corporate_id_isSet) {
        obj.insert(QString("corporateId"), ::OpenAPI::toJsonValue(m_corporate_id));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_created_date_time_condition_isSet) {
        obj.insert(QString("createdDateTimeCondition"), ::OpenAPI::toJsonValue(m_created_date_time_condition));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expand_account_information_isSet) {
        obj.insert(QString("expandAccountInformation"), ::OpenAPI::toJsonValue(m_expand_account_information));
    }
    if (m_expand_direct_debit_isSet) {
        obj.insert(QString("expandDirectDebit"), ::OpenAPI::toJsonValue(m_expand_direct_debit));
    }
    if (m_expand_payment_methods_isSet) {
        obj.insert(QString("expandPaymentMethods"), ::OpenAPI::toJsonValue(m_expand_payment_methods));
    }
    if (m_greater_than_value_isSet) {
        obj.insert(QString("greaterThanValue"), ::OpenAPI::toJsonValue(m_greater_than_value));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vat_registration_id_isSet) {
        obj.insert(QString("vatRegistrationId"), ::OpenAPI::toJsonValue(m_vat_registration_id));
    }
    return obj;
}

QString OAICustomerQueryParameters::getAttributes() const {
    return m_attributes;
}
void OAICustomerQueryParameters::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICustomerQueryParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICustomerQueryParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAICustomerQueryParameters::getCorporateId() const {
    return m_corporate_id;
}
void OAICustomerQueryParameters::setCorporateId(const QString &corporate_id) {
    m_corporate_id = corporate_id;
    m_corporate_id_isSet = true;
}

bool OAICustomerQueryParameters::is_corporate_id_Set() const{
    return m_corporate_id_isSet;
}

bool OAICustomerQueryParameters::is_corporate_id_Valid() const{
    return m_corporate_id_isValid;
}

QString OAICustomerQueryParameters::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAICustomerQueryParameters::setCreatedDateTime(const QString &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAICustomerQueryParameters::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAICustomerQueryParameters::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAICustomerQueryParameters::getCreatedDateTimeCondition() const {
    return m_created_date_time_condition;
}
void OAICustomerQueryParameters::setCreatedDateTimeCondition(const QString &created_date_time_condition) {
    m_created_date_time_condition = created_date_time_condition;
    m_created_date_time_condition_isSet = true;
}

bool OAICustomerQueryParameters::is_created_date_time_condition_Set() const{
    return m_created_date_time_condition_isSet;
}

bool OAICustomerQueryParameters::is_created_date_time_condition_Valid() const{
    return m_created_date_time_condition_isValid;
}

QString OAICustomerQueryParameters::getEmail() const {
    return m_email;
}
void OAICustomerQueryParameters::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICustomerQueryParameters::is_email_Set() const{
    return m_email_isSet;
}

bool OAICustomerQueryParameters::is_email_Valid() const{
    return m_email_isValid;
}

bool OAICustomerQueryParameters::isExpandAccountInformation() const {
    return m_expand_account_information;
}
void OAICustomerQueryParameters::setExpandAccountInformation(const bool &expand_account_information) {
    m_expand_account_information = expand_account_information;
    m_expand_account_information_isSet = true;
}

bool OAICustomerQueryParameters::is_expand_account_information_Set() const{
    return m_expand_account_information_isSet;
}

bool OAICustomerQueryParameters::is_expand_account_information_Valid() const{
    return m_expand_account_information_isValid;
}

bool OAICustomerQueryParameters::isExpandDirectDebit() const {
    return m_expand_direct_debit;
}
void OAICustomerQueryParameters::setExpandDirectDebit(const bool &expand_direct_debit) {
    m_expand_direct_debit = expand_direct_debit;
    m_expand_direct_debit_isSet = true;
}

bool OAICustomerQueryParameters::is_expand_direct_debit_Set() const{
    return m_expand_direct_debit_isSet;
}

bool OAICustomerQueryParameters::is_expand_direct_debit_Valid() const{
    return m_expand_direct_debit_isValid;
}

bool OAICustomerQueryParameters::isExpandPaymentMethods() const {
    return m_expand_payment_methods;
}
void OAICustomerQueryParameters::setExpandPaymentMethods(const bool &expand_payment_methods) {
    m_expand_payment_methods = expand_payment_methods;
    m_expand_payment_methods_isSet = true;
}

bool OAICustomerQueryParameters::is_expand_payment_methods_Set() const{
    return m_expand_payment_methods_isSet;
}

bool OAICustomerQueryParameters::is_expand_payment_methods_Valid() const{
    return m_expand_payment_methods_isValid;
}

QString OAICustomerQueryParameters::getGreaterThanValue() const {
    return m_greater_than_value;
}
void OAICustomerQueryParameters::setGreaterThanValue(const QString &greater_than_value) {
    m_greater_than_value = greater_than_value;
    m_greater_than_value_isSet = true;
}

bool OAICustomerQueryParameters::is_greater_than_value_Set() const{
    return m_greater_than_value_isSet;
}

bool OAICustomerQueryParameters::is_greater_than_value_Valid() const{
    return m_greater_than_value_isValid;
}

QString OAICustomerQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAICustomerQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAICustomerQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAICustomerQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAICustomerQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAICustomerQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAICustomerQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAICustomerQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

QString OAICustomerQueryParameters::getName() const {
    return m_name;
}
void OAICustomerQueryParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomerQueryParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomerQueryParameters::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICustomerQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAICustomerQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAICustomerQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAICustomerQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAICustomerQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAICustomerQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAICustomerQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAICustomerQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAICustomerQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAICustomerQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAICustomerQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAICustomerQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAICustomerQueryParameters::getPhone() const {
    return m_phone;
}
void OAICustomerQueryParameters::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICustomerQueryParameters::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICustomerQueryParameters::is_phone_Valid() const{
    return m_phone_isValid;
}

qint32 OAICustomerQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAICustomerQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAICustomerQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAICustomerQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

QString OAICustomerQueryParameters::getStatus() const {
    return m_status;
}
void OAICustomerQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomerQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomerQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICustomerQueryParameters::getVatRegistrationId() const {
    return m_vat_registration_id;
}
void OAICustomerQueryParameters::setVatRegistrationId(const QString &vat_registration_id) {
    m_vat_registration_id = vat_registration_id;
    m_vat_registration_id_isSet = true;
}

bool OAICustomerQueryParameters::is_vat_registration_id_Set() const{
    return m_vat_registration_id_isSet;
}

bool OAICustomerQueryParameters::is_vat_registration_id_Valid() const{
    return m_vat_registration_id_isValid;
}

bool OAICustomerQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_account_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_direct_debit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_payment_methods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_greater_than_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
