/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseOrderBasicUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseOrderBasicUpdateDto::OAIPurchaseOrderBasicUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseOrderBasicUpdateDto::OAIPurchaseOrderBasicUpdateDto() {
    this->initializeModel();
}

OAIPurchaseOrderBasicUpdateDto::~OAIPurchaseOrderBasicUpdateDto() {}

void OAIPurchaseOrderBasicUpdateDto::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_change_dates_on_lines_isSet = false;
    m_change_dates_on_lines_isValid = false;

    m_control_total_isSet = false;
    m_control_total_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_gln_isSet = false;
    m_gln_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_override_number_series_isSet = false;
    m_override_number_series_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_promised_on_isSet = false;
    m_promised_on_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_supplier_ref_isSet = false;
    m_supplier_ref_isValid = false;

    m_vat_registration_id_isSet = false;
    m_vat_registration_id_isValid = false;
}

void OAIPurchaseOrderBasicUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseOrderBasicUpdateDto::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_change_dates_on_lines_isValid = ::OpenAPI::fromJsonValue(m_change_dates_on_lines, json[QString("changeDatesOnLines")]);
    m_change_dates_on_lines_isSet = !json[QString("changeDatesOnLines")].isNull() && m_change_dates_on_lines_isValid;

    m_control_total_isValid = ::OpenAPI::fromJsonValue(m_control_total, json[QString("controlTotal")]);
    m_control_total_isSet = !json[QString("controlTotal")].isNull() && m_control_total_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_gln_isValid = ::OpenAPI::fromJsonValue(m_gln, json[QString("gln")]);
    m_gln_isSet = !json[QString("gln")].isNull() && m_gln_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_override_number_series_isValid = ::OpenAPI::fromJsonValue(m_override_number_series, json[QString("overrideNumberSeries")]);
    m_override_number_series_isSet = !json[QString("overrideNumberSeries")].isNull() && m_override_number_series_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_promised_on_isValid = ::OpenAPI::fromJsonValue(m_promised_on, json[QString("promisedOn")]);
    m_promised_on_isSet = !json[QString("promisedOn")].isNull() && m_promised_on_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_supplier_ref_isValid = ::OpenAPI::fromJsonValue(m_supplier_ref, json[QString("supplierRef")]);
    m_supplier_ref_isSet = !json[QString("supplierRef")].isNull() && m_supplier_ref_isValid;

    m_vat_registration_id_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_id, json[QString("vatRegistrationId")]);
    m_vat_registration_id_isSet = !json[QString("vatRegistrationId")].isNull() && m_vat_registration_id_isValid;
}

QString OAIPurchaseOrderBasicUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseOrderBasicUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_change_dates_on_lines_isSet) {
        obj.insert(QString("changeDatesOnLines"), ::OpenAPI::toJsonValue(m_change_dates_on_lines));
    }
    if (m_control_total.isSet()) {
        obj.insert(QString("controlTotal"), ::OpenAPI::toJsonValue(m_control_total));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_exchange_rate.isSet()) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_gln.isSet()) {
        obj.insert(QString("gln"), ::OpenAPI::toJsonValue(m_gln));
    }
    if (m_hold.isSet()) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_number.isSet()) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_order_type.isSet()) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_override_number_series.isSet()) {
        obj.insert(QString("overrideNumberSeries"), ::OpenAPI::toJsonValue(m_override_number_series));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_promised_on.isSet()) {
        obj.insert(QString("promisedOn"), ::OpenAPI::toJsonValue(m_promised_on));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_supplier_ref.isSet()) {
        obj.insert(QString("supplierRef"), ::OpenAPI::toJsonValue(m_supplier_ref));
    }
    if (m_vat_registration_id.isSet()) {
        obj.insert(QString("vatRegistrationId"), ::OpenAPI::toJsonValue(m_vat_registration_id));
    }
    return obj;
}

OAIDtoValueOfString OAIPurchaseOrderBasicUpdateDto::getBranch() const {
    return m_branch;
}
void OAIPurchaseOrderBasicUpdateDto::setBranch(const OAIDtoValueOfString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

bool OAIPurchaseOrderBasicUpdateDto::isChangeDatesOnLines() const {
    return m_change_dates_on_lines;
}
void OAIPurchaseOrderBasicUpdateDto::setChangeDatesOnLines(const bool &change_dates_on_lines) {
    m_change_dates_on_lines = change_dates_on_lines;
    m_change_dates_on_lines_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_change_dates_on_lines_Set() const{
    return m_change_dates_on_lines_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_change_dates_on_lines_Valid() const{
    return m_change_dates_on_lines_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderBasicUpdateDto::getControlTotal() const {
    return m_control_total;
}
void OAIPurchaseOrderBasicUpdateDto::setControlTotal(const OAIDtoValueOfNullableOfDecimal &control_total) {
    m_control_total = control_total;
    m_control_total_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_control_total_Set() const{
    return m_control_total_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_control_total_Valid() const{
    return m_control_total_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderBasicUpdateDto::getCurrency() const {
    return m_currency;
}
void OAIPurchaseOrderBasicUpdateDto::setCurrency(const OAIDtoValueOfString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIPurchaseOrderBasicUpdateDto::getDate() const {
    return m_date;
}
void OAIPurchaseOrderBasicUpdateDto::setDate(const OAIDtoValueOfNullableOfDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_date_Valid() const{
    return m_date_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderBasicUpdateDto::getDescription() const {
    return m_description;
}
void OAIPurchaseOrderBasicUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIPurchaseOrderBasicUpdateDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIPurchaseOrderBasicUpdateDto::setExchangeRate(const OAIDtoValueOfNullableOfDecimal &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAIGlnInPurchaseOrderBasicUpdateDto OAIPurchaseOrderBasicUpdateDto::getGln() const {
    return m_gln;
}
void OAIPurchaseOrderBasicUpdateDto::setGln(const OAIGlnInPurchaseOrderBasicUpdateDto &gln) {
    m_gln = gln;
    m_gln_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_gln_Set() const{
    return m_gln_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_gln_Valid() const{
    return m_gln_isValid;
}

OAIDtoValueOfNullableOfBoolean OAIPurchaseOrderBasicUpdateDto::getHold() const {
    return m_hold;
}
void OAIPurchaseOrderBasicUpdateDto::setHold(const OAIDtoValueOfNullableOfBoolean &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QList<OAIPurchaseOrderLineUpdateDto> OAIPurchaseOrderBasicUpdateDto::getLines() const {
    return m_lines;
}
void OAIPurchaseOrderBasicUpdateDto::setLines(const QList<OAIPurchaseOrderLineUpdateDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderBasicUpdateDto::getLocation() const {
    return m_location;
}
void OAIPurchaseOrderBasicUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderBasicUpdateDto::getNote() const {
    return m_note;
}
void OAIPurchaseOrderBasicUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderBasicUpdateDto::getOrderNumber() const {
    return m_order_number;
}
void OAIPurchaseOrderBasicUpdateDto::setOrderNumber(const OAIDtoValueOfString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_order_number_Valid() const{
    return m_order_number_isValid;
}

OAIDtoValueOfNullableOfPurchaseOrderType OAIPurchaseOrderBasicUpdateDto::getOrderType() const {
    return m_order_type;
}
void OAIPurchaseOrderBasicUpdateDto::setOrderType(const OAIDtoValueOfNullableOfPurchaseOrderType &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

OAIDtoValueOfBoolean OAIPurchaseOrderBasicUpdateDto::getOverrideNumberSeries() const {
    return m_override_number_series;
}
void OAIPurchaseOrderBasicUpdateDto::setOverrideNumberSeries(const OAIDtoValueOfBoolean &override_number_series) {
    m_override_number_series = override_number_series;
    m_override_number_series_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_override_number_series_Set() const{
    return m_override_number_series_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_override_number_series_Valid() const{
    return m_override_number_series_isValid;
}

OAIDtoValueOfNullableOfGuid OAIPurchaseOrderBasicUpdateDto::getOwner() const {
    return m_owner;
}
void OAIPurchaseOrderBasicUpdateDto::setOwner(const OAIDtoValueOfNullableOfGuid &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIPurchaseOrderBasicUpdateDto::getPromisedOn() const {
    return m_promised_on;
}
void OAIPurchaseOrderBasicUpdateDto::setPromisedOn(const OAIDtoValueOfNullableOfDateTime &promised_on) {
    m_promised_on = promised_on;
    m_promised_on_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_promised_on_Set() const{
    return m_promised_on_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_promised_on_Valid() const{
    return m_promised_on_isValid;
}

OAISupplierInPurchaseOrderBasicUpdateDto OAIPurchaseOrderBasicUpdateDto::getSupplier() const {
    return m_supplier;
}
void OAIPurchaseOrderBasicUpdateDto::setSupplier(const OAISupplierInPurchaseOrderBasicUpdateDto &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_supplier_Valid() const{
    return m_supplier_isValid;
}

OAIDtoValueOfString OAIPurchaseOrderBasicUpdateDto::getSupplierRef() const {
    return m_supplier_ref;
}
void OAIPurchaseOrderBasicUpdateDto::setSupplierRef(const OAIDtoValueOfString &supplier_ref) {
    m_supplier_ref = supplier_ref;
    m_supplier_ref_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_supplier_ref_Set() const{
    return m_supplier_ref_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_supplier_ref_Valid() const{
    return m_supplier_ref_isValid;
}

OAIVatRegistrationIdInPurchaseOrderBasicUpdateDto OAIPurchaseOrderBasicUpdateDto::getVatRegistrationId() const {
    return m_vat_registration_id;
}
void OAIPurchaseOrderBasicUpdateDto::setVatRegistrationId(const OAIVatRegistrationIdInPurchaseOrderBasicUpdateDto &vat_registration_id) {
    m_vat_registration_id = vat_registration_id;
    m_vat_registration_id_isSet = true;
}

bool OAIPurchaseOrderBasicUpdateDto::is_vat_registration_id_Set() const{
    return m_vat_registration_id_isSet;
}

bool OAIPurchaseOrderBasicUpdateDto::is_vat_registration_id_Valid() const{
    return m_vat_registration_id_isValid;
}

bool OAIPurchaseOrderBasicUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_dates_on_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gln.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_number_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_promised_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseOrderBasicUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
