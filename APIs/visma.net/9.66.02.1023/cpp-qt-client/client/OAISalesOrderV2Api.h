/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesOrderV2Api_H
#define OAI_OAISalesOrderV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAICancelSalesOrderActionDto.h"
#include "OAICancelSalesOrderActionResultDto.h"
#include "OAICreatePurchaseOrderActionDto.h"
#include "OAICreateShipmentActionDto.h"
#include "OAICreateShipmentActionResultDto.h"
#include "OAIObject.h"
#include "OAIReopenSalesOrderActionDto.h"
#include "OAIReopenSalesOrderActionResultDto.h"
#include "OAISalesOrderDto.h"
#include "OAISalesOrderUpdateDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesOrderV2Api : public QObject {
    Q_OBJECT

public:
    OAISalesOrderV2Api(const int timeOut = 0);
    ~OAISalesOrderV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sale_order_number QString [required]
    * @param[in]  oai_cancel_sales_order_action_dto OAICancelSalesOrderActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderV2CancelSalesOrderBysaleOrderNumber(const QString &sale_order_number, const OAICancelSalesOrderActionDto &oai_cancel_sales_order_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void salesOrderV2CreateHeaderAttachmentByorderNumber(const QString &order_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  order_type QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderV2CreateHeaderAttachmentByorderNumberorderType(const QString &order_number, const QString &order_type, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void salesOrderV2CreateLineAttachmentByorderNumberlineNumber(const QString &order_number, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_number QString [required]
    * @param[in]  order_type QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumber(const QString &order_number, const QString &order_type, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sale_order_number QString [required]
    * @param[in]  oai_create_purchase_order_action_dto OAICreatePurchaseOrderActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumber(const QString &sale_order_number, const OAICreatePurchaseOrderActionDto &oai_create_purchase_order_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sale_order_number QString [required]
    * @param[in]  oai_create_shipment_action_dto OAICreateShipmentActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderV2CreateShipmentActionBysaleOrderNumber(const QString &sale_order_number, const OAICreateShipmentActionDto &oai_create_shipment_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  show_notes bool [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderV2GetAllOrdersV2(const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_notes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_nbr QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderV2GetByorderNbr(const QString &order_nbr, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_sales_order_update_dto OAISalesOrderUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderV2Post(const OAISalesOrderUpdateDto &oai_sales_order_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sales_order_number QString [required]
    * @param[in]  oai_reopen_sales_order_action_dto OAIReopenSalesOrderActionDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void salesOrderV2ReopenSalesOrderBysalesOrderNumber(const QString &sales_order_number, const OAIReopenSalesOrderActionDto &oai_reopen_sales_order_action_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void salesOrderV2CancelSalesOrderBysaleOrderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderV2CreateHeaderAttachmentByorderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderV2CreateHeaderAttachmentByorderNumberorderTypeCallback(OAIHttpRequestWorker *worker);
    void salesOrderV2CreateLineAttachmentByorderNumberlineNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderV2CreateShipmentActionBysaleOrderNumberCallback(OAIHttpRequestWorker *worker);
    void salesOrderV2GetAllOrdersV2Callback(OAIHttpRequestWorker *worker);
    void salesOrderV2GetByorderNbrCallback(OAIHttpRequestWorker *worker);
    void salesOrderV2PostCallback(OAIHttpRequestWorker *worker);
    void salesOrderV2ReopenSalesOrderBysalesOrderNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void salesOrderV2CancelSalesOrderBysaleOrderNumberSignal(OAICancelSalesOrderActionResultDto summary);
    void salesOrderV2CreateHeaderAttachmentByorderNumberSignal(OAIObject summary);
    void salesOrderV2CreateHeaderAttachmentByorderNumberorderTypeSignal(OAIObject summary);
    void salesOrderV2CreateLineAttachmentByorderNumberlineNumberSignal(OAIObject summary);
    void salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumberSignal(OAIObject summary);
    void salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumberSignal(OAIObject summary);
    void salesOrderV2CreateShipmentActionBysaleOrderNumberSignal(OAIBackgroundApiAcceptedDto summary);
    void salesOrderV2GetAllOrdersV2Signal(QList<OAISalesOrderDto> summary);
    void salesOrderV2GetByorderNbrSignal(OAISalesOrderDto summary);
    void salesOrderV2PostSignal(OAIObject summary);
    void salesOrderV2ReopenSalesOrderBysalesOrderNumberSignal(OAIReopenSalesOrderActionResultDto summary);


    void salesOrderV2CancelSalesOrderBysaleOrderNumberSignalFull(OAIHttpRequestWorker *worker, OAICancelSalesOrderActionResultDto summary);
    void salesOrderV2CreateHeaderAttachmentByorderNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderV2CreateHeaderAttachmentByorderNumberorderTypeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderV2CreateLineAttachmentByorderNumberlineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderV2CreateShipmentActionBysaleOrderNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void salesOrderV2GetAllOrdersV2SignalFull(OAIHttpRequestWorker *worker, QList<OAISalesOrderDto> summary);
    void salesOrderV2GetByorderNbrSignalFull(OAIHttpRequestWorker *worker, OAISalesOrderDto summary);
    void salesOrderV2PostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesOrderV2ReopenSalesOrderBysalesOrderNumberSignalFull(OAIHttpRequestWorker *worker, OAIReopenSalesOrderActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use salesOrderV2CancelSalesOrderBysaleOrderNumberSignalError() instead")
    void salesOrderV2CancelSalesOrderBysaleOrderNumberSignalE(OAICancelSalesOrderActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CancelSalesOrderBysaleOrderNumberSignalError(OAICancelSalesOrderActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateHeaderAttachmentByorderNumberSignalError() instead")
    void salesOrderV2CreateHeaderAttachmentByorderNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateHeaderAttachmentByorderNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateHeaderAttachmentByorderNumberorderTypeSignalError() instead")
    void salesOrderV2CreateHeaderAttachmentByorderNumberorderTypeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateHeaderAttachmentByorderNumberorderTypeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateLineAttachmentByorderNumberlineNumberSignalError() instead")
    void salesOrderV2CreateLineAttachmentByorderNumberlineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateLineAttachmentByorderNumberlineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalError() instead")
    void salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumberSignalError() instead")
    void salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateShipmentActionBysaleOrderNumberSignalError() instead")
    void salesOrderV2CreateShipmentActionBysaleOrderNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateShipmentActionBysaleOrderNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2GetAllOrdersV2SignalError() instead")
    void salesOrderV2GetAllOrdersV2SignalE(QList<OAISalesOrderDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2GetAllOrdersV2SignalError(QList<OAISalesOrderDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2GetByorderNbrSignalError() instead")
    void salesOrderV2GetByorderNbrSignalE(OAISalesOrderDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2GetByorderNbrSignalError(OAISalesOrderDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2PostSignalError() instead")
    void salesOrderV2PostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2PostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2ReopenSalesOrderBysalesOrderNumberSignalError() instead")
    void salesOrderV2ReopenSalesOrderBysalesOrderNumberSignalE(OAIReopenSalesOrderActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2ReopenSalesOrderBysalesOrderNumberSignalError(OAIReopenSalesOrderActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use salesOrderV2CancelSalesOrderBysaleOrderNumberSignalErrorFull() instead")
    void salesOrderV2CancelSalesOrderBysaleOrderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CancelSalesOrderBysaleOrderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateHeaderAttachmentByorderNumberSignalErrorFull() instead")
    void salesOrderV2CreateHeaderAttachmentByorderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateHeaderAttachmentByorderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateHeaderAttachmentByorderNumberorderTypeSignalErrorFull() instead")
    void salesOrderV2CreateHeaderAttachmentByorderNumberorderTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateHeaderAttachmentByorderNumberorderTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateLineAttachmentByorderNumberlineNumberSignalErrorFull() instead")
    void salesOrderV2CreateLineAttachmentByorderNumberlineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateLineAttachmentByorderNumberlineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalErrorFull() instead")
    void salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateLineAttachmentByorderNumberorderTypelineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumberSignalErrorFull() instead")
    void salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreatePurchaseOrdersActionBysaleOrderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2CreateShipmentActionBysaleOrderNumberSignalErrorFull() instead")
    void salesOrderV2CreateShipmentActionBysaleOrderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2CreateShipmentActionBysaleOrderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2GetAllOrdersV2SignalErrorFull() instead")
    void salesOrderV2GetAllOrdersV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2GetAllOrdersV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2GetByorderNbrSignalErrorFull() instead")
    void salesOrderV2GetByorderNbrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2GetByorderNbrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2PostSignalErrorFull() instead")
    void salesOrderV2PostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2PostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesOrderV2ReopenSalesOrderBysalesOrderNumberSignalErrorFull() instead")
    void salesOrderV2ReopenSalesOrderBysalesOrderNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesOrderV2ReopenSalesOrderBysalesOrderNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
