/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryAccountInformationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryAccountInformationDto::OAIInventoryAccountInformationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryAccountInformationDto::OAIInventoryAccountInformationDto() {
    this->initializeModel();
}

OAIInventoryAccountInformationDto::~OAIInventoryAccountInformationDto() {}

void OAIInventoryAccountInformationDto::initializeModel() {

    m_cogs_account_isSet = false;
    m_cogs_account_isValid = false;

    m_cogs_subaccount_isSet = false;
    m_cogs_subaccount_isValid = false;

    m_expense_account_isSet = false;
    m_expense_account_isValid = false;

    m_expense_accrual_account_isSet = false;
    m_expense_accrual_account_isValid = false;

    m_expense_eu_account_isSet = false;
    m_expense_eu_account_isValid = false;

    m_expense_import_account_isSet = false;
    m_expense_import_account_isValid = false;

    m_expense_non_taxable_account_isSet = false;
    m_expense_non_taxable_account_isValid = false;

    m_expense_subaccount_isSet = false;
    m_expense_subaccount_isValid = false;

    m_inventory_account_isSet = false;
    m_inventory_account_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_sales_eu_account_isSet = false;
    m_sales_eu_account_isValid = false;

    m_sales_export_account_isSet = false;
    m_sales_export_account_isValid = false;

    m_sales_non_taxable_account_isSet = false;
    m_sales_non_taxable_account_isValid = false;

    m_sales_subaccount_isSet = false;
    m_sales_subaccount_isValid = false;
}

void OAIInventoryAccountInformationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryAccountInformationDto::fromJsonObject(QJsonObject json) {

    m_cogs_account_isValid = ::OpenAPI::fromJsonValue(m_cogs_account, json[QString("cogsAccount")]);
    m_cogs_account_isSet = !json[QString("cogsAccount")].isNull() && m_cogs_account_isValid;

    m_cogs_subaccount_isValid = ::OpenAPI::fromJsonValue(m_cogs_subaccount, json[QString("cogsSubaccount")]);
    m_cogs_subaccount_isSet = !json[QString("cogsSubaccount")].isNull() && m_cogs_subaccount_isValid;

    m_expense_account_isValid = ::OpenAPI::fromJsonValue(m_expense_account, json[QString("expenseAccount")]);
    m_expense_account_isSet = !json[QString("expenseAccount")].isNull() && m_expense_account_isValid;

    m_expense_accrual_account_isValid = ::OpenAPI::fromJsonValue(m_expense_accrual_account, json[QString("expenseAccrualAccount")]);
    m_expense_accrual_account_isSet = !json[QString("expenseAccrualAccount")].isNull() && m_expense_accrual_account_isValid;

    m_expense_eu_account_isValid = ::OpenAPI::fromJsonValue(m_expense_eu_account, json[QString("expenseEuAccount")]);
    m_expense_eu_account_isSet = !json[QString("expenseEuAccount")].isNull() && m_expense_eu_account_isValid;

    m_expense_import_account_isValid = ::OpenAPI::fromJsonValue(m_expense_import_account, json[QString("expenseImportAccount")]);
    m_expense_import_account_isSet = !json[QString("expenseImportAccount")].isNull() && m_expense_import_account_isValid;

    m_expense_non_taxable_account_isValid = ::OpenAPI::fromJsonValue(m_expense_non_taxable_account, json[QString("expenseNonTaxableAccount")]);
    m_expense_non_taxable_account_isSet = !json[QString("expenseNonTaxableAccount")].isNull() && m_expense_non_taxable_account_isValid;

    m_expense_subaccount_isValid = ::OpenAPI::fromJsonValue(m_expense_subaccount, json[QString("expenseSubaccount")]);
    m_expense_subaccount_isSet = !json[QString("expenseSubaccount")].isNull() && m_expense_subaccount_isValid;

    m_inventory_account_isValid = ::OpenAPI::fromJsonValue(m_inventory_account, json[QString("inventoryAccount")]);
    m_inventory_account_isSet = !json[QString("inventoryAccount")].isNull() && m_inventory_account_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_sales_eu_account_isValid = ::OpenAPI::fromJsonValue(m_sales_eu_account, json[QString("salesEuAccount")]);
    m_sales_eu_account_isSet = !json[QString("salesEuAccount")].isNull() && m_sales_eu_account_isValid;

    m_sales_export_account_isValid = ::OpenAPI::fromJsonValue(m_sales_export_account, json[QString("salesExportAccount")]);
    m_sales_export_account_isSet = !json[QString("salesExportAccount")].isNull() && m_sales_export_account_isValid;

    m_sales_non_taxable_account_isValid = ::OpenAPI::fromJsonValue(m_sales_non_taxable_account, json[QString("salesNonTaxableAccount")]);
    m_sales_non_taxable_account_isSet = !json[QString("salesNonTaxableAccount")].isNull() && m_sales_non_taxable_account_isValid;

    m_sales_subaccount_isValid = ::OpenAPI::fromJsonValue(m_sales_subaccount, json[QString("salesSubaccount")]);
    m_sales_subaccount_isSet = !json[QString("salesSubaccount")].isNull() && m_sales_subaccount_isValid;
}

QString OAIInventoryAccountInformationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryAccountInformationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_cogs_account.isSet()) {
        obj.insert(QString("cogsAccount"), ::OpenAPI::toJsonValue(m_cogs_account));
    }
    if (m_cogs_subaccount.isSet()) {
        obj.insert(QString("cogsSubaccount"), ::OpenAPI::toJsonValue(m_cogs_subaccount));
    }
    if (m_expense_account.isSet()) {
        obj.insert(QString("expenseAccount"), ::OpenAPI::toJsonValue(m_expense_account));
    }
    if (m_expense_accrual_account.isSet()) {
        obj.insert(QString("expenseAccrualAccount"), ::OpenAPI::toJsonValue(m_expense_accrual_account));
    }
    if (m_expense_eu_account.isSet()) {
        obj.insert(QString("expenseEuAccount"), ::OpenAPI::toJsonValue(m_expense_eu_account));
    }
    if (m_expense_import_account.isSet()) {
        obj.insert(QString("expenseImportAccount"), ::OpenAPI::toJsonValue(m_expense_import_account));
    }
    if (m_expense_non_taxable_account.isSet()) {
        obj.insert(QString("expenseNonTaxableAccount"), ::OpenAPI::toJsonValue(m_expense_non_taxable_account));
    }
    if (m_expense_subaccount.isSet()) {
        obj.insert(QString("expenseSubaccount"), ::OpenAPI::toJsonValue(m_expense_subaccount));
    }
    if (m_inventory_account.isSet()) {
        obj.insert(QString("inventoryAccount"), ::OpenAPI::toJsonValue(m_inventory_account));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_sales_eu_account.isSet()) {
        obj.insert(QString("salesEuAccount"), ::OpenAPI::toJsonValue(m_sales_eu_account));
    }
    if (m_sales_export_account.isSet()) {
        obj.insert(QString("salesExportAccount"), ::OpenAPI::toJsonValue(m_sales_export_account));
    }
    if (m_sales_non_taxable_account.isSet()) {
        obj.insert(QString("salesNonTaxableAccount"), ::OpenAPI::toJsonValue(m_sales_non_taxable_account));
    }
    if (m_sales_subaccount.isSet()) {
        obj.insert(QString("salesSubaccount"), ::OpenAPI::toJsonValue(m_sales_subaccount));
    }
    return obj;
}

OAICogsAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getCogsAccount() const {
    return m_cogs_account;
}
void OAIInventoryAccountInformationDto::setCogsAccount(const OAICogsAccountInInventoryAccountInformationDto &cogs_account) {
    m_cogs_account = cogs_account;
    m_cogs_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_cogs_account_Set() const{
    return m_cogs_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_cogs_account_Valid() const{
    return m_cogs_account_isValid;
}

OAICogsSubaccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getCogsSubaccount() const {
    return m_cogs_subaccount;
}
void OAIInventoryAccountInformationDto::setCogsSubaccount(const OAICogsSubaccountInInventoryAccountInformationDto &cogs_subaccount) {
    m_cogs_subaccount = cogs_subaccount;
    m_cogs_subaccount_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_cogs_subaccount_Set() const{
    return m_cogs_subaccount_isSet;
}

bool OAIInventoryAccountInformationDto::is_cogs_subaccount_Valid() const{
    return m_cogs_subaccount_isValid;
}

OAIExpenseAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getExpenseAccount() const {
    return m_expense_account;
}
void OAIInventoryAccountInformationDto::setExpenseAccount(const OAIExpenseAccountInInventoryAccountInformationDto &expense_account) {
    m_expense_account = expense_account;
    m_expense_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_expense_account_Set() const{
    return m_expense_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_expense_account_Valid() const{
    return m_expense_account_isValid;
}

OAIExpenseAccrualAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getExpenseAccrualAccount() const {
    return m_expense_accrual_account;
}
void OAIInventoryAccountInformationDto::setExpenseAccrualAccount(const OAIExpenseAccrualAccountInInventoryAccountInformationDto &expense_accrual_account) {
    m_expense_accrual_account = expense_accrual_account;
    m_expense_accrual_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_expense_accrual_account_Set() const{
    return m_expense_accrual_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_expense_accrual_account_Valid() const{
    return m_expense_accrual_account_isValid;
}

OAIExpenseEuAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getExpenseEuAccount() const {
    return m_expense_eu_account;
}
void OAIInventoryAccountInformationDto::setExpenseEuAccount(const OAIExpenseEuAccountInInventoryAccountInformationDto &expense_eu_account) {
    m_expense_eu_account = expense_eu_account;
    m_expense_eu_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_expense_eu_account_Set() const{
    return m_expense_eu_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_expense_eu_account_Valid() const{
    return m_expense_eu_account_isValid;
}

OAIExpenseImportAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getExpenseImportAccount() const {
    return m_expense_import_account;
}
void OAIInventoryAccountInformationDto::setExpenseImportAccount(const OAIExpenseImportAccountInInventoryAccountInformationDto &expense_import_account) {
    m_expense_import_account = expense_import_account;
    m_expense_import_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_expense_import_account_Set() const{
    return m_expense_import_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_expense_import_account_Valid() const{
    return m_expense_import_account_isValid;
}

OAIExpenseNonTaxableAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getExpenseNonTaxableAccount() const {
    return m_expense_non_taxable_account;
}
void OAIInventoryAccountInformationDto::setExpenseNonTaxableAccount(const OAIExpenseNonTaxableAccountInInventoryAccountInformationDto &expense_non_taxable_account) {
    m_expense_non_taxable_account = expense_non_taxable_account;
    m_expense_non_taxable_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_expense_non_taxable_account_Set() const{
    return m_expense_non_taxable_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_expense_non_taxable_account_Valid() const{
    return m_expense_non_taxable_account_isValid;
}

OAIExpenseSubaccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getExpenseSubaccount() const {
    return m_expense_subaccount;
}
void OAIInventoryAccountInformationDto::setExpenseSubaccount(const OAIExpenseSubaccountInInventoryAccountInformationDto &expense_subaccount) {
    m_expense_subaccount = expense_subaccount;
    m_expense_subaccount_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_expense_subaccount_Set() const{
    return m_expense_subaccount_isSet;
}

bool OAIInventoryAccountInformationDto::is_expense_subaccount_Valid() const{
    return m_expense_subaccount_isValid;
}

OAIInventoryAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getInventoryAccount() const {
    return m_inventory_account;
}
void OAIInventoryAccountInformationDto::setInventoryAccount(const OAIInventoryAccountInInventoryAccountInformationDto &inventory_account) {
    m_inventory_account = inventory_account;
    m_inventory_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_inventory_account_Set() const{
    return m_inventory_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_inventory_account_Valid() const{
    return m_inventory_account_isValid;
}

OAISalesAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getSalesAccount() const {
    return m_sales_account;
}
void OAIInventoryAccountInformationDto::setSalesAccount(const OAISalesAccountInInventoryAccountInformationDto &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAISalesEuAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getSalesEuAccount() const {
    return m_sales_eu_account;
}
void OAIInventoryAccountInformationDto::setSalesEuAccount(const OAISalesEuAccountInInventoryAccountInformationDto &sales_eu_account) {
    m_sales_eu_account = sales_eu_account;
    m_sales_eu_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_sales_eu_account_Set() const{
    return m_sales_eu_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_sales_eu_account_Valid() const{
    return m_sales_eu_account_isValid;
}

OAISalesExportAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getSalesExportAccount() const {
    return m_sales_export_account;
}
void OAIInventoryAccountInformationDto::setSalesExportAccount(const OAISalesExportAccountInInventoryAccountInformationDto &sales_export_account) {
    m_sales_export_account = sales_export_account;
    m_sales_export_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_sales_export_account_Set() const{
    return m_sales_export_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_sales_export_account_Valid() const{
    return m_sales_export_account_isValid;
}

OAISalesNonTaxableAccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getSalesNonTaxableAccount() const {
    return m_sales_non_taxable_account;
}
void OAIInventoryAccountInformationDto::setSalesNonTaxableAccount(const OAISalesNonTaxableAccountInInventoryAccountInformationDto &sales_non_taxable_account) {
    m_sales_non_taxable_account = sales_non_taxable_account;
    m_sales_non_taxable_account_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_sales_non_taxable_account_Set() const{
    return m_sales_non_taxable_account_isSet;
}

bool OAIInventoryAccountInformationDto::is_sales_non_taxable_account_Valid() const{
    return m_sales_non_taxable_account_isValid;
}

OAISalesSubaccountInInventoryAccountInformationDto OAIInventoryAccountInformationDto::getSalesSubaccount() const {
    return m_sales_subaccount;
}
void OAIInventoryAccountInformationDto::setSalesSubaccount(const OAISalesSubaccountInInventoryAccountInformationDto &sales_subaccount) {
    m_sales_subaccount = sales_subaccount;
    m_sales_subaccount_isSet = true;
}

bool OAIInventoryAccountInformationDto::is_sales_subaccount_Set() const{
    return m_sales_subaccount_isSet;
}

bool OAIInventoryAccountInformationDto::is_sales_subaccount_Valid() const{
    return m_sales_subaccount_isValid;
}

bool OAIInventoryAccountInformationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cogs_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cogs_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_accrual_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_eu_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_import_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_non_taxable_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_eu_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_export_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_non_taxable_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_subaccount.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryAccountInformationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
