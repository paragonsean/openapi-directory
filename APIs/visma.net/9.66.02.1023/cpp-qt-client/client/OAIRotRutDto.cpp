/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRotRutDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRotRutDto::OAIRotRutDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRotRutDto::OAIRotRutDto() {
    this->initializeModel();
}

OAIRotRutDto::~OAIRotRutDto() {}

void OAIRotRutDto::initializeModel() {

    m_appartment_isSet = false;
    m_appartment_isValid = false;

    m_distributed_amount_isSet = false;
    m_distributed_amount_isValid = false;

    m_distributed_automaticaly_isSet = false;
    m_distributed_automaticaly_isValid = false;

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_doc_type_isSet = false;
    m_doc_type_isValid = false;

    m_estate_isSet = false;
    m_estate_isValid = false;

    m_material_cost_isSet = false;
    m_material_cost_isValid = false;

    m_organization_nbr_isSet = false;
    m_organization_nbr_isValid = false;

    m_other_cost_isSet = false;
    m_other_cost_isValid = false;

    m_ref_nbr_isSet = false;
    m_ref_nbr_isValid = false;

    m_total_deductable_amount_isSet = false;
    m_total_deductable_amount_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_work_price_isSet = false;
    m_work_price_isValid = false;
}

void OAIRotRutDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRotRutDto::fromJsonObject(QJsonObject json) {

    m_appartment_isValid = ::OpenAPI::fromJsonValue(m_appartment, json[QString("appartment")]);
    m_appartment_isSet = !json[QString("appartment")].isNull() && m_appartment_isValid;

    m_distributed_amount_isValid = ::OpenAPI::fromJsonValue(m_distributed_amount, json[QString("distributedAmount")]);
    m_distributed_amount_isSet = !json[QString("distributedAmount")].isNull() && m_distributed_amount_isValid;

    m_distributed_automaticaly_isValid = ::OpenAPI::fromJsonValue(m_distributed_automaticaly, json[QString("distributedAutomaticaly")]);
    m_distributed_automaticaly_isSet = !json[QString("distributedAutomaticaly")].isNull() && m_distributed_automaticaly_isValid;

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("distribution")]);
    m_distribution_isSet = !json[QString("distribution")].isNull() && m_distribution_isValid;

    m_doc_type_isValid = ::OpenAPI::fromJsonValue(m_doc_type, json[QString("docType")]);
    m_doc_type_isSet = !json[QString("docType")].isNull() && m_doc_type_isValid;

    m_estate_isValid = ::OpenAPI::fromJsonValue(m_estate, json[QString("estate")]);
    m_estate_isSet = !json[QString("estate")].isNull() && m_estate_isValid;

    m_material_cost_isValid = ::OpenAPI::fromJsonValue(m_material_cost, json[QString("materialCost")]);
    m_material_cost_isSet = !json[QString("materialCost")].isNull() && m_material_cost_isValid;

    m_organization_nbr_isValid = ::OpenAPI::fromJsonValue(m_organization_nbr, json[QString("organizationNbr")]);
    m_organization_nbr_isSet = !json[QString("organizationNbr")].isNull() && m_organization_nbr_isValid;

    m_other_cost_isValid = ::OpenAPI::fromJsonValue(m_other_cost, json[QString("otherCost")]);
    m_other_cost_isSet = !json[QString("otherCost")].isNull() && m_other_cost_isValid;

    m_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ref_nbr, json[QString("refNbr")]);
    m_ref_nbr_isSet = !json[QString("refNbr")].isNull() && m_ref_nbr_isValid;

    m_total_deductable_amount_isValid = ::OpenAPI::fromJsonValue(m_total_deductable_amount, json[QString("totalDeductableAmount")]);
    m_total_deductable_amount_isSet = !json[QString("totalDeductableAmount")].isNull() && m_total_deductable_amount_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_work_price_isValid = ::OpenAPI::fromJsonValue(m_work_price, json[QString("workPrice")]);
    m_work_price_isSet = !json[QString("workPrice")].isNull() && m_work_price_isValid;
}

QString OAIRotRutDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRotRutDto::asJsonObject() const {
    QJsonObject obj;
    if (m_appartment_isSet) {
        obj.insert(QString("appartment"), ::OpenAPI::toJsonValue(m_appartment));
    }
    if (m_distributed_amount_isSet) {
        obj.insert(QString("distributedAmount"), ::OpenAPI::toJsonValue(m_distributed_amount));
    }
    if (m_distributed_automaticaly_isSet) {
        obj.insert(QString("distributedAutomaticaly"), ::OpenAPI::toJsonValue(m_distributed_automaticaly));
    }
    if (m_distribution.size() > 0) {
        obj.insert(QString("distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_doc_type_isSet) {
        obj.insert(QString("docType"), ::OpenAPI::toJsonValue(m_doc_type));
    }
    if (m_estate_isSet) {
        obj.insert(QString("estate"), ::OpenAPI::toJsonValue(m_estate));
    }
    if (m_material_cost_isSet) {
        obj.insert(QString("materialCost"), ::OpenAPI::toJsonValue(m_material_cost));
    }
    if (m_organization_nbr_isSet) {
        obj.insert(QString("organizationNbr"), ::OpenAPI::toJsonValue(m_organization_nbr));
    }
    if (m_other_cost_isSet) {
        obj.insert(QString("otherCost"), ::OpenAPI::toJsonValue(m_other_cost));
    }
    if (m_ref_nbr_isSet) {
        obj.insert(QString("refNbr"), ::OpenAPI::toJsonValue(m_ref_nbr));
    }
    if (m_total_deductable_amount_isSet) {
        obj.insert(QString("totalDeductableAmount"), ::OpenAPI::toJsonValue(m_total_deductable_amount));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_work_price_isSet) {
        obj.insert(QString("workPrice"), ::OpenAPI::toJsonValue(m_work_price));
    }
    return obj;
}

QString OAIRotRutDto::getAppartment() const {
    return m_appartment;
}
void OAIRotRutDto::setAppartment(const QString &appartment) {
    m_appartment = appartment;
    m_appartment_isSet = true;
}

bool OAIRotRutDto::is_appartment_Set() const{
    return m_appartment_isSet;
}

bool OAIRotRutDto::is_appartment_Valid() const{
    return m_appartment_isValid;
}

double OAIRotRutDto::getDistributedAmount() const {
    return m_distributed_amount;
}
void OAIRotRutDto::setDistributedAmount(const double &distributed_amount) {
    m_distributed_amount = distributed_amount;
    m_distributed_amount_isSet = true;
}

bool OAIRotRutDto::is_distributed_amount_Set() const{
    return m_distributed_amount_isSet;
}

bool OAIRotRutDto::is_distributed_amount_Valid() const{
    return m_distributed_amount_isValid;
}

bool OAIRotRutDto::isDistributedAutomaticaly() const {
    return m_distributed_automaticaly;
}
void OAIRotRutDto::setDistributedAutomaticaly(const bool &distributed_automaticaly) {
    m_distributed_automaticaly = distributed_automaticaly;
    m_distributed_automaticaly_isSet = true;
}

bool OAIRotRutDto::is_distributed_automaticaly_Set() const{
    return m_distributed_automaticaly_isSet;
}

bool OAIRotRutDto::is_distributed_automaticaly_Valid() const{
    return m_distributed_automaticaly_isValid;
}

QList<OAIRotRutDistributionDto> OAIRotRutDto::getDistribution() const {
    return m_distribution;
}
void OAIRotRutDto::setDistribution(const QList<OAIRotRutDistributionDto> &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAIRotRutDto::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAIRotRutDto::is_distribution_Valid() const{
    return m_distribution_isValid;
}

QString OAIRotRutDto::getDocType() const {
    return m_doc_type;
}
void OAIRotRutDto::setDocType(const QString &doc_type) {
    m_doc_type = doc_type;
    m_doc_type_isSet = true;
}

bool OAIRotRutDto::is_doc_type_Set() const{
    return m_doc_type_isSet;
}

bool OAIRotRutDto::is_doc_type_Valid() const{
    return m_doc_type_isValid;
}

QString OAIRotRutDto::getEstate() const {
    return m_estate;
}
void OAIRotRutDto::setEstate(const QString &estate) {
    m_estate = estate;
    m_estate_isSet = true;
}

bool OAIRotRutDto::is_estate_Set() const{
    return m_estate_isSet;
}

bool OAIRotRutDto::is_estate_Valid() const{
    return m_estate_isValid;
}

double OAIRotRutDto::getMaterialCost() const {
    return m_material_cost;
}
void OAIRotRutDto::setMaterialCost(const double &material_cost) {
    m_material_cost = material_cost;
    m_material_cost_isSet = true;
}

bool OAIRotRutDto::is_material_cost_Set() const{
    return m_material_cost_isSet;
}

bool OAIRotRutDto::is_material_cost_Valid() const{
    return m_material_cost_isValid;
}

QString OAIRotRutDto::getOrganizationNbr() const {
    return m_organization_nbr;
}
void OAIRotRutDto::setOrganizationNbr(const QString &organization_nbr) {
    m_organization_nbr = organization_nbr;
    m_organization_nbr_isSet = true;
}

bool OAIRotRutDto::is_organization_nbr_Set() const{
    return m_organization_nbr_isSet;
}

bool OAIRotRutDto::is_organization_nbr_Valid() const{
    return m_organization_nbr_isValid;
}

double OAIRotRutDto::getOtherCost() const {
    return m_other_cost;
}
void OAIRotRutDto::setOtherCost(const double &other_cost) {
    m_other_cost = other_cost;
    m_other_cost_isSet = true;
}

bool OAIRotRutDto::is_other_cost_Set() const{
    return m_other_cost_isSet;
}

bool OAIRotRutDto::is_other_cost_Valid() const{
    return m_other_cost_isValid;
}

QString OAIRotRutDto::getRefNbr() const {
    return m_ref_nbr;
}
void OAIRotRutDto::setRefNbr(const QString &ref_nbr) {
    m_ref_nbr = ref_nbr;
    m_ref_nbr_isSet = true;
}

bool OAIRotRutDto::is_ref_nbr_Set() const{
    return m_ref_nbr_isSet;
}

bool OAIRotRutDto::is_ref_nbr_Valid() const{
    return m_ref_nbr_isValid;
}

double OAIRotRutDto::getTotalDeductableAmount() const {
    return m_total_deductable_amount;
}
void OAIRotRutDto::setTotalDeductableAmount(const double &total_deductable_amount) {
    m_total_deductable_amount = total_deductable_amount;
    m_total_deductable_amount_isSet = true;
}

bool OAIRotRutDto::is_total_deductable_amount_Set() const{
    return m_total_deductable_amount_isSet;
}

bool OAIRotRutDto::is_total_deductable_amount_Valid() const{
    return m_total_deductable_amount_isValid;
}

QString OAIRotRutDto::getType() const {
    return m_type;
}
void OAIRotRutDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRotRutDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRotRutDto::is_type_Valid() const{
    return m_type_isValid;
}

double OAIRotRutDto::getWorkPrice() const {
    return m_work_price;
}
void OAIRotRutDto::setWorkPrice(const double &work_price) {
    m_work_price = work_price;
    m_work_price_isSet = true;
}

bool OAIRotRutDto::is_work_price_Set() const{
    return m_work_price_isSet;
}

bool OAIRotRutDto::is_work_price_Valid() const{
    return m_work_price_isValid;
}

bool OAIRotRutDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appartment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributed_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributed_automaticaly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_deductable_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRotRutDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
