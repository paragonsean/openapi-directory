/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrencyInSupplierPaymentDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrencyInSupplierPaymentDto::OAICurrencyInSupplierPaymentDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrencyInSupplierPaymentDto::OAICurrencyInSupplierPaymentDto() {
    this->initializeModel();
}

OAICurrencyInSupplierPaymentDto::~OAICurrencyInSupplierPaymentDto() {}

void OAICurrencyInSupplierPaymentDto::initializeModel() {

    m_decimal_precision_isSet = false;
    m_decimal_precision_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_base_currency_isSet = false;
    m_is_base_currency_isValid = false;

    m_is_used_for_accounting_isSet = false;
    m_is_used_for_accounting_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAICurrencyInSupplierPaymentDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrencyInSupplierPaymentDto::fromJsonObject(QJsonObject json) {

    m_decimal_precision_isValid = ::OpenAPI::fromJsonValue(m_decimal_precision, json[QString("decimalPrecision")]);
    m_decimal_precision_isSet = !json[QString("decimalPrecision")].isNull() && m_decimal_precision_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_base_currency_isValid = ::OpenAPI::fromJsonValue(m_is_base_currency, json[QString("isBaseCurrency")]);
    m_is_base_currency_isSet = !json[QString("isBaseCurrency")].isNull() && m_is_base_currency_isValid;

    m_is_used_for_accounting_isValid = ::OpenAPI::fromJsonValue(m_is_used_for_accounting, json[QString("isUsedForAccounting")]);
    m_is_used_for_accounting_isSet = !json[QString("isUsedForAccounting")].isNull() && m_is_used_for_accounting_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAICurrencyInSupplierPaymentDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrencyInSupplierPaymentDto::asJsonObject() const {
    QJsonObject obj;
    if (m_decimal_precision_isSet) {
        obj.insert(QString("decimalPrecision"), ::OpenAPI::toJsonValue(m_decimal_precision));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_base_currency_isSet) {
        obj.insert(QString("isBaseCurrency"), ::OpenAPI::toJsonValue(m_is_base_currency));
    }
    if (m_is_used_for_accounting_isSet) {
        obj.insert(QString("isUsedForAccounting"), ::OpenAPI::toJsonValue(m_is_used_for_accounting));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

qint32 OAICurrencyInSupplierPaymentDto::getDecimalPrecision() const {
    return m_decimal_precision;
}
void OAICurrencyInSupplierPaymentDto::setDecimalPrecision(const qint32 &decimal_precision) {
    m_decimal_precision = decimal_precision;
    m_decimal_precision_isSet = true;
}

bool OAICurrencyInSupplierPaymentDto::is_decimal_precision_Set() const{
    return m_decimal_precision_isSet;
}

bool OAICurrencyInSupplierPaymentDto::is_decimal_precision_Valid() const{
    return m_decimal_precision_isValid;
}

QString OAICurrencyInSupplierPaymentDto::getDescription() const {
    return m_description;
}
void OAICurrencyInSupplierPaymentDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICurrencyInSupplierPaymentDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICurrencyInSupplierPaymentDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICurrencyInSupplierPaymentDto::getId() const {
    return m_id;
}
void OAICurrencyInSupplierPaymentDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICurrencyInSupplierPaymentDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAICurrencyInSupplierPaymentDto::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICurrencyInSupplierPaymentDto::isIsBaseCurrency() const {
    return m_is_base_currency;
}
void OAICurrencyInSupplierPaymentDto::setIsBaseCurrency(const bool &is_base_currency) {
    m_is_base_currency = is_base_currency;
    m_is_base_currency_isSet = true;
}

bool OAICurrencyInSupplierPaymentDto::is_is_base_currency_Set() const{
    return m_is_base_currency_isSet;
}

bool OAICurrencyInSupplierPaymentDto::is_is_base_currency_Valid() const{
    return m_is_base_currency_isValid;
}

bool OAICurrencyInSupplierPaymentDto::isIsUsedForAccounting() const {
    return m_is_used_for_accounting;
}
void OAICurrencyInSupplierPaymentDto::setIsUsedForAccounting(const bool &is_used_for_accounting) {
    m_is_used_for_accounting = is_used_for_accounting;
    m_is_used_for_accounting_isSet = true;
}

bool OAICurrencyInSupplierPaymentDto::is_is_used_for_accounting_Set() const{
    return m_is_used_for_accounting_isSet;
}

bool OAICurrencyInSupplierPaymentDto::is_is_used_for_accounting_Valid() const{
    return m_is_used_for_accounting_isValid;
}

QString OAICurrencyInSupplierPaymentDto::getSymbol() const {
    return m_symbol;
}
void OAICurrencyInSupplierPaymentDto::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAICurrencyInSupplierPaymentDto::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAICurrencyInSupplierPaymentDto::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAICurrencyInSupplierPaymentDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decimal_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_used_for_accounting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrencyInSupplierPaymentDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
