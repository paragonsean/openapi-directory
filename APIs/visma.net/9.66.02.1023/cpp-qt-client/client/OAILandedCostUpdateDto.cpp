/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandedCostUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandedCostUpdateDto::OAILandedCostUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandedCostUpdateDto::OAILandedCostUpdateDto() {
    this->initializeModel();
}

OAILandedCostUpdateDto::~OAILandedCostUpdateDto() {}

void OAILandedCostUpdateDto::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_ap_bill_date_isSet = false;
    m_ap_bill_date_isValid = false;

    m_ap_doc_type_isSet = false;
    m_ap_doc_type_isValid = false;

    m_ap_ref_nbr_isSet = false;
    m_ap_ref_nbr_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_in_doc_type_isSet = false;
    m_in_doc_type_isValid = false;

    m_in_ref_nbr_isSet = false;
    m_in_ref_nbr_isValid = false;

    m_inventory_id_isSet = false;
    m_inventory_id_isValid = false;

    m_landed_cost_code_isSet = false;
    m_landed_cost_code_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_postpone_purchase_invoice_creation_isSet = false;
    m_postpone_purchase_invoice_creation_isValid = false;

    m_purchase_invoice_nbr_isSet = false;
    m_purchase_invoice_nbr_isValid = false;

    m_supplier_id_isSet = false;
    m_supplier_id_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;
}

void OAILandedCostUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandedCostUpdateDto::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_ap_bill_date_isValid = ::OpenAPI::fromJsonValue(m_ap_bill_date, json[QString("apBillDate")]);
    m_ap_bill_date_isSet = !json[QString("apBillDate")].isNull() && m_ap_bill_date_isValid;

    m_ap_doc_type_isValid = ::OpenAPI::fromJsonValue(m_ap_doc_type, json[QString("apDocType")]);
    m_ap_doc_type_isSet = !json[QString("apDocType")].isNull() && m_ap_doc_type_isValid;

    m_ap_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ap_ref_nbr, json[QString("apRefNbr")]);
    m_ap_ref_nbr_isSet = !json[QString("apRefNbr")].isNull() && m_ap_ref_nbr_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_in_doc_type_isValid = ::OpenAPI::fromJsonValue(m_in_doc_type, json[QString("inDocType")]);
    m_in_doc_type_isSet = !json[QString("inDocType")].isNull() && m_in_doc_type_isValid;

    m_in_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_in_ref_nbr, json[QString("inRefNbr")]);
    m_in_ref_nbr_isSet = !json[QString("inRefNbr")].isNull() && m_in_ref_nbr_isValid;

    m_inventory_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_id, json[QString("inventoryId")]);
    m_inventory_id_isSet = !json[QString("inventoryId")].isNull() && m_inventory_id_isValid;

    m_landed_cost_code_isValid = ::OpenAPI::fromJsonValue(m_landed_cost_code, json[QString("landedCostCode")]);
    m_landed_cost_code_isSet = !json[QString("landedCostCode")].isNull() && m_landed_cost_code_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_postpone_purchase_invoice_creation_isValid = ::OpenAPI::fromJsonValue(m_postpone_purchase_invoice_creation, json[QString("postponePurchaseInvoiceCreation")]);
    m_postpone_purchase_invoice_creation_isSet = !json[QString("postponePurchaseInvoiceCreation")].isNull() && m_postpone_purchase_invoice_creation_isValid;

    m_purchase_invoice_nbr_isValid = ::OpenAPI::fromJsonValue(m_purchase_invoice_nbr, json[QString("purchaseInvoiceNbr")]);
    m_purchase_invoice_nbr_isSet = !json[QString("purchaseInvoiceNbr")].isNull() && m_purchase_invoice_nbr_isValid;

    m_supplier_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_id, json[QString("supplierId")]);
    m_supplier_id_isSet = !json[QString("supplierId")].isNull() && m_supplier_id_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;
}

QString OAILandedCostUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandedCostUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_ap_bill_date.isSet()) {
        obj.insert(QString("apBillDate"), ::OpenAPI::toJsonValue(m_ap_bill_date));
    }
    if (m_ap_doc_type.isSet()) {
        obj.insert(QString("apDocType"), ::OpenAPI::toJsonValue(m_ap_doc_type));
    }
    if (m_ap_ref_nbr.isSet()) {
        obj.insert(QString("apRefNbr"), ::OpenAPI::toJsonValue(m_ap_ref_nbr));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_in_doc_type.isSet()) {
        obj.insert(QString("inDocType"), ::OpenAPI::toJsonValue(m_in_doc_type));
    }
    if (m_in_ref_nbr.isSet()) {
        obj.insert(QString("inRefNbr"), ::OpenAPI::toJsonValue(m_in_ref_nbr));
    }
    if (m_inventory_id.isSet()) {
        obj.insert(QString("inventoryId"), ::OpenAPI::toJsonValue(m_inventory_id));
    }
    if (m_landed_cost_code.isSet()) {
        obj.insert(QString("landedCostCode"), ::OpenAPI::toJsonValue(m_landed_cost_code));
    }
    if (m_line_nbr.isSet()) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_postpone_purchase_invoice_creation.isSet()) {
        obj.insert(QString("postponePurchaseInvoiceCreation"), ::OpenAPI::toJsonValue(m_postpone_purchase_invoice_creation));
    }
    if (m_purchase_invoice_nbr.isSet()) {
        obj.insert(QString("purchaseInvoiceNbr"), ::OpenAPI::toJsonValue(m_purchase_invoice_nbr));
    }
    if (m_supplier_id.isSet()) {
        obj.insert(QString("supplierId"), ::OpenAPI::toJsonValue(m_supplier_id));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    return obj;
}

OAIDtoValueOfNullableOfDecimal OAILandedCostUpdateDto::getAmount() const {
    return m_amount;
}
void OAILandedCostUpdateDto::setAmount(const OAIDtoValueOfNullableOfDecimal &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAILandedCostUpdateDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAILandedCostUpdateDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIDtoValueOfNullableOfDateTime OAILandedCostUpdateDto::getApBillDate() const {
    return m_ap_bill_date;
}
void OAILandedCostUpdateDto::setApBillDate(const OAIDtoValueOfNullableOfDateTime &ap_bill_date) {
    m_ap_bill_date = ap_bill_date;
    m_ap_bill_date_isSet = true;
}

bool OAILandedCostUpdateDto::is_ap_bill_date_Set() const{
    return m_ap_bill_date_isSet;
}

bool OAILandedCostUpdateDto::is_ap_bill_date_Valid() const{
    return m_ap_bill_date_isValid;
}

OAIDtoValueOfNullableOfSupplierDocumentType OAILandedCostUpdateDto::getApDocType() const {
    return m_ap_doc_type;
}
void OAILandedCostUpdateDto::setApDocType(const OAIDtoValueOfNullableOfSupplierDocumentType &ap_doc_type) {
    m_ap_doc_type = ap_doc_type;
    m_ap_doc_type_isSet = true;
}

bool OAILandedCostUpdateDto::is_ap_doc_type_Set() const{
    return m_ap_doc_type_isSet;
}

bool OAILandedCostUpdateDto::is_ap_doc_type_Valid() const{
    return m_ap_doc_type_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getApRefNbr() const {
    return m_ap_ref_nbr;
}
void OAILandedCostUpdateDto::setApRefNbr(const OAIDtoValueOfString &ap_ref_nbr) {
    m_ap_ref_nbr = ap_ref_nbr;
    m_ap_ref_nbr_isSet = true;
}

bool OAILandedCostUpdateDto::is_ap_ref_nbr_Set() const{
    return m_ap_ref_nbr_isSet;
}

bool OAILandedCostUpdateDto::is_ap_ref_nbr_Valid() const{
    return m_ap_ref_nbr_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getCurrency() const {
    return m_currency;
}
void OAILandedCostUpdateDto::setCurrency(const OAIDtoValueOfString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAILandedCostUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAILandedCostUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getDescription() const {
    return m_description;
}
void OAILandedCostUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILandedCostUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAILandedCostUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfCustomerDocumentTypes OAILandedCostUpdateDto::getInDocType() const {
    return m_in_doc_type;
}
void OAILandedCostUpdateDto::setInDocType(const OAIDtoValueOfCustomerDocumentTypes &in_doc_type) {
    m_in_doc_type = in_doc_type;
    m_in_doc_type_isSet = true;
}

bool OAILandedCostUpdateDto::is_in_doc_type_Set() const{
    return m_in_doc_type_isSet;
}

bool OAILandedCostUpdateDto::is_in_doc_type_Valid() const{
    return m_in_doc_type_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getInRefNbr() const {
    return m_in_ref_nbr;
}
void OAILandedCostUpdateDto::setInRefNbr(const OAIDtoValueOfString &in_ref_nbr) {
    m_in_ref_nbr = in_ref_nbr;
    m_in_ref_nbr_isSet = true;
}

bool OAILandedCostUpdateDto::is_in_ref_nbr_Set() const{
    return m_in_ref_nbr_isSet;
}

bool OAILandedCostUpdateDto::is_in_ref_nbr_Valid() const{
    return m_in_ref_nbr_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getInventoryId() const {
    return m_inventory_id;
}
void OAILandedCostUpdateDto::setInventoryId(const OAIDtoValueOfString &inventory_id) {
    m_inventory_id = inventory_id;
    m_inventory_id_isSet = true;
}

bool OAILandedCostUpdateDto::is_inventory_id_Set() const{
    return m_inventory_id_isSet;
}

bool OAILandedCostUpdateDto::is_inventory_id_Valid() const{
    return m_inventory_id_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getLandedCostCode() const {
    return m_landed_cost_code;
}
void OAILandedCostUpdateDto::setLandedCostCode(const OAIDtoValueOfString &landed_cost_code) {
    m_landed_cost_code = landed_cost_code;
    m_landed_cost_code_isSet = true;
}

bool OAILandedCostUpdateDto::is_landed_cost_code_Set() const{
    return m_landed_cost_code_isSet;
}

bool OAILandedCostUpdateDto::is_landed_cost_code_Valid() const{
    return m_landed_cost_code_isValid;
}

OAIDtoValueOfInt32 OAILandedCostUpdateDto::getLineNbr() const {
    return m_line_nbr;
}
void OAILandedCostUpdateDto::setLineNbr(const OAIDtoValueOfInt32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAILandedCostUpdateDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAILandedCostUpdateDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAILandedCostUpdateDto::setLocationId(const OAIDtoValueOfString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAILandedCostUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAILandedCostUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAILandedCostUpdateDto::getOperation() const {
    return m_operation;
}
void OAILandedCostUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAILandedCostUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAILandedCostUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfBoolean OAILandedCostUpdateDto::getPostponePurchaseInvoiceCreation() const {
    return m_postpone_purchase_invoice_creation;
}
void OAILandedCostUpdateDto::setPostponePurchaseInvoiceCreation(const OAIDtoValueOfNullableOfBoolean &postpone_purchase_invoice_creation) {
    m_postpone_purchase_invoice_creation = postpone_purchase_invoice_creation;
    m_postpone_purchase_invoice_creation_isSet = true;
}

bool OAILandedCostUpdateDto::is_postpone_purchase_invoice_creation_Set() const{
    return m_postpone_purchase_invoice_creation_isSet;
}

bool OAILandedCostUpdateDto::is_postpone_purchase_invoice_creation_Valid() const{
    return m_postpone_purchase_invoice_creation_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getPurchaseInvoiceNbr() const {
    return m_purchase_invoice_nbr;
}
void OAILandedCostUpdateDto::setPurchaseInvoiceNbr(const OAIDtoValueOfString &purchase_invoice_nbr) {
    m_purchase_invoice_nbr = purchase_invoice_nbr;
    m_purchase_invoice_nbr_isSet = true;
}

bool OAILandedCostUpdateDto::is_purchase_invoice_nbr_Set() const{
    return m_purchase_invoice_nbr_isSet;
}

bool OAILandedCostUpdateDto::is_purchase_invoice_nbr_Valid() const{
    return m_purchase_invoice_nbr_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getSupplierId() const {
    return m_supplier_id;
}
void OAILandedCostUpdateDto::setSupplierId(const OAIDtoValueOfString &supplier_id) {
    m_supplier_id = supplier_id;
    m_supplier_id_isSet = true;
}

bool OAILandedCostUpdateDto::is_supplier_id_Set() const{
    return m_supplier_id_isSet;
}

bool OAILandedCostUpdateDto::is_supplier_id_Valid() const{
    return m_supplier_id_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getTaxCategory() const {
    return m_tax_category;
}
void OAILandedCostUpdateDto::setTaxCategory(const OAIDtoValueOfString &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAILandedCostUpdateDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAILandedCostUpdateDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

OAIDtoValueOfString OAILandedCostUpdateDto::getTerms() const {
    return m_terms;
}
void OAILandedCostUpdateDto::setTerms(const OAIDtoValueOfString &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAILandedCostUpdateDto::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAILandedCostUpdateDto::is_terms_Valid() const{
    return m_terms_isValid;
}

bool OAILandedCostUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ap_bill_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ap_doc_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ap_ref_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_doc_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_ref_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_landed_cost_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postpone_purchase_invoice_creation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_invoice_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandedCostUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
