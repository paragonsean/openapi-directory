/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderDocumentLineDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderDocumentLineDto::OAISalesOrderDocumentLineDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderDocumentLineDto::OAISalesOrderDocumentLineDto() {
    this->initializeModel();
}

OAISalesOrderDocumentLineDto::~OAISalesOrderDocumentLineDto() {}

void OAISalesOrderDocumentLineDto::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_disc_unit_price_isSet = false;
    m_disc_unit_price_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_code_isSet = false;
    m_discount_code_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_ext_price_isSet = false;
    m_ext_price_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_line_description_isSet = false;
    m_line_description_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_open_qty_isSet = false;
    m_open_qty_isValid = false;

    m_qty_on_shipments_isSet = false;
    m_qty_on_shipments_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_unbilled_amount_isSet = false;
    m_unbilled_amount_isValid = false;

    m_unit_cost_isSet = false;
    m_unit_cost_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_unit_price_in_base_currency_isSet = false;
    m_unit_price_in_base_currency_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAISalesOrderDocumentLineDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderDocumentLineDto::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_disc_unit_price_isValid = ::OpenAPI::fromJsonValue(m_disc_unit_price, json[QString("discUnitPrice")]);
    m_disc_unit_price_isSet = !json[QString("discUnitPrice")].isNull() && m_disc_unit_price_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discountAmount")]);
    m_discount_amount_isSet = !json[QString("discountAmount")].isNull() && m_discount_amount_isValid;

    m_discount_code_isValid = ::OpenAPI::fromJsonValue(m_discount_code, json[QString("discountCode")]);
    m_discount_code_isSet = !json[QString("discountCode")].isNull() && m_discount_code_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_ext_price_isValid = ::OpenAPI::fromJsonValue(m_ext_price, json[QString("extPrice")]);
    m_ext_price_isSet = !json[QString("extPrice")].isNull() && m_ext_price_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_line_description_isValid = ::OpenAPI::fromJsonValue(m_line_description, json[QString("lineDescription")]);
    m_line_description_isSet = !json[QString("lineDescription")].isNull() && m_line_description_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_open_qty_isValid = ::OpenAPI::fromJsonValue(m_open_qty, json[QString("openQty")]);
    m_open_qty_isSet = !json[QString("openQty")].isNull() && m_open_qty_isValid;

    m_qty_on_shipments_isValid = ::OpenAPI::fromJsonValue(m_qty_on_shipments, json[QString("qtyOnShipments")]);
    m_qty_on_shipments_isSet = !json[QString("qtyOnShipments")].isNull() && m_qty_on_shipments_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_unbilled_amount_isValid = ::OpenAPI::fromJsonValue(m_unbilled_amount, json[QString("unbilledAmount")]);
    m_unbilled_amount_isSet = !json[QString("unbilledAmount")].isNull() && m_unbilled_amount_isValid;

    m_unit_cost_isValid = ::OpenAPI::fromJsonValue(m_unit_cost, json[QString("unitCost")]);
    m_unit_cost_isSet = !json[QString("unitCost")].isNull() && m_unit_cost_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_unit_price_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_unit_price_in_base_currency, json[QString("unitPriceInBaseCurrency")]);
    m_unit_price_in_base_currency_isSet = !json[QString("unitPriceInBaseCurrency")].isNull() && m_unit_price_in_base_currency_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAISalesOrderDocumentLineDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderDocumentLineDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_disc_unit_price_isSet) {
        obj.insert(QString("discUnitPrice"), ::OpenAPI::toJsonValue(m_disc_unit_price));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_code_isSet) {
        obj.insert(QString("discountCode"), ::OpenAPI::toJsonValue(m_discount_code));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_ext_price_isSet) {
        obj.insert(QString("extPrice"), ::OpenAPI::toJsonValue(m_ext_price));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_line_description_isSet) {
        obj.insert(QString("lineDescription"), ::OpenAPI::toJsonValue(m_line_description));
    }
    if (m_line_nbr_isSet) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_manual_discount_isSet) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_open_qty_isSet) {
        obj.insert(QString("openQty"), ::OpenAPI::toJsonValue(m_open_qty));
    }
    if (m_qty_on_shipments_isSet) {
        obj.insert(QString("qtyOnShipments"), ::OpenAPI::toJsonValue(m_qty_on_shipments));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_unbilled_amount_isSet) {
        obj.insert(QString("unbilledAmount"), ::OpenAPI::toJsonValue(m_unbilled_amount));
    }
    if (m_unit_cost_isSet) {
        obj.insert(QString("unitCost"), ::OpenAPI::toJsonValue(m_unit_cost));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_unit_price_in_base_currency_isSet) {
        obj.insert(QString("unitPriceInBaseCurrency"), ::OpenAPI::toJsonValue(m_unit_price_in_base_currency));
    }
    if (m_uom_isSet) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_warehouse.isSet()) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

QList<OAIAttachmentDto> OAISalesOrderDocumentLineDto::getAttachments() const {
    return m_attachments;
}
void OAISalesOrderDocumentLineDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISalesOrderDocumentLineDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIBranchNumberDto OAISalesOrderDocumentLineDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISalesOrderDocumentLineDto::setBranchNumber(const OAIBranchNumberDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISalesOrderDocumentLineDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

double OAISalesOrderDocumentLineDto::getDiscUnitPrice() const {
    return m_disc_unit_price;
}
void OAISalesOrderDocumentLineDto::setDiscUnitPrice(const double &disc_unit_price) {
    m_disc_unit_price = disc_unit_price;
    m_disc_unit_price_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_disc_unit_price_Set() const{
    return m_disc_unit_price_isSet;
}

bool OAISalesOrderDocumentLineDto::is_disc_unit_price_Valid() const{
    return m_disc_unit_price_isValid;
}

double OAISalesOrderDocumentLineDto::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISalesOrderDocumentLineDto::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISalesOrderDocumentLineDto::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

QString OAISalesOrderDocumentLineDto::getDiscountCode() const {
    return m_discount_code;
}
void OAISalesOrderDocumentLineDto::setDiscountCode(const QString &discount_code) {
    m_discount_code = discount_code;
    m_discount_code_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_discount_code_Set() const{
    return m_discount_code_isSet;
}

bool OAISalesOrderDocumentLineDto::is_discount_code_Valid() const{
    return m_discount_code_isValid;
}

double OAISalesOrderDocumentLineDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAISalesOrderDocumentLineDto::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAISalesOrderDocumentLineDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

double OAISalesOrderDocumentLineDto::getExtPrice() const {
    return m_ext_price;
}
void OAISalesOrderDocumentLineDto::setExtPrice(const double &ext_price) {
    m_ext_price = ext_price;
    m_ext_price_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_ext_price_Set() const{
    return m_ext_price_isSet;
}

bool OAISalesOrderDocumentLineDto::is_ext_price_Valid() const{
    return m_ext_price_isValid;
}

OAIInventoryNumberDescriptionDto OAISalesOrderDocumentLineDto::getInventory() const {
    return m_inventory;
}
void OAISalesOrderDocumentLineDto::setInventory(const OAIInventoryNumberDescriptionDto &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAISalesOrderDocumentLineDto::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QString OAISalesOrderDocumentLineDto::getLineDescription() const {
    return m_line_description;
}
void OAISalesOrderDocumentLineDto::setLineDescription(const QString &line_description) {
    m_line_description = line_description;
    m_line_description_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_line_description_Set() const{
    return m_line_description_isSet;
}

bool OAISalesOrderDocumentLineDto::is_line_description_Valid() const{
    return m_line_description_isValid;
}

qint32 OAISalesOrderDocumentLineDto::getLineNbr() const {
    return m_line_nbr;
}
void OAISalesOrderDocumentLineDto::setLineNbr(const qint32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAISalesOrderDocumentLineDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

bool OAISalesOrderDocumentLineDto::isManualDiscount() const {
    return m_manual_discount;
}
void OAISalesOrderDocumentLineDto::setManualDiscount(const bool &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAISalesOrderDocumentLineDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

QString OAISalesOrderDocumentLineDto::getNote() const {
    return m_note;
}
void OAISalesOrderDocumentLineDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesOrderDocumentLineDto::is_note_Valid() const{
    return m_note_isValid;
}

double OAISalesOrderDocumentLineDto::getOpenQty() const {
    return m_open_qty;
}
void OAISalesOrderDocumentLineDto::setOpenQty(const double &open_qty) {
    m_open_qty = open_qty;
    m_open_qty_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_open_qty_Set() const{
    return m_open_qty_isSet;
}

bool OAISalesOrderDocumentLineDto::is_open_qty_Valid() const{
    return m_open_qty_isValid;
}

double OAISalesOrderDocumentLineDto::getQtyOnShipments() const {
    return m_qty_on_shipments;
}
void OAISalesOrderDocumentLineDto::setQtyOnShipments(const double &qty_on_shipments) {
    m_qty_on_shipments = qty_on_shipments;
    m_qty_on_shipments_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_qty_on_shipments_Set() const{
    return m_qty_on_shipments_isSet;
}

bool OAISalesOrderDocumentLineDto::is_qty_on_shipments_Valid() const{
    return m_qty_on_shipments_isValid;
}

double OAISalesOrderDocumentLineDto::getQuantity() const {
    return m_quantity;
}
void OAISalesOrderDocumentLineDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISalesOrderDocumentLineDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAISalesOrderDocumentLineDto::getSortOrder() const {
    return m_sort_order;
}
void OAISalesOrderDocumentLineDto::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISalesOrderDocumentLineDto::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

double OAISalesOrderDocumentLineDto::getUnbilledAmount() const {
    return m_unbilled_amount;
}
void OAISalesOrderDocumentLineDto::setUnbilledAmount(const double &unbilled_amount) {
    m_unbilled_amount = unbilled_amount;
    m_unbilled_amount_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_unbilled_amount_Set() const{
    return m_unbilled_amount_isSet;
}

bool OAISalesOrderDocumentLineDto::is_unbilled_amount_Valid() const{
    return m_unbilled_amount_isValid;
}

double OAISalesOrderDocumentLineDto::getUnitCost() const {
    return m_unit_cost;
}
void OAISalesOrderDocumentLineDto::setUnitCost(const double &unit_cost) {
    m_unit_cost = unit_cost;
    m_unit_cost_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_unit_cost_Set() const{
    return m_unit_cost_isSet;
}

bool OAISalesOrderDocumentLineDto::is_unit_cost_Valid() const{
    return m_unit_cost_isValid;
}

double OAISalesOrderDocumentLineDto::getUnitPrice() const {
    return m_unit_price;
}
void OAISalesOrderDocumentLineDto::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAISalesOrderDocumentLineDto::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

double OAISalesOrderDocumentLineDto::getUnitPriceInBaseCurrency() const {
    return m_unit_price_in_base_currency;
}
void OAISalesOrderDocumentLineDto::setUnitPriceInBaseCurrency(const double &unit_price_in_base_currency) {
    m_unit_price_in_base_currency = unit_price_in_base_currency;
    m_unit_price_in_base_currency_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_unit_price_in_base_currency_Set() const{
    return m_unit_price_in_base_currency_isSet;
}

bool OAISalesOrderDocumentLineDto::is_unit_price_in_base_currency_Valid() const{
    return m_unit_price_in_base_currency_isValid;
}

QString OAISalesOrderDocumentLineDto::getUom() const {
    return m_uom;
}
void OAISalesOrderDocumentLineDto::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAISalesOrderDocumentLineDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIWarehouseIdDescriptionDto OAISalesOrderDocumentLineDto::getWarehouse() const {
    return m_warehouse;
}
void OAISalesOrderDocumentLineDto::setWarehouse(const OAIWarehouseIdDescriptionDto &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAISalesOrderDocumentLineDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAISalesOrderDocumentLineDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAISalesOrderDocumentLineDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_on_shipments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unbilled_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderDocumentLineDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
