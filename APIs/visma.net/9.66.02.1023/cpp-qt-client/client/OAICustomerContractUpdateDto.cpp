/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerContractUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerContractUpdateDto::OAICustomerContractUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerContractUpdateDto::OAICustomerContractUpdateDto() {
    this->initializeModel();
}

OAICustomerContractUpdateDto::~OAICustomerContractUpdateDto() {}

void OAICustomerContractUpdateDto::initializeModel() {

    m_activation_date_isSet = false;
    m_activation_date_isValid = false;

    m_attribute_lines_isSet = false;
    m_attribute_lines_isValid = false;

    m_contract_id_isSet = false;
    m_contract_id_isValid = false;

    m_contract_template_isSet = false;
    m_contract_template_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_grace_period_isSet = false;
    m_grace_period_isValid = false;

    m_invoice_account_isSet = false;
    m_invoice_account_isValid = false;

    m_invoice_location_isSet = false;
    m_invoice_location_isValid = false;

    m_invoice_to_isSet = false;
    m_invoice_to_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_mass_renewal_isSet = false;
    m_mass_renewal_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_renewal_point_isSet = false;
    m_renewal_point_isValid = false;

    m_sales_person_isSet = false;
    m_sales_person_isValid = false;

    m_setup_date_isSet = false;
    m_setup_date_isValid = false;
}

void OAICustomerContractUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerContractUpdateDto::fromJsonObject(QJsonObject json) {

    m_activation_date_isValid = ::OpenAPI::fromJsonValue(m_activation_date, json[QString("activationDate")]);
    m_activation_date_isSet = !json[QString("activationDate")].isNull() && m_activation_date_isValid;

    m_attribute_lines_isValid = ::OpenAPI::fromJsonValue(m_attribute_lines, json[QString("attributeLines")]);
    m_attribute_lines_isSet = !json[QString("attributeLines")].isNull() && m_attribute_lines_isValid;

    m_contract_id_isValid = ::OpenAPI::fromJsonValue(m_contract_id, json[QString("contractId")]);
    m_contract_id_isSet = !json[QString("contractId")].isNull() && m_contract_id_isValid;

    m_contract_template_isValid = ::OpenAPI::fromJsonValue(m_contract_template, json[QString("contractTemplate")]);
    m_contract_template_isSet = !json[QString("contractTemplate")].isNull() && m_contract_template_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_grace_period_isValid = ::OpenAPI::fromJsonValue(m_grace_period, json[QString("gracePeriod")]);
    m_grace_period_isSet = !json[QString("gracePeriod")].isNull() && m_grace_period_isValid;

    m_invoice_account_isValid = ::OpenAPI::fromJsonValue(m_invoice_account, json[QString("invoiceAccount")]);
    m_invoice_account_isSet = !json[QString("invoiceAccount")].isNull() && m_invoice_account_isValid;

    m_invoice_location_isValid = ::OpenAPI::fromJsonValue(m_invoice_location, json[QString("invoiceLocation")]);
    m_invoice_location_isSet = !json[QString("invoiceLocation")].isNull() && m_invoice_location_isValid;

    m_invoice_to_isValid = ::OpenAPI::fromJsonValue(m_invoice_to, json[QString("invoiceTo")]);
    m_invoice_to_isSet = !json[QString("invoiceTo")].isNull() && m_invoice_to_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_mass_renewal_isValid = ::OpenAPI::fromJsonValue(m_mass_renewal, json[QString("massRenewal")]);
    m_mass_renewal_isSet = !json[QString("massRenewal")].isNull() && m_mass_renewal_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_renewal_point_isValid = ::OpenAPI::fromJsonValue(m_renewal_point, json[QString("renewalPoint")]);
    m_renewal_point_isSet = !json[QString("renewalPoint")].isNull() && m_renewal_point_isValid;

    m_sales_person_isValid = ::OpenAPI::fromJsonValue(m_sales_person, json[QString("salesPerson")]);
    m_sales_person_isSet = !json[QString("salesPerson")].isNull() && m_sales_person_isValid;

    m_setup_date_isValid = ::OpenAPI::fromJsonValue(m_setup_date, json[QString("setupDate")]);
    m_setup_date_isSet = !json[QString("setupDate")].isNull() && m_setup_date_isValid;
}

QString OAICustomerContractUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerContractUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_date.isSet()) {
        obj.insert(QString("activationDate"), ::OpenAPI::toJsonValue(m_activation_date));
    }
    if (m_attribute_lines.size() > 0) {
        obj.insert(QString("attributeLines"), ::OpenAPI::toJsonValue(m_attribute_lines));
    }
    if (m_contract_id.isSet()) {
        obj.insert(QString("contractId"), ::OpenAPI::toJsonValue(m_contract_id));
    }
    if (m_contract_template.isSet()) {
        obj.insert(QString("contractTemplate"), ::OpenAPI::toJsonValue(m_contract_template));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_expiration_date.isSet()) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_grace_period.isSet()) {
        obj.insert(QString("gracePeriod"), ::OpenAPI::toJsonValue(m_grace_period));
    }
    if (m_invoice_account.isSet()) {
        obj.insert(QString("invoiceAccount"), ::OpenAPI::toJsonValue(m_invoice_account));
    }
    if (m_invoice_location.isSet()) {
        obj.insert(QString("invoiceLocation"), ::OpenAPI::toJsonValue(m_invoice_location));
    }
    if (m_invoice_to.isSet()) {
        obj.insert(QString("invoiceTo"), ::OpenAPI::toJsonValue(m_invoice_to));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_mass_renewal.isSet()) {
        obj.insert(QString("massRenewal"), ::OpenAPI::toJsonValue(m_mass_renewal));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_renewal_point.isSet()) {
        obj.insert(QString("renewalPoint"), ::OpenAPI::toJsonValue(m_renewal_point));
    }
    if (m_sales_person.isSet()) {
        obj.insert(QString("salesPerson"), ::OpenAPI::toJsonValue(m_sales_person));
    }
    if (m_setup_date.isSet()) {
        obj.insert(QString("setupDate"), ::OpenAPI::toJsonValue(m_setup_date));
    }
    return obj;
}

OAIDtoValueOfNullableOfDateTime OAICustomerContractUpdateDto::getActivationDate() const {
    return m_activation_date;
}
void OAICustomerContractUpdateDto::setActivationDate(const OAIDtoValueOfNullableOfDateTime &activation_date) {
    m_activation_date = activation_date;
    m_activation_date_isSet = true;
}

bool OAICustomerContractUpdateDto::is_activation_date_Set() const{
    return m_activation_date_isSet;
}

bool OAICustomerContractUpdateDto::is_activation_date_Valid() const{
    return m_activation_date_isValid;
}

QList<OAIAttributeLineUpdateDto> OAICustomerContractUpdateDto::getAttributeLines() const {
    return m_attribute_lines;
}
void OAICustomerContractUpdateDto::setAttributeLines(const QList<OAIAttributeLineUpdateDto> &attribute_lines) {
    m_attribute_lines = attribute_lines;
    m_attribute_lines_isSet = true;
}

bool OAICustomerContractUpdateDto::is_attribute_lines_Set() const{
    return m_attribute_lines_isSet;
}

bool OAICustomerContractUpdateDto::is_attribute_lines_Valid() const{
    return m_attribute_lines_isValid;
}

OAIContractIdInCustomerContractUpdateDto OAICustomerContractUpdateDto::getContractId() const {
    return m_contract_id;
}
void OAICustomerContractUpdateDto::setContractId(const OAIContractIdInCustomerContractUpdateDto &contract_id) {
    m_contract_id = contract_id;
    m_contract_id_isSet = true;
}

bool OAICustomerContractUpdateDto::is_contract_id_Set() const{
    return m_contract_id_isSet;
}

bool OAICustomerContractUpdateDto::is_contract_id_Valid() const{
    return m_contract_id_isValid;
}

OAIContractTemplateInCustomerContractUpdateDto OAICustomerContractUpdateDto::getContractTemplate() const {
    return m_contract_template;
}
void OAICustomerContractUpdateDto::setContractTemplate(const OAIContractTemplateInCustomerContractUpdateDto &contract_template) {
    m_contract_template = contract_template;
    m_contract_template_isSet = true;
}

bool OAICustomerContractUpdateDto::is_contract_template_Set() const{
    return m_contract_template_isSet;
}

bool OAICustomerContractUpdateDto::is_contract_template_Valid() const{
    return m_contract_template_isValid;
}

OAIDtoValueOfString OAICustomerContractUpdateDto::getCurrency() const {
    return m_currency;
}
void OAICustomerContractUpdateDto::setCurrency(const OAIDtoValueOfString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICustomerContractUpdateDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICustomerContractUpdateDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerInCustomerContractUpdateDto OAICustomerContractUpdateDto::getCustomer() const {
    return m_customer;
}
void OAICustomerContractUpdateDto::setCustomer(const OAICustomerInCustomerContractUpdateDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomerContractUpdateDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomerContractUpdateDto::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIDtoValueOfString OAICustomerContractUpdateDto::getDescription() const {
    return m_description;
}
void OAICustomerContractUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomerContractUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomerContractUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAICustomerContractDetailsUpdateDto> OAICustomerContractUpdateDto::getDetails() const {
    return m_details;
}
void OAICustomerContractUpdateDto::setDetails(const QList<OAICustomerContractDetailsUpdateDto> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAICustomerContractUpdateDto::is_details_Set() const{
    return m_details_isSet;
}

bool OAICustomerContractUpdateDto::is_details_Valid() const{
    return m_details_isValid;
}

OAIDtoValueOfNullableOfDateTime OAICustomerContractUpdateDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAICustomerContractUpdateDto::setExpirationDate(const OAIDtoValueOfNullableOfDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAICustomerContractUpdateDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAICustomerContractUpdateDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIDtoValueOfNullableOfInt32 OAICustomerContractUpdateDto::getGracePeriod() const {
    return m_grace_period;
}
void OAICustomerContractUpdateDto::setGracePeriod(const OAIDtoValueOfNullableOfInt32 &grace_period) {
    m_grace_period = grace_period;
    m_grace_period_isSet = true;
}

bool OAICustomerContractUpdateDto::is_grace_period_Set() const{
    return m_grace_period_isSet;
}

bool OAICustomerContractUpdateDto::is_grace_period_Valid() const{
    return m_grace_period_isValid;
}

OAIDtoValueOfString OAICustomerContractUpdateDto::getInvoiceAccount() const {
    return m_invoice_account;
}
void OAICustomerContractUpdateDto::setInvoiceAccount(const OAIDtoValueOfString &invoice_account) {
    m_invoice_account = invoice_account;
    m_invoice_account_isSet = true;
}

bool OAICustomerContractUpdateDto::is_invoice_account_Set() const{
    return m_invoice_account_isSet;
}

bool OAICustomerContractUpdateDto::is_invoice_account_Valid() const{
    return m_invoice_account_isValid;
}

OAIDtoValueOfString OAICustomerContractUpdateDto::getInvoiceLocation() const {
    return m_invoice_location;
}
void OAICustomerContractUpdateDto::setInvoiceLocation(const OAIDtoValueOfString &invoice_location) {
    m_invoice_location = invoice_location;
    m_invoice_location_isSet = true;
}

bool OAICustomerContractUpdateDto::is_invoice_location_Set() const{
    return m_invoice_location_isSet;
}

bool OAICustomerContractUpdateDto::is_invoice_location_Valid() const{
    return m_invoice_location_isValid;
}

OAIDtoValueOfNullableOfInvoiceToType OAICustomerContractUpdateDto::getInvoiceTo() const {
    return m_invoice_to;
}
void OAICustomerContractUpdateDto::setInvoiceTo(const OAIDtoValueOfNullableOfInvoiceToType &invoice_to) {
    m_invoice_to = invoice_to;
    m_invoice_to_isSet = true;
}

bool OAICustomerContractUpdateDto::is_invoice_to_Set() const{
    return m_invoice_to_isSet;
}

bool OAICustomerContractUpdateDto::is_invoice_to_Valid() const{
    return m_invoice_to_isValid;
}

OAIDtoValueOfString OAICustomerContractUpdateDto::getLocation() const {
    return m_location;
}
void OAICustomerContractUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICustomerContractUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAICustomerContractUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfNullableOfBoolean OAICustomerContractUpdateDto::getMassRenewal() const {
    return m_mass_renewal;
}
void OAICustomerContractUpdateDto::setMassRenewal(const OAIDtoValueOfNullableOfBoolean &mass_renewal) {
    m_mass_renewal = mass_renewal;
    m_mass_renewal_isSet = true;
}

bool OAICustomerContractUpdateDto::is_mass_renewal_Set() const{
    return m_mass_renewal_isSet;
}

bool OAICustomerContractUpdateDto::is_mass_renewal_Valid() const{
    return m_mass_renewal_isValid;
}

OAIDtoValueOfString OAICustomerContractUpdateDto::getOwner() const {
    return m_owner;
}
void OAICustomerContractUpdateDto::setOwner(const OAIDtoValueOfString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICustomerContractUpdateDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICustomerContractUpdateDto::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIDtoValueOfNullableOfInt32 OAICustomerContractUpdateDto::getRenewalPoint() const {
    return m_renewal_point;
}
void OAICustomerContractUpdateDto::setRenewalPoint(const OAIDtoValueOfNullableOfInt32 &renewal_point) {
    m_renewal_point = renewal_point;
    m_renewal_point_isSet = true;
}

bool OAICustomerContractUpdateDto::is_renewal_point_Set() const{
    return m_renewal_point_isSet;
}

bool OAICustomerContractUpdateDto::is_renewal_point_Valid() const{
    return m_renewal_point_isValid;
}

OAIDtoValueOfString OAICustomerContractUpdateDto::getSalesPerson() const {
    return m_sales_person;
}
void OAICustomerContractUpdateDto::setSalesPerson(const OAIDtoValueOfString &sales_person) {
    m_sales_person = sales_person;
    m_sales_person_isSet = true;
}

bool OAICustomerContractUpdateDto::is_sales_person_Set() const{
    return m_sales_person_isSet;
}

bool OAICustomerContractUpdateDto::is_sales_person_Valid() const{
    return m_sales_person_isValid;
}

OAIDtoValueOfNullableOfDateTime OAICustomerContractUpdateDto::getSetupDate() const {
    return m_setup_date;
}
void OAICustomerContractUpdateDto::setSetupDate(const OAIDtoValueOfNullableOfDateTime &setup_date) {
    m_setup_date = setup_date;
    m_setup_date_isSet = true;
}

bool OAICustomerContractUpdateDto::is_setup_date_Set() const{
    return m_setup_date_isSet;
}

bool OAICustomerContractUpdateDto::is_setup_date_Valid() const{
    return m_setup_date_isValid;
}

bool OAICustomerContractUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mass_renewal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerContractUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
