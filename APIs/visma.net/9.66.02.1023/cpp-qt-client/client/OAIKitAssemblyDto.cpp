/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKitAssemblyDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKitAssemblyDto::OAIKitAssemblyDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKitAssemblyDto::OAIKitAssemblyDto() {
    this->initializeModel();
}

OAIKitAssemblyDto::~OAIKitAssemblyDto() {}

void OAIKitAssemblyDto::initializeModel() {

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_kit_allocations_isSet = false;
    m_kit_allocations_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_non_stock_component_lines_isSet = false;
    m_non_stock_component_lines_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_ref_no_isSet = false;
    m_ref_no_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_sales_order_link_isSet = false;
    m_sales_order_link_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stock_component_lines_isSet = false;
    m_stock_component_lines_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uo_m_isSet = false;
    m_uo_m_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIKitAssemblyDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKitAssemblyDto::fromJsonObject(QJsonObject json) {

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemID")]);
    m_item_id_isSet = !json[QString("itemID")].isNull() && m_item_id_isValid;

    m_kit_allocations_isValid = ::OpenAPI::fromJsonValue(m_kit_allocations, json[QString("kitAllocations")]);
    m_kit_allocations_isSet = !json[QString("kitAllocations")].isNull() && m_kit_allocations_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_non_stock_component_lines_isValid = ::OpenAPI::fromJsonValue(m_non_stock_component_lines, json[QString("nonStockComponentLines")]);
    m_non_stock_component_lines_isSet = !json[QString("nonStockComponentLines")].isNull() && m_non_stock_component_lines_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_ref_no_isValid = ::OpenAPI::fromJsonValue(m_ref_no, json[QString("refNo")]);
    m_ref_no_isSet = !json[QString("refNo")].isNull() && m_ref_no_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_sales_order_link_isValid = ::OpenAPI::fromJsonValue(m_sales_order_link, json[QString("salesOrderLink")]);
    m_sales_order_link_isSet = !json[QString("salesOrderLink")].isNull() && m_sales_order_link_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stock_component_lines_isValid = ::OpenAPI::fromJsonValue(m_stock_component_lines, json[QString("stockComponentLines")]);
    m_stock_component_lines_isSet = !json[QString("stockComponentLines")].isNull() && m_stock_component_lines_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uo_m_isValid = ::OpenAPI::fromJsonValue(m_uo_m, json[QString("uoM")]);
    m_uo_m_isSet = !json[QString("uoM")].isNull() && m_uo_m_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIKitAssemblyDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKitAssemblyDto::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemID"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_kit_allocations.size() > 0) {
        obj.insert(QString("kitAllocations"), ::OpenAPI::toJsonValue(m_kit_allocations));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_non_stock_component_lines.size() > 0) {
        obj.insert(QString("nonStockComponentLines"), ::OpenAPI::toJsonValue(m_non_stock_component_lines));
    }
    if (m_post_period_isSet) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_ref_no_isSet) {
        obj.insert(QString("refNo"), ::OpenAPI::toJsonValue(m_ref_no));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_sales_order_link_isSet) {
        obj.insert(QString("salesOrderLink"), ::OpenAPI::toJsonValue(m_sales_order_link));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stock_component_lines.size() > 0) {
        obj.insert(QString("stockComponentLines"), ::OpenAPI::toJsonValue(m_stock_component_lines));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uo_m_isSet) {
        obj.insert(QString("uoM"), ::OpenAPI::toJsonValue(m_uo_m));
    }
    if (m_warehouse_isSet) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

QDateTime OAIKitAssemblyDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIKitAssemblyDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIKitAssemblyDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIKitAssemblyDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QDateTime OAIKitAssemblyDto::getDate() const {
    return m_date;
}
void OAIKitAssemblyDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIKitAssemblyDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAIKitAssemblyDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIKitAssemblyDto::getDescription() const {
    return m_description;
}
void OAIKitAssemblyDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIKitAssemblyDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIKitAssemblyDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIKitAssemblyDto::getErrorInfo() const {
    return m_error_info;
}
void OAIKitAssemblyDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIKitAssemblyDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIKitAssemblyDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

bool OAIKitAssemblyDto::isHold() const {
    return m_hold;
}
void OAIKitAssemblyDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIKitAssemblyDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIKitAssemblyDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QString OAIKitAssemblyDto::getItemId() const {
    return m_item_id;
}
void OAIKitAssemblyDto::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIKitAssemblyDto::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIKitAssemblyDto::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QList<OAIINAllocationsDto> OAIKitAssemblyDto::getKitAllocations() const {
    return m_kit_allocations;
}
void OAIKitAssemblyDto::setKitAllocations(const QList<OAIINAllocationsDto> &kit_allocations) {
    m_kit_allocations = kit_allocations;
    m_kit_allocations_isSet = true;
}

bool OAIKitAssemblyDto::is_kit_allocations_Set() const{
    return m_kit_allocations_isSet;
}

bool OAIKitAssemblyDto::is_kit_allocations_Valid() const{
    return m_kit_allocations_isValid;
}

QDateTime OAIKitAssemblyDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIKitAssemblyDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIKitAssemblyDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIKitAssemblyDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIKitAssemblyDto::getLocation() const {
    return m_location;
}
void OAIKitAssemblyDto::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIKitAssemblyDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIKitAssemblyDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAIKitAssemblyDto::getMetadata() const {
    return m_metadata;
}
void OAIKitAssemblyDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIKitAssemblyDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIKitAssemblyDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIKitAssemblyNonStockComponentDto> OAIKitAssemblyDto::getNonStockComponentLines() const {
    return m_non_stock_component_lines;
}
void OAIKitAssemblyDto::setNonStockComponentLines(const QList<OAIKitAssemblyNonStockComponentDto> &non_stock_component_lines) {
    m_non_stock_component_lines = non_stock_component_lines;
    m_non_stock_component_lines_isSet = true;
}

bool OAIKitAssemblyDto::is_non_stock_component_lines_Set() const{
    return m_non_stock_component_lines_isSet;
}

bool OAIKitAssemblyDto::is_non_stock_component_lines_Valid() const{
    return m_non_stock_component_lines_isValid;
}

QString OAIKitAssemblyDto::getPostPeriod() const {
    return m_post_period;
}
void OAIKitAssemblyDto::setPostPeriod(const QString &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAIKitAssemblyDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAIKitAssemblyDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

double OAIKitAssemblyDto::getQuantity() const {
    return m_quantity;
}
void OAIKitAssemblyDto::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIKitAssemblyDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIKitAssemblyDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIKitAssemblyDto::getReasonCode() const {
    return m_reason_code;
}
void OAIKitAssemblyDto::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIKitAssemblyDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIKitAssemblyDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QString OAIKitAssemblyDto::getRefNo() const {
    return m_ref_no;
}
void OAIKitAssemblyDto::setRefNo(const QString &ref_no) {
    m_ref_no = ref_no;
    m_ref_no_isSet = true;
}

bool OAIKitAssemblyDto::is_ref_no_Set() const{
    return m_ref_no_isSet;
}

bool OAIKitAssemblyDto::is_ref_no_Valid() const{
    return m_ref_no_isValid;
}

QString OAIKitAssemblyDto::getRevision() const {
    return m_revision;
}
void OAIKitAssemblyDto::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIKitAssemblyDto::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIKitAssemblyDto::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIKitAssemblyDto::getSalesOrderLink() const {
    return m_sales_order_link;
}
void OAIKitAssemblyDto::setSalesOrderLink(const QString &sales_order_link) {
    m_sales_order_link = sales_order_link;
    m_sales_order_link_isSet = true;
}

bool OAIKitAssemblyDto::is_sales_order_link_Set() const{
    return m_sales_order_link_isSet;
}

bool OAIKitAssemblyDto::is_sales_order_link_Valid() const{
    return m_sales_order_link_isValid;
}

QString OAIKitAssemblyDto::getStatus() const {
    return m_status;
}
void OAIKitAssemblyDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIKitAssemblyDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIKitAssemblyDto::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIKitAssemblyStockComponentsDto> OAIKitAssemblyDto::getStockComponentLines() const {
    return m_stock_component_lines;
}
void OAIKitAssemblyDto::setStockComponentLines(const QList<OAIKitAssemblyStockComponentsDto> &stock_component_lines) {
    m_stock_component_lines = stock_component_lines;
    m_stock_component_lines_isSet = true;
}

bool OAIKitAssemblyDto::is_stock_component_lines_Set() const{
    return m_stock_component_lines_isSet;
}

bool OAIKitAssemblyDto::is_stock_component_lines_Valid() const{
    return m_stock_component_lines_isValid;
}

QString OAIKitAssemblyDto::getType() const {
    return m_type;
}
void OAIKitAssemblyDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIKitAssemblyDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIKitAssemblyDto::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIKitAssemblyDto::getUoM() const {
    return m_uo_m;
}
void OAIKitAssemblyDto::setUoM(const QString &uo_m) {
    m_uo_m = uo_m;
    m_uo_m_isSet = true;
}

bool OAIKitAssemblyDto::is_uo_m_Set() const{
    return m_uo_m_isSet;
}

bool OAIKitAssemblyDto::is_uo_m_Valid() const{
    return m_uo_m_isValid;
}

QString OAIKitAssemblyDto::getWarehouse() const {
    return m_warehouse;
}
void OAIKitAssemblyDto::setWarehouse(const QString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIKitAssemblyDto::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIKitAssemblyDto::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIKitAssemblyDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kit_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_stock_component_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_order_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_component_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uo_m_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKitAssemblyDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
