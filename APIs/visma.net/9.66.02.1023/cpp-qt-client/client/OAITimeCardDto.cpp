/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeCardDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeCardDto::OAITimeCardDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeCardDto::OAITimeCardDto() {
    this->initializeModel();
}

OAITimeCardDto::~OAITimeCardDto() {}

void OAITimeCardDto::initializeModel() {

    m_approval_status_isSet = false;
    m_approval_status_isValid = false;

    m_approval_status_text_isSet = false;
    m_approval_status_text_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_invoiceable_isSet = false;
    m_invoiceable_isValid = false;

    m_invoiceable_overtime_isSet = false;
    m_invoiceable_overtime_isValid = false;

    m_invoiceable_total_time_isSet = false;
    m_invoiceable_total_time_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_materials_isSet = false;
    m_materials_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_orig_ref_nbr_isSet = false;
    m_orig_ref_nbr_isValid = false;

    m_overtime_spent_isSet = false;
    m_overtime_spent_isValid = false;

    m_ref_nbr_isSet = false;
    m_ref_nbr_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_time_spent_isSet = false;
    m_time_spent_isValid = false;

    m_total_time_spent_isSet = false;
    m_total_time_spent_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAITimeCardDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeCardDto::fromJsonObject(QJsonObject json) {

    m_approval_status_isValid = ::OpenAPI::fromJsonValue(m_approval_status, json[QString("approvalStatus")]);
    m_approval_status_isSet = !json[QString("approvalStatus")].isNull() && m_approval_status_isValid;

    m_approval_status_text_isValid = ::OpenAPI::fromJsonValue(m_approval_status_text, json[QString("approvalStatusText")]);
    m_approval_status_text_isSet = !json[QString("approvalStatusText")].isNull() && m_approval_status_text_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_invoiceable_isValid = ::OpenAPI::fromJsonValue(m_invoiceable, json[QString("invoiceable")]);
    m_invoiceable_isSet = !json[QString("invoiceable")].isNull() && m_invoiceable_isValid;

    m_invoiceable_overtime_isValid = ::OpenAPI::fromJsonValue(m_invoiceable_overtime, json[QString("invoiceableOvertime")]);
    m_invoiceable_overtime_isSet = !json[QString("invoiceableOvertime")].isNull() && m_invoiceable_overtime_isValid;

    m_invoiceable_total_time_isValid = ::OpenAPI::fromJsonValue(m_invoiceable_total_time, json[QString("invoiceableTotalTime")]);
    m_invoiceable_total_time_isSet = !json[QString("invoiceableTotalTime")].isNull() && m_invoiceable_total_time_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_materials_isValid = ::OpenAPI::fromJsonValue(m_materials, json[QString("materials")]);
    m_materials_isSet = !json[QString("materials")].isNull() && m_materials_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_orig_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_orig_ref_nbr, json[QString("origRefNbr")]);
    m_orig_ref_nbr_isSet = !json[QString("origRefNbr")].isNull() && m_orig_ref_nbr_isValid;

    m_overtime_spent_isValid = ::OpenAPI::fromJsonValue(m_overtime_spent, json[QString("overtimeSpent")]);
    m_overtime_spent_isSet = !json[QString("overtimeSpent")].isNull() && m_overtime_spent_isValid;

    m_ref_nbr_isValid = ::OpenAPI::fromJsonValue(m_ref_nbr, json[QString("refNbr")]);
    m_ref_nbr_isSet = !json[QString("refNbr")].isNull() && m_ref_nbr_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_time_spent_isValid = ::OpenAPI::fromJsonValue(m_time_spent, json[QString("timeSpent")]);
    m_time_spent_isSet = !json[QString("timeSpent")].isNull() && m_time_spent_isValid;

    m_total_time_spent_isValid = ::OpenAPI::fromJsonValue(m_total_time_spent, json[QString("totalTimeSpent")]);
    m_total_time_spent_isSet = !json[QString("totalTimeSpent")].isNull() && m_total_time_spent_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAITimeCardDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeCardDto::asJsonObject() const {
    QJsonObject obj;
    if (m_approval_status_isSet) {
        obj.insert(QString("approvalStatus"), ::OpenAPI::toJsonValue(m_approval_status));
    }
    if (m_approval_status_text_isSet) {
        obj.insert(QString("approvalStatusText"), ::OpenAPI::toJsonValue(m_approval_status_text));
    }
    if (m_employee.isSet()) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_invoiceable_isSet) {
        obj.insert(QString("invoiceable"), ::OpenAPI::toJsonValue(m_invoiceable));
    }
    if (m_invoiceable_overtime_isSet) {
        obj.insert(QString("invoiceableOvertime"), ::OpenAPI::toJsonValue(m_invoiceable_overtime));
    }
    if (m_invoiceable_total_time_isSet) {
        obj.insert(QString("invoiceableTotalTime"), ::OpenAPI::toJsonValue(m_invoiceable_total_time));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_materials.size() > 0) {
        obj.insert(QString("materials"), ::OpenAPI::toJsonValue(m_materials));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_orig_ref_nbr_isSet) {
        obj.insert(QString("origRefNbr"), ::OpenAPI::toJsonValue(m_orig_ref_nbr));
    }
    if (m_overtime_spent_isSet) {
        obj.insert(QString("overtimeSpent"), ::OpenAPI::toJsonValue(m_overtime_spent));
    }
    if (m_ref_nbr_isSet) {
        obj.insert(QString("refNbr"), ::OpenAPI::toJsonValue(m_ref_nbr));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary.size() > 0) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_time_spent_isSet) {
        obj.insert(QString("timeSpent"), ::OpenAPI::toJsonValue(m_time_spent));
    }
    if (m_total_time_spent_isSet) {
        obj.insert(QString("totalTimeSpent"), ::OpenAPI::toJsonValue(m_total_time_spent));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_week.isSet()) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAITimeCardDto::getApprovalStatus() const {
    return m_approval_status;
}
void OAITimeCardDto::setApprovalStatus(const QString &approval_status) {
    m_approval_status = approval_status;
    m_approval_status_isSet = true;
}

bool OAITimeCardDto::is_approval_status_Set() const{
    return m_approval_status_isSet;
}

bool OAITimeCardDto::is_approval_status_Valid() const{
    return m_approval_status_isValid;
}

QString OAITimeCardDto::getApprovalStatusText() const {
    return m_approval_status_text;
}
void OAITimeCardDto::setApprovalStatusText(const QString &approval_status_text) {
    m_approval_status_text = approval_status_text;
    m_approval_status_text_isSet = true;
}

bool OAITimeCardDto::is_approval_status_text_Set() const{
    return m_approval_status_text_isSet;
}

bool OAITimeCardDto::is_approval_status_text_Valid() const{
    return m_approval_status_text_isValid;
}

OAIEmployeeInTimeCardDto OAITimeCardDto::getEmployee() const {
    return m_employee;
}
void OAITimeCardDto::setEmployee(const OAIEmployeeInTimeCardDto &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAITimeCardDto::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAITimeCardDto::is_employee_Valid() const{
    return m_employee_isValid;
}

QString OAITimeCardDto::getErrorInfo() const {
    return m_error_info;
}
void OAITimeCardDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAITimeCardDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAITimeCardDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

qint32 OAITimeCardDto::getInvoiceable() const {
    return m_invoiceable;
}
void OAITimeCardDto::setInvoiceable(const qint32 &invoiceable) {
    m_invoiceable = invoiceable;
    m_invoiceable_isSet = true;
}

bool OAITimeCardDto::is_invoiceable_Set() const{
    return m_invoiceable_isSet;
}

bool OAITimeCardDto::is_invoiceable_Valid() const{
    return m_invoiceable_isValid;
}

qint32 OAITimeCardDto::getInvoiceableOvertime() const {
    return m_invoiceable_overtime;
}
void OAITimeCardDto::setInvoiceableOvertime(const qint32 &invoiceable_overtime) {
    m_invoiceable_overtime = invoiceable_overtime;
    m_invoiceable_overtime_isSet = true;
}

bool OAITimeCardDto::is_invoiceable_overtime_Set() const{
    return m_invoiceable_overtime_isSet;
}

bool OAITimeCardDto::is_invoiceable_overtime_Valid() const{
    return m_invoiceable_overtime_isValid;
}

qint32 OAITimeCardDto::getInvoiceableTotalTime() const {
    return m_invoiceable_total_time;
}
void OAITimeCardDto::setInvoiceableTotalTime(const qint32 &invoiceable_total_time) {
    m_invoiceable_total_time = invoiceable_total_time;
    m_invoiceable_total_time_isSet = true;
}

bool OAITimeCardDto::is_invoiceable_total_time_Set() const{
    return m_invoiceable_total_time_isSet;
}

bool OAITimeCardDto::is_invoiceable_total_time_Valid() const{
    return m_invoiceable_total_time_isValid;
}

QDateTime OAITimeCardDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAITimeCardDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAITimeCardDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAITimeCardDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QList<OAITimeCardMaterialsDto> OAITimeCardDto::getMaterials() const {
    return m_materials;
}
void OAITimeCardDto::setMaterials(const QList<OAITimeCardMaterialsDto> &materials) {
    m_materials = materials;
    m_materials_isSet = true;
}

bool OAITimeCardDto::is_materials_Set() const{
    return m_materials_isSet;
}

bool OAITimeCardDto::is_materials_Valid() const{
    return m_materials_isValid;
}

OAIMetadataDto OAITimeCardDto::getMetadata() const {
    return m_metadata;
}
void OAITimeCardDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAITimeCardDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAITimeCardDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAITimeCardDto::getOrigRefNbr() const {
    return m_orig_ref_nbr;
}
void OAITimeCardDto::setOrigRefNbr(const QString &orig_ref_nbr) {
    m_orig_ref_nbr = orig_ref_nbr;
    m_orig_ref_nbr_isSet = true;
}

bool OAITimeCardDto::is_orig_ref_nbr_Set() const{
    return m_orig_ref_nbr_isSet;
}

bool OAITimeCardDto::is_orig_ref_nbr_Valid() const{
    return m_orig_ref_nbr_isValid;
}

qint32 OAITimeCardDto::getOvertimeSpent() const {
    return m_overtime_spent;
}
void OAITimeCardDto::setOvertimeSpent(const qint32 &overtime_spent) {
    m_overtime_spent = overtime_spent;
    m_overtime_spent_isSet = true;
}

bool OAITimeCardDto::is_overtime_spent_Set() const{
    return m_overtime_spent_isSet;
}

bool OAITimeCardDto::is_overtime_spent_Valid() const{
    return m_overtime_spent_isValid;
}

QString OAITimeCardDto::getRefNbr() const {
    return m_ref_nbr;
}
void OAITimeCardDto::setRefNbr(const QString &ref_nbr) {
    m_ref_nbr = ref_nbr;
    m_ref_nbr_isSet = true;
}

bool OAITimeCardDto::is_ref_nbr_Set() const{
    return m_ref_nbr_isSet;
}

bool OAITimeCardDto::is_ref_nbr_Valid() const{
    return m_ref_nbr_isValid;
}

QString OAITimeCardDto::getStatus() const {
    return m_status;
}
void OAITimeCardDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITimeCardDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAITimeCardDto::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITimeCardSummaryDto> OAITimeCardDto::getSummary() const {
    return m_summary;
}
void OAITimeCardDto::setSummary(const QList<OAITimeCardSummaryDto> &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAITimeCardDto::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAITimeCardDto::is_summary_Valid() const{
    return m_summary_isValid;
}

qint32 OAITimeCardDto::getTimeSpent() const {
    return m_time_spent;
}
void OAITimeCardDto::setTimeSpent(const qint32 &time_spent) {
    m_time_spent = time_spent;
    m_time_spent_isSet = true;
}

bool OAITimeCardDto::is_time_spent_Set() const{
    return m_time_spent_isSet;
}

bool OAITimeCardDto::is_time_spent_Valid() const{
    return m_time_spent_isValid;
}

qint32 OAITimeCardDto::getTotalTimeSpent() const {
    return m_total_time_spent;
}
void OAITimeCardDto::setTotalTimeSpent(const qint32 &total_time_spent) {
    m_total_time_spent = total_time_spent;
    m_total_time_spent_isSet = true;
}

bool OAITimeCardDto::is_total_time_spent_Set() const{
    return m_total_time_spent_isSet;
}

bool OAITimeCardDto::is_total_time_spent_Valid() const{
    return m_total_time_spent_isValid;
}

QString OAITimeCardDto::getType() const {
    return m_type;
}
void OAITimeCardDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITimeCardDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAITimeCardDto::is_type_Valid() const{
    return m_type_isValid;
}

OAIWeekInTimeCardDto OAITimeCardDto::getWeek() const {
    return m_week;
}
void OAITimeCardDto::setWeek(const OAIWeekInTimeCardDto &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAITimeCardDto::is_week_Set() const{
    return m_week_isSet;
}

bool OAITimeCardDto::is_week_Valid() const{
    return m_week_isValid;
}

bool OAITimeCardDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_status_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiceable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiceable_overtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiceable_total_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_materials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overtime_spent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_spent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_spent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeCardDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
