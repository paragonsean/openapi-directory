/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesPersonDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesPersonDto::OAISalesPersonDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesPersonDto::OAISalesPersonDto() {
    this->initializeModel();
}

OAISalesPersonDto::~OAISalesPersonDto() {}

void OAISalesPersonDto::initializeModel() {

    m_commission_history_isSet = false;
    m_commission_history_isValid = false;

    m_commission_pct_isSet = false;
    m_commission_pct_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_customers_isSet = false;
    m_customers_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sales_sub_isSet = false;
    m_sales_sub_isValid = false;

    m_salesperson_id_isSet = false;
    m_salesperson_id_isValid = false;
}

void OAISalesPersonDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesPersonDto::fromJsonObject(QJsonObject json) {

    m_commission_history_isValid = ::OpenAPI::fromJsonValue(m_commission_history, json[QString("commissionHistory")]);
    m_commission_history_isSet = !json[QString("commissionHistory")].isNull() && m_commission_history_isValid;

    m_commission_pct_isValid = ::OpenAPI::fromJsonValue(m_commission_pct, json[QString("commissionPct")]);
    m_commission_pct_isSet = !json[QString("commissionPct")].isNull() && m_commission_pct_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_customers_isValid = ::OpenAPI::fromJsonValue(m_customers, json[QString("customers")]);
    m_customers_isSet = !json[QString("customers")].isNull() && m_customers_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sales_sub_isValid = ::OpenAPI::fromJsonValue(m_sales_sub, json[QString("salesSub")]);
    m_sales_sub_isSet = !json[QString("salesSub")].isNull() && m_sales_sub_isValid;

    m_salesperson_id_isValid = ::OpenAPI::fromJsonValue(m_salesperson_id, json[QString("salespersonID")]);
    m_salesperson_id_isSet = !json[QString("salespersonID")].isNull() && m_salesperson_id_isValid;
}

QString OAISalesPersonDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesPersonDto::asJsonObject() const {
    QJsonObject obj;
    if (m_commission_history.size() > 0) {
        obj.insert(QString("commissionHistory"), ::OpenAPI::toJsonValue(m_commission_history));
    }
    if (m_commission_pct_isSet) {
        obj.insert(QString("commissionPct"), ::OpenAPI::toJsonValue(m_commission_pct));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_customers.size() > 0) {
        obj.insert(QString("customers"), ::OpenAPI::toJsonValue(m_customers));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sales_sub.isSet()) {
        obj.insert(QString("salesSub"), ::OpenAPI::toJsonValue(m_sales_sub));
    }
    if (m_salesperson_id_isSet) {
        obj.insert(QString("salespersonID"), ::OpenAPI::toJsonValue(m_salesperson_id));
    }
    return obj;
}

QList<OAIARSPCommnHistoryDto> OAISalesPersonDto::getCommissionHistory() const {
    return m_commission_history;
}
void OAISalesPersonDto::setCommissionHistory(const QList<OAIARSPCommnHistoryDto> &commission_history) {
    m_commission_history = commission_history;
    m_commission_history_isSet = true;
}

bool OAISalesPersonDto::is_commission_history_Set() const{
    return m_commission_history_isSet;
}

bool OAISalesPersonDto::is_commission_history_Valid() const{
    return m_commission_history_isValid;
}

double OAISalesPersonDto::getCommissionPct() const {
    return m_commission_pct;
}
void OAISalesPersonDto::setCommissionPct(const double &commission_pct) {
    m_commission_pct = commission_pct;
    m_commission_pct_isSet = true;
}

bool OAISalesPersonDto::is_commission_pct_Set() const{
    return m_commission_pct_isSet;
}

bool OAISalesPersonDto::is_commission_pct_Valid() const{
    return m_commission_pct_isValid;
}

QDateTime OAISalesPersonDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAISalesPersonDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAISalesPersonDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAISalesPersonDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QList<OAICustSalesPeopleDto> OAISalesPersonDto::getCustomers() const {
    return m_customers;
}
void OAISalesPersonDto::setCustomers(const QList<OAICustSalesPeopleDto> &customers) {
    m_customers = customers;
    m_customers_isSet = true;
}

bool OAISalesPersonDto::is_customers_Set() const{
    return m_customers_isSet;
}

bool OAISalesPersonDto::is_customers_Valid() const{
    return m_customers_isValid;
}

QString OAISalesPersonDto::getErrorInfo() const {
    return m_error_info;
}
void OAISalesPersonDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAISalesPersonDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAISalesPersonDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

bool OAISalesPersonDto::isIsActive() const {
    return m_is_active;
}
void OAISalesPersonDto::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAISalesPersonDto::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAISalesPersonDto::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QDateTime OAISalesPersonDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAISalesPersonDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAISalesPersonDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAISalesPersonDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAIMetadataDto OAISalesPersonDto::getMetadata() const {
    return m_metadata;
}
void OAISalesPersonDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISalesPersonDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISalesPersonDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISalesPersonDto::getName() const {
    return m_name;
}
void OAISalesPersonDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISalesPersonDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAISalesPersonDto::is_name_Valid() const{
    return m_name_isValid;
}

OAISubAccountDescriptionDto OAISalesPersonDto::getSalesSub() const {
    return m_sales_sub;
}
void OAISalesPersonDto::setSalesSub(const OAISubAccountDescriptionDto &sales_sub) {
    m_sales_sub = sales_sub;
    m_sales_sub_isSet = true;
}

bool OAISalesPersonDto::is_sales_sub_Set() const{
    return m_sales_sub_isSet;
}

bool OAISalesPersonDto::is_sales_sub_Valid() const{
    return m_sales_sub_isValid;
}

QString OAISalesPersonDto::getSalespersonId() const {
    return m_salesperson_id;
}
void OAISalesPersonDto::setSalespersonId(const QString &salesperson_id) {
    m_salesperson_id = salesperson_id;
    m_salesperson_id_isSet = true;
}

bool OAISalesPersonDto::is_salesperson_id_Set() const{
    return m_salesperson_id_isSet;
}

bool OAISalesPersonDto::is_salesperson_id_Valid() const{
    return m_salesperson_id_isValid;
}

bool OAISalesPersonDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commission_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesperson_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesPersonDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
