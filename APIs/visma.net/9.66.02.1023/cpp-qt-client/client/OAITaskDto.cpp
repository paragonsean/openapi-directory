/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskDto::OAITaskDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskDto::OAITaskDto() {
    this->initializeModel();
}

OAITaskDto::~OAITaskDto() {}

void OAITaskDto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_employees_isSet = false;
    m_employees_isValid = false;

    m_planned_end_isSet = false;
    m_planned_end_isValid = false;

    m_planned_start_isSet = false;
    m_planned_start_isValid = false;

    m_rate_table_isSet = false;
    m_rate_table_isValid = false;

    m_restrict_employees_isSet = false;
    m_restrict_employees_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAITaskDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskDto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employees_isValid = ::OpenAPI::fromJsonValue(m_employees, json[QString("employees")]);
    m_employees_isSet = !json[QString("employees")].isNull() && m_employees_isValid;

    m_planned_end_isValid = ::OpenAPI::fromJsonValue(m_planned_end, json[QString("plannedEnd")]);
    m_planned_end_isSet = !json[QString("plannedEnd")].isNull() && m_planned_end_isValid;

    m_planned_start_isValid = ::OpenAPI::fromJsonValue(m_planned_start, json[QString("plannedStart")]);
    m_planned_start_isSet = !json[QString("plannedStart")].isNull() && m_planned_start_isValid;

    m_rate_table_isValid = ::OpenAPI::fromJsonValue(m_rate_table, json[QString("rateTable")]);
    m_rate_table_isSet = !json[QString("rateTable")].isNull() && m_rate_table_isValid;

    m_restrict_employees_isValid = ::OpenAPI::fromJsonValue(m_restrict_employees, json[QString("restrictEmployees")]);
    m_restrict_employees_isSet = !json[QString("restrictEmployees")].isNull() && m_restrict_employees_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAITaskDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskDto::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employees.size() > 0) {
        obj.insert(QString("employees"), ::OpenAPI::toJsonValue(m_employees));
    }
    if (m_planned_end_isSet) {
        obj.insert(QString("plannedEnd"), ::OpenAPI::toJsonValue(m_planned_end));
    }
    if (m_planned_start_isSet) {
        obj.insert(QString("plannedStart"), ::OpenAPI::toJsonValue(m_planned_start));
    }
    if (m_rate_table.isSet()) {
        obj.insert(QString("rateTable"), ::OpenAPI::toJsonValue(m_rate_table));
    }
    if (m_restrict_employees_isSet) {
        obj.insert(QString("restrictEmployees"), ::OpenAPI::toJsonValue(m_restrict_employees));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAITaskDto::getDescription() const {
    return m_description;
}
void OAITaskDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITaskDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAITaskDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEmployeeDto> OAITaskDto::getEmployees() const {
    return m_employees;
}
void OAITaskDto::setEmployees(const QList<OAIEmployeeDto> &employees) {
    m_employees = employees;
    m_employees_isSet = true;
}

bool OAITaskDto::is_employees_Set() const{
    return m_employees_isSet;
}

bool OAITaskDto::is_employees_Valid() const{
    return m_employees_isValid;
}

QDateTime OAITaskDto::getPlannedEnd() const {
    return m_planned_end;
}
void OAITaskDto::setPlannedEnd(const QDateTime &planned_end) {
    m_planned_end = planned_end;
    m_planned_end_isSet = true;
}

bool OAITaskDto::is_planned_end_Set() const{
    return m_planned_end_isSet;
}

bool OAITaskDto::is_planned_end_Valid() const{
    return m_planned_end_isValid;
}

QDateTime OAITaskDto::getPlannedStart() const {
    return m_planned_start;
}
void OAITaskDto::setPlannedStart(const QDateTime &planned_start) {
    m_planned_start = planned_start;
    m_planned_start_isSet = true;
}

bool OAITaskDto::is_planned_start_Set() const{
    return m_planned_start_isSet;
}

bool OAITaskDto::is_planned_start_Valid() const{
    return m_planned_start_isValid;
}

OAIRateTableIdDescriptionDto OAITaskDto::getRateTable() const {
    return m_rate_table;
}
void OAITaskDto::setRateTable(const OAIRateTableIdDescriptionDto &rate_table) {
    m_rate_table = rate_table;
    m_rate_table_isSet = true;
}

bool OAITaskDto::is_rate_table_Set() const{
    return m_rate_table_isSet;
}

bool OAITaskDto::is_rate_table_Valid() const{
    return m_rate_table_isValid;
}

bool OAITaskDto::isRestrictEmployees() const {
    return m_restrict_employees;
}
void OAITaskDto::setRestrictEmployees(const bool &restrict_employees) {
    m_restrict_employees = restrict_employees;
    m_restrict_employees_isSet = true;
}

bool OAITaskDto::is_restrict_employees_Set() const{
    return m_restrict_employees_isSet;
}

bool OAITaskDto::is_restrict_employees_Valid() const{
    return m_restrict_employees_isValid;
}

QDateTime OAITaskDto::getStartDate() const {
    return m_start_date;
}
void OAITaskDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITaskDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITaskDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAITaskDto::getStatus() const {
    return m_status;
}
void OAITaskDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaskDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaskDto::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITaskDto::getTaskId() const {
    return m_task_id;
}
void OAITaskDto::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAITaskDto::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAITaskDto::is_task_id_Valid() const{
    return m_task_id_isValid;
}

OAIVisibilityDto OAITaskDto::getVisibility() const {
    return m_visibility;
}
void OAITaskDto::setVisibility(const OAIVisibilityDto &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAITaskDto::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAITaskDto::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAITaskDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrict_employees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
