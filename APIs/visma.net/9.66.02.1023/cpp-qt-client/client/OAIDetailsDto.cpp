/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailsDto::OAIDetailsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailsDto::OAIDetailsDto() {
    this->initializeModel();
}

OAIDetailsDto::~OAIDetailsDto() {}

void OAIDetailsDto::initializeModel() {

    m_acquisition_cost_isSet = false;
    m_acquisition_cost_isValid = false;

    m_bill_number_isSet = false;
    m_bill_number_isValid = false;

    m_depreciate_from_date_isSet = false;
    m_depreciate_from_date_isValid = false;

    m_disposal_date_isSet = false;
    m_disposal_date_isValid = false;

    m_disposal_method_isSet = false;
    m_disposal_method_isValid = false;

    m_disposal_method_id_isSet = false;
    m_disposal_method_id_isValid = false;

    m_disposal_period_id_isSet = false;
    m_disposal_period_id_isValid = false;

    m_lease_and_rent_info_isSet = false;
    m_lease_and_rent_info_isValid = false;

    m_property_type_isSet = false;
    m_property_type_isValid = false;

    m_receipt_date_isSet = false;
    m_receipt_date_isValid = false;

    m_sale_amount_isSet = false;
    m_sale_amount_isValid = false;

    m_salvage_amount_isSet = false;
    m_salvage_amount_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDetailsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailsDto::fromJsonObject(QJsonObject json) {

    m_acquisition_cost_isValid = ::OpenAPI::fromJsonValue(m_acquisition_cost, json[QString("acquisitionCost")]);
    m_acquisition_cost_isSet = !json[QString("acquisitionCost")].isNull() && m_acquisition_cost_isValid;

    m_bill_number_isValid = ::OpenAPI::fromJsonValue(m_bill_number, json[QString("billNumber")]);
    m_bill_number_isSet = !json[QString("billNumber")].isNull() && m_bill_number_isValid;

    m_depreciate_from_date_isValid = ::OpenAPI::fromJsonValue(m_depreciate_from_date, json[QString("depreciateFromDate")]);
    m_depreciate_from_date_isSet = !json[QString("depreciateFromDate")].isNull() && m_depreciate_from_date_isValid;

    m_disposal_date_isValid = ::OpenAPI::fromJsonValue(m_disposal_date, json[QString("disposalDate")]);
    m_disposal_date_isSet = !json[QString("disposalDate")].isNull() && m_disposal_date_isValid;

    m_disposal_method_isValid = ::OpenAPI::fromJsonValue(m_disposal_method, json[QString("disposalMethod")]);
    m_disposal_method_isSet = !json[QString("disposalMethod")].isNull() && m_disposal_method_isValid;

    m_disposal_method_id_isValid = ::OpenAPI::fromJsonValue(m_disposal_method_id, json[QString("disposalMethodID")]);
    m_disposal_method_id_isSet = !json[QString("disposalMethodID")].isNull() && m_disposal_method_id_isValid;

    m_disposal_period_id_isValid = ::OpenAPI::fromJsonValue(m_disposal_period_id, json[QString("disposalPeriodID")]);
    m_disposal_period_id_isSet = !json[QString("disposalPeriodID")].isNull() && m_disposal_period_id_isValid;

    m_lease_and_rent_info_isValid = ::OpenAPI::fromJsonValue(m_lease_and_rent_info, json[QString("leaseAndRentInfo")]);
    m_lease_and_rent_info_isSet = !json[QString("leaseAndRentInfo")].isNull() && m_lease_and_rent_info_isValid;

    m_property_type_isValid = ::OpenAPI::fromJsonValue(m_property_type, json[QString("propertyType")]);
    m_property_type_isSet = !json[QString("propertyType")].isNull() && m_property_type_isValid;

    m_receipt_date_isValid = ::OpenAPI::fromJsonValue(m_receipt_date, json[QString("receiptDate")]);
    m_receipt_date_isSet = !json[QString("receiptDate")].isNull() && m_receipt_date_isValid;

    m_sale_amount_isValid = ::OpenAPI::fromJsonValue(m_sale_amount, json[QString("saleAmount")]);
    m_sale_amount_isSet = !json[QString("saleAmount")].isNull() && m_sale_amount_isValid;

    m_salvage_amount_isValid = ::OpenAPI::fromJsonValue(m_salvage_amount, json[QString("salvageAmount")]);
    m_salvage_amount_isSet = !json[QString("salvageAmount")].isNull() && m_salvage_amount_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDetailsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_cost_isSet) {
        obj.insert(QString("acquisitionCost"), ::OpenAPI::toJsonValue(m_acquisition_cost));
    }
    if (m_bill_number_isSet) {
        obj.insert(QString("billNumber"), ::OpenAPI::toJsonValue(m_bill_number));
    }
    if (m_depreciate_from_date_isSet) {
        obj.insert(QString("depreciateFromDate"), ::OpenAPI::toJsonValue(m_depreciate_from_date));
    }
    if (m_disposal_date_isSet) {
        obj.insert(QString("disposalDate"), ::OpenAPI::toJsonValue(m_disposal_date));
    }
    if (m_disposal_method.isSet()) {
        obj.insert(QString("disposalMethod"), ::OpenAPI::toJsonValue(m_disposal_method));
    }
    if (m_disposal_method_id_isSet) {
        obj.insert(QString("disposalMethodID"), ::OpenAPI::toJsonValue(m_disposal_method_id));
    }
    if (m_disposal_period_id_isSet) {
        obj.insert(QString("disposalPeriodID"), ::OpenAPI::toJsonValue(m_disposal_period_id));
    }
    if (m_lease_and_rent_info.isSet()) {
        obj.insert(QString("leaseAndRentInfo"), ::OpenAPI::toJsonValue(m_lease_and_rent_info));
    }
    if (m_property_type_isSet) {
        obj.insert(QString("propertyType"), ::OpenAPI::toJsonValue(m_property_type));
    }
    if (m_receipt_date_isSet) {
        obj.insert(QString("receiptDate"), ::OpenAPI::toJsonValue(m_receipt_date));
    }
    if (m_sale_amount_isSet) {
        obj.insert(QString("saleAmount"), ::OpenAPI::toJsonValue(m_sale_amount));
    }
    if (m_salvage_amount_isSet) {
        obj.insert(QString("salvageAmount"), ::OpenAPI::toJsonValue(m_salvage_amount));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

double OAIDetailsDto::getAcquisitionCost() const {
    return m_acquisition_cost;
}
void OAIDetailsDto::setAcquisitionCost(const double &acquisition_cost) {
    m_acquisition_cost = acquisition_cost;
    m_acquisition_cost_isSet = true;
}

bool OAIDetailsDto::is_acquisition_cost_Set() const{
    return m_acquisition_cost_isSet;
}

bool OAIDetailsDto::is_acquisition_cost_Valid() const{
    return m_acquisition_cost_isValid;
}

QString OAIDetailsDto::getBillNumber() const {
    return m_bill_number;
}
void OAIDetailsDto::setBillNumber(const QString &bill_number) {
    m_bill_number = bill_number;
    m_bill_number_isSet = true;
}

bool OAIDetailsDto::is_bill_number_Set() const{
    return m_bill_number_isSet;
}

bool OAIDetailsDto::is_bill_number_Valid() const{
    return m_bill_number_isValid;
}

QDateTime OAIDetailsDto::getDepreciateFromDate() const {
    return m_depreciate_from_date;
}
void OAIDetailsDto::setDepreciateFromDate(const QDateTime &depreciate_from_date) {
    m_depreciate_from_date = depreciate_from_date;
    m_depreciate_from_date_isSet = true;
}

bool OAIDetailsDto::is_depreciate_from_date_Set() const{
    return m_depreciate_from_date_isSet;
}

bool OAIDetailsDto::is_depreciate_from_date_Valid() const{
    return m_depreciate_from_date_isValid;
}

QDateTime OAIDetailsDto::getDisposalDate() const {
    return m_disposal_date;
}
void OAIDetailsDto::setDisposalDate(const QDateTime &disposal_date) {
    m_disposal_date = disposal_date;
    m_disposal_date_isSet = true;
}

bool OAIDetailsDto::is_disposal_date_Set() const{
    return m_disposal_date_isSet;
}

bool OAIDetailsDto::is_disposal_date_Valid() const{
    return m_disposal_date_isValid;
}

OAIDisposalMethodInDetailsDto OAIDetailsDto::getDisposalMethod() const {
    return m_disposal_method;
}
void OAIDetailsDto::setDisposalMethod(const OAIDisposalMethodInDetailsDto &disposal_method) {
    m_disposal_method = disposal_method;
    m_disposal_method_isSet = true;
}

bool OAIDetailsDto::is_disposal_method_Set() const{
    return m_disposal_method_isSet;
}

bool OAIDetailsDto::is_disposal_method_Valid() const{
    return m_disposal_method_isValid;
}

qint32 OAIDetailsDto::getDisposalMethodId() const {
    return m_disposal_method_id;
}
void OAIDetailsDto::setDisposalMethodId(const qint32 &disposal_method_id) {
    m_disposal_method_id = disposal_method_id;
    m_disposal_method_id_isSet = true;
}

bool OAIDetailsDto::is_disposal_method_id_Set() const{
    return m_disposal_method_id_isSet;
}

bool OAIDetailsDto::is_disposal_method_id_Valid() const{
    return m_disposal_method_id_isValid;
}

QString OAIDetailsDto::getDisposalPeriodId() const {
    return m_disposal_period_id;
}
void OAIDetailsDto::setDisposalPeriodId(const QString &disposal_period_id) {
    m_disposal_period_id = disposal_period_id;
    m_disposal_period_id_isSet = true;
}

bool OAIDetailsDto::is_disposal_period_id_Set() const{
    return m_disposal_period_id_isSet;
}

bool OAIDetailsDto::is_disposal_period_id_Valid() const{
    return m_disposal_period_id_isValid;
}

OAILeaseAndRentInfoInDetailsDto OAIDetailsDto::getLeaseAndRentInfo() const {
    return m_lease_and_rent_info;
}
void OAIDetailsDto::setLeaseAndRentInfo(const OAILeaseAndRentInfoInDetailsDto &lease_and_rent_info) {
    m_lease_and_rent_info = lease_and_rent_info;
    m_lease_and_rent_info_isSet = true;
}

bool OAIDetailsDto::is_lease_and_rent_info_Set() const{
    return m_lease_and_rent_info_isSet;
}

bool OAIDetailsDto::is_lease_and_rent_info_Valid() const{
    return m_lease_and_rent_info_isValid;
}

QString OAIDetailsDto::getPropertyType() const {
    return m_property_type;
}
void OAIDetailsDto::setPropertyType(const QString &property_type) {
    m_property_type = property_type;
    m_property_type_isSet = true;
}

bool OAIDetailsDto::is_property_type_Set() const{
    return m_property_type_isSet;
}

bool OAIDetailsDto::is_property_type_Valid() const{
    return m_property_type_isValid;
}

QDateTime OAIDetailsDto::getReceiptDate() const {
    return m_receipt_date;
}
void OAIDetailsDto::setReceiptDate(const QDateTime &receipt_date) {
    m_receipt_date = receipt_date;
    m_receipt_date_isSet = true;
}

bool OAIDetailsDto::is_receipt_date_Set() const{
    return m_receipt_date_isSet;
}

bool OAIDetailsDto::is_receipt_date_Valid() const{
    return m_receipt_date_isValid;
}

double OAIDetailsDto::getSaleAmount() const {
    return m_sale_amount;
}
void OAIDetailsDto::setSaleAmount(const double &sale_amount) {
    m_sale_amount = sale_amount;
    m_sale_amount_isSet = true;
}

bool OAIDetailsDto::is_sale_amount_Set() const{
    return m_sale_amount_isSet;
}

bool OAIDetailsDto::is_sale_amount_Valid() const{
    return m_sale_amount_isValid;
}

double OAIDetailsDto::getSalvageAmount() const {
    return m_salvage_amount;
}
void OAIDetailsDto::setSalvageAmount(const double &salvage_amount) {
    m_salvage_amount = salvage_amount;
    m_salvage_amount_isSet = true;
}

bool OAIDetailsDto::is_salvage_amount_Set() const{
    return m_salvage_amount_isSet;
}

bool OAIDetailsDto::is_salvage_amount_Valid() const{
    return m_salvage_amount_isValid;
}

QString OAIDetailsDto::getSerialNumber() const {
    return m_serial_number;
}
void OAIDetailsDto::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDetailsDto::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDetailsDto::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIDetailsDto::getStatus() const {
    return m_status;
}
void OAIDetailsDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDetailsDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDetailsDto::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDetailsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciate_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposal_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposal_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposal_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposal_period_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_and_rent_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salvage_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
