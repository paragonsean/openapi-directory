/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierInvoiceLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierInvoiceLineUpdateDto::OAISupplierInvoiceLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierInvoiceLineUpdateDto::OAISupplierInvoiceLineUpdateDto() {
    this->initializeModel();
}

OAISupplierInvoiceLineUpdateDto::~OAISupplierInvoiceLineUpdateDto() {}

void OAISupplierInvoiceLineUpdateDto::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cost_in_currency_isSet = false;
    m_cost_in_currency_isValid = false;

    m_cury_retainage_amt_isSet = false;
    m_cury_retainage_amt_isValid = false;

    m_deferral_code_isSet = false;
    m_deferral_code_isValid = false;

    m_deferral_schedule_isSet = false;
    m_deferral_schedule_isValid = false;

    m_discount_amount_in_currency_isSet = false;
    m_discount_amount_in_currency_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_discount_unit_cost_in_currency_isSet = false;
    m_discount_unit_cost_in_currency_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_link_line_isSet = false;
    m_link_line_isValid = false;

    m_manual_discount_isSet = false;
    m_manual_discount_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_task_id_isSet = false;
    m_project_task_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_retainage_pct_isSet = false;
    m_retainage_pct_isValid = false;

    m_split_hierarchy_isSet = false;
    m_split_hierarchy_isValid = false;

    m_split_line_isSet = false;
    m_split_line_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_term_end_date_isSet = false;
    m_term_end_date_isValid = false;

    m_term_start_date_isSet = false;
    m_term_start_date_isValid = false;

    m_transaction_description_isSet = false;
    m_transaction_description_isValid = false;

    m_undo_split_line_isSet = false;
    m_undo_split_line_isValid = false;

    m_unit_cost_in_currency_isSet = false;
    m_unit_cost_in_currency_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_vat_code_id_isSet = false;
    m_vat_code_id_isValid = false;
}

void OAISupplierInvoiceLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierInvoiceLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cost_in_currency_isValid = ::OpenAPI::fromJsonValue(m_cost_in_currency, json[QString("costInCurrency")]);
    m_cost_in_currency_isSet = !json[QString("costInCurrency")].isNull() && m_cost_in_currency_isValid;

    m_cury_retainage_amt_isValid = ::OpenAPI::fromJsonValue(m_cury_retainage_amt, json[QString("curyRetainageAmt")]);
    m_cury_retainage_amt_isSet = !json[QString("curyRetainageAmt")].isNull() && m_cury_retainage_amt_isValid;

    m_deferral_code_isValid = ::OpenAPI::fromJsonValue(m_deferral_code, json[QString("deferralCode")]);
    m_deferral_code_isSet = !json[QString("deferralCode")].isNull() && m_deferral_code_isValid;

    m_deferral_schedule_isValid = ::OpenAPI::fromJsonValue(m_deferral_schedule, json[QString("deferralSchedule")]);
    m_deferral_schedule_isSet = !json[QString("deferralSchedule")].isNull() && m_deferral_schedule_isValid;

    m_discount_amount_in_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_amount_in_currency, json[QString("discountAmountInCurrency")]);
    m_discount_amount_in_currency_isSet = !json[QString("discountAmountInCurrency")].isNull() && m_discount_amount_in_currency_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discountPercent")]);
    m_discount_percent_isSet = !json[QString("discountPercent")].isNull() && m_discount_percent_isValid;

    m_discount_unit_cost_in_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_unit_cost_in_currency, json[QString("discountUnitCostInCurrency")]);
    m_discount_unit_cost_in_currency_isSet = !json[QString("discountUnitCostInCurrency")].isNull() && m_discount_unit_cost_in_currency_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_link_line_isValid = ::OpenAPI::fromJsonValue(m_link_line, json[QString("linkLine")]);
    m_link_line_isSet = !json[QString("linkLine")].isNull() && m_link_line_isValid;

    m_manual_discount_isValid = ::OpenAPI::fromJsonValue(m_manual_discount, json[QString("manualDiscount")]);
    m_manual_discount_isSet = !json[QString("manualDiscount")].isNull() && m_manual_discount_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_project_task_id_isValid = ::OpenAPI::fromJsonValue(m_project_task_id, json[QString("projectTaskId")]);
    m_project_task_id_isSet = !json[QString("projectTaskId")].isNull() && m_project_task_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_retainage_pct_isValid = ::OpenAPI::fromJsonValue(m_retainage_pct, json[QString("retainagePct")]);
    m_retainage_pct_isSet = !json[QString("retainagePct")].isNull() && m_retainage_pct_isValid;

    m_split_hierarchy_isValid = ::OpenAPI::fromJsonValue(m_split_hierarchy, json[QString("splitHierarchy")]);
    m_split_hierarchy_isSet = !json[QString("splitHierarchy")].isNull() && m_split_hierarchy_isValid;

    m_split_line_isValid = ::OpenAPI::fromJsonValue(m_split_line, json[QString("splitLine")]);
    m_split_line_isSet = !json[QString("splitLine")].isNull() && m_split_line_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_term_end_date_isValid = ::OpenAPI::fromJsonValue(m_term_end_date, json[QString("termEndDate")]);
    m_term_end_date_isSet = !json[QString("termEndDate")].isNull() && m_term_end_date_isValid;

    m_term_start_date_isValid = ::OpenAPI::fromJsonValue(m_term_start_date, json[QString("termStartDate")]);
    m_term_start_date_isSet = !json[QString("termStartDate")].isNull() && m_term_start_date_isValid;

    m_transaction_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_description, json[QString("transactionDescription")]);
    m_transaction_description_isSet = !json[QString("transactionDescription")].isNull() && m_transaction_description_isValid;

    m_undo_split_line_isValid = ::OpenAPI::fromJsonValue(m_undo_split_line, json[QString("undoSplitLine")]);
    m_undo_split_line_isSet = !json[QString("undoSplitLine")].isNull() && m_undo_split_line_isValid;

    m_unit_cost_in_currency_isValid = ::OpenAPI::fromJsonValue(m_unit_cost_in_currency, json[QString("unitCostInCurrency")]);
    m_unit_cost_in_currency_isSet = !json[QString("unitCostInCurrency")].isNull() && m_unit_cost_in_currency_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;

    m_vat_code_id_isValid = ::OpenAPI::fromJsonValue(m_vat_code_id, json[QString("vatCodeId")]);
    m_vat_code_id_isSet = !json[QString("vatCodeId")].isNull() && m_vat_code_id_isValid;
}

QString OAISupplierInvoiceLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierInvoiceLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number.isSet()) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_branch.isSet()) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cost_in_currency.isSet()) {
        obj.insert(QString("costInCurrency"), ::OpenAPI::toJsonValue(m_cost_in_currency));
    }
    if (m_cury_retainage_amt.isSet()) {
        obj.insert(QString("curyRetainageAmt"), ::OpenAPI::toJsonValue(m_cury_retainage_amt));
    }
    if (m_deferral_code.isSet()) {
        obj.insert(QString("deferralCode"), ::OpenAPI::toJsonValue(m_deferral_code));
    }
    if (m_deferral_schedule.isSet()) {
        obj.insert(QString("deferralSchedule"), ::OpenAPI::toJsonValue(m_deferral_schedule));
    }
    if (m_discount_amount_in_currency.isSet()) {
        obj.insert(QString("discountAmountInCurrency"), ::OpenAPI::toJsonValue(m_discount_amount_in_currency));
    }
    if (m_discount_percent.isSet()) {
        obj.insert(QString("discountPercent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_discount_unit_cost_in_currency.isSet()) {
        obj.insert(QString("discountUnitCostInCurrency"), ::OpenAPI::toJsonValue(m_discount_unit_cost_in_currency));
    }
    if (m_inventory_number.isSet()) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_line_number.isSet()) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_link_line.isSet()) {
        obj.insert(QString("linkLine"), ::OpenAPI::toJsonValue(m_link_line));
    }
    if (m_manual_discount.isSet()) {
        obj.insert(QString("manualDiscount"), ::OpenAPI::toJsonValue(m_manual_discount));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_project_id.isSet()) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_task_id.isSet()) {
        obj.insert(QString("projectTaskId"), ::OpenAPI::toJsonValue(m_project_task_id));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_retainage_pct.isSet()) {
        obj.insert(QString("retainagePct"), ::OpenAPI::toJsonValue(m_retainage_pct));
    }
    if (m_split_hierarchy.isSet()) {
        obj.insert(QString("splitHierarchy"), ::OpenAPI::toJsonValue(m_split_hierarchy));
    }
    if (m_split_line.isSet()) {
        obj.insert(QString("splitLine"), ::OpenAPI::toJsonValue(m_split_line));
    }
    if (m_subaccount.size() > 0) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_term_end_date.isSet()) {
        obj.insert(QString("termEndDate"), ::OpenAPI::toJsonValue(m_term_end_date));
    }
    if (m_term_start_date.isSet()) {
        obj.insert(QString("termStartDate"), ::OpenAPI::toJsonValue(m_term_start_date));
    }
    if (m_transaction_description.isSet()) {
        obj.insert(QString("transactionDescription"), ::OpenAPI::toJsonValue(m_transaction_description));
    }
    if (m_undo_split_line.isSet()) {
        obj.insert(QString("undoSplitLine"), ::OpenAPI::toJsonValue(m_undo_split_line));
    }
    if (m_unit_cost_in_currency.isSet()) {
        obj.insert(QString("unitCostInCurrency"), ::OpenAPI::toJsonValue(m_unit_cost_in_currency));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_vat_code_id.isSet()) {
        obj.insert(QString("vatCodeId"), ::OpenAPI::toJsonValue(m_vat_code_id));
    }
    return obj;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getAccountNumber() const {
    return m_account_number;
}
void OAISupplierInvoiceLineUpdateDto::setAccountNumber(const OAIDtoValueOfString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_account_number_Valid() const{
    return m_account_number_isValid;
}

OAIBranchInSupplierInvoiceLineUpdateDto OAISupplierInvoiceLineUpdateDto::getBranch() const {
    return m_branch;
}
void OAISupplierInvoiceLineUpdateDto::setBranch(const OAIBranchInSupplierInvoiceLineUpdateDto &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISupplierInvoiceLineUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISupplierInvoiceLineUpdateDto::getCostInCurrency() const {
    return m_cost_in_currency;
}
void OAISupplierInvoiceLineUpdateDto::setCostInCurrency(const OAIDtoValueOfNullableOfDecimal &cost_in_currency) {
    m_cost_in_currency = cost_in_currency;
    m_cost_in_currency_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_cost_in_currency_Set() const{
    return m_cost_in_currency_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_cost_in_currency_Valid() const{
    return m_cost_in_currency_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISupplierInvoiceLineUpdateDto::getCuryRetainageAmt() const {
    return m_cury_retainage_amt;
}
void OAISupplierInvoiceLineUpdateDto::setCuryRetainageAmt(const OAIDtoValueOfNullableOfDecimal &cury_retainage_amt) {
    m_cury_retainage_amt = cury_retainage_amt;
    m_cury_retainage_amt_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_cury_retainage_amt_Set() const{
    return m_cury_retainage_amt_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_cury_retainage_amt_Valid() const{
    return m_cury_retainage_amt_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getDeferralCode() const {
    return m_deferral_code;
}
void OAISupplierInvoiceLineUpdateDto::setDeferralCode(const OAIDtoValueOfString &deferral_code) {
    m_deferral_code = deferral_code;
    m_deferral_code_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_deferral_code_Set() const{
    return m_deferral_code_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_deferral_code_Valid() const{
    return m_deferral_code_isValid;
}

OAIDtoValueOfNullableOfInt32 OAISupplierInvoiceLineUpdateDto::getDeferralSchedule() const {
    return m_deferral_schedule;
}
void OAISupplierInvoiceLineUpdateDto::setDeferralSchedule(const OAIDtoValueOfNullableOfInt32 &deferral_schedule) {
    m_deferral_schedule = deferral_schedule;
    m_deferral_schedule_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_deferral_schedule_Set() const{
    return m_deferral_schedule_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_deferral_schedule_Valid() const{
    return m_deferral_schedule_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISupplierInvoiceLineUpdateDto::getDiscountAmountInCurrency() const {
    return m_discount_amount_in_currency;
}
void OAISupplierInvoiceLineUpdateDto::setDiscountAmountInCurrency(const OAIDtoValueOfNullableOfDecimal &discount_amount_in_currency) {
    m_discount_amount_in_currency = discount_amount_in_currency;
    m_discount_amount_in_currency_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_discount_amount_in_currency_Set() const{
    return m_discount_amount_in_currency_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_discount_amount_in_currency_Valid() const{
    return m_discount_amount_in_currency_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISupplierInvoiceLineUpdateDto::getDiscountPercent() const {
    return m_discount_percent;
}
void OAISupplierInvoiceLineUpdateDto::setDiscountPercent(const OAIDtoValueOfNullableOfDecimal &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISupplierInvoiceLineUpdateDto::getDiscountUnitCostInCurrency() const {
    return m_discount_unit_cost_in_currency;
}
void OAISupplierInvoiceLineUpdateDto::setDiscountUnitCostInCurrency(const OAIDtoValueOfNullableOfDecimal &discount_unit_cost_in_currency) {
    m_discount_unit_cost_in_currency = discount_unit_cost_in_currency;
    m_discount_unit_cost_in_currency_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_discount_unit_cost_in_currency_Set() const{
    return m_discount_unit_cost_in_currency_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_discount_unit_cost_in_currency_Valid() const{
    return m_discount_unit_cost_in_currency_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAISupplierInvoiceLineUpdateDto::setInventoryNumber(const OAIDtoValueOfString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

OAIDtoValueOfInt32 OAISupplierInvoiceLineUpdateDto::getLineNumber() const {
    return m_line_number;
}
void OAISupplierInvoiceLineUpdateDto::setLineNumber(const OAIDtoValueOfInt32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAILinkLineDto OAISupplierInvoiceLineUpdateDto::getLinkLine() const {
    return m_link_line;
}
void OAISupplierInvoiceLineUpdateDto::setLinkLine(const OAILinkLineDto &link_line) {
    m_link_line = link_line;
    m_link_line_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_link_line_Set() const{
    return m_link_line_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_link_line_Valid() const{
    return m_link_line_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISupplierInvoiceLineUpdateDto::getManualDiscount() const {
    return m_manual_discount;
}
void OAISupplierInvoiceLineUpdateDto::setManualDiscount(const OAIDtoValueOfNullableOfBoolean &manual_discount) {
    m_manual_discount = manual_discount;
    m_manual_discount_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_manual_discount_Set() const{
    return m_manual_discount_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_manual_discount_Valid() const{
    return m_manual_discount_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getNote() const {
    return m_note;
}
void OAISupplierInvoiceLineUpdateDto::setNote(const OAIDtoValueOfString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISupplierInvoiceLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAISupplierInvoiceLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getProjectId() const {
    return m_project_id;
}
void OAISupplierInvoiceLineUpdateDto::setProjectId(const OAIDtoValueOfString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getProjectTaskId() const {
    return m_project_task_id;
}
void OAISupplierInvoiceLineUpdateDto::setProjectTaskId(const OAIDtoValueOfString &project_task_id) {
    m_project_task_id = project_task_id;
    m_project_task_id_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_project_task_id_Set() const{
    return m_project_task_id_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_project_task_id_Valid() const{
    return m_project_task_id_isValid;
}

OAIDtoValueOfDecimal OAISupplierInvoiceLineUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAISupplierInvoiceLineUpdateDto::setQuantity(const OAIDtoValueOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISupplierInvoiceLineUpdateDto::getRetainagePct() const {
    return m_retainage_pct;
}
void OAISupplierInvoiceLineUpdateDto::setRetainagePct(const OAIDtoValueOfNullableOfDecimal &retainage_pct) {
    m_retainage_pct = retainage_pct;
    m_retainage_pct_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_retainage_pct_Set() const{
    return m_retainage_pct_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_retainage_pct_Valid() const{
    return m_retainage_pct_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getSplitHierarchy() const {
    return m_split_hierarchy;
}
void OAISupplierInvoiceLineUpdateDto::setSplitHierarchy(const OAIDtoValueOfString &split_hierarchy) {
    m_split_hierarchy = split_hierarchy;
    m_split_hierarchy_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_split_hierarchy_Set() const{
    return m_split_hierarchy_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_split_hierarchy_Valid() const{
    return m_split_hierarchy_isValid;
}

OAIDtoValueOfBoolean OAISupplierInvoiceLineUpdateDto::getSplitLine() const {
    return m_split_line;
}
void OAISupplierInvoiceLineUpdateDto::setSplitLine(const OAIDtoValueOfBoolean &split_line) {
    m_split_line = split_line;
    m_split_line_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_split_line_Set() const{
    return m_split_line_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_split_line_Valid() const{
    return m_split_line_isValid;
}

QList<OAISegmentUpdateDto> OAISupplierInvoiceLineUpdateDto::getSubaccount() const {
    return m_subaccount;
}
void OAISupplierInvoiceLineUpdateDto::setSubaccount(const QList<OAISegmentUpdateDto> &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISupplierInvoiceLineUpdateDto::getTermEndDate() const {
    return m_term_end_date;
}
void OAISupplierInvoiceLineUpdateDto::setTermEndDate(const OAIDtoValueOfNullableOfDateTime &term_end_date) {
    m_term_end_date = term_end_date;
    m_term_end_date_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_term_end_date_Set() const{
    return m_term_end_date_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_term_end_date_Valid() const{
    return m_term_end_date_isValid;
}

OAIDtoValueOfNullableOfDateTime OAISupplierInvoiceLineUpdateDto::getTermStartDate() const {
    return m_term_start_date;
}
void OAISupplierInvoiceLineUpdateDto::setTermStartDate(const OAIDtoValueOfNullableOfDateTime &term_start_date) {
    m_term_start_date = term_start_date;
    m_term_start_date_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_term_start_date_Set() const{
    return m_term_start_date_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_term_start_date_Valid() const{
    return m_term_start_date_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getTransactionDescription() const {
    return m_transaction_description;
}
void OAISupplierInvoiceLineUpdateDto::setTransactionDescription(const OAIDtoValueOfString &transaction_description) {
    m_transaction_description = transaction_description;
    m_transaction_description_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_transaction_description_Set() const{
    return m_transaction_description_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_transaction_description_Valid() const{
    return m_transaction_description_isValid;
}

OAIDtoValueOfBoolean OAISupplierInvoiceLineUpdateDto::getUndoSplitLine() const {
    return m_undo_split_line;
}
void OAISupplierInvoiceLineUpdateDto::setUndoSplitLine(const OAIDtoValueOfBoolean &undo_split_line) {
    m_undo_split_line = undo_split_line;
    m_undo_split_line_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_undo_split_line_Set() const{
    return m_undo_split_line_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_undo_split_line_Valid() const{
    return m_undo_split_line_isValid;
}

OAIDtoValueOfNullableOfDecimal OAISupplierInvoiceLineUpdateDto::getUnitCostInCurrency() const {
    return m_unit_cost_in_currency;
}
void OAISupplierInvoiceLineUpdateDto::setUnitCostInCurrency(const OAIDtoValueOfNullableOfDecimal &unit_cost_in_currency) {
    m_unit_cost_in_currency = unit_cost_in_currency;
    m_unit_cost_in_currency_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_unit_cost_in_currency_Set() const{
    return m_unit_cost_in_currency_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_unit_cost_in_currency_Valid() const{
    return m_unit_cost_in_currency_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getUom() const {
    return m_uom;
}
void OAISupplierInvoiceLineUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

OAIDtoValueOfString OAISupplierInvoiceLineUpdateDto::getVatCodeId() const {
    return m_vat_code_id;
}
void OAISupplierInvoiceLineUpdateDto::setVatCodeId(const OAIDtoValueOfString &vat_code_id) {
    m_vat_code_id = vat_code_id;
    m_vat_code_id_isSet = true;
}

bool OAISupplierInvoiceLineUpdateDto::is_vat_code_id_Set() const{
    return m_vat_code_id_isSet;
}

bool OAISupplierInvoiceLineUpdateDto::is_vat_code_id_Valid() const{
    return m_vat_code_id_isValid;
}

bool OAISupplierInvoiceLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cury_retainage_amt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferral_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_unit_cost_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_task_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retainage_pct.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_hierarchy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_undo_split_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_cost_in_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierInvoiceLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
