/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountsInFixedAssetClassDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountsInFixedAssetClassDto::OAIAccountsInFixedAssetClassDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountsInFixedAssetClassDto::OAIAccountsInFixedAssetClassDto() {
    this->initializeModel();
}

OAIAccountsInFixedAssetClassDto::~OAIAccountsInFixedAssetClassDto() {}

void OAIAccountsInFixedAssetClassDto::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_accrual_account_id_isSet = false;
    m_accrual_account_id_isValid = false;

    m_accrual_sub_account_id_isSet = false;
    m_accrual_sub_account_id_isValid = false;

    m_accumulated_depreciation_account_id_isSet = false;
    m_accumulated_depreciation_account_id_isValid = false;

    m_accumulated_depreciation_sub_account_id_isSet = false;
    m_accumulated_depreciation_sub_account_id_isValid = false;

    m_credit_account_id_isSet = false;
    m_credit_account_id_isValid = false;

    m_credit_sub_account_id_isSet = false;
    m_credit_sub_account_id_isValid = false;

    m_debit_account_id_isSet = false;
    m_debit_account_id_isValid = false;

    m_debit_sub_account_id_isSet = false;
    m_debit_sub_account_id_isValid = false;

    m_depreciated_expense_account_id_isSet = false;
    m_depreciated_expense_account_id_isValid = false;

    m_depreciated_expense_sub_account_id_isSet = false;
    m_depreciated_expense_sub_account_id_isValid = false;

    m_disposal_account_id_isSet = false;
    m_disposal_account_id_isValid = false;

    m_disposal_sub_account_id_isSet = false;
    m_disposal_sub_account_id_isValid = false;

    m_gain_account_id_isSet = false;
    m_gain_account_id_isValid = false;

    m_gain_sub_account_id_isSet = false;
    m_gain_sub_account_id_isValid = false;

    m_loss_account_id_isSet = false;
    m_loss_account_id_isValid = false;

    m_loss_sub_account_id_isSet = false;
    m_loss_sub_account_id_isValid = false;

    m_sub_account_id_isSet = false;
    m_sub_account_id_isValid = false;
}

void OAIAccountsInFixedAssetClassDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountsInFixedAssetClassDto::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountID")]);
    m_account_id_isSet = !json[QString("accountID")].isNull() && m_account_id_isValid;

    m_accrual_account_id_isValid = ::OpenAPI::fromJsonValue(m_accrual_account_id, json[QString("accrualAccountID")]);
    m_accrual_account_id_isSet = !json[QString("accrualAccountID")].isNull() && m_accrual_account_id_isValid;

    m_accrual_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_accrual_sub_account_id, json[QString("accrualSubAccountID")]);
    m_accrual_sub_account_id_isSet = !json[QString("accrualSubAccountID")].isNull() && m_accrual_sub_account_id_isValid;

    m_accumulated_depreciation_account_id_isValid = ::OpenAPI::fromJsonValue(m_accumulated_depreciation_account_id, json[QString("accumulatedDepreciationAccountID")]);
    m_accumulated_depreciation_account_id_isSet = !json[QString("accumulatedDepreciationAccountID")].isNull() && m_accumulated_depreciation_account_id_isValid;

    m_accumulated_depreciation_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_accumulated_depreciation_sub_account_id, json[QString("accumulatedDepreciationSubAccountID")]);
    m_accumulated_depreciation_sub_account_id_isSet = !json[QString("accumulatedDepreciationSubAccountID")].isNull() && m_accumulated_depreciation_sub_account_id_isValid;

    m_credit_account_id_isValid = ::OpenAPI::fromJsonValue(m_credit_account_id, json[QString("creditAccountID")]);
    m_credit_account_id_isSet = !json[QString("creditAccountID")].isNull() && m_credit_account_id_isValid;

    m_credit_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_credit_sub_account_id, json[QString("creditSubAccountID")]);
    m_credit_sub_account_id_isSet = !json[QString("creditSubAccountID")].isNull() && m_credit_sub_account_id_isValid;

    m_debit_account_id_isValid = ::OpenAPI::fromJsonValue(m_debit_account_id, json[QString("debitAccountID")]);
    m_debit_account_id_isSet = !json[QString("debitAccountID")].isNull() && m_debit_account_id_isValid;

    m_debit_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_debit_sub_account_id, json[QString("debitSubAccountID")]);
    m_debit_sub_account_id_isSet = !json[QString("debitSubAccountID")].isNull() && m_debit_sub_account_id_isValid;

    m_depreciated_expense_account_id_isValid = ::OpenAPI::fromJsonValue(m_depreciated_expense_account_id, json[QString("depreciatedExpenseAccountID")]);
    m_depreciated_expense_account_id_isSet = !json[QString("depreciatedExpenseAccountID")].isNull() && m_depreciated_expense_account_id_isValid;

    m_depreciated_expense_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_depreciated_expense_sub_account_id, json[QString("depreciatedExpenseSubAccountID")]);
    m_depreciated_expense_sub_account_id_isSet = !json[QString("depreciatedExpenseSubAccountID")].isNull() && m_depreciated_expense_sub_account_id_isValid;

    m_disposal_account_id_isValid = ::OpenAPI::fromJsonValue(m_disposal_account_id, json[QString("disposalAccountID")]);
    m_disposal_account_id_isSet = !json[QString("disposalAccountID")].isNull() && m_disposal_account_id_isValid;

    m_disposal_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_disposal_sub_account_id, json[QString("disposalSubAccountID")]);
    m_disposal_sub_account_id_isSet = !json[QString("disposalSubAccountID")].isNull() && m_disposal_sub_account_id_isValid;

    m_gain_account_id_isValid = ::OpenAPI::fromJsonValue(m_gain_account_id, json[QString("gainAccountID")]);
    m_gain_account_id_isSet = !json[QString("gainAccountID")].isNull() && m_gain_account_id_isValid;

    m_gain_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_gain_sub_account_id, json[QString("gainSubAccountID")]);
    m_gain_sub_account_id_isSet = !json[QString("gainSubAccountID")].isNull() && m_gain_sub_account_id_isValid;

    m_loss_account_id_isValid = ::OpenAPI::fromJsonValue(m_loss_account_id, json[QString("lossAccountID")]);
    m_loss_account_id_isSet = !json[QString("lossAccountID")].isNull() && m_loss_account_id_isValid;

    m_loss_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_loss_sub_account_id, json[QString("lossSubAccountID")]);
    m_loss_sub_account_id_isSet = !json[QString("lossSubAccountID")].isNull() && m_loss_sub_account_id_isValid;

    m_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_sub_account_id, json[QString("subAccountID")]);
    m_sub_account_id_isSet = !json[QString("subAccountID")].isNull() && m_sub_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountsInFixedAssetClassDto::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_accrual_account_id_isSet) {
        obj.insert(QString("accrualAccountID"), ::OpenAPI::toJsonValue(m_accrual_account_id));
    }
    if (m_accrual_sub_account_id_isSet) {
        obj.insert(QString("accrualSubAccountID"), ::OpenAPI::toJsonValue(m_accrual_sub_account_id));
    }
    if (m_accumulated_depreciation_account_id_isSet) {
        obj.insert(QString("accumulatedDepreciationAccountID"), ::OpenAPI::toJsonValue(m_accumulated_depreciation_account_id));
    }
    if (m_accumulated_depreciation_sub_account_id_isSet) {
        obj.insert(QString("accumulatedDepreciationSubAccountID"), ::OpenAPI::toJsonValue(m_accumulated_depreciation_sub_account_id));
    }
    if (m_credit_account_id_isSet) {
        obj.insert(QString("creditAccountID"), ::OpenAPI::toJsonValue(m_credit_account_id));
    }
    if (m_credit_sub_account_id_isSet) {
        obj.insert(QString("creditSubAccountID"), ::OpenAPI::toJsonValue(m_credit_sub_account_id));
    }
    if (m_debit_account_id_isSet) {
        obj.insert(QString("debitAccountID"), ::OpenAPI::toJsonValue(m_debit_account_id));
    }
    if (m_debit_sub_account_id_isSet) {
        obj.insert(QString("debitSubAccountID"), ::OpenAPI::toJsonValue(m_debit_sub_account_id));
    }
    if (m_depreciated_expense_account_id_isSet) {
        obj.insert(QString("depreciatedExpenseAccountID"), ::OpenAPI::toJsonValue(m_depreciated_expense_account_id));
    }
    if (m_depreciated_expense_sub_account_id_isSet) {
        obj.insert(QString("depreciatedExpenseSubAccountID"), ::OpenAPI::toJsonValue(m_depreciated_expense_sub_account_id));
    }
    if (m_disposal_account_id_isSet) {
        obj.insert(QString("disposalAccountID"), ::OpenAPI::toJsonValue(m_disposal_account_id));
    }
    if (m_disposal_sub_account_id_isSet) {
        obj.insert(QString("disposalSubAccountID"), ::OpenAPI::toJsonValue(m_disposal_sub_account_id));
    }
    if (m_gain_account_id_isSet) {
        obj.insert(QString("gainAccountID"), ::OpenAPI::toJsonValue(m_gain_account_id));
    }
    if (m_gain_sub_account_id_isSet) {
        obj.insert(QString("gainSubAccountID"), ::OpenAPI::toJsonValue(m_gain_sub_account_id));
    }
    if (m_loss_account_id_isSet) {
        obj.insert(QString("lossAccountID"), ::OpenAPI::toJsonValue(m_loss_account_id));
    }
    if (m_loss_sub_account_id_isSet) {
        obj.insert(QString("lossSubAccountID"), ::OpenAPI::toJsonValue(m_loss_sub_account_id));
    }
    if (m_sub_account_id_isSet) {
        obj.insert(QString("subAccountID"), ::OpenAPI::toJsonValue(m_sub_account_id));
    }
    return obj;
}

QString OAIAccountsInFixedAssetClassDto::getAccountId() const {
    return m_account_id;
}
void OAIAccountsInFixedAssetClassDto::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getAccrualAccountId() const {
    return m_accrual_account_id;
}
void OAIAccountsInFixedAssetClassDto::setAccrualAccountId(const QString &accrual_account_id) {
    m_accrual_account_id = accrual_account_id;
    m_accrual_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_accrual_account_id_Set() const{
    return m_accrual_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_accrual_account_id_Valid() const{
    return m_accrual_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getAccrualSubAccountId() const {
    return m_accrual_sub_account_id;
}
void OAIAccountsInFixedAssetClassDto::setAccrualSubAccountId(const QString &accrual_sub_account_id) {
    m_accrual_sub_account_id = accrual_sub_account_id;
    m_accrual_sub_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_accrual_sub_account_id_Set() const{
    return m_accrual_sub_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_accrual_sub_account_id_Valid() const{
    return m_accrual_sub_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getAccumulatedDepreciationAccountId() const {
    return m_accumulated_depreciation_account_id;
}
void OAIAccountsInFixedAssetClassDto::setAccumulatedDepreciationAccountId(const QString &accumulated_depreciation_account_id) {
    m_accumulated_depreciation_account_id = accumulated_depreciation_account_id;
    m_accumulated_depreciation_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_accumulated_depreciation_account_id_Set() const{
    return m_accumulated_depreciation_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_accumulated_depreciation_account_id_Valid() const{
    return m_accumulated_depreciation_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getAccumulatedDepreciationSubAccountId() const {
    return m_accumulated_depreciation_sub_account_id;
}
void OAIAccountsInFixedAssetClassDto::setAccumulatedDepreciationSubAccountId(const QString &accumulated_depreciation_sub_account_id) {
    m_accumulated_depreciation_sub_account_id = accumulated_depreciation_sub_account_id;
    m_accumulated_depreciation_sub_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_accumulated_depreciation_sub_account_id_Set() const{
    return m_accumulated_depreciation_sub_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_accumulated_depreciation_sub_account_id_Valid() const{
    return m_accumulated_depreciation_sub_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getCreditAccountId() const {
    return m_credit_account_id;
}
void OAIAccountsInFixedAssetClassDto::setCreditAccountId(const QString &credit_account_id) {
    m_credit_account_id = credit_account_id;
    m_credit_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_credit_account_id_Set() const{
    return m_credit_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_credit_account_id_Valid() const{
    return m_credit_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getCreditSubAccountId() const {
    return m_credit_sub_account_id;
}
void OAIAccountsInFixedAssetClassDto::setCreditSubAccountId(const QString &credit_sub_account_id) {
    m_credit_sub_account_id = credit_sub_account_id;
    m_credit_sub_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_credit_sub_account_id_Set() const{
    return m_credit_sub_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_credit_sub_account_id_Valid() const{
    return m_credit_sub_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getDebitAccountId() const {
    return m_debit_account_id;
}
void OAIAccountsInFixedAssetClassDto::setDebitAccountId(const QString &debit_account_id) {
    m_debit_account_id = debit_account_id;
    m_debit_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_debit_account_id_Set() const{
    return m_debit_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_debit_account_id_Valid() const{
    return m_debit_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getDebitSubAccountId() const {
    return m_debit_sub_account_id;
}
void OAIAccountsInFixedAssetClassDto::setDebitSubAccountId(const QString &debit_sub_account_id) {
    m_debit_sub_account_id = debit_sub_account_id;
    m_debit_sub_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_debit_sub_account_id_Set() const{
    return m_debit_sub_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_debit_sub_account_id_Valid() const{
    return m_debit_sub_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getDepreciatedExpenseAccountId() const {
    return m_depreciated_expense_account_id;
}
void OAIAccountsInFixedAssetClassDto::setDepreciatedExpenseAccountId(const QString &depreciated_expense_account_id) {
    m_depreciated_expense_account_id = depreciated_expense_account_id;
    m_depreciated_expense_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_depreciated_expense_account_id_Set() const{
    return m_depreciated_expense_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_depreciated_expense_account_id_Valid() const{
    return m_depreciated_expense_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getDepreciatedExpenseSubAccountId() const {
    return m_depreciated_expense_sub_account_id;
}
void OAIAccountsInFixedAssetClassDto::setDepreciatedExpenseSubAccountId(const QString &depreciated_expense_sub_account_id) {
    m_depreciated_expense_sub_account_id = depreciated_expense_sub_account_id;
    m_depreciated_expense_sub_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_depreciated_expense_sub_account_id_Set() const{
    return m_depreciated_expense_sub_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_depreciated_expense_sub_account_id_Valid() const{
    return m_depreciated_expense_sub_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getDisposalAccountId() const {
    return m_disposal_account_id;
}
void OAIAccountsInFixedAssetClassDto::setDisposalAccountId(const QString &disposal_account_id) {
    m_disposal_account_id = disposal_account_id;
    m_disposal_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_disposal_account_id_Set() const{
    return m_disposal_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_disposal_account_id_Valid() const{
    return m_disposal_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getDisposalSubAccountId() const {
    return m_disposal_sub_account_id;
}
void OAIAccountsInFixedAssetClassDto::setDisposalSubAccountId(const QString &disposal_sub_account_id) {
    m_disposal_sub_account_id = disposal_sub_account_id;
    m_disposal_sub_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_disposal_sub_account_id_Set() const{
    return m_disposal_sub_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_disposal_sub_account_id_Valid() const{
    return m_disposal_sub_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getGainAccountId() const {
    return m_gain_account_id;
}
void OAIAccountsInFixedAssetClassDto::setGainAccountId(const QString &gain_account_id) {
    m_gain_account_id = gain_account_id;
    m_gain_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_gain_account_id_Set() const{
    return m_gain_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_gain_account_id_Valid() const{
    return m_gain_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getGainSubAccountId() const {
    return m_gain_sub_account_id;
}
void OAIAccountsInFixedAssetClassDto::setGainSubAccountId(const QString &gain_sub_account_id) {
    m_gain_sub_account_id = gain_sub_account_id;
    m_gain_sub_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_gain_sub_account_id_Set() const{
    return m_gain_sub_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_gain_sub_account_id_Valid() const{
    return m_gain_sub_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getLossAccountId() const {
    return m_loss_account_id;
}
void OAIAccountsInFixedAssetClassDto::setLossAccountId(const QString &loss_account_id) {
    m_loss_account_id = loss_account_id;
    m_loss_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_loss_account_id_Set() const{
    return m_loss_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_loss_account_id_Valid() const{
    return m_loss_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getLossSubAccountId() const {
    return m_loss_sub_account_id;
}
void OAIAccountsInFixedAssetClassDto::setLossSubAccountId(const QString &loss_sub_account_id) {
    m_loss_sub_account_id = loss_sub_account_id;
    m_loss_sub_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_loss_sub_account_id_Set() const{
    return m_loss_sub_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_loss_sub_account_id_Valid() const{
    return m_loss_sub_account_id_isValid;
}

QString OAIAccountsInFixedAssetClassDto::getSubAccountId() const {
    return m_sub_account_id;
}
void OAIAccountsInFixedAssetClassDto::setSubAccountId(const QString &sub_account_id) {
    m_sub_account_id = sub_account_id;
    m_sub_account_id_isSet = true;
}

bool OAIAccountsInFixedAssetClassDto::is_sub_account_id_Set() const{
    return m_sub_account_id_isSet;
}

bool OAIAccountsInFixedAssetClassDto::is_sub_account_id_Valid() const{
    return m_sub_account_id_isValid;
}

bool OAIAccountsInFixedAssetClassDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accrual_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accrual_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accumulated_depreciation_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accumulated_depreciation_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciated_expense_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciated_expense_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposal_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposal_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loss_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loss_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountsInFixedAssetClassDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
