/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberingDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumberingDto::OAINumberingDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumberingDto::OAINumberingDto() {
    this->initializeModel();
}

OAINumberingDto::~OAINumberingDto() {}

void OAINumberingDto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_manual_numbering_isSet = false;
    m_manual_numbering_isValid = false;

    m_new_number_symbol_isSet = false;
    m_new_number_symbol_isValid = false;

    m_numbering_id_isSet = false;
    m_numbering_id_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;
}

void OAINumberingDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumberingDto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_manual_numbering_isValid = ::OpenAPI::fromJsonValue(m_manual_numbering, json[QString("manualNumbering")]);
    m_manual_numbering_isSet = !json[QString("manualNumbering")].isNull() && m_manual_numbering_isValid;

    m_new_number_symbol_isValid = ::OpenAPI::fromJsonValue(m_new_number_symbol, json[QString("newNumberSymbol")]);
    m_new_number_symbol_isSet = !json[QString("newNumberSymbol")].isNull() && m_new_number_symbol_isValid;

    m_numbering_id_isValid = ::OpenAPI::fromJsonValue(m_numbering_id, json[QString("numberingId")]);
    m_numbering_id_isSet = !json[QString("numberingId")].isNull() && m_numbering_id_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;
}

QString OAINumberingDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumberingDto::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_manual_numbering_isSet) {
        obj.insert(QString("manualNumbering"), ::OpenAPI::toJsonValue(m_manual_numbering));
    }
    if (m_new_number_symbol_isSet) {
        obj.insert(QString("newNumberSymbol"), ::OpenAPI::toJsonValue(m_new_number_symbol));
    }
    if (m_numbering_id_isSet) {
        obj.insert(QString("numberingId"), ::OpenAPI::toJsonValue(m_numbering_id));
    }
    if (m_sequence.size() > 0) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    return obj;
}

QString OAINumberingDto::getDescription() const {
    return m_description;
}
void OAINumberingDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINumberingDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAINumberingDto::is_description_Valid() const{
    return m_description_isValid;
}

bool OAINumberingDto::isManualNumbering() const {
    return m_manual_numbering;
}
void OAINumberingDto::setManualNumbering(const bool &manual_numbering) {
    m_manual_numbering = manual_numbering;
    m_manual_numbering_isSet = true;
}

bool OAINumberingDto::is_manual_numbering_Set() const{
    return m_manual_numbering_isSet;
}

bool OAINumberingDto::is_manual_numbering_Valid() const{
    return m_manual_numbering_isValid;
}

QString OAINumberingDto::getNewNumberSymbol() const {
    return m_new_number_symbol;
}
void OAINumberingDto::setNewNumberSymbol(const QString &new_number_symbol) {
    m_new_number_symbol = new_number_symbol;
    m_new_number_symbol_isSet = true;
}

bool OAINumberingDto::is_new_number_symbol_Set() const{
    return m_new_number_symbol_isSet;
}

bool OAINumberingDto::is_new_number_symbol_Valid() const{
    return m_new_number_symbol_isValid;
}

QString OAINumberingDto::getNumberingId() const {
    return m_numbering_id;
}
void OAINumberingDto::setNumberingId(const QString &numbering_id) {
    m_numbering_id = numbering_id;
    m_numbering_id_isSet = true;
}

bool OAINumberingDto::is_numbering_id_Set() const{
    return m_numbering_id_isSet;
}

bool OAINumberingDto::is_numbering_id_Valid() const{
    return m_numbering_id_isValid;
}

QList<OAINumberingSequenceDto> OAINumberingDto::getSequence() const {
    return m_sequence;
}
void OAINumberingDto::setSequence(const QList<OAINumberingSequenceDto> &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAINumberingDto::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAINumberingDto::is_sequence_Valid() const{
    return m_sequence_isValid;
}

bool OAINumberingDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_numbering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_number_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numbering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumberingDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
