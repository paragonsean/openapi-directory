/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashTransactionDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashTransactionDto::OAICashTransactionDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashTransactionDto::OAICashTransactionDto() {
    this->initializeModel();
}

OAICashTransactionDto::~OAICashTransactionDto() {}

void OAICashTransactionDto::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_control_total_isSet = false;
    m_control_total_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disb_receipt_isSet = false;
    m_disb_receipt_isValid = false;

    m_document_ref_isSet = false;
    m_document_ref_isValid = false;

    m_entry_type_isSet = false;
    m_entry_type_isValid = false;

    m_fin_period_isSet = false;
    m_fin_period_isValid = false;

    m_financial_period_isSet = false;
    m_financial_period_isValid = false;

    m_financials_detail_isSet = false;
    m_financials_detail_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_reference_nbr_isSet = false;
    m_reference_nbr_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_details_isSet = false;
    m_tax_details_isValid = false;

    m_tax_total_isSet = false;
    m_tax_total_isValid = false;

    m_tran_date_isSet = false;
    m_tran_date_isValid = false;

    m_tran_type_isSet = false;
    m_tran_type_isValid = false;

    m_transaction_details_isSet = false;
    m_transaction_details_isValid = false;

    m_vat_exempt_total_isSet = false;
    m_vat_exempt_total_isValid = false;

    m_vat_taxable_total_isSet = false;
    m_vat_taxable_total_isValid = false;
}

void OAICashTransactionDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashTransactionDto::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_control_total_isValid = ::OpenAPI::fromJsonValue(m_control_total, json[QString("controlTotal")]);
    m_control_total_isSet = !json[QString("controlTotal")].isNull() && m_control_total_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disb_receipt_isValid = ::OpenAPI::fromJsonValue(m_disb_receipt, json[QString("disbReceipt")]);
    m_disb_receipt_isSet = !json[QString("disbReceipt")].isNull() && m_disb_receipt_isValid;

    m_document_ref_isValid = ::OpenAPI::fromJsonValue(m_document_ref, json[QString("documentRef")]);
    m_document_ref_isSet = !json[QString("documentRef")].isNull() && m_document_ref_isValid;

    m_entry_type_isValid = ::OpenAPI::fromJsonValue(m_entry_type, json[QString("entryType")]);
    m_entry_type_isSet = !json[QString("entryType")].isNull() && m_entry_type_isValid;

    m_fin_period_isValid = ::OpenAPI::fromJsonValue(m_fin_period, json[QString("finPeriod")]);
    m_fin_period_isSet = !json[QString("finPeriod")].isNull() && m_fin_period_isValid;

    m_financial_period_isValid = ::OpenAPI::fromJsonValue(m_financial_period, json[QString("financialPeriod")]);
    m_financial_period_isSet = !json[QString("financialPeriod")].isNull() && m_financial_period_isValid;

    m_financials_detail_isValid = ::OpenAPI::fromJsonValue(m_financials_detail, json[QString("financialsDetail")]);
    m_financials_detail_isSet = !json[QString("financialsDetail")].isNull() && m_financials_detail_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_reference_nbr_isValid = ::OpenAPI::fromJsonValue(m_reference_nbr, json[QString("referenceNbr")]);
    m_reference_nbr_isSet = !json[QString("referenceNbr")].isNull() && m_reference_nbr_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_tax_details_isValid = ::OpenAPI::fromJsonValue(m_tax_details, json[QString("taxDetails")]);
    m_tax_details_isSet = !json[QString("taxDetails")].isNull() && m_tax_details_isValid;

    m_tax_total_isValid = ::OpenAPI::fromJsonValue(m_tax_total, json[QString("taxTotal")]);
    m_tax_total_isSet = !json[QString("taxTotal")].isNull() && m_tax_total_isValid;

    m_tran_date_isValid = ::OpenAPI::fromJsonValue(m_tran_date, json[QString("tranDate")]);
    m_tran_date_isSet = !json[QString("tranDate")].isNull() && m_tran_date_isValid;

    m_tran_type_isValid = ::OpenAPI::fromJsonValue(m_tran_type, json[QString("tranType")]);
    m_tran_type_isSet = !json[QString("tranType")].isNull() && m_tran_type_isValid;

    m_transaction_details_isValid = ::OpenAPI::fromJsonValue(m_transaction_details, json[QString("transactionDetails")]);
    m_transaction_details_isSet = !json[QString("transactionDetails")].isNull() && m_transaction_details_isValid;

    m_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total, json[QString("vatExemptTotal")]);
    m_vat_exempt_total_isSet = !json[QString("vatExemptTotal")].isNull() && m_vat_exempt_total_isValid;

    m_vat_taxable_total_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total, json[QString("vatTaxableTotal")]);
    m_vat_taxable_total_isSet = !json[QString("vatTaxableTotal")].isNull() && m_vat_taxable_total_isValid;
}

QString OAICashTransactionDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashTransactionDto::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_cash_account.isSet()) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_control_total_isSet) {
        obj.insert(QString("controlTotal"), ::OpenAPI::toJsonValue(m_control_total));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disb_receipt_isSet) {
        obj.insert(QString("disbReceipt"), ::OpenAPI::toJsonValue(m_disb_receipt));
    }
    if (m_document_ref_isSet) {
        obj.insert(QString("documentRef"), ::OpenAPI::toJsonValue(m_document_ref));
    }
    if (m_entry_type.isSet()) {
        obj.insert(QString("entryType"), ::OpenAPI::toJsonValue(m_entry_type));
    }
    if (m_fin_period_isSet) {
        obj.insert(QString("finPeriod"), ::OpenAPI::toJsonValue(m_fin_period));
    }
    if (m_financial_period_isSet) {
        obj.insert(QString("financialPeriod"), ::OpenAPI::toJsonValue(m_financial_period));
    }
    if (m_financials_detail.isSet()) {
        obj.insert(QString("financialsDetail"), ::OpenAPI::toJsonValue(m_financials_detail));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_reference_nbr_isSet) {
        obj.insert(QString("referenceNbr"), ::OpenAPI::toJsonValue(m_reference_nbr));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_details.size() > 0) {
        obj.insert(QString("taxDetails"), ::OpenAPI::toJsonValue(m_tax_details));
    }
    if (m_tax_total_isSet) {
        obj.insert(QString("taxTotal"), ::OpenAPI::toJsonValue(m_tax_total));
    }
    if (m_tran_date_isSet) {
        obj.insert(QString("tranDate"), ::OpenAPI::toJsonValue(m_tran_date));
    }
    if (m_tran_type_isSet) {
        obj.insert(QString("tranType"), ::OpenAPI::toJsonValue(m_tran_type));
    }
    if (m_transaction_details.size() > 0) {
        obj.insert(QString("transactionDetails"), ::OpenAPI::toJsonValue(m_transaction_details));
    }
    if (m_vat_exempt_total_isSet) {
        obj.insert(QString("vatExemptTotal"), ::OpenAPI::toJsonValue(m_vat_exempt_total));
    }
    if (m_vat_taxable_total_isSet) {
        obj.insert(QString("vatTaxableTotal"), ::OpenAPI::toJsonValue(m_vat_taxable_total));
    }
    return obj;
}

double OAICashTransactionDto::getAmount() const {
    return m_amount;
}
void OAICashTransactionDto::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICashTransactionDto::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICashTransactionDto::is_amount_Valid() const{
    return m_amount_isValid;
}

OAICashAccountInCashTransactionDto OAICashTransactionDto::getCashAccount() const {
    return m_cash_account;
}
void OAICashTransactionDto::setCashAccount(const OAICashAccountInCashTransactionDto &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAICashTransactionDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAICashTransactionDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

double OAICashTransactionDto::getControlTotal() const {
    return m_control_total;
}
void OAICashTransactionDto::setControlTotal(const double &control_total) {
    m_control_total = control_total;
    m_control_total_isSet = true;
}

bool OAICashTransactionDto::is_control_total_Set() const{
    return m_control_total_isSet;
}

bool OAICashTransactionDto::is_control_total_Valid() const{
    return m_control_total_isValid;
}

QString OAICashTransactionDto::getCurrency() const {
    return m_currency;
}
void OAICashTransactionDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICashTransactionDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICashTransactionDto::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICashTransactionDto::getDescription() const {
    return m_description;
}
void OAICashTransactionDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICashTransactionDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICashTransactionDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICashTransactionDto::getDisbReceipt() const {
    return m_disb_receipt;
}
void OAICashTransactionDto::setDisbReceipt(const QString &disb_receipt) {
    m_disb_receipt = disb_receipt;
    m_disb_receipt_isSet = true;
}

bool OAICashTransactionDto::is_disb_receipt_Set() const{
    return m_disb_receipt_isSet;
}

bool OAICashTransactionDto::is_disb_receipt_Valid() const{
    return m_disb_receipt_isValid;
}

QString OAICashTransactionDto::getDocumentRef() const {
    return m_document_ref;
}
void OAICashTransactionDto::setDocumentRef(const QString &document_ref) {
    m_document_ref = document_ref;
    m_document_ref_isSet = true;
}

bool OAICashTransactionDto::is_document_ref_Set() const{
    return m_document_ref_isSet;
}

bool OAICashTransactionDto::is_document_ref_Valid() const{
    return m_document_ref_isValid;
}

OAIEntryTypeInCashTransactionDto OAICashTransactionDto::getEntryType() const {
    return m_entry_type;
}
void OAICashTransactionDto::setEntryType(const OAIEntryTypeInCashTransactionDto &entry_type) {
    m_entry_type = entry_type;
    m_entry_type_isSet = true;
}

bool OAICashTransactionDto::is_entry_type_Set() const{
    return m_entry_type_isSet;
}

bool OAICashTransactionDto::is_entry_type_Valid() const{
    return m_entry_type_isValid;
}

QString OAICashTransactionDto::getFinPeriod() const {
    return m_fin_period;
}
void OAICashTransactionDto::setFinPeriod(const QString &fin_period) {
    m_fin_period = fin_period;
    m_fin_period_isSet = true;
}

bool OAICashTransactionDto::is_fin_period_Set() const{
    return m_fin_period_isSet;
}

bool OAICashTransactionDto::is_fin_period_Valid() const{
    return m_fin_period_isValid;
}

QString OAICashTransactionDto::getFinancialPeriod() const {
    return m_financial_period;
}
void OAICashTransactionDto::setFinancialPeriod(const QString &financial_period) {
    m_financial_period = financial_period;
    m_financial_period_isSet = true;
}

bool OAICashTransactionDto::is_financial_period_Set() const{
    return m_financial_period_isSet;
}

bool OAICashTransactionDto::is_financial_period_Valid() const{
    return m_financial_period_isValid;
}

OAIFinancialsDetailInCashTransactionDto OAICashTransactionDto::getFinancialsDetail() const {
    return m_financials_detail;
}
void OAICashTransactionDto::setFinancialsDetail(const OAIFinancialsDetailInCashTransactionDto &financials_detail) {
    m_financials_detail = financials_detail;
    m_financials_detail_isSet = true;
}

bool OAICashTransactionDto::is_financials_detail_Set() const{
    return m_financials_detail_isSet;
}

bool OAICashTransactionDto::is_financials_detail_Valid() const{
    return m_financials_detail_isValid;
}

bool OAICashTransactionDto::isHold() const {
    return m_hold;
}
void OAICashTransactionDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAICashTransactionDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAICashTransactionDto::is_hold_Valid() const{
    return m_hold_isValid;
}

QDateTime OAICashTransactionDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAICashTransactionDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAICashTransactionDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAICashTransactionDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAIOwnerInCashTransactionDto OAICashTransactionDto::getOwner() const {
    return m_owner;
}
void OAICashTransactionDto::setOwner(const OAIOwnerInCashTransactionDto &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICashTransactionDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICashTransactionDto::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAICashTransactionDto::getReferenceNbr() const {
    return m_reference_nbr;
}
void OAICashTransactionDto::setReferenceNbr(const QString &reference_nbr) {
    m_reference_nbr = reference_nbr;
    m_reference_nbr_isSet = true;
}

bool OAICashTransactionDto::is_reference_nbr_Set() const{
    return m_reference_nbr_isSet;
}

bool OAICashTransactionDto::is_reference_nbr_Valid() const{
    return m_reference_nbr_isValid;
}

QString OAICashTransactionDto::getStatus() const {
    return m_status;
}
void OAICashTransactionDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICashTransactionDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAICashTransactionDto::is_status_Valid() const{
    return m_status_isValid;
}

double OAICashTransactionDto::getTaxAmount() const {
    return m_tax_amount;
}
void OAICashTransactionDto::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAICashTransactionDto::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAICashTransactionDto::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

QList<OAICashTranTaxDetailDto> OAICashTransactionDto::getTaxDetails() const {
    return m_tax_details;
}
void OAICashTransactionDto::setTaxDetails(const QList<OAICashTranTaxDetailDto> &tax_details) {
    m_tax_details = tax_details;
    m_tax_details_isSet = true;
}

bool OAICashTransactionDto::is_tax_details_Set() const{
    return m_tax_details_isSet;
}

bool OAICashTransactionDto::is_tax_details_Valid() const{
    return m_tax_details_isValid;
}

double OAICashTransactionDto::getTaxTotal() const {
    return m_tax_total;
}
void OAICashTransactionDto::setTaxTotal(const double &tax_total) {
    m_tax_total = tax_total;
    m_tax_total_isSet = true;
}

bool OAICashTransactionDto::is_tax_total_Set() const{
    return m_tax_total_isSet;
}

bool OAICashTransactionDto::is_tax_total_Valid() const{
    return m_tax_total_isValid;
}

QDateTime OAICashTransactionDto::getTranDate() const {
    return m_tran_date;
}
void OAICashTransactionDto::setTranDate(const QDateTime &tran_date) {
    m_tran_date = tran_date;
    m_tran_date_isSet = true;
}

bool OAICashTransactionDto::is_tran_date_Set() const{
    return m_tran_date_isSet;
}

bool OAICashTransactionDto::is_tran_date_Valid() const{
    return m_tran_date_isValid;
}

QString OAICashTransactionDto::getTranType() const {
    return m_tran_type;
}
void OAICashTransactionDto::setTranType(const QString &tran_type) {
    m_tran_type = tran_type;
    m_tran_type_isSet = true;
}

bool OAICashTransactionDto::is_tran_type_Set() const{
    return m_tran_type_isSet;
}

bool OAICashTransactionDto::is_tran_type_Valid() const{
    return m_tran_type_isValid;
}

QList<OAITransactionDetailDto> OAICashTransactionDto::getTransactionDetails() const {
    return m_transaction_details;
}
void OAICashTransactionDto::setTransactionDetails(const QList<OAITransactionDetailDto> &transaction_details) {
    m_transaction_details = transaction_details;
    m_transaction_details_isSet = true;
}

bool OAICashTransactionDto::is_transaction_details_Set() const{
    return m_transaction_details_isSet;
}

bool OAICashTransactionDto::is_transaction_details_Valid() const{
    return m_transaction_details_isValid;
}

double OAICashTransactionDto::getVatExemptTotal() const {
    return m_vat_exempt_total;
}
void OAICashTransactionDto::setVatExemptTotal(const double &vat_exempt_total) {
    m_vat_exempt_total = vat_exempt_total;
    m_vat_exempt_total_isSet = true;
}

bool OAICashTransactionDto::is_vat_exempt_total_Set() const{
    return m_vat_exempt_total_isSet;
}

bool OAICashTransactionDto::is_vat_exempt_total_Valid() const{
    return m_vat_exempt_total_isValid;
}

double OAICashTransactionDto::getVatTaxableTotal() const {
    return m_vat_taxable_total;
}
void OAICashTransactionDto::setVatTaxableTotal(const double &vat_taxable_total) {
    m_vat_taxable_total = vat_taxable_total;
    m_vat_taxable_total_isSet = true;
}

bool OAICashTransactionDto::is_vat_taxable_total_Set() const{
    return m_vat_taxable_total_isSet;
}

bool OAICashTransactionDto::is_vat_taxable_total_Valid() const{
    return m_vat_taxable_total_isValid;
}

bool OAICashTransactionDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disb_receipt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fin_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_financials_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tran_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tran_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashTransactionDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
