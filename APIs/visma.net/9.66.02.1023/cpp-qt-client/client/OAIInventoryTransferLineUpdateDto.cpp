/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryTransferLineUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryTransferLineUpdateDto::OAIInventoryTransferLineUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryTransferLineUpdateDto::OAIInventoryTransferLineUpdateDto() {
    this->initializeModel();
}

OAIInventoryTransferLineUpdateDto::~OAIInventoryTransferLineUpdateDto() {}

void OAIInventoryTransferLineUpdateDto::initializeModel() {

    m_allocations_isSet = false;
    m_allocations_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_inventory_number_isSet = false;
    m_inventory_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_lot_serial_number_isSet = false;
    m_lot_serial_number_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_to_location_id_isSet = false;
    m_to_location_id_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIInventoryTransferLineUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryTransferLineUpdateDto::fromJsonObject(QJsonObject json) {

    m_allocations_isValid = ::OpenAPI::fromJsonValue(m_allocations, json[QString("allocations")]);
    m_allocations_isSet = !json[QString("allocations")].isNull() && m_allocations_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_inventory_number_isValid = ::OpenAPI::fromJsonValue(m_inventory_number, json[QString("inventoryNumber")]);
    m_inventory_number_isSet = !json[QString("inventoryNumber")].isNull() && m_inventory_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_lot_serial_number_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_number, json[QString("lotSerialNumber")]);
    m_lot_serial_number_isSet = !json[QString("lotSerialNumber")].isNull() && m_lot_serial_number_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_to_location_id_isValid = ::OpenAPI::fromJsonValue(m_to_location_id, json[QString("toLocationId")]);
    m_to_location_id_isSet = !json[QString("toLocationId")].isNull() && m_to_location_id_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIInventoryTransferLineUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryTransferLineUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_allocations.size() > 0) {
        obj.insert(QString("allocations"), ::OpenAPI::toJsonValue(m_allocations));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiration_date.isSet()) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_inventory_number.isSet()) {
        obj.insert(QString("inventoryNumber"), ::OpenAPI::toJsonValue(m_inventory_number));
    }
    if (m_line_number.isSet()) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_location_id.isSet()) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_lot_serial_number.isSet()) {
        obj.insert(QString("lotSerialNumber"), ::OpenAPI::toJsonValue(m_lot_serial_number));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_code.isSet()) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_to_location_id.isSet()) {
        obj.insert(QString("toLocationId"), ::OpenAPI::toJsonValue(m_to_location_id));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

QList<OAIAllocationsUpdateBasicDto> OAIInventoryTransferLineUpdateDto::getAllocations() const {
    return m_allocations;
}
void OAIInventoryTransferLineUpdateDto::setAllocations(const QList<OAIAllocationsUpdateBasicDto> &allocations) {
    m_allocations = allocations;
    m_allocations_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_allocations_Set() const{
    return m_allocations_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_allocations_Valid() const{
    return m_allocations_isValid;
}

OAIDtoValueOfString OAIInventoryTransferLineUpdateDto::getBranchNumber() const {
    return m_branch_number;
}
void OAIInventoryTransferLineUpdateDto::setBranchNumber(const OAIDtoValueOfString &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

OAIDtoValueOfString OAIInventoryTransferLineUpdateDto::getDescription() const {
    return m_description;
}
void OAIInventoryTransferLineUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

OAIDtoValueOfNullableOfDateTime OAIInventoryTransferLineUpdateDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIInventoryTransferLineUpdateDto::setExpirationDate(const OAIDtoValueOfNullableOfDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIDtoValueOfString OAIInventoryTransferLineUpdateDto::getInventoryNumber() const {
    return m_inventory_number;
}
void OAIInventoryTransferLineUpdateDto::setInventoryNumber(const OAIDtoValueOfString &inventory_number) {
    m_inventory_number = inventory_number;
    m_inventory_number_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_inventory_number_Set() const{
    return m_inventory_number_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_inventory_number_Valid() const{
    return m_inventory_number_isValid;
}

OAIDtoValueOfInt32 OAIInventoryTransferLineUpdateDto::getLineNumber() const {
    return m_line_number;
}
void OAIInventoryTransferLineUpdateDto::setLineNumber(const OAIDtoValueOfInt32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAIDtoValueOfString OAIInventoryTransferLineUpdateDto::getLocationId() const {
    return m_location_id;
}
void OAIInventoryTransferLineUpdateDto::setLocationId(const OAIDtoValueOfString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIDtoValueOfString OAIInventoryTransferLineUpdateDto::getLotSerialNumber() const {
    return m_lot_serial_number;
}
void OAIInventoryTransferLineUpdateDto::setLotSerialNumber(const OAIDtoValueOfString &lot_serial_number) {
    m_lot_serial_number = lot_serial_number;
    m_lot_serial_number_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_lot_serial_number_Set() const{
    return m_lot_serial_number_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_lot_serial_number_Valid() const{
    return m_lot_serial_number_isValid;
}

QString OAIInventoryTransferLineUpdateDto::getOperation() const {
    return m_operation;
}
void OAIInventoryTransferLineUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIInventoryTransferLineUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAIInventoryTransferLineUpdateDto::setQuantity(const OAIDtoValueOfNullableOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfString OAIInventoryTransferLineUpdateDto::getReasonCode() const {
    return m_reason_code;
}
void OAIInventoryTransferLineUpdateDto::setReasonCode(const OAIDtoValueOfString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

OAIDtoValueOfString OAIInventoryTransferLineUpdateDto::getToLocationId() const {
    return m_to_location_id;
}
void OAIInventoryTransferLineUpdateDto::setToLocationId(const OAIDtoValueOfString &to_location_id) {
    m_to_location_id = to_location_id;
    m_to_location_id_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_to_location_id_Set() const{
    return m_to_location_id_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_to_location_id_Valid() const{
    return m_to_location_id_isValid;
}

OAIDtoValueOfString OAIInventoryTransferLineUpdateDto::getUom() const {
    return m_uom;
}
void OAIInventoryTransferLineUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIInventoryTransferLineUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIInventoryTransferLineUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIInventoryTransferLineUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_location_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryTransferLineUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
