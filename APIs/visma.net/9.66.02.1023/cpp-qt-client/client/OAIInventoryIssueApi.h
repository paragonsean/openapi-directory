/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInventoryIssueApi_H
#define OAI_OAIInventoryIssueApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIInventoryIssueDto.h"
#include "OAIInventoryIssueUpdateDto.h"
#include "OAIObject.h"
#include "OAIReleaseInventoryDocumentActionResultDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInventoryIssueApi : public QObject {
    Q_OBJECT

public:
    OAIInventoryIssueApi(const int timeOut = 0);
    ~OAIInventoryIssueApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  status QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryIssueGetAll(const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_issue_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryIssueGetByinventoryIssueNumber(const QString &inventory_issue_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_inventory_issue_update_dto OAIInventoryIssueUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryIssuePost(const OAIInventoryIssueUpdateDto &oai_inventory_issue_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_issue_number QString [required]
    * @param[in]  oai_inventory_issue_update_dto OAIInventoryIssueUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryIssuePutByinventoryIssueNumber(const QString &inventory_issue_number, const OAIInventoryIssueUpdateDto &oai_inventory_issue_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  invoice_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void inventoryIssueReleaseDocumentByinvoiceNumber(const QString &invoice_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void inventoryIssueGetAllCallback(OAIHttpRequestWorker *worker);
    void inventoryIssueGetByinventoryIssueNumberCallback(OAIHttpRequestWorker *worker);
    void inventoryIssuePostCallback(OAIHttpRequestWorker *worker);
    void inventoryIssuePutByinventoryIssueNumberCallback(OAIHttpRequestWorker *worker);
    void inventoryIssueReleaseDocumentByinvoiceNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void inventoryIssueGetAllSignal(QList<OAIInventoryIssueDto> summary);
    void inventoryIssueGetByinventoryIssueNumberSignal(OAIInventoryIssueDto summary);
    void inventoryIssuePostSignal(OAIObject summary);
    void inventoryIssuePutByinventoryIssueNumberSignal(OAIBackgroundApiAcceptedDto summary);
    void inventoryIssueReleaseDocumentByinvoiceNumberSignal(OAIReleaseInventoryDocumentActionResultDto summary);


    void inventoryIssueGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAIInventoryIssueDto> summary);
    void inventoryIssueGetByinventoryIssueNumberSignalFull(OAIHttpRequestWorker *worker, OAIInventoryIssueDto summary);
    void inventoryIssuePostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void inventoryIssuePutByinventoryIssueNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void inventoryIssueReleaseDocumentByinvoiceNumberSignalFull(OAIHttpRequestWorker *worker, OAIReleaseInventoryDocumentActionResultDto summary);

    Q_DECL_DEPRECATED_X("Use inventoryIssueGetAllSignalError() instead")
    void inventoryIssueGetAllSignalE(QList<OAIInventoryIssueDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssueGetAllSignalError(QList<OAIInventoryIssueDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryIssueGetByinventoryIssueNumberSignalError() instead")
    void inventoryIssueGetByinventoryIssueNumberSignalE(OAIInventoryIssueDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssueGetByinventoryIssueNumberSignalError(OAIInventoryIssueDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryIssuePostSignalError() instead")
    void inventoryIssuePostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssuePostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryIssuePutByinventoryIssueNumberSignalError() instead")
    void inventoryIssuePutByinventoryIssueNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssuePutByinventoryIssueNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryIssueReleaseDocumentByinvoiceNumberSignalError() instead")
    void inventoryIssueReleaseDocumentByinvoiceNumberSignalE(OAIReleaseInventoryDocumentActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssueReleaseDocumentByinvoiceNumberSignalError(OAIReleaseInventoryDocumentActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use inventoryIssueGetAllSignalErrorFull() instead")
    void inventoryIssueGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssueGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryIssueGetByinventoryIssueNumberSignalErrorFull() instead")
    void inventoryIssueGetByinventoryIssueNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssueGetByinventoryIssueNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryIssuePostSignalErrorFull() instead")
    void inventoryIssuePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssuePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryIssuePutByinventoryIssueNumberSignalErrorFull() instead")
    void inventoryIssuePutByinventoryIssueNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssuePutByinventoryIssueNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryIssueReleaseDocumentByinvoiceNumberSignalErrorFull() instead")
    void inventoryIssueReleaseDocumentByinvoiceNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryIssueReleaseDocumentByinvoiceNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
