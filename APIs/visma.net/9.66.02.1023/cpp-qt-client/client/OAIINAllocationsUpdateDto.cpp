/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIINAllocationsUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIINAllocationsUpdateDto::OAIINAllocationsUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIINAllocationsUpdateDto::OAIINAllocationsUpdateDto() {
    this->initializeModel();
}

OAIINAllocationsUpdateDto::~OAIINAllocationsUpdateDto() {}

void OAIINAllocationsUpdateDto::initializeModel() {

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_line_nbr_isSet = false;
    m_line_nbr_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lot_serial_number_isSet = false;
    m_lot_serial_number_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;
}

void OAIINAllocationsUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIINAllocationsUpdateDto::fromJsonObject(QJsonObject json) {

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_line_nbr_isValid = ::OpenAPI::fromJsonValue(m_line_nbr, json[QString("lineNbr")]);
    m_line_nbr_isSet = !json[QString("lineNbr")].isNull() && m_line_nbr_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lot_serial_number_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_number, json[QString("lotSerialNumber")]);
    m_lot_serial_number_isSet = !json[QString("lotSerialNumber")].isNull() && m_lot_serial_number_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("uom")]);
    m_uom_isSet = !json[QString("uom")].isNull() && m_uom_isValid;
}

QString OAIINAllocationsUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIINAllocationsUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_date.isSet()) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_line_nbr.isSet()) {
        obj.insert(QString("lineNbr"), ::OpenAPI::toJsonValue(m_line_nbr));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lot_serial_number.isSet()) {
        obj.insert(QString("lotSerialNumber"), ::OpenAPI::toJsonValue(m_lot_serial_number));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_uom.isSet()) {
        obj.insert(QString("uom"), ::OpenAPI::toJsonValue(m_uom));
    }
    return obj;
}

OAIDtoValueOfNullableOfDateTime OAIINAllocationsUpdateDto::getExpirationDate() const {
    return m_expiration_date;
}
void OAIINAllocationsUpdateDto::setExpirationDate(const OAIDtoValueOfNullableOfDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIINAllocationsUpdateDto::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIINAllocationsUpdateDto::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIDtoValueOfInt32 OAIINAllocationsUpdateDto::getLineNbr() const {
    return m_line_nbr;
}
void OAIINAllocationsUpdateDto::setLineNbr(const OAIDtoValueOfInt32 &line_nbr) {
    m_line_nbr = line_nbr;
    m_line_nbr_isSet = true;
}

bool OAIINAllocationsUpdateDto::is_line_nbr_Set() const{
    return m_line_nbr_isSet;
}

bool OAIINAllocationsUpdateDto::is_line_nbr_Valid() const{
    return m_line_nbr_isValid;
}

OAIDtoValueOfString OAIINAllocationsUpdateDto::getLocation() const {
    return m_location;
}
void OAIINAllocationsUpdateDto::setLocation(const OAIDtoValueOfString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIINAllocationsUpdateDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIINAllocationsUpdateDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIDtoValueOfString OAIINAllocationsUpdateDto::getLotSerialNumber() const {
    return m_lot_serial_number;
}
void OAIINAllocationsUpdateDto::setLotSerialNumber(const OAIDtoValueOfString &lot_serial_number) {
    m_lot_serial_number = lot_serial_number;
    m_lot_serial_number_isSet = true;
}

bool OAIINAllocationsUpdateDto::is_lot_serial_number_Set() const{
    return m_lot_serial_number_isSet;
}

bool OAIINAllocationsUpdateDto::is_lot_serial_number_Valid() const{
    return m_lot_serial_number_isValid;
}

QString OAIINAllocationsUpdateDto::getOperation() const {
    return m_operation;
}
void OAIINAllocationsUpdateDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIINAllocationsUpdateDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIINAllocationsUpdateDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfNullableOfDecimal OAIINAllocationsUpdateDto::getQuantity() const {
    return m_quantity;
}
void OAIINAllocationsUpdateDto::setQuantity(const OAIDtoValueOfNullableOfDecimal &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIINAllocationsUpdateDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIINAllocationsUpdateDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIDtoValueOfString OAIINAllocationsUpdateDto::getUom() const {
    return m_uom;
}
void OAIINAllocationsUpdateDto::setUom(const OAIDtoValueOfString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAIINAllocationsUpdateDto::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAIINAllocationsUpdateDto::is_uom_Valid() const{
    return m_uom_isValid;
}

bool OAIINAllocationsUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_nbr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIINAllocationsUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
