/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDtoSegmentUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDtoSegmentUpdateDto::OAIDtoSegmentUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDtoSegmentUpdateDto::OAIDtoSegmentUpdateDto() {
    this->initializeModel();
}

OAIDtoSegmentUpdateDto::~OAIDtoSegmentUpdateDto() {}

void OAIDtoSegmentUpdateDto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_dimension_id_isSet = false;
    m_dimension_id_isValid = false;

    m_segement_id_isSet = false;
    m_segement_id_isValid = false;

    m_segment_values_isSet = false;
    m_segment_values_isValid = false;
}

void OAIDtoSegmentUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDtoSegmentUpdateDto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dimension_id_isValid = ::OpenAPI::fromJsonValue(m_dimension_id, json[QString("dimensionId")]);
    m_dimension_id_isSet = !json[QString("dimensionId")].isNull() && m_dimension_id_isValid;

    m_segement_id_isValid = ::OpenAPI::fromJsonValue(m_segement_id, json[QString("segementId")]);
    m_segement_id_isSet = !json[QString("segementId")].isNull() && m_segement_id_isValid;

    m_segment_values_isValid = ::OpenAPI::fromJsonValue(m_segment_values, json[QString("segmentValues")]);
    m_segment_values_isSet = !json[QString("segmentValues")].isNull() && m_segment_values_isValid;
}

QString OAIDtoSegmentUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDtoSegmentUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dimension_id_isSet) {
        obj.insert(QString("dimensionId"), ::OpenAPI::toJsonValue(m_dimension_id));
    }
    if (m_segement_id_isSet) {
        obj.insert(QString("segementId"), ::OpenAPI::toJsonValue(m_segement_id));
    }
    if (m_segment_values.size() > 0) {
        obj.insert(QString("segmentValues"), ::OpenAPI::toJsonValue(m_segment_values));
    }
    return obj;
}

OAIDtoValueOfString OAIDtoSegmentUpdateDto::getDescription() const {
    return m_description;
}
void OAIDtoSegmentUpdateDto::setDescription(const OAIDtoValueOfString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDtoSegmentUpdateDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDtoSegmentUpdateDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDtoSegmentUpdateDto::getDimensionId() const {
    return m_dimension_id;
}
void OAIDtoSegmentUpdateDto::setDimensionId(const QString &dimension_id) {
    m_dimension_id = dimension_id;
    m_dimension_id_isSet = true;
}

bool OAIDtoSegmentUpdateDto::is_dimension_id_Set() const{
    return m_dimension_id_isSet;
}

bool OAIDtoSegmentUpdateDto::is_dimension_id_Valid() const{
    return m_dimension_id_isValid;
}

qint32 OAIDtoSegmentUpdateDto::getSegementId() const {
    return m_segement_id;
}
void OAIDtoSegmentUpdateDto::setSegementId(const qint32 &segement_id) {
    m_segement_id = segement_id;
    m_segement_id_isSet = true;
}

bool OAIDtoSegmentUpdateDto::is_segement_id_Set() const{
    return m_segement_id_isSet;
}

bool OAIDtoSegmentUpdateDto::is_segement_id_Valid() const{
    return m_segement_id_isValid;
}

QList<OAIDtoSegmentValueUpdateDtoBase> OAIDtoSegmentUpdateDto::getSegmentValues() const {
    return m_segment_values;
}
void OAIDtoSegmentUpdateDto::setSegmentValues(const QList<OAIDtoSegmentValueUpdateDtoBase> &segment_values) {
    m_segment_values = segment_values;
    m_segment_values_isSet = true;
}

bool OAIDtoSegmentUpdateDto::is_segment_values_Set() const{
    return m_segment_values_isSet;
}

bool OAIDtoSegmentUpdateDto::is_segment_values_Valid() const{
    return m_segment_values_isValid;
}

bool OAIDtoSegmentUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDtoSegmentUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
