/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomerCreditNoteApi_H
#define OAI_OAICustomerCreditNoteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAICustomerCreditNoteDto.h"
#include "OAICustomerCreditNoteUpdateDto.h"
#include "OAIObject.h"
#include "OAIReleaseCustomerCreditNoteActionResultDto.h"
#include "OAISendToAutoInvoiceArDocumentActionResultDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomerCreditNoteApi : public QObject {
    Q_OBJECT

public:
    OAICustomerCreditNoteApi(const int timeOut = 0);
    ~OAICustomerCreditNoteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_customer_credit_note_update_dto OAICustomerCreditNoteUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    Q_DECL_DEPRECATED virtual void customerCreditNoteCreate(const OAICustomerCreditNoteUpdateDto &oai_customer_credit_note_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  credit_note_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreditNoteCreateHeaderAttachmentBycreditNoteNumber(const QString &credit_note_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  credit_note_number QString [required]
    * @param[in]  line_number qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumber(const QString &credit_note_number, const qint32 &line_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  credit_note_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreditNoteDeleteBycreditNoteNumber(const QString &credit_note_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  document_type QString [optional]
    * @param[in]  released qint32 [optional]
    * @param[in]  dunning_level qint32 [optional]
    * @param[in]  closed_financial_period QString [optional]
    * @param[in]  dunning_letter_date_time QString [optional]
    * @param[in]  dunning_letter_date_time_condition QString [optional]
    * @param[in]  project QString [optional]
    * @param[in]  expand_applications bool [optional]
    * @param[in]  expand_dunning_information bool [optional]
    * @param[in]  expand_attachments bool [optional]
    * @param[in]  expand_tax_details bool [optional]
    * @param[in]  expand_invoice_address bool [optional]
    * @param[in]  financial_period QString [optional]
    * @param[in]  document_due_date QDateTime [optional]
    * @param[in]  status QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  external_reference QString [optional]
    * @param[in]  payment_reference QString [optional]
    * @param[in]  customer_ref_number QString [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreditNoteGetAll(const ::OpenAPI::OptionalParam<QString> &document_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &released = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &dunning_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &closed_financial_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dunning_letter_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dunning_letter_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_applications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_dunning_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_tax_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &expand_invoice_address = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &financial_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &document_due_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &external_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_ref_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  credit_note_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreditNoteGetBycreditNoteNumber(const QString &credit_note_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  credit_note_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreditNotePrintBycreditNoteNumber(const QString &credit_note_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  credit_note_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreditNoteReleaseDocumentBycreditNoteNumber(const QString &credit_note_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  credit_note_number QString [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreditNoteSendToAutoInvoiceBycreditNoteNumber(const QString &credit_note_number, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  credit_note_number QString [required]
    * @param[in]  oai_customer_credit_note_update_dto OAICustomerCreditNoteUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void customerCreditNoteUpdateBycreditNoteNumber(const QString &credit_note_number, const OAICustomerCreditNoteUpdateDto &oai_customer_credit_note_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customerCreditNoteCreateCallback(OAIHttpRequestWorker *worker);
    void customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberCallback(OAIHttpRequestWorker *worker);
    void customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberCallback(OAIHttpRequestWorker *worker);
    void customerCreditNoteDeleteBycreditNoteNumberCallback(OAIHttpRequestWorker *worker);
    void customerCreditNoteGetAllCallback(OAIHttpRequestWorker *worker);
    void customerCreditNoteGetBycreditNoteNumberCallback(OAIHttpRequestWorker *worker);
    void customerCreditNotePrintBycreditNoteNumberCallback(OAIHttpRequestWorker *worker);
    void customerCreditNoteReleaseDocumentBycreditNoteNumberCallback(OAIHttpRequestWorker *worker);
    void customerCreditNoteSendToAutoInvoiceBycreditNoteNumberCallback(OAIHttpRequestWorker *worker);
    void customerCreditNoteUpdateBycreditNoteNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customerCreditNoteCreateSignal(OAIObject summary);
    void customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberSignal(OAIObject summary);
    void customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberSignal(OAIObject summary);
    void customerCreditNoteDeleteBycreditNoteNumberSignal(OAIBackgroundApiAcceptedDto summary);
    void customerCreditNoteGetAllSignal(QList<OAICustomerCreditNoteDto> summary);
    void customerCreditNoteGetBycreditNoteNumberSignal(OAICustomerCreditNoteDto summary);
    void customerCreditNotePrintBycreditNoteNumberSignal(OAIObject summary);
    void customerCreditNoteReleaseDocumentBycreditNoteNumberSignal(OAIReleaseCustomerCreditNoteActionResultDto summary);
    void customerCreditNoteSendToAutoInvoiceBycreditNoteNumberSignal(OAISendToAutoInvoiceArDocumentActionResultDto summary);
    void customerCreditNoteUpdateBycreditNoteNumberSignal(OAIBackgroundApiAcceptedDto summary);


    void customerCreditNoteCreateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerCreditNoteDeleteBycreditNoteNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);
    void customerCreditNoteGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerCreditNoteDto> summary);
    void customerCreditNoteGetBycreditNoteNumberSignalFull(OAIHttpRequestWorker *worker, OAICustomerCreditNoteDto summary);
    void customerCreditNotePrintBycreditNoteNumberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customerCreditNoteReleaseDocumentBycreditNoteNumberSignalFull(OAIHttpRequestWorker *worker, OAIReleaseCustomerCreditNoteActionResultDto summary);
    void customerCreditNoteSendToAutoInvoiceBycreditNoteNumberSignalFull(OAIHttpRequestWorker *worker, OAISendToAutoInvoiceArDocumentActionResultDto summary);
    void customerCreditNoteUpdateBycreditNoteNumberSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use customerCreditNoteCreateSignalError() instead")
    void customerCreditNoteCreateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteCreateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberSignalError() instead")
    void customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberSignalError() instead")
    void customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteDeleteBycreditNoteNumberSignalError() instead")
    void customerCreditNoteDeleteBycreditNoteNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteDeleteBycreditNoteNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteGetAllSignalError() instead")
    void customerCreditNoteGetAllSignalE(QList<OAICustomerCreditNoteDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteGetAllSignalError(QList<OAICustomerCreditNoteDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteGetBycreditNoteNumberSignalError() instead")
    void customerCreditNoteGetBycreditNoteNumberSignalE(OAICustomerCreditNoteDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteGetBycreditNoteNumberSignalError(OAICustomerCreditNoteDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNotePrintBycreditNoteNumberSignalError() instead")
    void customerCreditNotePrintBycreditNoteNumberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNotePrintBycreditNoteNumberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteReleaseDocumentBycreditNoteNumberSignalError() instead")
    void customerCreditNoteReleaseDocumentBycreditNoteNumberSignalE(OAIReleaseCustomerCreditNoteActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteReleaseDocumentBycreditNoteNumberSignalError(OAIReleaseCustomerCreditNoteActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteSendToAutoInvoiceBycreditNoteNumberSignalError() instead")
    void customerCreditNoteSendToAutoInvoiceBycreditNoteNumberSignalE(OAISendToAutoInvoiceArDocumentActionResultDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteSendToAutoInvoiceBycreditNoteNumberSignalError(OAISendToAutoInvoiceArDocumentActionResultDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteUpdateBycreditNoteNumberSignalError() instead")
    void customerCreditNoteUpdateBycreditNoteNumberSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteUpdateBycreditNoteNumberSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customerCreditNoteCreateSignalErrorFull() instead")
    void customerCreditNoteCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberSignalErrorFull() instead")
    void customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteCreateHeaderAttachmentBycreditNoteNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberSignalErrorFull() instead")
    void customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteCreateLineAttachmentBycreditNoteNumberlineNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteDeleteBycreditNoteNumberSignalErrorFull() instead")
    void customerCreditNoteDeleteBycreditNoteNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteDeleteBycreditNoteNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteGetAllSignalErrorFull() instead")
    void customerCreditNoteGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteGetBycreditNoteNumberSignalErrorFull() instead")
    void customerCreditNoteGetBycreditNoteNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteGetBycreditNoteNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNotePrintBycreditNoteNumberSignalErrorFull() instead")
    void customerCreditNotePrintBycreditNoteNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNotePrintBycreditNoteNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteReleaseDocumentBycreditNoteNumberSignalErrorFull() instead")
    void customerCreditNoteReleaseDocumentBycreditNoteNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteReleaseDocumentBycreditNoteNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteSendToAutoInvoiceBycreditNoteNumberSignalErrorFull() instead")
    void customerCreditNoteSendToAutoInvoiceBycreditNoteNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteSendToAutoInvoiceBycreditNoteNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreditNoteUpdateBycreditNoteNumberSignalErrorFull() instead")
    void customerCreditNoteUpdateBycreditNoteNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreditNoteUpdateBycreditNoteNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
