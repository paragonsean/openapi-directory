/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderTypeDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderTypeDto::OAISalesOrderTypeDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderTypeDto::OAISalesOrderTypeDto() {
    this->initializeModel();
}

OAISalesOrderTypeDto::~OAISalesOrderTypeDto() {}

void OAISalesOrderTypeDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_behavior_isSet = false;
    m_behavior_isValid = false;

    m_customer_document_type_isSet = false;
    m_customer_document_type_isValid = false;

    m_default_operation_isSet = false;
    m_default_operation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;
}

void OAISalesOrderTypeDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderTypeDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_behavior_isValid = ::OpenAPI::fromJsonValue(m_behavior, json[QString("behavior")]);
    m_behavior_isSet = !json[QString("behavior")].isNull() && m_behavior_isValid;

    m_customer_document_type_isValid = ::OpenAPI::fromJsonValue(m_customer_document_type, json[QString("customerDocumentType")]);
    m_customer_document_type_isSet = !json[QString("customerDocumentType")].isNull() && m_customer_document_type_isValid;

    m_default_operation_isValid = ::OpenAPI::fromJsonValue(m_default_operation, json[QString("defaultOperation")]);
    m_default_operation_isSet = !json[QString("defaultOperation")].isNull() && m_default_operation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;
}

QString OAISalesOrderTypeDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderTypeDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_behavior_isSet) {
        obj.insert(QString("behavior"), ::OpenAPI::toJsonValue(m_behavior));
    }
    if (m_customer_document_type_isSet) {
        obj.insert(QString("customerDocumentType"), ::OpenAPI::toJsonValue(m_customer_document_type));
    }
    if (m_default_operation_isSet) {
        obj.insert(QString("defaultOperation"), ::OpenAPI::toJsonValue(m_default_operation));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_order_type_isSet) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    return obj;
}

bool OAISalesOrderTypeDto::isActive() const {
    return m_active;
}
void OAISalesOrderTypeDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISalesOrderTypeDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAISalesOrderTypeDto::is_active_Valid() const{
    return m_active_isValid;
}

QString OAISalesOrderTypeDto::getBehavior() const {
    return m_behavior;
}
void OAISalesOrderTypeDto::setBehavior(const QString &behavior) {
    m_behavior = behavior;
    m_behavior_isSet = true;
}

bool OAISalesOrderTypeDto::is_behavior_Set() const{
    return m_behavior_isSet;
}

bool OAISalesOrderTypeDto::is_behavior_Valid() const{
    return m_behavior_isValid;
}

QString OAISalesOrderTypeDto::getCustomerDocumentType() const {
    return m_customer_document_type;
}
void OAISalesOrderTypeDto::setCustomerDocumentType(const QString &customer_document_type) {
    m_customer_document_type = customer_document_type;
    m_customer_document_type_isSet = true;
}

bool OAISalesOrderTypeDto::is_customer_document_type_Set() const{
    return m_customer_document_type_isSet;
}

bool OAISalesOrderTypeDto::is_customer_document_type_Valid() const{
    return m_customer_document_type_isValid;
}

QString OAISalesOrderTypeDto::getDefaultOperation() const {
    return m_default_operation;
}
void OAISalesOrderTypeDto::setDefaultOperation(const QString &default_operation) {
    m_default_operation = default_operation;
    m_default_operation_isSet = true;
}

bool OAISalesOrderTypeDto::is_default_operation_Set() const{
    return m_default_operation_isSet;
}

bool OAISalesOrderTypeDto::is_default_operation_Valid() const{
    return m_default_operation_isValid;
}

QString OAISalesOrderTypeDto::getDescription() const {
    return m_description;
}
void OAISalesOrderTypeDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesOrderTypeDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesOrderTypeDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISalesOrderTypeDto::getErrorInfo() const {
    return m_error_info;
}
void OAISalesOrderTypeDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAISalesOrderTypeDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAISalesOrderTypeDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

OAIMetadataDto OAISalesOrderTypeDto::getMetadata() const {
    return m_metadata;
}
void OAISalesOrderTypeDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISalesOrderTypeDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISalesOrderTypeDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISalesOrderTypeDto::getOrderType() const {
    return m_order_type;
}
void OAISalesOrderTypeDto::setOrderType(const QString &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAISalesOrderTypeDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAISalesOrderTypeDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

bool OAISalesOrderTypeDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderTypeDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
