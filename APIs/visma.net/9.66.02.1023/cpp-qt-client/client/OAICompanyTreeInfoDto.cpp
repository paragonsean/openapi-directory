/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanyTreeInfoDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanyTreeInfoDto::OAICompanyTreeInfoDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanyTreeInfoDto::OAICompanyTreeInfoDto() {
    this->initializeModel();
}

OAICompanyTreeInfoDto::~OAICompanyTreeInfoDto() {}

void OAICompanyTreeInfoDto::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_work_group_id_isSet = false;
    m_work_group_id_isValid = false;
}

void OAICompanyTreeInfoDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanyTreeInfoDto::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_work_group_id_isValid = ::OpenAPI::fromJsonValue(m_work_group_id, json[QString("workGroupID")]);
    m_work_group_id_isSet = !json[QString("workGroupID")].isNull() && m_work_group_id_isValid;
}

QString OAICompanyTreeInfoDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanyTreeInfoDto::asJsonObject() const {
    QJsonObject obj;
    if (m_active.isSet()) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_work_group_id.isSet()) {
        obj.insert(QString("workGroupID"), ::OpenAPI::toJsonValue(m_work_group_id));
    }
    return obj;
}

OAIDtoValueOfBoolean OAICompanyTreeInfoDto::getActive() const {
    return m_active;
}
void OAICompanyTreeInfoDto::setActive(const OAIDtoValueOfBoolean &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICompanyTreeInfoDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAICompanyTreeInfoDto::is_active_Valid() const{
    return m_active_isValid;
}

QString OAICompanyTreeInfoDto::getOperation() const {
    return m_operation;
}
void OAICompanyTreeInfoDto::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICompanyTreeInfoDto::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICompanyTreeInfoDto::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIDtoValueOfBoolean OAICompanyTreeInfoDto::getOwner() const {
    return m_owner;
}
void OAICompanyTreeInfoDto::setOwner(const OAIDtoValueOfBoolean &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICompanyTreeInfoDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICompanyTreeInfoDto::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIDtoValueOfString OAICompanyTreeInfoDto::getWorkGroupId() const {
    return m_work_group_id;
}
void OAICompanyTreeInfoDto::setWorkGroupId(const OAIDtoValueOfString &work_group_id) {
    m_work_group_id = work_group_id;
    m_work_group_id_isSet = true;
}

bool OAICompanyTreeInfoDto::is_work_group_id_Set() const{
    return m_work_group_id_isSet;
}

bool OAICompanyTreeInfoDto::is_work_group_id_Valid() const{
    return m_work_group_id_isValid;
}

bool OAICompanyTreeInfoDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_group_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanyTreeInfoDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
