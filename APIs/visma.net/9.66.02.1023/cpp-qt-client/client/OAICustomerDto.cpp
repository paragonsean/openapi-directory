/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerDto::OAICustomerDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerDto::OAICustomerDto() {
    this->initializeModel();
}

OAICustomerDto::~OAICustomerDto() {}

void OAICustomerDto::initializeModel() {

    m_accept_auto_invoices_isSet = false;
    m_accept_auto_invoices_isValid = false;

    m_account_reference_isSet = false;
    m_account_reference_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_corporate_id_isSet = false;
    m_corporate_id_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_credit_days_past_due_isSet = false;
    m_credit_days_past_due_isValid = false;

    m_credit_limit_isSet = false;
    m_credit_limit_isValid = false;

    m_credit_terms_isSet = false;
    m_credit_terms_isValid = false;

    m_credit_verification_isSet = false;
    m_credit_verification_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_class_isSet = false;
    m_customer_class_isValid = false;

    m_default_payment_method_id_isSet = false;
    m_default_payment_method_id_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_delivery_contact_isSet = false;
    m_delivery_contact_isValid = false;

    m_direct_debit_lines_isSet = false;
    m_direct_debit_lines_isValid = false;

    m_e_invoice_contract_isSet = false;
    m_e_invoice_contract_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_gl_accounts_isSet = false;
    m_gl_accounts_isValid = false;

    m_gln_isSet = false;
    m_gln_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_invoice_address_isSet = false;
    m_invoice_address_isValid = false;

    m_invoice_contact_isSet = false;
    m_invoice_contact_isValid = false;

    m_invoice_to_default_location_isSet = false;
    m_invoice_to_default_location_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_main_address_isSet = false;
    m_main_address_isValid = false;

    m_main_contact_isSet = false;
    m_main_contact_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_parent_record_isSet = false;
    m_parent_record_isValid = false;

    m_payment_methods_isSet = false;
    m_payment_methods_isValid = false;

    m_price_class_isSet = false;
    m_price_class_isValid = false;

    m_print_invoices_isSet = false;
    m_print_invoices_isValid = false;

    m_print_multi_currency_statements_isSet = false;
    m_print_multi_currency_statements_isValid = false;

    m_print_statements_isSet = false;
    m_print_statements_isValid = false;

    m_send_invoices_by_email_isSet = false;
    m_send_invoices_by_email_isValid = false;

    m_send_statements_by_email_isSet = false;
    m_send_statements_by_email_isValid = false;

    m_statement_type_isSet = false;
    m_statement_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vat_registration_id_isSet = false;
    m_vat_registration_id_isValid = false;

    m_vat_zone_isSet = false;
    m_vat_zone_isValid = false;
}

void OAICustomerDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerDto::fromJsonObject(QJsonObject json) {

    m_accept_auto_invoices_isValid = ::OpenAPI::fromJsonValue(m_accept_auto_invoices, json[QString("acceptAutoInvoices")]);
    m_accept_auto_invoices_isSet = !json[QString("acceptAutoInvoices")].isNull() && m_accept_auto_invoices_isValid;

    m_account_reference_isValid = ::OpenAPI::fromJsonValue(m_account_reference, json[QString("accountReference")]);
    m_account_reference_isSet = !json[QString("accountReference")].isNull() && m_account_reference_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_corporate_id_isValid = ::OpenAPI::fromJsonValue(m_corporate_id, json[QString("corporateId")]);
    m_corporate_id_isSet = !json[QString("corporateId")].isNull() && m_corporate_id_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_credit_days_past_due_isValid = ::OpenAPI::fromJsonValue(m_credit_days_past_due, json[QString("creditDaysPastDue")]);
    m_credit_days_past_due_isSet = !json[QString("creditDaysPastDue")].isNull() && m_credit_days_past_due_isValid;

    m_credit_limit_isValid = ::OpenAPI::fromJsonValue(m_credit_limit, json[QString("creditLimit")]);
    m_credit_limit_isSet = !json[QString("creditLimit")].isNull() && m_credit_limit_isValid;

    m_credit_terms_isValid = ::OpenAPI::fromJsonValue(m_credit_terms, json[QString("creditTerms")]);
    m_credit_terms_isSet = !json[QString("creditTerms")].isNull() && m_credit_terms_isValid;

    m_credit_verification_isValid = ::OpenAPI::fromJsonValue(m_credit_verification, json[QString("creditVerification")]);
    m_credit_verification_isSet = !json[QString("creditVerification")].isNull() && m_credit_verification_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_class_isValid = ::OpenAPI::fromJsonValue(m_customer_class, json[QString("customerClass")]);
    m_customer_class_isSet = !json[QString("customerClass")].isNull() && m_customer_class_isValid;

    m_default_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_default_payment_method_id, json[QString("defaultPaymentMethodId")]);
    m_default_payment_method_id_isSet = !json[QString("defaultPaymentMethodId")].isNull() && m_default_payment_method_id_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("deliveryAddress")]);
    m_delivery_address_isSet = !json[QString("deliveryAddress")].isNull() && m_delivery_address_isValid;

    m_delivery_contact_isValid = ::OpenAPI::fromJsonValue(m_delivery_contact, json[QString("deliveryContact")]);
    m_delivery_contact_isSet = !json[QString("deliveryContact")].isNull() && m_delivery_contact_isValid;

    m_direct_debit_lines_isValid = ::OpenAPI::fromJsonValue(m_direct_debit_lines, json[QString("directDebitLines")]);
    m_direct_debit_lines_isSet = !json[QString("directDebitLines")].isNull() && m_direct_debit_lines_isValid;

    m_e_invoice_contract_isValid = ::OpenAPI::fromJsonValue(m_e_invoice_contract, json[QString("eInvoiceContract")]);
    m_e_invoice_contract_isSet = !json[QString("eInvoiceContract")].isNull() && m_e_invoice_contract_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_gl_accounts_isValid = ::OpenAPI::fromJsonValue(m_gl_accounts, json[QString("glAccounts")]);
    m_gl_accounts_isSet = !json[QString("glAccounts")].isNull() && m_gl_accounts_isValid;

    m_gln_isValid = ::OpenAPI::fromJsonValue(m_gln, json[QString("gln")]);
    m_gln_isSet = !json[QString("gln")].isNull() && m_gln_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalId")]);
    m_internal_id_isSet = !json[QString("internalId")].isNull() && m_internal_id_isValid;

    m_invoice_address_isValid = ::OpenAPI::fromJsonValue(m_invoice_address, json[QString("invoiceAddress")]);
    m_invoice_address_isSet = !json[QString("invoiceAddress")].isNull() && m_invoice_address_isValid;

    m_invoice_contact_isValid = ::OpenAPI::fromJsonValue(m_invoice_contact, json[QString("invoiceContact")]);
    m_invoice_contact_isSet = !json[QString("invoiceContact")].isNull() && m_invoice_contact_isValid;

    m_invoice_to_default_location_isValid = ::OpenAPI::fromJsonValue(m_invoice_to_default_location, json[QString("invoiceToDefaultLocation")]);
    m_invoice_to_default_location_isSet = !json[QString("invoiceToDefaultLocation")].isNull() && m_invoice_to_default_location_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_main_address_isValid = ::OpenAPI::fromJsonValue(m_main_address, json[QString("mainAddress")]);
    m_main_address_isSet = !json[QString("mainAddress")].isNull() && m_main_address_isValid;

    m_main_contact_isValid = ::OpenAPI::fromJsonValue(m_main_contact, json[QString("mainContact")]);
    m_main_contact_isSet = !json[QString("mainContact")].isNull() && m_main_contact_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_parent_record_isValid = ::OpenAPI::fromJsonValue(m_parent_record, json[QString("parentRecord")]);
    m_parent_record_isSet = !json[QString("parentRecord")].isNull() && m_parent_record_isValid;

    m_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_payment_methods, json[QString("paymentMethods")]);
    m_payment_methods_isSet = !json[QString("paymentMethods")].isNull() && m_payment_methods_isValid;

    m_price_class_isValid = ::OpenAPI::fromJsonValue(m_price_class, json[QString("priceClass")]);
    m_price_class_isSet = !json[QString("priceClass")].isNull() && m_price_class_isValid;

    m_print_invoices_isValid = ::OpenAPI::fromJsonValue(m_print_invoices, json[QString("printInvoices")]);
    m_print_invoices_isSet = !json[QString("printInvoices")].isNull() && m_print_invoices_isValid;

    m_print_multi_currency_statements_isValid = ::OpenAPI::fromJsonValue(m_print_multi_currency_statements, json[QString("printMultiCurrencyStatements")]);
    m_print_multi_currency_statements_isSet = !json[QString("printMultiCurrencyStatements")].isNull() && m_print_multi_currency_statements_isValid;

    m_print_statements_isValid = ::OpenAPI::fromJsonValue(m_print_statements, json[QString("printStatements")]);
    m_print_statements_isSet = !json[QString("printStatements")].isNull() && m_print_statements_isValid;

    m_send_invoices_by_email_isValid = ::OpenAPI::fromJsonValue(m_send_invoices_by_email, json[QString("sendInvoicesByEmail")]);
    m_send_invoices_by_email_isSet = !json[QString("sendInvoicesByEmail")].isNull() && m_send_invoices_by_email_isValid;

    m_send_statements_by_email_isValid = ::OpenAPI::fromJsonValue(m_send_statements_by_email, json[QString("sendStatementsByEmail")]);
    m_send_statements_by_email_isSet = !json[QString("sendStatementsByEmail")].isNull() && m_send_statements_by_email_isValid;

    m_statement_type_isValid = ::OpenAPI::fromJsonValue(m_statement_type, json[QString("statementType")]);
    m_statement_type_isSet = !json[QString("statementType")].isNull() && m_statement_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vat_registration_id_isValid = ::OpenAPI::fromJsonValue(m_vat_registration_id, json[QString("vatRegistrationId")]);
    m_vat_registration_id_isSet = !json[QString("vatRegistrationId")].isNull() && m_vat_registration_id_isValid;

    m_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_vat_zone, json[QString("vatZone")]);
    m_vat_zone_isSet = !json[QString("vatZone")].isNull() && m_vat_zone_isValid;
}

QString OAICustomerDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerDto::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_auto_invoices_isSet) {
        obj.insert(QString("acceptAutoInvoices"), ::OpenAPI::toJsonValue(m_accept_auto_invoices));
    }
    if (m_account_reference_isSet) {
        obj.insert(QString("accountReference"), ::OpenAPI::toJsonValue(m_account_reference));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_corporate_id_isSet) {
        obj.insert(QString("corporateId"), ::OpenAPI::toJsonValue(m_corporate_id));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_credit_days_past_due_isSet) {
        obj.insert(QString("creditDaysPastDue"), ::OpenAPI::toJsonValue(m_credit_days_past_due));
    }
    if (m_credit_limit_isSet) {
        obj.insert(QString("creditLimit"), ::OpenAPI::toJsonValue(m_credit_limit));
    }
    if (m_credit_terms.isSet()) {
        obj.insert(QString("creditTerms"), ::OpenAPI::toJsonValue(m_credit_terms));
    }
    if (m_credit_verification_isSet) {
        obj.insert(QString("creditVerification"), ::OpenAPI::toJsonValue(m_credit_verification));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer_class.isSet()) {
        obj.insert(QString("customerClass"), ::OpenAPI::toJsonValue(m_customer_class));
    }
    if (m_default_payment_method_id_isSet) {
        obj.insert(QString("defaultPaymentMethodId"), ::OpenAPI::toJsonValue(m_default_payment_method_id));
    }
    if (m_delivery_address.isSet()) {
        obj.insert(QString("deliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_delivery_contact.isSet()) {
        obj.insert(QString("deliveryContact"), ::OpenAPI::toJsonValue(m_delivery_contact));
    }
    if (m_direct_debit_lines.size() > 0) {
        obj.insert(QString("directDebitLines"), ::OpenAPI::toJsonValue(m_direct_debit_lines));
    }
    if (m_e_invoice_contract.isSet()) {
        obj.insert(QString("eInvoiceContract"), ::OpenAPI::toJsonValue(m_e_invoice_contract));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_gl_accounts.isSet()) {
        obj.insert(QString("glAccounts"), ::OpenAPI::toJsonValue(m_gl_accounts));
    }
    if (m_gln_isSet) {
        obj.insert(QString("gln"), ::OpenAPI::toJsonValue(m_gln));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalId"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_invoice_address.isSet()) {
        obj.insert(QString("invoiceAddress"), ::OpenAPI::toJsonValue(m_invoice_address));
    }
    if (m_invoice_contact.isSet()) {
        obj.insert(QString("invoiceContact"), ::OpenAPI::toJsonValue(m_invoice_contact));
    }
    if (m_invoice_to_default_location_isSet) {
        obj.insert(QString("invoiceToDefaultLocation"), ::OpenAPI::toJsonValue(m_invoice_to_default_location));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_main_address.isSet()) {
        obj.insert(QString("mainAddress"), ::OpenAPI::toJsonValue(m_main_address));
    }
    if (m_main_contact.isSet()) {
        obj.insert(QString("mainContact"), ::OpenAPI::toJsonValue(m_main_contact));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_parent_record.isSet()) {
        obj.insert(QString("parentRecord"), ::OpenAPI::toJsonValue(m_parent_record));
    }
    if (m_payment_methods.size() > 0) {
        obj.insert(QString("paymentMethods"), ::OpenAPI::toJsonValue(m_payment_methods));
    }
    if (m_price_class.isSet()) {
        obj.insert(QString("priceClass"), ::OpenAPI::toJsonValue(m_price_class));
    }
    if (m_print_invoices_isSet) {
        obj.insert(QString("printInvoices"), ::OpenAPI::toJsonValue(m_print_invoices));
    }
    if (m_print_multi_currency_statements_isSet) {
        obj.insert(QString("printMultiCurrencyStatements"), ::OpenAPI::toJsonValue(m_print_multi_currency_statements));
    }
    if (m_print_statements_isSet) {
        obj.insert(QString("printStatements"), ::OpenAPI::toJsonValue(m_print_statements));
    }
    if (m_send_invoices_by_email_isSet) {
        obj.insert(QString("sendInvoicesByEmail"), ::OpenAPI::toJsonValue(m_send_invoices_by_email));
    }
    if (m_send_statements_by_email_isSet) {
        obj.insert(QString("sendStatementsByEmail"), ::OpenAPI::toJsonValue(m_send_statements_by_email));
    }
    if (m_statement_type_isSet) {
        obj.insert(QString("statementType"), ::OpenAPI::toJsonValue(m_statement_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vat_registration_id_isSet) {
        obj.insert(QString("vatRegistrationId"), ::OpenAPI::toJsonValue(m_vat_registration_id));
    }
    if (m_vat_zone.isSet()) {
        obj.insert(QString("vatZone"), ::OpenAPI::toJsonValue(m_vat_zone));
    }
    return obj;
}

bool OAICustomerDto::isAcceptAutoInvoices() const {
    return m_accept_auto_invoices;
}
void OAICustomerDto::setAcceptAutoInvoices(const bool &accept_auto_invoices) {
    m_accept_auto_invoices = accept_auto_invoices;
    m_accept_auto_invoices_isSet = true;
}

bool OAICustomerDto::is_accept_auto_invoices_Set() const{
    return m_accept_auto_invoices_isSet;
}

bool OAICustomerDto::is_accept_auto_invoices_Valid() const{
    return m_accept_auto_invoices_isValid;
}

QString OAICustomerDto::getAccountReference() const {
    return m_account_reference;
}
void OAICustomerDto::setAccountReference(const QString &account_reference) {
    m_account_reference = account_reference;
    m_account_reference_isSet = true;
}

bool OAICustomerDto::is_account_reference_Set() const{
    return m_account_reference_isSet;
}

bool OAICustomerDto::is_account_reference_Valid() const{
    return m_account_reference_isValid;
}

QList<OAIAttributeIdValueDto> OAICustomerDto::getAttributes() const {
    return m_attributes;
}
void OAICustomerDto::setAttributes(const QList<OAIAttributeIdValueDto> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICustomerDto::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICustomerDto::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAICustomerDto::getCorporateId() const {
    return m_corporate_id;
}
void OAICustomerDto::setCorporateId(const QString &corporate_id) {
    m_corporate_id = corporate_id;
    m_corporate_id_isSet = true;
}

bool OAICustomerDto::is_corporate_id_Set() const{
    return m_corporate_id_isSet;
}

bool OAICustomerDto::is_corporate_id_Valid() const{
    return m_corporate_id_isValid;
}

QDateTime OAICustomerDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAICustomerDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAICustomerDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAICustomerDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

qint32 OAICustomerDto::getCreditDaysPastDue() const {
    return m_credit_days_past_due;
}
void OAICustomerDto::setCreditDaysPastDue(const qint32 &credit_days_past_due) {
    m_credit_days_past_due = credit_days_past_due;
    m_credit_days_past_due_isSet = true;
}

bool OAICustomerDto::is_credit_days_past_due_Set() const{
    return m_credit_days_past_due_isSet;
}

bool OAICustomerDto::is_credit_days_past_due_Valid() const{
    return m_credit_days_past_due_isValid;
}

double OAICustomerDto::getCreditLimit() const {
    return m_credit_limit;
}
void OAICustomerDto::setCreditLimit(const double &credit_limit) {
    m_credit_limit = credit_limit;
    m_credit_limit_isSet = true;
}

bool OAICustomerDto::is_credit_limit_Set() const{
    return m_credit_limit_isSet;
}

bool OAICustomerDto::is_credit_limit_Valid() const{
    return m_credit_limit_isValid;
}

OAICreditTermsInCustomerDto OAICustomerDto::getCreditTerms() const {
    return m_credit_terms;
}
void OAICustomerDto::setCreditTerms(const OAICreditTermsInCustomerDto &credit_terms) {
    m_credit_terms = credit_terms;
    m_credit_terms_isSet = true;
}

bool OAICustomerDto::is_credit_terms_Set() const{
    return m_credit_terms_isSet;
}

bool OAICustomerDto::is_credit_terms_Valid() const{
    return m_credit_terms_isValid;
}

QString OAICustomerDto::getCreditVerification() const {
    return m_credit_verification;
}
void OAICustomerDto::setCreditVerification(const QString &credit_verification) {
    m_credit_verification = credit_verification;
    m_credit_verification_isSet = true;
}

bool OAICustomerDto::is_credit_verification_Set() const{
    return m_credit_verification_isSet;
}

bool OAICustomerDto::is_credit_verification_Valid() const{
    return m_credit_verification_isValid;
}

QString OAICustomerDto::getCurrencyId() const {
    return m_currency_id;
}
void OAICustomerDto::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAICustomerDto::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAICustomerDto::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAICustomerClassInCustomerDto OAICustomerDto::getCustomerClass() const {
    return m_customer_class;
}
void OAICustomerDto::setCustomerClass(const OAICustomerClassInCustomerDto &customer_class) {
    m_customer_class = customer_class;
    m_customer_class_isSet = true;
}

bool OAICustomerDto::is_customer_class_Set() const{
    return m_customer_class_isSet;
}

bool OAICustomerDto::is_customer_class_Valid() const{
    return m_customer_class_isValid;
}

QString OAICustomerDto::getDefaultPaymentMethodId() const {
    return m_default_payment_method_id;
}
void OAICustomerDto::setDefaultPaymentMethodId(const QString &default_payment_method_id) {
    m_default_payment_method_id = default_payment_method_id;
    m_default_payment_method_id_isSet = true;
}

bool OAICustomerDto::is_default_payment_method_id_Set() const{
    return m_default_payment_method_id_isSet;
}

bool OAICustomerDto::is_default_payment_method_id_Valid() const{
    return m_default_payment_method_id_isValid;
}

OAIDeliveryAddressInCustomerDto OAICustomerDto::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAICustomerDto::setDeliveryAddress(const OAIDeliveryAddressInCustomerDto &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAICustomerDto::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAICustomerDto::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

OAIDeliveryContactInCustomerDto OAICustomerDto::getDeliveryContact() const {
    return m_delivery_contact;
}
void OAICustomerDto::setDeliveryContact(const OAIDeliveryContactInCustomerDto &delivery_contact) {
    m_delivery_contact = delivery_contact;
    m_delivery_contact_isSet = true;
}

bool OAICustomerDto::is_delivery_contact_Set() const{
    return m_delivery_contact_isSet;
}

bool OAICustomerDto::is_delivery_contact_Valid() const{
    return m_delivery_contact_isValid;
}

QList<OAICustomerDirectDebitDto> OAICustomerDto::getDirectDebitLines() const {
    return m_direct_debit_lines;
}
void OAICustomerDto::setDirectDebitLines(const QList<OAICustomerDirectDebitDto> &direct_debit_lines) {
    m_direct_debit_lines = direct_debit_lines;
    m_direct_debit_lines_isSet = true;
}

bool OAICustomerDto::is_direct_debit_lines_Set() const{
    return m_direct_debit_lines_isSet;
}

bool OAICustomerDto::is_direct_debit_lines_Valid() const{
    return m_direct_debit_lines_isValid;
}

OAIEInvoiceContractInCustomerDto OAICustomerDto::getEInvoiceContract() const {
    return m_e_invoice_contract;
}
void OAICustomerDto::setEInvoiceContract(const OAIEInvoiceContractInCustomerDto &e_invoice_contract) {
    m_e_invoice_contract = e_invoice_contract;
    m_e_invoice_contract_isSet = true;
}

bool OAICustomerDto::is_e_invoice_contract_Set() const{
    return m_e_invoice_contract_isSet;
}

bool OAICustomerDto::is_e_invoice_contract_Valid() const{
    return m_e_invoice_contract_isValid;
}

QString OAICustomerDto::getErrorInfo() const {
    return m_error_info;
}
void OAICustomerDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAICustomerDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAICustomerDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

OAIGlAccountsInCustomerDto OAICustomerDto::getGlAccounts() const {
    return m_gl_accounts;
}
void OAICustomerDto::setGlAccounts(const OAIGlAccountsInCustomerDto &gl_accounts) {
    m_gl_accounts = gl_accounts;
    m_gl_accounts_isSet = true;
}

bool OAICustomerDto::is_gl_accounts_Set() const{
    return m_gl_accounts_isSet;
}

bool OAICustomerDto::is_gl_accounts_Valid() const{
    return m_gl_accounts_isValid;
}

QString OAICustomerDto::getGln() const {
    return m_gln;
}
void OAICustomerDto::setGln(const QString &gln) {
    m_gln = gln;
    m_gln_isSet = true;
}

bool OAICustomerDto::is_gln_Set() const{
    return m_gln_isSet;
}

bool OAICustomerDto::is_gln_Valid() const{
    return m_gln_isValid;
}

qint32 OAICustomerDto::getInternalId() const {
    return m_internal_id;
}
void OAICustomerDto::setInternalId(const qint32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAICustomerDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAICustomerDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

OAIInvoiceAddressInCustomerDto OAICustomerDto::getInvoiceAddress() const {
    return m_invoice_address;
}
void OAICustomerDto::setInvoiceAddress(const OAIInvoiceAddressInCustomerDto &invoice_address) {
    m_invoice_address = invoice_address;
    m_invoice_address_isSet = true;
}

bool OAICustomerDto::is_invoice_address_Set() const{
    return m_invoice_address_isSet;
}

bool OAICustomerDto::is_invoice_address_Valid() const{
    return m_invoice_address_isValid;
}

OAIInvoiceContactInCustomerDto OAICustomerDto::getInvoiceContact() const {
    return m_invoice_contact;
}
void OAICustomerDto::setInvoiceContact(const OAIInvoiceContactInCustomerDto &invoice_contact) {
    m_invoice_contact = invoice_contact;
    m_invoice_contact_isSet = true;
}

bool OAICustomerDto::is_invoice_contact_Set() const{
    return m_invoice_contact_isSet;
}

bool OAICustomerDto::is_invoice_contact_Valid() const{
    return m_invoice_contact_isValid;
}

bool OAICustomerDto::isInvoiceToDefaultLocation() const {
    return m_invoice_to_default_location;
}
void OAICustomerDto::setInvoiceToDefaultLocation(const bool &invoice_to_default_location) {
    m_invoice_to_default_location = invoice_to_default_location;
    m_invoice_to_default_location_isSet = true;
}

bool OAICustomerDto::is_invoice_to_default_location_Set() const{
    return m_invoice_to_default_location_isSet;
}

bool OAICustomerDto::is_invoice_to_default_location_Valid() const{
    return m_invoice_to_default_location_isValid;
}

QDateTime OAICustomerDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAICustomerDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAICustomerDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAICustomerDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAILocationInCustomerDto OAICustomerDto::getLocation() const {
    return m_location;
}
void OAICustomerDto::setLocation(const OAILocationInCustomerDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICustomerDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAICustomerDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMainAddressInCustomerDto OAICustomerDto::getMainAddress() const {
    return m_main_address;
}
void OAICustomerDto::setMainAddress(const OAIMainAddressInCustomerDto &main_address) {
    m_main_address = main_address;
    m_main_address_isSet = true;
}

bool OAICustomerDto::is_main_address_Set() const{
    return m_main_address_isSet;
}

bool OAICustomerDto::is_main_address_Valid() const{
    return m_main_address_isValid;
}

OAIMainContactInCustomerDto OAICustomerDto::getMainContact() const {
    return m_main_contact;
}
void OAICustomerDto::setMainContact(const OAIMainContactInCustomerDto &main_contact) {
    m_main_contact = main_contact;
    m_main_contact_isSet = true;
}

bool OAICustomerDto::is_main_contact_Set() const{
    return m_main_contact_isSet;
}

bool OAICustomerDto::is_main_contact_Valid() const{
    return m_main_contact_isValid;
}

OAIMetadataDto OAICustomerDto::getMetadata() const {
    return m_metadata;
}
void OAICustomerDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICustomerDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICustomerDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICustomerDto::getName() const {
    return m_name;
}
void OAICustomerDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomerDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomerDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomerDto::getNumber() const {
    return m_number;
}
void OAICustomerDto::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICustomerDto::is_number_Set() const{
    return m_number_isSet;
}

bool OAICustomerDto::is_number_Valid() const{
    return m_number_isValid;
}

OAIParentRecordDto OAICustomerDto::getParentRecord() const {
    return m_parent_record;
}
void OAICustomerDto::setParentRecord(const OAIParentRecordDto &parent_record) {
    m_parent_record = parent_record;
    m_parent_record_isSet = true;
}

bool OAICustomerDto::is_parent_record_Set() const{
    return m_parent_record_isSet;
}

bool OAICustomerDto::is_parent_record_Valid() const{
    return m_parent_record_isValid;
}

QList<OAICustomerPaymentMethodInfoDto> OAICustomerDto::getPaymentMethods() const {
    return m_payment_methods;
}
void OAICustomerDto::setPaymentMethods(const QList<OAICustomerPaymentMethodInfoDto> &payment_methods) {
    m_payment_methods = payment_methods;
    m_payment_methods_isSet = true;
}

bool OAICustomerDto::is_payment_methods_Set() const{
    return m_payment_methods_isSet;
}

bool OAICustomerDto::is_payment_methods_Valid() const{
    return m_payment_methods_isValid;
}

OAIPriceClassInCustomerDto OAICustomerDto::getPriceClass() const {
    return m_price_class;
}
void OAICustomerDto::setPriceClass(const OAIPriceClassInCustomerDto &price_class) {
    m_price_class = price_class;
    m_price_class_isSet = true;
}

bool OAICustomerDto::is_price_class_Set() const{
    return m_price_class_isSet;
}

bool OAICustomerDto::is_price_class_Valid() const{
    return m_price_class_isValid;
}

bool OAICustomerDto::isPrintInvoices() const {
    return m_print_invoices;
}
void OAICustomerDto::setPrintInvoices(const bool &print_invoices) {
    m_print_invoices = print_invoices;
    m_print_invoices_isSet = true;
}

bool OAICustomerDto::is_print_invoices_Set() const{
    return m_print_invoices_isSet;
}

bool OAICustomerDto::is_print_invoices_Valid() const{
    return m_print_invoices_isValid;
}

bool OAICustomerDto::isPrintMultiCurrencyStatements() const {
    return m_print_multi_currency_statements;
}
void OAICustomerDto::setPrintMultiCurrencyStatements(const bool &print_multi_currency_statements) {
    m_print_multi_currency_statements = print_multi_currency_statements;
    m_print_multi_currency_statements_isSet = true;
}

bool OAICustomerDto::is_print_multi_currency_statements_Set() const{
    return m_print_multi_currency_statements_isSet;
}

bool OAICustomerDto::is_print_multi_currency_statements_Valid() const{
    return m_print_multi_currency_statements_isValid;
}

bool OAICustomerDto::isPrintStatements() const {
    return m_print_statements;
}
void OAICustomerDto::setPrintStatements(const bool &print_statements) {
    m_print_statements = print_statements;
    m_print_statements_isSet = true;
}

bool OAICustomerDto::is_print_statements_Set() const{
    return m_print_statements_isSet;
}

bool OAICustomerDto::is_print_statements_Valid() const{
    return m_print_statements_isValid;
}

bool OAICustomerDto::isSendInvoicesByEmail() const {
    return m_send_invoices_by_email;
}
void OAICustomerDto::setSendInvoicesByEmail(const bool &send_invoices_by_email) {
    m_send_invoices_by_email = send_invoices_by_email;
    m_send_invoices_by_email_isSet = true;
}

bool OAICustomerDto::is_send_invoices_by_email_Set() const{
    return m_send_invoices_by_email_isSet;
}

bool OAICustomerDto::is_send_invoices_by_email_Valid() const{
    return m_send_invoices_by_email_isValid;
}

bool OAICustomerDto::isSendStatementsByEmail() const {
    return m_send_statements_by_email;
}
void OAICustomerDto::setSendStatementsByEmail(const bool &send_statements_by_email) {
    m_send_statements_by_email = send_statements_by_email;
    m_send_statements_by_email_isSet = true;
}

bool OAICustomerDto::is_send_statements_by_email_Set() const{
    return m_send_statements_by_email_isSet;
}

bool OAICustomerDto::is_send_statements_by_email_Valid() const{
    return m_send_statements_by_email_isValid;
}

QString OAICustomerDto::getStatementType() const {
    return m_statement_type;
}
void OAICustomerDto::setStatementType(const QString &statement_type) {
    m_statement_type = statement_type;
    m_statement_type_isSet = true;
}

bool OAICustomerDto::is_statement_type_Set() const{
    return m_statement_type_isSet;
}

bool OAICustomerDto::is_statement_type_Valid() const{
    return m_statement_type_isValid;
}

QString OAICustomerDto::getStatus() const {
    return m_status;
}
void OAICustomerDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomerDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomerDto::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICustomerDto::getVatRegistrationId() const {
    return m_vat_registration_id;
}
void OAICustomerDto::setVatRegistrationId(const QString &vat_registration_id) {
    m_vat_registration_id = vat_registration_id;
    m_vat_registration_id_isSet = true;
}

bool OAICustomerDto::is_vat_registration_id_Set() const{
    return m_vat_registration_id_isSet;
}

bool OAICustomerDto::is_vat_registration_id_Valid() const{
    return m_vat_registration_id_isValid;
}

OAIVatZoneInCustomerDto OAICustomerDto::getVatZone() const {
    return m_vat_zone;
}
void OAICustomerDto::setVatZone(const OAIVatZoneInCustomerDto &vat_zone) {
    m_vat_zone = vat_zone;
    m_vat_zone_isSet = true;
}

bool OAICustomerDto::is_vat_zone_Set() const{
    return m_vat_zone_isSet;
}

bool OAICustomerDto::is_vat_zone_Valid() const{
    return m_vat_zone_isValid;
}

bool OAICustomerDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_auto_invoices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_days_past_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_debit_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_invoice_contract.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gl_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gln_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_to_default_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_invoices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_multi_currency_statements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_statements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_invoices_by_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_statements_by_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
