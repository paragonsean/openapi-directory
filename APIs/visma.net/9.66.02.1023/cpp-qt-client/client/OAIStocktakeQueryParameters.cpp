/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStocktakeQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStocktakeQueryParameters::OAIStocktakeQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStocktakeQueryParameters::OAIStocktakeQueryParameters() {
    this->initializeModel();
}

OAIStocktakeQueryParameters::~OAIStocktakeQueryParameters() {}

void OAIStocktakeQueryParameters::initializeModel() {

    m_end_with_line_isSet = false;
    m_end_with_line_isValid = false;

    m_expiration_date_time_isSet = false;
    m_expiration_date_time_isValid = false;

    m_expiration_date_time_condition_isSet = false;
    m_expiration_date_time_condition_isValid = false;

    m_freeze_date_time_isSet = false;
    m_freeze_date_time_isValid = false;

    m_freeze_date_time_condition_isSet = false;
    m_freeze_date_time_condition_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_lot_serial_number_isSet = false;
    m_lot_serial_number_isValid = false;

    m_number_to_read_isSet = false;
    m_number_to_read_isValid = false;

    m_skip_records_isSet = false;
    m_skip_records_isValid = false;

    m_start_with_line_isSet = false;
    m_start_with_line_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_status_isSet = false;
    m_summary_status_isValid = false;

    m_warehouse_isSet = false;
    m_warehouse_isValid = false;
}

void OAIStocktakeQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStocktakeQueryParameters::fromJsonObject(QJsonObject json) {

    m_end_with_line_isValid = ::OpenAPI::fromJsonValue(m_end_with_line, json[QString("endWithLine")]);
    m_end_with_line_isSet = !json[QString("endWithLine")].isNull() && m_end_with_line_isValid;

    m_expiration_date_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_date_time, json[QString("expirationDateTime")]);
    m_expiration_date_time_isSet = !json[QString("expirationDateTime")].isNull() && m_expiration_date_time_isValid;

    m_expiration_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_expiration_date_time_condition, json[QString("expirationDateTimeCondition")]);
    m_expiration_date_time_condition_isSet = !json[QString("expirationDateTimeCondition")].isNull() && m_expiration_date_time_condition_isValid;

    m_freeze_date_time_isValid = ::OpenAPI::fromJsonValue(m_freeze_date_time, json[QString("freezeDateTime")]);
    m_freeze_date_time_isSet = !json[QString("freezeDateTime")].isNull() && m_freeze_date_time_isValid;

    m_freeze_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_freeze_date_time_condition, json[QString("freezeDateTimeCondition")]);
    m_freeze_date_time_condition_isSet = !json[QString("freezeDateTimeCondition")].isNull() && m_freeze_date_time_condition_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lot_serial_number_isValid = ::OpenAPI::fromJsonValue(m_lot_serial_number, json[QString("lotSerialNumber")]);
    m_lot_serial_number_isSet = !json[QString("lotSerialNumber")].isNull() && m_lot_serial_number_isValid;

    m_number_to_read_isValid = ::OpenAPI::fromJsonValue(m_number_to_read, json[QString("numberToRead")]);
    m_number_to_read_isSet = !json[QString("numberToRead")].isNull() && m_number_to_read_isValid;

    m_skip_records_isValid = ::OpenAPI::fromJsonValue(m_skip_records, json[QString("skipRecords")]);
    m_skip_records_isSet = !json[QString("skipRecords")].isNull() && m_skip_records_isValid;

    m_start_with_line_isValid = ::OpenAPI::fromJsonValue(m_start_with_line, json[QString("startWithLine")]);
    m_start_with_line_isSet = !json[QString("startWithLine")].isNull() && m_start_with_line_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_status_isValid = ::OpenAPI::fromJsonValue(m_summary_status, json[QString("summaryStatus")]);
    m_summary_status_isSet = !json[QString("summaryStatus")].isNull() && m_summary_status_isValid;

    m_warehouse_isValid = ::OpenAPI::fromJsonValue(m_warehouse, json[QString("warehouse")]);
    m_warehouse_isSet = !json[QString("warehouse")].isNull() && m_warehouse_isValid;
}

QString OAIStocktakeQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStocktakeQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_end_with_line_isSet) {
        obj.insert(QString("endWithLine"), ::OpenAPI::toJsonValue(m_end_with_line));
    }
    if (m_expiration_date_time_isSet) {
        obj.insert(QString("expirationDateTime"), ::OpenAPI::toJsonValue(m_expiration_date_time));
    }
    if (m_expiration_date_time_condition_isSet) {
        obj.insert(QString("expirationDateTimeCondition"), ::OpenAPI::toJsonValue(m_expiration_date_time_condition));
    }
    if (m_freeze_date_time_isSet) {
        obj.insert(QString("freezeDateTime"), ::OpenAPI::toJsonValue(m_freeze_date_time));
    }
    if (m_freeze_date_time_condition_isSet) {
        obj.insert(QString("freezeDateTimeCondition"), ::OpenAPI::toJsonValue(m_freeze_date_time_condition));
    }
    if (m_inventory_isSet) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lot_serial_number_isSet) {
        obj.insert(QString("lotSerialNumber"), ::OpenAPI::toJsonValue(m_lot_serial_number));
    }
    if (m_number_to_read_isSet) {
        obj.insert(QString("numberToRead"), ::OpenAPI::toJsonValue(m_number_to_read));
    }
    if (m_skip_records_isSet) {
        obj.insert(QString("skipRecords"), ::OpenAPI::toJsonValue(m_skip_records));
    }
    if (m_start_with_line_isSet) {
        obj.insert(QString("startWithLine"), ::OpenAPI::toJsonValue(m_start_with_line));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary_status_isSet) {
        obj.insert(QString("summaryStatus"), ::OpenAPI::toJsonValue(m_summary_status));
    }
    if (m_warehouse_isSet) {
        obj.insert(QString("warehouse"), ::OpenAPI::toJsonValue(m_warehouse));
    }
    return obj;
}

qint32 OAIStocktakeQueryParameters::getEndWithLine() const {
    return m_end_with_line;
}
void OAIStocktakeQueryParameters::setEndWithLine(const qint32 &end_with_line) {
    m_end_with_line = end_with_line;
    m_end_with_line_isSet = true;
}

bool OAIStocktakeQueryParameters::is_end_with_line_Set() const{
    return m_end_with_line_isSet;
}

bool OAIStocktakeQueryParameters::is_end_with_line_Valid() const{
    return m_end_with_line_isValid;
}

QString OAIStocktakeQueryParameters::getExpirationDateTime() const {
    return m_expiration_date_time;
}
void OAIStocktakeQueryParameters::setExpirationDateTime(const QString &expiration_date_time) {
    m_expiration_date_time = expiration_date_time;
    m_expiration_date_time_isSet = true;
}

bool OAIStocktakeQueryParameters::is_expiration_date_time_Set() const{
    return m_expiration_date_time_isSet;
}

bool OAIStocktakeQueryParameters::is_expiration_date_time_Valid() const{
    return m_expiration_date_time_isValid;
}

QString OAIStocktakeQueryParameters::getExpirationDateTimeCondition() const {
    return m_expiration_date_time_condition;
}
void OAIStocktakeQueryParameters::setExpirationDateTimeCondition(const QString &expiration_date_time_condition) {
    m_expiration_date_time_condition = expiration_date_time_condition;
    m_expiration_date_time_condition_isSet = true;
}

bool OAIStocktakeQueryParameters::is_expiration_date_time_condition_Set() const{
    return m_expiration_date_time_condition_isSet;
}

bool OAIStocktakeQueryParameters::is_expiration_date_time_condition_Valid() const{
    return m_expiration_date_time_condition_isValid;
}

QString OAIStocktakeQueryParameters::getFreezeDateTime() const {
    return m_freeze_date_time;
}
void OAIStocktakeQueryParameters::setFreezeDateTime(const QString &freeze_date_time) {
    m_freeze_date_time = freeze_date_time;
    m_freeze_date_time_isSet = true;
}

bool OAIStocktakeQueryParameters::is_freeze_date_time_Set() const{
    return m_freeze_date_time_isSet;
}

bool OAIStocktakeQueryParameters::is_freeze_date_time_Valid() const{
    return m_freeze_date_time_isValid;
}

QString OAIStocktakeQueryParameters::getFreezeDateTimeCondition() const {
    return m_freeze_date_time_condition;
}
void OAIStocktakeQueryParameters::setFreezeDateTimeCondition(const QString &freeze_date_time_condition) {
    m_freeze_date_time_condition = freeze_date_time_condition;
    m_freeze_date_time_condition_isSet = true;
}

bool OAIStocktakeQueryParameters::is_freeze_date_time_condition_Set() const{
    return m_freeze_date_time_condition_isSet;
}

bool OAIStocktakeQueryParameters::is_freeze_date_time_condition_Valid() const{
    return m_freeze_date_time_condition_isValid;
}

QString OAIStocktakeQueryParameters::getInventory() const {
    return m_inventory;
}
void OAIStocktakeQueryParameters::setInventory(const QString &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIStocktakeQueryParameters::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIStocktakeQueryParameters::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QString OAIStocktakeQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIStocktakeQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIStocktakeQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIStocktakeQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIStocktakeQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAIStocktakeQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAIStocktakeQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAIStocktakeQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

QString OAIStocktakeQueryParameters::getLocation() const {
    return m_location;
}
void OAIStocktakeQueryParameters::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIStocktakeQueryParameters::is_location_Set() const{
    return m_location_isSet;
}

bool OAIStocktakeQueryParameters::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIStocktakeQueryParameters::getLotSerialNumber() const {
    return m_lot_serial_number;
}
void OAIStocktakeQueryParameters::setLotSerialNumber(const QString &lot_serial_number) {
    m_lot_serial_number = lot_serial_number;
    m_lot_serial_number_isSet = true;
}

bool OAIStocktakeQueryParameters::is_lot_serial_number_Set() const{
    return m_lot_serial_number_isSet;
}

bool OAIStocktakeQueryParameters::is_lot_serial_number_Valid() const{
    return m_lot_serial_number_isValid;
}

qint32 OAIStocktakeQueryParameters::getNumberToRead() const {
    return m_number_to_read;
}
void OAIStocktakeQueryParameters::setNumberToRead(const qint32 &number_to_read) {
    m_number_to_read = number_to_read;
    m_number_to_read_isSet = true;
}

bool OAIStocktakeQueryParameters::is_number_to_read_Set() const{
    return m_number_to_read_isSet;
}

bool OAIStocktakeQueryParameters::is_number_to_read_Valid() const{
    return m_number_to_read_isValid;
}

qint32 OAIStocktakeQueryParameters::getSkipRecords() const {
    return m_skip_records;
}
void OAIStocktakeQueryParameters::setSkipRecords(const qint32 &skip_records) {
    m_skip_records = skip_records;
    m_skip_records_isSet = true;
}

bool OAIStocktakeQueryParameters::is_skip_records_Set() const{
    return m_skip_records_isSet;
}

bool OAIStocktakeQueryParameters::is_skip_records_Valid() const{
    return m_skip_records_isValid;
}

qint32 OAIStocktakeQueryParameters::getStartWithLine() const {
    return m_start_with_line;
}
void OAIStocktakeQueryParameters::setStartWithLine(const qint32 &start_with_line) {
    m_start_with_line = start_with_line;
    m_start_with_line_isSet = true;
}

bool OAIStocktakeQueryParameters::is_start_with_line_Set() const{
    return m_start_with_line_isSet;
}

bool OAIStocktakeQueryParameters::is_start_with_line_Valid() const{
    return m_start_with_line_isValid;
}

QString OAIStocktakeQueryParameters::getStatus() const {
    return m_status;
}
void OAIStocktakeQueryParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStocktakeQueryParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStocktakeQueryParameters::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStocktakeQueryParameters::getSummaryStatus() const {
    return m_summary_status;
}
void OAIStocktakeQueryParameters::setSummaryStatus(const QString &summary_status) {
    m_summary_status = summary_status;
    m_summary_status_isSet = true;
}

bool OAIStocktakeQueryParameters::is_summary_status_Set() const{
    return m_summary_status_isSet;
}

bool OAIStocktakeQueryParameters::is_summary_status_Valid() const{
    return m_summary_status_isValid;
}

QString OAIStocktakeQueryParameters::getWarehouse() const {
    return m_warehouse;
}
void OAIStocktakeQueryParameters::setWarehouse(const QString &warehouse) {
    m_warehouse = warehouse;
    m_warehouse_isSet = true;
}

bool OAIStocktakeQueryParameters::is_warehouse_Set() const{
    return m_warehouse_isSet;
}

bool OAIStocktakeQueryParameters::is_warehouse_Valid() const{
    return m_warehouse_isValid;
}

bool OAIStocktakeQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_with_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freeze_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freeze_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_to_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_with_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStocktakeQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
