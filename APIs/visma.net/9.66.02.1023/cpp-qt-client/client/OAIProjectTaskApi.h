/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectTaskApi_H
#define OAI_OAIProjectTaskApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackgroundApiAcceptedDto.h"
#include "OAIObject.h"
#include "OAIProjectTaskUpdateDto.h"
#include "OAITaskExtendedDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectTaskApi : public QObject {
    Q_OBJECT

public:
    OAIProjectTaskApi(const int timeOut = 0);
    ~OAIProjectTaskApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id QString [optional]
    * @param[in]  public_id QString [optional]
    * @param[in]  project_internal_id qint32 [optional]
    * @param[in]  description QString [optional]
    * @param[in]  task_cd QString [optional]
    * @param[in]  task_cd_desc QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  visible_in_ap bool [optional]
    * @param[in]  visible_in_ar bool [optional]
    * @param[in]  visible_in_ca bool [optional]
    * @param[in]  visible_in_cr bool [optional]
    * @param[in]  visible_in_ea bool [optional]
    * @param[in]  visible_in_gl bool [optional]
    * @param[in]  visible_in_in bool [optional]
    * @param[in]  visible_in_po bool [optional]
    * @param[in]  visible_in_so bool [optional]
    * @param[in]  visible_in_ta bool [optional]
    * @param[in]  restricted_employee QString [optional]
    * @param[in]  restricted_user qint64 [optional]
    * @param[in]  greater_than_value QString [optional]
    * @param[in]  number_to_read qint32 [optional]
    * @param[in]  skip_records qint32 [optional]
    * @param[in]  last_modified_date_time QString [optional]
    * @param[in]  last_modified_date_time_condition QString [optional]
    * @param[in]  created_date_time QString [optional]
    * @param[in]  created_date_time_condition QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectTaskGetAllTasks(const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &project_internal_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_cd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_cd_desc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ap = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ca = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_cr = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ea = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_gl = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_in = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_po = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_so = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &visible_in_ta = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &restricted_employee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &restricted_user = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &greater_than_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number_to_read = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_modified_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_time_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectTaskGetTaskByinternalId(const qint32 &internal_id, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  oai_project_task_update_dto OAIProjectTaskUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectTaskPostByinternalId(const qint32 &internal_id, const OAIProjectTaskUpdateDto &oai_project_task_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  internal_id qint32 [required]
    * @param[in]  oai_project_task_update_dto OAIProjectTaskUpdateDto [required]
    * @param[in]  erp_api_background QString [optional]
    */
    virtual void projectTaskPutByinternalId(const qint32 &internal_id, const OAIProjectTaskUpdateDto &oai_project_task_update_dto, const ::OpenAPI::OptionalParam<QString> &erp_api_background = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void projectTaskGetAllTasksCallback(OAIHttpRequestWorker *worker);
    void projectTaskGetTaskByinternalIdCallback(OAIHttpRequestWorker *worker);
    void projectTaskPostByinternalIdCallback(OAIHttpRequestWorker *worker);
    void projectTaskPutByinternalIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void projectTaskGetAllTasksSignal(QList<OAITaskExtendedDto> summary);
    void projectTaskGetTaskByinternalIdSignal(OAITaskExtendedDto summary);
    void projectTaskPostByinternalIdSignal(OAIObject summary);
    void projectTaskPutByinternalIdSignal(OAIBackgroundApiAcceptedDto summary);


    void projectTaskGetAllTasksSignalFull(OAIHttpRequestWorker *worker, QList<OAITaskExtendedDto> summary);
    void projectTaskGetTaskByinternalIdSignalFull(OAIHttpRequestWorker *worker, OAITaskExtendedDto summary);
    void projectTaskPostByinternalIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void projectTaskPutByinternalIdSignalFull(OAIHttpRequestWorker *worker, OAIBackgroundApiAcceptedDto summary);

    Q_DECL_DEPRECATED_X("Use projectTaskGetAllTasksSignalError() instead")
    void projectTaskGetAllTasksSignalE(QList<OAITaskExtendedDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskGetAllTasksSignalError(QList<OAITaskExtendedDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskGetTaskByinternalIdSignalError() instead")
    void projectTaskGetTaskByinternalIdSignalE(OAITaskExtendedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskGetTaskByinternalIdSignalError(OAITaskExtendedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskPostByinternalIdSignalError() instead")
    void projectTaskPostByinternalIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskPostByinternalIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskPutByinternalIdSignalError() instead")
    void projectTaskPutByinternalIdSignalE(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskPutByinternalIdSignalError(OAIBackgroundApiAcceptedDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use projectTaskGetAllTasksSignalErrorFull() instead")
    void projectTaskGetAllTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskGetAllTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskGetTaskByinternalIdSignalErrorFull() instead")
    void projectTaskGetTaskByinternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskGetTaskByinternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskPostByinternalIdSignalErrorFull() instead")
    void projectTaskPostByinternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskPostByinternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectTaskPutByinternalIdSignalErrorFull() instead")
    void projectTaskPutByinternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectTaskPutByinternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
