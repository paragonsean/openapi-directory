/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerGlAccountsUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerGlAccountsUpdateDto::OAICustomerGlAccountsUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerGlAccountsUpdateDto::OAICustomerGlAccountsUpdateDto() {
    this->initializeModel();
}

OAICustomerGlAccountsUpdateDto::~OAICustomerGlAccountsUpdateDto() {}

void OAICustomerGlAccountsUpdateDto::initializeModel() {

    m_cash_discount_account_isSet = false;
    m_cash_discount_account_isValid = false;

    m_cash_discount_subaccount_isSet = false;
    m_cash_discount_subaccount_isValid = false;

    m_customer_ledger_account_isSet = false;
    m_customer_ledger_account_isValid = false;

    m_customer_ledger_subaccount_isSet = false;
    m_customer_ledger_subaccount_isValid = false;

    m_discount_account_isSet = false;
    m_discount_account_isValid = false;

    m_discount_subaccount_isSet = false;
    m_discount_subaccount_isValid = false;

    m_freight_account_isSet = false;
    m_freight_account_isValid = false;

    m_freight_subaccount_isSet = false;
    m_freight_subaccount_isValid = false;

    m_prepayment_account_isSet = false;
    m_prepayment_account_isValid = false;

    m_prepayment_subaccount_isSet = false;
    m_prepayment_subaccount_isValid = false;

    m_sales_account_isSet = false;
    m_sales_account_isValid = false;

    m_sales_eu_account_isSet = false;
    m_sales_eu_account_isValid = false;

    m_sales_export_account_isSet = false;
    m_sales_export_account_isValid = false;

    m_sales_non_taxable_account_isSet = false;
    m_sales_non_taxable_account_isValid = false;

    m_sales_subaccount_isSet = false;
    m_sales_subaccount_isValid = false;
}

void OAICustomerGlAccountsUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerGlAccountsUpdateDto::fromJsonObject(QJsonObject json) {

    m_cash_discount_account_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_account, json[QString("cashDiscountAccount")]);
    m_cash_discount_account_isSet = !json[QString("cashDiscountAccount")].isNull() && m_cash_discount_account_isValid;

    m_cash_discount_subaccount_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_subaccount, json[QString("cashDiscountSubaccount")]);
    m_cash_discount_subaccount_isSet = !json[QString("cashDiscountSubaccount")].isNull() && m_cash_discount_subaccount_isValid;

    m_customer_ledger_account_isValid = ::OpenAPI::fromJsonValue(m_customer_ledger_account, json[QString("customerLedgerAccount")]);
    m_customer_ledger_account_isSet = !json[QString("customerLedgerAccount")].isNull() && m_customer_ledger_account_isValid;

    m_customer_ledger_subaccount_isValid = ::OpenAPI::fromJsonValue(m_customer_ledger_subaccount, json[QString("customerLedgerSubaccount")]);
    m_customer_ledger_subaccount_isSet = !json[QString("customerLedgerSubaccount")].isNull() && m_customer_ledger_subaccount_isValid;

    m_discount_account_isValid = ::OpenAPI::fromJsonValue(m_discount_account, json[QString("discountAccount")]);
    m_discount_account_isSet = !json[QString("discountAccount")].isNull() && m_discount_account_isValid;

    m_discount_subaccount_isValid = ::OpenAPI::fromJsonValue(m_discount_subaccount, json[QString("discountSubaccount")]);
    m_discount_subaccount_isSet = !json[QString("discountSubaccount")].isNull() && m_discount_subaccount_isValid;

    m_freight_account_isValid = ::OpenAPI::fromJsonValue(m_freight_account, json[QString("freightAccount")]);
    m_freight_account_isSet = !json[QString("freightAccount")].isNull() && m_freight_account_isValid;

    m_freight_subaccount_isValid = ::OpenAPI::fromJsonValue(m_freight_subaccount, json[QString("freightSubaccount")]);
    m_freight_subaccount_isSet = !json[QString("freightSubaccount")].isNull() && m_freight_subaccount_isValid;

    m_prepayment_account_isValid = ::OpenAPI::fromJsonValue(m_prepayment_account, json[QString("prepaymentAccount")]);
    m_prepayment_account_isSet = !json[QString("prepaymentAccount")].isNull() && m_prepayment_account_isValid;

    m_prepayment_subaccount_isValid = ::OpenAPI::fromJsonValue(m_prepayment_subaccount, json[QString("prepaymentSubaccount")]);
    m_prepayment_subaccount_isSet = !json[QString("prepaymentSubaccount")].isNull() && m_prepayment_subaccount_isValid;

    m_sales_account_isValid = ::OpenAPI::fromJsonValue(m_sales_account, json[QString("salesAccount")]);
    m_sales_account_isSet = !json[QString("salesAccount")].isNull() && m_sales_account_isValid;

    m_sales_eu_account_isValid = ::OpenAPI::fromJsonValue(m_sales_eu_account, json[QString("salesEuAccount")]);
    m_sales_eu_account_isSet = !json[QString("salesEuAccount")].isNull() && m_sales_eu_account_isValid;

    m_sales_export_account_isValid = ::OpenAPI::fromJsonValue(m_sales_export_account, json[QString("salesExportAccount")]);
    m_sales_export_account_isSet = !json[QString("salesExportAccount")].isNull() && m_sales_export_account_isValid;

    m_sales_non_taxable_account_isValid = ::OpenAPI::fromJsonValue(m_sales_non_taxable_account, json[QString("salesNonTaxableAccount")]);
    m_sales_non_taxable_account_isSet = !json[QString("salesNonTaxableAccount")].isNull() && m_sales_non_taxable_account_isValid;

    m_sales_subaccount_isValid = ::OpenAPI::fromJsonValue(m_sales_subaccount, json[QString("salesSubaccount")]);
    m_sales_subaccount_isSet = !json[QString("salesSubaccount")].isNull() && m_sales_subaccount_isValid;
}

QString OAICustomerGlAccountsUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerGlAccountsUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_discount_account.isSet()) {
        obj.insert(QString("cashDiscountAccount"), ::OpenAPI::toJsonValue(m_cash_discount_account));
    }
    if (m_cash_discount_subaccount.size() > 0) {
        obj.insert(QString("cashDiscountSubaccount"), ::OpenAPI::toJsonValue(m_cash_discount_subaccount));
    }
    if (m_customer_ledger_account.isSet()) {
        obj.insert(QString("customerLedgerAccount"), ::OpenAPI::toJsonValue(m_customer_ledger_account));
    }
    if (m_customer_ledger_subaccount.size() > 0) {
        obj.insert(QString("customerLedgerSubaccount"), ::OpenAPI::toJsonValue(m_customer_ledger_subaccount));
    }
    if (m_discount_account.isSet()) {
        obj.insert(QString("discountAccount"), ::OpenAPI::toJsonValue(m_discount_account));
    }
    if (m_discount_subaccount.size() > 0) {
        obj.insert(QString("discountSubaccount"), ::OpenAPI::toJsonValue(m_discount_subaccount));
    }
    if (m_freight_account.isSet()) {
        obj.insert(QString("freightAccount"), ::OpenAPI::toJsonValue(m_freight_account));
    }
    if (m_freight_subaccount.size() > 0) {
        obj.insert(QString("freightSubaccount"), ::OpenAPI::toJsonValue(m_freight_subaccount));
    }
    if (m_prepayment_account.isSet()) {
        obj.insert(QString("prepaymentAccount"), ::OpenAPI::toJsonValue(m_prepayment_account));
    }
    if (m_prepayment_subaccount.size() > 0) {
        obj.insert(QString("prepaymentSubaccount"), ::OpenAPI::toJsonValue(m_prepayment_subaccount));
    }
    if (m_sales_account.isSet()) {
        obj.insert(QString("salesAccount"), ::OpenAPI::toJsonValue(m_sales_account));
    }
    if (m_sales_eu_account.isSet()) {
        obj.insert(QString("salesEuAccount"), ::OpenAPI::toJsonValue(m_sales_eu_account));
    }
    if (m_sales_export_account.isSet()) {
        obj.insert(QString("salesExportAccount"), ::OpenAPI::toJsonValue(m_sales_export_account));
    }
    if (m_sales_non_taxable_account.isSet()) {
        obj.insert(QString("salesNonTaxableAccount"), ::OpenAPI::toJsonValue(m_sales_non_taxable_account));
    }
    if (m_sales_subaccount.size() > 0) {
        obj.insert(QString("salesSubaccount"), ::OpenAPI::toJsonValue(m_sales_subaccount));
    }
    return obj;
}

OAIDtoValueOfString OAICustomerGlAccountsUpdateDto::getCashDiscountAccount() const {
    return m_cash_discount_account;
}
void OAICustomerGlAccountsUpdateDto::setCashDiscountAccount(const OAIDtoValueOfString &cash_discount_account) {
    m_cash_discount_account = cash_discount_account;
    m_cash_discount_account_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_cash_discount_account_Set() const{
    return m_cash_discount_account_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_cash_discount_account_Valid() const{
    return m_cash_discount_account_isValid;
}

QList<OAISegmentUpdateDto> OAICustomerGlAccountsUpdateDto::getCashDiscountSubaccount() const {
    return m_cash_discount_subaccount;
}
void OAICustomerGlAccountsUpdateDto::setCashDiscountSubaccount(const QList<OAISegmentUpdateDto> &cash_discount_subaccount) {
    m_cash_discount_subaccount = cash_discount_subaccount;
    m_cash_discount_subaccount_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_cash_discount_subaccount_Set() const{
    return m_cash_discount_subaccount_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_cash_discount_subaccount_Valid() const{
    return m_cash_discount_subaccount_isValid;
}

OAIDtoValueOfString OAICustomerGlAccountsUpdateDto::getCustomerLedgerAccount() const {
    return m_customer_ledger_account;
}
void OAICustomerGlAccountsUpdateDto::setCustomerLedgerAccount(const OAIDtoValueOfString &customer_ledger_account) {
    m_customer_ledger_account = customer_ledger_account;
    m_customer_ledger_account_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_customer_ledger_account_Set() const{
    return m_customer_ledger_account_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_customer_ledger_account_Valid() const{
    return m_customer_ledger_account_isValid;
}

QList<OAISegmentUpdateDto> OAICustomerGlAccountsUpdateDto::getCustomerLedgerSubaccount() const {
    return m_customer_ledger_subaccount;
}
void OAICustomerGlAccountsUpdateDto::setCustomerLedgerSubaccount(const QList<OAISegmentUpdateDto> &customer_ledger_subaccount) {
    m_customer_ledger_subaccount = customer_ledger_subaccount;
    m_customer_ledger_subaccount_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_customer_ledger_subaccount_Set() const{
    return m_customer_ledger_subaccount_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_customer_ledger_subaccount_Valid() const{
    return m_customer_ledger_subaccount_isValid;
}

OAIDtoValueOfString OAICustomerGlAccountsUpdateDto::getDiscountAccount() const {
    return m_discount_account;
}
void OAICustomerGlAccountsUpdateDto::setDiscountAccount(const OAIDtoValueOfString &discount_account) {
    m_discount_account = discount_account;
    m_discount_account_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_discount_account_Set() const{
    return m_discount_account_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_discount_account_Valid() const{
    return m_discount_account_isValid;
}

QList<OAISegmentUpdateDto> OAICustomerGlAccountsUpdateDto::getDiscountSubaccount() const {
    return m_discount_subaccount;
}
void OAICustomerGlAccountsUpdateDto::setDiscountSubaccount(const QList<OAISegmentUpdateDto> &discount_subaccount) {
    m_discount_subaccount = discount_subaccount;
    m_discount_subaccount_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_discount_subaccount_Set() const{
    return m_discount_subaccount_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_discount_subaccount_Valid() const{
    return m_discount_subaccount_isValid;
}

OAIDtoValueOfString OAICustomerGlAccountsUpdateDto::getFreightAccount() const {
    return m_freight_account;
}
void OAICustomerGlAccountsUpdateDto::setFreightAccount(const OAIDtoValueOfString &freight_account) {
    m_freight_account = freight_account;
    m_freight_account_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_freight_account_Set() const{
    return m_freight_account_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_freight_account_Valid() const{
    return m_freight_account_isValid;
}

QList<OAISegmentUpdateDto> OAICustomerGlAccountsUpdateDto::getFreightSubaccount() const {
    return m_freight_subaccount;
}
void OAICustomerGlAccountsUpdateDto::setFreightSubaccount(const QList<OAISegmentUpdateDto> &freight_subaccount) {
    m_freight_subaccount = freight_subaccount;
    m_freight_subaccount_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_freight_subaccount_Set() const{
    return m_freight_subaccount_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_freight_subaccount_Valid() const{
    return m_freight_subaccount_isValid;
}

OAIDtoValueOfString OAICustomerGlAccountsUpdateDto::getPrepaymentAccount() const {
    return m_prepayment_account;
}
void OAICustomerGlAccountsUpdateDto::setPrepaymentAccount(const OAIDtoValueOfString &prepayment_account) {
    m_prepayment_account = prepayment_account;
    m_prepayment_account_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_prepayment_account_Set() const{
    return m_prepayment_account_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_prepayment_account_Valid() const{
    return m_prepayment_account_isValid;
}

QList<OAISegmentUpdateDto> OAICustomerGlAccountsUpdateDto::getPrepaymentSubaccount() const {
    return m_prepayment_subaccount;
}
void OAICustomerGlAccountsUpdateDto::setPrepaymentSubaccount(const QList<OAISegmentUpdateDto> &prepayment_subaccount) {
    m_prepayment_subaccount = prepayment_subaccount;
    m_prepayment_subaccount_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_prepayment_subaccount_Set() const{
    return m_prepayment_subaccount_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_prepayment_subaccount_Valid() const{
    return m_prepayment_subaccount_isValid;
}

OAIDtoValueOfString OAICustomerGlAccountsUpdateDto::getSalesAccount() const {
    return m_sales_account;
}
void OAICustomerGlAccountsUpdateDto::setSalesAccount(const OAIDtoValueOfString &sales_account) {
    m_sales_account = sales_account;
    m_sales_account_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_account_Set() const{
    return m_sales_account_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_account_Valid() const{
    return m_sales_account_isValid;
}

OAIDtoValueOfString OAICustomerGlAccountsUpdateDto::getSalesEuAccount() const {
    return m_sales_eu_account;
}
void OAICustomerGlAccountsUpdateDto::setSalesEuAccount(const OAIDtoValueOfString &sales_eu_account) {
    m_sales_eu_account = sales_eu_account;
    m_sales_eu_account_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_eu_account_Set() const{
    return m_sales_eu_account_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_eu_account_Valid() const{
    return m_sales_eu_account_isValid;
}

OAIDtoValueOfString OAICustomerGlAccountsUpdateDto::getSalesExportAccount() const {
    return m_sales_export_account;
}
void OAICustomerGlAccountsUpdateDto::setSalesExportAccount(const OAIDtoValueOfString &sales_export_account) {
    m_sales_export_account = sales_export_account;
    m_sales_export_account_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_export_account_Set() const{
    return m_sales_export_account_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_export_account_Valid() const{
    return m_sales_export_account_isValid;
}

OAIDtoValueOfString OAICustomerGlAccountsUpdateDto::getSalesNonTaxableAccount() const {
    return m_sales_non_taxable_account;
}
void OAICustomerGlAccountsUpdateDto::setSalesNonTaxableAccount(const OAIDtoValueOfString &sales_non_taxable_account) {
    m_sales_non_taxable_account = sales_non_taxable_account;
    m_sales_non_taxable_account_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_non_taxable_account_Set() const{
    return m_sales_non_taxable_account_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_non_taxable_account_Valid() const{
    return m_sales_non_taxable_account_isValid;
}

QList<OAISegmentUpdateDto> OAICustomerGlAccountsUpdateDto::getSalesSubaccount() const {
    return m_sales_subaccount;
}
void OAICustomerGlAccountsUpdateDto::setSalesSubaccount(const QList<OAISegmentUpdateDto> &sales_subaccount) {
    m_sales_subaccount = sales_subaccount;
    m_sales_subaccount_isSet = true;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_subaccount_Set() const{
    return m_sales_subaccount_isSet;
}

bool OAICustomerGlAccountsUpdateDto::is_sales_subaccount_Valid() const{
    return m_sales_subaccount_isValid;
}

bool OAICustomerGlAccountsUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_discount_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ledger_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ledger_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepayment_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepayment_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_eu_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_export_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_non_taxable_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_subaccount.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerGlAccountsUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
