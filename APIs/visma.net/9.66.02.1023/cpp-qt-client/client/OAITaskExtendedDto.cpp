/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskExtendedDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskExtendedDto::OAITaskExtendedDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskExtendedDto::OAITaskExtendedDto() {
    this->initializeModel();
}

OAITaskExtendedDto::~OAITaskExtendedDto() {}

void OAITaskExtendedDto::initializeModel() {

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_def_account_isSet = false;
    m_def_account_isValid = false;

    m_def_accrual_account_isSet = false;
    m_def_accrual_account_isValid = false;

    m_def_accrual_sub_isSet = false;
    m_def_accrual_sub_isValid = false;

    m_def_sub_isSet = false;
    m_def_sub_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employees_isSet = false;
    m_employees_isValid = false;

    m_internal_id_isSet = false;
    m_internal_id_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_planned_end_isSet = false;
    m_planned_end_isValid = false;

    m_planned_start_isSet = false;
    m_planned_start_isValid = false;

    m_project_internal_id_isSet = false;
    m_project_internal_id_isValid = false;

    m_rate_table_isSet = false;
    m_rate_table_isValid = false;

    m_restrict_employees_isSet = false;
    m_restrict_employees_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_tax_category_isSet = false;
    m_tax_category_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAITaskExtendedDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskExtendedDto::fromJsonObject(QJsonObject json) {

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_def_account_isValid = ::OpenAPI::fromJsonValue(m_def_account, json[QString("defAccount")]);
    m_def_account_isSet = !json[QString("defAccount")].isNull() && m_def_account_isValid;

    m_def_accrual_account_isValid = ::OpenAPI::fromJsonValue(m_def_accrual_account, json[QString("defAccrualAccount")]);
    m_def_accrual_account_isSet = !json[QString("defAccrualAccount")].isNull() && m_def_accrual_account_isValid;

    m_def_accrual_sub_isValid = ::OpenAPI::fromJsonValue(m_def_accrual_sub, json[QString("defAccrualSub")]);
    m_def_accrual_sub_isSet = !json[QString("defAccrualSub")].isNull() && m_def_accrual_sub_isValid;

    m_def_sub_isValid = ::OpenAPI::fromJsonValue(m_def_sub, json[QString("defSub")]);
    m_def_sub_isSet = !json[QString("defSub")].isNull() && m_def_sub_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employees_isValid = ::OpenAPI::fromJsonValue(m_employees, json[QString("employees")]);
    m_employees_isSet = !json[QString("employees")].isNull() && m_employees_isValid;

    m_internal_id_isValid = ::OpenAPI::fromJsonValue(m_internal_id, json[QString("internalId")]);
    m_internal_id_isSet = !json[QString("internalId")].isNull() && m_internal_id_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_planned_end_isValid = ::OpenAPI::fromJsonValue(m_planned_end, json[QString("plannedEnd")]);
    m_planned_end_isSet = !json[QString("plannedEnd")].isNull() && m_planned_end_isValid;

    m_planned_start_isValid = ::OpenAPI::fromJsonValue(m_planned_start, json[QString("plannedStart")]);
    m_planned_start_isSet = !json[QString("plannedStart")].isNull() && m_planned_start_isValid;

    m_project_internal_id_isValid = ::OpenAPI::fromJsonValue(m_project_internal_id, json[QString("projectInternalId")]);
    m_project_internal_id_isSet = !json[QString("projectInternalId")].isNull() && m_project_internal_id_isValid;

    m_rate_table_isValid = ::OpenAPI::fromJsonValue(m_rate_table, json[QString("rateTable")]);
    m_rate_table_isSet = !json[QString("rateTable")].isNull() && m_rate_table_isValid;

    m_restrict_employees_isValid = ::OpenAPI::fromJsonValue(m_restrict_employees, json[QString("restrictEmployees")]);
    m_restrict_employees_isSet = !json[QString("restrictEmployees")].isNull() && m_restrict_employees_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;

    m_tax_category_isValid = ::OpenAPI::fromJsonValue(m_tax_category, json[QString("taxCategory")]);
    m_tax_category_isSet = !json[QString("taxCategory")].isNull() && m_tax_category_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAITaskExtendedDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskExtendedDto::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_def_account.isSet()) {
        obj.insert(QString("defAccount"), ::OpenAPI::toJsonValue(m_def_account));
    }
    if (m_def_accrual_account.isSet()) {
        obj.insert(QString("defAccrualAccount"), ::OpenAPI::toJsonValue(m_def_accrual_account));
    }
    if (m_def_accrual_sub.isSet()) {
        obj.insert(QString("defAccrualSub"), ::OpenAPI::toJsonValue(m_def_accrual_sub));
    }
    if (m_def_sub.isSet()) {
        obj.insert(QString("defSub"), ::OpenAPI::toJsonValue(m_def_sub));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employees.size() > 0) {
        obj.insert(QString("employees"), ::OpenAPI::toJsonValue(m_employees));
    }
    if (m_internal_id_isSet) {
        obj.insert(QString("internalId"), ::OpenAPI::toJsonValue(m_internal_id));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_planned_end_isSet) {
        obj.insert(QString("plannedEnd"), ::OpenAPI::toJsonValue(m_planned_end));
    }
    if (m_planned_start_isSet) {
        obj.insert(QString("plannedStart"), ::OpenAPI::toJsonValue(m_planned_start));
    }
    if (m_project_internal_id_isSet) {
        obj.insert(QString("projectInternalId"), ::OpenAPI::toJsonValue(m_project_internal_id));
    }
    if (m_rate_table.isSet()) {
        obj.insert(QString("rateTable"), ::OpenAPI::toJsonValue(m_rate_table));
    }
    if (m_restrict_employees_isSet) {
        obj.insert(QString("restrictEmployees"), ::OpenAPI::toJsonValue(m_restrict_employees));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_tax_category.isSet()) {
        obj.insert(QString("taxCategory"), ::OpenAPI::toJsonValue(m_tax_category));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QDateTime OAITaskExtendedDto::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAITaskExtendedDto::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAITaskExtendedDto::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAITaskExtendedDto::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

OAIDefAccountInTaskExtendedDto OAITaskExtendedDto::getDefAccount() const {
    return m_def_account;
}
void OAITaskExtendedDto::setDefAccount(const OAIDefAccountInTaskExtendedDto &def_account) {
    m_def_account = def_account;
    m_def_account_isSet = true;
}

bool OAITaskExtendedDto::is_def_account_Set() const{
    return m_def_account_isSet;
}

bool OAITaskExtendedDto::is_def_account_Valid() const{
    return m_def_account_isValid;
}

OAIDefAccrualAccountInTaskExtendedDto OAITaskExtendedDto::getDefAccrualAccount() const {
    return m_def_accrual_account;
}
void OAITaskExtendedDto::setDefAccrualAccount(const OAIDefAccrualAccountInTaskExtendedDto &def_accrual_account) {
    m_def_accrual_account = def_accrual_account;
    m_def_accrual_account_isSet = true;
}

bool OAITaskExtendedDto::is_def_accrual_account_Set() const{
    return m_def_accrual_account_isSet;
}

bool OAITaskExtendedDto::is_def_accrual_account_Valid() const{
    return m_def_accrual_account_isValid;
}

OAIDefAccrualSubInTaskExtendedDto OAITaskExtendedDto::getDefAccrualSub() const {
    return m_def_accrual_sub;
}
void OAITaskExtendedDto::setDefAccrualSub(const OAIDefAccrualSubInTaskExtendedDto &def_accrual_sub) {
    m_def_accrual_sub = def_accrual_sub;
    m_def_accrual_sub_isSet = true;
}

bool OAITaskExtendedDto::is_def_accrual_sub_Set() const{
    return m_def_accrual_sub_isSet;
}

bool OAITaskExtendedDto::is_def_accrual_sub_Valid() const{
    return m_def_accrual_sub_isValid;
}

OAIDefSubInTaskExtendedDto OAITaskExtendedDto::getDefSub() const {
    return m_def_sub;
}
void OAITaskExtendedDto::setDefSub(const OAIDefSubInTaskExtendedDto &def_sub) {
    m_def_sub = def_sub;
    m_def_sub_isSet = true;
}

bool OAITaskExtendedDto::is_def_sub_Set() const{
    return m_def_sub_isSet;
}

bool OAITaskExtendedDto::is_def_sub_Valid() const{
    return m_def_sub_isValid;
}

QString OAITaskExtendedDto::getDescription() const {
    return m_description;
}
void OAITaskExtendedDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITaskExtendedDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAITaskExtendedDto::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEmployeeDto> OAITaskExtendedDto::getEmployees() const {
    return m_employees;
}
void OAITaskExtendedDto::setEmployees(const QList<OAIEmployeeDto> &employees) {
    m_employees = employees;
    m_employees_isSet = true;
}

bool OAITaskExtendedDto::is_employees_Set() const{
    return m_employees_isSet;
}

bool OAITaskExtendedDto::is_employees_Valid() const{
    return m_employees_isValid;
}

qint32 OAITaskExtendedDto::getInternalId() const {
    return m_internal_id;
}
void OAITaskExtendedDto::setInternalId(const qint32 &internal_id) {
    m_internal_id = internal_id;
    m_internal_id_isSet = true;
}

bool OAITaskExtendedDto::is_internal_id_Set() const{
    return m_internal_id_isSet;
}

bool OAITaskExtendedDto::is_internal_id_Valid() const{
    return m_internal_id_isValid;
}

QDateTime OAITaskExtendedDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAITaskExtendedDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAITaskExtendedDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAITaskExtendedDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QDateTime OAITaskExtendedDto::getPlannedEnd() const {
    return m_planned_end;
}
void OAITaskExtendedDto::setPlannedEnd(const QDateTime &planned_end) {
    m_planned_end = planned_end;
    m_planned_end_isSet = true;
}

bool OAITaskExtendedDto::is_planned_end_Set() const{
    return m_planned_end_isSet;
}

bool OAITaskExtendedDto::is_planned_end_Valid() const{
    return m_planned_end_isValid;
}

QDateTime OAITaskExtendedDto::getPlannedStart() const {
    return m_planned_start;
}
void OAITaskExtendedDto::setPlannedStart(const QDateTime &planned_start) {
    m_planned_start = planned_start;
    m_planned_start_isSet = true;
}

bool OAITaskExtendedDto::is_planned_start_Set() const{
    return m_planned_start_isSet;
}

bool OAITaskExtendedDto::is_planned_start_Valid() const{
    return m_planned_start_isValid;
}

qint32 OAITaskExtendedDto::getProjectInternalId() const {
    return m_project_internal_id;
}
void OAITaskExtendedDto::setProjectInternalId(const qint32 &project_internal_id) {
    m_project_internal_id = project_internal_id;
    m_project_internal_id_isSet = true;
}

bool OAITaskExtendedDto::is_project_internal_id_Set() const{
    return m_project_internal_id_isSet;
}

bool OAITaskExtendedDto::is_project_internal_id_Valid() const{
    return m_project_internal_id_isValid;
}

OAIRateTableInTaskExtendedDto OAITaskExtendedDto::getRateTable() const {
    return m_rate_table;
}
void OAITaskExtendedDto::setRateTable(const OAIRateTableInTaskExtendedDto &rate_table) {
    m_rate_table = rate_table;
    m_rate_table_isSet = true;
}

bool OAITaskExtendedDto::is_rate_table_Set() const{
    return m_rate_table_isSet;
}

bool OAITaskExtendedDto::is_rate_table_Valid() const{
    return m_rate_table_isValid;
}

bool OAITaskExtendedDto::isRestrictEmployees() const {
    return m_restrict_employees;
}
void OAITaskExtendedDto::setRestrictEmployees(const bool &restrict_employees) {
    m_restrict_employees = restrict_employees;
    m_restrict_employees_isSet = true;
}

bool OAITaskExtendedDto::is_restrict_employees_Set() const{
    return m_restrict_employees_isSet;
}

bool OAITaskExtendedDto::is_restrict_employees_Valid() const{
    return m_restrict_employees_isValid;
}

QDateTime OAITaskExtendedDto::getStartDate() const {
    return m_start_date;
}
void OAITaskExtendedDto::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITaskExtendedDto::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITaskExtendedDto::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAITaskExtendedDto::getStatus() const {
    return m_status;
}
void OAITaskExtendedDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaskExtendedDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaskExtendedDto::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITaskExtendedDto::getTaskId() const {
    return m_task_id;
}
void OAITaskExtendedDto::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAITaskExtendedDto::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAITaskExtendedDto::is_task_id_Valid() const{
    return m_task_id_isValid;
}

OAITaxCategoryInTaskExtendedDto OAITaskExtendedDto::getTaxCategory() const {
    return m_tax_category;
}
void OAITaskExtendedDto::setTaxCategory(const OAITaxCategoryInTaskExtendedDto &tax_category) {
    m_tax_category = tax_category;
    m_tax_category_isSet = true;
}

bool OAITaskExtendedDto::is_tax_category_Set() const{
    return m_tax_category_isSet;
}

bool OAITaskExtendedDto::is_tax_category_Valid() const{
    return m_tax_category_isValid;
}

OAIVisibilityInTaskExtendedDto OAITaskExtendedDto::getVisibility() const {
    return m_visibility;
}
void OAITaskExtendedDto::setVisibility(const OAIVisibilityInTaskExtendedDto &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAITaskExtendedDto::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAITaskExtendedDto::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAITaskExtendedDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_accrual_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_accrual_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_def_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_internal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrict_employees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskExtendedDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
