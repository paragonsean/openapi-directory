/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFixedAssetClassDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFixedAssetClassDto::OAIFixedAssetClassDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFixedAssetClassDto::OAIFixedAssetClassDto() {
    this->initializeModel();
}

OAIFixedAssetClassDto::~OAIFixedAssetClassDto() {}

void OAIFixedAssetClassDto::initializeModel() {

    m_accelerated_depreciation_isSet = false;
    m_accelerated_depreciation_isValid = false;

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_accumulated_depreciation_sub_account_mask_isSet = false;
    m_accumulated_depreciation_sub_account_mask_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_asset_type_id_isSet = false;
    m_asset_type_id_isValid = false;

    m_book_settings_isSet = false;
    m_book_settings_isValid = false;

    m_class_id_isSet = false;
    m_class_id_isValid = false;

    m_depreciable_isSet = false;
    m_depreciable_isValid = false;

    m_depreciated_expense_sub_account_mask_isSet = false;
    m_depreciated_expense_sub_account_mask_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_gain_loss_sub_account_mask_isSet = false;
    m_gain_loss_sub_account_mask_isValid = false;

    m_is_tangible_isSet = false;
    m_is_tangible_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_proceed_sub_account_mask_isSet = false;
    m_proceed_sub_account_mask_isValid = false;

    m_record_type_isSet = false;
    m_record_type_isValid = false;

    m_sub_account_mask_isSet = false;
    m_sub_account_mask_isValid = false;

    m_useful_life_isSet = false;
    m_useful_life_isValid = false;
}

void OAIFixedAssetClassDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFixedAssetClassDto::fromJsonObject(QJsonObject json) {

    m_accelerated_depreciation_isValid = ::OpenAPI::fromJsonValue(m_accelerated_depreciation, json[QString("acceleratedDepreciation")]);
    m_accelerated_depreciation_isSet = !json[QString("acceleratedDepreciation")].isNull() && m_accelerated_depreciation_isValid;

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_accumulated_depreciation_sub_account_mask_isValid = ::OpenAPI::fromJsonValue(m_accumulated_depreciation_sub_account_mask, json[QString("accumulatedDepreciationSubAccountMask")]);
    m_accumulated_depreciation_sub_account_mask_isSet = !json[QString("accumulatedDepreciationSubAccountMask")].isNull() && m_accumulated_depreciation_sub_account_mask_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_asset_type_id_isValid = ::OpenAPI::fromJsonValue(m_asset_type_id, json[QString("assetTypeID")]);
    m_asset_type_id_isSet = !json[QString("assetTypeID")].isNull() && m_asset_type_id_isValid;

    m_book_settings_isValid = ::OpenAPI::fromJsonValue(m_book_settings, json[QString("bookSettings")]);
    m_book_settings_isSet = !json[QString("bookSettings")].isNull() && m_book_settings_isValid;

    m_class_id_isValid = ::OpenAPI::fromJsonValue(m_class_id, json[QString("classID")]);
    m_class_id_isSet = !json[QString("classID")].isNull() && m_class_id_isValid;

    m_depreciable_isValid = ::OpenAPI::fromJsonValue(m_depreciable, json[QString("depreciable")]);
    m_depreciable_isSet = !json[QString("depreciable")].isNull() && m_depreciable_isValid;

    m_depreciated_expense_sub_account_mask_isValid = ::OpenAPI::fromJsonValue(m_depreciated_expense_sub_account_mask, json[QString("depreciatedExpenseSubAccountMask")]);
    m_depreciated_expense_sub_account_mask_isSet = !json[QString("depreciatedExpenseSubAccountMask")].isNull() && m_depreciated_expense_sub_account_mask_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_gain_loss_sub_account_mask_isValid = ::OpenAPI::fromJsonValue(m_gain_loss_sub_account_mask, json[QString("gainLossSubAccountMask")]);
    m_gain_loss_sub_account_mask_isSet = !json[QString("gainLossSubAccountMask")].isNull() && m_gain_loss_sub_account_mask_isValid;

    m_is_tangible_isValid = ::OpenAPI::fromJsonValue(m_is_tangible, json[QString("isTangible")]);
    m_is_tangible_isSet = !json[QString("isTangible")].isNull() && m_is_tangible_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_proceed_sub_account_mask_isValid = ::OpenAPI::fromJsonValue(m_proceed_sub_account_mask, json[QString("proceedSubAccountMask")]);
    m_proceed_sub_account_mask_isSet = !json[QString("proceedSubAccountMask")].isNull() && m_proceed_sub_account_mask_isValid;

    m_record_type_isValid = ::OpenAPI::fromJsonValue(m_record_type, json[QString("recordType")]);
    m_record_type_isSet = !json[QString("recordType")].isNull() && m_record_type_isValid;

    m_sub_account_mask_isValid = ::OpenAPI::fromJsonValue(m_sub_account_mask, json[QString("subAccountMask")]);
    m_sub_account_mask_isSet = !json[QString("subAccountMask")].isNull() && m_sub_account_mask_isValid;

    m_useful_life_isValid = ::OpenAPI::fromJsonValue(m_useful_life, json[QString("usefulLife")]);
    m_useful_life_isSet = !json[QString("usefulLife")].isNull() && m_useful_life_isValid;
}

QString OAIFixedAssetClassDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFixedAssetClassDto::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerated_depreciation_isSet) {
        obj.insert(QString("acceleratedDepreciation"), ::OpenAPI::toJsonValue(m_accelerated_depreciation));
    }
    if (m_accounts.isSet()) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_accumulated_depreciation_sub_account_mask_isSet) {
        obj.insert(QString("accumulatedDepreciationSubAccountMask"), ::OpenAPI::toJsonValue(m_accumulated_depreciation_sub_account_mask));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_asset_type_id_isSet) {
        obj.insert(QString("assetTypeID"), ::OpenAPI::toJsonValue(m_asset_type_id));
    }
    if (m_book_settings.isSet()) {
        obj.insert(QString("bookSettings"), ::OpenAPI::toJsonValue(m_book_settings));
    }
    if (m_class_id_isSet) {
        obj.insert(QString("classID"), ::OpenAPI::toJsonValue(m_class_id));
    }
    if (m_depreciable_isSet) {
        obj.insert(QString("depreciable"), ::OpenAPI::toJsonValue(m_depreciable));
    }
    if (m_depreciated_expense_sub_account_mask_isSet) {
        obj.insert(QString("depreciatedExpenseSubAccountMask"), ::OpenAPI::toJsonValue(m_depreciated_expense_sub_account_mask));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_gain_loss_sub_account_mask_isSet) {
        obj.insert(QString("gainLossSubAccountMask"), ::OpenAPI::toJsonValue(m_gain_loss_sub_account_mask));
    }
    if (m_is_tangible_isSet) {
        obj.insert(QString("isTangible"), ::OpenAPI::toJsonValue(m_is_tangible));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_proceed_sub_account_mask_isSet) {
        obj.insert(QString("proceedSubAccountMask"), ::OpenAPI::toJsonValue(m_proceed_sub_account_mask));
    }
    if (m_record_type_isSet) {
        obj.insert(QString("recordType"), ::OpenAPI::toJsonValue(m_record_type));
    }
    if (m_sub_account_mask_isSet) {
        obj.insert(QString("subAccountMask"), ::OpenAPI::toJsonValue(m_sub_account_mask));
    }
    if (m_useful_life_isSet) {
        obj.insert(QString("usefulLife"), ::OpenAPI::toJsonValue(m_useful_life));
    }
    return obj;
}

bool OAIFixedAssetClassDto::isAcceleratedDepreciation() const {
    return m_accelerated_depreciation;
}
void OAIFixedAssetClassDto::setAcceleratedDepreciation(const bool &accelerated_depreciation) {
    m_accelerated_depreciation = accelerated_depreciation;
    m_accelerated_depreciation_isSet = true;
}

bool OAIFixedAssetClassDto::is_accelerated_depreciation_Set() const{
    return m_accelerated_depreciation_isSet;
}

bool OAIFixedAssetClassDto::is_accelerated_depreciation_Valid() const{
    return m_accelerated_depreciation_isValid;
}

OAIAccountsInFixedAssetClassDto OAIFixedAssetClassDto::getAccounts() const {
    return m_accounts;
}
void OAIFixedAssetClassDto::setAccounts(const OAIAccountsInFixedAssetClassDto &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIFixedAssetClassDto::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIFixedAssetClassDto::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QString OAIFixedAssetClassDto::getAccumulatedDepreciationSubAccountMask() const {
    return m_accumulated_depreciation_sub_account_mask;
}
void OAIFixedAssetClassDto::setAccumulatedDepreciationSubAccountMask(const QString &accumulated_depreciation_sub_account_mask) {
    m_accumulated_depreciation_sub_account_mask = accumulated_depreciation_sub_account_mask;
    m_accumulated_depreciation_sub_account_mask_isSet = true;
}

bool OAIFixedAssetClassDto::is_accumulated_depreciation_sub_account_mask_Set() const{
    return m_accumulated_depreciation_sub_account_mask_isSet;
}

bool OAIFixedAssetClassDto::is_accumulated_depreciation_sub_account_mask_Valid() const{
    return m_accumulated_depreciation_sub_account_mask_isValid;
}

bool OAIFixedAssetClassDto::isActive() const {
    return m_active;
}
void OAIFixedAssetClassDto::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIFixedAssetClassDto::is_active_Set() const{
    return m_active_isSet;
}

bool OAIFixedAssetClassDto::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIFixedAssetClassDto::getAssetTypeId() const {
    return m_asset_type_id;
}
void OAIFixedAssetClassDto::setAssetTypeId(const QString &asset_type_id) {
    m_asset_type_id = asset_type_id;
    m_asset_type_id_isSet = true;
}

bool OAIFixedAssetClassDto::is_asset_type_id_Set() const{
    return m_asset_type_id_isSet;
}

bool OAIFixedAssetClassDto::is_asset_type_id_Valid() const{
    return m_asset_type_id_isValid;
}

OAIBookSettingsInFixedAssetClassDto OAIFixedAssetClassDto::getBookSettings() const {
    return m_book_settings;
}
void OAIFixedAssetClassDto::setBookSettings(const OAIBookSettingsInFixedAssetClassDto &book_settings) {
    m_book_settings = book_settings;
    m_book_settings_isSet = true;
}

bool OAIFixedAssetClassDto::is_book_settings_Set() const{
    return m_book_settings_isSet;
}

bool OAIFixedAssetClassDto::is_book_settings_Valid() const{
    return m_book_settings_isValid;
}

QString OAIFixedAssetClassDto::getClassId() const {
    return m_class_id;
}
void OAIFixedAssetClassDto::setClassId(const QString &class_id) {
    m_class_id = class_id;
    m_class_id_isSet = true;
}

bool OAIFixedAssetClassDto::is_class_id_Set() const{
    return m_class_id_isSet;
}

bool OAIFixedAssetClassDto::is_class_id_Valid() const{
    return m_class_id_isValid;
}

bool OAIFixedAssetClassDto::isDepreciable() const {
    return m_depreciable;
}
void OAIFixedAssetClassDto::setDepreciable(const bool &depreciable) {
    m_depreciable = depreciable;
    m_depreciable_isSet = true;
}

bool OAIFixedAssetClassDto::is_depreciable_Set() const{
    return m_depreciable_isSet;
}

bool OAIFixedAssetClassDto::is_depreciable_Valid() const{
    return m_depreciable_isValid;
}

QString OAIFixedAssetClassDto::getDepreciatedExpenseSubAccountMask() const {
    return m_depreciated_expense_sub_account_mask;
}
void OAIFixedAssetClassDto::setDepreciatedExpenseSubAccountMask(const QString &depreciated_expense_sub_account_mask) {
    m_depreciated_expense_sub_account_mask = depreciated_expense_sub_account_mask;
    m_depreciated_expense_sub_account_mask_isSet = true;
}

bool OAIFixedAssetClassDto::is_depreciated_expense_sub_account_mask_Set() const{
    return m_depreciated_expense_sub_account_mask_isSet;
}

bool OAIFixedAssetClassDto::is_depreciated_expense_sub_account_mask_Valid() const{
    return m_depreciated_expense_sub_account_mask_isValid;
}

QString OAIFixedAssetClassDto::getDescription() const {
    return m_description;
}
void OAIFixedAssetClassDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFixedAssetClassDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFixedAssetClassDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFixedAssetClassDto::getErrorInfo() const {
    return m_error_info;
}
void OAIFixedAssetClassDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIFixedAssetClassDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIFixedAssetClassDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAIFixedAssetClassDto::getGainLossSubAccountMask() const {
    return m_gain_loss_sub_account_mask;
}
void OAIFixedAssetClassDto::setGainLossSubAccountMask(const QString &gain_loss_sub_account_mask) {
    m_gain_loss_sub_account_mask = gain_loss_sub_account_mask;
    m_gain_loss_sub_account_mask_isSet = true;
}

bool OAIFixedAssetClassDto::is_gain_loss_sub_account_mask_Set() const{
    return m_gain_loss_sub_account_mask_isSet;
}

bool OAIFixedAssetClassDto::is_gain_loss_sub_account_mask_Valid() const{
    return m_gain_loss_sub_account_mask_isValid;
}

bool OAIFixedAssetClassDto::isIsTangible() const {
    return m_is_tangible;
}
void OAIFixedAssetClassDto::setIsTangible(const bool &is_tangible) {
    m_is_tangible = is_tangible;
    m_is_tangible_isSet = true;
}

bool OAIFixedAssetClassDto::is_is_tangible_Set() const{
    return m_is_tangible_isSet;
}

bool OAIFixedAssetClassDto::is_is_tangible_Valid() const{
    return m_is_tangible_isValid;
}

OAIMetadataDto OAIFixedAssetClassDto::getMetadata() const {
    return m_metadata;
}
void OAIFixedAssetClassDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIFixedAssetClassDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIFixedAssetClassDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIFixedAssetClassDto::getProceedSubAccountMask() const {
    return m_proceed_sub_account_mask;
}
void OAIFixedAssetClassDto::setProceedSubAccountMask(const QString &proceed_sub_account_mask) {
    m_proceed_sub_account_mask = proceed_sub_account_mask;
    m_proceed_sub_account_mask_isSet = true;
}

bool OAIFixedAssetClassDto::is_proceed_sub_account_mask_Set() const{
    return m_proceed_sub_account_mask_isSet;
}

bool OAIFixedAssetClassDto::is_proceed_sub_account_mask_Valid() const{
    return m_proceed_sub_account_mask_isValid;
}

QString OAIFixedAssetClassDto::getRecordType() const {
    return m_record_type;
}
void OAIFixedAssetClassDto::setRecordType(const QString &record_type) {
    m_record_type = record_type;
    m_record_type_isSet = true;
}

bool OAIFixedAssetClassDto::is_record_type_Set() const{
    return m_record_type_isSet;
}

bool OAIFixedAssetClassDto::is_record_type_Valid() const{
    return m_record_type_isValid;
}

QString OAIFixedAssetClassDto::getSubAccountMask() const {
    return m_sub_account_mask;
}
void OAIFixedAssetClassDto::setSubAccountMask(const QString &sub_account_mask) {
    m_sub_account_mask = sub_account_mask;
    m_sub_account_mask_isSet = true;
}

bool OAIFixedAssetClassDto::is_sub_account_mask_Set() const{
    return m_sub_account_mask_isSet;
}

bool OAIFixedAssetClassDto::is_sub_account_mask_Valid() const{
    return m_sub_account_mask_isValid;
}

double OAIFixedAssetClassDto::getUsefulLife() const {
    return m_useful_life;
}
void OAIFixedAssetClassDto::setUsefulLife(const double &useful_life) {
    m_useful_life = useful_life;
    m_useful_life_isSet = true;
}

bool OAIFixedAssetClassDto::is_useful_life_Set() const{
    return m_useful_life_isSet;
}

bool OAIFixedAssetClassDto::is_useful_life_Valid() const{
    return m_useful_life_isValid;
}

bool OAIFixedAssetClassDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerated_depreciation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accumulated_depreciation_sub_account_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depreciated_expense_sub_account_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gain_loss_sub_account_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tangible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proceed_sub_account_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_useful_life_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFixedAssetClassDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
