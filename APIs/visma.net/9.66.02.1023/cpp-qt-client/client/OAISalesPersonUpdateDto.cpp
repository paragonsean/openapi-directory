/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesPersonUpdateDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesPersonUpdateDto::OAISalesPersonUpdateDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesPersonUpdateDto::OAISalesPersonUpdateDto() {
    this->initializeModel();
}

OAISalesPersonUpdateDto::~OAISalesPersonUpdateDto() {}

void OAISalesPersonUpdateDto::initializeModel() {

    m_commission_pct_isSet = false;
    m_commission_pct_isValid = false;

    m_customers_isSet = false;
    m_customers_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sales_sub_isSet = false;
    m_sales_sub_isValid = false;

    m_salesperson_id_isSet = false;
    m_salesperson_id_isValid = false;
}

void OAISalesPersonUpdateDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesPersonUpdateDto::fromJsonObject(QJsonObject json) {

    m_commission_pct_isValid = ::OpenAPI::fromJsonValue(m_commission_pct, json[QString("commissionPct")]);
    m_commission_pct_isSet = !json[QString("commissionPct")].isNull() && m_commission_pct_isValid;

    m_customers_isValid = ::OpenAPI::fromJsonValue(m_customers, json[QString("customers")]);
    m_customers_isSet = !json[QString("customers")].isNull() && m_customers_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sales_sub_isValid = ::OpenAPI::fromJsonValue(m_sales_sub, json[QString("salesSub")]);
    m_sales_sub_isSet = !json[QString("salesSub")].isNull() && m_sales_sub_isValid;

    m_salesperson_id_isValid = ::OpenAPI::fromJsonValue(m_salesperson_id, json[QString("salespersonID")]);
    m_salesperson_id_isSet = !json[QString("salespersonID")].isNull() && m_salesperson_id_isValid;
}

QString OAISalesPersonUpdateDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesPersonUpdateDto::asJsonObject() const {
    QJsonObject obj;
    if (m_commission_pct.isSet()) {
        obj.insert(QString("commissionPct"), ::OpenAPI::toJsonValue(m_commission_pct));
    }
    if (m_customers.size() > 0) {
        obj.insert(QString("customers"), ::OpenAPI::toJsonValue(m_customers));
    }
    if (m_is_active.isSet()) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sales_sub.isSet()) {
        obj.insert(QString("salesSub"), ::OpenAPI::toJsonValue(m_sales_sub));
    }
    if (m_salesperson_id.isSet()) {
        obj.insert(QString("salespersonID"), ::OpenAPI::toJsonValue(m_salesperson_id));
    }
    return obj;
}

OAIDtoValueOfNullableOfDecimal OAISalesPersonUpdateDto::getCommissionPct() const {
    return m_commission_pct;
}
void OAISalesPersonUpdateDto::setCommissionPct(const OAIDtoValueOfNullableOfDecimal &commission_pct) {
    m_commission_pct = commission_pct;
    m_commission_pct_isSet = true;
}

bool OAISalesPersonUpdateDto::is_commission_pct_Set() const{
    return m_commission_pct_isSet;
}

bool OAISalesPersonUpdateDto::is_commission_pct_Valid() const{
    return m_commission_pct_isValid;
}

QList<OAICustSalesPeopleUpdateDto> OAISalesPersonUpdateDto::getCustomers() const {
    return m_customers;
}
void OAISalesPersonUpdateDto::setCustomers(const QList<OAICustSalesPeopleUpdateDto> &customers) {
    m_customers = customers;
    m_customers_isSet = true;
}

bool OAISalesPersonUpdateDto::is_customers_Set() const{
    return m_customers_isSet;
}

bool OAISalesPersonUpdateDto::is_customers_Valid() const{
    return m_customers_isValid;
}

OAIDtoValueOfNullableOfBoolean OAISalesPersonUpdateDto::getIsActive() const {
    return m_is_active;
}
void OAISalesPersonUpdateDto::setIsActive(const OAIDtoValueOfNullableOfBoolean &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAISalesPersonUpdateDto::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAISalesPersonUpdateDto::is_is_active_Valid() const{
    return m_is_active_isValid;
}

OAIDtoValueOfString OAISalesPersonUpdateDto::getName() const {
    return m_name;
}
void OAISalesPersonUpdateDto::setName(const OAIDtoValueOfString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISalesPersonUpdateDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAISalesPersonUpdateDto::is_name_Valid() const{
    return m_name_isValid;
}

OAIDtoValueOfString OAISalesPersonUpdateDto::getSalesSub() const {
    return m_sales_sub;
}
void OAISalesPersonUpdateDto::setSalesSub(const OAIDtoValueOfString &sales_sub) {
    m_sales_sub = sales_sub;
    m_sales_sub_isSet = true;
}

bool OAISalesPersonUpdateDto::is_sales_sub_Set() const{
    return m_sales_sub_isSet;
}

bool OAISalesPersonUpdateDto::is_sales_sub_Valid() const{
    return m_sales_sub_isValid;
}

OAIDtoValueOfString OAISalesPersonUpdateDto::getSalespersonId() const {
    return m_salesperson_id;
}
void OAISalesPersonUpdateDto::setSalespersonId(const OAIDtoValueOfString &salesperson_id) {
    m_salesperson_id = salesperson_id;
    m_salesperson_id_isSet = true;
}

bool OAISalesPersonUpdateDto::is_salesperson_id_Set() const{
    return m_salesperson_id_isSet;
}

bool OAISalesPersonUpdateDto::is_salesperson_id_Valid() const{
    return m_salesperson_id_isValid;
}

bool OAISalesPersonUpdateDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commission_pct.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_sub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesperson_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesPersonUpdateDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
