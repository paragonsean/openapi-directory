/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupplierBalanceDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupplierBalanceDto::OAISupplierBalanceDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupplierBalanceDto::OAISupplierBalanceDto() {
    this->initializeModel();
}

OAISupplierBalanceDto::~OAISupplierBalanceDto() {}

void OAISupplierBalanceDto::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_total_purchase_invoice_period_isSet = false;
    m_total_purchase_invoice_period_isValid = false;

    m_total_purchase_invoice_year_isSet = false;
    m_total_purchase_invoice_year_isValid = false;

    m_total_sent_for_approval_isSet = false;
    m_total_sent_for_approval_isValid = false;

    m_unreleased_purchases_not_in_approval_isSet = false;
    m_unreleased_purchases_not_in_approval_isValid = false;
}

void OAISupplierBalanceDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupplierBalanceDto::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_total_purchase_invoice_period_isValid = ::OpenAPI::fromJsonValue(m_total_purchase_invoice_period, json[QString("totalPurchaseInvoicePeriod")]);
    m_total_purchase_invoice_period_isSet = !json[QString("totalPurchaseInvoicePeriod")].isNull() && m_total_purchase_invoice_period_isValid;

    m_total_purchase_invoice_year_isValid = ::OpenAPI::fromJsonValue(m_total_purchase_invoice_year, json[QString("totalPurchaseInvoiceYear")]);
    m_total_purchase_invoice_year_isSet = !json[QString("totalPurchaseInvoiceYear")].isNull() && m_total_purchase_invoice_year_isValid;

    m_total_sent_for_approval_isValid = ::OpenAPI::fromJsonValue(m_total_sent_for_approval, json[QString("totalSentForApproval")]);
    m_total_sent_for_approval_isSet = !json[QString("totalSentForApproval")].isNull() && m_total_sent_for_approval_isValid;

    m_unreleased_purchases_not_in_approval_isValid = ::OpenAPI::fromJsonValue(m_unreleased_purchases_not_in_approval, json[QString("unreleasedPurchasesNotInApproval")]);
    m_unreleased_purchases_not_in_approval_isSet = !json[QString("unreleasedPurchasesNotInApproval")].isNull() && m_unreleased_purchases_not_in_approval_isValid;
}

QString OAISupplierBalanceDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupplierBalanceDto::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_total_purchase_invoice_period.isSet()) {
        obj.insert(QString("totalPurchaseInvoicePeriod"), ::OpenAPI::toJsonValue(m_total_purchase_invoice_period));
    }
    if (m_total_purchase_invoice_year.isSet()) {
        obj.insert(QString("totalPurchaseInvoiceYear"), ::OpenAPI::toJsonValue(m_total_purchase_invoice_year));
    }
    if (m_total_sent_for_approval.isSet()) {
        obj.insert(QString("totalSentForApproval"), ::OpenAPI::toJsonValue(m_total_sent_for_approval));
    }
    if (m_unreleased_purchases_not_in_approval.isSet()) {
        obj.insert(QString("unreleasedPurchasesNotInApproval"), ::OpenAPI::toJsonValue(m_unreleased_purchases_not_in_approval));
    }
    return obj;
}

double OAISupplierBalanceDto::getBalance() const {
    return m_balance;
}
void OAISupplierBalanceDto::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAISupplierBalanceDto::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAISupplierBalanceDto::is_balance_Valid() const{
    return m_balance_isValid;
}

QDateTime OAISupplierBalanceDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAISupplierBalanceDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAISupplierBalanceDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAISupplierBalanceDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

OAISupplierDescriptionDto OAISupplierBalanceDto::getSupplier() const {
    return m_supplier;
}
void OAISupplierBalanceDto::setSupplier(const OAISupplierDescriptionDto &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAISupplierBalanceDto::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAISupplierBalanceDto::is_supplier_Valid() const{
    return m_supplier_isValid;
}

OAIWithoutWithVatDto OAISupplierBalanceDto::getTotalPurchaseInvoicePeriod() const {
    return m_total_purchase_invoice_period;
}
void OAISupplierBalanceDto::setTotalPurchaseInvoicePeriod(const OAIWithoutWithVatDto &total_purchase_invoice_period) {
    m_total_purchase_invoice_period = total_purchase_invoice_period;
    m_total_purchase_invoice_period_isSet = true;
}

bool OAISupplierBalanceDto::is_total_purchase_invoice_period_Set() const{
    return m_total_purchase_invoice_period_isSet;
}

bool OAISupplierBalanceDto::is_total_purchase_invoice_period_Valid() const{
    return m_total_purchase_invoice_period_isValid;
}

OAIWithoutWithVatDto OAISupplierBalanceDto::getTotalPurchaseInvoiceYear() const {
    return m_total_purchase_invoice_year;
}
void OAISupplierBalanceDto::setTotalPurchaseInvoiceYear(const OAIWithoutWithVatDto &total_purchase_invoice_year) {
    m_total_purchase_invoice_year = total_purchase_invoice_year;
    m_total_purchase_invoice_year_isSet = true;
}

bool OAISupplierBalanceDto::is_total_purchase_invoice_year_Set() const{
    return m_total_purchase_invoice_year_isSet;
}

bool OAISupplierBalanceDto::is_total_purchase_invoice_year_Valid() const{
    return m_total_purchase_invoice_year_isValid;
}

OAIWithoutWithVatDto OAISupplierBalanceDto::getTotalSentForApproval() const {
    return m_total_sent_for_approval;
}
void OAISupplierBalanceDto::setTotalSentForApproval(const OAIWithoutWithVatDto &total_sent_for_approval) {
    m_total_sent_for_approval = total_sent_for_approval;
    m_total_sent_for_approval_isSet = true;
}

bool OAISupplierBalanceDto::is_total_sent_for_approval_Set() const{
    return m_total_sent_for_approval_isSet;
}

bool OAISupplierBalanceDto::is_total_sent_for_approval_Valid() const{
    return m_total_sent_for_approval_isValid;
}

OAIWithoutWithVatDto OAISupplierBalanceDto::getUnreleasedPurchasesNotInApproval() const {
    return m_unreleased_purchases_not_in_approval;
}
void OAISupplierBalanceDto::setUnreleasedPurchasesNotInApproval(const OAIWithoutWithVatDto &unreleased_purchases_not_in_approval) {
    m_unreleased_purchases_not_in_approval = unreleased_purchases_not_in_approval;
    m_unreleased_purchases_not_in_approval_isSet = true;
}

bool OAISupplierBalanceDto::is_unreleased_purchases_not_in_approval_Set() const{
    return m_unreleased_purchases_not_in_approval_isSet;
}

bool OAISupplierBalanceDto::is_unreleased_purchases_not_in_approval_Valid() const{
    return m_unreleased_purchases_not_in_approval_isValid;
}

bool OAISupplierBalanceDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_purchase_invoice_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_purchase_invoice_year.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_sent_for_approval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreleased_purchases_not_in_approval.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupplierBalanceDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
