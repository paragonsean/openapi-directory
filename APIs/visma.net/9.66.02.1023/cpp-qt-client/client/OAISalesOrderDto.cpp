/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesOrderDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesOrderDto::OAISalesOrderDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesOrderDto::OAISalesOrderDto() {
    this->initializeModel();
}

OAISalesOrderDto::~OAISalesOrderDto() {}

void OAISalesOrderDto::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_branch_number_isSet = false;
    m_branch_number_isValid = false;

    m_cancel_by_isSet = false;
    m_cancel_by_isValid = false;

    m_canceled_isSet = false;
    m_canceled_isValid = false;

    m_cash_account_isSet = false;
    m_cash_account_isValid = false;

    m_cash_discount_date_isSet = false;
    m_cash_discount_date_isValid = false;

    m_commission_amount_isSet = false;
    m_commission_amount_isValid = false;

    m_commission_percent_isSet = false;
    m_commission_percent_isValid = false;

    m_commissionable_amount_isSet = false;
    m_commissionable_amount_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_order_isSet = false;
    m_customer_order_isValid = false;

    m_customer_ref_no_isSet = false;
    m_customer_ref_no_isValid = false;

    m_customer_vat_zone_isSet = false;
    m_customer_vat_zone_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_total_isSet = false;
    m_discount_total_isValid = false;

    m_discount_total_in_base_currency_isSet = false;
    m_discount_total_in_base_currency_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_emailed_isSet = false;
    m_emailed_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_fob_point_isSet = false;
    m_fob_point_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_insurance_isSet = false;
    m_insurance_isValid = false;

    m_invoice_date_isSet = false;
    m_invoice_date_isValid = false;

    m_invoice_nbr_isSet = false;
    m_invoice_nbr_isValid = false;

    m_invoice_separately_isSet = false;
    m_invoice_separately_isValid = false;

    m_is_rot_rut_deductible_isSet = false;
    m_is_rot_rut_deductible_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_no_isSet = false;
    m_order_no_isValid = false;

    m_order_total_isSet = false;
    m_order_total_isValid = false;

    m_order_total_in_base_currency_isSet = false;
    m_order_total_in_base_currency_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_orig_order_nbr_isSet = false;
    m_orig_order_nbr_isValid = false;

    m_orig_order_type_isSet = false;
    m_orig_order_type_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_ref_isSet = false;
    m_payment_ref_isValid = false;

    m_post_period_isSet = false;
    m_post_period_isValid = false;

    m_preferred_warehouse_isSet = false;
    m_preferred_warehouse_isValid = false;

    m_print_description_on_invoice_isSet = false;
    m_print_description_on_invoice_isValid = false;

    m_print_note_on_external_documents_isSet = false;
    m_print_note_on_external_documents_isValid = false;

    m_print_note_on_internal_documents_isSet = false;
    m_print_note_on_internal_documents_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_project_cd_isSet = false;
    m_project_cd_isValid = false;

    m_request_on_isSet = false;
    m_request_on_isValid = false;

    m_residential_delivery_isSet = false;
    m_residential_delivery_isValid = false;

    m_sales_person_isSet = false;
    m_sales_person_isValid = false;

    m_saturday_delivery_isSet = false;
    m_saturday_delivery_isValid = false;

    m_sched_shipment_isSet = false;
    m_sched_shipment_isValid = false;

    m_ship_complete_isSet = false;
    m_ship_complete_isValid = false;

    m_ship_separately_isSet = false;
    m_ship_separately_isValid = false;

    m_ship_via_isSet = false;
    m_ship_via_isValid = false;

    m_shipments_isSet = false;
    m_shipments_isValid = false;

    m_shipping_terms_isSet = false;
    m_shipping_terms_isValid = false;

    m_shipping_zone_isSet = false;
    m_shipping_zone_isValid = false;

    m_so_billing_address_isSet = false;
    m_so_billing_address_isValid = false;

    m_so_billing_contact_isSet = false;
    m_so_billing_contact_isValid = false;

    m_so_shipping_address_isSet = false;
    m_so_shipping_address_isValid = false;

    m_so_shipping_contact_isSet = false;
    m_so_shipping_contact_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_total_isSet = false;
    m_tax_total_isValid = false;

    m_tax_total_in_base_currency_isSet = false;
    m_tax_total_in_base_currency_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;

    m_vat_exempt_total_isSet = false;
    m_vat_exempt_total_isValid = false;

    m_vat_exempt_total_in_base_currency_isSet = false;
    m_vat_exempt_total_in_base_currency_isValid = false;

    m_vat_taxable_total_isSet = false;
    m_vat_taxable_total_isValid = false;

    m_vat_taxable_total_in_base_currency_isSet = false;
    m_vat_taxable_total_in_base_currency_isValid = false;
}

void OAISalesOrderDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesOrderDto::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_branch_number_isValid = ::OpenAPI::fromJsonValue(m_branch_number, json[QString("branchNumber")]);
    m_branch_number_isSet = !json[QString("branchNumber")].isNull() && m_branch_number_isValid;

    m_cancel_by_isValid = ::OpenAPI::fromJsonValue(m_cancel_by, json[QString("cancelBy")]);
    m_cancel_by_isSet = !json[QString("cancelBy")].isNull() && m_cancel_by_isValid;

    m_canceled_isValid = ::OpenAPI::fromJsonValue(m_canceled, json[QString("canceled")]);
    m_canceled_isSet = !json[QString("canceled")].isNull() && m_canceled_isValid;

    m_cash_account_isValid = ::OpenAPI::fromJsonValue(m_cash_account, json[QString("cashAccount")]);
    m_cash_account_isSet = !json[QString("cashAccount")].isNull() && m_cash_account_isValid;

    m_cash_discount_date_isValid = ::OpenAPI::fromJsonValue(m_cash_discount_date, json[QString("cashDiscountDate")]);
    m_cash_discount_date_isSet = !json[QString("cashDiscountDate")].isNull() && m_cash_discount_date_isValid;

    m_commission_amount_isValid = ::OpenAPI::fromJsonValue(m_commission_amount, json[QString("commissionAmount")]);
    m_commission_amount_isSet = !json[QString("commissionAmount")].isNull() && m_commission_amount_isValid;

    m_commission_percent_isValid = ::OpenAPI::fromJsonValue(m_commission_percent, json[QString("commissionPercent")]);
    m_commission_percent_isSet = !json[QString("commissionPercent")].isNull() && m_commission_percent_isValid;

    m_commissionable_amount_isValid = ::OpenAPI::fromJsonValue(m_commissionable_amount, json[QString("commissionableAmount")]);
    m_commissionable_amount_isSet = !json[QString("commissionableAmount")].isNull() && m_commissionable_amount_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("contactId")]);
    m_contact_id_isSet = !json[QString("contactId")].isNull() && m_contact_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_order_isValid = ::OpenAPI::fromJsonValue(m_customer_order, json[QString("customerOrder")]);
    m_customer_order_isSet = !json[QString("customerOrder")].isNull() && m_customer_order_isValid;

    m_customer_ref_no_isValid = ::OpenAPI::fromJsonValue(m_customer_ref_no, json[QString("customerRefNo")]);
    m_customer_ref_no_isSet = !json[QString("customerRefNo")].isNull() && m_customer_ref_no_isValid;

    m_customer_vat_zone_isValid = ::OpenAPI::fromJsonValue(m_customer_vat_zone, json[QString("customerVATZone")]);
    m_customer_vat_zone_isSet = !json[QString("customerVATZone")].isNull() && m_customer_vat_zone_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_total_isValid = ::OpenAPI::fromJsonValue(m_discount_total, json[QString("discountTotal")]);
    m_discount_total_isSet = !json[QString("discountTotal")].isNull() && m_discount_total_isValid;

    m_discount_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_discount_total_in_base_currency, json[QString("discountTotalInBaseCurrency")]);
    m_discount_total_in_base_currency_isSet = !json[QString("discountTotalInBaseCurrency")].isNull() && m_discount_total_in_base_currency_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_emailed_isValid = ::OpenAPI::fromJsonValue(m_emailed, json[QString("emailed")]);
    m_emailed_isSet = !json[QString("emailed")].isNull() && m_emailed_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_fob_point_isValid = ::OpenAPI::fromJsonValue(m_fob_point, json[QString("fobPoint")]);
    m_fob_point_isSet = !json[QString("fobPoint")].isNull() && m_fob_point_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_insurance_isValid = ::OpenAPI::fromJsonValue(m_insurance, json[QString("insurance")]);
    m_insurance_isSet = !json[QString("insurance")].isNull() && m_insurance_isValid;

    m_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_invoice_date, json[QString("invoiceDate")]);
    m_invoice_date_isSet = !json[QString("invoiceDate")].isNull() && m_invoice_date_isValid;

    m_invoice_nbr_isValid = ::OpenAPI::fromJsonValue(m_invoice_nbr, json[QString("invoiceNbr")]);
    m_invoice_nbr_isSet = !json[QString("invoiceNbr")].isNull() && m_invoice_nbr_isValid;

    m_invoice_separately_isValid = ::OpenAPI::fromJsonValue(m_invoice_separately, json[QString("invoiceSeparately")]);
    m_invoice_separately_isSet = !json[QString("invoiceSeparately")].isNull() && m_invoice_separately_isValid;

    m_is_rot_rut_deductible_isValid = ::OpenAPI::fromJsonValue(m_is_rot_rut_deductible, json[QString("isRotRutDeductible")]);
    m_is_rot_rut_deductible_isSet = !json[QString("isRotRutDeductible")].isNull() && m_is_rot_rut_deductible_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_no_isValid = ::OpenAPI::fromJsonValue(m_order_no, json[QString("orderNo")]);
    m_order_no_isSet = !json[QString("orderNo")].isNull() && m_order_no_isValid;

    m_order_total_isValid = ::OpenAPI::fromJsonValue(m_order_total, json[QString("orderTotal")]);
    m_order_total_isSet = !json[QString("orderTotal")].isNull() && m_order_total_isValid;

    m_order_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_order_total_in_base_currency, json[QString("orderTotalInBaseCurrency")]);
    m_order_total_in_base_currency_isSet = !json[QString("orderTotalInBaseCurrency")].isNull() && m_order_total_in_base_currency_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_orig_order_nbr_isValid = ::OpenAPI::fromJsonValue(m_orig_order_nbr, json[QString("origOrderNbr")]);
    m_orig_order_nbr_isSet = !json[QString("origOrderNbr")].isNull() && m_orig_order_nbr_isValid;

    m_orig_order_type_isValid = ::OpenAPI::fromJsonValue(m_orig_order_type, json[QString("origOrderType")]);
    m_orig_order_type_isSet = !json[QString("origOrderType")].isNull() && m_orig_order_type_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_ref_isValid = ::OpenAPI::fromJsonValue(m_payment_ref, json[QString("paymentRef")]);
    m_payment_ref_isSet = !json[QString("paymentRef")].isNull() && m_payment_ref_isValid;

    m_post_period_isValid = ::OpenAPI::fromJsonValue(m_post_period, json[QString("postPeriod")]);
    m_post_period_isSet = !json[QString("postPeriod")].isNull() && m_post_period_isValid;

    m_preferred_warehouse_isValid = ::OpenAPI::fromJsonValue(m_preferred_warehouse, json[QString("preferredWarehouse")]);
    m_preferred_warehouse_isSet = !json[QString("preferredWarehouse")].isNull() && m_preferred_warehouse_isValid;

    m_print_description_on_invoice_isValid = ::OpenAPI::fromJsonValue(m_print_description_on_invoice, json[QString("printDescriptionOnInvoice")]);
    m_print_description_on_invoice_isSet = !json[QString("printDescriptionOnInvoice")].isNull() && m_print_description_on_invoice_isValid;

    m_print_note_on_external_documents_isValid = ::OpenAPI::fromJsonValue(m_print_note_on_external_documents, json[QString("printNoteOnExternalDocuments")]);
    m_print_note_on_external_documents_isSet = !json[QString("printNoteOnExternalDocuments")].isNull() && m_print_note_on_external_documents_isValid;

    m_print_note_on_internal_documents_isValid = ::OpenAPI::fromJsonValue(m_print_note_on_internal_documents, json[QString("printNoteOnInternalDocuments")]);
    m_print_note_on_internal_documents_isSet = !json[QString("printNoteOnInternalDocuments")].isNull() && m_print_note_on_internal_documents_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_project_cd_isValid = ::OpenAPI::fromJsonValue(m_project_cd, json[QString("projectCD")]);
    m_project_cd_isSet = !json[QString("projectCD")].isNull() && m_project_cd_isValid;

    m_request_on_isValid = ::OpenAPI::fromJsonValue(m_request_on, json[QString("requestOn")]);
    m_request_on_isSet = !json[QString("requestOn")].isNull() && m_request_on_isValid;

    m_residential_delivery_isValid = ::OpenAPI::fromJsonValue(m_residential_delivery, json[QString("residentialDelivery")]);
    m_residential_delivery_isSet = !json[QString("residentialDelivery")].isNull() && m_residential_delivery_isValid;

    m_sales_person_isValid = ::OpenAPI::fromJsonValue(m_sales_person, json[QString("salesPerson")]);
    m_sales_person_isSet = !json[QString("salesPerson")].isNull() && m_sales_person_isValid;

    m_saturday_delivery_isValid = ::OpenAPI::fromJsonValue(m_saturday_delivery, json[QString("saturdayDelivery")]);
    m_saturday_delivery_isSet = !json[QString("saturdayDelivery")].isNull() && m_saturday_delivery_isValid;

    m_sched_shipment_isValid = ::OpenAPI::fromJsonValue(m_sched_shipment, json[QString("schedShipment")]);
    m_sched_shipment_isSet = !json[QString("schedShipment")].isNull() && m_sched_shipment_isValid;

    m_ship_complete_isValid = ::OpenAPI::fromJsonValue(m_ship_complete, json[QString("shipComplete")]);
    m_ship_complete_isSet = !json[QString("shipComplete")].isNull() && m_ship_complete_isValid;

    m_ship_separately_isValid = ::OpenAPI::fromJsonValue(m_ship_separately, json[QString("shipSeparately")]);
    m_ship_separately_isSet = !json[QString("shipSeparately")].isNull() && m_ship_separately_isValid;

    m_ship_via_isValid = ::OpenAPI::fromJsonValue(m_ship_via, json[QString("shipVia")]);
    m_ship_via_isSet = !json[QString("shipVia")].isNull() && m_ship_via_isValid;

    m_shipments_isValid = ::OpenAPI::fromJsonValue(m_shipments, json[QString("shipments")]);
    m_shipments_isSet = !json[QString("shipments")].isNull() && m_shipments_isValid;

    m_shipping_terms_isValid = ::OpenAPI::fromJsonValue(m_shipping_terms, json[QString("shippingTerms")]);
    m_shipping_terms_isSet = !json[QString("shippingTerms")].isNull() && m_shipping_terms_isValid;

    m_shipping_zone_isValid = ::OpenAPI::fromJsonValue(m_shipping_zone, json[QString("shippingZone")]);
    m_shipping_zone_isSet = !json[QString("shippingZone")].isNull() && m_shipping_zone_isValid;

    m_so_billing_address_isValid = ::OpenAPI::fromJsonValue(m_so_billing_address, json[QString("soBillingAddress")]);
    m_so_billing_address_isSet = !json[QString("soBillingAddress")].isNull() && m_so_billing_address_isValid;

    m_so_billing_contact_isValid = ::OpenAPI::fromJsonValue(m_so_billing_contact, json[QString("soBillingContact")]);
    m_so_billing_contact_isSet = !json[QString("soBillingContact")].isNull() && m_so_billing_contact_isValid;

    m_so_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_so_shipping_address, json[QString("soShippingAddress")]);
    m_so_shipping_address_isSet = !json[QString("soShippingAddress")].isNull() && m_so_shipping_address_isValid;

    m_so_shipping_contact_isValid = ::OpenAPI::fromJsonValue(m_so_shipping_contact, json[QString("soShippingContact")]);
    m_so_shipping_contact_isSet = !json[QString("soShippingContact")].isNull() && m_so_shipping_contact_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_total_isValid = ::OpenAPI::fromJsonValue(m_tax_total, json[QString("taxTotal")]);
    m_tax_total_isSet = !json[QString("taxTotal")].isNull() && m_tax_total_isValid;

    m_tax_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_tax_total_in_base_currency, json[QString("taxTotalInBaseCurrency")]);
    m_tax_total_in_base_currency_isSet = !json[QString("taxTotalInBaseCurrency")].isNull() && m_tax_total_in_base_currency_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;

    m_vat_exempt_total_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total, json[QString("vatExemptTotal")]);
    m_vat_exempt_total_isSet = !json[QString("vatExemptTotal")].isNull() && m_vat_exempt_total_isValid;

    m_vat_exempt_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_exempt_total_in_base_currency, json[QString("vatExemptTotalInBaseCurrency")]);
    m_vat_exempt_total_in_base_currency_isSet = !json[QString("vatExemptTotalInBaseCurrency")].isNull() && m_vat_exempt_total_in_base_currency_isValid;

    m_vat_taxable_total_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total, json[QString("vatTaxableTotal")]);
    m_vat_taxable_total_isSet = !json[QString("vatTaxableTotal")].isNull() && m_vat_taxable_total_isValid;

    m_vat_taxable_total_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_vat_taxable_total_in_base_currency, json[QString("vatTaxableTotalInBaseCurrency")]);
    m_vat_taxable_total_in_base_currency_isSet = !json[QString("vatTaxableTotalInBaseCurrency")].isNull() && m_vat_taxable_total_in_base_currency_isValid;
}

QString OAISalesOrderDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesOrderDto::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_branch_number.isSet()) {
        obj.insert(QString("branchNumber"), ::OpenAPI::toJsonValue(m_branch_number));
    }
    if (m_cancel_by_isSet) {
        obj.insert(QString("cancelBy"), ::OpenAPI::toJsonValue(m_cancel_by));
    }
    if (m_canceled_isSet) {
        obj.insert(QString("canceled"), ::OpenAPI::toJsonValue(m_canceled));
    }
    if (m_cash_account_isSet) {
        obj.insert(QString("cashAccount"), ::OpenAPI::toJsonValue(m_cash_account));
    }
    if (m_cash_discount_date_isSet) {
        obj.insert(QString("cashDiscountDate"), ::OpenAPI::toJsonValue(m_cash_discount_date));
    }
    if (m_commission_amount_isSet) {
        obj.insert(QString("commissionAmount"), ::OpenAPI::toJsonValue(m_commission_amount));
    }
    if (m_commission_percent_isSet) {
        obj.insert(QString("commissionPercent"), ::OpenAPI::toJsonValue(m_commission_percent));
    }
    if (m_commissionable_amount_isSet) {
        obj.insert(QString("commissionableAmount"), ::OpenAPI::toJsonValue(m_commissionable_amount));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("contactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_order_isSet) {
        obj.insert(QString("customerOrder"), ::OpenAPI::toJsonValue(m_customer_order));
    }
    if (m_customer_ref_no_isSet) {
        obj.insert(QString("customerRefNo"), ::OpenAPI::toJsonValue(m_customer_ref_no));
    }
    if (m_customer_vat_zone.isSet()) {
        obj.insert(QString("customerVATZone"), ::OpenAPI::toJsonValue(m_customer_vat_zone));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_total_isSet) {
        obj.insert(QString("discountTotal"), ::OpenAPI::toJsonValue(m_discount_total));
    }
    if (m_discount_total_in_base_currency_isSet) {
        obj.insert(QString("discountTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_discount_total_in_base_currency));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_emailed_isSet) {
        obj.insert(QString("emailed"), ::OpenAPI::toJsonValue(m_emailed));
    }
    if (m_error_info_isSet) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_fob_point.isSet()) {
        obj.insert(QString("fobPoint"), ::OpenAPI::toJsonValue(m_fob_point));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_insurance_isSet) {
        obj.insert(QString("insurance"), ::OpenAPI::toJsonValue(m_insurance));
    }
    if (m_invoice_date_isSet) {
        obj.insert(QString("invoiceDate"), ::OpenAPI::toJsonValue(m_invoice_date));
    }
    if (m_invoice_nbr_isSet) {
        obj.insert(QString("invoiceNbr"), ::OpenAPI::toJsonValue(m_invoice_nbr));
    }
    if (m_invoice_separately_isSet) {
        obj.insert(QString("invoiceSeparately"), ::OpenAPI::toJsonValue(m_invoice_separately));
    }
    if (m_is_rot_rut_deductible_isSet) {
        obj.insert(QString("isRotRutDeductible"), ::OpenAPI::toJsonValue(m_is_rot_rut_deductible));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_no_isSet) {
        obj.insert(QString("orderNo"), ::OpenAPI::toJsonValue(m_order_no));
    }
    if (m_order_total_isSet) {
        obj.insert(QString("orderTotal"), ::OpenAPI::toJsonValue(m_order_total));
    }
    if (m_order_total_in_base_currency_isSet) {
        obj.insert(QString("orderTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_order_total_in_base_currency));
    }
    if (m_order_type_isSet) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_orig_order_nbr_isSet) {
        obj.insert(QString("origOrderNbr"), ::OpenAPI::toJsonValue(m_orig_order_nbr));
    }
    if (m_orig_order_type_isSet) {
        obj.insert(QString("origOrderType"), ::OpenAPI::toJsonValue(m_orig_order_type));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_ref_isSet) {
        obj.insert(QString("paymentRef"), ::OpenAPI::toJsonValue(m_payment_ref));
    }
    if (m_post_period_isSet) {
        obj.insert(QString("postPeriod"), ::OpenAPI::toJsonValue(m_post_period));
    }
    if (m_preferred_warehouse.isSet()) {
        obj.insert(QString("preferredWarehouse"), ::OpenAPI::toJsonValue(m_preferred_warehouse));
    }
    if (m_print_description_on_invoice_isSet) {
        obj.insert(QString("printDescriptionOnInvoice"), ::OpenAPI::toJsonValue(m_print_description_on_invoice));
    }
    if (m_print_note_on_external_documents_isSet) {
        obj.insert(QString("printNoteOnExternalDocuments"), ::OpenAPI::toJsonValue(m_print_note_on_external_documents));
    }
    if (m_print_note_on_internal_documents_isSet) {
        obj.insert(QString("printNoteOnInternalDocuments"), ::OpenAPI::toJsonValue(m_print_note_on_internal_documents));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_project_cd_isSet) {
        obj.insert(QString("projectCD"), ::OpenAPI::toJsonValue(m_project_cd));
    }
    if (m_request_on_isSet) {
        obj.insert(QString("requestOn"), ::OpenAPI::toJsonValue(m_request_on));
    }
    if (m_residential_delivery_isSet) {
        obj.insert(QString("residentialDelivery"), ::OpenAPI::toJsonValue(m_residential_delivery));
    }
    if (m_sales_person.isSet()) {
        obj.insert(QString("salesPerson"), ::OpenAPI::toJsonValue(m_sales_person));
    }
    if (m_saturday_delivery_isSet) {
        obj.insert(QString("saturdayDelivery"), ::OpenAPI::toJsonValue(m_saturday_delivery));
    }
    if (m_sched_shipment_isSet) {
        obj.insert(QString("schedShipment"), ::OpenAPI::toJsonValue(m_sched_shipment));
    }
    if (m_ship_complete_isSet) {
        obj.insert(QString("shipComplete"), ::OpenAPI::toJsonValue(m_ship_complete));
    }
    if (m_ship_separately_isSet) {
        obj.insert(QString("shipSeparately"), ::OpenAPI::toJsonValue(m_ship_separately));
    }
    if (m_ship_via.isSet()) {
        obj.insert(QString("shipVia"), ::OpenAPI::toJsonValue(m_ship_via));
    }
    if (m_shipments.size() > 0) {
        obj.insert(QString("shipments"), ::OpenAPI::toJsonValue(m_shipments));
    }
    if (m_shipping_terms.isSet()) {
        obj.insert(QString("shippingTerms"), ::OpenAPI::toJsonValue(m_shipping_terms));
    }
    if (m_shipping_zone.isSet()) {
        obj.insert(QString("shippingZone"), ::OpenAPI::toJsonValue(m_shipping_zone));
    }
    if (m_so_billing_address.isSet()) {
        obj.insert(QString("soBillingAddress"), ::OpenAPI::toJsonValue(m_so_billing_address));
    }
    if (m_so_billing_contact.isSet()) {
        obj.insert(QString("soBillingContact"), ::OpenAPI::toJsonValue(m_so_billing_contact));
    }
    if (m_so_shipping_address.isSet()) {
        obj.insert(QString("soShippingAddress"), ::OpenAPI::toJsonValue(m_so_shipping_address));
    }
    if (m_so_shipping_contact.isSet()) {
        obj.insert(QString("soShippingContact"), ::OpenAPI::toJsonValue(m_so_shipping_contact));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_total_isSet) {
        obj.insert(QString("taxTotal"), ::OpenAPI::toJsonValue(m_tax_total));
    }
    if (m_tax_total_in_base_currency_isSet) {
        obj.insert(QString("taxTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_tax_total_in_base_currency));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_transaction_type.isSet()) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    if (m_vat_exempt_total_isSet) {
        obj.insert(QString("vatExemptTotal"), ::OpenAPI::toJsonValue(m_vat_exempt_total));
    }
    if (m_vat_exempt_total_in_base_currency_isSet) {
        obj.insert(QString("vatExemptTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_vat_exempt_total_in_base_currency));
    }
    if (m_vat_taxable_total_isSet) {
        obj.insert(QString("vatTaxableTotal"), ::OpenAPI::toJsonValue(m_vat_taxable_total));
    }
    if (m_vat_taxable_total_in_base_currency_isSet) {
        obj.insert(QString("vatTaxableTotalInBaseCurrency"), ::OpenAPI::toJsonValue(m_vat_taxable_total_in_base_currency));
    }
    return obj;
}

QList<OAIAttachmentDto> OAISalesOrderDto::getAttachments() const {
    return m_attachments;
}
void OAISalesOrderDto::setAttachments(const QList<OAIAttachmentDto> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISalesOrderDto::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISalesOrderDto::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIBranchNumberInSalesOrderDto OAISalesOrderDto::getBranchNumber() const {
    return m_branch_number;
}
void OAISalesOrderDto::setBranchNumber(const OAIBranchNumberInSalesOrderDto &branch_number) {
    m_branch_number = branch_number;
    m_branch_number_isSet = true;
}

bool OAISalesOrderDto::is_branch_number_Set() const{
    return m_branch_number_isSet;
}

bool OAISalesOrderDto::is_branch_number_Valid() const{
    return m_branch_number_isValid;
}

QDateTime OAISalesOrderDto::getCancelBy() const {
    return m_cancel_by;
}
void OAISalesOrderDto::setCancelBy(const QDateTime &cancel_by) {
    m_cancel_by = cancel_by;
    m_cancel_by_isSet = true;
}

bool OAISalesOrderDto::is_cancel_by_Set() const{
    return m_cancel_by_isSet;
}

bool OAISalesOrderDto::is_cancel_by_Valid() const{
    return m_cancel_by_isValid;
}

bool OAISalesOrderDto::isCanceled() const {
    return m_canceled;
}
void OAISalesOrderDto::setCanceled(const bool &canceled) {
    m_canceled = canceled;
    m_canceled_isSet = true;
}

bool OAISalesOrderDto::is_canceled_Set() const{
    return m_canceled_isSet;
}

bool OAISalesOrderDto::is_canceled_Valid() const{
    return m_canceled_isValid;
}

QString OAISalesOrderDto::getCashAccount() const {
    return m_cash_account;
}
void OAISalesOrderDto::setCashAccount(const QString &cash_account) {
    m_cash_account = cash_account;
    m_cash_account_isSet = true;
}

bool OAISalesOrderDto::is_cash_account_Set() const{
    return m_cash_account_isSet;
}

bool OAISalesOrderDto::is_cash_account_Valid() const{
    return m_cash_account_isValid;
}

QDateTime OAISalesOrderDto::getCashDiscountDate() const {
    return m_cash_discount_date;
}
void OAISalesOrderDto::setCashDiscountDate(const QDateTime &cash_discount_date) {
    m_cash_discount_date = cash_discount_date;
    m_cash_discount_date_isSet = true;
}

bool OAISalesOrderDto::is_cash_discount_date_Set() const{
    return m_cash_discount_date_isSet;
}

bool OAISalesOrderDto::is_cash_discount_date_Valid() const{
    return m_cash_discount_date_isValid;
}

QString OAISalesOrderDto::getCommissionAmount() const {
    return m_commission_amount;
}
void OAISalesOrderDto::setCommissionAmount(const QString &commission_amount) {
    m_commission_amount = commission_amount;
    m_commission_amount_isSet = true;
}

bool OAISalesOrderDto::is_commission_amount_Set() const{
    return m_commission_amount_isSet;
}

bool OAISalesOrderDto::is_commission_amount_Valid() const{
    return m_commission_amount_isValid;
}

QString OAISalesOrderDto::getCommissionPercent() const {
    return m_commission_percent;
}
void OAISalesOrderDto::setCommissionPercent(const QString &commission_percent) {
    m_commission_percent = commission_percent;
    m_commission_percent_isSet = true;
}

bool OAISalesOrderDto::is_commission_percent_Set() const{
    return m_commission_percent_isSet;
}

bool OAISalesOrderDto::is_commission_percent_Valid() const{
    return m_commission_percent_isValid;
}

QString OAISalesOrderDto::getCommissionableAmount() const {
    return m_commissionable_amount;
}
void OAISalesOrderDto::setCommissionableAmount(const QString &commissionable_amount) {
    m_commissionable_amount = commissionable_amount;
    m_commissionable_amount_isSet = true;
}

bool OAISalesOrderDto::is_commissionable_amount_Set() const{
    return m_commissionable_amount_isSet;
}

bool OAISalesOrderDto::is_commissionable_amount_Valid() const{
    return m_commissionable_amount_isValid;
}

qint32 OAISalesOrderDto::getContactId() const {
    return m_contact_id;
}
void OAISalesOrderDto::setContactId(const qint32 &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAISalesOrderDto::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAISalesOrderDto::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAISalesOrderDto::getCurrency() const {
    return m_currency;
}
void OAISalesOrderDto::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISalesOrderDto::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISalesOrderDto::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerInSalesOrderDto OAISalesOrderDto::getCustomer() const {
    return m_customer;
}
void OAISalesOrderDto::setCustomer(const OAICustomerInSalesOrderDto &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAISalesOrderDto::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAISalesOrderDto::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAISalesOrderDto::getCustomerOrder() const {
    return m_customer_order;
}
void OAISalesOrderDto::setCustomerOrder(const QString &customer_order) {
    m_customer_order = customer_order;
    m_customer_order_isSet = true;
}

bool OAISalesOrderDto::is_customer_order_Set() const{
    return m_customer_order_isSet;
}

bool OAISalesOrderDto::is_customer_order_Valid() const{
    return m_customer_order_isValid;
}

QString OAISalesOrderDto::getCustomerRefNo() const {
    return m_customer_ref_no;
}
void OAISalesOrderDto::setCustomerRefNo(const QString &customer_ref_no) {
    m_customer_ref_no = customer_ref_no;
    m_customer_ref_no_isSet = true;
}

bool OAISalesOrderDto::is_customer_ref_no_Set() const{
    return m_customer_ref_no_isSet;
}

bool OAISalesOrderDto::is_customer_ref_no_Valid() const{
    return m_customer_ref_no_isValid;
}

OAICustomerVATZoneInSalesOrderDto OAISalesOrderDto::getCustomerVatZone() const {
    return m_customer_vat_zone;
}
void OAISalesOrderDto::setCustomerVatZone(const OAICustomerVATZoneInSalesOrderDto &customer_vat_zone) {
    m_customer_vat_zone = customer_vat_zone;
    m_customer_vat_zone_isSet = true;
}

bool OAISalesOrderDto::is_customer_vat_zone_Set() const{
    return m_customer_vat_zone_isSet;
}

bool OAISalesOrderDto::is_customer_vat_zone_Valid() const{
    return m_customer_vat_zone_isValid;
}

QDateTime OAISalesOrderDto::getDate() const {
    return m_date;
}
void OAISalesOrderDto::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISalesOrderDto::is_date_Set() const{
    return m_date_isSet;
}

bool OAISalesOrderDto::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISalesOrderDto::getDescription() const {
    return m_description;
}
void OAISalesOrderDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesOrderDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesOrderDto::is_description_Valid() const{
    return m_description_isValid;
}

double OAISalesOrderDto::getDiscountTotal() const {
    return m_discount_total;
}
void OAISalesOrderDto::setDiscountTotal(const double &discount_total) {
    m_discount_total = discount_total;
    m_discount_total_isSet = true;
}

bool OAISalesOrderDto::is_discount_total_Set() const{
    return m_discount_total_isSet;
}

bool OAISalesOrderDto::is_discount_total_Valid() const{
    return m_discount_total_isValid;
}

double OAISalesOrderDto::getDiscountTotalInBaseCurrency() const {
    return m_discount_total_in_base_currency;
}
void OAISalesOrderDto::setDiscountTotalInBaseCurrency(const double &discount_total_in_base_currency) {
    m_discount_total_in_base_currency = discount_total_in_base_currency;
    m_discount_total_in_base_currency_isSet = true;
}

bool OAISalesOrderDto::is_discount_total_in_base_currency_Set() const{
    return m_discount_total_in_base_currency_isSet;
}

bool OAISalesOrderDto::is_discount_total_in_base_currency_Valid() const{
    return m_discount_total_in_base_currency_isValid;
}

QDateTime OAISalesOrderDto::getDueDate() const {
    return m_due_date;
}
void OAISalesOrderDto::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAISalesOrderDto::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAISalesOrderDto::is_due_date_Valid() const{
    return m_due_date_isValid;
}

bool OAISalesOrderDto::isEmailed() const {
    return m_emailed;
}
void OAISalesOrderDto::setEmailed(const bool &emailed) {
    m_emailed = emailed;
    m_emailed_isSet = true;
}

bool OAISalesOrderDto::is_emailed_Set() const{
    return m_emailed_isSet;
}

bool OAISalesOrderDto::is_emailed_Valid() const{
    return m_emailed_isValid;
}

QString OAISalesOrderDto::getErrorInfo() const {
    return m_error_info;
}
void OAISalesOrderDto::setErrorInfo(const QString &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAISalesOrderDto::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAISalesOrderDto::is_error_info_Valid() const{
    return m_error_info_isValid;
}

double OAISalesOrderDto::getExchangeRate() const {
    return m_exchange_rate;
}
void OAISalesOrderDto::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAISalesOrderDto::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAISalesOrderDto::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAIFobPointInSalesOrderDto OAISalesOrderDto::getFobPoint() const {
    return m_fob_point;
}
void OAISalesOrderDto::setFobPoint(const OAIFobPointInSalesOrderDto &fob_point) {
    m_fob_point = fob_point;
    m_fob_point_isSet = true;
}

bool OAISalesOrderDto::is_fob_point_Set() const{
    return m_fob_point_isSet;
}

bool OAISalesOrderDto::is_fob_point_Valid() const{
    return m_fob_point_isValid;
}

bool OAISalesOrderDto::isHold() const {
    return m_hold;
}
void OAISalesOrderDto::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAISalesOrderDto::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAISalesOrderDto::is_hold_Valid() const{
    return m_hold_isValid;
}

bool OAISalesOrderDto::isInsurance() const {
    return m_insurance;
}
void OAISalesOrderDto::setInsurance(const bool &insurance) {
    m_insurance = insurance;
    m_insurance_isSet = true;
}

bool OAISalesOrderDto::is_insurance_Set() const{
    return m_insurance_isSet;
}

bool OAISalesOrderDto::is_insurance_Valid() const{
    return m_insurance_isValid;
}

QDateTime OAISalesOrderDto::getInvoiceDate() const {
    return m_invoice_date;
}
void OAISalesOrderDto::setInvoiceDate(const QDateTime &invoice_date) {
    m_invoice_date = invoice_date;
    m_invoice_date_isSet = true;
}

bool OAISalesOrderDto::is_invoice_date_Set() const{
    return m_invoice_date_isSet;
}

bool OAISalesOrderDto::is_invoice_date_Valid() const{
    return m_invoice_date_isValid;
}

QString OAISalesOrderDto::getInvoiceNbr() const {
    return m_invoice_nbr;
}
void OAISalesOrderDto::setInvoiceNbr(const QString &invoice_nbr) {
    m_invoice_nbr = invoice_nbr;
    m_invoice_nbr_isSet = true;
}

bool OAISalesOrderDto::is_invoice_nbr_Set() const{
    return m_invoice_nbr_isSet;
}

bool OAISalesOrderDto::is_invoice_nbr_Valid() const{
    return m_invoice_nbr_isValid;
}

bool OAISalesOrderDto::isInvoiceSeparately() const {
    return m_invoice_separately;
}
void OAISalesOrderDto::setInvoiceSeparately(const bool &invoice_separately) {
    m_invoice_separately = invoice_separately;
    m_invoice_separately_isSet = true;
}

bool OAISalesOrderDto::is_invoice_separately_Set() const{
    return m_invoice_separately_isSet;
}

bool OAISalesOrderDto::is_invoice_separately_Valid() const{
    return m_invoice_separately_isValid;
}

bool OAISalesOrderDto::isIsRotRutDeductible() const {
    return m_is_rot_rut_deductible;
}
void OAISalesOrderDto::setIsRotRutDeductible(const bool &is_rot_rut_deductible) {
    m_is_rot_rut_deductible = is_rot_rut_deductible;
    m_is_rot_rut_deductible_isSet = true;
}

bool OAISalesOrderDto::is_is_rot_rut_deductible_Set() const{
    return m_is_rot_rut_deductible_isSet;
}

bool OAISalesOrderDto::is_is_rot_rut_deductible_Valid() const{
    return m_is_rot_rut_deductible_isValid;
}

QDateTime OAISalesOrderDto::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAISalesOrderDto::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAISalesOrderDto::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAISalesOrderDto::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QList<OAISalesOrderLineDto> OAISalesOrderDto::getLines() const {
    return m_lines;
}
void OAISalesOrderDto::setLines(const QList<OAISalesOrderLineDto> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAISalesOrderDto::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAISalesOrderDto::is_lines_Valid() const{
    return m_lines_isValid;
}

OAILocationInSalesOrderDto OAISalesOrderDto::getLocation() const {
    return m_location;
}
void OAISalesOrderDto::setLocation(const OAILocationInSalesOrderDto &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISalesOrderDto::is_location_Set() const{
    return m_location_isSet;
}

bool OAISalesOrderDto::is_location_Valid() const{
    return m_location_isValid;
}

OAIMetadataDto OAISalesOrderDto::getMetadata() const {
    return m_metadata;
}
void OAISalesOrderDto::setMetadata(const OAIMetadataDto &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISalesOrderDto::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISalesOrderDto::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAISalesOrderDto::getNote() const {
    return m_note;
}
void OAISalesOrderDto::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISalesOrderDto::is_note_Set() const{
    return m_note_isSet;
}

bool OAISalesOrderDto::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISalesOrderDto::getOrderNo() const {
    return m_order_no;
}
void OAISalesOrderDto::setOrderNo(const QString &order_no) {
    m_order_no = order_no;
    m_order_no_isSet = true;
}

bool OAISalesOrderDto::is_order_no_Set() const{
    return m_order_no_isSet;
}

bool OAISalesOrderDto::is_order_no_Valid() const{
    return m_order_no_isValid;
}

double OAISalesOrderDto::getOrderTotal() const {
    return m_order_total;
}
void OAISalesOrderDto::setOrderTotal(const double &order_total) {
    m_order_total = order_total;
    m_order_total_isSet = true;
}

bool OAISalesOrderDto::is_order_total_Set() const{
    return m_order_total_isSet;
}

bool OAISalesOrderDto::is_order_total_Valid() const{
    return m_order_total_isValid;
}

double OAISalesOrderDto::getOrderTotalInBaseCurrency() const {
    return m_order_total_in_base_currency;
}
void OAISalesOrderDto::setOrderTotalInBaseCurrency(const double &order_total_in_base_currency) {
    m_order_total_in_base_currency = order_total_in_base_currency;
    m_order_total_in_base_currency_isSet = true;
}

bool OAISalesOrderDto::is_order_total_in_base_currency_Set() const{
    return m_order_total_in_base_currency_isSet;
}

bool OAISalesOrderDto::is_order_total_in_base_currency_Valid() const{
    return m_order_total_in_base_currency_isValid;
}

QString OAISalesOrderDto::getOrderType() const {
    return m_order_type;
}
void OAISalesOrderDto::setOrderType(const QString &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAISalesOrderDto::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAISalesOrderDto::is_order_type_Valid() const{
    return m_order_type_isValid;
}

QString OAISalesOrderDto::getOrigOrderNbr() const {
    return m_orig_order_nbr;
}
void OAISalesOrderDto::setOrigOrderNbr(const QString &orig_order_nbr) {
    m_orig_order_nbr = orig_order_nbr;
    m_orig_order_nbr_isSet = true;
}

bool OAISalesOrderDto::is_orig_order_nbr_Set() const{
    return m_orig_order_nbr_isSet;
}

bool OAISalesOrderDto::is_orig_order_nbr_Valid() const{
    return m_orig_order_nbr_isValid;
}

QString OAISalesOrderDto::getOrigOrderType() const {
    return m_orig_order_type;
}
void OAISalesOrderDto::setOrigOrderType(const QString &orig_order_type) {
    m_orig_order_type = orig_order_type;
    m_orig_order_type_isSet = true;
}

bool OAISalesOrderDto::is_orig_order_type_Set() const{
    return m_orig_order_type_isSet;
}

bool OAISalesOrderDto::is_orig_order_type_Valid() const{
    return m_orig_order_type_isValid;
}

OAIOwnerInSalesOrderDto OAISalesOrderDto::getOwner() const {
    return m_owner;
}
void OAISalesOrderDto::setOwner(const OAIOwnerInSalesOrderDto &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAISalesOrderDto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAISalesOrderDto::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIPaymentMethodInSalesOrderDto OAISalesOrderDto::getPaymentMethod() const {
    return m_payment_method;
}
void OAISalesOrderDto::setPaymentMethod(const OAIPaymentMethodInSalesOrderDto &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAISalesOrderDto::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAISalesOrderDto::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAISalesOrderDto::getPaymentRef() const {
    return m_payment_ref;
}
void OAISalesOrderDto::setPaymentRef(const QString &payment_ref) {
    m_payment_ref = payment_ref;
    m_payment_ref_isSet = true;
}

bool OAISalesOrderDto::is_payment_ref_Set() const{
    return m_payment_ref_isSet;
}

bool OAISalesOrderDto::is_payment_ref_Valid() const{
    return m_payment_ref_isValid;
}

QString OAISalesOrderDto::getPostPeriod() const {
    return m_post_period;
}
void OAISalesOrderDto::setPostPeriod(const QString &post_period) {
    m_post_period = post_period;
    m_post_period_isSet = true;
}

bool OAISalesOrderDto::is_post_period_Set() const{
    return m_post_period_isSet;
}

bool OAISalesOrderDto::is_post_period_Valid() const{
    return m_post_period_isValid;
}

OAIPreferredWarehouseInSalesOrderDto OAISalesOrderDto::getPreferredWarehouse() const {
    return m_preferred_warehouse;
}
void OAISalesOrderDto::setPreferredWarehouse(const OAIPreferredWarehouseInSalesOrderDto &preferred_warehouse) {
    m_preferred_warehouse = preferred_warehouse;
    m_preferred_warehouse_isSet = true;
}

bool OAISalesOrderDto::is_preferred_warehouse_Set() const{
    return m_preferred_warehouse_isSet;
}

bool OAISalesOrderDto::is_preferred_warehouse_Valid() const{
    return m_preferred_warehouse_isValid;
}

bool OAISalesOrderDto::isPrintDescriptionOnInvoice() const {
    return m_print_description_on_invoice;
}
void OAISalesOrderDto::setPrintDescriptionOnInvoice(const bool &print_description_on_invoice) {
    m_print_description_on_invoice = print_description_on_invoice;
    m_print_description_on_invoice_isSet = true;
}

bool OAISalesOrderDto::is_print_description_on_invoice_Set() const{
    return m_print_description_on_invoice_isSet;
}

bool OAISalesOrderDto::is_print_description_on_invoice_Valid() const{
    return m_print_description_on_invoice_isValid;
}

bool OAISalesOrderDto::isPrintNoteOnExternalDocuments() const {
    return m_print_note_on_external_documents;
}
void OAISalesOrderDto::setPrintNoteOnExternalDocuments(const bool &print_note_on_external_documents) {
    m_print_note_on_external_documents = print_note_on_external_documents;
    m_print_note_on_external_documents_isSet = true;
}

bool OAISalesOrderDto::is_print_note_on_external_documents_Set() const{
    return m_print_note_on_external_documents_isSet;
}

bool OAISalesOrderDto::is_print_note_on_external_documents_Valid() const{
    return m_print_note_on_external_documents_isValid;
}

bool OAISalesOrderDto::isPrintNoteOnInternalDocuments() const {
    return m_print_note_on_internal_documents;
}
void OAISalesOrderDto::setPrintNoteOnInternalDocuments(const bool &print_note_on_internal_documents) {
    m_print_note_on_internal_documents = print_note_on_internal_documents;
    m_print_note_on_internal_documents_isSet = true;
}

bool OAISalesOrderDto::is_print_note_on_internal_documents_Set() const{
    return m_print_note_on_internal_documents_isSet;
}

bool OAISalesOrderDto::is_print_note_on_internal_documents_Valid() const{
    return m_print_note_on_internal_documents_isValid;
}

qint32 OAISalesOrderDto::getPriority() const {
    return m_priority;
}
void OAISalesOrderDto::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAISalesOrderDto::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAISalesOrderDto::is_priority_Valid() const{
    return m_priority_isValid;
}

qint32 OAISalesOrderDto::getProject() const {
    return m_project;
}
void OAISalesOrderDto::setProject(const qint32 &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAISalesOrderDto::is_project_Set() const{
    return m_project_isSet;
}

bool OAISalesOrderDto::is_project_Valid() const{
    return m_project_isValid;
}

QString OAISalesOrderDto::getProjectCd() const {
    return m_project_cd;
}
void OAISalesOrderDto::setProjectCd(const QString &project_cd) {
    m_project_cd = project_cd;
    m_project_cd_isSet = true;
}

bool OAISalesOrderDto::is_project_cd_Set() const{
    return m_project_cd_isSet;
}

bool OAISalesOrderDto::is_project_cd_Valid() const{
    return m_project_cd_isValid;
}

QDateTime OAISalesOrderDto::getRequestOn() const {
    return m_request_on;
}
void OAISalesOrderDto::setRequestOn(const QDateTime &request_on) {
    m_request_on = request_on;
    m_request_on_isSet = true;
}

bool OAISalesOrderDto::is_request_on_Set() const{
    return m_request_on_isSet;
}

bool OAISalesOrderDto::is_request_on_Valid() const{
    return m_request_on_isValid;
}

bool OAISalesOrderDto::isResidentialDelivery() const {
    return m_residential_delivery;
}
void OAISalesOrderDto::setResidentialDelivery(const bool &residential_delivery) {
    m_residential_delivery = residential_delivery;
    m_residential_delivery_isSet = true;
}

bool OAISalesOrderDto::is_residential_delivery_Set() const{
    return m_residential_delivery_isSet;
}

bool OAISalesOrderDto::is_residential_delivery_Valid() const{
    return m_residential_delivery_isValid;
}

OAISalesPersonInSalesOrderDto OAISalesOrderDto::getSalesPerson() const {
    return m_sales_person;
}
void OAISalesOrderDto::setSalesPerson(const OAISalesPersonInSalesOrderDto &sales_person) {
    m_sales_person = sales_person;
    m_sales_person_isSet = true;
}

bool OAISalesOrderDto::is_sales_person_Set() const{
    return m_sales_person_isSet;
}

bool OAISalesOrderDto::is_sales_person_Valid() const{
    return m_sales_person_isValid;
}

bool OAISalesOrderDto::isSaturdayDelivery() const {
    return m_saturday_delivery;
}
void OAISalesOrderDto::setSaturdayDelivery(const bool &saturday_delivery) {
    m_saturday_delivery = saturday_delivery;
    m_saturday_delivery_isSet = true;
}

bool OAISalesOrderDto::is_saturday_delivery_Set() const{
    return m_saturday_delivery_isSet;
}

bool OAISalesOrderDto::is_saturday_delivery_Valid() const{
    return m_saturday_delivery_isValid;
}

QDateTime OAISalesOrderDto::getSchedShipment() const {
    return m_sched_shipment;
}
void OAISalesOrderDto::setSchedShipment(const QDateTime &sched_shipment) {
    m_sched_shipment = sched_shipment;
    m_sched_shipment_isSet = true;
}

bool OAISalesOrderDto::is_sched_shipment_Set() const{
    return m_sched_shipment_isSet;
}

bool OAISalesOrderDto::is_sched_shipment_Valid() const{
    return m_sched_shipment_isValid;
}

QString OAISalesOrderDto::getShipComplete() const {
    return m_ship_complete;
}
void OAISalesOrderDto::setShipComplete(const QString &ship_complete) {
    m_ship_complete = ship_complete;
    m_ship_complete_isSet = true;
}

bool OAISalesOrderDto::is_ship_complete_Set() const{
    return m_ship_complete_isSet;
}

bool OAISalesOrderDto::is_ship_complete_Valid() const{
    return m_ship_complete_isValid;
}

bool OAISalesOrderDto::isShipSeparately() const {
    return m_ship_separately;
}
void OAISalesOrderDto::setShipSeparately(const bool &ship_separately) {
    m_ship_separately = ship_separately;
    m_ship_separately_isSet = true;
}

bool OAISalesOrderDto::is_ship_separately_Set() const{
    return m_ship_separately_isSet;
}

bool OAISalesOrderDto::is_ship_separately_Valid() const{
    return m_ship_separately_isValid;
}

OAIShipViaInSalesOrderDto OAISalesOrderDto::getShipVia() const {
    return m_ship_via;
}
void OAISalesOrderDto::setShipVia(const OAIShipViaInSalesOrderDto &ship_via) {
    m_ship_via = ship_via;
    m_ship_via_isSet = true;
}

bool OAISalesOrderDto::is_ship_via_Set() const{
    return m_ship_via_isSet;
}

bool OAISalesOrderDto::is_ship_via_Valid() const{
    return m_ship_via_isValid;
}

QList<OAISalesOrderShipmentDto> OAISalesOrderDto::getShipments() const {
    return m_shipments;
}
void OAISalesOrderDto::setShipments(const QList<OAISalesOrderShipmentDto> &shipments) {
    m_shipments = shipments;
    m_shipments_isSet = true;
}

bool OAISalesOrderDto::is_shipments_Set() const{
    return m_shipments_isSet;
}

bool OAISalesOrderDto::is_shipments_Valid() const{
    return m_shipments_isValid;
}

OAIShippingTermsInSalesOrderDto OAISalesOrderDto::getShippingTerms() const {
    return m_shipping_terms;
}
void OAISalesOrderDto::setShippingTerms(const OAIShippingTermsInSalesOrderDto &shipping_terms) {
    m_shipping_terms = shipping_terms;
    m_shipping_terms_isSet = true;
}

bool OAISalesOrderDto::is_shipping_terms_Set() const{
    return m_shipping_terms_isSet;
}

bool OAISalesOrderDto::is_shipping_terms_Valid() const{
    return m_shipping_terms_isValid;
}

OAIShippingZoneInSalesOrderDto OAISalesOrderDto::getShippingZone() const {
    return m_shipping_zone;
}
void OAISalesOrderDto::setShippingZone(const OAIShippingZoneInSalesOrderDto &shipping_zone) {
    m_shipping_zone = shipping_zone;
    m_shipping_zone_isSet = true;
}

bool OAISalesOrderDto::is_shipping_zone_Set() const{
    return m_shipping_zone_isSet;
}

bool OAISalesOrderDto::is_shipping_zone_Valid() const{
    return m_shipping_zone_isValid;
}

OAISoBillingAddressInSalesOrderDto OAISalesOrderDto::getSoBillingAddress() const {
    return m_so_billing_address;
}
void OAISalesOrderDto::setSoBillingAddress(const OAISoBillingAddressInSalesOrderDto &so_billing_address) {
    m_so_billing_address = so_billing_address;
    m_so_billing_address_isSet = true;
}

bool OAISalesOrderDto::is_so_billing_address_Set() const{
    return m_so_billing_address_isSet;
}

bool OAISalesOrderDto::is_so_billing_address_Valid() const{
    return m_so_billing_address_isValid;
}

OAISoBillingContactInSalesOrderDto OAISalesOrderDto::getSoBillingContact() const {
    return m_so_billing_contact;
}
void OAISalesOrderDto::setSoBillingContact(const OAISoBillingContactInSalesOrderDto &so_billing_contact) {
    m_so_billing_contact = so_billing_contact;
    m_so_billing_contact_isSet = true;
}

bool OAISalesOrderDto::is_so_billing_contact_Set() const{
    return m_so_billing_contact_isSet;
}

bool OAISalesOrderDto::is_so_billing_contact_Valid() const{
    return m_so_billing_contact_isValid;
}

OAISoShippingAddressInSalesOrderDto OAISalesOrderDto::getSoShippingAddress() const {
    return m_so_shipping_address;
}
void OAISalesOrderDto::setSoShippingAddress(const OAISoShippingAddressInSalesOrderDto &so_shipping_address) {
    m_so_shipping_address = so_shipping_address;
    m_so_shipping_address_isSet = true;
}

bool OAISalesOrderDto::is_so_shipping_address_Set() const{
    return m_so_shipping_address_isSet;
}

bool OAISalesOrderDto::is_so_shipping_address_Valid() const{
    return m_so_shipping_address_isValid;
}

OAISoShippingContactInSalesOrderDto OAISalesOrderDto::getSoShippingContact() const {
    return m_so_shipping_contact;
}
void OAISalesOrderDto::setSoShippingContact(const OAISoShippingContactInSalesOrderDto &so_shipping_contact) {
    m_so_shipping_contact = so_shipping_contact;
    m_so_shipping_contact_isSet = true;
}

bool OAISalesOrderDto::is_so_shipping_contact_Set() const{
    return m_so_shipping_contact_isSet;
}

bool OAISalesOrderDto::is_so_shipping_contact_Valid() const{
    return m_so_shipping_contact_isValid;
}

QString OAISalesOrderDto::getStatus() const {
    return m_status;
}
void OAISalesOrderDto::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISalesOrderDto::is_status_Set() const{
    return m_status_isSet;
}

bool OAISalesOrderDto::is_status_Valid() const{
    return m_status_isValid;
}

double OAISalesOrderDto::getTaxTotal() const {
    return m_tax_total;
}
void OAISalesOrderDto::setTaxTotal(const double &tax_total) {
    m_tax_total = tax_total;
    m_tax_total_isSet = true;
}

bool OAISalesOrderDto::is_tax_total_Set() const{
    return m_tax_total_isSet;
}

bool OAISalesOrderDto::is_tax_total_Valid() const{
    return m_tax_total_isValid;
}

double OAISalesOrderDto::getTaxTotalInBaseCurrency() const {
    return m_tax_total_in_base_currency;
}
void OAISalesOrderDto::setTaxTotalInBaseCurrency(const double &tax_total_in_base_currency) {
    m_tax_total_in_base_currency = tax_total_in_base_currency;
    m_tax_total_in_base_currency_isSet = true;
}

bool OAISalesOrderDto::is_tax_total_in_base_currency_Set() const{
    return m_tax_total_in_base_currency_isSet;
}

bool OAISalesOrderDto::is_tax_total_in_base_currency_Valid() const{
    return m_tax_total_in_base_currency_isValid;
}

OAITermsInSalesOrderDto OAISalesOrderDto::getTerms() const {
    return m_terms;
}
void OAISalesOrderDto::setTerms(const OAITermsInSalesOrderDto &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAISalesOrderDto::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAISalesOrderDto::is_terms_Valid() const{
    return m_terms_isValid;
}

OAITransactionTypeInSalesOrderDto OAISalesOrderDto::getTransactionType() const {
    return m_transaction_type;
}
void OAISalesOrderDto::setTransactionType(const OAITransactionTypeInSalesOrderDto &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAISalesOrderDto::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAISalesOrderDto::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

double OAISalesOrderDto::getVatExemptTotal() const {
    return m_vat_exempt_total;
}
void OAISalesOrderDto::setVatExemptTotal(const double &vat_exempt_total) {
    m_vat_exempt_total = vat_exempt_total;
    m_vat_exempt_total_isSet = true;
}

bool OAISalesOrderDto::is_vat_exempt_total_Set() const{
    return m_vat_exempt_total_isSet;
}

bool OAISalesOrderDto::is_vat_exempt_total_Valid() const{
    return m_vat_exempt_total_isValid;
}

double OAISalesOrderDto::getVatExemptTotalInBaseCurrency() const {
    return m_vat_exempt_total_in_base_currency;
}
void OAISalesOrderDto::setVatExemptTotalInBaseCurrency(const double &vat_exempt_total_in_base_currency) {
    m_vat_exempt_total_in_base_currency = vat_exempt_total_in_base_currency;
    m_vat_exempt_total_in_base_currency_isSet = true;
}

bool OAISalesOrderDto::is_vat_exempt_total_in_base_currency_Set() const{
    return m_vat_exempt_total_in_base_currency_isSet;
}

bool OAISalesOrderDto::is_vat_exempt_total_in_base_currency_Valid() const{
    return m_vat_exempt_total_in_base_currency_isValid;
}

double OAISalesOrderDto::getVatTaxableTotal() const {
    return m_vat_taxable_total;
}
void OAISalesOrderDto::setVatTaxableTotal(const double &vat_taxable_total) {
    m_vat_taxable_total = vat_taxable_total;
    m_vat_taxable_total_isSet = true;
}

bool OAISalesOrderDto::is_vat_taxable_total_Set() const{
    return m_vat_taxable_total_isSet;
}

bool OAISalesOrderDto::is_vat_taxable_total_Valid() const{
    return m_vat_taxable_total_isValid;
}

double OAISalesOrderDto::getVatTaxableTotalInBaseCurrency() const {
    return m_vat_taxable_total_in_base_currency;
}
void OAISalesOrderDto::setVatTaxableTotalInBaseCurrency(const double &vat_taxable_total_in_base_currency) {
    m_vat_taxable_total_in_base_currency = vat_taxable_total_in_base_currency;
    m_vat_taxable_total_in_base_currency_isSet = true;
}

bool OAISalesOrderDto::is_vat_taxable_total_in_base_currency_Set() const{
    return m_vat_taxable_total_in_base_currency_isSet;
}

bool OAISalesOrderDto::is_vat_taxable_total_in_base_currency_Valid() const{
    return m_vat_taxable_total_in_base_currency_isValid;
}

bool OAISalesOrderDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_discount_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commissionable_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_vat_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emailed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fob_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_separately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rot_rut_deductible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_order_nbr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_warehouse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_description_on_invoice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_note_on_external_documents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_note_on_internal_documents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_cd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_residential_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sched_shipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_separately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_via.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_billing_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_so_shipping_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_exempt_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_taxable_total_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesOrderDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
