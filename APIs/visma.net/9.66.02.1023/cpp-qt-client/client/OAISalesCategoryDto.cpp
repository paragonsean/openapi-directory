/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesCategoryDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesCategoryDto::OAISalesCategoryDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesCategoryDto::OAISalesCategoryDto() {
    this->initializeModel();
}

OAISalesCategoryDto::~OAISalesCategoryDto() {}

void OAISalesCategoryDto::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_sub_categories_isSet = false;
    m_sub_categories_isValid = false;
}

void OAISalesCategoryDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesCategoryDto::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryID")]);
    m_category_id_isSet = !json[QString("categoryID")].isNull() && m_category_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentID")]);
    m_parent_id_isSet = !json[QString("parentID")].isNull() && m_parent_id_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_sub_categories_isValid = ::OpenAPI::fromJsonValue(m_sub_categories, json[QString("subCategories")]);
    m_sub_categories_isSet = !json[QString("subCategories")].isNull() && m_sub_categories_isValid;
}

QString OAISalesCategoryDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesCategoryDto::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryID"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentID"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_sub_categories.size() > 0) {
        obj.insert(QString("subCategories"), ::OpenAPI::toJsonValue(m_sub_categories));
    }
    return obj;
}

qint32 OAISalesCategoryDto::getCategoryId() const {
    return m_category_id;
}
void OAISalesCategoryDto::setCategoryId(const qint32 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAISalesCategoryDto::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAISalesCategoryDto::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAISalesCategoryDto::getDescription() const {
    return m_description;
}
void OAISalesCategoryDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesCategoryDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesCategoryDto::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAISalesCategoryDto::getParentId() const {
    return m_parent_id;
}
void OAISalesCategoryDto::setParentId(const qint32 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAISalesCategoryDto::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAISalesCategoryDto::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

qint32 OAISalesCategoryDto::getSortOrder() const {
    return m_sort_order;
}
void OAISalesCategoryDto::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISalesCategoryDto::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISalesCategoryDto::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QList<OAISalesCategoryDto> OAISalesCategoryDto::getSubCategories() const {
    return m_sub_categories;
}
void OAISalesCategoryDto::setSubCategories(const QList<OAISalesCategoryDto> &sub_categories) {
    m_sub_categories = sub_categories;
    m_sub_categories_isSet = true;
}

bool OAISalesCategoryDto::is_sub_categories_Set() const{
    return m_sub_categories_isSet;
}

bool OAISalesCategoryDto::is_sub_categories_Valid() const{
    return m_sub_categories_isValid;
}

bool OAISalesCategoryDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesCategoryDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
