/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookNotificationFeedbackDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookNotificationFeedbackDto::OAIWebhookNotificationFeedbackDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookNotificationFeedbackDto::OAIWebhookNotificationFeedbackDto() {
    this->initializeModel();
}

OAIWebhookNotificationFeedbackDto::~OAIWebhookNotificationFeedbackDto() {}

void OAIWebhookNotificationFeedbackDto::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_success_isSet = false;
    m_is_success_isValid = false;

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIWebhookNotificationFeedbackDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookNotificationFeedbackDto::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_success_isValid = ::OpenAPI::fromJsonValue(m_is_success, json[QString("isSuccess")]);
    m_is_success_isSet = !json[QString("isSuccess")].isNull() && m_is_success_isValid;

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notificationId")]);
    m_notification_id_isSet = !json[QString("notificationId")].isNull() && m_notification_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIWebhookNotificationFeedbackDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookNotificationFeedbackDto::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_success_isSet) {
        obj.insert(QString("isSuccess"), ::OpenAPI::toJsonValue(m_is_success));
    }
    if (m_notification_id_isSet) {
        obj.insert(QString("notificationId"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIWebhookNotificationFeedbackDto::getDescription() const {
    return m_description;
}
void OAIWebhookNotificationFeedbackDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWebhookNotificationFeedbackDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWebhookNotificationFeedbackDto::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIWebhookNotificationFeedbackDto::isIsSuccess() const {
    return m_is_success;
}
void OAIWebhookNotificationFeedbackDto::setIsSuccess(const bool &is_success) {
    m_is_success = is_success;
    m_is_success_isSet = true;
}

bool OAIWebhookNotificationFeedbackDto::is_is_success_Set() const{
    return m_is_success_isSet;
}

bool OAIWebhookNotificationFeedbackDto::is_is_success_Valid() const{
    return m_is_success_isValid;
}

QString OAIWebhookNotificationFeedbackDto::getNotificationId() const {
    return m_notification_id;
}
void OAIWebhookNotificationFeedbackDto::setNotificationId(const QString &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAIWebhookNotificationFeedbackDto::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAIWebhookNotificationFeedbackDto::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

QString OAIWebhookNotificationFeedbackDto::getSource() const {
    return m_source;
}
void OAIWebhookNotificationFeedbackDto::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIWebhookNotificationFeedbackDto::is_source_Set() const{
    return m_source_isSet;
}

bool OAIWebhookNotificationFeedbackDto::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIWebhookNotificationFeedbackDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookNotificationFeedbackDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
