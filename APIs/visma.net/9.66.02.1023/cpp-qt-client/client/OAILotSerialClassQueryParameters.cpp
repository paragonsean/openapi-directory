/**
 * Visma Net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.66.02.1023
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILotSerialClassQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILotSerialClassQueryParameters::OAILotSerialClassQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILotSerialClassQueryParameters::OAILotSerialClassQueryParameters() {
    this->initializeModel();
}

OAILotSerialClassQueryParameters::~OAILotSerialClassQueryParameters() {}

void OAILotSerialClassQueryParameters::initializeModel() {

    m_assignment_method_isSet = false;
    m_assignment_method_isValid = false;

    m_auto_generate_next_number_isSet = false;
    m_auto_generate_next_number_isValid = false;

    m_auto_incremental_value_isSet = false;
    m_auto_incremental_value_isValid = false;

    m_auto_incremental_value_between_classes_isSet = false;
    m_auto_incremental_value_between_classes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_issue_method_isSet = false;
    m_issue_method_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_date_time_condition_isSet = false;
    m_last_modified_date_time_condition_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_required_for_drop_ship_isSet = false;
    m_required_for_drop_ship_isValid = false;

    m_track_expiration_date_isSet = false;
    m_track_expiration_date_isValid = false;

    m_tracking_method_isSet = false;
    m_tracking_method_isValid = false;
}

void OAILotSerialClassQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILotSerialClassQueryParameters::fromJsonObject(QJsonObject json) {

    m_assignment_method_isValid = ::OpenAPI::fromJsonValue(m_assignment_method, json[QString("assignmentMethod")]);
    m_assignment_method_isSet = !json[QString("assignmentMethod")].isNull() && m_assignment_method_isValid;

    m_auto_generate_next_number_isValid = ::OpenAPI::fromJsonValue(m_auto_generate_next_number, json[QString("autoGenerateNextNumber")]);
    m_auto_generate_next_number_isSet = !json[QString("autoGenerateNextNumber")].isNull() && m_auto_generate_next_number_isValid;

    m_auto_incremental_value_isValid = ::OpenAPI::fromJsonValue(m_auto_incremental_value, json[QString("autoIncrementalValue")]);
    m_auto_incremental_value_isSet = !json[QString("autoIncrementalValue")].isNull() && m_auto_incremental_value_isValid;

    m_auto_incremental_value_between_classes_isValid = ::OpenAPI::fromJsonValue(m_auto_incremental_value_between_classes, json[QString("autoIncrementalValueBetweenClasses")]);
    m_auto_incremental_value_between_classes_isSet = !json[QString("autoIncrementalValueBetweenClasses")].isNull() && m_auto_incremental_value_between_classes_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_issue_method_isValid = ::OpenAPI::fromJsonValue(m_issue_method, json[QString("issueMethod")]);
    m_issue_method_isSet = !json[QString("issueMethod")].isNull() && m_issue_method_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_date_time_condition_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time_condition, json[QString("lastModifiedDateTimeCondition")]);
    m_last_modified_date_time_condition_isSet = !json[QString("lastModifiedDateTimeCondition")].isNull() && m_last_modified_date_time_condition_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_required_for_drop_ship_isValid = ::OpenAPI::fromJsonValue(m_required_for_drop_ship, json[QString("requiredForDropShip")]);
    m_required_for_drop_ship_isSet = !json[QString("requiredForDropShip")].isNull() && m_required_for_drop_ship_isValid;

    m_track_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_track_expiration_date, json[QString("trackExpirationDate")]);
    m_track_expiration_date_isSet = !json[QString("trackExpirationDate")].isNull() && m_track_expiration_date_isValid;

    m_tracking_method_isValid = ::OpenAPI::fromJsonValue(m_tracking_method, json[QString("trackingMethod")]);
    m_tracking_method_isSet = !json[QString("trackingMethod")].isNull() && m_tracking_method_isValid;
}

QString OAILotSerialClassQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILotSerialClassQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_method_isSet) {
        obj.insert(QString("assignmentMethod"), ::OpenAPI::toJsonValue(m_assignment_method));
    }
    if (m_auto_generate_next_number_isSet) {
        obj.insert(QString("autoGenerateNextNumber"), ::OpenAPI::toJsonValue(m_auto_generate_next_number));
    }
    if (m_auto_incremental_value_isSet) {
        obj.insert(QString("autoIncrementalValue"), ::OpenAPI::toJsonValue(m_auto_incremental_value));
    }
    if (m_auto_incremental_value_between_classes_isSet) {
        obj.insert(QString("autoIncrementalValueBetweenClasses"), ::OpenAPI::toJsonValue(m_auto_incremental_value_between_classes));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_issue_method_isSet) {
        obj.insert(QString("issueMethod"), ::OpenAPI::toJsonValue(m_issue_method));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_date_time_condition_isSet) {
        obj.insert(QString("lastModifiedDateTimeCondition"), ::OpenAPI::toJsonValue(m_last_modified_date_time_condition));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_required_for_drop_ship_isSet) {
        obj.insert(QString("requiredForDropShip"), ::OpenAPI::toJsonValue(m_required_for_drop_ship));
    }
    if (m_track_expiration_date_isSet) {
        obj.insert(QString("trackExpirationDate"), ::OpenAPI::toJsonValue(m_track_expiration_date));
    }
    if (m_tracking_method_isSet) {
        obj.insert(QString("trackingMethod"), ::OpenAPI::toJsonValue(m_tracking_method));
    }
    return obj;
}

QString OAILotSerialClassQueryParameters::getAssignmentMethod() const {
    return m_assignment_method;
}
void OAILotSerialClassQueryParameters::setAssignmentMethod(const QString &assignment_method) {
    m_assignment_method = assignment_method;
    m_assignment_method_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_assignment_method_Set() const{
    return m_assignment_method_isSet;
}

bool OAILotSerialClassQueryParameters::is_assignment_method_Valid() const{
    return m_assignment_method_isValid;
}

bool OAILotSerialClassQueryParameters::isAutoGenerateNextNumber() const {
    return m_auto_generate_next_number;
}
void OAILotSerialClassQueryParameters::setAutoGenerateNextNumber(const bool &auto_generate_next_number) {
    m_auto_generate_next_number = auto_generate_next_number;
    m_auto_generate_next_number_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_auto_generate_next_number_Set() const{
    return m_auto_generate_next_number_isSet;
}

bool OAILotSerialClassQueryParameters::is_auto_generate_next_number_Valid() const{
    return m_auto_generate_next_number_isValid;
}

QString OAILotSerialClassQueryParameters::getAutoIncrementalValue() const {
    return m_auto_incremental_value;
}
void OAILotSerialClassQueryParameters::setAutoIncrementalValue(const QString &auto_incremental_value) {
    m_auto_incremental_value = auto_incremental_value;
    m_auto_incremental_value_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_auto_incremental_value_Set() const{
    return m_auto_incremental_value_isSet;
}

bool OAILotSerialClassQueryParameters::is_auto_incremental_value_Valid() const{
    return m_auto_incremental_value_isValid;
}

bool OAILotSerialClassQueryParameters::isAutoIncrementalValueBetweenClasses() const {
    return m_auto_incremental_value_between_classes;
}
void OAILotSerialClassQueryParameters::setAutoIncrementalValueBetweenClasses(const bool &auto_incremental_value_between_classes) {
    m_auto_incremental_value_between_classes = auto_incremental_value_between_classes;
    m_auto_incremental_value_between_classes_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_auto_incremental_value_between_classes_Set() const{
    return m_auto_incremental_value_between_classes_isSet;
}

bool OAILotSerialClassQueryParameters::is_auto_incremental_value_between_classes_Valid() const{
    return m_auto_incremental_value_between_classes_isValid;
}

QString OAILotSerialClassQueryParameters::getDescription() const {
    return m_description;
}
void OAILotSerialClassQueryParameters::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_description_Set() const{
    return m_description_isSet;
}

bool OAILotSerialClassQueryParameters::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILotSerialClassQueryParameters::getIssueMethod() const {
    return m_issue_method;
}
void OAILotSerialClassQueryParameters::setIssueMethod(const QString &issue_method) {
    m_issue_method = issue_method;
    m_issue_method_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_issue_method_Set() const{
    return m_issue_method_isSet;
}

bool OAILotSerialClassQueryParameters::is_issue_method_Valid() const{
    return m_issue_method_isValid;
}

QString OAILotSerialClassQueryParameters::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAILotSerialClassQueryParameters::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAILotSerialClassQueryParameters::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAILotSerialClassQueryParameters::getLastModifiedDateTimeCondition() const {
    return m_last_modified_date_time_condition;
}
void OAILotSerialClassQueryParameters::setLastModifiedDateTimeCondition(const QString &last_modified_date_time_condition) {
    m_last_modified_date_time_condition = last_modified_date_time_condition;
    m_last_modified_date_time_condition_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_last_modified_date_time_condition_Set() const{
    return m_last_modified_date_time_condition_isSet;
}

bool OAILotSerialClassQueryParameters::is_last_modified_date_time_condition_Valid() const{
    return m_last_modified_date_time_condition_isValid;
}

qint32 OAILotSerialClassQueryParameters::getPageNumber() const {
    return m_page_number;
}
void OAILotSerialClassQueryParameters::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAILotSerialClassQueryParameters::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAILotSerialClassQueryParameters::getPageSize() const {
    return m_page_size;
}
void OAILotSerialClassQueryParameters::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAILotSerialClassQueryParameters::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAILotSerialClassQueryParameters::isRequiredForDropShip() const {
    return m_required_for_drop_ship;
}
void OAILotSerialClassQueryParameters::setRequiredForDropShip(const bool &required_for_drop_ship) {
    m_required_for_drop_ship = required_for_drop_ship;
    m_required_for_drop_ship_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_required_for_drop_ship_Set() const{
    return m_required_for_drop_ship_isSet;
}

bool OAILotSerialClassQueryParameters::is_required_for_drop_ship_Valid() const{
    return m_required_for_drop_ship_isValid;
}

bool OAILotSerialClassQueryParameters::isTrackExpirationDate() const {
    return m_track_expiration_date;
}
void OAILotSerialClassQueryParameters::setTrackExpirationDate(const bool &track_expiration_date) {
    m_track_expiration_date = track_expiration_date;
    m_track_expiration_date_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_track_expiration_date_Set() const{
    return m_track_expiration_date_isSet;
}

bool OAILotSerialClassQueryParameters::is_track_expiration_date_Valid() const{
    return m_track_expiration_date_isValid;
}

QString OAILotSerialClassQueryParameters::getTrackingMethod() const {
    return m_tracking_method;
}
void OAILotSerialClassQueryParameters::setTrackingMethod(const QString &tracking_method) {
    m_tracking_method = tracking_method;
    m_tracking_method_isSet = true;
}

bool OAILotSerialClassQueryParameters::is_tracking_method_Set() const{
    return m_tracking_method_isSet;
}

bool OAILotSerialClassQueryParameters::is_tracking_method_Valid() const{
    return m_tracking_method_isValid;
}

bool OAILotSerialClassQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_generate_next_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_incremental_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_incremental_value_between_classes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_for_drop_ship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILotSerialClassQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
